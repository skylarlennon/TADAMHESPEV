
SDTest_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c140  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a74  0800c300  0800c300  0001c300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd74  0800cd74  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd74  0800cd74  0001cd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd7c  0800cd7c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd7c  0800cd7c  0001cd7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd80  0800cd80  0001cd80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800cd84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000258c  200001ec  0800cf70  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002778  0800cf70  00022778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000136d1  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c77  00000000  00000000  00033930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  000365a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca5  00000000  00000000  00037620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c2d0  00000000  00000000  000382c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000176de  00000000  00000000  00064595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102d2f  00000000  00000000  0007bc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055b8  00000000  00000000  0017e9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00183f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c2e8 	.word	0x0800c2e8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	0800c2e8 	.word	0x0800c2e8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b970 	b.w	8000f10 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9e08      	ldr	r6, [sp, #32]
 8000c4e:	460d      	mov	r5, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	460f      	mov	r7, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4694      	mov	ip, r2
 8000c5c:	d965      	bls.n	8000d2a <__udivmoddi4+0xe2>
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	b143      	cbz	r3, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c68:	f1c3 0220 	rsb	r2, r3, #32
 8000c6c:	409f      	lsls	r7, r3
 8000c6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c72:	4317      	orrs	r7, r2
 8000c74:	409c      	lsls	r4, r3
 8000c76:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7a:	fa1f f58c 	uxth.w	r5, ip
 8000c7e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c82:	0c22      	lsrs	r2, r4, #16
 8000c84:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c8c:	fb01 f005 	mul.w	r0, r1, r5
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c9c:	f080 811c 	bcs.w	8000ed8 <__udivmoddi4+0x290>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f240 8119 	bls.w	8000ed8 <__udivmoddi4+0x290>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4462      	add	r2, ip
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cba:	fb00 f505 	mul.w	r5, r0, r5
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d90a      	bls.n	8000cd8 <__udivmoddi4+0x90>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x294>
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x294>
 8000cd4:	4464      	add	r4, ip
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11e      	cbz	r6, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40dc      	lsrs	r4, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0xbc>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f000 80ed 	beq.w	8000ed2 <__udivmoddi4+0x28a>
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	fab3 f183 	clz	r1, r3
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	d149      	bne.n	8000da0 <__udivmoddi4+0x158>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	d302      	bcc.n	8000d16 <__udivmoddi4+0xce>
 8000d10:	4282      	cmp	r2, r0
 8000d12:	f200 80f8 	bhi.w	8000f06 <__udivmoddi4+0x2be>
 8000d16:	1a84      	subs	r4, r0, r2
 8000d18:	eb65 0203 	sbc.w	r2, r5, r3
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	4617      	mov	r7, r2
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d0e2      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	e9c6 4700 	strd	r4, r7, [r6]
 8000d28:	e7df      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d2a:	b902      	cbnz	r2, 8000d2e <__udivmoddi4+0xe6>
 8000d2c:	deff      	udf	#255	; 0xff
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8090 	bne.w	8000e58 <__udivmoddi4+0x210>
 8000d38:	1a8a      	subs	r2, r1, r2
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2101      	movs	r1, #1
 8000d44:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d48:	fb07 2015 	mls	r0, r7, r5, r2
 8000d4c:	0c22      	lsrs	r2, r4, #16
 8000d4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d52:	fb0e f005 	mul.w	r0, lr, r5
 8000d56:	4290      	cmp	r0, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x124>
 8000d5a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d5e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x122>
 8000d64:	4290      	cmp	r0, r2
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2b8>
 8000d6a:	4645      	mov	r5, r8
 8000d6c:	1a12      	subs	r2, r2, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d74:	fb07 2210 	mls	r2, r7, r0, r2
 8000d78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x14e>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x14c>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2c2>
 8000d94:	4610      	mov	r0, r2
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d9e:	e79f      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000da0:	f1c1 0720 	rsb	r7, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa05 f401 	lsl.w	r4, r5, r1
 8000db2:	fa20 f307 	lsr.w	r3, r0, r7
 8000db6:	40fd      	lsrs	r5, r7
 8000db8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dca:	0c1c      	lsrs	r4, r3, #16
 8000dcc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dd4:	42a5      	cmp	r5, r4
 8000dd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dda:	fa00 f001 	lsl.w	r0, r0, r1
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b0>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2b4>
 8000dec:	42a5      	cmp	r5, r4
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2b4>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4464      	add	r4, ip
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	b29d      	uxth	r5, r3
 8000dfc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e00:	fb09 4413 	mls	r4, r9, r3, r4
 8000e04:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e08:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1da>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e26:	fba3 9502 	umull	r9, r5, r3, r2
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46ae      	mov	lr, r5
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x29c>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x298>
 8000e38:	b156      	cbz	r6, 8000e50 <__udivmoddi4+0x208>
 8000e3a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e3e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e42:	fa04 f707 	lsl.w	r7, r4, r7
 8000e46:	40ca      	lsrs	r2, r1
 8000e48:	40cc      	lsrs	r4, r1
 8000e4a:	4317      	orrs	r7, r2
 8000e4c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e58:	f1c3 0120 	rsb	r1, r3, #32
 8000e5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e60:	fa20 f201 	lsr.w	r2, r0, r1
 8000e64:	fa25 f101 	lsr.w	r1, r5, r1
 8000e68:	409d      	lsls	r5, r3
 8000e6a:	432a      	orrs	r2, r5
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1510 	mls	r5, r7, r0, r1
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e82:	fb00 f50e 	mul.w	r5, r0, lr
 8000e86:	428d      	cmp	r5, r1
 8000e88:	fa04 f403 	lsl.w	r4, r4, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x258>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e98:	428d      	cmp	r5, r1
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1b49      	subs	r1, r1, r5
 8000ea2:	b292      	uxth	r2, r2
 8000ea4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ea8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	fb05 f10e 	mul.w	r1, r5, lr
 8000eb4:	4291      	cmp	r1, r2
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x282>
 8000eb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ebc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec6:	3d02      	subs	r5, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	1a52      	subs	r2, r2, r1
 8000ecc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0xfc>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xa2>
 8000ed8:	4639      	mov	r1, r7
 8000eda:	e6e6      	b.n	8000caa <__udivmoddi4+0x62>
 8000edc:	4610      	mov	r0, r2
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x90>
 8000ee0:	4548      	cmp	r0, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f0>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eec:	3b01      	subs	r3, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f0>
 8000ef0:	4645      	mov	r5, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x282>
 8000ef4:	462b      	mov	r3, r5
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1da>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x258>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b0>
 8000f00:	3d02      	subs	r5, #2
 8000f02:	4462      	add	r2, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x124>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e70a      	b.n	8000d20 <__udivmoddi4+0xd8>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x14e>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1e:	4804      	ldr	r0, [pc, #16]	; (8000f30 <SELECT+0x1c>)
 8000f20:	f001 feb0 	bl	8002c84 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f24:	2001      	movs	r0, #1
 8000f26:	f001 fc05 	bl	8002734 <HAL_Delay>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	48001400 	.word	0x48001400

08000f34 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f3e:	4804      	ldr	r0, [pc, #16]	; (8000f50 <DESELECT+0x1c>)
 8000f40:	f001 fea0 	bl	8002c84 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f001 fbf5 	bl	8002734 <HAL_Delay>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	48001400 	.word	0x48001400

08000f54 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f5e:	bf00      	nop
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <SPI_TxByte+0x30>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d1f8      	bne.n	8000f60 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f6e:	1df9      	adds	r1, r7, #7
 8000f70:	2364      	movs	r3, #100	; 0x64
 8000f72:	2201      	movs	r2, #1
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <SPI_TxByte+0x30>)
 8000f76:	f003 fc04 	bl	8004782 <HAL_SPI_Transmit>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000210 	.word	0x20000210

08000f88 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f94:	bf00      	nop
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <SPI_TxBuffer+0x30>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d1f8      	bne.n	8000f96 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000fa4:	887a      	ldrh	r2, [r7, #2]
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <SPI_TxBuffer+0x30>)
 8000fac:	f003 fbe9 	bl	8004782 <HAL_SPI_Transmit>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000210 	.word	0x20000210

08000fbc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000fc2:	23ff      	movs	r3, #255	; 0xff
 8000fc4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fc6:	bf00      	nop
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <SPI_RxByte+0x34>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d1f8      	bne.n	8000fc8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000fd6:	1dba      	adds	r2, r7, #6
 8000fd8:	1df9      	adds	r1, r7, #7
 8000fda:	2364      	movs	r3, #100	; 0x64
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <SPI_RxByte+0x34>)
 8000fe2:	f003 fd43 	bl	8004a6c <HAL_SPI_TransmitReceive>

	return data;
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000210 	.word	0x20000210

08000ff4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000ffc:	f7ff ffde 	bl	8000fbc <SPI_RxByte>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	701a      	strb	r2, [r3, #0]
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <SD_ReadyWait+0x30>)
 8001018:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800101c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800101e:	f7ff ffcd 	bl	8000fbc <SPI_RxByte>
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2bff      	cmp	r3, #255	; 0xff
 800102a:	d003      	beq.n	8001034 <SD_ReadyWait+0x24>
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SD_ReadyWait+0x30>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f4      	bne.n	800101e <SD_ReadyWait+0xe>

	return res;
 8001034:	79fb      	ldrb	r3, [r7, #7]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000020a 	.word	0x2000020a

08001044 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800104a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800104e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001050:	f7ff ff70 	bl	8000f34 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	e005      	b.n	8001066 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800105a:	20ff      	movs	r0, #255	; 0xff
 800105c:	f7ff ff7a 	bl	8000f54 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	3301      	adds	r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2b09      	cmp	r3, #9
 800106a:	ddf6      	ble.n	800105a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800106c:	f7ff ff52 	bl	8000f14 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001070:	2340      	movs	r3, #64	; 0x40
 8001072:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001084:	2395      	movs	r3, #149	; 0x95
 8001086:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001088:	463b      	mov	r3, r7
 800108a:	2106      	movs	r1, #6
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff7b 	bl	8000f88 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001092:	e002      	b.n	800109a <SD_PowerOn+0x56>
	{
		cnt--;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3b01      	subs	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800109a:	f7ff ff8f 	bl	8000fbc <SPI_RxByte>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d002      	beq.n	80010aa <SD_PowerOn+0x66>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f4      	bne.n	8001094 <SD_PowerOn+0x50>
	}

	DESELECT();
 80010aa:	f7ff ff43 	bl	8000f34 <DESELECT>
	SPI_TxByte(0XFF);
 80010ae:	20ff      	movs	r0, #255	; 0xff
 80010b0:	f7ff ff50 	bl	8000f54 <SPI_TxByte>

	PowerFlag = 1;
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <SD_PowerOn+0x80>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000020d 	.word	0x2000020d

080010c8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <SD_PowerOff+0x14>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	2000020d 	.word	0x2000020d

080010e0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <SD_CheckPower+0x14>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	2000020d 	.word	0x2000020d

080010f8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <SD_RxDataBlock+0x58>)
 8001104:	22c8      	movs	r2, #200	; 0xc8
 8001106:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001108:	f7ff ff58 	bl	8000fbc <SPI_RxByte>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2bff      	cmp	r3, #255	; 0xff
 8001114:	d103      	bne.n	800111e <SD_RxDataBlock+0x26>
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <SD_RxDataBlock+0x58>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f4      	bne.n	8001108 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	2bfe      	cmp	r3, #254	; 0xfe
 8001122:	d001      	beq.n	8001128 <SD_RxDataBlock+0x30>
 8001124:	2300      	movs	r3, #0
 8001126:	e00f      	b.n	8001148 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff60 	bl	8000ff4 <SPI_RxBytePtr>
	} while(len--);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	1e5a      	subs	r2, r3, #1
 8001138:	603a      	str	r2, [r7, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f4      	bne.n	8001128 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800113e:	f7ff ff3d 	bl	8000fbc <SPI_RxByte>
	SPI_RxByte();
 8001142:	f7ff ff3b 	bl	8000fbc <SPI_RxByte>

	return TRUE;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000208 	.word	0x20000208

08001154 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001164:	f7ff ff54 	bl	8001010 <SD_ReadyWait>
 8001168:	4603      	mov	r3, r0
 800116a:	2bff      	cmp	r3, #255	; 0xff
 800116c:	d001      	beq.n	8001172 <SD_TxDataBlock+0x1e>
 800116e:	2300      	movs	r3, #0
 8001170:	e02f      	b.n	80011d2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001172:	78fb      	ldrb	r3, [r7, #3]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff feed 	bl	8000f54 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	2bfd      	cmp	r3, #253	; 0xfd
 800117e:	d020      	beq.n	80011c2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff feff 	bl	8000f88 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800118a:	f7ff ff17 	bl	8000fbc <SPI_RxByte>
		SPI_RxByte();
 800118e:	f7ff ff15 	bl	8000fbc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001192:	e00b      	b.n	80011ac <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001194:	f7ff ff12 	bl	8000fbc <SPI_RxByte>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	2b05      	cmp	r3, #5
 80011a4:	d006      	beq.n	80011b4 <SD_TxDataBlock+0x60>
			i++;
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	3301      	adds	r3, #1
 80011aa:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80011ac:	7bbb      	ldrb	r3, [r7, #14]
 80011ae:	2b40      	cmp	r3, #64	; 0x40
 80011b0:	d9f0      	bls.n	8001194 <SD_TxDataBlock+0x40>
 80011b2:	e000      	b.n	80011b6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80011b4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80011b6:	bf00      	nop
 80011b8:	f7ff ff00 	bl	8000fbc <SPI_RxByte>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0fa      	beq.n	80011b8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d101      	bne.n	80011d0 <SD_TxDataBlock+0x7c>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	6039      	str	r1, [r7, #0]
 80011e4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80011e6:	f7ff ff13 	bl	8001010 <SD_ReadyWait>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2bff      	cmp	r3, #255	; 0xff
 80011ee:	d001      	beq.n	80011f4 <SD_SendCmd+0x1a>
 80011f0:	23ff      	movs	r3, #255	; 0xff
 80011f2:	e042      	b.n	800127a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff feac 	bl	8000f54 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	0e1b      	lsrs	r3, r3, #24
 8001200:	b2db      	uxtb	r3, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fea6 	bl	8000f54 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	0c1b      	lsrs	r3, r3, #16
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fea0 	bl	8000f54 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	0a1b      	lsrs	r3, r3, #8
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fe9a 	bl	8000f54 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fe95 	bl	8000f54 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b40      	cmp	r3, #64	; 0x40
 800122e:	d102      	bne.n	8001236 <SD_SendCmd+0x5c>
 8001230:	2395      	movs	r3, #149	; 0x95
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e007      	b.n	8001246 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b48      	cmp	r3, #72	; 0x48
 800123a:	d102      	bne.n	8001242 <SD_SendCmd+0x68>
 800123c:	2387      	movs	r3, #135	; 0x87
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	e001      	b.n	8001246 <SD_SendCmd+0x6c>
	else crc = 1;
 8001242:	2301      	movs	r3, #1
 8001244:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fe83 	bl	8000f54 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b4c      	cmp	r3, #76	; 0x4c
 8001252:	d101      	bne.n	8001258 <SD_SendCmd+0x7e>
 8001254:	f7ff feb2 	bl	8000fbc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001258:	230a      	movs	r3, #10
 800125a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800125c:	f7ff feae 	bl	8000fbc <SPI_RxByte>
 8001260:	4603      	mov	r3, r0
 8001262:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001264:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001268:	2b00      	cmp	r3, #0
 800126a:	da05      	bge.n	8001278 <SD_SendCmd+0x9e>
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	3b01      	subs	r3, #1
 8001270:	73bb      	strb	r3, [r7, #14]
 8001272:	7bbb      	ldrb	r3, [r7, #14]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f1      	bne.n	800125c <SD_SendCmd+0x82>

	return res;
 8001278:	7b7b      	ldrb	r3, [r7, #13]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SD_disk_initialize+0x14>
 8001294:	2301      	movs	r3, #1
 8001296:	e0d1      	b.n	800143c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001298:	4b6a      	ldr	r3, [pc, #424]	; (8001444 <SD_disk_initialize+0x1c0>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <SD_disk_initialize+0x2a>
 80012a6:	4b67      	ldr	r3, [pc, #412]	; (8001444 <SD_disk_initialize+0x1c0>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	e0c6      	b.n	800143c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80012ae:	f7ff fec9 	bl	8001044 <SD_PowerOn>

	/* slave select */
	SELECT();
 80012b2:	f7ff fe2f 	bl	8000f14 <SELECT>

	/* check disk type */
	type = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80012ba:	2100      	movs	r1, #0
 80012bc:	2040      	movs	r0, #64	; 0x40
 80012be:	f7ff ff8c 	bl	80011da <SD_SendCmd>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	f040 80a1 	bne.w	800140c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80012ca:	4b5f      	ldr	r3, [pc, #380]	; (8001448 <SD_disk_initialize+0x1c4>)
 80012cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012d0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80012d2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80012d6:	2048      	movs	r0, #72	; 0x48
 80012d8:	f7ff ff7f 	bl	80011da <SD_SendCmd>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d155      	bne.n	800138e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e00c      	b.n	8001302 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80012e8:	7bfc      	ldrb	r4, [r7, #15]
 80012ea:	f7ff fe67 	bl	8000fbc <SPI_RxByte>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	f104 0310 	add.w	r3, r4, #16
 80012f6:	443b      	add	r3, r7
 80012f8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	3301      	adds	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d9ef      	bls.n	80012e8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001308:	7abb      	ldrb	r3, [r7, #10]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d17e      	bne.n	800140c <SD_disk_initialize+0x188>
 800130e:	7afb      	ldrb	r3, [r7, #11]
 8001310:	2baa      	cmp	r3, #170	; 0xaa
 8001312:	d17b      	bne.n	800140c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001314:	2100      	movs	r1, #0
 8001316:	2077      	movs	r0, #119	; 0x77
 8001318:	f7ff ff5f 	bl	80011da <SD_SendCmd>
 800131c:	4603      	mov	r3, r0
 800131e:	2b01      	cmp	r3, #1
 8001320:	d807      	bhi.n	8001332 <SD_disk_initialize+0xae>
 8001322:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001326:	2069      	movs	r0, #105	; 0x69
 8001328:	f7ff ff57 	bl	80011da <SD_SendCmd>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d004      	beq.n	800133c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001332:	4b45      	ldr	r3, [pc, #276]	; (8001448 <SD_disk_initialize+0x1c4>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1ec      	bne.n	8001314 <SD_disk_initialize+0x90>
 800133a:	e000      	b.n	800133e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800133c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800133e:	4b42      	ldr	r3, [pc, #264]	; (8001448 <SD_disk_initialize+0x1c4>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d062      	beq.n	800140c <SD_disk_initialize+0x188>
 8001346:	2100      	movs	r1, #0
 8001348:	207a      	movs	r0, #122	; 0x7a
 800134a:	f7ff ff46 	bl	80011da <SD_SendCmd>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d15b      	bne.n	800140c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e00c      	b.n	8001374 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800135a:	7bfc      	ldrb	r4, [r7, #15]
 800135c:	f7ff fe2e 	bl	8000fbc <SPI_RxByte>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	f104 0310 	add.w	r3, r4, #16
 8001368:	443b      	add	r3, r7
 800136a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	3301      	adds	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d9ef      	bls.n	800135a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800137a:	7a3b      	ldrb	r3, [r7, #8]
 800137c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SD_disk_initialize+0x104>
 8001384:	230c      	movs	r3, #12
 8001386:	e000      	b.n	800138a <SD_disk_initialize+0x106>
 8001388:	2304      	movs	r3, #4
 800138a:	73bb      	strb	r3, [r7, #14]
 800138c:	e03e      	b.n	800140c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800138e:	2100      	movs	r1, #0
 8001390:	2077      	movs	r0, #119	; 0x77
 8001392:	f7ff ff22 	bl	80011da <SD_SendCmd>
 8001396:	4603      	mov	r3, r0
 8001398:	2b01      	cmp	r3, #1
 800139a:	d808      	bhi.n	80013ae <SD_disk_initialize+0x12a>
 800139c:	2100      	movs	r1, #0
 800139e:	2069      	movs	r0, #105	; 0x69
 80013a0:	f7ff ff1b 	bl	80011da <SD_SendCmd>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d801      	bhi.n	80013ae <SD_disk_initialize+0x12a>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e000      	b.n	80013b0 <SD_disk_initialize+0x12c>
 80013ae:	2301      	movs	r3, #1
 80013b0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80013b2:	7bbb      	ldrb	r3, [r7, #14]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d10e      	bne.n	80013d6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80013b8:	2100      	movs	r1, #0
 80013ba:	2077      	movs	r0, #119	; 0x77
 80013bc:	f7ff ff0d 	bl	80011da <SD_SendCmd>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d80e      	bhi.n	80013e4 <SD_disk_initialize+0x160>
 80013c6:	2100      	movs	r1, #0
 80013c8:	2069      	movs	r0, #105	; 0x69
 80013ca:	f7ff ff06 	bl	80011da <SD_SendCmd>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d107      	bne.n	80013e4 <SD_disk_initialize+0x160>
 80013d4:	e00c      	b.n	80013f0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013d6:	2100      	movs	r1, #0
 80013d8:	2041      	movs	r0, #65	; 0x41
 80013da:	f7ff fefe 	bl	80011da <SD_SendCmd>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <SD_disk_initialize+0x1c4>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1e2      	bne.n	80013b2 <SD_disk_initialize+0x12e>
 80013ec:	e000      	b.n	80013f0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013ee:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <SD_disk_initialize+0x1c4>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d007      	beq.n	8001408 <SD_disk_initialize+0x184>
 80013f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fc:	2050      	movs	r0, #80	; 0x50
 80013fe:	f7ff feec 	bl	80011da <SD_SendCmd>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SD_disk_initialize+0x188>
 8001408:	2300      	movs	r3, #0
 800140a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800140c:	4a0f      	ldr	r2, [pc, #60]	; (800144c <SD_disk_initialize+0x1c8>)
 800140e:	7bbb      	ldrb	r3, [r7, #14]
 8001410:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001412:	f7ff fd8f 	bl	8000f34 <DESELECT>
	SPI_RxByte();
 8001416:	f7ff fdd1 	bl	8000fbc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d008      	beq.n	8001432 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <SD_disk_initialize+0x1c0>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <SD_disk_initialize+0x1c0>)
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	e001      	b.n	8001436 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001432:	f7ff fe49 	bl	80010c8 <SD_PowerOff>
	}

	return Stat;
 8001436:	4b03      	ldr	r3, [pc, #12]	; (8001444 <SD_disk_initialize+0x1c0>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b2db      	uxtb	r3, r3
}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}
 8001444:	20000000 	.word	0x20000000
 8001448:	20000208 	.word	0x20000208
 800144c:	2000020c 	.word	0x2000020c

08001450 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SD_disk_status+0x14>
 8001460:	2301      	movs	r3, #1
 8001462:	e002      	b.n	800146a <SD_disk_status+0x1a>
	return Stat;
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <SD_disk_status+0x28>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b2db      	uxtb	r3, r3
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000000 	.word	0x20000000

0800147c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	4603      	mov	r3, r0
 800148a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <SD_disk_read+0x1c>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <SD_disk_read+0x20>
 8001498:	2304      	movs	r3, #4
 800149a:	e051      	b.n	8001540 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <SD_disk_read+0xcc>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SD_disk_read+0x32>
 80014aa:	2303      	movs	r3, #3
 80014ac:	e048      	b.n	8001540 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80014ae:	4b27      	ldr	r3, [pc, #156]	; (800154c <SD_disk_read+0xd0>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <SD_disk_read+0x44>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	025b      	lsls	r3, r3, #9
 80014be:	607b      	str	r3, [r7, #4]

	SELECT();
 80014c0:	f7ff fd28 	bl	8000f14 <SELECT>

	if (count == 1)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d111      	bne.n	80014ee <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	2051      	movs	r0, #81	; 0x51
 80014ce:	f7ff fe84 	bl	80011da <SD_SendCmd>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d129      	bne.n	800152c <SD_disk_read+0xb0>
 80014d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014dc:	68b8      	ldr	r0, [r7, #8]
 80014de:	f7ff fe0b 	bl	80010f8 <SD_RxDataBlock>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d021      	beq.n	800152c <SD_disk_read+0xb0>
 80014e8:	2300      	movs	r3, #0
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	e01e      	b.n	800152c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	2052      	movs	r0, #82	; 0x52
 80014f2:	f7ff fe72 	bl	80011da <SD_SendCmd>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d117      	bne.n	800152c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80014fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001500:	68b8      	ldr	r0, [r7, #8]
 8001502:	f7ff fdf9 	bl	80010f8 <SD_RxDataBlock>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00a      	beq.n	8001522 <SD_disk_read+0xa6>
				buff += 512;
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001512:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	3b01      	subs	r3, #1
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1ed      	bne.n	80014fc <SD_disk_read+0x80>
 8001520:	e000      	b.n	8001524 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001522:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001524:	2100      	movs	r1, #0
 8001526:	204c      	movs	r0, #76	; 0x4c
 8001528:	f7ff fe57 	bl	80011da <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800152c:	f7ff fd02 	bl	8000f34 <DESELECT>
	SPI_RxByte();
 8001530:	f7ff fd44 	bl	8000fbc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	bf14      	ite	ne
 800153a:	2301      	movne	r3, #1
 800153c:	2300      	moveq	r3, #0
 800153e:	b2db      	uxtb	r3, r3
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000000 	.word	0x20000000
 800154c:	2000020c 	.word	0x2000020c

08001550 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <SD_disk_write+0x1c>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <SD_disk_write+0x20>
 800156c:	2304      	movs	r3, #4
 800156e:	e06b      	b.n	8001648 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001570:	4b37      	ldr	r3, [pc, #220]	; (8001650 <SD_disk_write+0x100>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SD_disk_write+0x32>
 800157e:	2303      	movs	r3, #3
 8001580:	e062      	b.n	8001648 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001582:	4b33      	ldr	r3, [pc, #204]	; (8001650 <SD_disk_write+0x100>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SD_disk_write+0x44>
 8001590:	2302      	movs	r3, #2
 8001592:	e059      	b.n	8001648 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001594:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <SD_disk_write+0x104>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <SD_disk_write+0x56>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	025b      	lsls	r3, r3, #9
 80015a4:	607b      	str	r3, [r7, #4]

	SELECT();
 80015a6:	f7ff fcb5 	bl	8000f14 <SELECT>

	if (count == 1)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d110      	bne.n	80015d2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	2058      	movs	r0, #88	; 0x58
 80015b4:	f7ff fe11 	bl	80011da <SD_SendCmd>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d13a      	bne.n	8001634 <SD_disk_write+0xe4>
 80015be:	21fe      	movs	r1, #254	; 0xfe
 80015c0:	68b8      	ldr	r0, [r7, #8]
 80015c2:	f7ff fdc7 	bl	8001154 <SD_TxDataBlock>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d033      	beq.n	8001634 <SD_disk_write+0xe4>
			count = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	e030      	b.n	8001634 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <SD_disk_write+0x104>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d007      	beq.n	80015ee <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80015de:	2100      	movs	r1, #0
 80015e0:	2077      	movs	r0, #119	; 0x77
 80015e2:	f7ff fdfa 	bl	80011da <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	2057      	movs	r0, #87	; 0x57
 80015ea:	f7ff fdf6 	bl	80011da <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	2059      	movs	r0, #89	; 0x59
 80015f2:	f7ff fdf2 	bl	80011da <SD_SendCmd>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d11b      	bne.n	8001634 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015fc:	21fc      	movs	r1, #252	; 0xfc
 80015fe:	68b8      	ldr	r0, [r7, #8]
 8001600:	f7ff fda8 	bl	8001154 <SD_TxDataBlock>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00a      	beq.n	8001620 <SD_disk_write+0xd0>
				buff += 512;
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001610:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	3b01      	subs	r3, #1
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1ee      	bne.n	80015fc <SD_disk_write+0xac>
 800161e:	e000      	b.n	8001622 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001620:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001622:	21fd      	movs	r1, #253	; 0xfd
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff fd95 	bl	8001154 <SD_TxDataBlock>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <SD_disk_write+0xe4>
			{
				count = 1;
 8001630:	2301      	movs	r3, #1
 8001632:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001634:	f7ff fc7e 	bl	8000f34 <DESELECT>
	SPI_RxByte();
 8001638:	f7ff fcc0 	bl	8000fbc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	bf14      	ite	ne
 8001642:	2301      	movne	r3, #1
 8001644:	2300      	moveq	r3, #0
 8001646:	b2db      	uxtb	r3, r3
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000000 	.word	0x20000000
 8001654:	2000020c 	.word	0x2000020c

08001658 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b08b      	sub	sp, #44	; 0x2c
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	603a      	str	r2, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	460b      	mov	r3, r1
 8001666:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SD_disk_ioctl+0x1e>
 8001672:	2304      	movs	r3, #4
 8001674:	e115      	b.n	80018a2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800167c:	79bb      	ldrb	r3, [r7, #6]
 800167e:	2b05      	cmp	r3, #5
 8001680:	d124      	bne.n	80016cc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d012      	beq.n	80016b0 <SD_disk_ioctl+0x58>
 800168a:	2b02      	cmp	r3, #2
 800168c:	dc1a      	bgt.n	80016c4 <SD_disk_ioctl+0x6c>
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <SD_disk_ioctl+0x40>
 8001692:	2b01      	cmp	r3, #1
 8001694:	d006      	beq.n	80016a4 <SD_disk_ioctl+0x4c>
 8001696:	e015      	b.n	80016c4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001698:	f7ff fd16 	bl	80010c8 <SD_PowerOff>
			res = RES_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016a2:	e0fc      	b.n	800189e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80016a4:	f7ff fcce 	bl	8001044 <SD_PowerOn>
			res = RES_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016ae:	e0f6      	b.n	800189e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	1c5c      	adds	r4, r3, #1
 80016b4:	f7ff fd14 	bl	80010e0 <SD_CheckPower>
 80016b8:	4603      	mov	r3, r0
 80016ba:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016c2:	e0ec      	b.n	800189e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80016c4:	2304      	movs	r3, #4
 80016c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016ca:	e0e8      	b.n	800189e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016cc:	4b77      	ldr	r3, [pc, #476]	; (80018ac <SD_disk_ioctl+0x254>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SD_disk_ioctl+0x86>
 80016da:	2303      	movs	r3, #3
 80016dc:	e0e1      	b.n	80018a2 <SD_disk_ioctl+0x24a>

		SELECT();
 80016de:	f7ff fc19 	bl	8000f14 <SELECT>

		switch (ctrl)
 80016e2:	79bb      	ldrb	r3, [r7, #6]
 80016e4:	2b0d      	cmp	r3, #13
 80016e6:	f200 80cb 	bhi.w	8001880 <SD_disk_ioctl+0x228>
 80016ea:	a201      	add	r2, pc, #4	; (adr r2, 80016f0 <SD_disk_ioctl+0x98>)
 80016ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f0:	080017eb 	.word	0x080017eb
 80016f4:	08001729 	.word	0x08001729
 80016f8:	080017db 	.word	0x080017db
 80016fc:	08001881 	.word	0x08001881
 8001700:	08001881 	.word	0x08001881
 8001704:	08001881 	.word	0x08001881
 8001708:	08001881 	.word	0x08001881
 800170c:	08001881 	.word	0x08001881
 8001710:	08001881 	.word	0x08001881
 8001714:	08001881 	.word	0x08001881
 8001718:	08001881 	.word	0x08001881
 800171c:	080017fd 	.word	0x080017fd
 8001720:	08001821 	.word	0x08001821
 8001724:	08001845 	.word	0x08001845
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001728:	2100      	movs	r1, #0
 800172a:	2049      	movs	r0, #73	; 0x49
 800172c:	f7ff fd55 	bl	80011da <SD_SendCmd>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	f040 80a8 	bne.w	8001888 <SD_disk_ioctl+0x230>
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	2110      	movs	r1, #16
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fcda 	bl	80010f8 <SD_RxDataBlock>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 809e 	beq.w	8001888 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800174c:	7b3b      	ldrb	r3, [r7, #12]
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10e      	bne.n	8001774 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001756:	7d7b      	ldrb	r3, [r7, #21]
 8001758:	b29a      	uxth	r2, r3
 800175a:	7d3b      	ldrb	r3, [r7, #20]
 800175c:	b29b      	uxth	r3, r3
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b29b      	uxth	r3, r3
 8001762:	4413      	add	r3, r2
 8001764:	b29b      	uxth	r3, r3
 8001766:	3301      	adds	r3, #1
 8001768:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800176a:	8bfb      	ldrh	r3, [r7, #30]
 800176c:	029a      	lsls	r2, r3, #10
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	e02e      	b.n	80017d2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001774:	7c7b      	ldrb	r3, [r7, #17]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	b2da      	uxtb	r2, r3
 800177c:	7dbb      	ldrb	r3, [r7, #22]
 800177e:	09db      	lsrs	r3, r3, #7
 8001780:	b2db      	uxtb	r3, r3
 8001782:	4413      	add	r3, r2
 8001784:	b2da      	uxtb	r2, r3
 8001786:	7d7b      	ldrb	r3, [r7, #21]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f003 0306 	and.w	r3, r3, #6
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4413      	add	r3, r2
 8001794:	b2db      	uxtb	r3, r3
 8001796:	3302      	adds	r3, #2
 8001798:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800179c:	7d3b      	ldrb	r3, [r7, #20]
 800179e:	099b      	lsrs	r3, r3, #6
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	7cfb      	ldrb	r3, [r7, #19]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	7cbb      	ldrb	r3, [r7, #18]
 80017b2:	029b      	lsls	r3, r3, #10
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4413      	add	r3, r2
 80017be:	b29b      	uxth	r3, r3
 80017c0:	3301      	adds	r3, #1
 80017c2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80017c4:	8bfa      	ldrh	r2, [r7, #30]
 80017c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017ca:	3b09      	subs	r3, #9
 80017cc:	409a      	lsls	r2, r3
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80017d8:	e056      	b.n	8001888 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017e8:	e055      	b.n	8001896 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80017ea:	f7ff fc11 	bl	8001010 <SD_ReadyWait>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2bff      	cmp	r3, #255	; 0xff
 80017f2:	d14b      	bne.n	800188c <SD_disk_ioctl+0x234>
 80017f4:	2300      	movs	r3, #0
 80017f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017fa:	e047      	b.n	800188c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017fc:	2100      	movs	r1, #0
 80017fe:	2049      	movs	r0, #73	; 0x49
 8001800:	f7ff fceb 	bl	80011da <SD_SendCmd>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d142      	bne.n	8001890 <SD_disk_ioctl+0x238>
 800180a:	2110      	movs	r1, #16
 800180c:	6a38      	ldr	r0, [r7, #32]
 800180e:	f7ff fc73 	bl	80010f8 <SD_RxDataBlock>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d03b      	beq.n	8001890 <SD_disk_ioctl+0x238>
 8001818:	2300      	movs	r3, #0
 800181a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800181e:	e037      	b.n	8001890 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001820:	2100      	movs	r1, #0
 8001822:	204a      	movs	r0, #74	; 0x4a
 8001824:	f7ff fcd9 	bl	80011da <SD_SendCmd>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d132      	bne.n	8001894 <SD_disk_ioctl+0x23c>
 800182e:	2110      	movs	r1, #16
 8001830:	6a38      	ldr	r0, [r7, #32]
 8001832:	f7ff fc61 	bl	80010f8 <SD_RxDataBlock>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d02b      	beq.n	8001894 <SD_disk_ioctl+0x23c>
 800183c:	2300      	movs	r3, #0
 800183e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001842:	e027      	b.n	8001894 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001844:	2100      	movs	r1, #0
 8001846:	207a      	movs	r0, #122	; 0x7a
 8001848:	f7ff fcc7 	bl	80011da <SD_SendCmd>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d116      	bne.n	8001880 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001852:	2300      	movs	r3, #0
 8001854:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001858:	e00b      	b.n	8001872 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800185a:	6a3c      	ldr	r4, [r7, #32]
 800185c:	1c63      	adds	r3, r4, #1
 800185e:	623b      	str	r3, [r7, #32]
 8001860:	f7ff fbac 	bl	8000fbc <SPI_RxByte>
 8001864:	4603      	mov	r3, r0
 8001866:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001868:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800186c:	3301      	adds	r3, #1
 800186e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001872:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001876:	2b03      	cmp	r3, #3
 8001878:	d9ef      	bls.n	800185a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001880:	2304      	movs	r3, #4
 8001882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001886:	e006      	b.n	8001896 <SD_disk_ioctl+0x23e>
			break;
 8001888:	bf00      	nop
 800188a:	e004      	b.n	8001896 <SD_disk_ioctl+0x23e>
			break;
 800188c:	bf00      	nop
 800188e:	e002      	b.n	8001896 <SD_disk_ioctl+0x23e>
			break;
 8001890:	bf00      	nop
 8001892:	e000      	b.n	8001896 <SD_disk_ioctl+0x23e>
			break;
 8001894:	bf00      	nop
		}

		DESELECT();
 8001896:	f7ff fb4d 	bl	8000f34 <DESELECT>
		SPI_RxByte();
 800189a:	f7ff fb8f 	bl	8000fbc <SPI_RxByte>
	}

	return res;
 800189e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	372c      	adds	r7, #44	; 0x2c
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000000 	.word	0x20000000

080018b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) //WORKING!!!!!
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b09e      	sub	sp, #120	; 0x78
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b6:	f000 fec8 	bl	800264a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ba:	f000 f97b 	bl	8001bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018be:	f000 fa49 	bl	8001d54 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80018c2:	f000 f9bd 	bl	8001c40 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 80018c6:	f000 fa07 	bl	8001cd8 <MX_SPI1_Init>
  MX_FATFS_Init();
 80018ca:	f004 fb4d 	bl	8005f68 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	/* Waiting for the Micro SD module to initialize */
	HAL_Delay(500);
 80018ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018d2:	f000 ff2f 	bl	8002734 <HAL_Delay>

	fres = f_mount(&fs, "", 1);
 80018d6:	2201      	movs	r2, #1
 80018d8:	499a      	ldr	r1, [pc, #616]	; (8001b44 <main+0x294>)
 80018da:	489b      	ldr	r0, [pc, #620]	; (8001b48 <main+0x298>)
 80018dc:	f006 fd8c 	bl	80083f8 <f_mount>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b99      	ldr	r3, [pc, #612]	; (8001b4c <main+0x29c>)
 80018e6:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 80018e8:	4b98      	ldr	r3, [pc, #608]	; (8001b4c <main+0x29c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d103      	bne.n	80018f8 <main+0x48>
		printf("Micro SD card is mounted successfully!\n");
 80018f0:	4897      	ldr	r0, [pc, #604]	; (8001b50 <main+0x2a0>)
 80018f2:	f008 fb61 	bl	8009fb8 <puts>
 80018f6:	e006      	b.n	8001906 <main+0x56>
	} else if (fres != FR_OK) {
 80018f8:	4b94      	ldr	r3, [pc, #592]	; (8001b4c <main+0x29c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <main+0x56>
		printf("Micro SD card's mount error!\n");
 8001900:	4894      	ldr	r0, [pc, #592]	; (8001b54 <main+0x2a4>)
 8001902:	f008 fb59 	bl	8009fb8 <puts>
	}

	// FA_OPEN_APPEND opens file if it exists and if not then creates it,
	// the pointer is set at the end of the file for appending
	fres = f_open(&fil, "log-file.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8001906:	2233      	movs	r2, #51	; 0x33
 8001908:	4993      	ldr	r1, [pc, #588]	; (8001b58 <main+0x2a8>)
 800190a:	4894      	ldr	r0, [pc, #592]	; (8001b5c <main+0x2ac>)
 800190c:	f006 fdba 	bl	8008484 <f_open>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	4b8d      	ldr	r3, [pc, #564]	; (8001b4c <main+0x29c>)
 8001916:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001918:	4b8c      	ldr	r3, [pc, #560]	; (8001b4c <main+0x29c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d103      	bne.n	8001928 <main+0x78>
		printf("File opened for reading and checking the free space.\n");
 8001920:	488f      	ldr	r0, [pc, #572]	; (8001b60 <main+0x2b0>)
 8001922:	f008 fb49 	bl	8009fb8 <puts>
 8001926:	e006      	b.n	8001936 <main+0x86>
	} else if (fres != FR_OK) {
 8001928:	4b88      	ldr	r3, [pc, #544]	; (8001b4c <main+0x29c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <main+0x86>
		printf(
 8001930:	488c      	ldr	r0, [pc, #560]	; (8001b64 <main+0x2b4>)
 8001932:	f008 fb41 	bl	8009fb8 <puts>
				"File was not opened for reading and checking the free space!\n");
	}

	fres = f_getfree("", &fre_clust, &pfs);
 8001936:	4a8c      	ldr	r2, [pc, #560]	; (8001b68 <main+0x2b8>)
 8001938:	498c      	ldr	r1, [pc, #560]	; (8001b6c <main+0x2bc>)
 800193a:	4882      	ldr	r0, [pc, #520]	; (8001b44 <main+0x294>)
 800193c:	f007 fb09 	bl	8008f52 <f_getfree>
 8001940:	4603      	mov	r3, r0
 8001942:	461a      	mov	r2, r3
 8001944:	4b81      	ldr	r3, [pc, #516]	; (8001b4c <main+0x29c>)
 8001946:	701a      	strb	r2, [r3, #0]
	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001948:	4b87      	ldr	r3, [pc, #540]	; (8001b68 <main+0x2b8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	3b02      	subs	r3, #2
 8001950:	4a85      	ldr	r2, [pc, #532]	; (8001b68 <main+0x2b8>)
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	8952      	ldrh	r2, [r2, #10]
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fdea 	bl	8000534 <__aeabi_ui2d>
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	4b82      	ldr	r3, [pc, #520]	; (8001b70 <main+0x2c0>)
 8001966:	f7fe fe5f 	bl	8000628 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f931 	bl	8000bd8 <__aeabi_d2uiz>
 8001976:	4603      	mov	r3, r0
 8001978:	4a7e      	ldr	r2, [pc, #504]	; (8001b74 <main+0x2c4>)
 800197a:	6013      	str	r3, [r2, #0]
	freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 800197c:	4b7a      	ldr	r3, [pc, #488]	; (8001b68 <main+0x2b8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	895b      	ldrh	r3, [r3, #10]
 8001982:	461a      	mov	r2, r3
 8001984:	4b79      	ldr	r3, [pc, #484]	; (8001b6c <main+0x2bc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fdd1 	bl	8000534 <__aeabi_ui2d>
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b76      	ldr	r3, [pc, #472]	; (8001b70 <main+0x2c0>)
 8001998:	f7fe fe46 	bl	8000628 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f918 	bl	8000bd8 <__aeabi_d2uiz>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4a73      	ldr	r2, [pc, #460]	; (8001b78 <main+0x2c8>)
 80019ac:	6013      	str	r3, [r2, #0]
	char mSz[12];
	sprintf(mSz, "%lu", freeSpace);
 80019ae:	4b72      	ldr	r3, [pc, #456]	; (8001b78 <main+0x2c8>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019b6:	4971      	ldr	r1, [pc, #452]	; (8001b7c <main+0x2cc>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f008 fb05 	bl	8009fc8 <siprintf>
	if (fres == FR_OK) {
 80019be:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <main+0x29c>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10b      	bne.n	80019de <main+0x12e>
		printf("The free space is: ");
 80019c6:	486e      	ldr	r0, [pc, #440]	; (8001b80 <main+0x2d0>)
 80019c8:	f008 fa88 	bl	8009edc <iprintf>
		printf(mSz);
 80019cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019d0:	4618      	mov	r0, r3
 80019d2:	f008 fa83 	bl	8009edc <iprintf>
		printf("\n");
 80019d6:	200a      	movs	r0, #10
 80019d8:	f008 fa92 	bl	8009f00 <putchar>
 80019dc:	e006      	b.n	80019ec <main+0x13c>
	} else if (fres != FR_OK) {
 80019de:	4b5b      	ldr	r3, [pc, #364]	; (8001b4c <main+0x29c>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <main+0x13c>
		printf("The free space could not be determined!\n");
 80019e6:	4867      	ldr	r0, [pc, #412]	; (8001b84 <main+0x2d4>)
 80019e8:	f008 fae6 	bl	8009fb8 <puts>
	}
	printf("writing to file\n");
 80019ec:	4866      	ldr	r0, [pc, #408]	; (8001b88 <main+0x2d8>)
 80019ee:	f008 fae3 	bl	8009fb8 <puts>
	for (uint8_t i = 0; i < 10; i++) {
 80019f2:	2300      	movs	r3, #0
 80019f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80019f8:	e008      	b.n	8001a0c <main+0x15c>
		f_puts("This text is written in the file.\n", &fil);
 80019fa:	4958      	ldr	r1, [pc, #352]	; (8001b5c <main+0x2ac>)
 80019fc:	4863      	ldr	r0, [pc, #396]	; (8001b8c <main+0x2dc>)
 80019fe:	f007 fc11 	bl	8009224 <f_puts>
	for (uint8_t i = 0; i < 10; i++) {
 8001a02:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001a06:	3301      	adds	r3, #1
 8001a08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001a0c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001a10:	2b09      	cmp	r3, #9
 8001a12:	d9f2      	bls.n	80019fa <main+0x14a>
	}

	fres = f_close(&fil);
 8001a14:	4851      	ldr	r0, [pc, #324]	; (8001b5c <main+0x2ac>)
 8001a16:	f007 fa72 	bl	8008efe <f_close>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	; (8001b4c <main+0x29c>)
 8001a20:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001a22:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <main+0x29c>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d103      	bne.n	8001a32 <main+0x182>
		printf("The file is closed.\n");
 8001a2a:	4859      	ldr	r0, [pc, #356]	; (8001b90 <main+0x2e0>)
 8001a2c:	f008 fac4 	bl	8009fb8 <puts>
 8001a30:	e006      	b.n	8001a40 <main+0x190>
	} else if (fres != FR_OK) {
 8001a32:	4b46      	ldr	r3, [pc, #280]	; (8001b4c <main+0x29c>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <main+0x190>
		printf("The file was not closed.\n");
 8001a3a:	4856      	ldr	r0, [pc, #344]	; (8001b94 <main+0x2e4>)
 8001a3c:	f008 fabc 	bl	8009fb8 <puts>
	}

	/* Open file to read */
	fres = f_open(&fil, "log-file.txt", FA_READ);
 8001a40:	2201      	movs	r2, #1
 8001a42:	4945      	ldr	r1, [pc, #276]	; (8001b58 <main+0x2a8>)
 8001a44:	4845      	ldr	r0, [pc, #276]	; (8001b5c <main+0x2ac>)
 8001a46:	f006 fd1d 	bl	8008484 <f_open>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	; (8001b4c <main+0x29c>)
 8001a50:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001a52:	4b3e      	ldr	r3, [pc, #248]	; (8001b4c <main+0x29c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d103      	bne.n	8001a62 <main+0x1b2>
		printf("File opened for reading.\n");
 8001a5a:	484f      	ldr	r0, [pc, #316]	; (8001b98 <main+0x2e8>)
 8001a5c:	f008 faac 	bl	8009fb8 <puts>
 8001a60:	e011      	b.n	8001a86 <main+0x1d6>
	} else if (fres != FR_OK) {
 8001a62:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <main+0x29c>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00d      	beq.n	8001a86 <main+0x1d6>
		printf("File was not opened for reading!\n");
 8001a6a:	484c      	ldr	r0, [pc, #304]	; (8001b9c <main+0x2ec>)
 8001a6c:	f008 faa4 	bl	8009fb8 <puts>
	}

	while (f_gets(buffer, sizeof(buffer), &fil)) {
 8001a70:	e009      	b.n	8001a86 <main+0x1d6>
		char mRd[100];
		sprintf(mRd, "%s", buffer);
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	4a4a      	ldr	r2, [pc, #296]	; (8001ba0 <main+0x2f0>)
 8001a76:	494b      	ldr	r1, [pc, #300]	; (8001ba4 <main+0x2f4>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f008 faa5 	bl	8009fc8 <siprintf>
		printf(mRd);
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	4618      	mov	r0, r3
 8001a82:	f008 fa2b 	bl	8009edc <iprintf>
	while (f_gets(buffer, sizeof(buffer), &fil)) {
 8001a86:	4a35      	ldr	r2, [pc, #212]	; (8001b5c <main+0x2ac>)
 8001a88:	2164      	movs	r1, #100	; 0x64
 8001a8a:	4845      	ldr	r0, [pc, #276]	; (8001ba0 <main+0x2f0>)
 8001a8c:	f007 fb16 	bl	80090bc <f_gets>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1ed      	bne.n	8001a72 <main+0x1c2>

	}

	/* Close file */
	fres = f_close(&fil);
 8001a96:	4831      	ldr	r0, [pc, #196]	; (8001b5c <main+0x2ac>)
 8001a98:	f007 fa31 	bl	8008efe <f_close>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <main+0x29c>)
 8001aa2:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001aa4:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <main+0x29c>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d103      	bne.n	8001ab4 <main+0x204>
		printf("The file is closed.\n");
 8001aac:	4838      	ldr	r0, [pc, #224]	; (8001b90 <main+0x2e0>)
 8001aae:	f008 fa83 	bl	8009fb8 <puts>
 8001ab2:	e006      	b.n	8001ac2 <main+0x212>
	} else if (fres != FR_OK) {
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <main+0x29c>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <main+0x212>
		printf("The file was not closed.\n");
 8001abc:	4835      	ldr	r0, [pc, #212]	; (8001b94 <main+0x2e4>)
 8001abe:	f008 fa7b 	bl	8009fb8 <puts>
	 printf("The Micro SD was not unmounted!");
	 }*/
	//begin ben tests


	fres = f_open(&fil, "BEN-file.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8001ac2:	2233      	movs	r2, #51	; 0x33
 8001ac4:	4938      	ldr	r1, [pc, #224]	; (8001ba8 <main+0x2f8>)
 8001ac6:	4825      	ldr	r0, [pc, #148]	; (8001b5c <main+0x2ac>)
 8001ac8:	f006 fcdc 	bl	8008484 <f_open>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <main+0x29c>)
 8001ad2:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <main+0x29c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d103      	bne.n	8001ae4 <main+0x234>
		printf("File opened for reading and checking the free space.\n");
 8001adc:	4820      	ldr	r0, [pc, #128]	; (8001b60 <main+0x2b0>)
 8001ade:	f008 fa6b 	bl	8009fb8 <puts>
 8001ae2:	e006      	b.n	8001af2 <main+0x242>
	} else if (fres != FR_OK) {
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <main+0x29c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <main+0x242>
		printf(
 8001aec:	481d      	ldr	r0, [pc, #116]	; (8001b64 <main+0x2b4>)
 8001aee:	f008 fa63 	bl	8009fb8 <puts>
				"File was not opened for reading and checking the free space!\n");
	}

	printf("writing to file\n");
 8001af2:	4825      	ldr	r0, [pc, #148]	; (8001b88 <main+0x2d8>)
 8001af4:	f008 fa60 	bl	8009fb8 <puts>
	for (uint8_t i = 0; i < 10; i++) {
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001afe:	e008      	b.n	8001b12 <main+0x262>
		f_puts("This text is written in the file.\n", &fil);
 8001b00:	4916      	ldr	r1, [pc, #88]	; (8001b5c <main+0x2ac>)
 8001b02:	4822      	ldr	r0, [pc, #136]	; (8001b8c <main+0x2dc>)
 8001b04:	f007 fb8e 	bl	8009224 <f_puts>
	for (uint8_t i = 0; i < 10; i++) {
 8001b08:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001b12:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b16:	2b09      	cmp	r3, #9
 8001b18:	d9f2      	bls.n	8001b00 <main+0x250>
	}

	f_mount(NULL, "", 1);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4909      	ldr	r1, [pc, #36]	; (8001b44 <main+0x294>)
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f006 fc6a 	bl	80083f8 <f_mount>
	if (fres == FR_OK) {
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <main+0x29c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d103      	bne.n	8001b34 <main+0x284>
		printf("The Micro SD card is unmounted!\n");
 8001b2c:	481f      	ldr	r0, [pc, #124]	; (8001bac <main+0x2fc>)
 8001b2e:	f008 fa43 	bl	8009fb8 <puts>
 8001b32:	e006      	b.n	8001b42 <main+0x292>
	} else if (fres != FR_OK) {
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <main+0x29c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <main+0x292>
		printf("The Micro SD was not unmounted!");
 8001b3c:	481c      	ldr	r0, [pc, #112]	; (8001bb0 <main+0x300>)
 8001b3e:	f008 f9cd 	bl	8009edc <iprintf>

   /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <main+0x292>
 8001b44:	0800c300 	.word	0x0800c300
 8001b48:	20000274 	.word	0x20000274
 8001b4c:	200022e0 	.word	0x200022e0
 8001b50:	0800c304 	.word	0x0800c304
 8001b54:	0800c32c 	.word	0x0800c32c
 8001b58:	0800c34c 	.word	0x0800c34c
 8001b5c:	200012b0 	.word	0x200012b0
 8001b60:	0800c35c 	.word	0x0800c35c
 8001b64:	0800c394 	.word	0x0800c394
 8001b68:	200012ac 	.word	0x200012ac
 8001b6c:	200022e4 	.word	0x200022e4
 8001b70:	3fe00000 	.word	0x3fe00000
 8001b74:	200022e8 	.word	0x200022e8
 8001b78:	200022ec 	.word	0x200022ec
 8001b7c:	0800c3d4 	.word	0x0800c3d4
 8001b80:	0800c3d8 	.word	0x0800c3d8
 8001b84:	0800c3ec 	.word	0x0800c3ec
 8001b88:	0800c414 	.word	0x0800c414
 8001b8c:	0800c424 	.word	0x0800c424
 8001b90:	0800c448 	.word	0x0800c448
 8001b94:	0800c45c 	.word	0x0800c45c
 8001b98:	0800c478 	.word	0x0800c478
 8001b9c:	0800c494 	.word	0x0800c494
 8001ba0:	200022f0 	.word	0x200022f0
 8001ba4:	0800c4b8 	.word	0x0800c4b8
 8001ba8:	0800c4bc 	.word	0x0800c4bc
 8001bac:	0800c4cc 	.word	0x0800c4cc
 8001bb0:	0800c4ec 	.word	0x0800c4ec

08001bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b096      	sub	sp, #88	; 0x58
 8001bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	2244      	movs	r2, #68	; 0x44
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f008 faf8 	bl	800a1b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc8:	463b      	mov	r3, r7
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bda:	f001 f88b 	bl	8002cf4 <HAL_PWREx_ControlVoltageScaling>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001be4:	f000 fb0e 	bl	8002204 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001be8:	2310      	movs	r3, #16
 8001bea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bec:	2301      	movs	r3, #1
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001bf4:	2360      	movs	r3, #96	; 0x60
 8001bf6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	4618      	mov	r0, r3
 8001c02:	f001 f92b 	bl	8002e5c <HAL_RCC_OscConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001c0c:	f000 fafa 	bl	8002204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c10:	230f      	movs	r3, #15
 8001c12:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c24:	463b      	mov	r3, r7
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f001 fd31 	bl	8003690 <HAL_RCC_ClockConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001c34:	f000 fae6 	bl	8002204 <Error_Handler>
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3758      	adds	r7, #88	; 0x58
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <MX_LPUART1_UART_Init+0x90>)
 8001c46:	4a23      	ldr	r2, [pc, #140]	; (8001cd4 <MX_LPUART1_UART_Init+0x94>)
 8001c48:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001c4a:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <MX_LPUART1_UART_Init+0x90>)
 8001c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c50:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c52:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <MX_LPUART1_UART_Init+0x90>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <MX_LPUART1_UART_Init+0x90>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001c5e:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <MX_LPUART1_UART_Init+0x90>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001c64:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <MX_LPUART1_UART_Init+0x90>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <MX_LPUART1_UART_Init+0x90>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c70:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <MX_LPUART1_UART_Init+0x90>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <MX_LPUART1_UART_Init+0x90>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <MX_LPUART1_UART_Init+0x90>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <MX_LPUART1_UART_Init+0x90>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001c88:	4811      	ldr	r0, [pc, #68]	; (8001cd0 <MX_LPUART1_UART_Init+0x90>)
 8001c8a:	f003 fa75 	bl	8005178 <HAL_UART_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c94:	f000 fab6 	bl	8002204 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c98:	2100      	movs	r1, #0
 8001c9a:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <MX_LPUART1_UART_Init+0x90>)
 8001c9c:	f004 f89a 	bl	8005dd4 <HAL_UARTEx_SetTxFifoThreshold>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ca6:	f000 faad 	bl	8002204 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001caa:	2100      	movs	r1, #0
 8001cac:	4808      	ldr	r0, [pc, #32]	; (8001cd0 <MX_LPUART1_UART_Init+0x90>)
 8001cae:	f004 f8cf 	bl	8005e50 <HAL_UARTEx_SetRxFifoThreshold>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001cb8:	f000 faa4 	bl	8002204 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001cbc:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <MX_LPUART1_UART_Init+0x90>)
 8001cbe:	f004 f850 	bl	8005d62 <HAL_UARTEx_DisableFifoMode>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001cc8:	f000 fa9c 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20002354 	.word	0x20002354
 8001cd4:	40008000 	.word	0x40008000

08001cd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001cde:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <MX_SPI1_Init+0x78>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001ce4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ce8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf0:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001cf2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cf6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d26:	2207      	movs	r2, #7
 8001d28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d32:	2208      	movs	r2, #8
 8001d34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <MX_SPI1_Init+0x74>)
 8001d38:	f002 fc80 	bl	800463c <HAL_SPI_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d42:	f000 fa5f 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000210 	.word	0x20000210
 8001d50:	40013000 	.word	0x40013000

08001d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08e      	sub	sp, #56	; 0x38
 8001d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d6a:	4bb2      	ldr	r3, [pc, #712]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	4ab1      	ldr	r2, [pc, #708]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001d70:	f043 0310 	orr.w	r3, r3, #16
 8001d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d76:	4baf      	ldr	r3, [pc, #700]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	623b      	str	r3, [r7, #32]
 8001d80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d82:	4bac      	ldr	r3, [pc, #688]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	4aab      	ldr	r2, [pc, #684]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8e:	4ba9      	ldr	r3, [pc, #676]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d9a:	4ba6      	ldr	r3, [pc, #664]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	4aa5      	ldr	r2, [pc, #660]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001da0:	f043 0320 	orr.w	r3, r3, #32
 8001da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da6:	4ba3      	ldr	r3, [pc, #652]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db2:	4ba0      	ldr	r3, [pc, #640]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	4a9f      	ldr	r2, [pc, #636]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dbe:	4b9d      	ldr	r3, [pc, #628]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b9a      	ldr	r3, [pc, #616]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	4a99      	ldr	r2, [pc, #612]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd6:	4b97      	ldr	r3, [pc, #604]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	4b94      	ldr	r3, [pc, #592]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	4a93      	ldr	r2, [pc, #588]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dee:	4b91      	ldr	r3, [pc, #580]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfa:	4b8e      	ldr	r3, [pc, #568]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	4a8d      	ldr	r2, [pc, #564]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e06:	4b8b      	ldr	r3, [pc, #556]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e12:	4b88      	ldr	r3, [pc, #544]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	4a87      	ldr	r2, [pc, #540]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1e:	4b85      	ldr	r3, [pc, #532]	; (8002034 <MX_GPIO_Init+0x2e0>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001e2a:	f001 f807 	bl	8002e3c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e34:	4880      	ldr	r0, [pc, #512]	; (8002038 <MX_GPIO_Init+0x2e4>)
 8001e36:	f000 ff25 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e3a:	230c      	movs	r3, #12
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001e4a:	230d      	movs	r3, #13
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e52:	4619      	mov	r1, r3
 8001e54:	4879      	ldr	r0, [pc, #484]	; (800203c <MX_GPIO_Init+0x2e8>)
 8001e56:	f000 fd83 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5e:	2312      	movs	r3, #18
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e72:	4619      	mov	r1, r3
 8001e74:	4870      	ldr	r0, [pc, #448]	; (8002038 <MX_GPIO_Init+0x2e4>)
 8001e76:	f000 fd73 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001e8a:	230d      	movs	r3, #13
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e92:	4619      	mov	r1, r3
 8001e94:	4868      	ldr	r0, [pc, #416]	; (8002038 <MX_GPIO_Init+0x2e4>)
 8001e96:	f000 fd63 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e9a:	233f      	movs	r3, #63	; 0x3f
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e9e:	230b      	movs	r3, #11
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4864      	ldr	r0, [pc, #400]	; (8002040 <MX_GPIO_Init+0x2ec>)
 8001eae:	f000 fd57 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed0:	f000 fd46 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001ed4:	230a      	movs	r3, #10
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ed8:	230b      	movs	r3, #11
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eea:	f000 fd39 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001efe:	2302      	movs	r3, #2
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f06:	4619      	mov	r1, r3
 8001f08:	484e      	ldr	r0, [pc, #312]	; (8002044 <MX_GPIO_Init+0x2f0>)
 8001f0a:	f000 fd29 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f12:	230b      	movs	r3, #11
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4848      	ldr	r0, [pc, #288]	; (8002044 <MX_GPIO_Init+0x2f0>)
 8001f22:	f000 fd1d 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001f26:	2344      	movs	r3, #68	; 0x44
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f36:	4619      	mov	r1, r3
 8001f38:	4842      	ldr	r0, [pc, #264]	; (8002044 <MX_GPIO_Init+0x2f0>)
 8001f3a:	f000 fd11 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f44:	2301      	movs	r3, #1
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f54:	4619      	mov	r1, r3
 8001f56:	4838      	ldr	r0, [pc, #224]	; (8002038 <MX_GPIO_Init+0x2e4>)
 8001f58:	f000 fd02 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001f5c:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f76:	4619      	mov	r1, r3
 8001f78:	4830      	ldr	r0, [pc, #192]	; (800203c <MX_GPIO_Init+0x2e8>)
 8001f7a:	f000 fcf1 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001f7e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001f90:	2303      	movs	r3, #3
 8001f92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4828      	ldr	r0, [pc, #160]	; (800203c <MX_GPIO_Init+0x2e8>)
 8001f9c:	f000 fce0 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4821      	ldr	r0, [pc, #132]	; (8002044 <MX_GPIO_Init+0x2f0>)
 8001fbe:	f000 fccf 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001fc2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001fd4:	230d      	movs	r3, #13
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4819      	ldr	r0, [pc, #100]	; (8002044 <MX_GPIO_Init+0x2f0>)
 8001fe0:	f000 fcbe 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001fe4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001ff6:	230e      	movs	r3, #14
 8001ff8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffe:	4619      	mov	r1, r3
 8002000:	4810      	ldr	r0, [pc, #64]	; (8002044 <MX_GPIO_Init+0x2f0>)
 8002002:	f000 fcad 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002006:	f44f 7340 	mov.w	r3, #768	; 0x300
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002018:	2307      	movs	r3, #7
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800201c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002020:	4619      	mov	r1, r3
 8002022:	4809      	ldr	r0, [pc, #36]	; (8002048 <MX_GPIO_Init+0x2f4>)
 8002024:	f000 fc9c 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002028:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
 8002032:	e00b      	b.n	800204c <MX_GPIO_Init+0x2f8>
 8002034:	40021000 	.word	0x40021000
 8002038:	48001400 	.word	0x48001400
 800203c:	48001000 	.word	0x48001000
 8002040:	48000800 	.word	0x48000800
 8002044:	48000400 	.word	0x48000400
 8002048:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002054:	2302      	movs	r3, #2
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205c:	4619      	mov	r1, r3
 800205e:	485c      	ldr	r0, [pc, #368]	; (80021d0 <MX_GPIO_Init+0x47c>)
 8002060:	f000 fc7e 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002064:	2340      	movs	r3, #64	; 0x40
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002074:	230d      	movs	r3, #13
 8002076:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207c:	4619      	mov	r1, r3
 800207e:	4855      	ldr	r0, [pc, #340]	; (80021d4 <MX_GPIO_Init+0x480>)
 8002080:	f000 fc6e 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002094:	2302      	movs	r3, #2
 8002096:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209c:	4619      	mov	r1, r3
 800209e:	484d      	ldr	r0, [pc, #308]	; (80021d4 <MX_GPIO_Init+0x480>)
 80020a0:	f000 fc5e 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80020a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020b6:	230c      	movs	r3, #12
 80020b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020be:	4619      	mov	r1, r3
 80020c0:	4844      	ldr	r0, [pc, #272]	; (80021d4 <MX_GPIO_Init+0x480>)
 80020c2:	f000 fc4d 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80020c6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d4:	2303      	movs	r3, #3
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020d8:	230a      	movs	r3, #10
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e0:	4619      	mov	r1, r3
 80020e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e6:	f000 fc3b 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fc:	4619      	mov	r1, r3
 80020fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002102:	f000 fc2d 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002106:	2301      	movs	r3, #1
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002116:	2309      	movs	r3, #9
 8002118:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800211a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211e:	4619      	mov	r1, r3
 8002120:	482b      	ldr	r0, [pc, #172]	; (80021d0 <MX_GPIO_Init+0x47c>)
 8002122:	f000 fc1d 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002126:	2304      	movs	r3, #4
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002136:	230c      	movs	r3, #12
 8002138:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800213a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213e:	4619      	mov	r1, r3
 8002140:	4823      	ldr	r0, [pc, #140]	; (80021d0 <MX_GPIO_Init+0x47c>)
 8002142:	f000 fc0d 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002146:	2378      	movs	r3, #120	; 0x78
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002152:	2303      	movs	r3, #3
 8002154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002156:	2307      	movs	r3, #7
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215e:	4619      	mov	r1, r3
 8002160:	481b      	ldr	r0, [pc, #108]	; (80021d0 <MX_GPIO_Init+0x47c>)
 8002162:	f000 fbfd 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002166:	2338      	movs	r3, #56	; 0x38
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002172:	2303      	movs	r3, #3
 8002174:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002176:	2306      	movs	r3, #6
 8002178:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217e:	4619      	mov	r1, r3
 8002180:	4815      	ldr	r0, [pc, #84]	; (80021d8 <MX_GPIO_Init+0x484>)
 8002182:	f000 fbed 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002186:	f44f 7340 	mov.w	r3, #768	; 0x300
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800218c:	2312      	movs	r3, #18
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002194:	2303      	movs	r3, #3
 8002196:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002198:	2304      	movs	r3, #4
 800219a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a0:	4619      	mov	r1, r3
 80021a2:	480d      	ldr	r0, [pc, #52]	; (80021d8 <MX_GPIO_Init+0x484>)
 80021a4:	f000 fbdc 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021a8:	2301      	movs	r3, #1
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021b8:	2302      	movs	r3, #2
 80021ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c0:	4619      	mov	r1, r3
 80021c2:	4806      	ldr	r0, [pc, #24]	; (80021dc <MX_GPIO_Init+0x488>)
 80021c4:	f000 fbcc 	bl	8002960 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021c8:	bf00      	nop
 80021ca:	3738      	adds	r7, #56	; 0x38
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	48000c00 	.word	0x48000c00
 80021d4:	48000800 	.word	0x48000800
 80021d8:	48000400 	.word	0x48000400
 80021dc:	48001000 	.word	0x48001000

080021e0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80021e8:	1d39      	adds	r1, r7, #4
 80021ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ee:	2201      	movs	r2, #1
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <__io_putchar+0x20>)
 80021f2:	f003 f811 	bl	8005218 <HAL_UART_Transmit>
  return ch;
 80021f6:	687b      	ldr	r3, [r7, #4]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20002354 	.word	0x20002354

08002204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002208:	b672      	cpsid	i
}
 800220a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800220c:	e7fe      	b.n	800220c <Error_Handler+0x8>
	...

08002210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <HAL_MspInit+0x44>)
 8002218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221a:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <HAL_MspInit+0x44>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6613      	str	r3, [r2, #96]	; 0x60
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <HAL_MspInit+0x44>)
 8002224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_MspInit+0x44>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	4a08      	ldr	r2, [pc, #32]	; (8002254 <HAL_MspInit+0x44>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002238:	6593      	str	r3, [r2, #88]	; 0x58
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_MspInit+0x44>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000

08002258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b0ae      	sub	sp, #184	; 0xb8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	2294      	movs	r2, #148	; 0x94
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f007 ff9d 	bl	800a1b8 <memset>
  if(huart->Instance==LPUART1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a22      	ldr	r2, [pc, #136]	; (800230c <HAL_UART_MspInit+0xb4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d13d      	bne.n	8002304 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002288:	2320      	movs	r3, #32
 800228a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800228c:	2300      	movs	r3, #0
 800228e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002290:	f107 0310 	add.w	r3, r7, #16
 8002294:	4618      	mov	r0, r3
 8002296:	f001 fcb9 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022a0:	f7ff ffb0 	bl	8002204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80022a4:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <HAL_UART_MspInit+0xb8>)
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_UART_MspInit+0xb8>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	65d3      	str	r3, [r2, #92]	; 0x5c
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <HAL_UART_MspInit+0xb8>)
 80022b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_UART_MspInit+0xb8>)
 80022be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c0:	4a13      	ldr	r2, [pc, #76]	; (8002310 <HAL_UART_MspInit+0xb8>)
 80022c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_UART_MspInit+0xb8>)
 80022ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80022d4:	f000 fdb2 	bl	8002e3c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80022d8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80022dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ec:	2303      	movs	r3, #3
 80022ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80022f2:	2308      	movs	r3, #8
 80022f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022fc:	4619      	mov	r1, r3
 80022fe:	4805      	ldr	r0, [pc, #20]	; (8002314 <HAL_UART_MspInit+0xbc>)
 8002300:	f000 fb2e 	bl	8002960 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002304:	bf00      	nop
 8002306:	37b8      	adds	r7, #184	; 0xb8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40008000 	.word	0x40008000
 8002310:	40021000 	.word	0x40021000
 8002314:	48001800 	.word	0x48001800

08002318 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a20      	ldr	r2, [pc, #128]	; (80023b8 <HAL_SPI_MspInit+0xa0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d139      	bne.n	80023ae <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_SPI_MspInit+0xa4>)
 800233c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233e:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <HAL_SPI_MspInit+0xa4>)
 8002340:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002344:	6613      	str	r3, [r2, #96]	; 0x60
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_SPI_MspInit+0xa4>)
 8002348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <HAL_SPI_MspInit+0xa4>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	4a19      	ldr	r2, [pc, #100]	; (80023bc <HAL_SPI_MspInit+0xa4>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235e:	4b17      	ldr	r3, [pc, #92]	; (80023bc <HAL_SPI_MspInit+0xa4>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800236a:	2310      	movs	r3, #16
 800236c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002376:	2303      	movs	r3, #3
 8002378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800237a:	2305      	movs	r3, #5
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	4619      	mov	r1, r3
 8002384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002388:	f000 faea 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800238c:	23e0      	movs	r3, #224	; 0xe0
 800238e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002394:	2301      	movs	r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800239c:	2305      	movs	r3, #5
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023aa:	f000 fad9 	bl	8002960 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023ae:	bf00      	nop
 80023b0:	3728      	adds	r7, #40	; 0x28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40013000 	.word	0x40013000
 80023bc:	40021000 	.word	0x40021000

080023c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <NMI_Handler+0x4>

080023c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ca:	e7fe      	b.n	80023ca <HardFault_Handler+0x4>

080023cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <MemManage_Handler+0x4>

080023d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d6:	e7fe      	b.n	80023d6 <BusFault_Handler+0x4>

080023d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <UsageFault_Handler+0x4>

080023de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1>0) Timer1--;
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <SysTick_Handler+0x38>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <SysTick_Handler+0x18>
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <SysTick_Handler+0x38>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <SysTick_Handler+0x38>)
 800241e:	801a      	strh	r2, [r3, #0]
	if(Timer2>0) Timer2--;
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <SysTick_Handler+0x3c>)
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <SysTick_Handler+0x2c>
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <SysTick_Handler+0x3c>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <SysTick_Handler+0x3c>)
 8002432:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002434:	f000 f95e 	bl	80026f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002438:	f000 fa85 	bl	8002946 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000208 	.word	0x20000208
 8002444:	2000020a 	.word	0x2000020a

08002448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return 1;
 800244c:	2301      	movs	r3, #1
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_kill>:

int _kill(int pid, int sig)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002462:	f007 fefb 	bl	800a25c <__errno>
 8002466:	4603      	mov	r3, r0
 8002468:	2216      	movs	r2, #22
 800246a:	601a      	str	r2, [r3, #0]
  return -1;
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <_exit>:

void _exit (int status)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ffe7 	bl	8002458 <_kill>
  while (1) {}    /* Make sure we hang here */
 800248a:	e7fe      	b.n	800248a <_exit+0x12>

0800248c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	e00a      	b.n	80024b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800249e:	f3af 8000 	nop.w
 80024a2:	4601      	mov	r1, r0
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	60ba      	str	r2, [r7, #8]
 80024aa:	b2ca      	uxtb	r2, r1
 80024ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	3301      	adds	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	dbf0      	blt.n	800249e <_read+0x12>
  }

  return len;
 80024bc:	687b      	ldr	r3, [r7, #4]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	e009      	b.n	80024ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	60ba      	str	r2, [r7, #8]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fe7d 	bl	80021e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	3301      	adds	r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	dbf1      	blt.n	80024d8 <_write+0x12>
  }
  return len;
 80024f4:	687b      	ldr	r3, [r7, #4]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <_close>:

int _close(int file)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002526:	605a      	str	r2, [r3, #4]
  return 0;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <_isatty>:

int _isatty(int file)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800253e:	2301      	movs	r3, #1
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002570:	4a14      	ldr	r2, [pc, #80]	; (80025c4 <_sbrk+0x5c>)
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <_sbrk+0x60>)
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <_sbrk+0x64>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <_sbrk+0x64>)
 8002586:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <_sbrk+0x68>)
 8002588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <_sbrk+0x64>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	429a      	cmp	r2, r3
 8002596:	d207      	bcs.n	80025a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002598:	f007 fe60 	bl	800a25c <__errno>
 800259c:	4603      	mov	r3, r0
 800259e:	220c      	movs	r2, #12
 80025a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295
 80025a6:	e009      	b.n	80025bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ae:	4b07      	ldr	r3, [pc, #28]	; (80025cc <_sbrk+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	4a05      	ldr	r2, [pc, #20]	; (80025cc <_sbrk+0x64>)
 80025b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ba:	68fb      	ldr	r3, [r7, #12]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	200a0000 	.word	0x200a0000
 80025c8:	00000400 	.word	0x00000400
 80025cc:	200023e8 	.word	0x200023e8
 80025d0:	20002778 	.word	0x20002778

080025d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <SystemInit+0x20>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <SystemInit+0x20>)
 80025e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002630 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025fc:	f7ff ffea 	bl	80025d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002600:	480c      	ldr	r0, [pc, #48]	; (8002634 <LoopForever+0x6>)
  ldr r1, =_edata
 8002602:	490d      	ldr	r1, [pc, #52]	; (8002638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002604:	4a0d      	ldr	r2, [pc, #52]	; (800263c <LoopForever+0xe>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002618:	4c0a      	ldr	r4, [pc, #40]	; (8002644 <LoopForever+0x16>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002626:	f007 fe1f 	bl	800a268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800262a:	f7ff f941 	bl	80018b0 <main>

0800262e <LoopForever>:

LoopForever:
    b LoopForever
 800262e:	e7fe      	b.n	800262e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002630:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002638:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800263c:	0800cd84 	.word	0x0800cd84
  ldr r2, =_sbss
 8002640:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002644:	20002778 	.word	0x20002778

08002648 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002648:	e7fe      	b.n	8002648 <ADC1_IRQHandler>

0800264a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002654:	2003      	movs	r0, #3
 8002656:	f000 f943 	bl	80028e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800265a:	2000      	movs	r0, #0
 800265c:	f000 f80e 	bl	800267c <HAL_InitTick>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	71fb      	strb	r3, [r7, #7]
 800266a:	e001      	b.n	8002670 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800266c:	f7ff fdd0 	bl	8002210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002670:	79fb      	ldrb	r3, [r7, #7]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002688:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <HAL_InitTick+0x6c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d023      	beq.n	80026d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <HAL_InitTick+0x70>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <HAL_InitTick+0x6c>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269e:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f941 	bl	800292e <HAL_SYSTICK_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b0f      	cmp	r3, #15
 80026b6:	d809      	bhi.n	80026cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b8:	2200      	movs	r2, #0
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	f000 f919 	bl	80028f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026c4:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_InitTick+0x74>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e007      	b.n	80026dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	e004      	b.n	80026dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	e001      	b.n	80026dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2000000c 	.word	0x2000000c
 80026ec:	20000004 	.word	0x20000004
 80026f0:	20000008 	.word	0x20000008

080026f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_IncTick+0x20>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x24>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4413      	add	r3, r2
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_IncTick+0x24>)
 8002706:	6013      	str	r3, [r2, #0]
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	2000000c 	.word	0x2000000c
 8002718:	200023ec 	.word	0x200023ec

0800271c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return uwTick;
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_GetTick+0x14>)
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	200023ec 	.word	0x200023ec

08002734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800273c:	f7ff ffee 	bl	800271c <HAL_GetTick>
 8002740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d005      	beq.n	800275a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_Delay+0x44>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4413      	add	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800275a:	bf00      	nop
 800275c:	f7ff ffde 	bl	800271c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	429a      	cmp	r2, r3
 800276a:	d8f7      	bhi.n	800275c <HAL_Delay+0x28>
  {
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	2000000c 	.word	0x2000000c

0800277c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002798:	4013      	ands	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ae:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	60d3      	str	r3, [r2, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <__NVIC_GetPriorityGrouping+0x18>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	f003 0307 	and.w	r3, r3, #7
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	db0a      	blt.n	800280a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	490c      	ldr	r1, [pc, #48]	; (800282c <__NVIC_SetPriority+0x4c>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	0112      	lsls	r2, r2, #4
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	440b      	add	r3, r1
 8002804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002808:	e00a      	b.n	8002820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4908      	ldr	r1, [pc, #32]	; (8002830 <__NVIC_SetPriority+0x50>)
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	3b04      	subs	r3, #4
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	440b      	add	r3, r1
 800281e:	761a      	strb	r2, [r3, #24]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000e100 	.word	0xe000e100
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	; 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f1c3 0307 	rsb	r3, r3, #7
 800284e:	2b04      	cmp	r3, #4
 8002850:	bf28      	it	cs
 8002852:	2304      	movcs	r3, #4
 8002854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3304      	adds	r3, #4
 800285a:	2b06      	cmp	r3, #6
 800285c:	d902      	bls.n	8002864 <NVIC_EncodePriority+0x30>
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3b03      	subs	r3, #3
 8002862:	e000      	b.n	8002866 <NVIC_EncodePriority+0x32>
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	f04f 32ff 	mov.w	r2, #4294967295
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43da      	mvns	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	401a      	ands	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800287c:	f04f 31ff 	mov.w	r1, #4294967295
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa01 f303 	lsl.w	r3, r1, r3
 8002886:	43d9      	mvns	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	4313      	orrs	r3, r2
         );
}
 800288e:	4618      	mov	r0, r3
 8002890:	3724      	adds	r7, #36	; 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ac:	d301      	bcc.n	80028b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00f      	b.n	80028d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <SysTick_Config+0x40>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ba:	210f      	movs	r1, #15
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f7ff ff8e 	bl	80027e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <SysTick_Config+0x40>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <SysTick_Config+0x40>)
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000e010 	.word	0xe000e010

080028e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff47 	bl	800277c <__NVIC_SetPriorityGrouping>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002908:	f7ff ff5c 	bl	80027c4 <__NVIC_GetPriorityGrouping>
 800290c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7ff ff8e 	bl	8002834 <NVIC_EncodePriority>
 8002918:	4602      	mov	r2, r0
 800291a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff5d 	bl	80027e0 <__NVIC_SetPriority>
}
 8002926:	bf00      	nop
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ffb0 	bl	800289c <SysTick_Config>
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800294a:	f000 f802 	bl	8002952 <HAL_SYSTICK_Callback>
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800296e:	e166      	b.n	8002c3e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	2101      	movs	r1, #1
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	4013      	ands	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8158 	beq.w	8002c38 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d005      	beq.n	80029a0 <HAL_GPIO_Init+0x40>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d130      	bne.n	8002a02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029d6:	2201      	movs	r2, #1
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	f003 0201 	and.w	r2, r3, #1
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d017      	beq.n	8002a3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	2203      	movs	r2, #3
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4013      	ands	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d123      	bne.n	8002a92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	08da      	lsrs	r2, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3208      	adds	r2, #8
 8002a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	220f      	movs	r2, #15
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	691a      	ldr	r2, [r3, #16]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	08da      	lsrs	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3208      	adds	r2, #8
 8002a8c:	6939      	ldr	r1, [r7, #16]
 8002a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0203 	and.w	r2, r3, #3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80b2 	beq.w	8002c38 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad4:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <HAL_GPIO_Init+0x2fc>)
 8002ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad8:	4a60      	ldr	r2, [pc, #384]	; (8002c5c <HAL_GPIO_Init+0x2fc>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	6613      	str	r3, [r2, #96]	; 0x60
 8002ae0:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <HAL_GPIO_Init+0x2fc>)
 8002ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002aec:	4a5c      	ldr	r2, [pc, #368]	; (8002c60 <HAL_GPIO_Init+0x300>)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	089b      	lsrs	r3, r3, #2
 8002af2:	3302      	adds	r3, #2
 8002af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	220f      	movs	r2, #15
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b16:	d02b      	beq.n	8002b70 <HAL_GPIO_Init+0x210>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a52      	ldr	r2, [pc, #328]	; (8002c64 <HAL_GPIO_Init+0x304>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d025      	beq.n	8002b6c <HAL_GPIO_Init+0x20c>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a51      	ldr	r2, [pc, #324]	; (8002c68 <HAL_GPIO_Init+0x308>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d01f      	beq.n	8002b68 <HAL_GPIO_Init+0x208>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a50      	ldr	r2, [pc, #320]	; (8002c6c <HAL_GPIO_Init+0x30c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d019      	beq.n	8002b64 <HAL_GPIO_Init+0x204>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a4f      	ldr	r2, [pc, #316]	; (8002c70 <HAL_GPIO_Init+0x310>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d013      	beq.n	8002b60 <HAL_GPIO_Init+0x200>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a4e      	ldr	r2, [pc, #312]	; (8002c74 <HAL_GPIO_Init+0x314>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00d      	beq.n	8002b5c <HAL_GPIO_Init+0x1fc>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a4d      	ldr	r2, [pc, #308]	; (8002c78 <HAL_GPIO_Init+0x318>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d007      	beq.n	8002b58 <HAL_GPIO_Init+0x1f8>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a4c      	ldr	r2, [pc, #304]	; (8002c7c <HAL_GPIO_Init+0x31c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d101      	bne.n	8002b54 <HAL_GPIO_Init+0x1f4>
 8002b50:	2307      	movs	r3, #7
 8002b52:	e00e      	b.n	8002b72 <HAL_GPIO_Init+0x212>
 8002b54:	2308      	movs	r3, #8
 8002b56:	e00c      	b.n	8002b72 <HAL_GPIO_Init+0x212>
 8002b58:	2306      	movs	r3, #6
 8002b5a:	e00a      	b.n	8002b72 <HAL_GPIO_Init+0x212>
 8002b5c:	2305      	movs	r3, #5
 8002b5e:	e008      	b.n	8002b72 <HAL_GPIO_Init+0x212>
 8002b60:	2304      	movs	r3, #4
 8002b62:	e006      	b.n	8002b72 <HAL_GPIO_Init+0x212>
 8002b64:	2303      	movs	r3, #3
 8002b66:	e004      	b.n	8002b72 <HAL_GPIO_Init+0x212>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e002      	b.n	8002b72 <HAL_GPIO_Init+0x212>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <HAL_GPIO_Init+0x212>
 8002b70:	2300      	movs	r3, #0
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	f002 0203 	and.w	r2, r2, #3
 8002b78:	0092      	lsls	r2, r2, #2
 8002b7a:	4093      	lsls	r3, r2
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b82:	4937      	ldr	r1, [pc, #220]	; (8002c60 <HAL_GPIO_Init+0x300>)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	3302      	adds	r3, #2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b90:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_GPIO_Init+0x320>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bb4:	4a32      	ldr	r2, [pc, #200]	; (8002c80 <HAL_GPIO_Init+0x320>)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bba:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <HAL_GPIO_Init+0x320>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bde:	4a28      	ldr	r2, [pc, #160]	; (8002c80 <HAL_GPIO_Init+0x320>)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002be4:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <HAL_GPIO_Init+0x320>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c08:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <HAL_GPIO_Init+0x320>)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_GPIO_Init+0x320>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c32:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <HAL_GPIO_Init+0x320>)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f47f ae91 	bne.w	8002970 <HAL_GPIO_Init+0x10>
  }
}
 8002c4e:	bf00      	nop
 8002c50:	bf00      	nop
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40010000 	.word	0x40010000
 8002c64:	48000400 	.word	0x48000400
 8002c68:	48000800 	.word	0x48000800
 8002c6c:	48000c00 	.word	0x48000c00
 8002c70:	48001000 	.word	0x48001000
 8002c74:	48001400 	.word	0x48001400
 8002c78:	48001800 	.word	0x48001800
 8002c7c:	48001c00 	.word	0x48001c00
 8002c80:	40010400 	.word	0x40010400

08002c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
 8002c90:	4613      	mov	r3, r2
 8002c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c94:	787b      	ldrb	r3, [r7, #1]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ca0:	e002      	b.n	8002ca8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ca2:	887a      	ldrh	r2, [r7, #2]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc4:	d102      	bne.n	8002ccc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cca:	e00b      	b.n	8002ce4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002ccc:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cda:	d102      	bne.n	8002ce2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce0:	e000      	b.n	8002ce4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002ce2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40007000 	.word	0x40007000

08002cf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d141      	bne.n	8002d86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d02:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0e:	d131      	bne.n	8002d74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d10:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d16:	4a46      	ldr	r2, [pc, #280]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d20:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d28:	4a41      	ldr	r2, [pc, #260]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002d30:	4b40      	ldr	r3, [pc, #256]	; (8002e34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2232      	movs	r2, #50	; 0x32
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	4a3f      	ldr	r2, [pc, #252]	; (8002e38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	0c9b      	lsrs	r3, r3, #18
 8002d42:	3301      	adds	r3, #1
 8002d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d46:	e002      	b.n	8002d4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d4e:	4b38      	ldr	r3, [pc, #224]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5a:	d102      	bne.n	8002d62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f2      	bne.n	8002d48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d62:	4b33      	ldr	r3, [pc, #204]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6e:	d158      	bne.n	8002e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e057      	b.n	8002e24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d74:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d7a:	4a2d      	ldr	r2, [pc, #180]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d84:	e04d      	b.n	8002e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d8c:	d141      	bne.n	8002e12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d8e:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9a:	d131      	bne.n	8002e00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d9c:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002da2:	4a23      	ldr	r2, [pc, #140]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dac:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002db4:	4a1e      	ldr	r2, [pc, #120]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2232      	movs	r2, #50	; 0x32
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	0c9b      	lsrs	r3, r3, #18
 8002dce:	3301      	adds	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dd2:	e002      	b.n	8002dda <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de6:	d102      	bne.n	8002dee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f2      	bne.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfa:	d112      	bne.n	8002e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e011      	b.n	8002e24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e06:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e10:	e007      	b.n	8002e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e1a:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e20:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40007000 	.word	0x40007000
 8002e34:	20000004 	.word	0x20000004
 8002e38:	431bde83 	.word	0x431bde83

08002e3c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e4a:	6053      	str	r3, [r2, #4]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40007000 	.word	0x40007000

08002e5c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f000 bc08 	b.w	8003680 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e70:	4b96      	ldr	r3, [pc, #600]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e7a:	4b94      	ldr	r3, [pc, #592]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80e4 	beq.w	800305a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x4c>
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b0c      	cmp	r3, #12
 8002e9c:	f040 808b 	bne.w	8002fb6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	f040 8087 	bne.w	8002fb6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ea8:	4b88      	ldr	r3, [pc, #544]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x64>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e3df      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1a      	ldr	r2, [r3, #32]
 8002ec4:	4b81      	ldr	r3, [pc, #516]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d004      	beq.n	8002eda <HAL_RCC_OscConfig+0x7e>
 8002ed0:	4b7e      	ldr	r3, [pc, #504]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed8:	e005      	b.n	8002ee6 <HAL_RCC_OscConfig+0x8a>
 8002eda:	4b7c      	ldr	r3, [pc, #496]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d223      	bcs.n	8002f32 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fdcc 	bl	8003a8c <RCC_SetFlashLatencyFromMSIRange>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e3c0      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002efe:	4b73      	ldr	r3, [pc, #460]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a72      	ldr	r2, [pc, #456]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002f04:	f043 0308 	orr.w	r3, r3, #8
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b70      	ldr	r3, [pc, #448]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	496d      	ldr	r1, [pc, #436]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f1c:	4b6b      	ldr	r3, [pc, #428]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	4968      	ldr	r1, [pc, #416]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
 8002f30:	e025      	b.n	8002f7e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f32:	4b66      	ldr	r3, [pc, #408]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a65      	ldr	r2, [pc, #404]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002f38:	f043 0308 	orr.w	r3, r3, #8
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b63      	ldr	r3, [pc, #396]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4960      	ldr	r1, [pc, #384]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f50:	4b5e      	ldr	r3, [pc, #376]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	495b      	ldr	r1, [pc, #364]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fd8c 	bl	8003a8c <RCC_SetFlashLatencyFromMSIRange>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e380      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f7e:	f000 fcc1 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b51      	ldr	r3, [pc, #324]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	4950      	ldr	r1, [pc, #320]	; (80030d0 <HAL_RCC_OscConfig+0x274>)
 8002f90:	5ccb      	ldrb	r3, [r1, r3]
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9a:	4a4e      	ldr	r2, [pc, #312]	; (80030d4 <HAL_RCC_OscConfig+0x278>)
 8002f9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f9e:	4b4e      	ldr	r3, [pc, #312]	; (80030d8 <HAL_RCC_OscConfig+0x27c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fb6a 	bl	800267c <HAL_InitTick>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d052      	beq.n	8003058 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	e364      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d032      	beq.n	8003024 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fbe:	4b43      	ldr	r3, [pc, #268]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a42      	ldr	r2, [pc, #264]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fca:	f7ff fba7 	bl	800271c <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fd2:	f7ff fba3 	bl	800271c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e34d      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fe4:	4b39      	ldr	r3, [pc, #228]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff0:	4b36      	ldr	r3, [pc, #216]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a35      	ldr	r2, [pc, #212]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002ff6:	f043 0308 	orr.w	r3, r3, #8
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4b33      	ldr	r3, [pc, #204]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4930      	ldr	r1, [pc, #192]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800300e:	4b2f      	ldr	r3, [pc, #188]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	492b      	ldr	r1, [pc, #172]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
 8003022:	e01a      	b.n	800305a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003024:	4b29      	ldr	r3, [pc, #164]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a28      	ldr	r2, [pc, #160]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 800302a:	f023 0301 	bic.w	r3, r3, #1
 800302e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003030:	f7ff fb74 	bl	800271c <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003038:	f7ff fb70 	bl	800271c <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e31a      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800304a:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x1dc>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003058:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d073      	beq.n	800314e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b08      	cmp	r3, #8
 800306a:	d005      	beq.n	8003078 <HAL_RCC_OscConfig+0x21c>
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d10e      	bne.n	8003090 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d10b      	bne.n	8003090 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	4b14      	ldr	r3, [pc, #80]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d063      	beq.n	800314c <HAL_RCC_OscConfig+0x2f0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d15f      	bne.n	800314c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e2f7      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003098:	d106      	bne.n	80030a8 <HAL_RCC_OscConfig+0x24c>
 800309a:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a0b      	ldr	r2, [pc, #44]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e025      	b.n	80030f4 <HAL_RCC_OscConfig+0x298>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b0:	d114      	bne.n	80030dc <HAL_RCC_OscConfig+0x280>
 80030b2:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a05      	ldr	r2, [pc, #20]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 80030b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b03      	ldr	r3, [pc, #12]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a02      	ldr	r2, [pc, #8]	; (80030cc <HAL_RCC_OscConfig+0x270>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e013      	b.n	80030f4 <HAL_RCC_OscConfig+0x298>
 80030cc:	40021000 	.word	0x40021000
 80030d0:	0800c554 	.word	0x0800c554
 80030d4:	20000004 	.word	0x20000004
 80030d8:	20000008 	.word	0x20000008
 80030dc:	4ba0      	ldr	r3, [pc, #640]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a9f      	ldr	r2, [pc, #636]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 80030e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	4b9d      	ldr	r3, [pc, #628]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a9c      	ldr	r2, [pc, #624]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 80030ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7ff fb0e 	bl	800271c <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003104:	f7ff fb0a 	bl	800271c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e2b4      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003116:	4b92      	ldr	r3, [pc, #584]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x2a8>
 8003122:	e014      	b.n	800314e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7ff fafa 	bl	800271c <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800312c:	f7ff faf6 	bl	800271c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e2a0      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800313e:	4b88      	ldr	r3, [pc, #544]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x2d0>
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d060      	beq.n	800321c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d005      	beq.n	800316c <HAL_RCC_OscConfig+0x310>
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b0c      	cmp	r3, #12
 8003164:	d119      	bne.n	800319a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d116      	bne.n	800319a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800316c:	4b7c      	ldr	r3, [pc, #496]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_OscConfig+0x328>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e27d      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b76      	ldr	r3, [pc, #472]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	4973      	ldr	r1, [pc, #460]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003198:	e040      	b.n	800321c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d023      	beq.n	80031ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a2:	4b6f      	ldr	r3, [pc, #444]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a6e      	ldr	r2, [pc, #440]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7ff fab5 	bl	800271c <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b6:	f7ff fab1 	bl	800271c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e25b      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031c8:	4b65      	ldr	r3, [pc, #404]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d4:	4b62      	ldr	r3, [pc, #392]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	061b      	lsls	r3, r3, #24
 80031e2:	495f      	ldr	r1, [pc, #380]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
 80031e8:	e018      	b.n	800321c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ea:	4b5d      	ldr	r3, [pc, #372]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a5c      	ldr	r2, [pc, #368]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 80031f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7ff fa91 	bl	800271c <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fe:	f7ff fa8d 	bl	800271c <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e237      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003210:	4b53      	ldr	r3, [pc, #332]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f0      	bne.n	80031fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d03c      	beq.n	80032a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01c      	beq.n	800326a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003230:	4b4b      	ldr	r3, [pc, #300]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 8003232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003236:	4a4a      	ldr	r2, [pc, #296]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7ff fa6c 	bl	800271c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003248:	f7ff fa68 	bl	800271c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e212      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800325a:	4b41      	ldr	r3, [pc, #260]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 800325c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0ef      	beq.n	8003248 <HAL_RCC_OscConfig+0x3ec>
 8003268:	e01b      	b.n	80032a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800326a:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 800326c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003270:	4a3b      	ldr	r2, [pc, #236]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 8003272:	f023 0301 	bic.w	r3, r3, #1
 8003276:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327a:	f7ff fa4f 	bl	800271c <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003282:	f7ff fa4b 	bl	800271c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e1f5      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003294:	4b32      	ldr	r3, [pc, #200]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 8003296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1ef      	bne.n	8003282 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80a6 	beq.w	80033fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b0:	2300      	movs	r3, #0
 80032b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032b4:	4b2a      	ldr	r3, [pc, #168]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10d      	bne.n	80032dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c0:	4b27      	ldr	r3, [pc, #156]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	4a26      	ldr	r2, [pc, #152]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 80032c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ca:	6593      	str	r3, [r2, #88]	; 0x58
 80032cc:	4b24      	ldr	r3, [pc, #144]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d8:	2301      	movs	r3, #1
 80032da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032dc:	4b21      	ldr	r3, [pc, #132]	; (8003364 <HAL_RCC_OscConfig+0x508>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d118      	bne.n	800331a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032e8:	4b1e      	ldr	r3, [pc, #120]	; (8003364 <HAL_RCC_OscConfig+0x508>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <HAL_RCC_OscConfig+0x508>)
 80032ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f4:	f7ff fa12 	bl	800271c <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fc:	f7ff fa0e 	bl	800271c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e1b8      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800330e:	4b15      	ldr	r3, [pc, #84]	; (8003364 <HAL_RCC_OscConfig+0x508>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d108      	bne.n	8003334 <HAL_RCC_OscConfig+0x4d8>
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003328:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003332:	e029      	b.n	8003388 <HAL_RCC_OscConfig+0x52c>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b05      	cmp	r3, #5
 800333a:	d115      	bne.n	8003368 <HAL_RCC_OscConfig+0x50c>
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003342:	4a07      	ldr	r2, [pc, #28]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 8003344:	f043 0304 	orr.w	r3, r3, #4
 8003348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003352:	4a03      	ldr	r2, [pc, #12]	; (8003360 <HAL_RCC_OscConfig+0x504>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800335c:	e014      	b.n	8003388 <HAL_RCC_OscConfig+0x52c>
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	40007000 	.word	0x40007000
 8003368:	4b9d      	ldr	r3, [pc, #628]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336e:	4a9c      	ldr	r2, [pc, #624]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003378:	4b99      	ldr	r3, [pc, #612]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337e:	4a98      	ldr	r2, [pc, #608]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 8003380:	f023 0304 	bic.w	r3, r3, #4
 8003384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d016      	beq.n	80033be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7ff f9c4 	bl	800271c <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003396:	e00a      	b.n	80033ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003398:	f7ff f9c0 	bl	800271c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e168      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ae:	4b8c      	ldr	r3, [pc, #560]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0ed      	beq.n	8003398 <HAL_RCC_OscConfig+0x53c>
 80033bc:	e015      	b.n	80033ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033be:	f7ff f9ad 	bl	800271c <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033c4:	e00a      	b.n	80033dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7ff f9a9 	bl	800271c <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e151      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033dc:	4b80      	ldr	r3, [pc, #512]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1ed      	bne.n	80033c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ea:	7ffb      	ldrb	r3, [r7, #31]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d105      	bne.n	80033fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f0:	4b7b      	ldr	r3, [pc, #492]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	4a7a      	ldr	r2, [pc, #488]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 80033f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b00      	cmp	r3, #0
 8003406:	d03c      	beq.n	8003482 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01c      	beq.n	800344a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003410:	4b73      	ldr	r3, [pc, #460]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 8003412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003416:	4a72      	ldr	r2, [pc, #456]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7ff f97c 	bl	800271c <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003428:	f7ff f978 	bl	800271c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e122      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800343a:	4b69      	ldr	r3, [pc, #420]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 800343c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0ef      	beq.n	8003428 <HAL_RCC_OscConfig+0x5cc>
 8003448:	e01b      	b.n	8003482 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800344a:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 800344c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003450:	4a63      	ldr	r2, [pc, #396]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345a:	f7ff f95f 	bl	800271c <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003462:	f7ff f95b 	bl	800271c <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e105      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003474:	4b5a      	ldr	r3, [pc, #360]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 8003476:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1ef      	bne.n	8003462 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80f9 	beq.w	800367e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	2b02      	cmp	r3, #2
 8003492:	f040 80cf 	bne.w	8003634 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003496:	4b52      	ldr	r3, [pc, #328]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f003 0203 	and.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d12c      	bne.n	8003504 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	3b01      	subs	r3, #1
 80034b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d123      	bne.n	8003504 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d11b      	bne.n	8003504 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d113      	bne.n	8003504 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e6:	085b      	lsrs	r3, r3, #1
 80034e8:	3b01      	subs	r3, #1
 80034ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d109      	bne.n	8003504 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	085b      	lsrs	r3, r3, #1
 80034fc:	3b01      	subs	r3, #1
 80034fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d071      	beq.n	80035e8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b0c      	cmp	r3, #12
 8003508:	d068      	beq.n	80035dc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800350a:	4b35      	ldr	r3, [pc, #212]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d105      	bne.n	8003522 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003516:	4b32      	ldr	r3, [pc, #200]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e0ac      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003526:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a2d      	ldr	r2, [pc, #180]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 800352c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003530:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003532:	f7ff f8f3 	bl	800271c <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353a:	f7ff f8ef 	bl	800271c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e099      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354c:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f0      	bne.n	800353a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003558:	4b21      	ldr	r3, [pc, #132]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	4b21      	ldr	r3, [pc, #132]	; (80035e4 <HAL_RCC_OscConfig+0x788>)
 800355e:	4013      	ands	r3, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003568:	3a01      	subs	r2, #1
 800356a:	0112      	lsls	r2, r2, #4
 800356c:	4311      	orrs	r1, r2
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003572:	0212      	lsls	r2, r2, #8
 8003574:	4311      	orrs	r1, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800357a:	0852      	lsrs	r2, r2, #1
 800357c:	3a01      	subs	r2, #1
 800357e:	0552      	lsls	r2, r2, #21
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003586:	0852      	lsrs	r2, r2, #1
 8003588:	3a01      	subs	r2, #1
 800358a:	0652      	lsls	r2, r2, #25
 800358c:	4311      	orrs	r1, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003592:	06d2      	lsls	r2, r2, #27
 8003594:	430a      	orrs	r2, r1
 8003596:	4912      	ldr	r1, [pc, #72]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 8003598:	4313      	orrs	r3, r2
 800359a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800359c:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0f      	ldr	r2, [pc, #60]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 80035a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035a8:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a0c      	ldr	r2, [pc, #48]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 80035ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035b4:	f7ff f8b2 	bl	800271c <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035bc:	f7ff f8ae 	bl	800271c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e058      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ce:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <HAL_RCC_OscConfig+0x784>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035da:	e050      	b.n	800367e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e04f      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
 80035e0:	40021000 	.word	0x40021000
 80035e4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e8:	4b27      	ldr	r3, [pc, #156]	; (8003688 <HAL_RCC_OscConfig+0x82c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d144      	bne.n	800367e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035f4:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCC_OscConfig+0x82c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a23      	ldr	r2, [pc, #140]	; (8003688 <HAL_RCC_OscConfig+0x82c>)
 80035fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003600:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_RCC_OscConfig+0x82c>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4a20      	ldr	r2, [pc, #128]	; (8003688 <HAL_RCC_OscConfig+0x82c>)
 8003606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800360c:	f7ff f886 	bl	800271c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003614:	f7ff f882 	bl	800271c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e02c      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003626:	4b18      	ldr	r3, [pc, #96]	; (8003688 <HAL_RCC_OscConfig+0x82c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x7b8>
 8003632:	e024      	b.n	800367e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b0c      	cmp	r3, #12
 8003638:	d01f      	beq.n	800367a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <HAL_RCC_OscConfig+0x82c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a12      	ldr	r2, [pc, #72]	; (8003688 <HAL_RCC_OscConfig+0x82c>)
 8003640:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003646:	f7ff f869 	bl	800271c <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364e:	f7ff f865 	bl	800271c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e00f      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003660:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_RCC_OscConfig+0x82c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f0      	bne.n	800364e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCC_OscConfig+0x82c>)
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	4905      	ldr	r1, [pc, #20]	; (8003688 <HAL_RCC_OscConfig+0x82c>)
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_RCC_OscConfig+0x830>)
 8003674:	4013      	ands	r3, r2
 8003676:	60cb      	str	r3, [r1, #12]
 8003678:	e001      	b.n	800367e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3720      	adds	r7, #32
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	feeefffc 	.word	0xfeeefffc

08003690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e11d      	b.n	80038e4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a8:	4b90      	ldr	r3, [pc, #576]	; (80038ec <HAL_RCC_ClockConfig+0x25c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d910      	bls.n	80036d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b8d      	ldr	r3, [pc, #564]	; (80038ec <HAL_RCC_ClockConfig+0x25c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 020f 	bic.w	r2, r3, #15
 80036be:	498b      	ldr	r1, [pc, #556]	; (80038ec <HAL_RCC_ClockConfig+0x25c>)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b89      	ldr	r3, [pc, #548]	; (80038ec <HAL_RCC_ClockConfig+0x25c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e105      	b.n	80038e4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d010      	beq.n	8003706 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	4b81      	ldr	r3, [pc, #516]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d908      	bls.n	8003706 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f4:	4b7e      	ldr	r3, [pc, #504]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	497b      	ldr	r1, [pc, #492]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d079      	beq.n	8003806 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b03      	cmp	r3, #3
 8003718:	d11e      	bne.n	8003758 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371a:	4b75      	ldr	r3, [pc, #468]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e0dc      	b.n	80038e4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800372a:	f000 fa09 	bl	8003b40 <RCC_GetSysClockFreqFromPLLSource>
 800372e:	4603      	mov	r3, r0
 8003730:	4a70      	ldr	r2, [pc, #448]	; (80038f4 <HAL_RCC_ClockConfig+0x264>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d946      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003736:	4b6e      	ldr	r3, [pc, #440]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d140      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003742:	4b6b      	ldr	r3, [pc, #428]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800374a:	4a69      	ldr	r2, [pc, #420]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 800374c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003750:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e035      	b.n	80037c4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d107      	bne.n	8003770 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003760:	4b63      	ldr	r3, [pc, #396]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d115      	bne.n	8003798 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0b9      	b.n	80038e4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003778:	4b5d      	ldr	r3, [pc, #372]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d109      	bne.n	8003798 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0ad      	b.n	80038e4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003788:	4b59      	ldr	r3, [pc, #356]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0a5      	b.n	80038e4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003798:	f000 f8b4 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 800379c:	4603      	mov	r3, r0
 800379e:	4a55      	ldr	r2, [pc, #340]	; (80038f4 <HAL_RCC_ClockConfig+0x264>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d90f      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80037a4:	4b52      	ldr	r3, [pc, #328]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037b0:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037b8:	4a4d      	ldr	r2, [pc, #308]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80037ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037be:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037c4:	4b4a      	ldr	r3, [pc, #296]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f023 0203 	bic.w	r2, r3, #3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	4947      	ldr	r1, [pc, #284]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d6:	f7fe ffa1 	bl	800271c <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037dc:	e00a      	b.n	80037f4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037de:	f7fe ff9d 	bl	800271c <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e077      	b.n	80038e4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f4:	4b3e      	ldr	r3, [pc, #248]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 020c 	and.w	r2, r3, #12
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	429a      	cmp	r2, r3
 8003804:	d1eb      	bne.n	80037de <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b80      	cmp	r3, #128	; 0x80
 800380a:	d105      	bne.n	8003818 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800380c:	4b38      	ldr	r3, [pc, #224]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4a37      	ldr	r2, [pc, #220]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 8003812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003816:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d010      	beq.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003830:	429a      	cmp	r2, r3
 8003832:	d208      	bcs.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003834:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	492b      	ldr	r1, [pc, #172]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003846:	4b29      	ldr	r3, [pc, #164]	; (80038ec <HAL_RCC_ClockConfig+0x25c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d210      	bcs.n	8003876 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <HAL_RCC_ClockConfig+0x25c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 020f 	bic.w	r2, r3, #15
 800385c:	4923      	ldr	r1, [pc, #140]	; (80038ec <HAL_RCC_ClockConfig+0x25c>)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	4313      	orrs	r3, r2
 8003862:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003864:	4b21      	ldr	r3, [pc, #132]	; (80038ec <HAL_RCC_ClockConfig+0x25c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d001      	beq.n	8003876 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e036      	b.n	80038e4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	d008      	beq.n	8003894 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003882:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	4918      	ldr	r1, [pc, #96]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 8003890:	4313      	orrs	r3, r2
 8003892:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d009      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4910      	ldr	r1, [pc, #64]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038b4:	f000 f826 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	490c      	ldr	r1, [pc, #48]	; (80038f8 <HAL_RCC_ClockConfig+0x268>)
 80038c6:	5ccb      	ldrb	r3, [r1, r3]
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
 80038d0:	4a0a      	ldr	r2, [pc, #40]	; (80038fc <HAL_RCC_ClockConfig+0x26c>)
 80038d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038d4:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <HAL_RCC_ClockConfig+0x270>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fe fecf 	bl	800267c <HAL_InitTick>
 80038de:	4603      	mov	r3, r0
 80038e0:	73fb      	strb	r3, [r7, #15]

  return status;
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40022000 	.word	0x40022000
 80038f0:	40021000 	.word	0x40021000
 80038f4:	04c4b400 	.word	0x04c4b400
 80038f8:	0800c554 	.word	0x0800c554
 80038fc:	20000004 	.word	0x20000004
 8003900:	20000008 	.word	0x20000008

08003904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003904:	b480      	push	{r7}
 8003906:	b089      	sub	sp, #36	; 0x24
 8003908:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003912:	4b3e      	ldr	r3, [pc, #248]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800391c:	4b3b      	ldr	r3, [pc, #236]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x108>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_GetSysClockFreq+0x34>
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b0c      	cmp	r3, #12
 8003930:	d121      	bne.n	8003976 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d11e      	bne.n	8003976 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003938:	4b34      	ldr	r3, [pc, #208]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x108>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d107      	bne.n	8003954 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003944:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394a:	0a1b      	lsrs	r3, r3, #8
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	e005      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003954:	4b2d      	ldr	r3, [pc, #180]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003960:	4a2b      	ldr	r2, [pc, #172]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003968:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10d      	bne.n	800398c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003974:	e00a      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b04      	cmp	r3, #4
 800397a:	d102      	bne.n	8003982 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800397c:	4b25      	ldr	r3, [pc, #148]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x110>)
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	e004      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b08      	cmp	r3, #8
 8003986:	d101      	bne.n	800398c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003988:	4b23      	ldr	r3, [pc, #140]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x114>)
 800398a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d134      	bne.n	80039fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003992:	4b1e      	ldr	r3, [pc, #120]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d003      	beq.n	80039aa <HAL_RCC_GetSysClockFreq+0xa6>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d003      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0xac>
 80039a8:	e005      	b.n	80039b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039aa:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x110>)
 80039ac:	617b      	str	r3, [r7, #20]
      break;
 80039ae:	e005      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x114>)
 80039b2:	617b      	str	r3, [r7, #20]
      break;
 80039b4:	e002      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	617b      	str	r3, [r7, #20]
      break;
 80039ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039bc:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x108>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	3301      	adds	r3, #1
 80039c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039ca:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x108>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	0a1b      	lsrs	r3, r3, #8
 80039d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	fb03 f202 	mul.w	r2, r3, r2
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039e2:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x108>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	0e5b      	lsrs	r3, r3, #25
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	3301      	adds	r3, #1
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039fc:	69bb      	ldr	r3, [r7, #24]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3724      	adds	r7, #36	; 0x24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	0800c56c 	.word	0x0800c56c
 8003a14:	00f42400 	.word	0x00f42400
 8003a18:	007a1200 	.word	0x007a1200

08003a1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a20:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a22:	681b      	ldr	r3, [r3, #0]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000004 	.word	0x20000004

08003a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a38:	f7ff fff0 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	0a1b      	lsrs	r3, r3, #8
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4904      	ldr	r1, [pc, #16]	; (8003a5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a4a:	5ccb      	ldrb	r3, [r1, r3]
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	0800c564 	.word	0x0800c564

08003a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a64:	f7ff ffda 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	0adb      	lsrs	r3, r3, #11
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4904      	ldr	r1, [pc, #16]	; (8003a88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000
 8003a88:	0800c564 	.word	0x0800c564

08003a8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a94:	2300      	movs	r3, #0
 8003a96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a98:	4b27      	ldr	r3, [pc, #156]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003aa4:	f7ff f906 	bl	8002cb4 <HAL_PWREx_GetVoltageRange>
 8003aa8:	6178      	str	r0, [r7, #20]
 8003aaa:	e014      	b.n	8003ad6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aac:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	4a21      	ldr	r2, [pc, #132]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ab8:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ac4:	f7ff f8f6 	bl	8002cb4 <HAL_PWREx_GetVoltageRange>
 8003ac8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003aca:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ace:	4a1a      	ldr	r2, [pc, #104]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003adc:	d10b      	bne.n	8003af6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b80      	cmp	r3, #128	; 0x80
 8003ae2:	d913      	bls.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ae8:	d902      	bls.n	8003af0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aea:	2302      	movs	r3, #2
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	e00d      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003af0:	2301      	movs	r3, #1
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	e00a      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b7f      	cmp	r3, #127	; 0x7f
 8003afa:	d902      	bls.n	8003b02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003afc:	2302      	movs	r3, #2
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	e004      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b70      	cmp	r3, #112	; 0x70
 8003b06:	d101      	bne.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b08:	2301      	movs	r3, #1
 8003b0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 020f 	bic.w	r2, r3, #15
 8003b14:	4909      	ldr	r1, [pc, #36]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b1c:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d001      	beq.n	8003b2e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40022000 	.word	0x40022000

08003b40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b46:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d00b      	beq.n	8003b6e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d825      	bhi.n	8003ba8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d008      	beq.n	8003b74 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d11f      	bne.n	8003ba8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003b68:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b6a:	613b      	str	r3, [r7, #16]
    break;
 8003b6c:	e01f      	b.n	8003bae <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003b6e:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003b70:	613b      	str	r3, [r7, #16]
    break;
 8003b72:	e01c      	b.n	8003bae <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b74:	4b21      	ldr	r3, [pc, #132]	; (8003bfc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d107      	bne.n	8003b90 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b80:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	e005      	b.n	8003b9c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003b9c:	4a1a      	ldr	r2, [pc, #104]	; (8003c08 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba4:	613b      	str	r3, [r7, #16]
    break;
 8003ba6:	e002      	b.n	8003bae <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]
    break;
 8003bac:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bae:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	3301      	adds	r3, #1
 8003bba:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	0a1b      	lsrs	r3, r3, #8
 8003bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	fb03 f202 	mul.w	r2, r3, r2
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bd4:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	0e5b      	lsrs	r3, r3, #25
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	3301      	adds	r3, #1
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003bee:	683b      	ldr	r3, [r7, #0]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	371c      	adds	r7, #28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	00f42400 	.word	0x00f42400
 8003c04:	007a1200 	.word	0x007a1200
 8003c08:	0800c56c 	.word	0x0800c56c

08003c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c14:	2300      	movs	r3, #0
 8003c16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c18:	2300      	movs	r3, #0
 8003c1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d040      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c2c:	2b80      	cmp	r3, #128	; 0x80
 8003c2e:	d02a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c30:	2b80      	cmp	r3, #128	; 0x80
 8003c32:	d825      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c34:	2b60      	cmp	r3, #96	; 0x60
 8003c36:	d026      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c38:	2b60      	cmp	r3, #96	; 0x60
 8003c3a:	d821      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c3c:	2b40      	cmp	r3, #64	; 0x40
 8003c3e:	d006      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d81d      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d009      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d010      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003c4c:	e018      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c4e:	4b89      	ldr	r3, [pc, #548]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	4a88      	ldr	r2, [pc, #544]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c5a:	e015      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	2100      	movs	r1, #0
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fb02 	bl	800426c <RCCEx_PLLSAI1_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c6c:	e00c      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3320      	adds	r3, #32
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fbed 	bl	8004454 <RCCEx_PLLSAI2_Config>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c7e:	e003      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	74fb      	strb	r3, [r7, #19]
      break;
 8003c84:	e000      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003c86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c88:	7cfb      	ldrb	r3, [r7, #19]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10b      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c8e:	4b79      	ldr	r3, [pc, #484]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c94:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c9c:	4975      	ldr	r1, [pc, #468]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ca4:	e001      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca6:	7cfb      	ldrb	r3, [r7, #19]
 8003ca8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d047      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cbe:	d030      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc4:	d82a      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cca:	d02a      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cd0:	d824      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd6:	d008      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cdc:	d81e      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce6:	d010      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ce8:	e018      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cea:	4b62      	ldr	r3, [pc, #392]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	4a61      	ldr	r2, [pc, #388]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cf6:	e015      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fab4 	bl	800426c <RCCEx_PLLSAI1_Config>
 8003d04:	4603      	mov	r3, r0
 8003d06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d08:	e00c      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3320      	adds	r3, #32
 8003d0e:	2100      	movs	r1, #0
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fb9f 	bl	8004454 <RCCEx_PLLSAI2_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d1a:	e003      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	74fb      	strb	r3, [r7, #19]
      break;
 8003d20:	e000      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d24:	7cfb      	ldrb	r3, [r7, #19]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d2a:	4b52      	ldr	r3, [pc, #328]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	494e      	ldr	r1, [pc, #312]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d40:	e001      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	7cfb      	ldrb	r3, [r7, #19]
 8003d44:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 809f 	beq.w	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d54:	2300      	movs	r3, #0
 8003d56:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d58:	4b46      	ldr	r3, [pc, #280]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00d      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d6e:	4b41      	ldr	r3, [pc, #260]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	4a40      	ldr	r2, [pc, #256]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d78:	6593      	str	r3, [r2, #88]	; 0x58
 8003d7a:	4b3e      	ldr	r3, [pc, #248]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d86:	2301      	movs	r3, #1
 8003d88:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d8a:	4b3b      	ldr	r3, [pc, #236]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a3a      	ldr	r2, [pc, #232]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d96:	f7fe fcc1 	bl	800271c <HAL_GetTick>
 8003d9a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d9c:	e009      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9e:	f7fe fcbd 	bl	800271c <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d902      	bls.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	74fb      	strb	r3, [r7, #19]
        break;
 8003db0:	e005      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003db2:	4b31      	ldr	r3, [pc, #196]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0ef      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003dbe:	7cfb      	ldrb	r3, [r7, #19]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d15b      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dc4:	4b2b      	ldr	r3, [pc, #172]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dce:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01f      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d019      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003de2:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dee:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e04:	4a1b      	ldr	r2, [pc, #108]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e0e:	4a19      	ldr	r2, [pc, #100]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d016      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fe fc7c 	bl	800271c <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e26:	e00b      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e28:	f7fe fc78 	bl	800271c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d902      	bls.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	74fb      	strb	r3, [r7, #19]
            break;
 8003e3e:	e006      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e40:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0ec      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003e4e:	7cfb      	ldrb	r3, [r7, #19]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10c      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e54:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	4903      	ldr	r1, [pc, #12]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e6c:	e008      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e6e:	7cfb      	ldrb	r3, [r7, #19]
 8003e70:	74bb      	strb	r3, [r7, #18]
 8003e72:	e005      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e80:	7c7b      	ldrb	r3, [r7, #17]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d105      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e86:	4ba0      	ldr	r3, [pc, #640]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	4a9f      	ldr	r2, [pc, #636]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e9e:	4b9a      	ldr	r3, [pc, #616]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea4:	f023 0203 	bic.w	r2, r3, #3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	4996      	ldr	r1, [pc, #600]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ec0:	4b91      	ldr	r3, [pc, #580]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	f023 020c 	bic.w	r2, r3, #12
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	498e      	ldr	r1, [pc, #568]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ee2:	4b89      	ldr	r3, [pc, #548]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef0:	4985      	ldr	r1, [pc, #532]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f04:	4b80      	ldr	r3, [pc, #512]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f12:	497d      	ldr	r1, [pc, #500]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f26:	4b78      	ldr	r3, [pc, #480]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f34:	4974      	ldr	r1, [pc, #464]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f48:	4b6f      	ldr	r3, [pc, #444]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	496c      	ldr	r1, [pc, #432]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f6a:	4b67      	ldr	r3, [pc, #412]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f78:	4963      	ldr	r1, [pc, #396]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f8c:	4b5e      	ldr	r3, [pc, #376]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f9a:	495b      	ldr	r1, [pc, #364]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fae:	4b56      	ldr	r3, [pc, #344]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbc:	4952      	ldr	r1, [pc, #328]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fd0:	4b4d      	ldr	r3, [pc, #308]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	494a      	ldr	r1, [pc, #296]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ff2:	4b45      	ldr	r3, [pc, #276]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004000:	4941      	ldr	r1, [pc, #260]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004014:	4b3c      	ldr	r3, [pc, #240]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800401a:	f023 0203 	bic.w	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004022:	4939      	ldr	r1, [pc, #228]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d028      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004036:	4b34      	ldr	r3, [pc, #208]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004044:	4930      	ldr	r1, [pc, #192]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004050:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004054:	d106      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004056:	4b2c      	ldr	r3, [pc, #176]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	4a2b      	ldr	r2, [pc, #172]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800405c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004060:	60d3      	str	r3, [r2, #12]
 8004062:	e011      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004068:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800406c:	d10c      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3304      	adds	r3, #4
 8004072:	2101      	movs	r1, #1
 8004074:	4618      	mov	r0, r3
 8004076:	f000 f8f9 	bl	800426c <RCCEx_PLLSAI1_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d04d      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800409c:	d108      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800409e:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040a4:	4a18      	ldr	r2, [pc, #96]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80040ae:	e012      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80040b0:	4b15      	ldr	r3, [pc, #84]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040b6:	4a14      	ldr	r2, [pc, #80]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040bc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80040c0:	4b11      	ldr	r3, [pc, #68]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ce:	490e      	ldr	r1, [pc, #56]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040de:	d106      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e0:	4b09      	ldr	r3, [pc, #36]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4a08      	ldr	r2, [pc, #32]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ea:	60d3      	str	r3, [r2, #12]
 80040ec:	e020      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f6:	d109      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040f8:	4b03      	ldr	r3, [pc, #12]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a02      	ldr	r2, [pc, #8]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004102:	60d3      	str	r3, [r2, #12]
 8004104:	e014      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004114:	d10c      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3304      	adds	r3, #4
 800411a:	2101      	movs	r1, #1
 800411c:	4618      	mov	r0, r3
 800411e:	f000 f8a5 	bl	800426c <RCCEx_PLLSAI1_Config>
 8004122:	4603      	mov	r3, r0
 8004124:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004126:	7cfb      	ldrb	r3, [r7, #19]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d028      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800413c:	4b4a      	ldr	r3, [pc, #296]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800414a:	4947      	ldr	r1, [pc, #284]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415a:	d106      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800415c:	4b42      	ldr	r3, [pc, #264]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4a41      	ldr	r2, [pc, #260]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004166:	60d3      	str	r3, [r2, #12]
 8004168:	e011      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800416e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004172:	d10c      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3304      	adds	r3, #4
 8004178:	2101      	movs	r1, #1
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f876 	bl	800426c <RCCEx_PLLSAI1_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800418a:	7cfb      	ldrb	r3, [r7, #19]
 800418c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d01e      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800419a:	4b33      	ldr	r3, [pc, #204]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041aa:	492f      	ldr	r1, [pc, #188]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3304      	adds	r3, #4
 80041c2:	2102      	movs	r1, #2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 f851 	bl	800426c <RCCEx_PLLSAI1_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ce:	7cfb      	ldrb	r3, [r7, #19]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80041d4:	7cfb      	ldrb	r3, [r7, #19]
 80041d6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00b      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041e4:	4b20      	ldr	r3, [pc, #128]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ea:	f023 0204 	bic.w	r2, r3, #4
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f4:	491c      	ldr	r1, [pc, #112]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00b      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004208:	4b17      	ldr	r3, [pc, #92]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800420a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800420e:	f023 0218 	bic.w	r2, r3, #24
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004218:	4913      	ldr	r1, [pc, #76]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d017      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800422c:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800422e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004232:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800423c:	490a      	ldr	r1, [pc, #40]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800424a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800424e:	d105      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4a04      	ldr	r2, [pc, #16]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800425a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800425c:	7cbb      	ldrb	r3, [r7, #18]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000

0800426c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800427a:	4b72      	ldr	r3, [pc, #456]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00e      	beq.n	80042a4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004286:	4b6f      	ldr	r3, [pc, #444]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f003 0203 	and.w	r2, r3, #3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d103      	bne.n	800429e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
       ||
 800429a:	2b00      	cmp	r3, #0
 800429c:	d142      	bne.n	8004324 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
 80042a2:	e03f      	b.n	8004324 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d018      	beq.n	80042de <RCCEx_PLLSAI1_Config+0x72>
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d825      	bhi.n	80042fc <RCCEx_PLLSAI1_Config+0x90>
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d002      	beq.n	80042ba <RCCEx_PLLSAI1_Config+0x4e>
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d009      	beq.n	80042cc <RCCEx_PLLSAI1_Config+0x60>
 80042b8:	e020      	b.n	80042fc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042ba:	4b62      	ldr	r3, [pc, #392]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d11d      	bne.n	8004302 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ca:	e01a      	b.n	8004302 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042cc:	4b5d      	ldr	r3, [pc, #372]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d116      	bne.n	8004306 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042dc:	e013      	b.n	8004306 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042de:	4b59      	ldr	r3, [pc, #356]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10f      	bne.n	800430a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ea:	4b56      	ldr	r3, [pc, #344]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042fa:	e006      	b.n	800430a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004300:	e004      	b.n	800430c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004302:	bf00      	nop
 8004304:	e002      	b.n	800430c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004306:	bf00      	nop
 8004308:	e000      	b.n	800430c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800430a:	bf00      	nop
    }

    if(status == HAL_OK)
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d108      	bne.n	8004324 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004312:	4b4c      	ldr	r3, [pc, #304]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f023 0203 	bic.w	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4949      	ldr	r1, [pc, #292]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004320:	4313      	orrs	r3, r2
 8004322:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 8086 	bne.w	8004438 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800432c:	4b45      	ldr	r3, [pc, #276]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a44      	ldr	r2, [pc, #272]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004332:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004338:	f7fe f9f0 	bl	800271c <HAL_GetTick>
 800433c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800433e:	e009      	b.n	8004354 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004340:	f7fe f9ec 	bl	800271c <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d902      	bls.n	8004354 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	73fb      	strb	r3, [r7, #15]
        break;
 8004352:	e005      	b.n	8004360 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004354:	4b3b      	ldr	r3, [pc, #236]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ef      	bne.n	8004340 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d168      	bne.n	8004438 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d113      	bne.n	8004394 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800436c:	4b35      	ldr	r3, [pc, #212]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	4b35      	ldr	r3, [pc, #212]	; (8004448 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004372:	4013      	ands	r3, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6892      	ldr	r2, [r2, #8]
 8004378:	0211      	lsls	r1, r2, #8
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68d2      	ldr	r2, [r2, #12]
 800437e:	06d2      	lsls	r2, r2, #27
 8004380:	4311      	orrs	r1, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6852      	ldr	r2, [r2, #4]
 8004386:	3a01      	subs	r2, #1
 8004388:	0112      	lsls	r2, r2, #4
 800438a:	430a      	orrs	r2, r1
 800438c:	492d      	ldr	r1, [pc, #180]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 800438e:	4313      	orrs	r3, r2
 8004390:	610b      	str	r3, [r1, #16]
 8004392:	e02d      	b.n	80043f0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d115      	bne.n	80043c6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800439a:	4b2a      	ldr	r3, [pc, #168]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	4b2b      	ldr	r3, [pc, #172]	; (800444c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6892      	ldr	r2, [r2, #8]
 80043a6:	0211      	lsls	r1, r2, #8
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6912      	ldr	r2, [r2, #16]
 80043ac:	0852      	lsrs	r2, r2, #1
 80043ae:	3a01      	subs	r2, #1
 80043b0:	0552      	lsls	r2, r2, #21
 80043b2:	4311      	orrs	r1, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6852      	ldr	r2, [r2, #4]
 80043b8:	3a01      	subs	r2, #1
 80043ba:	0112      	lsls	r2, r2, #4
 80043bc:	430a      	orrs	r2, r1
 80043be:	4921      	ldr	r1, [pc, #132]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	610b      	str	r3, [r1, #16]
 80043c4:	e014      	b.n	80043f0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043c6:	4b1f      	ldr	r3, [pc, #124]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	4b21      	ldr	r3, [pc, #132]	; (8004450 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6892      	ldr	r2, [r2, #8]
 80043d2:	0211      	lsls	r1, r2, #8
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6952      	ldr	r2, [r2, #20]
 80043d8:	0852      	lsrs	r2, r2, #1
 80043da:	3a01      	subs	r2, #1
 80043dc:	0652      	lsls	r2, r2, #25
 80043de:	4311      	orrs	r1, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6852      	ldr	r2, [r2, #4]
 80043e4:	3a01      	subs	r2, #1
 80043e6:	0112      	lsls	r2, r2, #4
 80043e8:	430a      	orrs	r2, r1
 80043ea:	4916      	ldr	r1, [pc, #88]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043f0:	4b14      	ldr	r3, [pc, #80]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a13      	ldr	r2, [pc, #76]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fc:	f7fe f98e 	bl	800271c <HAL_GetTick>
 8004400:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004402:	e009      	b.n	8004418 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004404:	f7fe f98a 	bl	800271c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d902      	bls.n	8004418 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	73fb      	strb	r3, [r7, #15]
          break;
 8004416:	e005      	b.n	8004424 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0ef      	beq.n	8004404 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	4904      	ldr	r1, [pc, #16]	; (8004444 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004434:	4313      	orrs	r3, r2
 8004436:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004438:	7bfb      	ldrb	r3, [r7, #15]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40021000 	.word	0x40021000
 8004448:	07ff800f 	.word	0x07ff800f
 800444c:	ff9f800f 	.word	0xff9f800f
 8004450:	f9ff800f 	.word	0xf9ff800f

08004454 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004462:	4b72      	ldr	r3, [pc, #456]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00e      	beq.n	800448c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800446e:	4b6f      	ldr	r3, [pc, #444]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f003 0203 	and.w	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d103      	bne.n	8004486 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
       ||
 8004482:	2b00      	cmp	r3, #0
 8004484:	d142      	bne.n	800450c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	73fb      	strb	r3, [r7, #15]
 800448a:	e03f      	b.n	800450c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b03      	cmp	r3, #3
 8004492:	d018      	beq.n	80044c6 <RCCEx_PLLSAI2_Config+0x72>
 8004494:	2b03      	cmp	r3, #3
 8004496:	d825      	bhi.n	80044e4 <RCCEx_PLLSAI2_Config+0x90>
 8004498:	2b01      	cmp	r3, #1
 800449a:	d002      	beq.n	80044a2 <RCCEx_PLLSAI2_Config+0x4e>
 800449c:	2b02      	cmp	r3, #2
 800449e:	d009      	beq.n	80044b4 <RCCEx_PLLSAI2_Config+0x60>
 80044a0:	e020      	b.n	80044e4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044a2:	4b62      	ldr	r3, [pc, #392]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d11d      	bne.n	80044ea <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b2:	e01a      	b.n	80044ea <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044b4:	4b5d      	ldr	r3, [pc, #372]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d116      	bne.n	80044ee <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044c4:	e013      	b.n	80044ee <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044c6:	4b59      	ldr	r3, [pc, #356]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10f      	bne.n	80044f2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044d2:	4b56      	ldr	r3, [pc, #344]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044e2:	e006      	b.n	80044f2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	73fb      	strb	r3, [r7, #15]
      break;
 80044e8:	e004      	b.n	80044f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80044ea:	bf00      	nop
 80044ec:	e002      	b.n	80044f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80044ee:	bf00      	nop
 80044f0:	e000      	b.n	80044f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80044f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d108      	bne.n	800450c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80044fa:	4b4c      	ldr	r3, [pc, #304]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f023 0203 	bic.w	r2, r3, #3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4949      	ldr	r1, [pc, #292]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004508:	4313      	orrs	r3, r2
 800450a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	2b00      	cmp	r3, #0
 8004510:	f040 8086 	bne.w	8004620 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004514:	4b45      	ldr	r3, [pc, #276]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a44      	ldr	r2, [pc, #272]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 800451a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004520:	f7fe f8fc 	bl	800271c <HAL_GetTick>
 8004524:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004526:	e009      	b.n	800453c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004528:	f7fe f8f8 	bl	800271c <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d902      	bls.n	800453c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	73fb      	strb	r3, [r7, #15]
        break;
 800453a:	e005      	b.n	8004548 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800453c:	4b3b      	ldr	r3, [pc, #236]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1ef      	bne.n	8004528 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d168      	bne.n	8004620 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d113      	bne.n	800457c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004554:	4b35      	ldr	r3, [pc, #212]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	4b35      	ldr	r3, [pc, #212]	; (8004630 <RCCEx_PLLSAI2_Config+0x1dc>)
 800455a:	4013      	ands	r3, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6892      	ldr	r2, [r2, #8]
 8004560:	0211      	lsls	r1, r2, #8
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	68d2      	ldr	r2, [r2, #12]
 8004566:	06d2      	lsls	r2, r2, #27
 8004568:	4311      	orrs	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6852      	ldr	r2, [r2, #4]
 800456e:	3a01      	subs	r2, #1
 8004570:	0112      	lsls	r2, r2, #4
 8004572:	430a      	orrs	r2, r1
 8004574:	492d      	ldr	r1, [pc, #180]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004576:	4313      	orrs	r3, r2
 8004578:	614b      	str	r3, [r1, #20]
 800457a:	e02d      	b.n	80045d8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d115      	bne.n	80045ae <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004582:	4b2a      	ldr	r3, [pc, #168]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004584:	695a      	ldr	r2, [r3, #20]
 8004586:	4b2b      	ldr	r3, [pc, #172]	; (8004634 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004588:	4013      	ands	r3, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6892      	ldr	r2, [r2, #8]
 800458e:	0211      	lsls	r1, r2, #8
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6912      	ldr	r2, [r2, #16]
 8004594:	0852      	lsrs	r2, r2, #1
 8004596:	3a01      	subs	r2, #1
 8004598:	0552      	lsls	r2, r2, #21
 800459a:	4311      	orrs	r1, r2
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6852      	ldr	r2, [r2, #4]
 80045a0:	3a01      	subs	r2, #1
 80045a2:	0112      	lsls	r2, r2, #4
 80045a4:	430a      	orrs	r2, r1
 80045a6:	4921      	ldr	r1, [pc, #132]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	614b      	str	r3, [r1, #20]
 80045ac:	e014      	b.n	80045d8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045ae:	4b1f      	ldr	r3, [pc, #124]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	4b21      	ldr	r3, [pc, #132]	; (8004638 <RCCEx_PLLSAI2_Config+0x1e4>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6892      	ldr	r2, [r2, #8]
 80045ba:	0211      	lsls	r1, r2, #8
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6952      	ldr	r2, [r2, #20]
 80045c0:	0852      	lsrs	r2, r2, #1
 80045c2:	3a01      	subs	r2, #1
 80045c4:	0652      	lsls	r2, r2, #25
 80045c6:	4311      	orrs	r1, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6852      	ldr	r2, [r2, #4]
 80045cc:	3a01      	subs	r2, #1
 80045ce:	0112      	lsls	r2, r2, #4
 80045d0:	430a      	orrs	r2, r1
 80045d2:	4916      	ldr	r1, [pc, #88]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045d8:	4b14      	ldr	r3, [pc, #80]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a13      	ldr	r2, [pc, #76]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e4:	f7fe f89a 	bl	800271c <HAL_GetTick>
 80045e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045ea:	e009      	b.n	8004600 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045ec:	f7fe f896 	bl	800271c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d902      	bls.n	8004600 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	73fb      	strb	r3, [r7, #15]
          break;
 80045fe:	e005      	b.n	800460c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004600:	4b0a      	ldr	r3, [pc, #40]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0ef      	beq.n	80045ec <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	4904      	ldr	r1, [pc, #16]	; (800462c <RCCEx_PLLSAI2_Config+0x1d8>)
 800461c:	4313      	orrs	r3, r2
 800461e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004620:	7bfb      	ldrb	r3, [r7, #15]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000
 8004630:	07ff800f 	.word	0x07ff800f
 8004634:	ff9f800f 	.word	0xff9f800f
 8004638:	f9ff800f 	.word	0xf9ff800f

0800463c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e095      	b.n	800477a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	2b00      	cmp	r3, #0
 8004654:	d108      	bne.n	8004668 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800465e:	d009      	beq.n	8004674 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	61da      	str	r2, [r3, #28]
 8004666:	e005      	b.n	8004674 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fd fe42 	bl	8002318 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046b4:	d902      	bls.n	80046bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	e002      	b.n	80046c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80046bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80046ca:	d007      	beq.n	80046dc <HAL_SPI_Init+0xa0>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046d4:	d002      	beq.n	80046dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471e:	ea42 0103 	orr.w	r1, r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	0c1b      	lsrs	r3, r3, #16
 8004738:	f003 0204 	and.w	r2, r3, #4
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004758:	ea42 0103 	orr.w	r1, r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b088      	sub	sp, #32
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	603b      	str	r3, [r7, #0]
 800478e:	4613      	mov	r3, r2
 8004790:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_SPI_Transmit+0x22>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e15f      	b.n	8004a64 <HAL_SPI_Transmit+0x2e2>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ac:	f7fd ffb6 	bl	800271c <HAL_GetTick>
 80047b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d002      	beq.n	80047c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047c2:	2302      	movs	r3, #2
 80047c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047c6:	e148      	b.n	8004a5a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_SPI_Transmit+0x52>
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d102      	bne.n	80047da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047d8:	e13f      	b.n	8004a5a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2203      	movs	r2, #3
 80047de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	88fa      	ldrh	r2, [r7, #6]
 80047f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	88fa      	ldrh	r2, [r7, #6]
 80047f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004824:	d10f      	bne.n	8004846 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004834:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004844:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b40      	cmp	r3, #64	; 0x40
 8004852:	d007      	beq.n	8004864 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004862:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800486c:	d94f      	bls.n	800490e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_SPI_Transmit+0xfa>
 8004876:	8afb      	ldrh	r3, [r7, #22]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d142      	bne.n	8004902 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	881a      	ldrh	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	1c9a      	adds	r2, r3, #2
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048a0:	e02f      	b.n	8004902 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d112      	bne.n	80048d6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b4:	881a      	ldrh	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	1c9a      	adds	r2, r3, #2
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048d4:	e015      	b.n	8004902 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048d6:	f7fd ff21 	bl	800271c <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d803      	bhi.n	80048ee <HAL_SPI_Transmit+0x16c>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d102      	bne.n	80048f4 <HAL_SPI_Transmit+0x172>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004900:	e0ab      	b.n	8004a5a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004906:	b29b      	uxth	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1ca      	bne.n	80048a2 <HAL_SPI_Transmit+0x120>
 800490c:	e080      	b.n	8004a10 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_SPI_Transmit+0x19a>
 8004916:	8afb      	ldrh	r3, [r7, #22]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d174      	bne.n	8004a06 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d912      	bls.n	800494c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	881a      	ldrh	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	1c9a      	adds	r2, r3, #2
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b02      	subs	r3, #2
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	87da      	strh	r2, [r3, #62]	; 0x3e
 800494a:	e05c      	b.n	8004a06 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	7812      	ldrb	r2, [r2, #0]
 8004958:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004972:	e048      	b.n	8004a06 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b02      	cmp	r3, #2
 8004980:	d12b      	bne.n	80049da <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	d912      	bls.n	80049b2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	881a      	ldrh	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	1c9a      	adds	r2, r3, #2
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b02      	subs	r3, #2
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049b0:	e029      	b.n	8004a06 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	330c      	adds	r3, #12
 80049bc:	7812      	ldrb	r2, [r2, #0]
 80049be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049d8:	e015      	b.n	8004a06 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049da:	f7fd fe9f 	bl	800271c <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d803      	bhi.n	80049f2 <HAL_SPI_Transmit+0x270>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f0:	d102      	bne.n	80049f8 <HAL_SPI_Transmit+0x276>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d106      	bne.n	8004a06 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004a04:	e029      	b.n	8004a5a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1b1      	bne.n	8004974 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	6839      	ldr	r1, [r7, #0]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 fb69 	bl	80050ec <SPI_EndRxTxTransaction>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a2e:	2300      	movs	r3, #0
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	77fb      	strb	r3, [r7, #31]
 8004a50:	e003      	b.n	8004a5a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a62:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08a      	sub	sp, #40	; 0x28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_SPI_TransmitReceive+0x26>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e20a      	b.n	8004ea8 <HAL_SPI_TransmitReceive+0x43c>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a9a:	f7fd fe3f 	bl	800271c <HAL_GetTick>
 8004a9e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004aa6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004aae:	887b      	ldrh	r3, [r7, #2]
 8004ab0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004ab2:	887b      	ldrh	r3, [r7, #2]
 8004ab4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ab6:	7efb      	ldrb	r3, [r7, #27]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d00e      	beq.n	8004ada <HAL_SPI_TransmitReceive+0x6e>
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ac2:	d106      	bne.n	8004ad2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <HAL_SPI_TransmitReceive+0x66>
 8004acc:	7efb      	ldrb	r3, [r7, #27]
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d003      	beq.n	8004ada <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004ad8:	e1e0      	b.n	8004e9c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_SPI_TransmitReceive+0x80>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <HAL_SPI_TransmitReceive+0x80>
 8004ae6:	887b      	ldrh	r3, [r7, #2]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d103      	bne.n	8004af4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004af2:	e1d3      	b.n	8004e9c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d003      	beq.n	8004b08 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2205      	movs	r2, #5
 8004b04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	887a      	ldrh	r2, [r7, #2]
 8004b18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	887a      	ldrh	r2, [r7, #2]
 8004b20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	887a      	ldrh	r2, [r7, #2]
 8004b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	887a      	ldrh	r2, [r7, #2]
 8004b34:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b4a:	d802      	bhi.n	8004b52 <HAL_SPI_TransmitReceive+0xe6>
 8004b4c:	8a3b      	ldrh	r3, [r7, #16]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d908      	bls.n	8004b64 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	e007      	b.n	8004b74 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b72:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d007      	beq.n	8004b92 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b9a:	f240 8081 	bls.w	8004ca0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <HAL_SPI_TransmitReceive+0x140>
 8004ba6:	8a7b      	ldrh	r3, [r7, #18]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d16d      	bne.n	8004c88 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	881a      	ldrh	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	1c9a      	adds	r2, r3, #2
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bd0:	e05a      	b.n	8004c88 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d11b      	bne.n	8004c18 <HAL_SPI_TransmitReceive+0x1ac>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d016      	beq.n	8004c18 <HAL_SPI_TransmitReceive+0x1ac>
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d113      	bne.n	8004c18 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	881a      	ldrh	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	1c9a      	adds	r2, r3, #2
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d11c      	bne.n	8004c60 <HAL_SPI_TransmitReceive+0x1f4>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d016      	beq.n	8004c60 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	b292      	uxth	r2, r2
 8004c3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	1c9a      	adds	r2, r3, #2
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c60:	f7fd fd5c 	bl	800271c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d80b      	bhi.n	8004c88 <HAL_SPI_TransmitReceive+0x21c>
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c76:	d007      	beq.n	8004c88 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004c86:	e109      	b.n	8004e9c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d19f      	bne.n	8004bd2 <HAL_SPI_TransmitReceive+0x166>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d199      	bne.n	8004bd2 <HAL_SPI_TransmitReceive+0x166>
 8004c9e:	e0e3      	b.n	8004e68 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <HAL_SPI_TransmitReceive+0x244>
 8004ca8:	8a7b      	ldrh	r3, [r7, #18]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	f040 80cf 	bne.w	8004e4e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d912      	bls.n	8004ce0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	881a      	ldrh	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	1c9a      	adds	r2, r3, #2
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b02      	subs	r3, #2
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cde:	e0b6      	b.n	8004e4e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d06:	e0a2      	b.n	8004e4e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d134      	bne.n	8004d80 <HAL_SPI_TransmitReceive+0x314>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d02f      	beq.n	8004d80 <HAL_SPI_TransmitReceive+0x314>
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d12c      	bne.n	8004d80 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d912      	bls.n	8004d56 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	881a      	ldrh	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	1c9a      	adds	r2, r3, #2
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b02      	subs	r3, #2
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d54:	e012      	b.n	8004d7c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	330c      	adds	r3, #12
 8004d60:	7812      	ldrb	r2, [r2, #0]
 8004d62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d148      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x3b4>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d042      	beq.n	8004e20 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d923      	bls.n	8004dee <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	b292      	uxth	r2, r2
 8004db2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	1c9a      	adds	r2, r3, #2
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b02      	subs	r3, #2
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d81f      	bhi.n	8004e1c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dea:	605a      	str	r2, [r3, #4]
 8004dec:	e016      	b.n	8004e1c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f103 020c 	add.w	r2, r3, #12
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	7812      	ldrb	r2, [r2, #0]
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e20:	f7fd fc7c 	bl	800271c <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d803      	bhi.n	8004e38 <HAL_SPI_TransmitReceive+0x3cc>
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e36:	d102      	bne.n	8004e3e <HAL_SPI_TransmitReceive+0x3d2>
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d107      	bne.n	8004e4e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004e4c:	e026      	b.n	8004e9c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f47f af57 	bne.w	8004d08 <HAL_SPI_TransmitReceive+0x29c>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f47f af50 	bne.w	8004d08 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f93d 	bl	80050ec <SPI_EndRxTxTransaction>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e92:	e003      	b.n	8004e9c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3728      	adds	r7, #40	; 0x28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ec0:	f7fd fc2c 	bl	800271c <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	1a9b      	subs	r3, r3, r2
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	4413      	add	r3, r2
 8004ece:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ed0:	f7fd fc24 	bl	800271c <HAL_GetTick>
 8004ed4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ed6:	4b39      	ldr	r3, [pc, #228]	; (8004fbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	015b      	lsls	r3, r3, #5
 8004edc:	0d1b      	lsrs	r3, r3, #20
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	fb02 f303 	mul.w	r3, r2, r3
 8004ee4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ee6:	e054      	b.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d050      	beq.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ef0:	f7fd fc14 	bl	800271c <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d902      	bls.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d13d      	bne.n	8004f82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f1e:	d111      	bne.n	8004f44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f28:	d004      	beq.n	8004f34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f32:	d107      	bne.n	8004f44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4c:	d10f      	bne.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e017      	b.n	8004fb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	bf0c      	ite	eq
 8004fa2:	2301      	moveq	r3, #1
 8004fa4:	2300      	movne	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d19b      	bne.n	8004ee8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000004 	.word	0x20000004

08004fc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fd2:	f7fd fba3 	bl	800271c <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	4413      	add	r3, r2
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004fe2:	f7fd fb9b 	bl	800271c <HAL_GetTick>
 8004fe6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ff0:	4b3d      	ldr	r3, [pc, #244]	; (80050e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	00da      	lsls	r2, r3, #3
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	0d1b      	lsrs	r3, r3, #20
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	fb02 f303 	mul.w	r3, r2, r3
 8005006:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005008:	e060      	b.n	80050cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005010:	d107      	bne.n	8005022 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005020:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005028:	d050      	beq.n	80050cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800502a:	f7fd fb77 	bl	800271c <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005036:	429a      	cmp	r2, r3
 8005038:	d902      	bls.n	8005040 <SPI_WaitFifoStateUntilTimeout+0x80>
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	2b00      	cmp	r3, #0
 800503e:	d13d      	bne.n	80050bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800504e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005058:	d111      	bne.n	800507e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005062:	d004      	beq.n	800506e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506c:	d107      	bne.n	800507e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800507c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005086:	d10f      	bne.n	80050a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e010      	b.n	80050de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	4013      	ands	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d196      	bne.n	800500a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3728      	adds	r7, #40	; 0x28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000004 	.word	0x20000004

080050ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2200      	movs	r2, #0
 8005100:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff ff5b 	bl	8004fc0 <SPI_WaitFifoStateUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005114:	f043 0220 	orr.w	r2, r3, #32
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e027      	b.n	8005170 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2200      	movs	r2, #0
 8005128:	2180      	movs	r1, #128	; 0x80
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff fec0 	bl	8004eb0 <SPI_WaitFlagStateUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e014      	b.n	8005170 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2200      	movs	r2, #0
 800514e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f7ff ff34 	bl	8004fc0 <SPI_WaitFifoStateUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005162:	f043 0220 	orr.w	r2, r3, #32
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e000      	b.n	8005170 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e042      	b.n	8005210 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7fd f85b 	bl	8002258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2224      	movs	r2, #36	; 0x24
 80051a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0201 	bic.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fbb4 	bl	8005930 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f8b5 	bl	8005338 <UART_SetConfig>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e01b      	b.n	8005210 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fc33 	bl	8005a74 <UART_CheckIdleState>
 800520e:	4603      	mov	r3, r0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522e:	2b20      	cmp	r3, #32
 8005230:	d17c      	bne.n	800532c <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <HAL_UART_Transmit+0x26>
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e075      	b.n	800532e <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2221      	movs	r2, #33	; 0x21
 800524e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005252:	f7fd fa63 	bl	800271c <HAL_GetTick>
 8005256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	88fa      	ldrh	r2, [r7, #6]
 800525c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	88fa      	ldrh	r2, [r7, #6]
 8005264:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005270:	d108      	bne.n	8005284 <HAL_UART_Transmit+0x6c>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d104      	bne.n	8005284 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	e003      	b.n	800528c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005288:	2300      	movs	r3, #0
 800528a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800528c:	e031      	b.n	80052f2 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2200      	movs	r2, #0
 8005296:	2180      	movs	r1, #128	; 0x80
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 fc95 	bl	8005bc8 <UART_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e03e      	b.n	800532e <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10b      	bne.n	80052ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	881a      	ldrh	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052c2:	b292      	uxth	r2, r2
 80052c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	3302      	adds	r3, #2
 80052ca:	61bb      	str	r3, [r7, #24]
 80052cc:	e008      	b.n	80052e0 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	781a      	ldrb	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	b292      	uxth	r2, r2
 80052d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	3301      	adds	r3, #1
 80052de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1c7      	bne.n	800528e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2200      	movs	r2, #0
 8005306:	2140      	movs	r1, #64	; 0x40
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 fc5d 	bl	8005bc8 <UART_WaitOnFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e006      	b.n	800532e <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	e000      	b.n	800532e <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800532c:	2302      	movs	r3, #2
  }
}
 800532e:	4618      	mov	r0, r3
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800533c:	b08c      	sub	sp, #48	; 0x30
 800533e:	af00      	add	r7, sp, #0
 8005340:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	431a      	orrs	r2, r3
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	431a      	orrs	r2, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	4313      	orrs	r3, r2
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4baa      	ldr	r3, [pc, #680]	; (8005610 <UART_SetConfig+0x2d8>)
 8005368:	4013      	ands	r3, r2
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005370:	430b      	orrs	r3, r1
 8005372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a9f      	ldr	r2, [pc, #636]	; (8005614 <UART_SetConfig+0x2dc>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053a0:	4313      	orrs	r3, r2
 80053a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80053ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	6812      	ldr	r2, [r2, #0]
 80053b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053b8:	430b      	orrs	r3, r1
 80053ba:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	f023 010f 	bic.w	r1, r3, #15
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a90      	ldr	r2, [pc, #576]	; (8005618 <UART_SetConfig+0x2e0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d125      	bne.n	8005428 <UART_SetConfig+0xf0>
 80053dc:	4b8f      	ldr	r3, [pc, #572]	; (800561c <UART_SetConfig+0x2e4>)
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d81a      	bhi.n	8005420 <UART_SetConfig+0xe8>
 80053ea:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <UART_SetConfig+0xb8>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005401 	.word	0x08005401
 80053f4:	08005411 	.word	0x08005411
 80053f8:	08005409 	.word	0x08005409
 80053fc:	08005419 	.word	0x08005419
 8005400:	2301      	movs	r3, #1
 8005402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005406:	e116      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005408:	2302      	movs	r3, #2
 800540a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800540e:	e112      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005410:	2304      	movs	r3, #4
 8005412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005416:	e10e      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005418:	2308      	movs	r3, #8
 800541a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800541e:	e10a      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005420:	2310      	movs	r3, #16
 8005422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005426:	e106      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a7c      	ldr	r2, [pc, #496]	; (8005620 <UART_SetConfig+0x2e8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d138      	bne.n	80054a4 <UART_SetConfig+0x16c>
 8005432:	4b7a      	ldr	r3, [pc, #488]	; (800561c <UART_SetConfig+0x2e4>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005438:	f003 030c 	and.w	r3, r3, #12
 800543c:	2b0c      	cmp	r3, #12
 800543e:	d82d      	bhi.n	800549c <UART_SetConfig+0x164>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <UART_SetConfig+0x110>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	0800547d 	.word	0x0800547d
 800544c:	0800549d 	.word	0x0800549d
 8005450:	0800549d 	.word	0x0800549d
 8005454:	0800549d 	.word	0x0800549d
 8005458:	0800548d 	.word	0x0800548d
 800545c:	0800549d 	.word	0x0800549d
 8005460:	0800549d 	.word	0x0800549d
 8005464:	0800549d 	.word	0x0800549d
 8005468:	08005485 	.word	0x08005485
 800546c:	0800549d 	.word	0x0800549d
 8005470:	0800549d 	.word	0x0800549d
 8005474:	0800549d 	.word	0x0800549d
 8005478:	08005495 	.word	0x08005495
 800547c:	2300      	movs	r3, #0
 800547e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005482:	e0d8      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005484:	2302      	movs	r3, #2
 8005486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800548a:	e0d4      	b.n	8005636 <UART_SetConfig+0x2fe>
 800548c:	2304      	movs	r3, #4
 800548e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005492:	e0d0      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005494:	2308      	movs	r3, #8
 8005496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800549a:	e0cc      	b.n	8005636 <UART_SetConfig+0x2fe>
 800549c:	2310      	movs	r3, #16
 800549e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054a2:	e0c8      	b.n	8005636 <UART_SetConfig+0x2fe>
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a5e      	ldr	r2, [pc, #376]	; (8005624 <UART_SetConfig+0x2ec>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d125      	bne.n	80054fa <UART_SetConfig+0x1c2>
 80054ae:	4b5b      	ldr	r3, [pc, #364]	; (800561c <UART_SetConfig+0x2e4>)
 80054b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054b8:	2b30      	cmp	r3, #48	; 0x30
 80054ba:	d016      	beq.n	80054ea <UART_SetConfig+0x1b2>
 80054bc:	2b30      	cmp	r3, #48	; 0x30
 80054be:	d818      	bhi.n	80054f2 <UART_SetConfig+0x1ba>
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d00a      	beq.n	80054da <UART_SetConfig+0x1a2>
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d814      	bhi.n	80054f2 <UART_SetConfig+0x1ba>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <UART_SetConfig+0x19a>
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d008      	beq.n	80054e2 <UART_SetConfig+0x1aa>
 80054d0:	e00f      	b.n	80054f2 <UART_SetConfig+0x1ba>
 80054d2:	2300      	movs	r3, #0
 80054d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054d8:	e0ad      	b.n	8005636 <UART_SetConfig+0x2fe>
 80054da:	2302      	movs	r3, #2
 80054dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054e0:	e0a9      	b.n	8005636 <UART_SetConfig+0x2fe>
 80054e2:	2304      	movs	r3, #4
 80054e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054e8:	e0a5      	b.n	8005636 <UART_SetConfig+0x2fe>
 80054ea:	2308      	movs	r3, #8
 80054ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054f0:	e0a1      	b.n	8005636 <UART_SetConfig+0x2fe>
 80054f2:	2310      	movs	r3, #16
 80054f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054f8:	e09d      	b.n	8005636 <UART_SetConfig+0x2fe>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a4a      	ldr	r2, [pc, #296]	; (8005628 <UART_SetConfig+0x2f0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d125      	bne.n	8005550 <UART_SetConfig+0x218>
 8005504:	4b45      	ldr	r3, [pc, #276]	; (800561c <UART_SetConfig+0x2e4>)
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800550e:	2bc0      	cmp	r3, #192	; 0xc0
 8005510:	d016      	beq.n	8005540 <UART_SetConfig+0x208>
 8005512:	2bc0      	cmp	r3, #192	; 0xc0
 8005514:	d818      	bhi.n	8005548 <UART_SetConfig+0x210>
 8005516:	2b80      	cmp	r3, #128	; 0x80
 8005518:	d00a      	beq.n	8005530 <UART_SetConfig+0x1f8>
 800551a:	2b80      	cmp	r3, #128	; 0x80
 800551c:	d814      	bhi.n	8005548 <UART_SetConfig+0x210>
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <UART_SetConfig+0x1f0>
 8005522:	2b40      	cmp	r3, #64	; 0x40
 8005524:	d008      	beq.n	8005538 <UART_SetConfig+0x200>
 8005526:	e00f      	b.n	8005548 <UART_SetConfig+0x210>
 8005528:	2300      	movs	r3, #0
 800552a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800552e:	e082      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005530:	2302      	movs	r3, #2
 8005532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005536:	e07e      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005538:	2304      	movs	r3, #4
 800553a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800553e:	e07a      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005540:	2308      	movs	r3, #8
 8005542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005546:	e076      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005548:	2310      	movs	r3, #16
 800554a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800554e:	e072      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a35      	ldr	r2, [pc, #212]	; (800562c <UART_SetConfig+0x2f4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d12a      	bne.n	80055b0 <UART_SetConfig+0x278>
 800555a:	4b30      	ldr	r3, [pc, #192]	; (800561c <UART_SetConfig+0x2e4>)
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005568:	d01a      	beq.n	80055a0 <UART_SetConfig+0x268>
 800556a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800556e:	d81b      	bhi.n	80055a8 <UART_SetConfig+0x270>
 8005570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005574:	d00c      	beq.n	8005590 <UART_SetConfig+0x258>
 8005576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800557a:	d815      	bhi.n	80055a8 <UART_SetConfig+0x270>
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <UART_SetConfig+0x250>
 8005580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005584:	d008      	beq.n	8005598 <UART_SetConfig+0x260>
 8005586:	e00f      	b.n	80055a8 <UART_SetConfig+0x270>
 8005588:	2300      	movs	r3, #0
 800558a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800558e:	e052      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005590:	2302      	movs	r3, #2
 8005592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005596:	e04e      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005598:	2304      	movs	r3, #4
 800559a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800559e:	e04a      	b.n	8005636 <UART_SetConfig+0x2fe>
 80055a0:	2308      	movs	r3, #8
 80055a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055a6:	e046      	b.n	8005636 <UART_SetConfig+0x2fe>
 80055a8:	2310      	movs	r3, #16
 80055aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ae:	e042      	b.n	8005636 <UART_SetConfig+0x2fe>
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a17      	ldr	r2, [pc, #92]	; (8005614 <UART_SetConfig+0x2dc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d13a      	bne.n	8005630 <UART_SetConfig+0x2f8>
 80055ba:	4b18      	ldr	r3, [pc, #96]	; (800561c <UART_SetConfig+0x2e4>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055c8:	d01a      	beq.n	8005600 <UART_SetConfig+0x2c8>
 80055ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055ce:	d81b      	bhi.n	8005608 <UART_SetConfig+0x2d0>
 80055d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d4:	d00c      	beq.n	80055f0 <UART_SetConfig+0x2b8>
 80055d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055da:	d815      	bhi.n	8005608 <UART_SetConfig+0x2d0>
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <UART_SetConfig+0x2b0>
 80055e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e4:	d008      	beq.n	80055f8 <UART_SetConfig+0x2c0>
 80055e6:	e00f      	b.n	8005608 <UART_SetConfig+0x2d0>
 80055e8:	2300      	movs	r3, #0
 80055ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ee:	e022      	b.n	8005636 <UART_SetConfig+0x2fe>
 80055f0:	2302      	movs	r3, #2
 80055f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055f6:	e01e      	b.n	8005636 <UART_SetConfig+0x2fe>
 80055f8:	2304      	movs	r3, #4
 80055fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055fe:	e01a      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005600:	2308      	movs	r3, #8
 8005602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005606:	e016      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005608:	2310      	movs	r3, #16
 800560a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800560e:	e012      	b.n	8005636 <UART_SetConfig+0x2fe>
 8005610:	cfff69f3 	.word	0xcfff69f3
 8005614:	40008000 	.word	0x40008000
 8005618:	40013800 	.word	0x40013800
 800561c:	40021000 	.word	0x40021000
 8005620:	40004400 	.word	0x40004400
 8005624:	40004800 	.word	0x40004800
 8005628:	40004c00 	.word	0x40004c00
 800562c:	40005000 	.word	0x40005000
 8005630:	2310      	movs	r3, #16
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4aae      	ldr	r2, [pc, #696]	; (80058f4 <UART_SetConfig+0x5bc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	f040 8097 	bne.w	8005770 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005642:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005646:	2b08      	cmp	r3, #8
 8005648:	d823      	bhi.n	8005692 <UART_SetConfig+0x35a>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <UART_SetConfig+0x318>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005675 	.word	0x08005675
 8005654:	08005693 	.word	0x08005693
 8005658:	0800567d 	.word	0x0800567d
 800565c:	08005693 	.word	0x08005693
 8005660:	08005683 	.word	0x08005683
 8005664:	08005693 	.word	0x08005693
 8005668:	08005693 	.word	0x08005693
 800566c:	08005693 	.word	0x08005693
 8005670:	0800568b 	.word	0x0800568b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005674:	f7fe f9de 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8005678:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800567a:	e010      	b.n	800569e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800567c:	4b9e      	ldr	r3, [pc, #632]	; (80058f8 <UART_SetConfig+0x5c0>)
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005680:	e00d      	b.n	800569e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005682:	f7fe f93f 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 8005686:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005688:	e009      	b.n	800569e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800568a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005690:	e005      	b.n	800569e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800569c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8130 	beq.w	8005906 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	4a94      	ldr	r2, [pc, #592]	; (80058fc <UART_SetConfig+0x5c4>)
 80056ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056b0:	461a      	mov	r2, r3
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	4613      	mov	r3, r2
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	4413      	add	r3, r2
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d305      	bcc.n	80056d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d903      	bls.n	80056de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80056dc:	e113      	b.n	8005906 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	2200      	movs	r2, #0
 80056e2:	60bb      	str	r3, [r7, #8]
 80056e4:	60fa      	str	r2, [r7, #12]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	4a84      	ldr	r2, [pc, #528]	; (80058fc <UART_SetConfig+0x5c4>)
 80056ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2200      	movs	r2, #0
 80056f4:	603b      	str	r3, [r7, #0]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005700:	f7fb fa8a 	bl	8000c18 <__aeabi_uldivmod>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4610      	mov	r0, r2
 800570a:	4619      	mov	r1, r3
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	020b      	lsls	r3, r1, #8
 8005716:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800571a:	0202      	lsls	r2, r0, #8
 800571c:	6979      	ldr	r1, [r7, #20]
 800571e:	6849      	ldr	r1, [r1, #4]
 8005720:	0849      	lsrs	r1, r1, #1
 8005722:	2000      	movs	r0, #0
 8005724:	460c      	mov	r4, r1
 8005726:	4605      	mov	r5, r0
 8005728:	eb12 0804 	adds.w	r8, r2, r4
 800572c:	eb43 0905 	adc.w	r9, r3, r5
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	469a      	mov	sl, r3
 8005738:	4693      	mov	fp, r2
 800573a:	4652      	mov	r2, sl
 800573c:	465b      	mov	r3, fp
 800573e:	4640      	mov	r0, r8
 8005740:	4649      	mov	r1, r9
 8005742:	f7fb fa69 	bl	8000c18 <__aeabi_uldivmod>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4613      	mov	r3, r2
 800574c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005754:	d308      	bcc.n	8005768 <UART_SetConfig+0x430>
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800575c:	d204      	bcs.n	8005768 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6a3a      	ldr	r2, [r7, #32]
 8005764:	60da      	str	r2, [r3, #12]
 8005766:	e0ce      	b.n	8005906 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800576e:	e0ca      	b.n	8005906 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005778:	d166      	bne.n	8005848 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800577a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800577e:	2b08      	cmp	r3, #8
 8005780:	d827      	bhi.n	80057d2 <UART_SetConfig+0x49a>
 8005782:	a201      	add	r2, pc, #4	; (adr r2, 8005788 <UART_SetConfig+0x450>)
 8005784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005788:	080057ad 	.word	0x080057ad
 800578c:	080057b5 	.word	0x080057b5
 8005790:	080057bd 	.word	0x080057bd
 8005794:	080057d3 	.word	0x080057d3
 8005798:	080057c3 	.word	0x080057c3
 800579c:	080057d3 	.word	0x080057d3
 80057a0:	080057d3 	.word	0x080057d3
 80057a4:	080057d3 	.word	0x080057d3
 80057a8:	080057cb 	.word	0x080057cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ac:	f7fe f942 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 80057b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057b2:	e014      	b.n	80057de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057b4:	f7fe f954 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 80057b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057ba:	e010      	b.n	80057de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057bc:	4b4e      	ldr	r3, [pc, #312]	; (80058f8 <UART_SetConfig+0x5c0>)
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057c0:	e00d      	b.n	80057de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057c2:	f7fe f89f 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 80057c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057c8:	e009      	b.n	80057de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057d0:	e005      	b.n	80057de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80057dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 8090 	beq.w	8005906 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	4a44      	ldr	r2, [pc, #272]	; (80058fc <UART_SetConfig+0x5c4>)
 80057ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057f0:	461a      	mov	r2, r3
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80057f8:	005a      	lsls	r2, r3, #1
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	085b      	lsrs	r3, r3, #1
 8005800:	441a      	add	r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	fbb2 f3f3 	udiv	r3, r2, r3
 800580a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	2b0f      	cmp	r3, #15
 8005810:	d916      	bls.n	8005840 <UART_SetConfig+0x508>
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005818:	d212      	bcs.n	8005840 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	b29b      	uxth	r3, r3
 800581e:	f023 030f 	bic.w	r3, r3, #15
 8005822:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	b29b      	uxth	r3, r3
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	b29a      	uxth	r2, r3
 8005830:	8bfb      	ldrh	r3, [r7, #30]
 8005832:	4313      	orrs	r3, r2
 8005834:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	8bfa      	ldrh	r2, [r7, #30]
 800583c:	60da      	str	r2, [r3, #12]
 800583e:	e062      	b.n	8005906 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005846:	e05e      	b.n	8005906 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800584c:	2b08      	cmp	r3, #8
 800584e:	d828      	bhi.n	80058a2 <UART_SetConfig+0x56a>
 8005850:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <UART_SetConfig+0x520>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	0800587d 	.word	0x0800587d
 800585c:	08005885 	.word	0x08005885
 8005860:	0800588d 	.word	0x0800588d
 8005864:	080058a3 	.word	0x080058a3
 8005868:	08005893 	.word	0x08005893
 800586c:	080058a3 	.word	0x080058a3
 8005870:	080058a3 	.word	0x080058a3
 8005874:	080058a3 	.word	0x080058a3
 8005878:	0800589b 	.word	0x0800589b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800587c:	f7fe f8da 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8005880:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005882:	e014      	b.n	80058ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005884:	f7fe f8ec 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 8005888:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800588a:	e010      	b.n	80058ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800588c:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <UART_SetConfig+0x5c0>)
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005890:	e00d      	b.n	80058ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005892:	f7fe f837 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 8005896:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005898:	e009      	b.n	80058ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800589a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058a0:	e005      	b.n	80058ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058ac:	bf00      	nop
    }

    if (pclk != 0U)
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d028      	beq.n	8005906 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	4a10      	ldr	r2, [pc, #64]	; (80058fc <UART_SetConfig+0x5c4>)
 80058ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058be:	461a      	mov	r2, r3
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	085b      	lsrs	r3, r3, #1
 80058cc:	441a      	add	r2, r3
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	2b0f      	cmp	r3, #15
 80058dc:	d910      	bls.n	8005900 <UART_SetConfig+0x5c8>
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e4:	d20c      	bcs.n	8005900 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60da      	str	r2, [r3, #12]
 80058f0:	e009      	b.n	8005906 <UART_SetConfig+0x5ce>
 80058f2:	bf00      	nop
 80058f4:	40008000 	.word	0x40008000
 80058f8:	00f42400 	.word	0x00f42400
 80058fc:	0800c59c 	.word	0x0800c59c
      }
      else
      {
        ret = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2201      	movs	r2, #1
 800590a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2201      	movs	r2, #1
 8005912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2200      	movs	r2, #0
 800591a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2200      	movs	r2, #0
 8005920:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005922:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005926:	4618      	mov	r0, r3
 8005928:	3730      	adds	r7, #48	; 0x30
 800592a:	46bd      	mov	sp, r7
 800592c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01a      	beq.n	8005a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a2e:	d10a      	bne.n	8005a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	605a      	str	r2, [r3, #4]
  }
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b098      	sub	sp, #96	; 0x60
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a84:	f7fc fe4a 	bl	800271c <HAL_GetTick>
 8005a88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d12f      	bne.n	8005af8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f88e 	bl	8005bc8 <UART_WaitOnFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d022      	beq.n	8005af8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ad2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e6      	bne.n	8005ab2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e063      	b.n	8005bc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d149      	bne.n	8005b9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f857 	bl	8005bc8 <UART_WaitOnFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d03c      	beq.n	8005b9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e6      	bne.n	8005b20 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3308      	adds	r3, #8
 8005b58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f023 0301 	bic.w	r3, r3, #1
 8005b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3308      	adds	r3, #8
 8005b70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b72:	61fa      	str	r2, [r7, #28]
 8005b74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	69b9      	ldr	r1, [r7, #24]
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e5      	bne.n	8005b52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e012      	b.n	8005bc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3758      	adds	r7, #88	; 0x58
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd8:	e049      	b.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be0:	d045      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be2:	f7fc fd9b 	bl	800271c <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d302      	bcc.n	8005bf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e048      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d031      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d110      	bne.n	8005c3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2208      	movs	r2, #8
 8005c1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f838 	bl	8005c96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2208      	movs	r2, #8
 8005c2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e029      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c48:	d111      	bne.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 f81e 	bl	8005c96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e00f      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4013      	ands	r3, r2
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	bf0c      	ite	eq
 8005c7e:	2301      	moveq	r3, #1
 8005c80:	2300      	movne	r3, #0
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	79fb      	ldrb	r3, [r7, #7]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d0a6      	beq.n	8005bda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b095      	sub	sp, #84	; 0x54
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005cbe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e6      	bne.n	8005c9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cfc:	e841 2300 	strex	r3, r2, [r1]
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e3      	bne.n	8005cd0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d118      	bne.n	8005d42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f023 0310 	bic.w	r3, r3, #16
 8005d24:	647b      	str	r3, [r7, #68]	; 0x44
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d2e:	61bb      	str	r3, [r7, #24]
 8005d30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	6979      	ldr	r1, [r7, #20]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e6      	bne.n	8005d10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005d56:	bf00      	nop
 8005d58:	3754      	adds	r7, #84	; 0x54
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e027      	b.n	8005dc8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2224      	movs	r2, #36	; 0x24
 8005d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0201 	bic.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005da6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e02d      	b.n	8005e48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2224      	movs	r2, #36	; 0x24
 8005df8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0201 	bic.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f84f 	bl	8005ecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e02d      	b.n	8005ec4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2224      	movs	r2, #36	; 0x24
 8005e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0201 	bic.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f811 	bl	8005ecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d108      	bne.n	8005eee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005eec:	e031      	b.n	8005f52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005eee:	2308      	movs	r3, #8
 8005ef0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	0e5b      	lsrs	r3, r3, #25
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	0f5b      	lsrs	r3, r3, #29
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f16:	7bbb      	ldrb	r3, [r7, #14]
 8005f18:	7b3a      	ldrb	r2, [r7, #12]
 8005f1a:	4911      	ldr	r1, [pc, #68]	; (8005f60 <UARTEx_SetNbDataToProcess+0x94>)
 8005f1c:	5c8a      	ldrb	r2, [r1, r2]
 8005f1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f22:	7b3a      	ldrb	r2, [r7, #12]
 8005f24:	490f      	ldr	r1, [pc, #60]	; (8005f64 <UARTEx_SetNbDataToProcess+0x98>)
 8005f26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f28:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	7b7a      	ldrb	r2, [r7, #13]
 8005f38:	4909      	ldr	r1, [pc, #36]	; (8005f60 <UARTEx_SetNbDataToProcess+0x94>)
 8005f3a:	5c8a      	ldrb	r2, [r1, r2]
 8005f3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f40:	7b7a      	ldrb	r2, [r7, #13]
 8005f42:	4908      	ldr	r1, [pc, #32]	; (8005f64 <UARTEx_SetNbDataToProcess+0x98>)
 8005f44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f46:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f52:	bf00      	nop
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	0800c5b4 	.word	0x0800c5b4
 8005f64:	0800c5bc 	.word	0x0800c5bc

08005f68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005f6c:	4904      	ldr	r1, [pc, #16]	; (8005f80 <MX_FATFS_Init+0x18>)
 8005f6e:	4805      	ldr	r0, [pc, #20]	; (8005f84 <MX_FATFS_Init+0x1c>)
 8005f70:	f003 f9c8 	bl	8009304 <FATFS_LinkDriver>
 8005f74:	4603      	mov	r3, r0
 8005f76:	461a      	mov	r2, r3
 8005f78:	4b03      	ldr	r3, [pc, #12]	; (8005f88 <MX_FATFS_Init+0x20>)
 8005f7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005f7c:	bf00      	nop
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	200023f4 	.word	0x200023f4
 8005f84:	20000010 	.word	0x20000010
 8005f88:	200023f0 	.word	0x200023f0

08005f8c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005f90:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize ( pdrv);
 8005fa6:	79fb      	ldrb	r3, [r7, #7]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fb f96b 	bl	8001284 <SD_disk_initialize>
 8005fae:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status ( pdrv);
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fb fa43 	bl	8001450 <SD_disk_status>
 8005fca:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	607a      	str	r2, [r7, #4]
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read ( pdrv, buff,  sector,  count);
 8005fe4:	7bf8      	ldrb	r0, [r7, #15]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	68b9      	ldr	r1, [r7, #8]
 8005fec:	f7fb fa46 	bl	800147c <SD_disk_read>
 8005ff0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
 8006006:	4603      	mov	r3, r0
 8006008:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write ( pdrv, buff,  sector,  count);
 800600a:	7bf8      	ldrb	r0, [r7, #15]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	f7fb fa9d 	bl	8001550 <SD_disk_write>
 8006016:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	603a      	str	r2, [r7, #0]
 800602a:	71fb      	strb	r3, [r7, #7]
 800602c:	460b      	mov	r3, r1
 800602e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl ( pdrv,  cmd, buff);
 8006030:	79b9      	ldrb	r1, [r7, #6]
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f7fb fb0e 	bl	8001658 <SD_disk_ioctl>
 800603c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	4603      	mov	r3, r0
 8006050:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	4a08      	ldr	r2, [pc, #32]	; (8006078 <disk_status+0x30>)
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	79fa      	ldrb	r2, [r7, #7]
 8006060:	4905      	ldr	r1, [pc, #20]	; (8006078 <disk_status+0x30>)
 8006062:	440a      	add	r2, r1
 8006064:	7a12      	ldrb	r2, [r2, #8]
 8006066:	4610      	mov	r0, r2
 8006068:	4798      	blx	r3
 800606a:	4603      	mov	r3, r0
 800606c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20002620 	.word	0x20002620

0800607c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	4603      	mov	r3, r0
 8006084:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	4a0d      	ldr	r2, [pc, #52]	; (80060c4 <disk_initialize+0x48>)
 800608e:	5cd3      	ldrb	r3, [r2, r3]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d111      	bne.n	80060b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	4a0b      	ldr	r2, [pc, #44]	; (80060c4 <disk_initialize+0x48>)
 8006098:	2101      	movs	r1, #1
 800609a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <disk_initialize+0x48>)
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	79fa      	ldrb	r2, [r7, #7]
 80060aa:	4906      	ldr	r1, [pc, #24]	; (80060c4 <disk_initialize+0x48>)
 80060ac:	440a      	add	r2, r1
 80060ae:	7a12      	ldrb	r2, [r2, #8]
 80060b0:	4610      	mov	r0, r2
 80060b2:	4798      	blx	r3
 80060b4:	4603      	mov	r3, r0
 80060b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20002620 	.word	0x20002620

080060c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80060c8:	b590      	push	{r4, r7, lr}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	4603      	mov	r3, r0
 80060d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	4a0a      	ldr	r2, [pc, #40]	; (8006104 <disk_read+0x3c>)
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	689c      	ldr	r4, [r3, #8]
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	4a07      	ldr	r2, [pc, #28]	; (8006104 <disk_read+0x3c>)
 80060e8:	4413      	add	r3, r2
 80060ea:	7a18      	ldrb	r0, [r3, #8]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	47a0      	blx	r4
 80060f4:	4603      	mov	r3, r0
 80060f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd90      	pop	{r4, r7, pc}
 8006102:	bf00      	nop
 8006104:	20002620 	.word	0x20002620

08006108 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006108:	b590      	push	{r4, r7, lr}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	607a      	str	r2, [r7, #4]
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	4603      	mov	r3, r0
 8006116:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	4a0a      	ldr	r2, [pc, #40]	; (8006144 <disk_write+0x3c>)
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	68dc      	ldr	r4, [r3, #12]
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	4a07      	ldr	r2, [pc, #28]	; (8006144 <disk_write+0x3c>)
 8006128:	4413      	add	r3, r2
 800612a:	7a18      	ldrb	r0, [r3, #8]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	68b9      	ldr	r1, [r7, #8]
 8006132:	47a0      	blx	r4
 8006134:	4603      	mov	r3, r0
 8006136:	75fb      	strb	r3, [r7, #23]
  return res;
 8006138:	7dfb      	ldrb	r3, [r7, #23]
}
 800613a:	4618      	mov	r0, r3
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	bd90      	pop	{r4, r7, pc}
 8006142:	bf00      	nop
 8006144:	20002620 	.word	0x20002620

08006148 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	4603      	mov	r3, r0
 8006150:	603a      	str	r2, [r7, #0]
 8006152:	71fb      	strb	r3, [r7, #7]
 8006154:	460b      	mov	r3, r1
 8006156:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	4a09      	ldr	r2, [pc, #36]	; (8006180 <disk_ioctl+0x38>)
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	79fa      	ldrb	r2, [r7, #7]
 8006166:	4906      	ldr	r1, [pc, #24]	; (8006180 <disk_ioctl+0x38>)
 8006168:	440a      	add	r2, r1
 800616a:	7a10      	ldrb	r0, [r2, #8]
 800616c:	79b9      	ldrb	r1, [r7, #6]
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	4798      	blx	r3
 8006172:	4603      	mov	r3, r0
 8006174:	73fb      	strb	r3, [r7, #15]
  return res;
 8006176:	7bfb      	ldrb	r3, [r7, #15]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20002620 	.word	0x20002620

08006184 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3301      	adds	r3, #1
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006194:	89fb      	ldrh	r3, [r7, #14]
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	b21a      	sxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	b21b      	sxth	r3, r3
 80061a0:	4313      	orrs	r3, r2
 80061a2:	b21b      	sxth	r3, r3
 80061a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80061a6:	89fb      	ldrh	r3, [r7, #14]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3303      	adds	r3, #3
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	3202      	adds	r2, #2
 80061cc:	7812      	ldrb	r2, [r2, #0]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	021b      	lsls	r3, r3, #8
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	3201      	adds	r2, #1
 80061da:	7812      	ldrb	r2, [r2, #0]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	021b      	lsls	r3, r3, #8
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	7812      	ldrb	r2, [r2, #0]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80061ec:	68fb      	ldr	r3, [r7, #12]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	887a      	ldrh	r2, [r7, #2]
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]
 8006212:	887b      	ldrh	r3, [r7, #2]
 8006214:	0a1b      	lsrs	r3, r3, #8
 8006216:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	607a      	str	r2, [r7, #4]
 800621e:	887a      	ldrh	r2, [r7, #2]
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	701a      	strb	r2, [r3, #0]
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	0a1b      	lsrs	r3, r3, #8
 800624a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	607a      	str	r2, [r7, #4]
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	b2d2      	uxtb	r2, r2
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	0a1b      	lsrs	r3, r3, #8
 800625c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	0a1b      	lsrs	r3, r3, #8
 800626e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	607a      	str	r2, [r7, #4]
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00d      	beq.n	80062be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	1c53      	adds	r3, r2, #1
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	1c59      	adds	r1, r3, #1
 80062ac:	6179      	str	r1, [r7, #20]
 80062ae:	7812      	ldrb	r2, [r2, #0]
 80062b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	607b      	str	r3, [r7, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1f1      	bne.n	80062a2 <mem_cpy+0x1a>
	}
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80062ca:	b480      	push	{r7}
 80062cc:	b087      	sub	sp, #28
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	617a      	str	r2, [r7, #20]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	607b      	str	r3, [r7, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f3      	bne.n	80062da <mem_set+0x10>
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006300:	b480      	push	{r7}
 8006302:	b089      	sub	sp, #36	; 0x24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	61fb      	str	r3, [r7, #28]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	61fa      	str	r2, [r7, #28]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	4619      	mov	r1, r3
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	61ba      	str	r2, [r7, #24]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	1acb      	subs	r3, r1, r3
 800632c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3b01      	subs	r3, #1
 8006332:	607b      	str	r3, [r7, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d002      	beq.n	8006340 <mem_cmp+0x40>
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0eb      	beq.n	8006318 <mem_cmp+0x18>

	return r;
 8006340:	697b      	ldr	r3, [r7, #20]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3724      	adds	r7, #36	; 0x24
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006358:	e002      	b.n	8006360 <chk_chr+0x12>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3301      	adds	r3, #1
 800635e:	607b      	str	r3, [r7, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <chk_chr+0x26>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	4293      	cmp	r3, r2
 8006372:	d1f2      	bne.n	800635a <chk_chr+0xc>
	return *str;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	781b      	ldrb	r3, [r3, #0]
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800638e:	2300      	movs	r3, #0
 8006390:	60bb      	str	r3, [r7, #8]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	e029      	b.n	80063ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006398:	4a27      	ldr	r2, [pc, #156]	; (8006438 <chk_lock+0xb4>)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	4413      	add	r3, r2
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d01d      	beq.n	80063e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80063a6:	4a24      	ldr	r2, [pc, #144]	; (8006438 <chk_lock+0xb4>)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	4413      	add	r3, r2
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d116      	bne.n	80063e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80063b8:	4a1f      	ldr	r2, [pc, #124]	; (8006438 <chk_lock+0xb4>)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	011b      	lsls	r3, r3, #4
 80063be:	4413      	add	r3, r2
 80063c0:	3304      	adds	r3, #4
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d10c      	bne.n	80063e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80063cc:	4a1a      	ldr	r2, [pc, #104]	; (8006438 <chk_lock+0xb4>)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	4413      	add	r3, r2
 80063d4:	3308      	adds	r3, #8
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80063dc:	429a      	cmp	r2, r3
 80063de:	d102      	bne.n	80063e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80063e0:	e007      	b.n	80063f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80063e2:	2301      	movs	r3, #1
 80063e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3301      	adds	r3, #1
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d9d2      	bls.n	8006398 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d109      	bne.n	800640c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d102      	bne.n	8006404 <chk_lock+0x80>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d101      	bne.n	8006408 <chk_lock+0x84>
 8006404:	2300      	movs	r3, #0
 8006406:	e010      	b.n	800642a <chk_lock+0xa6>
 8006408:	2312      	movs	r3, #18
 800640a:	e00e      	b.n	800642a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d108      	bne.n	8006424 <chk_lock+0xa0>
 8006412:	4a09      	ldr	r2, [pc, #36]	; (8006438 <chk_lock+0xb4>)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	4413      	add	r3, r2
 800641a:	330c      	adds	r3, #12
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006422:	d101      	bne.n	8006428 <chk_lock+0xa4>
 8006424:	2310      	movs	r3, #16
 8006426:	e000      	b.n	800642a <chk_lock+0xa6>
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	20002400 	.word	0x20002400

0800643c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006442:	2300      	movs	r3, #0
 8006444:	607b      	str	r3, [r7, #4]
 8006446:	e002      	b.n	800644e <enq_lock+0x12>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3301      	adds	r3, #1
 800644c:	607b      	str	r3, [r7, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d806      	bhi.n	8006462 <enq_lock+0x26>
 8006454:	4a09      	ldr	r2, [pc, #36]	; (800647c <enq_lock+0x40>)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	4413      	add	r3, r2
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f2      	bne.n	8006448 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b02      	cmp	r3, #2
 8006466:	bf14      	ite	ne
 8006468:	2301      	movne	r3, #1
 800646a:	2300      	moveq	r3, #0
 800646c:	b2db      	uxtb	r3, r3
}
 800646e:	4618      	mov	r0, r3
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	20002400 	.word	0x20002400

08006480 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	e01f      	b.n	80064d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006490:	4a41      	ldr	r2, [pc, #260]	; (8006598 <inc_lock+0x118>)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	011b      	lsls	r3, r3, #4
 8006496:	4413      	add	r3, r2
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d113      	bne.n	80064ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80064a2:	4a3d      	ldr	r2, [pc, #244]	; (8006598 <inc_lock+0x118>)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	4413      	add	r3, r2
 80064aa:	3304      	adds	r3, #4
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d109      	bne.n	80064ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80064b6:	4a38      	ldr	r2, [pc, #224]	; (8006598 <inc_lock+0x118>)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	4413      	add	r3, r2
 80064be:	3308      	adds	r3, #8
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d006      	beq.n	80064d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3301      	adds	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d9dc      	bls.n	8006490 <inc_lock+0x10>
 80064d6:	e000      	b.n	80064da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80064d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d132      	bne.n	8006546 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	e002      	b.n	80064ec <inc_lock+0x6c>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3301      	adds	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d806      	bhi.n	8006500 <inc_lock+0x80>
 80064f2:	4a29      	ldr	r2, [pc, #164]	; (8006598 <inc_lock+0x118>)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	4413      	add	r3, r2
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1f2      	bne.n	80064e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2b02      	cmp	r3, #2
 8006504:	d101      	bne.n	800650a <inc_lock+0x8a>
 8006506:	2300      	movs	r3, #0
 8006508:	e040      	b.n	800658c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4922      	ldr	r1, [pc, #136]	; (8006598 <inc_lock+0x118>)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	440b      	add	r3, r1
 8006516:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	491e      	ldr	r1, [pc, #120]	; (8006598 <inc_lock+0x118>)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	440b      	add	r3, r1
 8006524:	3304      	adds	r3, #4
 8006526:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	695a      	ldr	r2, [r3, #20]
 800652c:	491a      	ldr	r1, [pc, #104]	; (8006598 <inc_lock+0x118>)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	440b      	add	r3, r1
 8006534:	3308      	adds	r3, #8
 8006536:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006538:	4a17      	ldr	r2, [pc, #92]	; (8006598 <inc_lock+0x118>)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	011b      	lsls	r3, r3, #4
 800653e:	4413      	add	r3, r2
 8006540:	330c      	adds	r3, #12
 8006542:	2200      	movs	r2, #0
 8006544:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d009      	beq.n	8006560 <inc_lock+0xe0>
 800654c:	4a12      	ldr	r2, [pc, #72]	; (8006598 <inc_lock+0x118>)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	4413      	add	r3, r2
 8006554:	330c      	adds	r3, #12
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <inc_lock+0xe0>
 800655c:	2300      	movs	r3, #0
 800655e:	e015      	b.n	800658c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d108      	bne.n	8006578 <inc_lock+0xf8>
 8006566:	4a0c      	ldr	r2, [pc, #48]	; (8006598 <inc_lock+0x118>)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	4413      	add	r3, r2
 800656e:	330c      	adds	r3, #12
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	3301      	adds	r3, #1
 8006574:	b29a      	uxth	r2, r3
 8006576:	e001      	b.n	800657c <inc_lock+0xfc>
 8006578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800657c:	4906      	ldr	r1, [pc, #24]	; (8006598 <inc_lock+0x118>)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	440b      	add	r3, r1
 8006584:	330c      	adds	r3, #12
 8006586:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3301      	adds	r3, #1
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	20002400 	.word	0x20002400

0800659c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	607b      	str	r3, [r7, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d825      	bhi.n	80065fc <dec_lock+0x60>
		n = Files[i].ctr;
 80065b0:	4a17      	ldr	r2, [pc, #92]	; (8006610 <dec_lock+0x74>)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	4413      	add	r3, r2
 80065b8:	330c      	adds	r3, #12
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80065be:	89fb      	ldrh	r3, [r7, #14]
 80065c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065c4:	d101      	bne.n	80065ca <dec_lock+0x2e>
 80065c6:	2300      	movs	r3, #0
 80065c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80065ca:	89fb      	ldrh	r3, [r7, #14]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <dec_lock+0x3a>
 80065d0:	89fb      	ldrh	r3, [r7, #14]
 80065d2:	3b01      	subs	r3, #1
 80065d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80065d6:	4a0e      	ldr	r2, [pc, #56]	; (8006610 <dec_lock+0x74>)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	4413      	add	r3, r2
 80065de:	330c      	adds	r3, #12
 80065e0:	89fa      	ldrh	r2, [r7, #14]
 80065e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80065e4:	89fb      	ldrh	r3, [r7, #14]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d105      	bne.n	80065f6 <dec_lock+0x5a>
 80065ea:	4a09      	ldr	r2, [pc, #36]	; (8006610 <dec_lock+0x74>)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	4413      	add	r3, r2
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	737b      	strb	r3, [r7, #13]
 80065fa:	e001      	b.n	8006600 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80065fc:	2302      	movs	r3, #2
 80065fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006600:	7b7b      	ldrb	r3, [r7, #13]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	20002400 	.word	0x20002400

08006614 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800661c:	2300      	movs	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	e010      	b.n	8006644 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006622:	4a0d      	ldr	r2, [pc, #52]	; (8006658 <clear_lock+0x44>)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	4413      	add	r3, r2
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	429a      	cmp	r2, r3
 8006630:	d105      	bne.n	800663e <clear_lock+0x2a>
 8006632:	4a09      	ldr	r2, [pc, #36]	; (8006658 <clear_lock+0x44>)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	4413      	add	r3, r2
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3301      	adds	r3, #1
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d9eb      	bls.n	8006622 <clear_lock+0xe>
	}
}
 800664a:	bf00      	nop
 800664c:	bf00      	nop
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	20002400 	.word	0x20002400

0800665c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	78db      	ldrb	r3, [r3, #3]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d034      	beq.n	80066da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006674:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	7858      	ldrb	r0, [r3, #1]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006680:	2301      	movs	r3, #1
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	f7ff fd40 	bl	8006108 <disk_write>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <sync_window+0x38>
			res = FR_DISK_ERR;
 800668e:	2301      	movs	r3, #1
 8006690:	73fb      	strb	r3, [r7, #15]
 8006692:	e022      	b.n	80066da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	1ad2      	subs	r2, r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d217      	bcs.n	80066da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	789b      	ldrb	r3, [r3, #2]
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	e010      	b.n	80066d4 <sync_window+0x78>
					wsect += fs->fsize;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4413      	add	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	7858      	ldrb	r0, [r3, #1]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80066c6:	2301      	movs	r3, #1
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	f7ff fd1d 	bl	8006108 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d8eb      	bhi.n	80066b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80066da:	7bfb      	ldrb	r3, [r7, #15]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3718      	adds	r7, #24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d01b      	beq.n	8006734 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff ffad 	bl	800665c <sync_window>
 8006702:	4603      	mov	r3, r0
 8006704:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006706:	7bfb      	ldrb	r3, [r7, #15]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d113      	bne.n	8006734 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	7858      	ldrb	r0, [r3, #1]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006716:	2301      	movs	r3, #1
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	f7ff fcd5 	bl	80060c8 <disk_read>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d004      	beq.n	800672e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006724:	f04f 33ff 	mov.w	r3, #4294967295
 8006728:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800672a:	2301      	movs	r3, #1
 800672c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
	...

08006740 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff ff87 	bl	800665c <sync_window>
 800674e:	4603      	mov	r3, r0
 8006750:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006752:	7bfb      	ldrb	r3, [r7, #15]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d159      	bne.n	800680c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b03      	cmp	r3, #3
 800675e:	d149      	bne.n	80067f4 <sync_fs+0xb4>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	791b      	ldrb	r3, [r3, #4]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d145      	bne.n	80067f4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	899b      	ldrh	r3, [r3, #12]
 8006772:	461a      	mov	r2, r3
 8006774:	2100      	movs	r1, #0
 8006776:	f7ff fda8 	bl	80062ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3338      	adds	r3, #56	; 0x38
 800677e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006782:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff fd37 	bl	80061fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3338      	adds	r3, #56	; 0x38
 8006790:	4921      	ldr	r1, [pc, #132]	; (8006818 <sync_fs+0xd8>)
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff fd4c 	bl	8006230 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3338      	adds	r3, #56	; 0x38
 800679c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80067a0:	491e      	ldr	r1, [pc, #120]	; (800681c <sync_fs+0xdc>)
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff fd44 	bl	8006230 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3338      	adds	r3, #56	; 0x38
 80067ac:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	4619      	mov	r1, r3
 80067b6:	4610      	mov	r0, r2
 80067b8:	f7ff fd3a 	bl	8006230 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3338      	adds	r3, #56	; 0x38
 80067c0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	4619      	mov	r1, r3
 80067ca:	4610      	mov	r0, r2
 80067cc:	f7ff fd30 	bl	8006230 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	7858      	ldrb	r0, [r3, #1]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067e8:	2301      	movs	r3, #1
 80067ea:	f7ff fc8d 	bl	8006108 <disk_write>
			fs->fsi_flag = 0;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	2200      	movs	r2, #0
 80067fa:	2100      	movs	r1, #0
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7ff fca3 	bl	8006148 <disk_ioctl>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <sync_fs+0xcc>
 8006808:	2301      	movs	r3, #1
 800680a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800680c:	7bfb      	ldrb	r3, [r7, #15]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	41615252 	.word	0x41615252
 800681c:	61417272 	.word	0x61417272

08006820 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	3b02      	subs	r3, #2
 800682e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	3b02      	subs	r3, #2
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d301      	bcc.n	8006840 <clust2sect+0x20>
 800683c:	2300      	movs	r3, #0
 800683e:	e008      	b.n	8006852 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	895b      	ldrh	r3, [r3, #10]
 8006844:	461a      	mov	r2, r3
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	fb03 f202 	mul.w	r2, r3, r2
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	4413      	add	r3, r2
}
 8006852:	4618      	mov	r0, r3
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b086      	sub	sp, #24
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d904      	bls.n	800687e <get_fat+0x20>
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d302      	bcc.n	8006884 <get_fat+0x26>
		val = 1;	/* Internal error */
 800687e:	2301      	movs	r3, #1
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	e0bb      	b.n	80069fc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006884:	f04f 33ff 	mov.w	r3, #4294967295
 8006888:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b03      	cmp	r3, #3
 8006890:	f000 8083 	beq.w	800699a <get_fat+0x13c>
 8006894:	2b03      	cmp	r3, #3
 8006896:	f300 80a7 	bgt.w	80069e8 <get_fat+0x18a>
 800689a:	2b01      	cmp	r3, #1
 800689c:	d002      	beq.n	80068a4 <get_fat+0x46>
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d056      	beq.n	8006950 <get_fat+0xf2>
 80068a2:	e0a1      	b.n	80069e8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	085b      	lsrs	r3, r3, #1
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	899b      	ldrh	r3, [r3, #12]
 80068ba:	4619      	mov	r1, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	fbb3 f3f1 	udiv	r3, r3, r1
 80068c2:	4413      	add	r3, r2
 80068c4:	4619      	mov	r1, r3
 80068c6:	6938      	ldr	r0, [r7, #16]
 80068c8:	f7ff ff0c 	bl	80066e4 <move_window>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f040 808d 	bne.w	80069ee <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	60fa      	str	r2, [r7, #12]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	8992      	ldrh	r2, [r2, #12]
 80068de:	fbb3 f1f2 	udiv	r1, r3, r2
 80068e2:	fb01 f202 	mul.w	r2, r1, r2
 80068e6:	1a9b      	subs	r3, r3, r2
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4413      	add	r3, r2
 80068ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	899b      	ldrh	r3, [r3, #12]
 80068fa:	4619      	mov	r1, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006902:	4413      	add	r3, r2
 8006904:	4619      	mov	r1, r3
 8006906:	6938      	ldr	r0, [r7, #16]
 8006908:	f7ff feec 	bl	80066e4 <move_window>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d16f      	bne.n	80069f2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	899b      	ldrh	r3, [r3, #12]
 8006916:	461a      	mov	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	fbb3 f1f2 	udiv	r1, r3, r2
 800691e:	fb01 f202 	mul.w	r2, r1, r2
 8006922:	1a9b      	subs	r3, r3, r2
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4413      	add	r3, r2
 8006928:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	461a      	mov	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	4313      	orrs	r3, r2
 8006934:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <get_fat+0xe8>
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	091b      	lsrs	r3, r3, #4
 8006944:	e002      	b.n	800694c <get_fat+0xee>
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800694c:	617b      	str	r3, [r7, #20]
			break;
 800694e:	e055      	b.n	80069fc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	899b      	ldrh	r3, [r3, #12]
 8006958:	085b      	lsrs	r3, r3, #1
 800695a:	b29b      	uxth	r3, r3
 800695c:	4619      	mov	r1, r3
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	fbb3 f3f1 	udiv	r3, r3, r1
 8006964:	4413      	add	r3, r2
 8006966:	4619      	mov	r1, r3
 8006968:	6938      	ldr	r0, [r7, #16]
 800696a:	f7ff febb 	bl	80066e4 <move_window>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d140      	bne.n	80069f6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	8992      	ldrh	r2, [r2, #12]
 8006982:	fbb3 f0f2 	udiv	r0, r3, r2
 8006986:	fb00 f202 	mul.w	r2, r0, r2
 800698a:	1a9b      	subs	r3, r3, r2
 800698c:	440b      	add	r3, r1
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff fbf8 	bl	8006184 <ld_word>
 8006994:	4603      	mov	r3, r0
 8006996:	617b      	str	r3, [r7, #20]
			break;
 8006998:	e030      	b.n	80069fc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	899b      	ldrh	r3, [r3, #12]
 80069a2:	089b      	lsrs	r3, r3, #2
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	4619      	mov	r1, r3
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80069ae:	4413      	add	r3, r2
 80069b0:	4619      	mov	r1, r3
 80069b2:	6938      	ldr	r0, [r7, #16]
 80069b4:	f7ff fe96 	bl	80066e4 <move_window>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d11d      	bne.n	80069fa <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	8992      	ldrh	r2, [r2, #12]
 80069cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80069d0:	fb00 f202 	mul.w	r2, r0, r2
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	440b      	add	r3, r1
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff fbeb 	bl	80061b4 <ld_dword>
 80069de:	4603      	mov	r3, r0
 80069e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80069e4:	617b      	str	r3, [r7, #20]
			break;
 80069e6:	e009      	b.n	80069fc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80069e8:	2301      	movs	r3, #1
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	e006      	b.n	80069fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069ee:	bf00      	nop
 80069f0:	e004      	b.n	80069fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069f2:	bf00      	nop
 80069f4:	e002      	b.n	80069fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80069f6:	bf00      	nop
 80069f8:	e000      	b.n	80069fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80069fa:	bf00      	nop
		}
	}

	return val;
 80069fc:	697b      	ldr	r3, [r7, #20]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006a06:	b590      	push	{r4, r7, lr}
 8006a08:	b089      	sub	sp, #36	; 0x24
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006a12:	2302      	movs	r3, #2
 8006a14:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	f240 8109 	bls.w	8006c30 <put_fat+0x22a>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	f080 8103 	bcs.w	8006c30 <put_fat+0x22a>
		switch (fs->fs_type) {
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	f000 80b6 	beq.w	8006ba0 <put_fat+0x19a>
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	f300 80fb 	bgt.w	8006c30 <put_fat+0x22a>
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d003      	beq.n	8006a46 <put_fat+0x40>
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	f000 8083 	beq.w	8006b4a <put_fat+0x144>
 8006a44:	e0f4      	b.n	8006c30 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	085b      	lsrs	r3, r3, #1
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	4413      	add	r3, r2
 8006a52:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	899b      	ldrh	r3, [r3, #12]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a64:	4413      	add	r3, r2
 8006a66:	4619      	mov	r1, r3
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f7ff fe3b 	bl	80066e4 <move_window>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a72:	7ffb      	ldrb	r3, [r7, #31]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f040 80d4 	bne.w	8006c22 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	61ba      	str	r2, [r7, #24]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	8992      	ldrh	r2, [r2, #12]
 8006a8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a8e:	fb00 f202 	mul.w	r2, r0, r2
 8006a92:	1a9b      	subs	r3, r3, r2
 8006a94:	440b      	add	r3, r1
 8006a96:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00d      	beq.n	8006abe <put_fat+0xb8>
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	b25b      	sxtb	r3, r3
 8006aa8:	f003 030f 	and.w	r3, r3, #15
 8006aac:	b25a      	sxtb	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	b25b      	sxtb	r3, r3
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	b25b      	sxtb	r3, r3
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	e001      	b.n	8006ac2 <put_fat+0xbc>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	899b      	ldrh	r3, [r3, #12]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006adc:	4413      	add	r3, r2
 8006ade:	4619      	mov	r1, r3
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f7ff fdff 	bl	80066e4 <move_window>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006aea:	7ffb      	ldrb	r3, [r7, #31]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f040 809a 	bne.w	8006c26 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	899b      	ldrh	r3, [r3, #12]
 8006afc:	461a      	mov	r2, r3
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b04:	fb00 f202 	mul.w	r2, r0, r2
 8006b08:	1a9b      	subs	r3, r3, r2
 8006b0a:	440b      	add	r3, r1
 8006b0c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <put_fat+0x11a>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	091b      	lsrs	r3, r3, #4
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	e00e      	b.n	8006b3e <put_fat+0x138>
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	b25b      	sxtb	r3, r3
 8006b26:	f023 030f 	bic.w	r3, r3, #15
 8006b2a:	b25a      	sxtb	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	0a1b      	lsrs	r3, r3, #8
 8006b30:	b25b      	sxtb	r3, r3
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	b25b      	sxtb	r3, r3
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	b25b      	sxtb	r3, r3
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	70da      	strb	r2, [r3, #3]
			break;
 8006b48:	e072      	b.n	8006c30 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	899b      	ldrh	r3, [r3, #12]
 8006b52:	085b      	lsrs	r3, r3, #1
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	4619      	mov	r1, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b5e:	4413      	add	r3, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f7ff fdbe 	bl	80066e4 <move_window>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b6c:	7ffb      	ldrb	r3, [r7, #31]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d15b      	bne.n	8006c2a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	8992      	ldrh	r2, [r2, #12]
 8006b80:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b84:	fb00 f202 	mul.w	r2, r0, r2
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	440b      	add	r3, r1
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	b292      	uxth	r2, r2
 8006b90:	4611      	mov	r1, r2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff fb31 	bl	80061fa <st_word>
			fs->wflag = 1;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	70da      	strb	r2, [r3, #3]
			break;
 8006b9e:	e047      	b.n	8006c30 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	899b      	ldrh	r3, [r3, #12]
 8006ba8:	089b      	lsrs	r3, r3, #2
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	4619      	mov	r1, r3
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bb4:	4413      	add	r3, r2
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f7ff fd93 	bl	80066e4 <move_window>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bc2:	7ffb      	ldrb	r3, [r7, #31]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d132      	bne.n	8006c2e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	8992      	ldrh	r2, [r2, #12]
 8006bdc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006be0:	fb00 f202 	mul.w	r2, r0, r2
 8006be4:	1a9b      	subs	r3, r3, r2
 8006be6:	440b      	add	r3, r1
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff fae3 	bl	80061b4 <ld_dword>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006bf4:	4323      	orrs	r3, r4
 8006bf6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	8992      	ldrh	r2, [r2, #12]
 8006c06:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c0a:	fb00 f202 	mul.w	r2, r0, r2
 8006c0e:	1a9b      	subs	r3, r3, r2
 8006c10:	440b      	add	r3, r1
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff fb0b 	bl	8006230 <st_dword>
			fs->wflag = 1;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	70da      	strb	r2, [r3, #3]
			break;
 8006c20:	e006      	b.n	8006c30 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006c22:	bf00      	nop
 8006c24:	e004      	b.n	8006c30 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006c26:	bf00      	nop
 8006c28:	e002      	b.n	8006c30 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006c2a:	bf00      	nop
 8006c2c:	e000      	b.n	8006c30 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006c2e:	bf00      	nop
		}
	}
	return res;
 8006c30:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3724      	adds	r7, #36	; 0x24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd90      	pop	{r4, r7, pc}

08006c3a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b088      	sub	sp, #32
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d904      	bls.n	8006c60 <remove_chain+0x26>
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d301      	bcc.n	8006c64 <remove_chain+0x2a>
 8006c60:	2302      	movs	r3, #2
 8006c62:	e04b      	b.n	8006cfc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00c      	beq.n	8006c84 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	69b8      	ldr	r0, [r7, #24]
 8006c72:	f7ff fec8 	bl	8006a06 <put_fat>
 8006c76:	4603      	mov	r3, r0
 8006c78:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006c7a:	7ffb      	ldrb	r3, [r7, #31]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <remove_chain+0x4a>
 8006c80:	7ffb      	ldrb	r3, [r7, #31]
 8006c82:	e03b      	b.n	8006cfc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f7ff fde9 	bl	800685e <get_fat>
 8006c8c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d031      	beq.n	8006cf8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <remove_chain+0x64>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e02e      	b.n	8006cfc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca4:	d101      	bne.n	8006caa <remove_chain+0x70>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e028      	b.n	8006cfc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006caa:	2200      	movs	r2, #0
 8006cac:	68b9      	ldr	r1, [r7, #8]
 8006cae:	69b8      	ldr	r0, [r7, #24]
 8006cb0:	f7ff fea9 	bl	8006a06 <put_fat>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006cb8:	7ffb      	ldrb	r3, [r7, #31]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <remove_chain+0x88>
 8006cbe:	7ffb      	ldrb	r3, [r7, #31]
 8006cc0:	e01c      	b.n	8006cfc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	699a      	ldr	r2, [r3, #24]
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	3b02      	subs	r3, #2
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d20b      	bcs.n	8006ce8 <remove_chain+0xae>
			fs->free_clst++;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	791b      	ldrb	r3, [r3, #4]
 8006cde:	f043 0301 	orr.w	r3, r3, #1
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d3c6      	bcc.n	8006c84 <remove_chain+0x4a>
 8006cf6:	e000      	b.n	8006cfa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006cf8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3720      	adds	r7, #32
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b088      	sub	sp, #32
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10d      	bne.n	8006d36 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d004      	beq.n	8006d30 <create_chain+0x2c>
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d31b      	bcc.n	8006d68 <create_chain+0x64>
 8006d30:	2301      	movs	r3, #1
 8006d32:	61bb      	str	r3, [r7, #24]
 8006d34:	e018      	b.n	8006d68 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7ff fd90 	bl	800685e <get_fat>
 8006d3e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d801      	bhi.n	8006d4a <create_chain+0x46>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e070      	b.n	8006e2c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d50:	d101      	bne.n	8006d56 <create_chain+0x52>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	e06a      	b.n	8006e2c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d201      	bcs.n	8006d64 <create_chain+0x60>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	e063      	b.n	8006e2c <create_chain+0x128>
		scl = clst;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d307      	bcc.n	8006d8c <create_chain+0x88>
				ncl = 2;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d901      	bls.n	8006d8c <create_chain+0x88>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	e04f      	b.n	8006e2c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006d8c:	69f9      	ldr	r1, [r7, #28]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff fd65 	bl	800685e <get_fat>
 8006d94:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00e      	beq.n	8006dba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d003      	beq.n	8006daa <create_chain+0xa6>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da8:	d101      	bne.n	8006dae <create_chain+0xaa>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	e03e      	b.n	8006e2c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d1da      	bne.n	8006d6c <create_chain+0x68>
 8006db6:	2300      	movs	r3, #0
 8006db8:	e038      	b.n	8006e2c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006dba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc0:	69f9      	ldr	r1, [r7, #28]
 8006dc2:	6938      	ldr	r0, [r7, #16]
 8006dc4:	f7ff fe1f 	bl	8006a06 <put_fat>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <create_chain+0xe2>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d006      	beq.n	8006de6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006dd8:	69fa      	ldr	r2, [r7, #28]
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6938      	ldr	r0, [r7, #16]
 8006dde:	f7ff fe12 	bl	8006a06 <put_fat>
 8006de2:	4603      	mov	r3, r0
 8006de4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d116      	bne.n	8006e1a <create_chain+0x116>
		fs->last_clst = ncl;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	69fa      	ldr	r2, [r7, #28]
 8006df0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	699a      	ldr	r2, [r3, #24]
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	3b02      	subs	r3, #2
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d804      	bhi.n	8006e0a <create_chain+0x106>
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	1e5a      	subs	r2, r3, #1
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	791b      	ldrb	r3, [r3, #4]
 8006e0e:	f043 0301 	orr.w	r3, r3, #1
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	711a      	strb	r2, [r3, #4]
 8006e18:	e007      	b.n	8006e2a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d102      	bne.n	8006e26 <create_chain+0x122>
 8006e20:	f04f 33ff 	mov.w	r3, #4294967295
 8006e24:	e000      	b.n	8006e28 <create_chain+0x124>
 8006e26:	2301      	movs	r3, #1
 8006e28:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006e2a:	69fb      	ldr	r3, [r7, #28]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3720      	adds	r7, #32
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	3304      	adds	r3, #4
 8006e4a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	899b      	ldrh	r3, [r3, #12]
 8006e50:	461a      	mov	r2, r3
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	8952      	ldrh	r2, [r2, #10]
 8006e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e60:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	1d1a      	adds	r2, r3, #4
 8006e66:	613a      	str	r2, [r7, #16]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <clmt_clust+0x42>
 8006e72:	2300      	movs	r3, #0
 8006e74:	e010      	b.n	8006e98 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d307      	bcc.n	8006e8e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006e8c:	e7e9      	b.n	8006e62 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006e8e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	4413      	add	r3, r2
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eba:	d204      	bcs.n	8006ec6 <dir_sdi+0x22>
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	f003 031f 	and.w	r3, r3, #31
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <dir_sdi+0x26>
		return FR_INT_ERR;
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	e071      	b.n	8006fae <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d106      	bne.n	8006eea <dir_sdi+0x46>
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d902      	bls.n	8006eea <dir_sdi+0x46>
		clst = fs->dirbase;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10c      	bne.n	8006f0a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	095b      	lsrs	r3, r3, #5
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	8912      	ldrh	r2, [r2, #8]
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d301      	bcc.n	8006f00 <dir_sdi+0x5c>
 8006efc:	2302      	movs	r3, #2
 8006efe:	e056      	b.n	8006fae <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	61da      	str	r2, [r3, #28]
 8006f08:	e02d      	b.n	8006f66 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	895b      	ldrh	r3, [r3, #10]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	899b      	ldrh	r3, [r3, #12]
 8006f14:	fb02 f303 	mul.w	r3, r2, r3
 8006f18:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006f1a:	e019      	b.n	8006f50 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6979      	ldr	r1, [r7, #20]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff fc9c 	bl	800685e <get_fat>
 8006f26:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2e:	d101      	bne.n	8006f34 <dir_sdi+0x90>
 8006f30:	2301      	movs	r3, #1
 8006f32:	e03c      	b.n	8006fae <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d904      	bls.n	8006f44 <dir_sdi+0xa0>
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d301      	bcc.n	8006f48 <dir_sdi+0xa4>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e032      	b.n	8006fae <dir_sdi+0x10a>
			ofs -= csz;
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d2e1      	bcs.n	8006f1c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006f58:	6979      	ldr	r1, [r7, #20]
 8006f5a:	6938      	ldr	r0, [r7, #16]
 8006f5c:	f7ff fc60 	bl	8006820 <clust2sect>
 8006f60:	4602      	mov	r2, r0
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <dir_sdi+0xd4>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e01a      	b.n	8006fae <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	899b      	ldrh	r3, [r3, #12]
 8006f80:	4619      	mov	r1, r3
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f88:	441a      	add	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	899b      	ldrh	r3, [r3, #12]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fa0:	fb00 f202 	mul.w	r2, r0, r2
 8006fa4:	1a9b      	subs	r3, r3, r2
 8006fa6:	18ca      	adds	r2, r1, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	3320      	adds	r3, #32
 8006fcc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <dir_next+0x28>
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fdc:	d301      	bcc.n	8006fe2 <dir_next+0x2c>
 8006fde:	2304      	movs	r3, #4
 8006fe0:	e0bb      	b.n	800715a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	899b      	ldrh	r3, [r3, #12]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fee:	fb01 f202 	mul.w	r2, r1, r2
 8006ff2:	1a9b      	subs	r3, r3, r2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f040 809d 	bne.w	8007134 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10b      	bne.n	8007024 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	8912      	ldrh	r2, [r2, #8]
 8007014:	4293      	cmp	r3, r2
 8007016:	f0c0 808d 	bcc.w	8007134 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	61da      	str	r2, [r3, #28]
 8007020:	2304      	movs	r3, #4
 8007022:	e09a      	b.n	800715a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	899b      	ldrh	r3, [r3, #12]
 8007028:	461a      	mov	r2, r3
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	8952      	ldrh	r2, [r2, #10]
 8007034:	3a01      	subs	r2, #1
 8007036:	4013      	ands	r3, r2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d17b      	bne.n	8007134 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	4619      	mov	r1, r3
 8007044:	4610      	mov	r0, r2
 8007046:	f7ff fc0a 	bl	800685e <get_fat>
 800704a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d801      	bhi.n	8007056 <dir_next+0xa0>
 8007052:	2302      	movs	r3, #2
 8007054:	e081      	b.n	800715a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705c:	d101      	bne.n	8007062 <dir_next+0xac>
 800705e:	2301      	movs	r3, #1
 8007060:	e07b      	b.n	800715a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	429a      	cmp	r2, r3
 800706a:	d359      	bcc.n	8007120 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d104      	bne.n	800707c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	61da      	str	r2, [r3, #28]
 8007078:	2304      	movs	r3, #4
 800707a:	e06e      	b.n	800715a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	4619      	mov	r1, r3
 8007084:	4610      	mov	r0, r2
 8007086:	f7ff fe3d 	bl	8006d04 <create_chain>
 800708a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <dir_next+0xe0>
 8007092:	2307      	movs	r3, #7
 8007094:	e061      	b.n	800715a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d101      	bne.n	80070a0 <dir_next+0xea>
 800709c:	2302      	movs	r3, #2
 800709e:	e05c      	b.n	800715a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a6:	d101      	bne.n	80070ac <dir_next+0xf6>
 80070a8:	2301      	movs	r3, #1
 80070aa:	e056      	b.n	800715a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f7ff fad5 	bl	800665c <sync_window>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <dir_next+0x106>
 80070b8:	2301      	movs	r3, #1
 80070ba:	e04e      	b.n	800715a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	899b      	ldrh	r3, [r3, #12]
 80070c6:	461a      	mov	r2, r3
 80070c8:	2100      	movs	r1, #0
 80070ca:	f7ff f8fe 	bl	80062ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80070ce:	2300      	movs	r3, #0
 80070d0:	613b      	str	r3, [r7, #16]
 80070d2:	6979      	ldr	r1, [r7, #20]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7ff fba3 	bl	8006820 <clust2sect>
 80070da:	4602      	mov	r2, r0
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	635a      	str	r2, [r3, #52]	; 0x34
 80070e0:	e012      	b.n	8007108 <dir_next+0x152>
						fs->wflag = 1;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2201      	movs	r2, #1
 80070e6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f7ff fab7 	bl	800665c <sync_window>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <dir_next+0x142>
 80070f4:	2301      	movs	r3, #1
 80070f6:	e030      	b.n	800715a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	3301      	adds	r3, #1
 80070fc:	613b      	str	r3, [r7, #16]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	635a      	str	r2, [r3, #52]	; 0x34
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	895b      	ldrh	r3, [r3, #10]
 800710c:	461a      	mov	r2, r3
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	4293      	cmp	r3, r2
 8007112:	d3e6      	bcc.n	80070e2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	1ad2      	subs	r2, r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007126:	6979      	ldr	r1, [r7, #20]
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f7ff fb79 	bl	8006820 <clust2sect>
 800712e:	4602      	mov	r2, r0
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	899b      	ldrh	r3, [r3, #12]
 8007144:	461a      	mov	r2, r3
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	fbb3 f0f2 	udiv	r0, r3, r2
 800714c:	fb00 f202 	mul.w	r2, r0, r2
 8007150:	1a9b      	subs	r3, r3, r2
 8007152:	18ca      	adds	r2, r1, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b086      	sub	sp, #24
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007172:	2100      	movs	r1, #0
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7ff fe95 	bl	8006ea4 <dir_sdi>
 800717a:	4603      	mov	r3, r0
 800717c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d12b      	bne.n	80071dc <dir_alloc+0x7a>
		n = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	4619      	mov	r1, r3
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f7ff faa8 	bl	80066e4 <move_window>
 8007194:	4603      	mov	r3, r0
 8007196:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007198:	7dfb      	ldrb	r3, [r7, #23]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d11d      	bne.n	80071da <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2be5      	cmp	r3, #229	; 0xe5
 80071a6:	d004      	beq.n	80071b2 <dir_alloc+0x50>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d107      	bne.n	80071c2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	3301      	adds	r3, #1
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d102      	bne.n	80071c6 <dir_alloc+0x64>
 80071c0:	e00c      	b.n	80071dc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80071c2:	2300      	movs	r3, #0
 80071c4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80071c6:	2101      	movs	r1, #1
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7ff fef4 	bl	8006fb6 <dir_next>
 80071ce:	4603      	mov	r3, r0
 80071d0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0d7      	beq.n	8007188 <dir_alloc+0x26>
 80071d8:	e000      	b.n	80071dc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80071da:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d101      	bne.n	80071e6 <dir_alloc+0x84>
 80071e2:	2307      	movs	r3, #7
 80071e4:	75fb      	strb	r3, [r7, #23]
	return res;
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	331a      	adds	r3, #26
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fe ffc0 	bl	8006184 <ld_word>
 8007204:	4603      	mov	r3, r0
 8007206:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b03      	cmp	r3, #3
 800720e:	d109      	bne.n	8007224 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	3314      	adds	r3, #20
 8007214:	4618      	mov	r0, r3
 8007216:	f7fe ffb5 	bl	8006184 <ld_word>
 800721a:	4603      	mov	r3, r0
 800721c:	041b      	lsls	r3, r3, #16
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007224:	68fb      	ldr	r3, [r7, #12]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b084      	sub	sp, #16
 8007232:	af00      	add	r7, sp, #0
 8007234:	60f8      	str	r0, [r7, #12]
 8007236:	60b9      	str	r1, [r7, #8]
 8007238:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	331a      	adds	r3, #26
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	b292      	uxth	r2, r2
 8007242:	4611      	mov	r1, r2
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe ffd8 	bl	80061fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b03      	cmp	r3, #3
 8007250:	d109      	bne.n	8007266 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f103 0214 	add.w	r2, r3, #20
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	0c1b      	lsrs	r3, r3, #16
 800725c:	b29b      	uxth	r3, r3
 800725e:	4619      	mov	r1, r3
 8007260:	4610      	mov	r0, r2
 8007262:	f7fe ffca 	bl	80061fa <st_word>
	}
}
 8007266:	bf00      	nop
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007270:	b590      	push	{r4, r7, lr}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	331a      	adds	r3, #26
 800727e:	4618      	mov	r0, r3
 8007280:	f7fe ff80 	bl	8006184 <ld_word>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <cmp_lfn+0x1e>
 800728a:	2300      	movs	r3, #0
 800728c:	e059      	b.n	8007342 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007296:	1e5a      	subs	r2, r3, #1
 8007298:	4613      	mov	r3, r2
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80072a4:	2301      	movs	r3, #1
 80072a6:	81fb      	strh	r3, [r7, #14]
 80072a8:	2300      	movs	r3, #0
 80072aa:	613b      	str	r3, [r7, #16]
 80072ac:	e033      	b.n	8007316 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80072ae:	4a27      	ldr	r2, [pc, #156]	; (800734c <cmp_lfn+0xdc>)
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	4413      	add	r3, r2
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	4413      	add	r3, r2
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fe ff61 	bl	8006184 <ld_word>
 80072c2:	4603      	mov	r3, r0
 80072c4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80072c6:	89fb      	ldrh	r3, [r7, #14]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01a      	beq.n	8007302 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2bfe      	cmp	r3, #254	; 0xfe
 80072d0:	d812      	bhi.n	80072f8 <cmp_lfn+0x88>
 80072d2:	89bb      	ldrh	r3, [r7, #12]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f002 f861 	bl	800939c <ff_wtoupper>
 80072da:	4603      	mov	r3, r0
 80072dc:	461c      	mov	r4, r3
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	617a      	str	r2, [r7, #20]
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	4413      	add	r3, r2
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f002 f855 	bl	800939c <ff_wtoupper>
 80072f2:	4603      	mov	r3, r0
 80072f4:	429c      	cmp	r4, r3
 80072f6:	d001      	beq.n	80072fc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80072f8:	2300      	movs	r3, #0
 80072fa:	e022      	b.n	8007342 <cmp_lfn+0xd2>
			}
			wc = uc;
 80072fc:	89bb      	ldrh	r3, [r7, #12]
 80072fe:	81fb      	strh	r3, [r7, #14]
 8007300:	e006      	b.n	8007310 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007302:	89bb      	ldrh	r3, [r7, #12]
 8007304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007308:	4293      	cmp	r3, r2
 800730a:	d001      	beq.n	8007310 <cmp_lfn+0xa0>
 800730c:	2300      	movs	r3, #0
 800730e:	e018      	b.n	8007342 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	3301      	adds	r3, #1
 8007314:	613b      	str	r3, [r7, #16]
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	2b0c      	cmp	r3, #12
 800731a:	d9c8      	bls.n	80072ae <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00b      	beq.n	8007340 <cmp_lfn+0xd0>
 8007328:	89fb      	ldrh	r3, [r7, #14]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d008      	beq.n	8007340 <cmp_lfn+0xd0>
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	4413      	add	r3, r2
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <cmp_lfn+0xd0>
 800733c:	2300      	movs	r3, #0
 800733e:	e000      	b.n	8007342 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007340:	2301      	movs	r3, #1
}
 8007342:	4618      	mov	r0, r3
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	bd90      	pop	{r4, r7, pc}
 800734a:	bf00      	nop
 800734c:	0800c644 	.word	0x0800c644

08007350 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b088      	sub	sp, #32
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	4611      	mov	r1, r2
 800735c:	461a      	mov	r2, r3
 800735e:	460b      	mov	r3, r1
 8007360:	71fb      	strb	r3, [r7, #7]
 8007362:	4613      	mov	r3, r2
 8007364:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	330d      	adds	r3, #13
 800736a:	79ba      	ldrb	r2, [r7, #6]
 800736c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	330b      	adds	r3, #11
 8007372:	220f      	movs	r2, #15
 8007374:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	330c      	adds	r3, #12
 800737a:	2200      	movs	r2, #0
 800737c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	331a      	adds	r3, #26
 8007382:	2100      	movs	r1, #0
 8007384:	4618      	mov	r0, r3
 8007386:	f7fe ff38 	bl	80061fa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800738a:	79fb      	ldrb	r3, [r7, #7]
 800738c:	1e5a      	subs	r2, r3, #1
 800738e:	4613      	mov	r3, r2
 8007390:	005b      	lsls	r3, r3, #1
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	82fb      	strh	r3, [r7, #22]
 800739e:	2300      	movs	r3, #0
 80073a0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80073a2:	8afb      	ldrh	r3, [r7, #22]
 80073a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d007      	beq.n	80073bc <put_lfn+0x6c>
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	61fa      	str	r2, [r7, #28]
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	881b      	ldrh	r3, [r3, #0]
 80073ba:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80073bc:	4a17      	ldr	r2, [pc, #92]	; (800741c <put_lfn+0xcc>)
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	4413      	add	r3, r2
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	4413      	add	r3, r2
 80073ca:	8afa      	ldrh	r2, [r7, #22]
 80073cc:	4611      	mov	r1, r2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fe ff13 	bl	80061fa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80073d4:	8afb      	ldrh	r3, [r7, #22]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d102      	bne.n	80073e0 <put_lfn+0x90>
 80073da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073de:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	3301      	adds	r3, #1
 80073e4:	61bb      	str	r3, [r7, #24]
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	2b0c      	cmp	r3, #12
 80073ea:	d9da      	bls.n	80073a2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80073ec:	8afb      	ldrh	r3, [r7, #22]
 80073ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d006      	beq.n	8007404 <put_lfn+0xb4>
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4413      	add	r3, r2
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d103      	bne.n	800740c <put_lfn+0xbc>
 8007404:	79fb      	ldrb	r3, [r7, #7]
 8007406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800740a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	79fa      	ldrb	r2, [r7, #7]
 8007410:	701a      	strb	r2, [r3, #0]
}
 8007412:	bf00      	nop
 8007414:	3720      	adds	r7, #32
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	0800c644 	.word	0x0800c644

08007420 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08c      	sub	sp, #48	; 0x30
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800742e:	220b      	movs	r2, #11
 8007430:	68b9      	ldr	r1, [r7, #8]
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f7fe ff28 	bl	8006288 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b05      	cmp	r3, #5
 800743c:	d92b      	bls.n	8007496 <gen_numname+0x76>
		sr = seq;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007442:	e022      	b.n	800748a <gen_numname+0x6a>
			wc = *lfn++;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	1c9a      	adds	r2, r3, #2
 8007448:	607a      	str	r2, [r7, #4]
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800744e:	2300      	movs	r3, #0
 8007450:	62bb      	str	r3, [r7, #40]	; 0x28
 8007452:	e017      	b.n	8007484 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	005a      	lsls	r2, r3, #1
 8007458:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	4413      	add	r3, r2
 8007460:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007462:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007464:	085b      	lsrs	r3, r3, #1
 8007466:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d005      	beq.n	800747e <gen_numname+0x5e>
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007478:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800747c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	3301      	adds	r3, #1
 8007482:	62bb      	str	r3, [r7, #40]	; 0x28
 8007484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007486:	2b0f      	cmp	r3, #15
 8007488:	d9e4      	bls.n	8007454 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1d8      	bne.n	8007444 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007496:	2307      	movs	r3, #7
 8007498:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	f003 030f 	and.w	r3, r3, #15
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	3330      	adds	r3, #48	; 0x30
 80074a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80074aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074ae:	2b39      	cmp	r3, #57	; 0x39
 80074b0:	d904      	bls.n	80074bc <gen_numname+0x9c>
 80074b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074b6:	3307      	adds	r3, #7
 80074b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	1e5a      	subs	r2, r3, #1
 80074c0:	62ba      	str	r2, [r7, #40]	; 0x28
 80074c2:	3330      	adds	r3, #48	; 0x30
 80074c4:	443b      	add	r3, r7
 80074c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80074ca:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	091b      	lsrs	r3, r3, #4
 80074d2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1df      	bne.n	800749a <gen_numname+0x7a>
	ns[i] = '~';
 80074da:	f107 0214 	add.w	r2, r7, #20
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	4413      	add	r3, r2
 80074e2:	227e      	movs	r2, #126	; 0x7e
 80074e4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80074e6:	2300      	movs	r3, #0
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
 80074ea:	e002      	b.n	80074f2 <gen_numname+0xd2>
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	3301      	adds	r3, #1
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
 80074f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d205      	bcs.n	8007506 <gen_numname+0xe6>
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	4413      	add	r3, r2
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b20      	cmp	r3, #32
 8007504:	d1f2      	bne.n	80074ec <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	2b07      	cmp	r3, #7
 800750a:	d807      	bhi.n	800751c <gen_numname+0xfc>
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	62ba      	str	r2, [r7, #40]	; 0x28
 8007512:	3330      	adds	r3, #48	; 0x30
 8007514:	443b      	add	r3, r7
 8007516:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800751a:	e000      	b.n	800751e <gen_numname+0xfe>
 800751c:	2120      	movs	r1, #32
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	627a      	str	r2, [r7, #36]	; 0x24
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	4413      	add	r3, r2
 8007528:	460a      	mov	r2, r1
 800752a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	2b07      	cmp	r3, #7
 8007530:	d9e9      	bls.n	8007506 <gen_numname+0xe6>
}
 8007532:	bf00      	nop
 8007534:	bf00      	nop
 8007536:	3730      	adds	r7, #48	; 0x30
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007544:	2300      	movs	r3, #0
 8007546:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007548:	230b      	movs	r3, #11
 800754a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	b2da      	uxtb	r2, r3
 8007550:	0852      	lsrs	r2, r2, #1
 8007552:	01db      	lsls	r3, r3, #7
 8007554:	4313      	orrs	r3, r2
 8007556:	b2da      	uxtb	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	1c59      	adds	r1, r3, #1
 800755c:	6079      	str	r1, [r7, #4]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	4413      	add	r3, r2
 8007562:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	3b01      	subs	r3, #1
 8007568:	60bb      	str	r3, [r7, #8]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1ed      	bne.n	800754c <sum_sfn+0x10>
	return sum;
 8007570:	7bfb      	ldrb	r3, [r7, #15]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b086      	sub	sp, #24
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800758c:	2100      	movs	r1, #0
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff fc88 	bl	8006ea4 <dir_sdi>
 8007594:	4603      	mov	r3, r0
 8007596:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <dir_find+0x24>
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	e0a9      	b.n	80076f6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80075a2:	23ff      	movs	r3, #255	; 0xff
 80075a4:	753b      	strb	r3, [r7, #20]
 80075a6:	7d3b      	ldrb	r3, [r7, #20]
 80075a8:	757b      	strb	r3, [r7, #21]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f04f 32ff 	mov.w	r2, #4294967295
 80075b0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	4619      	mov	r1, r3
 80075b8:	6938      	ldr	r0, [r7, #16]
 80075ba:	f7ff f893 	bl	80066e4 <move_window>
 80075be:	4603      	mov	r3, r0
 80075c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f040 8090 	bne.w	80076ea <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80075d2:	7dbb      	ldrb	r3, [r7, #22]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <dir_find+0x60>
 80075d8:	2304      	movs	r3, #4
 80075da:	75fb      	strb	r3, [r7, #23]
 80075dc:	e08a      	b.n	80076f4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	330b      	adds	r3, #11
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075ea:	73fb      	strb	r3, [r7, #15]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	7bfa      	ldrb	r2, [r7, #15]
 80075f0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80075f2:	7dbb      	ldrb	r3, [r7, #22]
 80075f4:	2be5      	cmp	r3, #229	; 0xe5
 80075f6:	d007      	beq.n	8007608 <dir_find+0x8a>
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d009      	beq.n	8007616 <dir_find+0x98>
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	2b0f      	cmp	r3, #15
 8007606:	d006      	beq.n	8007616 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007608:	23ff      	movs	r3, #255	; 0xff
 800760a:	757b      	strb	r3, [r7, #21]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f04f 32ff 	mov.w	r2, #4294967295
 8007612:	631a      	str	r2, [r3, #48]	; 0x30
 8007614:	e05e      	b.n	80076d4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	2b0f      	cmp	r3, #15
 800761a:	d136      	bne.n	800768a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007626:	2b00      	cmp	r3, #0
 8007628:	d154      	bne.n	80076d4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800762a:	7dbb      	ldrb	r3, [r7, #22]
 800762c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00d      	beq.n	8007650 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	7b5b      	ldrb	r3, [r3, #13]
 800763a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800763c:	7dbb      	ldrb	r3, [r7, #22]
 800763e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007642:	75bb      	strb	r3, [r7, #22]
 8007644:	7dbb      	ldrb	r3, [r7, #22]
 8007646:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	695a      	ldr	r2, [r3, #20]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007650:	7dba      	ldrb	r2, [r7, #22]
 8007652:	7d7b      	ldrb	r3, [r7, #21]
 8007654:	429a      	cmp	r2, r3
 8007656:	d115      	bne.n	8007684 <dir_find+0x106>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	330d      	adds	r3, #13
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	7d3a      	ldrb	r2, [r7, #20]
 8007662:	429a      	cmp	r2, r3
 8007664:	d10e      	bne.n	8007684 <dir_find+0x106>
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	691a      	ldr	r2, [r3, #16]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	4619      	mov	r1, r3
 8007670:	4610      	mov	r0, r2
 8007672:	f7ff fdfd 	bl	8007270 <cmp_lfn>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <dir_find+0x106>
 800767c:	7d7b      	ldrb	r3, [r7, #21]
 800767e:	3b01      	subs	r3, #1
 8007680:	b2db      	uxtb	r3, r3
 8007682:	e000      	b.n	8007686 <dir_find+0x108>
 8007684:	23ff      	movs	r3, #255	; 0xff
 8007686:	757b      	strb	r3, [r7, #21]
 8007688:	e024      	b.n	80076d4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800768a:	7d7b      	ldrb	r3, [r7, #21]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d109      	bne.n	80076a4 <dir_find+0x126>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff ff51 	bl	800753c <sum_sfn>
 800769a:	4603      	mov	r3, r0
 800769c:	461a      	mov	r2, r3
 800769e:	7d3b      	ldrb	r3, [r7, #20]
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d024      	beq.n	80076ee <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <dir_find+0x14a>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a18      	ldr	r0, [r3, #32]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3324      	adds	r3, #36	; 0x24
 80076ba:	220b      	movs	r2, #11
 80076bc:	4619      	mov	r1, r3
 80076be:	f7fe fe1f 	bl	8006300 <mem_cmp>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d014      	beq.n	80076f2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80076c8:	23ff      	movs	r3, #255	; 0xff
 80076ca:	757b      	strb	r3, [r7, #21]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f04f 32ff 	mov.w	r2, #4294967295
 80076d2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80076d4:	2100      	movs	r1, #0
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff fc6d 	bl	8006fb6 <dir_next>
 80076dc:	4603      	mov	r3, r0
 80076de:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f43f af65 	beq.w	80075b2 <dir_find+0x34>
 80076e8:	e004      	b.n	80076f4 <dir_find+0x176>
		if (res != FR_OK) break;
 80076ea:	bf00      	nop
 80076ec:	e002      	b.n	80076f4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80076ee:	bf00      	nop
 80076f0:	e000      	b.n	80076f4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80076f2:	bf00      	nop

	return res;
 80076f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08c      	sub	sp, #48	; 0x30
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007714:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <dir_register+0x20>
 800771c:	2306      	movs	r3, #6
 800771e:	e0e0      	b.n	80078e2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007720:	2300      	movs	r3, #0
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
 8007724:	e002      	b.n	800772c <dir_register+0x2c>
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	3301      	adds	r3, #1
 800772a:	627b      	str	r3, [r7, #36]	; 0x24
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	4413      	add	r3, r2
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1f4      	bne.n	8007726 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007742:	f107 030c 	add.w	r3, r7, #12
 8007746:	220c      	movs	r2, #12
 8007748:	4618      	mov	r0, r3
 800774a:	f7fe fd9d 	bl	8006288 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	d032      	beq.n	80077be <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2240      	movs	r2, #64	; 0x40
 800775c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007760:	2301      	movs	r3, #1
 8007762:	62bb      	str	r3, [r7, #40]	; 0x28
 8007764:	e016      	b.n	8007794 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	691a      	ldr	r2, [r3, #16]
 8007770:	f107 010c 	add.w	r1, r7, #12
 8007774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007776:	f7ff fe53 	bl	8007420 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7ff feff 	bl	800757e <dir_find>
 8007780:	4603      	mov	r3, r0
 8007782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800778a:	2b00      	cmp	r3, #0
 800778c:	d106      	bne.n	800779c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007790:	3301      	adds	r3, #1
 8007792:	62bb      	str	r3, [r7, #40]	; 0x28
 8007794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007796:	2b63      	cmp	r3, #99	; 0x63
 8007798:	d9e5      	bls.n	8007766 <dir_register+0x66>
 800779a:	e000      	b.n	800779e <dir_register+0x9e>
			if (res != FR_OK) break;
 800779c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	2b64      	cmp	r3, #100	; 0x64
 80077a2:	d101      	bne.n	80077a8 <dir_register+0xa8>
 80077a4:	2307      	movs	r3, #7
 80077a6:	e09c      	b.n	80078e2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80077a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077ac:	2b04      	cmp	r3, #4
 80077ae:	d002      	beq.n	80077b6 <dir_register+0xb6>
 80077b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077b4:	e095      	b.n	80078e2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80077b6:	7dfa      	ldrb	r2, [r7, #23]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d007      	beq.n	80077d8 <dir_register+0xd8>
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	330c      	adds	r3, #12
 80077cc:	4a47      	ldr	r2, [pc, #284]	; (80078ec <dir_register+0x1ec>)
 80077ce:	fba2 2303 	umull	r2, r3, r2, r3
 80077d2:	089b      	lsrs	r3, r3, #2
 80077d4:	3301      	adds	r3, #1
 80077d6:	e000      	b.n	80077da <dir_register+0xda>
 80077d8:	2301      	movs	r3, #1
 80077da:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80077dc:	6a39      	ldr	r1, [r7, #32]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7ff fcbf 	bl	8007162 <dir_alloc>
 80077e4:	4603      	mov	r3, r0
 80077e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80077ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d148      	bne.n	8007884 <dir_register+0x184>
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	623b      	str	r3, [r7, #32]
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d042      	beq.n	8007884 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	695a      	ldr	r2, [r3, #20]
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	015b      	lsls	r3, r3, #5
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7ff fb4a 	bl	8006ea4 <dir_sdi>
 8007810:	4603      	mov	r3, r0
 8007812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007816:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800781a:	2b00      	cmp	r3, #0
 800781c:	d132      	bne.n	8007884 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3324      	adds	r3, #36	; 0x24
 8007822:	4618      	mov	r0, r3
 8007824:	f7ff fe8a 	bl	800753c <sum_sfn>
 8007828:	4603      	mov	r3, r0
 800782a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	4619      	mov	r1, r3
 8007832:	69f8      	ldr	r0, [r7, #28]
 8007834:	f7fe ff56 	bl	80066e4 <move_window>
 8007838:	4603      	mov	r3, r0
 800783a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800783e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007842:	2b00      	cmp	r3, #0
 8007844:	d11d      	bne.n	8007882 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	6918      	ldr	r0, [r3, #16]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a19      	ldr	r1, [r3, #32]
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	b2da      	uxtb	r2, r3
 8007852:	7efb      	ldrb	r3, [r7, #27]
 8007854:	f7ff fd7c 	bl	8007350 <put_lfn>
				fs->wflag = 1;
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	2201      	movs	r2, #1
 800785c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800785e:	2100      	movs	r1, #0
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff fba8 	bl	8006fb6 <dir_next>
 8007866:	4603      	mov	r3, r0
 8007868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800786c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007870:	2b00      	cmp	r3, #0
 8007872:	d107      	bne.n	8007884 <dir_register+0x184>
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	3b01      	subs	r3, #1
 8007878:	623b      	str	r3, [r7, #32]
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1d5      	bne.n	800782c <dir_register+0x12c>
 8007880:	e000      	b.n	8007884 <dir_register+0x184>
				if (res != FR_OK) break;
 8007882:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007888:	2b00      	cmp	r3, #0
 800788a:	d128      	bne.n	80078de <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	4619      	mov	r1, r3
 8007892:	69f8      	ldr	r0, [r7, #28]
 8007894:	f7fe ff26 	bl	80066e4 <move_window>
 8007898:	4603      	mov	r3, r0
 800789a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800789e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d11b      	bne.n	80078de <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	2220      	movs	r2, #32
 80078ac:	2100      	movs	r1, #0
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe fd0b 	bl	80062ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a18      	ldr	r0, [r3, #32]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3324      	adds	r3, #36	; 0x24
 80078bc:	220b      	movs	r2, #11
 80078be:	4619      	mov	r1, r3
 80078c0:	f7fe fce2 	bl	8006288 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	330c      	adds	r3, #12
 80078d0:	f002 0218 	and.w	r2, r2, #24
 80078d4:	b2d2      	uxtb	r2, r2
 80078d6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	2201      	movs	r2, #1
 80078dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80078de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3730      	adds	r7, #48	; 0x30
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	4ec4ec4f 	.word	0x4ec4ec4f

080078f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08a      	sub	sp, #40	; 0x28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	613b      	str	r3, [r7, #16]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	2300      	movs	r3, #0
 800790a:	617b      	str	r3, [r7, #20]
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	61ba      	str	r2, [r7, #24]
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	4413      	add	r3, r2
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800791e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007920:	2b1f      	cmp	r3, #31
 8007922:	d940      	bls.n	80079a6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007926:	2b2f      	cmp	r3, #47	; 0x2f
 8007928:	d006      	beq.n	8007938 <create_name+0x48>
 800792a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800792c:	2b5c      	cmp	r3, #92	; 0x5c
 800792e:	d110      	bne.n	8007952 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007930:	e002      	b.n	8007938 <create_name+0x48>
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	3301      	adds	r3, #1
 8007936:	61bb      	str	r3, [r7, #24]
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	4413      	add	r3, r2
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b2f      	cmp	r3, #47	; 0x2f
 8007942:	d0f6      	beq.n	8007932 <create_name+0x42>
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	4413      	add	r3, r2
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b5c      	cmp	r3, #92	; 0x5c
 800794e:	d0f0      	beq.n	8007932 <create_name+0x42>
			break;
 8007950:	e02a      	b.n	80079a8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2bfe      	cmp	r3, #254	; 0xfe
 8007956:	d901      	bls.n	800795c <create_name+0x6c>
 8007958:	2306      	movs	r3, #6
 800795a:	e17d      	b.n	8007c58 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800795c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800795e:	b2db      	uxtb	r3, r3
 8007960:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007962:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007964:	2101      	movs	r1, #1
 8007966:	4618      	mov	r0, r3
 8007968:	f001 fcdc 	bl	8009324 <ff_convert>
 800796c:	4603      	mov	r3, r0
 800796e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007970:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <create_name+0x8a>
 8007976:	2306      	movs	r3, #6
 8007978:	e16e      	b.n	8007c58 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800797a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800797c:	2b7f      	cmp	r3, #127	; 0x7f
 800797e:	d809      	bhi.n	8007994 <create_name+0xa4>
 8007980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007982:	4619      	mov	r1, r3
 8007984:	488d      	ldr	r0, [pc, #564]	; (8007bbc <create_name+0x2cc>)
 8007986:	f7fe fce2 	bl	800634e <chk_chr>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <create_name+0xa4>
 8007990:	2306      	movs	r3, #6
 8007992:	e161      	b.n	8007c58 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	617a      	str	r2, [r7, #20]
 800799a:	005b      	lsls	r3, r3, #1
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	4413      	add	r3, r2
 80079a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079a2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80079a4:	e7b4      	b.n	8007910 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80079a6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	441a      	add	r2, r3
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80079b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079b4:	2b1f      	cmp	r3, #31
 80079b6:	d801      	bhi.n	80079bc <create_name+0xcc>
 80079b8:	2304      	movs	r3, #4
 80079ba:	e000      	b.n	80079be <create_name+0xce>
 80079bc:	2300      	movs	r3, #0
 80079be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80079c2:	e011      	b.n	80079e8 <create_name+0xf8>
		w = lfn[di - 1];
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80079ca:	3b01      	subs	r3, #1
 80079cc:	005b      	lsls	r3, r3, #1
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	4413      	add	r3, r2
 80079d2:	881b      	ldrh	r3, [r3, #0]
 80079d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80079d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d002      	beq.n	80079e2 <create_name+0xf2>
 80079dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079de:	2b2e      	cmp	r3, #46	; 0x2e
 80079e0:	d106      	bne.n	80079f0 <create_name+0x100>
		di--;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	3b01      	subs	r3, #1
 80079e6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1ea      	bne.n	80079c4 <create_name+0xd4>
 80079ee:	e000      	b.n	80079f2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80079f0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	4413      	add	r3, r2
 80079fa:	2200      	movs	r2, #0
 80079fc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <create_name+0x118>
 8007a04:	2306      	movs	r3, #6
 8007a06:	e127      	b.n	8007c58 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3324      	adds	r3, #36	; 0x24
 8007a0c:	220b      	movs	r2, #11
 8007a0e:	2120      	movs	r1, #32
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe fc5a 	bl	80062ca <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007a16:	2300      	movs	r3, #0
 8007a18:	61bb      	str	r3, [r7, #24]
 8007a1a:	e002      	b.n	8007a22 <create_name+0x132>
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	61bb      	str	r3, [r7, #24]
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	4413      	add	r3, r2
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	2b20      	cmp	r3, #32
 8007a2e:	d0f5      	beq.n	8007a1c <create_name+0x12c>
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a3c:	d0ee      	beq.n	8007a1c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d009      	beq.n	8007a58 <create_name+0x168>
 8007a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a48:	f043 0303 	orr.w	r3, r3, #3
 8007a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007a50:	e002      	b.n	8007a58 <create_name+0x168>
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	617b      	str	r3, [r7, #20]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d009      	beq.n	8007a72 <create_name+0x182>
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007a64:	3b01      	subs	r3, #1
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a70:	d1ef      	bne.n	8007a52 <create_name+0x162>

	i = b = 0; ni = 8;
 8007a72:	2300      	movs	r3, #0
 8007a74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007a78:	2300      	movs	r3, #0
 8007a7a:	623b      	str	r3, [r7, #32]
 8007a7c:	2308      	movs	r3, #8
 8007a7e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	61ba      	str	r2, [r7, #24]
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 8090 	beq.w	8007bb8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007a98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a9a:	2b20      	cmp	r3, #32
 8007a9c:	d006      	beq.n	8007aac <create_name+0x1bc>
 8007a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8007aa2:	d10a      	bne.n	8007aba <create_name+0x1ca>
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d006      	beq.n	8007aba <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ab0:	f043 0303 	orr.w	r3, r3, #3
 8007ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ab8:	e07d      	b.n	8007bb6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007aba:	6a3a      	ldr	r2, [r7, #32]
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d203      	bcs.n	8007aca <create_name+0x1da>
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d123      	bne.n	8007b12 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	2b0b      	cmp	r3, #11
 8007ace:	d106      	bne.n	8007ade <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ad4:	f043 0303 	orr.w	r3, r3, #3
 8007ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007adc:	e075      	b.n	8007bca <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d005      	beq.n	8007af2 <create_name+0x202>
 8007ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aea:	f043 0303 	orr.w	r3, r3, #3
 8007aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d866      	bhi.n	8007bc8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	61bb      	str	r3, [r7, #24]
 8007afe:	2308      	movs	r3, #8
 8007b00:	623b      	str	r3, [r7, #32]
 8007b02:	230b      	movs	r3, #11
 8007b04:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007b06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b10:	e051      	b.n	8007bb6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007b12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b14:	2b7f      	cmp	r3, #127	; 0x7f
 8007b16:	d914      	bls.n	8007b42 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007b18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f001 fc01 	bl	8009324 <ff_convert>
 8007b22:	4603      	mov	r3, r0
 8007b24:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d004      	beq.n	8007b36 <create_name+0x246>
 8007b2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b2e:	3b80      	subs	r3, #128	; 0x80
 8007b30:	4a23      	ldr	r2, [pc, #140]	; (8007bc0 <create_name+0x2d0>)
 8007b32:	5cd3      	ldrb	r3, [r2, r3]
 8007b34:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b3a:	f043 0302 	orr.w	r3, r3, #2
 8007b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007b42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d007      	beq.n	8007b58 <create_name+0x268>
 8007b48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	481d      	ldr	r0, [pc, #116]	; (8007bc4 <create_name+0x2d4>)
 8007b4e:	f7fe fbfe 	bl	800634e <chk_chr>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d008      	beq.n	8007b6a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007b58:	235f      	movs	r3, #95	; 0x5f
 8007b5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b60:	f043 0303 	orr.w	r3, r3, #3
 8007b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b68:	e01b      	b.n	8007ba2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b6c:	2b40      	cmp	r3, #64	; 0x40
 8007b6e:	d909      	bls.n	8007b84 <create_name+0x294>
 8007b70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b72:	2b5a      	cmp	r3, #90	; 0x5a
 8007b74:	d806      	bhi.n	8007b84 <create_name+0x294>
					b |= 2;
 8007b76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b7a:	f043 0302 	orr.w	r3, r3, #2
 8007b7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b82:	e00e      	b.n	8007ba2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007b84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b86:	2b60      	cmp	r3, #96	; 0x60
 8007b88:	d90b      	bls.n	8007ba2 <create_name+0x2b2>
 8007b8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b8c:	2b7a      	cmp	r3, #122	; 0x7a
 8007b8e:	d808      	bhi.n	8007ba2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007b90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b94:	f043 0301 	orr.w	r3, r3, #1
 8007b98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b9e:	3b20      	subs	r3, #32
 8007ba0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	623a      	str	r2, [r7, #32]
 8007ba8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007baa:	b2d1      	uxtb	r1, r2
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	4413      	add	r3, r2
 8007bb0:	460a      	mov	r2, r1
 8007bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007bb6:	e763      	b.n	8007a80 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007bb8:	bf00      	nop
 8007bba:	e006      	b.n	8007bca <create_name+0x2da>
 8007bbc:	0800c50c 	.word	0x0800c50c
 8007bc0:	0800c5c4 	.word	0x0800c5c4
 8007bc4:	0800c518 	.word	0x0800c518
			if (si > di) break;			/* No extension */
 8007bc8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bd0:	2be5      	cmp	r3, #229	; 0xe5
 8007bd2:	d103      	bne.n	8007bdc <create_name+0x2ec>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2205      	movs	r2, #5
 8007bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	d104      	bne.n	8007bec <create_name+0x2fc>
 8007be2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007bec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bf0:	f003 030c 	and.w	r3, r3, #12
 8007bf4:	2b0c      	cmp	r3, #12
 8007bf6:	d005      	beq.n	8007c04 <create_name+0x314>
 8007bf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d105      	bne.n	8007c10 <create_name+0x320>
 8007c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c08:	f043 0302 	orr.w	r3, r3, #2
 8007c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d117      	bne.n	8007c4c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007c1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c20:	f003 0303 	and.w	r3, r3, #3
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d105      	bne.n	8007c34 <create_name+0x344>
 8007c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c2c:	f043 0310 	orr.w	r3, r3, #16
 8007c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007c34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c38:	f003 030c 	and.w	r3, r3, #12
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d105      	bne.n	8007c4c <create_name+0x35c>
 8007c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c44:	f043 0308 	orr.w	r3, r3, #8
 8007c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007c52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007c56:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3728      	adds	r7, #40	; 0x28
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007c74:	e002      	b.n	8007c7c <follow_path+0x1c>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	2b2f      	cmp	r3, #47	; 0x2f
 8007c82:	d0f8      	beq.n	8007c76 <follow_path+0x16>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	2b5c      	cmp	r3, #92	; 0x5c
 8007c8a:	d0f4      	beq.n	8007c76 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b1f      	cmp	r3, #31
 8007c98:	d80a      	bhi.n	8007cb0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2280      	movs	r2, #128	; 0x80
 8007c9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7ff f8fd 	bl	8006ea4 <dir_sdi>
 8007caa:	4603      	mov	r3, r0
 8007cac:	75fb      	strb	r3, [r7, #23]
 8007cae:	e048      	b.n	8007d42 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007cb0:	463b      	mov	r3, r7
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7ff fe1b 	bl	80078f0 <create_name>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d139      	bne.n	8007d38 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7ff fc5a 	bl	800757e <dir_find>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007cd4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00a      	beq.n	8007cf2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d12c      	bne.n	8007d3c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007ce2:	7afb      	ldrb	r3, [r7, #11]
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d127      	bne.n	8007d3c <follow_path+0xdc>
 8007cec:	2305      	movs	r3, #5
 8007cee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007cf0:	e024      	b.n	8007d3c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007cf2:	7afb      	ldrb	r3, [r7, #11]
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d121      	bne.n	8007d40 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	799b      	ldrb	r3, [r3, #6]
 8007d00:	f003 0310 	and.w	r3, r3, #16
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d102      	bne.n	8007d0e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007d08:	2305      	movs	r3, #5
 8007d0a:	75fb      	strb	r3, [r7, #23]
 8007d0c:	e019      	b.n	8007d42 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	8992      	ldrh	r2, [r2, #12]
 8007d1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d20:	fb00 f202 	mul.w	r2, r0, r2
 8007d24:	1a9b      	subs	r3, r3, r2
 8007d26:	440b      	add	r3, r1
 8007d28:	4619      	mov	r1, r3
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f7ff fa60 	bl	80071f0 <ld_clust>
 8007d30:	4602      	mov	r2, r0
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d36:	e7bb      	b.n	8007cb0 <follow_path+0x50>
			if (res != FR_OK) break;
 8007d38:	bf00      	nop
 8007d3a:	e002      	b.n	8007d42 <follow_path+0xe2>
				break;
 8007d3c:	bf00      	nop
 8007d3e:	e000      	b.n	8007d42 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d40:	bf00      	nop
			}
		}
	}

	return res;
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007d54:	f04f 33ff 	mov.w	r3, #4294967295
 8007d58:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d031      	beq.n	8007dc6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	e002      	b.n	8007d70 <get_ldnumber+0x24>
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	617b      	str	r3, [r7, #20]
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	2b1f      	cmp	r3, #31
 8007d76:	d903      	bls.n	8007d80 <get_ldnumber+0x34>
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b3a      	cmp	r3, #58	; 0x3a
 8007d7e:	d1f4      	bne.n	8007d6a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	2b3a      	cmp	r3, #58	; 0x3a
 8007d86:	d11c      	bne.n	8007dc2 <get_ldnumber+0x76>
			tp = *path;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	1c5a      	adds	r2, r3, #1
 8007d92:	60fa      	str	r2, [r7, #12]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	3b30      	subs	r3, #48	; 0x30
 8007d98:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2b09      	cmp	r3, #9
 8007d9e:	d80e      	bhi.n	8007dbe <get_ldnumber+0x72>
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d10a      	bne.n	8007dbe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d107      	bne.n	8007dbe <get_ldnumber+0x72>
					vol = (int)i;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	3301      	adds	r3, #1
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	e002      	b.n	8007dc8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007dc6:	693b      	ldr	r3, [r7, #16]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	371c      	adds	r7, #28
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	70da      	strb	r2, [r3, #3]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dea:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7fe fc78 	bl	80066e4 <move_window>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <check_fs+0x2a>
 8007dfa:	2304      	movs	r3, #4
 8007dfc:	e038      	b.n	8007e70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3338      	adds	r3, #56	; 0x38
 8007e02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fe f9bc 	bl	8006184 <ld_word>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d001      	beq.n	8007e1c <check_fs+0x48>
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e029      	b.n	8007e70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e22:	2be9      	cmp	r3, #233	; 0xe9
 8007e24:	d009      	beq.n	8007e3a <check_fs+0x66>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e2c:	2beb      	cmp	r3, #235	; 0xeb
 8007e2e:	d11e      	bne.n	8007e6e <check_fs+0x9a>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007e36:	2b90      	cmp	r3, #144	; 0x90
 8007e38:	d119      	bne.n	8007e6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3338      	adds	r3, #56	; 0x38
 8007e3e:	3336      	adds	r3, #54	; 0x36
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe f9b7 	bl	80061b4 <ld_dword>
 8007e46:	4603      	mov	r3, r0
 8007e48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e4c:	4a0a      	ldr	r2, [pc, #40]	; (8007e78 <check_fs+0xa4>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d101      	bne.n	8007e56 <check_fs+0x82>
 8007e52:	2300      	movs	r3, #0
 8007e54:	e00c      	b.n	8007e70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3338      	adds	r3, #56	; 0x38
 8007e5a:	3352      	adds	r3, #82	; 0x52
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fe f9a9 	bl	80061b4 <ld_dword>
 8007e62:	4603      	mov	r3, r0
 8007e64:	4a05      	ldr	r2, [pc, #20]	; (8007e7c <check_fs+0xa8>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d101      	bne.n	8007e6e <check_fs+0x9a>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e000      	b.n	8007e70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007e6e:	2302      	movs	r3, #2
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	00544146 	.word	0x00544146
 8007e7c:	33544146 	.word	0x33544146

08007e80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b096      	sub	sp, #88	; 0x58
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f7ff ff59 	bl	8007d4c <get_ldnumber>
 8007e9a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	da01      	bge.n	8007ea6 <find_volume+0x26>
 8007ea2:	230b      	movs	r3, #11
 8007ea4:	e265      	b.n	8008372 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007ea6:	4a9f      	ldr	r2, [pc, #636]	; (8008124 <find_volume+0x2a4>)
 8007ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <find_volume+0x3a>
 8007eb6:	230c      	movs	r3, #12
 8007eb8:	e25b      	b.n	8008372 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ebe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007ec0:	79fb      	ldrb	r3, [r7, #7]
 8007ec2:	f023 0301 	bic.w	r3, r3, #1
 8007ec6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01a      	beq.n	8007f06 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed2:	785b      	ldrb	r3, [r3, #1]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fe f8b7 	bl	8006048 <disk_status>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ee0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ee4:	f003 0301 	and.w	r3, r3, #1
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10c      	bne.n	8007f06 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007eec:	79fb      	ldrb	r3, [r7, #7]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d007      	beq.n	8007f02 <find_volume+0x82>
 8007ef2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007efe:	230a      	movs	r3, #10
 8007f00:	e237      	b.n	8008372 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007f02:	2300      	movs	r3, #0
 8007f04:	e235      	b.n	8008372 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f08:	2200      	movs	r2, #0
 8007f0a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f16:	785b      	ldrb	r3, [r3, #1]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fe f8af 	bl	800607c <disk_initialize>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007f24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007f30:	2303      	movs	r3, #3
 8007f32:	e21e      	b.n	8008372 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007f34:	79fb      	ldrb	r3, [r7, #7]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d007      	beq.n	8007f4a <find_volume+0xca>
 8007f3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f3e:	f003 0304 	and.w	r3, r3, #4
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007f46:	230a      	movs	r3, #10
 8007f48:	e213      	b.n	8008372 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4c:	7858      	ldrb	r0, [r3, #1]
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f50:	330c      	adds	r3, #12
 8007f52:	461a      	mov	r2, r3
 8007f54:	2102      	movs	r1, #2
 8007f56:	f7fe f8f7 	bl	8006148 <disk_ioctl>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <find_volume+0xe4>
 8007f60:	2301      	movs	r3, #1
 8007f62:	e206      	b.n	8008372 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	899b      	ldrh	r3, [r3, #12]
 8007f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f6c:	d80d      	bhi.n	8007f8a <find_volume+0x10a>
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f70:	899b      	ldrh	r3, [r3, #12]
 8007f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f76:	d308      	bcc.n	8007f8a <find_volume+0x10a>
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	899b      	ldrh	r3, [r3, #12]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f80:	899b      	ldrh	r3, [r3, #12]
 8007f82:	3b01      	subs	r3, #1
 8007f84:	4013      	ands	r3, r2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <find_volume+0x10e>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e1f1      	b.n	8008372 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007f92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f96:	f7ff ff1d 	bl	8007dd4 <check_fs>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007fa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d149      	bne.n	800803c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007fa8:	2300      	movs	r3, #0
 8007faa:	643b      	str	r3, [r7, #64]	; 0x40
 8007fac:	e01e      	b.n	8007fec <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fb6:	011b      	lsls	r3, r3, #4
 8007fb8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007fbc:	4413      	add	r3, r2
 8007fbe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d006      	beq.n	8007fd8 <find_volume+0x158>
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	3308      	adds	r3, #8
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe f8f0 	bl	80061b4 <ld_dword>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	e000      	b.n	8007fda <find_volume+0x15a>
 8007fd8:	2200      	movs	r2, #0
 8007fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	3358      	adds	r3, #88	; 0x58
 8007fe0:	443b      	add	r3, r7
 8007fe2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fe8:	3301      	adds	r3, #1
 8007fea:	643b      	str	r3, [r7, #64]	; 0x40
 8007fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d9dd      	bls.n	8007fae <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <find_volume+0x182>
 8007ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ffe:	3b01      	subs	r3, #1
 8008000:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	3358      	adds	r3, #88	; 0x58
 8008008:	443b      	add	r3, r7
 800800a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800800e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008012:	2b00      	cmp	r3, #0
 8008014:	d005      	beq.n	8008022 <find_volume+0x1a2>
 8008016:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008018:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800801a:	f7ff fedb 	bl	8007dd4 <check_fs>
 800801e:	4603      	mov	r3, r0
 8008020:	e000      	b.n	8008024 <find_volume+0x1a4>
 8008022:	2303      	movs	r3, #3
 8008024:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008028:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800802c:	2b01      	cmp	r3, #1
 800802e:	d905      	bls.n	800803c <find_volume+0x1bc>
 8008030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008032:	3301      	adds	r3, #1
 8008034:	643b      	str	r3, [r7, #64]	; 0x40
 8008036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008038:	2b03      	cmp	r3, #3
 800803a:	d9e2      	bls.n	8008002 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800803c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008040:	2b04      	cmp	r3, #4
 8008042:	d101      	bne.n	8008048 <find_volume+0x1c8>
 8008044:	2301      	movs	r3, #1
 8008046:	e194      	b.n	8008372 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800804c:	2b01      	cmp	r3, #1
 800804e:	d901      	bls.n	8008054 <find_volume+0x1d4>
 8008050:	230d      	movs	r3, #13
 8008052:	e18e      	b.n	8008372 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008056:	3338      	adds	r3, #56	; 0x38
 8008058:	330b      	adds	r3, #11
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe f892 	bl	8006184 <ld_word>
 8008060:	4603      	mov	r3, r0
 8008062:	461a      	mov	r2, r3
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	899b      	ldrh	r3, [r3, #12]
 8008068:	429a      	cmp	r2, r3
 800806a:	d001      	beq.n	8008070 <find_volume+0x1f0>
 800806c:	230d      	movs	r3, #13
 800806e:	e180      	b.n	8008372 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	3338      	adds	r3, #56	; 0x38
 8008074:	3316      	adds	r3, #22
 8008076:	4618      	mov	r0, r3
 8008078:	f7fe f884 	bl	8006184 <ld_word>
 800807c:	4603      	mov	r3, r0
 800807e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008082:	2b00      	cmp	r3, #0
 8008084:	d106      	bne.n	8008094 <find_volume+0x214>
 8008086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008088:	3338      	adds	r3, #56	; 0x38
 800808a:	3324      	adds	r3, #36	; 0x24
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe f891 	bl	80061b4 <ld_dword>
 8008092:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008098:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80080a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a6:	789b      	ldrb	r3, [r3, #2]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d005      	beq.n	80080b8 <find_volume+0x238>
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	789b      	ldrb	r3, [r3, #2]
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d001      	beq.n	80080b8 <find_volume+0x238>
 80080b4:	230d      	movs	r3, #13
 80080b6:	e15c      	b.n	8008372 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	789b      	ldrb	r3, [r3, #2]
 80080bc:	461a      	mov	r2, r3
 80080be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080c0:	fb02 f303 	mul.w	r3, r2, r3
 80080c4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80080c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80080d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d4:	895b      	ldrh	r3, [r3, #10]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d008      	beq.n	80080ec <find_volume+0x26c>
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	895b      	ldrh	r3, [r3, #10]
 80080de:	461a      	mov	r2, r3
 80080e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e2:	895b      	ldrh	r3, [r3, #10]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	4013      	ands	r3, r2
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <find_volume+0x270>
 80080ec:	230d      	movs	r3, #13
 80080ee:	e140      	b.n	8008372 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f2:	3338      	adds	r3, #56	; 0x38
 80080f4:	3311      	adds	r3, #17
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe f844 	bl	8006184 <ld_word>
 80080fc:	4603      	mov	r3, r0
 80080fe:	461a      	mov	r2, r3
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	891b      	ldrh	r3, [r3, #8]
 8008108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800810a:	8992      	ldrh	r2, [r2, #12]
 800810c:	0952      	lsrs	r2, r2, #5
 800810e:	b292      	uxth	r2, r2
 8008110:	fbb3 f1f2 	udiv	r1, r3, r2
 8008114:	fb01 f202 	mul.w	r2, r1, r2
 8008118:	1a9b      	subs	r3, r3, r2
 800811a:	b29b      	uxth	r3, r3
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <find_volume+0x2a8>
 8008120:	230d      	movs	r3, #13
 8008122:	e126      	b.n	8008372 <find_volume+0x4f2>
 8008124:	200023f8 	.word	0x200023f8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	3338      	adds	r3, #56	; 0x38
 800812c:	3313      	adds	r3, #19
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe f828 	bl	8006184 <ld_word>
 8008134:	4603      	mov	r3, r0
 8008136:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800813a:	2b00      	cmp	r3, #0
 800813c:	d106      	bne.n	800814c <find_volume+0x2cc>
 800813e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008140:	3338      	adds	r3, #56	; 0x38
 8008142:	3320      	adds	r3, #32
 8008144:	4618      	mov	r0, r3
 8008146:	f7fe f835 	bl	80061b4 <ld_dword>
 800814a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800814c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814e:	3338      	adds	r3, #56	; 0x38
 8008150:	330e      	adds	r3, #14
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe f816 	bl	8006184 <ld_word>
 8008158:	4603      	mov	r3, r0
 800815a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800815c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <find_volume+0x2e6>
 8008162:	230d      	movs	r3, #13
 8008164:	e105      	b.n	8008372 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008166:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816a:	4413      	add	r3, r2
 800816c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800816e:	8911      	ldrh	r1, [r2, #8]
 8008170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008172:	8992      	ldrh	r2, [r2, #12]
 8008174:	0952      	lsrs	r2, r2, #5
 8008176:	b292      	uxth	r2, r2
 8008178:	fbb1 f2f2 	udiv	r2, r1, r2
 800817c:	b292      	uxth	r2, r2
 800817e:	4413      	add	r3, r2
 8008180:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008182:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008186:	429a      	cmp	r2, r3
 8008188:	d201      	bcs.n	800818e <find_volume+0x30e>
 800818a:	230d      	movs	r3, #13
 800818c:	e0f1      	b.n	8008372 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800818e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008196:	8952      	ldrh	r2, [r2, #10]
 8008198:	fbb3 f3f2 	udiv	r3, r3, r2
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <find_volume+0x328>
 80081a4:	230d      	movs	r3, #13
 80081a6:	e0e4      	b.n	8008372 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80081a8:	2303      	movs	r3, #3
 80081aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d802      	bhi.n	80081be <find_volume+0x33e>
 80081b8:	2302      	movs	r3, #2
 80081ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d802      	bhi.n	80081ce <find_volume+0x34e>
 80081c8:	2301      	movs	r3, #1
 80081ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	1c9a      	adds	r2, r3, #2
 80081d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081da:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80081dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80081de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081e0:	441a      	add	r2, r3
 80081e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80081e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	441a      	add	r2, r3
 80081ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ee:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80081f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d11e      	bne.n	8008236 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80081f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fa:	3338      	adds	r3, #56	; 0x38
 80081fc:	332a      	adds	r3, #42	; 0x2a
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fd ffc0 	bl	8006184 <ld_word>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <find_volume+0x38e>
 800820a:	230d      	movs	r3, #13
 800820c:	e0b1      	b.n	8008372 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800820e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008210:	891b      	ldrh	r3, [r3, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <find_volume+0x39a>
 8008216:	230d      	movs	r3, #13
 8008218:	e0ab      	b.n	8008372 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800821a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821c:	3338      	adds	r3, #56	; 0x38
 800821e:	332c      	adds	r3, #44	; 0x2c
 8008220:	4618      	mov	r0, r3
 8008222:	f7fd ffc7 	bl	80061b4 <ld_dword>
 8008226:	4602      	mov	r2, r0
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800822c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	647b      	str	r3, [r7, #68]	; 0x44
 8008234:	e01f      	b.n	8008276 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008238:	891b      	ldrh	r3, [r3, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <find_volume+0x3c2>
 800823e:	230d      	movs	r3, #13
 8008240:	e097      	b.n	8008372 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008248:	441a      	add	r2, r3
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800824e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008252:	2b02      	cmp	r3, #2
 8008254:	d103      	bne.n	800825e <find_volume+0x3de>
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	005b      	lsls	r3, r3, #1
 800825c:	e00a      	b.n	8008274 <find_volume+0x3f4>
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	69da      	ldr	r2, [r3, #28]
 8008262:	4613      	mov	r3, r2
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	4413      	add	r3, r2
 8008268:	085a      	lsrs	r2, r3, #1
 800826a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008274:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008278:	6a1a      	ldr	r2, [r3, #32]
 800827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827c:	899b      	ldrh	r3, [r3, #12]
 800827e:	4619      	mov	r1, r3
 8008280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008282:	440b      	add	r3, r1
 8008284:	3b01      	subs	r3, #1
 8008286:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008288:	8989      	ldrh	r1, [r1, #12]
 800828a:	fbb3 f3f1 	udiv	r3, r3, r1
 800828e:	429a      	cmp	r2, r3
 8008290:	d201      	bcs.n	8008296 <find_volume+0x416>
 8008292:	230d      	movs	r3, #13
 8008294:	e06d      	b.n	8008372 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	f04f 32ff 	mov.w	r2, #4294967295
 800829c:	619a      	str	r2, [r3, #24]
 800829e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a0:	699a      	ldr	r2, [r3, #24]
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80082a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a8:	2280      	movs	r2, #128	; 0x80
 80082aa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80082ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d149      	bne.n	8008348 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80082b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b6:	3338      	adds	r3, #56	; 0x38
 80082b8:	3330      	adds	r3, #48	; 0x30
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fd ff62 	bl	8006184 <ld_word>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d140      	bne.n	8008348 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80082c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082c8:	3301      	adds	r3, #1
 80082ca:	4619      	mov	r1, r3
 80082cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082ce:	f7fe fa09 	bl	80066e4 <move_window>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d137      	bne.n	8008348 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80082d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082da:	2200      	movs	r2, #0
 80082dc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80082de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e0:	3338      	adds	r3, #56	; 0x38
 80082e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fd ff4c 	bl	8006184 <ld_word>
 80082ec:	4603      	mov	r3, r0
 80082ee:	461a      	mov	r2, r3
 80082f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d127      	bne.n	8008348 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80082f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fa:	3338      	adds	r3, #56	; 0x38
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fd ff59 	bl	80061b4 <ld_dword>
 8008302:	4603      	mov	r3, r0
 8008304:	4a1d      	ldr	r2, [pc, #116]	; (800837c <find_volume+0x4fc>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d11e      	bne.n	8008348 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800830a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830c:	3338      	adds	r3, #56	; 0x38
 800830e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008312:	4618      	mov	r0, r3
 8008314:	f7fd ff4e 	bl	80061b4 <ld_dword>
 8008318:	4603      	mov	r3, r0
 800831a:	4a19      	ldr	r2, [pc, #100]	; (8008380 <find_volume+0x500>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d113      	bne.n	8008348 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008322:	3338      	adds	r3, #56	; 0x38
 8008324:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008328:	4618      	mov	r0, r3
 800832a:	f7fd ff43 	bl	80061b4 <ld_dword>
 800832e:	4602      	mov	r2, r0
 8008330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008332:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	3338      	adds	r3, #56	; 0x38
 8008338:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800833c:	4618      	mov	r0, r3
 800833e:	f7fd ff39 	bl	80061b4 <ld_dword>
 8008342:	4602      	mov	r2, r0
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800834e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008350:	4b0c      	ldr	r3, [pc, #48]	; (8008384 <find_volume+0x504>)
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	3301      	adds	r3, #1
 8008356:	b29a      	uxth	r2, r3
 8008358:	4b0a      	ldr	r3, [pc, #40]	; (8008384 <find_volume+0x504>)
 800835a:	801a      	strh	r2, [r3, #0]
 800835c:	4b09      	ldr	r3, [pc, #36]	; (8008384 <find_volume+0x504>)
 800835e:	881a      	ldrh	r2, [r3, #0]
 8008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008362:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	4a08      	ldr	r2, [pc, #32]	; (8008388 <find_volume+0x508>)
 8008368:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800836a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800836c:	f7fe f952 	bl	8006614 <clear_lock>
#endif
	return FR_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3758      	adds	r7, #88	; 0x58
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	41615252 	.word	0x41615252
 8008380:	61417272 	.word	0x61417272
 8008384:	200023fc 	.word	0x200023fc
 8008388:	20002420 	.word	0x20002420

0800838c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008396:	2309      	movs	r3, #9
 8008398:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01c      	beq.n	80083da <validate+0x4e>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d018      	beq.n	80083da <validate+0x4e>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d013      	beq.n	80083da <validate+0x4e>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	889a      	ldrh	r2, [r3, #4]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	88db      	ldrh	r3, [r3, #6]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d10c      	bne.n	80083da <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	785b      	ldrb	r3, [r3, #1]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fd fe3e 	bl	8006048 <disk_status>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <validate+0x4e>
			res = FR_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d102      	bne.n	80083e6 <validate+0x5a>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	e000      	b.n	80083e8 <validate+0x5c>
 80083e6:	2300      	movs	r3, #0
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	6013      	str	r3, [r2, #0]
	return res;
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
	...

080083f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b088      	sub	sp, #32
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	4613      	mov	r3, r2
 8008404:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800840a:	f107 0310 	add.w	r3, r7, #16
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff fc9c 	bl	8007d4c <get_ldnumber>
 8008414:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	2b00      	cmp	r3, #0
 800841a:	da01      	bge.n	8008420 <f_mount+0x28>
 800841c:	230b      	movs	r3, #11
 800841e:	e02b      	b.n	8008478 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008420:	4a17      	ldr	r2, [pc, #92]	; (8008480 <f_mount+0x88>)
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008428:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d005      	beq.n	800843c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008430:	69b8      	ldr	r0, [r7, #24]
 8008432:	f7fe f8ef 	bl	8006614 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	2200      	movs	r2, #0
 800843a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	490d      	ldr	r1, [pc, #52]	; (8008480 <f_mount+0x88>)
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <f_mount+0x66>
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d001      	beq.n	8008462 <f_mount+0x6a>
 800845e:	2300      	movs	r3, #0
 8008460:	e00a      	b.n	8008478 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008462:	f107 010c 	add.w	r1, r7, #12
 8008466:	f107 0308 	add.w	r3, r7, #8
 800846a:	2200      	movs	r2, #0
 800846c:	4618      	mov	r0, r3
 800846e:	f7ff fd07 	bl	8007e80 <find_volume>
 8008472:	4603      	mov	r3, r0
 8008474:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008476:	7dfb      	ldrb	r3, [r7, #23]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3720      	adds	r7, #32
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	200023f8 	.word	0x200023f8

08008484 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b09a      	sub	sp, #104	; 0x68
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4613      	mov	r3, r2
 8008490:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <f_open+0x18>
 8008498:	2309      	movs	r3, #9
 800849a:	e1bb      	b.n	8008814 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800849c:	79fb      	ldrb	r3, [r7, #7]
 800849e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084a2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80084a4:	79fa      	ldrb	r2, [r7, #7]
 80084a6:	f107 0114 	add.w	r1, r7, #20
 80084aa:	f107 0308 	add.w	r3, r7, #8
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7ff fce6 	bl	8007e80 <find_volume>
 80084b4:	4603      	mov	r3, r0
 80084b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80084ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f040 819f 	bne.w	8008802 <f_open+0x37e>
		dj.obj.fs = fs;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	f107 0318 	add.w	r3, r7, #24
 80084ce:	4611      	mov	r1, r2
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7ff fbc5 	bl	8007c60 <follow_path>
 80084d6:	4603      	mov	r3, r0
 80084d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80084dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d11a      	bne.n	800851a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80084e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80084e8:	b25b      	sxtb	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	da03      	bge.n	80084f6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80084ee:	2306      	movs	r3, #6
 80084f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80084f4:	e011      	b.n	800851a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	f023 0301 	bic.w	r3, r3, #1
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	bf14      	ite	ne
 8008500:	2301      	movne	r3, #1
 8008502:	2300      	moveq	r3, #0
 8008504:	b2db      	uxtb	r3, r3
 8008506:	461a      	mov	r2, r3
 8008508:	f107 0318 	add.w	r3, r7, #24
 800850c:	4611      	mov	r1, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f7fd ff38 	bl	8006384 <chk_lock>
 8008514:	4603      	mov	r3, r0
 8008516:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800851a:	79fb      	ldrb	r3, [r7, #7]
 800851c:	f003 031c 	and.w	r3, r3, #28
 8008520:	2b00      	cmp	r3, #0
 8008522:	d07f      	beq.n	8008624 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008524:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008528:	2b00      	cmp	r3, #0
 800852a:	d017      	beq.n	800855c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800852c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008530:	2b04      	cmp	r3, #4
 8008532:	d10e      	bne.n	8008552 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008534:	f7fd ff82 	bl	800643c <enq_lock>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d006      	beq.n	800854c <f_open+0xc8>
 800853e:	f107 0318 	add.w	r3, r7, #24
 8008542:	4618      	mov	r0, r3
 8008544:	f7ff f8dc 	bl	8007700 <dir_register>
 8008548:	4603      	mov	r3, r0
 800854a:	e000      	b.n	800854e <f_open+0xca>
 800854c:	2312      	movs	r3, #18
 800854e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	f043 0308 	orr.w	r3, r3, #8
 8008558:	71fb      	strb	r3, [r7, #7]
 800855a:	e010      	b.n	800857e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800855c:	7fbb      	ldrb	r3, [r7, #30]
 800855e:	f003 0311 	and.w	r3, r3, #17
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <f_open+0xea>
					res = FR_DENIED;
 8008566:	2307      	movs	r3, #7
 8008568:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800856c:	e007      	b.n	800857e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800856e:	79fb      	ldrb	r3, [r7, #7]
 8008570:	f003 0304 	and.w	r3, r3, #4
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <f_open+0xfa>
 8008578:	2308      	movs	r3, #8
 800857a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800857e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008582:	2b00      	cmp	r3, #0
 8008584:	d168      	bne.n	8008658 <f_open+0x1d4>
 8008586:	79fb      	ldrb	r3, [r7, #7]
 8008588:	f003 0308 	and.w	r3, r3, #8
 800858c:	2b00      	cmp	r3, #0
 800858e:	d063      	beq.n	8008658 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008590:	f7fd fcfc 	bl	8005f8c <get_fattime>
 8008594:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	330e      	adds	r3, #14
 800859a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800859c:	4618      	mov	r0, r3
 800859e:	f7fd fe47 	bl	8006230 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80085a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a4:	3316      	adds	r3, #22
 80085a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fd fe41 	bl	8006230 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	330b      	adds	r3, #11
 80085b2:	2220      	movs	r2, #32
 80085b4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085ba:	4611      	mov	r1, r2
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fe fe17 	bl	80071f0 <ld_clust>
 80085c2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085c8:	2200      	movs	r2, #0
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fe2f 	bl	800722e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	331c      	adds	r3, #28
 80085d4:	2100      	movs	r1, #0
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fd fe2a 	bl	8006230 <st_dword>
					fs->wflag = 1;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	2201      	movs	r2, #1
 80085e0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80085e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d037      	beq.n	8008658 <f_open+0x1d4>
						dw = fs->winsect;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ec:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80085ee:	f107 0318 	add.w	r3, r7, #24
 80085f2:	2200      	movs	r2, #0
 80085f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe fb1f 	bl	8006c3a <remove_chain>
 80085fc:	4603      	mov	r3, r0
 80085fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008602:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008606:	2b00      	cmp	r3, #0
 8008608:	d126      	bne.n	8008658 <f_open+0x1d4>
							res = move_window(fs, dw);
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe f868 	bl	80066e4 <move_window>
 8008614:	4603      	mov	r3, r0
 8008616:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800861e:	3a01      	subs	r2, #1
 8008620:	615a      	str	r2, [r3, #20]
 8008622:	e019      	b.n	8008658 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008624:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008628:	2b00      	cmp	r3, #0
 800862a:	d115      	bne.n	8008658 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800862c:	7fbb      	ldrb	r3, [r7, #30]
 800862e:	f003 0310 	and.w	r3, r3, #16
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008636:	2304      	movs	r3, #4
 8008638:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800863c:	e00c      	b.n	8008658 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b00      	cmp	r3, #0
 8008646:	d007      	beq.n	8008658 <f_open+0x1d4>
 8008648:	7fbb      	ldrb	r3, [r7, #30]
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <f_open+0x1d4>
						res = FR_DENIED;
 8008652:	2307      	movs	r3, #7
 8008654:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008658:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800865c:	2b00      	cmp	r3, #0
 800865e:	d128      	bne.n	80086b2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008660:	79fb      	ldrb	r3, [r7, #7]
 8008662:	f003 0308 	and.w	r3, r3, #8
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800866a:	79fb      	ldrb	r3, [r7, #7]
 800866c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008670:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800867a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008680:	79fb      	ldrb	r3, [r7, #7]
 8008682:	f023 0301 	bic.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	bf14      	ite	ne
 800868a:	2301      	movne	r3, #1
 800868c:	2300      	moveq	r3, #0
 800868e:	b2db      	uxtb	r3, r3
 8008690:	461a      	mov	r2, r3
 8008692:	f107 0318 	add.w	r3, r7, #24
 8008696:	4611      	mov	r1, r2
 8008698:	4618      	mov	r0, r3
 800869a:	f7fd fef1 	bl	8006480 <inc_lock>
 800869e:	4602      	mov	r2, r0
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d102      	bne.n	80086b2 <f_open+0x22e>
 80086ac:	2302      	movs	r3, #2
 80086ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80086b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f040 80a3 	bne.w	8008802 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086c0:	4611      	mov	r1, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fe fd94 	bl	80071f0 <ld_clust>
 80086c8:	4602      	mov	r2, r0
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80086ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d0:	331c      	adds	r3, #28
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fd fd6e 	bl	80061b4 <ld_dword>
 80086d8:	4602      	mov	r2, r0
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	88da      	ldrh	r2, [r3, #6]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	79fa      	ldrb	r2, [r7, #7]
 80086f6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3330      	adds	r3, #48	; 0x30
 800870e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008712:	2100      	movs	r1, #0
 8008714:	4618      	mov	r0, r3
 8008716:	f7fd fdd8 	bl	80062ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800871a:	79fb      	ldrb	r3, [r7, #7]
 800871c:	f003 0320 	and.w	r3, r3, #32
 8008720:	2b00      	cmp	r3, #0
 8008722:	d06e      	beq.n	8008802 <f_open+0x37e>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d06a      	beq.n	8008802 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	68da      	ldr	r2, [r3, #12]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	895b      	ldrh	r3, [r3, #10]
 8008738:	461a      	mov	r2, r3
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	899b      	ldrh	r3, [r3, #12]
 800873e:	fb02 f303 	mul.w	r3, r2, r3
 8008742:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008750:	e016      	b.n	8008780 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008756:	4618      	mov	r0, r3
 8008758:	f7fe f881 	bl	800685e <get_fat>
 800875c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800875e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008760:	2b01      	cmp	r3, #1
 8008762:	d802      	bhi.n	800876a <f_open+0x2e6>
 8008764:	2302      	movs	r3, #2
 8008766:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800876a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800876c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008770:	d102      	bne.n	8008778 <f_open+0x2f4>
 8008772:	2301      	movs	r3, #1
 8008774:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008778:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800877a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008780:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008784:	2b00      	cmp	r3, #0
 8008786:	d103      	bne.n	8008790 <f_open+0x30c>
 8008788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800878a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800878c:	429a      	cmp	r2, r3
 800878e:	d8e0      	bhi.n	8008752 <f_open+0x2ce>
				}
				fp->clust = clst;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008794:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008796:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800879a:	2b00      	cmp	r3, #0
 800879c:	d131      	bne.n	8008802 <f_open+0x37e>
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	899b      	ldrh	r3, [r3, #12]
 80087a2:	461a      	mov	r2, r3
 80087a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80087aa:	fb01 f202 	mul.w	r2, r1, r2
 80087ae:	1a9b      	subs	r3, r3, r2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d026      	beq.n	8008802 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fe f831 	bl	8006820 <clust2sect>
 80087be:	64f8      	str	r0, [r7, #76]	; 0x4c
 80087c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d103      	bne.n	80087ce <f_open+0x34a>
						res = FR_INT_ERR;
 80087c6:	2302      	movs	r3, #2
 80087c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80087cc:	e019      	b.n	8008802 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	899b      	ldrh	r3, [r3, #12]
 80087d2:	461a      	mov	r2, r3
 80087d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80087da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087dc:	441a      	add	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	7858      	ldrb	r0, [r3, #1]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6a1a      	ldr	r2, [r3, #32]
 80087f0:	2301      	movs	r3, #1
 80087f2:	f7fd fc69 	bl	80060c8 <disk_read>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <f_open+0x37e>
 80087fc:	2301      	movs	r3, #1
 80087fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008802:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008806:	2b00      	cmp	r3, #0
 8008808:	d002      	beq.n	8008810 <f_open+0x38c>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008810:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008814:	4618      	mov	r0, r3
 8008816:	3768      	adds	r7, #104	; 0x68
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08e      	sub	sp, #56	; 0x38
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
 8008828:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2200      	movs	r2, #0
 8008832:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f107 0214 	add.w	r2, r7, #20
 800883a:	4611      	mov	r1, r2
 800883c:	4618      	mov	r0, r3
 800883e:	f7ff fda5 	bl	800838c <validate>
 8008842:	4603      	mov	r3, r0
 8008844:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008848:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800884c:	2b00      	cmp	r3, #0
 800884e:	d107      	bne.n	8008860 <f_read+0x44>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	7d5b      	ldrb	r3, [r3, #21]
 8008854:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008858:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <f_read+0x4a>
 8008860:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008864:	e135      	b.n	8008ad2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	7d1b      	ldrb	r3, [r3, #20]
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <f_read+0x5a>
 8008872:	2307      	movs	r3, #7
 8008874:	e12d      	b.n	8008ad2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	429a      	cmp	r2, r3
 8008888:	f240 811e 	bls.w	8008ac8 <f_read+0x2ac>
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008890:	e11a      	b.n	8008ac8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	8992      	ldrh	r2, [r2, #12]
 800889a:	fbb3 f1f2 	udiv	r1, r3, r2
 800889e:	fb01 f202 	mul.w	r2, r1, r2
 80088a2:	1a9b      	subs	r3, r3, r2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f040 80d5 	bne.w	8008a54 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	8992      	ldrh	r2, [r2, #12]
 80088b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	8952      	ldrh	r2, [r2, #10]
 80088ba:	3a01      	subs	r2, #1
 80088bc:	4013      	ands	r3, r2
 80088be:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d12f      	bne.n	8008926 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d103      	bne.n	80088d6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	633b      	str	r3, [r7, #48]	; 0x30
 80088d4:	e013      	b.n	80088fe <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d007      	beq.n	80088ee <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	4619      	mov	r1, r3
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f7fe faa5 	bl	8006e34 <clmt_clust>
 80088ea:	6338      	str	r0, [r7, #48]	; 0x30
 80088ec:	e007      	b.n	80088fe <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	69db      	ldr	r3, [r3, #28]
 80088f4:	4619      	mov	r1, r3
 80088f6:	4610      	mov	r0, r2
 80088f8:	f7fd ffb1 	bl	800685e <get_fat>
 80088fc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	2b01      	cmp	r3, #1
 8008902:	d804      	bhi.n	800890e <f_read+0xf2>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2202      	movs	r2, #2
 8008908:	755a      	strb	r2, [r3, #21]
 800890a:	2302      	movs	r3, #2
 800890c:	e0e1      	b.n	8008ad2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008914:	d104      	bne.n	8008920 <f_read+0x104>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2201      	movs	r2, #1
 800891a:	755a      	strb	r2, [r3, #21]
 800891c:	2301      	movs	r3, #1
 800891e:	e0d8      	b.n	8008ad2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008924:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	4619      	mov	r1, r3
 800892e:	4610      	mov	r0, r2
 8008930:	f7fd ff76 	bl	8006820 <clust2sect>
 8008934:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d104      	bne.n	8008946 <f_read+0x12a>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2202      	movs	r2, #2
 8008940:	755a      	strb	r2, [r3, #21]
 8008942:	2302      	movs	r3, #2
 8008944:	e0c5      	b.n	8008ad2 <f_read+0x2b6>
			sect += csect;
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	4413      	add	r3, r2
 800894c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	899b      	ldrh	r3, [r3, #12]
 8008952:	461a      	mov	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	fbb3 f3f2 	udiv	r3, r3, r2
 800895a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	2b00      	cmp	r3, #0
 8008960:	d041      	beq.n	80089e6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008962:	69fa      	ldr	r2, [r7, #28]
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	4413      	add	r3, r2
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	8952      	ldrh	r2, [r2, #10]
 800896c:	4293      	cmp	r3, r2
 800896e:	d905      	bls.n	800897c <f_read+0x160>
					cc = fs->csize - csect;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	895b      	ldrh	r3, [r3, #10]
 8008974:	461a      	mov	r2, r3
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	7858      	ldrb	r0, [r3, #1]
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008986:	f7fd fb9f 	bl	80060c8 <disk_read>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d004      	beq.n	800899a <f_read+0x17e>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2201      	movs	r2, #1
 8008994:	755a      	strb	r2, [r3, #21]
 8008996:	2301      	movs	r3, #1
 8008998:	e09b      	b.n	8008ad2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	7d1b      	ldrb	r3, [r3, #20]
 800899e:	b25b      	sxtb	r3, r3
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	da18      	bge.n	80089d6 <f_read+0x1ba>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6a1a      	ldr	r2, [r3, #32]
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d911      	bls.n	80089d6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6a1a      	ldr	r2, [r3, #32]
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	8992      	ldrh	r2, [r2, #12]
 80089be:	fb02 f303 	mul.w	r3, r2, r3
 80089c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c4:	18d0      	adds	r0, r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	899b      	ldrh	r3, [r3, #12]
 80089d0:	461a      	mov	r2, r3
 80089d2:	f7fd fc59 	bl	8006288 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	899b      	ldrh	r3, [r3, #12]
 80089da:	461a      	mov	r2, r3
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	fb02 f303 	mul.w	r3, r2, r3
 80089e2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80089e4:	e05c      	b.n	8008aa0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d02e      	beq.n	8008a4e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	7d1b      	ldrb	r3, [r3, #20]
 80089f4:	b25b      	sxtb	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	da18      	bge.n	8008a2c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	7858      	ldrb	r0, [r3, #1]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a1a      	ldr	r2, [r3, #32]
 8008a08:	2301      	movs	r3, #1
 8008a0a:	f7fd fb7d 	bl	8006108 <disk_write>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d004      	beq.n	8008a1e <f_read+0x202>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2201      	movs	r2, #1
 8008a18:	755a      	strb	r2, [r3, #21]
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e059      	b.n	8008ad2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	7d1b      	ldrb	r3, [r3, #20]
 8008a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	7858      	ldrb	r0, [r3, #1]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a36:	2301      	movs	r3, #1
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	f7fd fb45 	bl	80060c8 <disk_read>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d004      	beq.n	8008a4e <f_read+0x232>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2201      	movs	r2, #1
 8008a48:	755a      	strb	r2, [r3, #21]
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e041      	b.n	8008ad2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	899b      	ldrh	r3, [r3, #12]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	8992      	ldrh	r2, [r2, #12]
 8008a62:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a66:	fb01 f202 	mul.w	r2, r1, r2
 8008a6a:	1a9b      	subs	r3, r3, r2
 8008a6c:	1ac3      	subs	r3, r0, r3
 8008a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d901      	bls.n	8008a7c <f_read+0x260>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	8992      	ldrh	r2, [r2, #12]
 8008a8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a8e:	fb00 f202 	mul.w	r2, r0, r2
 8008a92:	1a9b      	subs	r3, r3, r2
 8008a94:	440b      	add	r3, r1
 8008a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a9c:	f7fd fbf4 	bl	8006288 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa4:	4413      	add	r3, r2
 8008aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	699a      	ldr	r2, [r3, #24]
 8008aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aae:	441a      	add	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	619a      	str	r2, [r3, #24]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aba:	441a      	add	r2, r3
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f47f aee1 	bne.w	8008892 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3738      	adds	r7, #56	; 0x38
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b08c      	sub	sp, #48	; 0x30
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	607a      	str	r2, [r7, #4]
 8008ae6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2200      	movs	r2, #0
 8008af0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f107 0210 	add.w	r2, r7, #16
 8008af8:	4611      	mov	r1, r2
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7ff fc46 	bl	800838c <validate>
 8008b00:	4603      	mov	r3, r0
 8008b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d107      	bne.n	8008b1e <f_write+0x44>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	7d5b      	ldrb	r3, [r3, #21]
 8008b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d002      	beq.n	8008b24 <f_write+0x4a>
 8008b1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b22:	e16a      	b.n	8008dfa <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	7d1b      	ldrb	r3, [r3, #20]
 8008b28:	f003 0302 	and.w	r3, r3, #2
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <f_write+0x5a>
 8008b30:	2307      	movs	r3, #7
 8008b32:	e162      	b.n	8008dfa <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	699a      	ldr	r2, [r3, #24]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	441a      	add	r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	f080 814c 	bcs.w	8008dde <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	43db      	mvns	r3, r3
 8008b4c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008b4e:	e146      	b.n	8008dde <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	8992      	ldrh	r2, [r2, #12]
 8008b58:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b5c:	fb01 f202 	mul.w	r2, r1, r2
 8008b60:	1a9b      	subs	r3, r3, r2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f040 80f1 	bne.w	8008d4a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	8992      	ldrh	r2, [r2, #12]
 8008b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	8952      	ldrh	r2, [r2, #10]
 8008b78:	3a01      	subs	r2, #1
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d143      	bne.n	8008c0c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10c      	bne.n	8008ba6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d11a      	bne.n	8008bce <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe f8b1 	bl	8006d04 <create_chain>
 8008ba2:	62b8      	str	r0, [r7, #40]	; 0x28
 8008ba4:	e013      	b.n	8008bce <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d007      	beq.n	8008bbe <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f7fe f93d 	bl	8006e34 <clmt_clust>
 8008bba:	62b8      	str	r0, [r7, #40]	; 0x28
 8008bbc:	e007      	b.n	8008bce <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	f7fe f89c 	bl	8006d04 <create_chain>
 8008bcc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 8109 	beq.w	8008de8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d104      	bne.n	8008be6 <f_write+0x10c>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2202      	movs	r2, #2
 8008be0:	755a      	strb	r2, [r3, #21]
 8008be2:	2302      	movs	r3, #2
 8008be4:	e109      	b.n	8008dfa <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bec:	d104      	bne.n	8008bf8 <f_write+0x11e>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	755a      	strb	r2, [r3, #21]
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e100      	b.n	8008dfa <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bfc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d102      	bne.n	8008c0c <f_write+0x132>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c0a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	7d1b      	ldrb	r3, [r3, #20]
 8008c10:	b25b      	sxtb	r3, r3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	da18      	bge.n	8008c48 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	7858      	ldrb	r0, [r3, #1]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6a1a      	ldr	r2, [r3, #32]
 8008c24:	2301      	movs	r3, #1
 8008c26:	f7fd fa6f 	bl	8006108 <disk_write>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d004      	beq.n	8008c3a <f_write+0x160>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2201      	movs	r2, #1
 8008c34:	755a      	strb	r2, [r3, #21]
 8008c36:	2301      	movs	r3, #1
 8008c38:	e0df      	b.n	8008dfa <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	7d1b      	ldrb	r3, [r3, #20]
 8008c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	4610      	mov	r0, r2
 8008c52:	f7fd fde5 	bl	8006820 <clust2sect>
 8008c56:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d104      	bne.n	8008c68 <f_write+0x18e>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2202      	movs	r2, #2
 8008c62:	755a      	strb	r2, [r3, #21]
 8008c64:	2302      	movs	r3, #2
 8008c66:	e0c8      	b.n	8008dfa <f_write+0x320>
			sect += csect;
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	899b      	ldrh	r3, [r3, #12]
 8008c74:	461a      	mov	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c7c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d043      	beq.n	8008d0c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	4413      	add	r3, r2
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	8952      	ldrh	r2, [r2, #10]
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d905      	bls.n	8008c9e <f_write+0x1c4>
					cc = fs->csize - csect;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	895b      	ldrh	r3, [r3, #10]
 8008c96:	461a      	mov	r2, r3
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	7858      	ldrb	r0, [r3, #1]
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	69f9      	ldr	r1, [r7, #28]
 8008ca8:	f7fd fa2e 	bl	8006108 <disk_write>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d004      	beq.n	8008cbc <f_write+0x1e2>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	755a      	strb	r2, [r3, #21]
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e09e      	b.n	8008dfa <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6a1a      	ldr	r2, [r3, #32]
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	6a3a      	ldr	r2, [r7, #32]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d918      	bls.n	8008cfc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a1a      	ldr	r2, [r3, #32]
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	8992      	ldrh	r2, [r2, #12]
 8008cdc:	fb02 f303 	mul.w	r3, r2, r3
 8008ce0:	69fa      	ldr	r2, [r7, #28]
 8008ce2:	18d1      	adds	r1, r2, r3
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	899b      	ldrh	r3, [r3, #12]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	f7fd facd 	bl	8006288 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	7d1b      	ldrb	r3, [r3, #20]
 8008cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	899b      	ldrh	r3, [r3, #12]
 8008d00:	461a      	mov	r2, r3
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	fb02 f303 	mul.w	r3, r2, r3
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008d0a:	e04b      	b.n	8008da4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6a1b      	ldr	r3, [r3, #32]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d016      	beq.n	8008d44 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	699a      	ldr	r2, [r3, #24]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d210      	bcs.n	8008d44 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	7858      	ldrb	r0, [r3, #1]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	f7fd f9ca 	bl	80060c8 <disk_read>
 8008d34:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d004      	beq.n	8008d44 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	755a      	strb	r2, [r3, #21]
 8008d40:	2301      	movs	r3, #1
 8008d42:	e05a      	b.n	8008dfa <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	899b      	ldrh	r3, [r3, #12]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	8992      	ldrh	r2, [r2, #12]
 8008d58:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d5c:	fb01 f202 	mul.w	r2, r1, r2
 8008d60:	1a9b      	subs	r3, r3, r2
 8008d62:	1ac3      	subs	r3, r0, r3
 8008d64:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d901      	bls.n	8008d72 <f_write+0x298>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	8992      	ldrh	r2, [r2, #12]
 8008d80:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d84:	fb00 f202 	mul.w	r2, r0, r2
 8008d88:	1a9b      	subs	r3, r3, r2
 8008d8a:	440b      	add	r3, r1
 8008d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d8e:	69f9      	ldr	r1, [r7, #28]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7fd fa79 	bl	8006288 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	7d1b      	ldrb	r3, [r3, #20]
 8008d9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da8:	4413      	add	r3, r2
 8008daa:	61fb      	str	r3, [r7, #28]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	699a      	ldr	r2, [r3, #24]
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	441a      	add	r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	619a      	str	r2, [r3, #24]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	68da      	ldr	r2, [r3, #12]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	bf38      	it	cc
 8008dc4:	461a      	movcc	r2, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	60da      	str	r2, [r3, #12]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	441a      	add	r2, r3
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	601a      	str	r2, [r3, #0]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f47f aeb5 	bne.w	8008b50 <f_write+0x76>
 8008de6:	e000      	b.n	8008dea <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008de8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	7d1b      	ldrb	r3, [r3, #20]
 8008dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008df2:	b2da      	uxtb	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3730      	adds	r7, #48	; 0x30
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b086      	sub	sp, #24
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f107 0208 	add.w	r2, r7, #8
 8008e10:	4611      	mov	r1, r2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff faba 	bl	800838c <validate>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d168      	bne.n	8008ef4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	7d1b      	ldrb	r3, [r3, #20]
 8008e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d062      	beq.n	8008ef4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	7d1b      	ldrb	r3, [r3, #20]
 8008e32:	b25b      	sxtb	r3, r3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	da15      	bge.n	8008e64 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	7858      	ldrb	r0, [r3, #1]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1a      	ldr	r2, [r3, #32]
 8008e46:	2301      	movs	r3, #1
 8008e48:	f7fd f95e 	bl	8006108 <disk_write>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <f_sync+0x54>
 8008e52:	2301      	movs	r3, #1
 8008e54:	e04f      	b.n	8008ef6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	7d1b      	ldrb	r3, [r3, #20]
 8008e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008e64:	f7fd f892 	bl	8005f8c <get_fattime>
 8008e68:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	4619      	mov	r1, r3
 8008e72:	4610      	mov	r0, r2
 8008e74:	f7fd fc36 	bl	80066e4 <move_window>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d138      	bne.n	8008ef4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e86:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	330b      	adds	r3, #11
 8008e8c:	781a      	ldrb	r2, [r3, #0]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	330b      	adds	r3, #11
 8008e92:	f042 0220 	orr.w	r2, r2, #32
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6818      	ldr	r0, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	68f9      	ldr	r1, [r7, #12]
 8008ea6:	f7fe f9c2 	bl	800722e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f103 021c 	add.w	r2, r3, #28
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	f7fd f9ba 	bl	8006230 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3316      	adds	r3, #22
 8008ec0:	6939      	ldr	r1, [r7, #16]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fd f9b4 	bl	8006230 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3312      	adds	r3, #18
 8008ecc:	2100      	movs	r1, #0
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fd f993 	bl	80061fa <st_word>
					fs->wflag = 1;
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fd fc2f 	bl	8006740 <sync_fs>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	7d1b      	ldrb	r3, [r3, #20]
 8008eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff ff7b 	bl	8008e02 <f_sync>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d118      	bne.n	8008f48 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f107 0208 	add.w	r2, r7, #8
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7ff fa34 	bl	800838c <validate>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10c      	bne.n	8008f48 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fd fb32 	bl	800659c <dec_lock>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d102      	bne.n	8008f48 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b092      	sub	sp, #72	; 0x48
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	60f8      	str	r0, [r7, #12]
 8008f5a:	60b9      	str	r1, [r7, #8]
 8008f5c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008f5e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008f62:	f107 030c 	add.w	r3, r7, #12
 8008f66:	2200      	movs	r2, #0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe ff89 	bl	8007e80 <find_volume>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008f74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f040 8099 	bne.w	80090b0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	699a      	ldr	r2, [r3, #24]
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8a:	69db      	ldr	r3, [r3, #28]
 8008f8c:	3b02      	subs	r3, #2
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d804      	bhi.n	8008f9c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	699a      	ldr	r2, [r3, #24]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	e089      	b.n	80090b0 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d128      	bne.n	8008ffa <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008fa8:	2302      	movs	r3, #2
 8008faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fae:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008fb0:	f107 0314 	add.w	r3, r7, #20
 8008fb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fd fc51 	bl	800685e <get_fat>
 8008fbc:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc4:	d103      	bne.n	8008fce <f_getfree+0x7c>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008fcc:	e063      	b.n	8009096 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d103      	bne.n	8008fdc <f_getfree+0x8a>
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008fda:	e05c      	b.n	8009096 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <f_getfree+0x96>
 8008fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fea:	3301      	adds	r3, #1
 8008fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d3db      	bcc.n	8008fb0 <f_getfree+0x5e>
 8008ff8:	e04d      	b.n	8009096 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009004:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	637b      	str	r3, [r7, #52]	; 0x34
 800900a:	2300      	movs	r3, #0
 800900c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800900e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009010:	2b00      	cmp	r3, #0
 8009012:	d113      	bne.n	800903c <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009018:	1c5a      	adds	r2, r3, #1
 800901a:	63ba      	str	r2, [r7, #56]	; 0x38
 800901c:	4619      	mov	r1, r3
 800901e:	f7fd fb61 	bl	80066e4 <move_window>
 8009022:	4603      	mov	r3, r0
 8009024:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8009028:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800902c:	2b00      	cmp	r3, #0
 800902e:	d131      	bne.n	8009094 <f_getfree+0x142>
							p = fs->win;
 8009030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009032:	3338      	adds	r3, #56	; 0x38
 8009034:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009038:	899b      	ldrh	r3, [r3, #12]
 800903a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	2b02      	cmp	r3, #2
 8009042:	d10f      	bne.n	8009064 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009046:	f7fd f89d 	bl	8006184 <ld_word>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d102      	bne.n	8009056 <f_getfree+0x104>
 8009050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009052:	3301      	adds	r3, #1
 8009054:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	3302      	adds	r3, #2
 800905a:	633b      	str	r3, [r7, #48]	; 0x30
 800905c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905e:	3b02      	subs	r3, #2
 8009060:	637b      	str	r3, [r7, #52]	; 0x34
 8009062:	e010      	b.n	8009086 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009066:	f7fd f8a5 	bl	80061b4 <ld_dword>
 800906a:	4603      	mov	r3, r0
 800906c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d102      	bne.n	800907a <f_getfree+0x128>
 8009074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009076:	3301      	adds	r3, #1
 8009078:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	3304      	adds	r3, #4
 800907e:	633b      	str	r3, [r7, #48]	; 0x30
 8009080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009082:	3b04      	subs	r3, #4
 8009084:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009088:	3b01      	subs	r3, #1
 800908a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800908c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1bd      	bne.n	800900e <f_getfree+0xbc>
 8009092:	e000      	b.n	8009096 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009094:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800909a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090a0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80090a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a4:	791a      	ldrb	r2, [r3, #4]
 80090a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a8:	f042 0201 	orr.w	r2, r2, #1
 80090ac:	b2d2      	uxtb	r2, r2
 80090ae:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80090b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3748      	adds	r7, #72	; 0x48
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
	int n = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80090d0:	e01b      	b.n	800910a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80090d2:	f107 0310 	add.w	r3, r7, #16
 80090d6:	f107 0114 	add.w	r1, r7, #20
 80090da:	2201      	movs	r2, #1
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff fb9d 	bl	800881c <f_read>
		if (rc != 1) break;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d116      	bne.n	8009116 <f_gets+0x5a>
		c = s[0];
 80090e8:	7d3b      	ldrb	r3, [r7, #20]
 80090ea:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80090ec:	7dfb      	ldrb	r3, [r7, #23]
 80090ee:	2b0d      	cmp	r3, #13
 80090f0:	d100      	bne.n	80090f4 <f_gets+0x38>
 80090f2:	e00a      	b.n	800910a <f_gets+0x4e>
		*p++ = c;
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	1c5a      	adds	r2, r3, #1
 80090f8:	61ba      	str	r2, [r7, #24]
 80090fa:	7dfa      	ldrb	r2, [r7, #23]
 80090fc:	701a      	strb	r2, [r3, #0]
		n++;
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	3301      	adds	r3, #1
 8009102:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009104:	7dfb      	ldrb	r3, [r7, #23]
 8009106:	2b0a      	cmp	r3, #10
 8009108:	d007      	beq.n	800911a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	3b01      	subs	r3, #1
 800910e:	69fa      	ldr	r2, [r7, #28]
 8009110:	429a      	cmp	r2, r3
 8009112:	dbde      	blt.n	80090d2 <f_gets+0x16>
 8009114:	e002      	b.n	800911c <f_gets+0x60>
		if (rc != 1) break;
 8009116:	bf00      	nop
 8009118:	e000      	b.n	800911c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800911a:	bf00      	nop
	}
	*p = 0;
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	2200      	movs	r2, #0
 8009120:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <f_gets+0x70>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	e000      	b.n	800912e <f_gets+0x72>
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3720      	adds	r7, #32
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009142:	78fb      	ldrb	r3, [r7, #3]
 8009144:	2b0a      	cmp	r3, #10
 8009146:	d103      	bne.n	8009150 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009148:	210d      	movs	r1, #13
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7ff fff3 	bl	8009136 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2b00      	cmp	r3, #0
 800915a:	db25      	blt.n	80091a8 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	1c5a      	adds	r2, r3, #1
 8009160:	60fa      	str	r2, [r7, #12]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	4413      	add	r3, r2
 8009166:	78fa      	ldrb	r2, [r7, #3]
 8009168:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2b3c      	cmp	r3, #60	; 0x3c
 800916e:	dd12      	ble.n	8009196 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6818      	ldr	r0, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f103 010c 	add.w	r1, r3, #12
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	f107 0308 	add.w	r3, r7, #8
 8009180:	f7ff fcab 	bl	8008ada <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	429a      	cmp	r2, r3
 800918a:	d101      	bne.n	8009190 <putc_bfd+0x5a>
 800918c:	2300      	movs	r3, #0
 800918e:	e001      	b.n	8009194 <putc_bfd+0x5e>
 8009190:	f04f 33ff 	mov.w	r3, #4294967295
 8009194:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	609a      	str	r2, [r3, #8]
 80091a6:	e000      	b.n	80091aa <putc_bfd+0x74>
	if (i < 0) return;
 80091a8:	bf00      	nop
}
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	db16      	blt.n	80091ee <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6818      	ldr	r0, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f103 010c 	add.w	r1, r3, #12
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	461a      	mov	r2, r3
 80091d0:	f107 030c 	add.w	r3, r7, #12
 80091d4:	f7ff fc81 	bl	8008ada <f_write>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d107      	bne.n	80091ee <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d102      	bne.n	80091ee <putc_flush+0x3e>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	e001      	b.n	80091f2 <putc_flush+0x42>
	return EOF;
 80091ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b083      	sub	sp, #12
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	605a      	str	r2, [r3, #4]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	609a      	str	r2, [r3, #8]
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b096      	sub	sp, #88	; 0x58
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800922e:	f107 030c 	add.w	r3, r7, #12
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	4618      	mov	r0, r3
 8009236:	f7ff ffe0 	bl	80091fa <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800923a:	e009      	b.n	8009250 <f_puts+0x2c>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	607a      	str	r2, [r7, #4]
 8009242:	781a      	ldrb	r2, [r3, #0]
 8009244:	f107 030c 	add.w	r3, r7, #12
 8009248:	4611      	mov	r1, r2
 800924a:	4618      	mov	r0, r3
 800924c:	f7ff ff73 	bl	8009136 <putc_bfd>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1f1      	bne.n	800923c <f_puts+0x18>
	return putc_flush(&pb);
 8009258:	f107 030c 	add.w	r3, r7, #12
 800925c:	4618      	mov	r0, r3
 800925e:	f7ff ffa7 	bl	80091b0 <putc_flush>
 8009262:	4603      	mov	r3, r0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3758      	adds	r7, #88	; 0x58
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800926c:	b480      	push	{r7}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	4613      	mov	r3, r2
 8009278:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800927a:	2301      	movs	r3, #1
 800927c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800927e:	2300      	movs	r3, #0
 8009280:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009282:	4b1f      	ldr	r3, [pc, #124]	; (8009300 <FATFS_LinkDriverEx+0x94>)
 8009284:	7a5b      	ldrb	r3, [r3, #9]
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d131      	bne.n	80092f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800928c:	4b1c      	ldr	r3, [pc, #112]	; (8009300 <FATFS_LinkDriverEx+0x94>)
 800928e:	7a5b      	ldrb	r3, [r3, #9]
 8009290:	b2db      	uxtb	r3, r3
 8009292:	461a      	mov	r2, r3
 8009294:	4b1a      	ldr	r3, [pc, #104]	; (8009300 <FATFS_LinkDriverEx+0x94>)
 8009296:	2100      	movs	r1, #0
 8009298:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800929a:	4b19      	ldr	r3, [pc, #100]	; (8009300 <FATFS_LinkDriverEx+0x94>)
 800929c:	7a5b      	ldrb	r3, [r3, #9]
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	4a17      	ldr	r2, [pc, #92]	; (8009300 <FATFS_LinkDriverEx+0x94>)
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80092aa:	4b15      	ldr	r3, [pc, #84]	; (8009300 <FATFS_LinkDriverEx+0x94>)
 80092ac:	7a5b      	ldrb	r3, [r3, #9]
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	461a      	mov	r2, r3
 80092b2:	4b13      	ldr	r3, [pc, #76]	; (8009300 <FATFS_LinkDriverEx+0x94>)
 80092b4:	4413      	add	r3, r2
 80092b6:	79fa      	ldrb	r2, [r7, #7]
 80092b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80092ba:	4b11      	ldr	r3, [pc, #68]	; (8009300 <FATFS_LinkDriverEx+0x94>)
 80092bc:	7a5b      	ldrb	r3, [r3, #9]
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	b2d1      	uxtb	r1, r2
 80092c4:	4a0e      	ldr	r2, [pc, #56]	; (8009300 <FATFS_LinkDriverEx+0x94>)
 80092c6:	7251      	strb	r1, [r2, #9]
 80092c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80092ca:	7dbb      	ldrb	r3, [r7, #22]
 80092cc:	3330      	adds	r3, #48	; 0x30
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	3301      	adds	r3, #1
 80092d8:	223a      	movs	r2, #58	; 0x3a
 80092da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	3302      	adds	r3, #2
 80092e0:	222f      	movs	r2, #47	; 0x2f
 80092e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	3303      	adds	r3, #3
 80092e8:	2200      	movs	r2, #0
 80092ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80092f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	371c      	adds	r7, #28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	20002620 	.word	0x20002620

08009304 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800930e:	2200      	movs	r2, #0
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff ffaa 	bl	800926c <FATFS_LinkDriverEx>
 8009318:	4603      	mov	r3, r0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	4603      	mov	r3, r0
 800932c:	6039      	str	r1, [r7, #0]
 800932e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009330:	88fb      	ldrh	r3, [r7, #6]
 8009332:	2b7f      	cmp	r3, #127	; 0x7f
 8009334:	d802      	bhi.n	800933c <ff_convert+0x18>
		c = chr;
 8009336:	88fb      	ldrh	r3, [r7, #6]
 8009338:	81fb      	strh	r3, [r7, #14]
 800933a:	e025      	b.n	8009388 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00b      	beq.n	800935a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009342:	88fb      	ldrh	r3, [r7, #6]
 8009344:	2bff      	cmp	r3, #255	; 0xff
 8009346:	d805      	bhi.n	8009354 <ff_convert+0x30>
 8009348:	88fb      	ldrh	r3, [r7, #6]
 800934a:	3b80      	subs	r3, #128	; 0x80
 800934c:	4a12      	ldr	r2, [pc, #72]	; (8009398 <ff_convert+0x74>)
 800934e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009352:	e000      	b.n	8009356 <ff_convert+0x32>
 8009354:	2300      	movs	r3, #0
 8009356:	81fb      	strh	r3, [r7, #14]
 8009358:	e016      	b.n	8009388 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800935a:	2300      	movs	r3, #0
 800935c:	81fb      	strh	r3, [r7, #14]
 800935e:	e009      	b.n	8009374 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009360:	89fb      	ldrh	r3, [r7, #14]
 8009362:	4a0d      	ldr	r2, [pc, #52]	; (8009398 <ff_convert+0x74>)
 8009364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009368:	88fa      	ldrh	r2, [r7, #6]
 800936a:	429a      	cmp	r2, r3
 800936c:	d006      	beq.n	800937c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800936e:	89fb      	ldrh	r3, [r7, #14]
 8009370:	3301      	adds	r3, #1
 8009372:	81fb      	strh	r3, [r7, #14]
 8009374:	89fb      	ldrh	r3, [r7, #14]
 8009376:	2b7f      	cmp	r3, #127	; 0x7f
 8009378:	d9f2      	bls.n	8009360 <ff_convert+0x3c>
 800937a:	e000      	b.n	800937e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800937c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800937e:	89fb      	ldrh	r3, [r7, #14]
 8009380:	3380      	adds	r3, #128	; 0x80
 8009382:	b29b      	uxth	r3, r3
 8009384:	b2db      	uxtb	r3, r3
 8009386:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009388:	89fb      	ldrh	r3, [r7, #14]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	0800c654 	.word	0x0800c654

0800939c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	4603      	mov	r3, r0
 80093a4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80093a6:	88fb      	ldrh	r3, [r7, #6]
 80093a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ac:	d201      	bcs.n	80093b2 <ff_wtoupper+0x16>
 80093ae:	4b3e      	ldr	r3, [pc, #248]	; (80094a8 <ff_wtoupper+0x10c>)
 80093b0:	e000      	b.n	80093b4 <ff_wtoupper+0x18>
 80093b2:	4b3e      	ldr	r3, [pc, #248]	; (80094ac <ff_wtoupper+0x110>)
 80093b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	1c9a      	adds	r2, r3, #2
 80093ba:	617a      	str	r2, [r7, #20]
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80093c0:	8a7b      	ldrh	r3, [r7, #18]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d068      	beq.n	8009498 <ff_wtoupper+0xfc>
 80093c6:	88fa      	ldrh	r2, [r7, #6]
 80093c8:	8a7b      	ldrh	r3, [r7, #18]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d364      	bcc.n	8009498 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	1c9a      	adds	r2, r3, #2
 80093d2:	617a      	str	r2, [r7, #20]
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	823b      	strh	r3, [r7, #16]
 80093d8:	8a3b      	ldrh	r3, [r7, #16]
 80093da:	0a1b      	lsrs	r3, r3, #8
 80093dc:	81fb      	strh	r3, [r7, #14]
 80093de:	8a3b      	ldrh	r3, [r7, #16]
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80093e4:	88fa      	ldrh	r2, [r7, #6]
 80093e6:	8a79      	ldrh	r1, [r7, #18]
 80093e8:	8a3b      	ldrh	r3, [r7, #16]
 80093ea:	440b      	add	r3, r1
 80093ec:	429a      	cmp	r2, r3
 80093ee:	da49      	bge.n	8009484 <ff_wtoupper+0xe8>
			switch (cmd) {
 80093f0:	89fb      	ldrh	r3, [r7, #14]
 80093f2:	2b08      	cmp	r3, #8
 80093f4:	d84f      	bhi.n	8009496 <ff_wtoupper+0xfa>
 80093f6:	a201      	add	r2, pc, #4	; (adr r2, 80093fc <ff_wtoupper+0x60>)
 80093f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fc:	08009421 	.word	0x08009421
 8009400:	08009433 	.word	0x08009433
 8009404:	08009449 	.word	0x08009449
 8009408:	08009451 	.word	0x08009451
 800940c:	08009459 	.word	0x08009459
 8009410:	08009461 	.word	0x08009461
 8009414:	08009469 	.word	0x08009469
 8009418:	08009471 	.word	0x08009471
 800941c:	08009479 	.word	0x08009479
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009420:	88fa      	ldrh	r2, [r7, #6]
 8009422:	8a7b      	ldrh	r3, [r7, #18]
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	4413      	add	r3, r2
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	80fb      	strh	r3, [r7, #6]
 8009430:	e027      	b.n	8009482 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009432:	88fa      	ldrh	r2, [r7, #6]
 8009434:	8a7b      	ldrh	r3, [r7, #18]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	b29b      	uxth	r3, r3
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	b29b      	uxth	r3, r3
 8009440:	88fa      	ldrh	r2, [r7, #6]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	80fb      	strh	r3, [r7, #6]
 8009446:	e01c      	b.n	8009482 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009448:	88fb      	ldrh	r3, [r7, #6]
 800944a:	3b10      	subs	r3, #16
 800944c:	80fb      	strh	r3, [r7, #6]
 800944e:	e018      	b.n	8009482 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009450:	88fb      	ldrh	r3, [r7, #6]
 8009452:	3b20      	subs	r3, #32
 8009454:	80fb      	strh	r3, [r7, #6]
 8009456:	e014      	b.n	8009482 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009458:	88fb      	ldrh	r3, [r7, #6]
 800945a:	3b30      	subs	r3, #48	; 0x30
 800945c:	80fb      	strh	r3, [r7, #6]
 800945e:	e010      	b.n	8009482 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009460:	88fb      	ldrh	r3, [r7, #6]
 8009462:	3b1a      	subs	r3, #26
 8009464:	80fb      	strh	r3, [r7, #6]
 8009466:	e00c      	b.n	8009482 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009468:	88fb      	ldrh	r3, [r7, #6]
 800946a:	3308      	adds	r3, #8
 800946c:	80fb      	strh	r3, [r7, #6]
 800946e:	e008      	b.n	8009482 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009470:	88fb      	ldrh	r3, [r7, #6]
 8009472:	3b50      	subs	r3, #80	; 0x50
 8009474:	80fb      	strh	r3, [r7, #6]
 8009476:	e004      	b.n	8009482 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009478:	88fb      	ldrh	r3, [r7, #6]
 800947a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800947e:	80fb      	strh	r3, [r7, #6]
 8009480:	bf00      	nop
			}
			break;
 8009482:	e008      	b.n	8009496 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009484:	89fb      	ldrh	r3, [r7, #14]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d195      	bne.n	80093b6 <ff_wtoupper+0x1a>
 800948a:	8a3b      	ldrh	r3, [r7, #16]
 800948c:	005b      	lsls	r3, r3, #1
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	4413      	add	r3, r2
 8009492:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009494:	e78f      	b.n	80093b6 <ff_wtoupper+0x1a>
			break;
 8009496:	bf00      	nop
	}

	return chr;
 8009498:	88fb      	ldrh	r3, [r7, #6]
}
 800949a:	4618      	mov	r0, r3
 800949c:	371c      	adds	r7, #28
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	0800c754 	.word	0x0800c754
 80094ac:	0800c948 	.word	0x0800c948

080094b0 <__cvt>:
 80094b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094b4:	ec55 4b10 	vmov	r4, r5, d0
 80094b8:	2d00      	cmp	r5, #0
 80094ba:	460e      	mov	r6, r1
 80094bc:	4619      	mov	r1, r3
 80094be:	462b      	mov	r3, r5
 80094c0:	bfbb      	ittet	lt
 80094c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80094c6:	461d      	movlt	r5, r3
 80094c8:	2300      	movge	r3, #0
 80094ca:	232d      	movlt	r3, #45	; 0x2d
 80094cc:	700b      	strb	r3, [r1, #0]
 80094ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80094d4:	4691      	mov	r9, r2
 80094d6:	f023 0820 	bic.w	r8, r3, #32
 80094da:	bfbc      	itt	lt
 80094dc:	4622      	movlt	r2, r4
 80094de:	4614      	movlt	r4, r2
 80094e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094e4:	d005      	beq.n	80094f2 <__cvt+0x42>
 80094e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80094ea:	d100      	bne.n	80094ee <__cvt+0x3e>
 80094ec:	3601      	adds	r6, #1
 80094ee:	2102      	movs	r1, #2
 80094f0:	e000      	b.n	80094f4 <__cvt+0x44>
 80094f2:	2103      	movs	r1, #3
 80094f4:	ab03      	add	r3, sp, #12
 80094f6:	9301      	str	r3, [sp, #4]
 80094f8:	ab02      	add	r3, sp, #8
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	ec45 4b10 	vmov	d0, r4, r5
 8009500:	4653      	mov	r3, sl
 8009502:	4632      	mov	r2, r6
 8009504:	f000 ff60 	bl	800a3c8 <_dtoa_r>
 8009508:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800950c:	4607      	mov	r7, r0
 800950e:	d102      	bne.n	8009516 <__cvt+0x66>
 8009510:	f019 0f01 	tst.w	r9, #1
 8009514:	d022      	beq.n	800955c <__cvt+0xac>
 8009516:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800951a:	eb07 0906 	add.w	r9, r7, r6
 800951e:	d110      	bne.n	8009542 <__cvt+0x92>
 8009520:	783b      	ldrb	r3, [r7, #0]
 8009522:	2b30      	cmp	r3, #48	; 0x30
 8009524:	d10a      	bne.n	800953c <__cvt+0x8c>
 8009526:	2200      	movs	r2, #0
 8009528:	2300      	movs	r3, #0
 800952a:	4620      	mov	r0, r4
 800952c:	4629      	mov	r1, r5
 800952e:	f7f7 fae3 	bl	8000af8 <__aeabi_dcmpeq>
 8009532:	b918      	cbnz	r0, 800953c <__cvt+0x8c>
 8009534:	f1c6 0601 	rsb	r6, r6, #1
 8009538:	f8ca 6000 	str.w	r6, [sl]
 800953c:	f8da 3000 	ldr.w	r3, [sl]
 8009540:	4499      	add	r9, r3
 8009542:	2200      	movs	r2, #0
 8009544:	2300      	movs	r3, #0
 8009546:	4620      	mov	r0, r4
 8009548:	4629      	mov	r1, r5
 800954a:	f7f7 fad5 	bl	8000af8 <__aeabi_dcmpeq>
 800954e:	b108      	cbz	r0, 8009554 <__cvt+0xa4>
 8009550:	f8cd 900c 	str.w	r9, [sp, #12]
 8009554:	2230      	movs	r2, #48	; 0x30
 8009556:	9b03      	ldr	r3, [sp, #12]
 8009558:	454b      	cmp	r3, r9
 800955a:	d307      	bcc.n	800956c <__cvt+0xbc>
 800955c:	9b03      	ldr	r3, [sp, #12]
 800955e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009560:	1bdb      	subs	r3, r3, r7
 8009562:	4638      	mov	r0, r7
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	b004      	add	sp, #16
 8009568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956c:	1c59      	adds	r1, r3, #1
 800956e:	9103      	str	r1, [sp, #12]
 8009570:	701a      	strb	r2, [r3, #0]
 8009572:	e7f0      	b.n	8009556 <__cvt+0xa6>

08009574 <__exponent>:
 8009574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009576:	4603      	mov	r3, r0
 8009578:	2900      	cmp	r1, #0
 800957a:	bfb8      	it	lt
 800957c:	4249      	neglt	r1, r1
 800957e:	f803 2b02 	strb.w	r2, [r3], #2
 8009582:	bfb4      	ite	lt
 8009584:	222d      	movlt	r2, #45	; 0x2d
 8009586:	222b      	movge	r2, #43	; 0x2b
 8009588:	2909      	cmp	r1, #9
 800958a:	7042      	strb	r2, [r0, #1]
 800958c:	dd2a      	ble.n	80095e4 <__exponent+0x70>
 800958e:	f10d 0207 	add.w	r2, sp, #7
 8009592:	4617      	mov	r7, r2
 8009594:	260a      	movs	r6, #10
 8009596:	4694      	mov	ip, r2
 8009598:	fb91 f5f6 	sdiv	r5, r1, r6
 800959c:	fb06 1415 	mls	r4, r6, r5, r1
 80095a0:	3430      	adds	r4, #48	; 0x30
 80095a2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80095a6:	460c      	mov	r4, r1
 80095a8:	2c63      	cmp	r4, #99	; 0x63
 80095aa:	f102 32ff 	add.w	r2, r2, #4294967295
 80095ae:	4629      	mov	r1, r5
 80095b0:	dcf1      	bgt.n	8009596 <__exponent+0x22>
 80095b2:	3130      	adds	r1, #48	; 0x30
 80095b4:	f1ac 0402 	sub.w	r4, ip, #2
 80095b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80095bc:	1c41      	adds	r1, r0, #1
 80095be:	4622      	mov	r2, r4
 80095c0:	42ba      	cmp	r2, r7
 80095c2:	d30a      	bcc.n	80095da <__exponent+0x66>
 80095c4:	f10d 0209 	add.w	r2, sp, #9
 80095c8:	eba2 020c 	sub.w	r2, r2, ip
 80095cc:	42bc      	cmp	r4, r7
 80095ce:	bf88      	it	hi
 80095d0:	2200      	movhi	r2, #0
 80095d2:	4413      	add	r3, r2
 80095d4:	1a18      	subs	r0, r3, r0
 80095d6:	b003      	add	sp, #12
 80095d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095da:	f812 5b01 	ldrb.w	r5, [r2], #1
 80095de:	f801 5f01 	strb.w	r5, [r1, #1]!
 80095e2:	e7ed      	b.n	80095c0 <__exponent+0x4c>
 80095e4:	2330      	movs	r3, #48	; 0x30
 80095e6:	3130      	adds	r1, #48	; 0x30
 80095e8:	7083      	strb	r3, [r0, #2]
 80095ea:	70c1      	strb	r1, [r0, #3]
 80095ec:	1d03      	adds	r3, r0, #4
 80095ee:	e7f1      	b.n	80095d4 <__exponent+0x60>

080095f0 <_printf_float>:
 80095f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f4:	ed2d 8b02 	vpush	{d8}
 80095f8:	b08d      	sub	sp, #52	; 0x34
 80095fa:	460c      	mov	r4, r1
 80095fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009600:	4616      	mov	r6, r2
 8009602:	461f      	mov	r7, r3
 8009604:	4605      	mov	r5, r0
 8009606:	f000 fddf 	bl	800a1c8 <_localeconv_r>
 800960a:	f8d0 a000 	ldr.w	sl, [r0]
 800960e:	4650      	mov	r0, sl
 8009610:	f7f6 fe46 	bl	80002a0 <strlen>
 8009614:	2300      	movs	r3, #0
 8009616:	930a      	str	r3, [sp, #40]	; 0x28
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	9305      	str	r3, [sp, #20]
 800961c:	f8d8 3000 	ldr.w	r3, [r8]
 8009620:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009624:	3307      	adds	r3, #7
 8009626:	f023 0307 	bic.w	r3, r3, #7
 800962a:	f103 0208 	add.w	r2, r3, #8
 800962e:	f8c8 2000 	str.w	r2, [r8]
 8009632:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009636:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800963a:	9307      	str	r3, [sp, #28]
 800963c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009640:	ee08 0a10 	vmov	s16, r0
 8009644:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009648:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800964c:	4b9e      	ldr	r3, [pc, #632]	; (80098c8 <_printf_float+0x2d8>)
 800964e:	f04f 32ff 	mov.w	r2, #4294967295
 8009652:	f7f7 fa83 	bl	8000b5c <__aeabi_dcmpun>
 8009656:	bb88      	cbnz	r0, 80096bc <_printf_float+0xcc>
 8009658:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800965c:	4b9a      	ldr	r3, [pc, #616]	; (80098c8 <_printf_float+0x2d8>)
 800965e:	f04f 32ff 	mov.w	r2, #4294967295
 8009662:	f7f7 fa5d 	bl	8000b20 <__aeabi_dcmple>
 8009666:	bb48      	cbnz	r0, 80096bc <_printf_float+0xcc>
 8009668:	2200      	movs	r2, #0
 800966a:	2300      	movs	r3, #0
 800966c:	4640      	mov	r0, r8
 800966e:	4649      	mov	r1, r9
 8009670:	f7f7 fa4c 	bl	8000b0c <__aeabi_dcmplt>
 8009674:	b110      	cbz	r0, 800967c <_printf_float+0x8c>
 8009676:	232d      	movs	r3, #45	; 0x2d
 8009678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800967c:	4a93      	ldr	r2, [pc, #588]	; (80098cc <_printf_float+0x2dc>)
 800967e:	4b94      	ldr	r3, [pc, #592]	; (80098d0 <_printf_float+0x2e0>)
 8009680:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009684:	bf94      	ite	ls
 8009686:	4690      	movls	r8, r2
 8009688:	4698      	movhi	r8, r3
 800968a:	2303      	movs	r3, #3
 800968c:	6123      	str	r3, [r4, #16]
 800968e:	9b05      	ldr	r3, [sp, #20]
 8009690:	f023 0304 	bic.w	r3, r3, #4
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	f04f 0900 	mov.w	r9, #0
 800969a:	9700      	str	r7, [sp, #0]
 800969c:	4633      	mov	r3, r6
 800969e:	aa0b      	add	r2, sp, #44	; 0x2c
 80096a0:	4621      	mov	r1, r4
 80096a2:	4628      	mov	r0, r5
 80096a4:	f000 f9da 	bl	8009a5c <_printf_common>
 80096a8:	3001      	adds	r0, #1
 80096aa:	f040 8090 	bne.w	80097ce <_printf_float+0x1de>
 80096ae:	f04f 30ff 	mov.w	r0, #4294967295
 80096b2:	b00d      	add	sp, #52	; 0x34
 80096b4:	ecbd 8b02 	vpop	{d8}
 80096b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096bc:	4642      	mov	r2, r8
 80096be:	464b      	mov	r3, r9
 80096c0:	4640      	mov	r0, r8
 80096c2:	4649      	mov	r1, r9
 80096c4:	f7f7 fa4a 	bl	8000b5c <__aeabi_dcmpun>
 80096c8:	b140      	cbz	r0, 80096dc <_printf_float+0xec>
 80096ca:	464b      	mov	r3, r9
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	bfbc      	itt	lt
 80096d0:	232d      	movlt	r3, #45	; 0x2d
 80096d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80096d6:	4a7f      	ldr	r2, [pc, #508]	; (80098d4 <_printf_float+0x2e4>)
 80096d8:	4b7f      	ldr	r3, [pc, #508]	; (80098d8 <_printf_float+0x2e8>)
 80096da:	e7d1      	b.n	8009680 <_printf_float+0x90>
 80096dc:	6863      	ldr	r3, [r4, #4]
 80096de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80096e2:	9206      	str	r2, [sp, #24]
 80096e4:	1c5a      	adds	r2, r3, #1
 80096e6:	d13f      	bne.n	8009768 <_printf_float+0x178>
 80096e8:	2306      	movs	r3, #6
 80096ea:	6063      	str	r3, [r4, #4]
 80096ec:	9b05      	ldr	r3, [sp, #20]
 80096ee:	6861      	ldr	r1, [r4, #4]
 80096f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80096f4:	2300      	movs	r3, #0
 80096f6:	9303      	str	r3, [sp, #12]
 80096f8:	ab0a      	add	r3, sp, #40	; 0x28
 80096fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80096fe:	ab09      	add	r3, sp, #36	; 0x24
 8009700:	ec49 8b10 	vmov	d0, r8, r9
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	6022      	str	r2, [r4, #0]
 8009708:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800970c:	4628      	mov	r0, r5
 800970e:	f7ff fecf 	bl	80094b0 <__cvt>
 8009712:	9b06      	ldr	r3, [sp, #24]
 8009714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009716:	2b47      	cmp	r3, #71	; 0x47
 8009718:	4680      	mov	r8, r0
 800971a:	d108      	bne.n	800972e <_printf_float+0x13e>
 800971c:	1cc8      	adds	r0, r1, #3
 800971e:	db02      	blt.n	8009726 <_printf_float+0x136>
 8009720:	6863      	ldr	r3, [r4, #4]
 8009722:	4299      	cmp	r1, r3
 8009724:	dd41      	ble.n	80097aa <_printf_float+0x1ba>
 8009726:	f1ab 0302 	sub.w	r3, fp, #2
 800972a:	fa5f fb83 	uxtb.w	fp, r3
 800972e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009732:	d820      	bhi.n	8009776 <_printf_float+0x186>
 8009734:	3901      	subs	r1, #1
 8009736:	465a      	mov	r2, fp
 8009738:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800973c:	9109      	str	r1, [sp, #36]	; 0x24
 800973e:	f7ff ff19 	bl	8009574 <__exponent>
 8009742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009744:	1813      	adds	r3, r2, r0
 8009746:	2a01      	cmp	r2, #1
 8009748:	4681      	mov	r9, r0
 800974a:	6123      	str	r3, [r4, #16]
 800974c:	dc02      	bgt.n	8009754 <_printf_float+0x164>
 800974e:	6822      	ldr	r2, [r4, #0]
 8009750:	07d2      	lsls	r2, r2, #31
 8009752:	d501      	bpl.n	8009758 <_printf_float+0x168>
 8009754:	3301      	adds	r3, #1
 8009756:	6123      	str	r3, [r4, #16]
 8009758:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800975c:	2b00      	cmp	r3, #0
 800975e:	d09c      	beq.n	800969a <_printf_float+0xaa>
 8009760:	232d      	movs	r3, #45	; 0x2d
 8009762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009766:	e798      	b.n	800969a <_printf_float+0xaa>
 8009768:	9a06      	ldr	r2, [sp, #24]
 800976a:	2a47      	cmp	r2, #71	; 0x47
 800976c:	d1be      	bne.n	80096ec <_printf_float+0xfc>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1bc      	bne.n	80096ec <_printf_float+0xfc>
 8009772:	2301      	movs	r3, #1
 8009774:	e7b9      	b.n	80096ea <_printf_float+0xfa>
 8009776:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800977a:	d118      	bne.n	80097ae <_printf_float+0x1be>
 800977c:	2900      	cmp	r1, #0
 800977e:	6863      	ldr	r3, [r4, #4]
 8009780:	dd0b      	ble.n	800979a <_printf_float+0x1aa>
 8009782:	6121      	str	r1, [r4, #16]
 8009784:	b913      	cbnz	r3, 800978c <_printf_float+0x19c>
 8009786:	6822      	ldr	r2, [r4, #0]
 8009788:	07d0      	lsls	r0, r2, #31
 800978a:	d502      	bpl.n	8009792 <_printf_float+0x1a2>
 800978c:	3301      	adds	r3, #1
 800978e:	440b      	add	r3, r1
 8009790:	6123      	str	r3, [r4, #16]
 8009792:	65a1      	str	r1, [r4, #88]	; 0x58
 8009794:	f04f 0900 	mov.w	r9, #0
 8009798:	e7de      	b.n	8009758 <_printf_float+0x168>
 800979a:	b913      	cbnz	r3, 80097a2 <_printf_float+0x1b2>
 800979c:	6822      	ldr	r2, [r4, #0]
 800979e:	07d2      	lsls	r2, r2, #31
 80097a0:	d501      	bpl.n	80097a6 <_printf_float+0x1b6>
 80097a2:	3302      	adds	r3, #2
 80097a4:	e7f4      	b.n	8009790 <_printf_float+0x1a0>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e7f2      	b.n	8009790 <_printf_float+0x1a0>
 80097aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80097ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097b0:	4299      	cmp	r1, r3
 80097b2:	db05      	blt.n	80097c0 <_printf_float+0x1d0>
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	6121      	str	r1, [r4, #16]
 80097b8:	07d8      	lsls	r0, r3, #31
 80097ba:	d5ea      	bpl.n	8009792 <_printf_float+0x1a2>
 80097bc:	1c4b      	adds	r3, r1, #1
 80097be:	e7e7      	b.n	8009790 <_printf_float+0x1a0>
 80097c0:	2900      	cmp	r1, #0
 80097c2:	bfd4      	ite	le
 80097c4:	f1c1 0202 	rsble	r2, r1, #2
 80097c8:	2201      	movgt	r2, #1
 80097ca:	4413      	add	r3, r2
 80097cc:	e7e0      	b.n	8009790 <_printf_float+0x1a0>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	055a      	lsls	r2, r3, #21
 80097d2:	d407      	bmi.n	80097e4 <_printf_float+0x1f4>
 80097d4:	6923      	ldr	r3, [r4, #16]
 80097d6:	4642      	mov	r2, r8
 80097d8:	4631      	mov	r1, r6
 80097da:	4628      	mov	r0, r5
 80097dc:	47b8      	blx	r7
 80097de:	3001      	adds	r0, #1
 80097e0:	d12c      	bne.n	800983c <_printf_float+0x24c>
 80097e2:	e764      	b.n	80096ae <_printf_float+0xbe>
 80097e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097e8:	f240 80e0 	bls.w	80099ac <_printf_float+0x3bc>
 80097ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097f0:	2200      	movs	r2, #0
 80097f2:	2300      	movs	r3, #0
 80097f4:	f7f7 f980 	bl	8000af8 <__aeabi_dcmpeq>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d034      	beq.n	8009866 <_printf_float+0x276>
 80097fc:	4a37      	ldr	r2, [pc, #220]	; (80098dc <_printf_float+0x2ec>)
 80097fe:	2301      	movs	r3, #1
 8009800:	4631      	mov	r1, r6
 8009802:	4628      	mov	r0, r5
 8009804:	47b8      	blx	r7
 8009806:	3001      	adds	r0, #1
 8009808:	f43f af51 	beq.w	80096ae <_printf_float+0xbe>
 800980c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009810:	429a      	cmp	r2, r3
 8009812:	db02      	blt.n	800981a <_printf_float+0x22a>
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	07d8      	lsls	r0, r3, #31
 8009818:	d510      	bpl.n	800983c <_printf_float+0x24c>
 800981a:	ee18 3a10 	vmov	r3, s16
 800981e:	4652      	mov	r2, sl
 8009820:	4631      	mov	r1, r6
 8009822:	4628      	mov	r0, r5
 8009824:	47b8      	blx	r7
 8009826:	3001      	adds	r0, #1
 8009828:	f43f af41 	beq.w	80096ae <_printf_float+0xbe>
 800982c:	f04f 0800 	mov.w	r8, #0
 8009830:	f104 091a 	add.w	r9, r4, #26
 8009834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009836:	3b01      	subs	r3, #1
 8009838:	4543      	cmp	r3, r8
 800983a:	dc09      	bgt.n	8009850 <_printf_float+0x260>
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	079b      	lsls	r3, r3, #30
 8009840:	f100 8107 	bmi.w	8009a52 <_printf_float+0x462>
 8009844:	68e0      	ldr	r0, [r4, #12]
 8009846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009848:	4298      	cmp	r0, r3
 800984a:	bfb8      	it	lt
 800984c:	4618      	movlt	r0, r3
 800984e:	e730      	b.n	80096b2 <_printf_float+0xc2>
 8009850:	2301      	movs	r3, #1
 8009852:	464a      	mov	r2, r9
 8009854:	4631      	mov	r1, r6
 8009856:	4628      	mov	r0, r5
 8009858:	47b8      	blx	r7
 800985a:	3001      	adds	r0, #1
 800985c:	f43f af27 	beq.w	80096ae <_printf_float+0xbe>
 8009860:	f108 0801 	add.w	r8, r8, #1
 8009864:	e7e6      	b.n	8009834 <_printf_float+0x244>
 8009866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009868:	2b00      	cmp	r3, #0
 800986a:	dc39      	bgt.n	80098e0 <_printf_float+0x2f0>
 800986c:	4a1b      	ldr	r2, [pc, #108]	; (80098dc <_printf_float+0x2ec>)
 800986e:	2301      	movs	r3, #1
 8009870:	4631      	mov	r1, r6
 8009872:	4628      	mov	r0, r5
 8009874:	47b8      	blx	r7
 8009876:	3001      	adds	r0, #1
 8009878:	f43f af19 	beq.w	80096ae <_printf_float+0xbe>
 800987c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009880:	4313      	orrs	r3, r2
 8009882:	d102      	bne.n	800988a <_printf_float+0x29a>
 8009884:	6823      	ldr	r3, [r4, #0]
 8009886:	07d9      	lsls	r1, r3, #31
 8009888:	d5d8      	bpl.n	800983c <_printf_float+0x24c>
 800988a:	ee18 3a10 	vmov	r3, s16
 800988e:	4652      	mov	r2, sl
 8009890:	4631      	mov	r1, r6
 8009892:	4628      	mov	r0, r5
 8009894:	47b8      	blx	r7
 8009896:	3001      	adds	r0, #1
 8009898:	f43f af09 	beq.w	80096ae <_printf_float+0xbe>
 800989c:	f04f 0900 	mov.w	r9, #0
 80098a0:	f104 0a1a 	add.w	sl, r4, #26
 80098a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a6:	425b      	negs	r3, r3
 80098a8:	454b      	cmp	r3, r9
 80098aa:	dc01      	bgt.n	80098b0 <_printf_float+0x2c0>
 80098ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ae:	e792      	b.n	80097d6 <_printf_float+0x1e6>
 80098b0:	2301      	movs	r3, #1
 80098b2:	4652      	mov	r2, sl
 80098b4:	4631      	mov	r1, r6
 80098b6:	4628      	mov	r0, r5
 80098b8:	47b8      	blx	r7
 80098ba:	3001      	adds	r0, #1
 80098bc:	f43f aef7 	beq.w	80096ae <_printf_float+0xbe>
 80098c0:	f109 0901 	add.w	r9, r9, #1
 80098c4:	e7ee      	b.n	80098a4 <_printf_float+0x2b4>
 80098c6:	bf00      	nop
 80098c8:	7fefffff 	.word	0x7fefffff
 80098cc:	0800ca04 	.word	0x0800ca04
 80098d0:	0800ca08 	.word	0x0800ca08
 80098d4:	0800ca0c 	.word	0x0800ca0c
 80098d8:	0800ca10 	.word	0x0800ca10
 80098dc:	0800ca14 	.word	0x0800ca14
 80098e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098e4:	429a      	cmp	r2, r3
 80098e6:	bfa8      	it	ge
 80098e8:	461a      	movge	r2, r3
 80098ea:	2a00      	cmp	r2, #0
 80098ec:	4691      	mov	r9, r2
 80098ee:	dc37      	bgt.n	8009960 <_printf_float+0x370>
 80098f0:	f04f 0b00 	mov.w	fp, #0
 80098f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098f8:	f104 021a 	add.w	r2, r4, #26
 80098fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098fe:	9305      	str	r3, [sp, #20]
 8009900:	eba3 0309 	sub.w	r3, r3, r9
 8009904:	455b      	cmp	r3, fp
 8009906:	dc33      	bgt.n	8009970 <_printf_float+0x380>
 8009908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800990c:	429a      	cmp	r2, r3
 800990e:	db3b      	blt.n	8009988 <_printf_float+0x398>
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	07da      	lsls	r2, r3, #31
 8009914:	d438      	bmi.n	8009988 <_printf_float+0x398>
 8009916:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800991a:	eba2 0903 	sub.w	r9, r2, r3
 800991e:	9b05      	ldr	r3, [sp, #20]
 8009920:	1ad2      	subs	r2, r2, r3
 8009922:	4591      	cmp	r9, r2
 8009924:	bfa8      	it	ge
 8009926:	4691      	movge	r9, r2
 8009928:	f1b9 0f00 	cmp.w	r9, #0
 800992c:	dc35      	bgt.n	800999a <_printf_float+0x3aa>
 800992e:	f04f 0800 	mov.w	r8, #0
 8009932:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009936:	f104 0a1a 	add.w	sl, r4, #26
 800993a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800993e:	1a9b      	subs	r3, r3, r2
 8009940:	eba3 0309 	sub.w	r3, r3, r9
 8009944:	4543      	cmp	r3, r8
 8009946:	f77f af79 	ble.w	800983c <_printf_float+0x24c>
 800994a:	2301      	movs	r3, #1
 800994c:	4652      	mov	r2, sl
 800994e:	4631      	mov	r1, r6
 8009950:	4628      	mov	r0, r5
 8009952:	47b8      	blx	r7
 8009954:	3001      	adds	r0, #1
 8009956:	f43f aeaa 	beq.w	80096ae <_printf_float+0xbe>
 800995a:	f108 0801 	add.w	r8, r8, #1
 800995e:	e7ec      	b.n	800993a <_printf_float+0x34a>
 8009960:	4613      	mov	r3, r2
 8009962:	4631      	mov	r1, r6
 8009964:	4642      	mov	r2, r8
 8009966:	4628      	mov	r0, r5
 8009968:	47b8      	blx	r7
 800996a:	3001      	adds	r0, #1
 800996c:	d1c0      	bne.n	80098f0 <_printf_float+0x300>
 800996e:	e69e      	b.n	80096ae <_printf_float+0xbe>
 8009970:	2301      	movs	r3, #1
 8009972:	4631      	mov	r1, r6
 8009974:	4628      	mov	r0, r5
 8009976:	9205      	str	r2, [sp, #20]
 8009978:	47b8      	blx	r7
 800997a:	3001      	adds	r0, #1
 800997c:	f43f ae97 	beq.w	80096ae <_printf_float+0xbe>
 8009980:	9a05      	ldr	r2, [sp, #20]
 8009982:	f10b 0b01 	add.w	fp, fp, #1
 8009986:	e7b9      	b.n	80098fc <_printf_float+0x30c>
 8009988:	ee18 3a10 	vmov	r3, s16
 800998c:	4652      	mov	r2, sl
 800998e:	4631      	mov	r1, r6
 8009990:	4628      	mov	r0, r5
 8009992:	47b8      	blx	r7
 8009994:	3001      	adds	r0, #1
 8009996:	d1be      	bne.n	8009916 <_printf_float+0x326>
 8009998:	e689      	b.n	80096ae <_printf_float+0xbe>
 800999a:	9a05      	ldr	r2, [sp, #20]
 800999c:	464b      	mov	r3, r9
 800999e:	4442      	add	r2, r8
 80099a0:	4631      	mov	r1, r6
 80099a2:	4628      	mov	r0, r5
 80099a4:	47b8      	blx	r7
 80099a6:	3001      	adds	r0, #1
 80099a8:	d1c1      	bne.n	800992e <_printf_float+0x33e>
 80099aa:	e680      	b.n	80096ae <_printf_float+0xbe>
 80099ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ae:	2a01      	cmp	r2, #1
 80099b0:	dc01      	bgt.n	80099b6 <_printf_float+0x3c6>
 80099b2:	07db      	lsls	r3, r3, #31
 80099b4:	d53a      	bpl.n	8009a2c <_printf_float+0x43c>
 80099b6:	2301      	movs	r3, #1
 80099b8:	4642      	mov	r2, r8
 80099ba:	4631      	mov	r1, r6
 80099bc:	4628      	mov	r0, r5
 80099be:	47b8      	blx	r7
 80099c0:	3001      	adds	r0, #1
 80099c2:	f43f ae74 	beq.w	80096ae <_printf_float+0xbe>
 80099c6:	ee18 3a10 	vmov	r3, s16
 80099ca:	4652      	mov	r2, sl
 80099cc:	4631      	mov	r1, r6
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b8      	blx	r7
 80099d2:	3001      	adds	r0, #1
 80099d4:	f43f ae6b 	beq.w	80096ae <_printf_float+0xbe>
 80099d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099dc:	2200      	movs	r2, #0
 80099de:	2300      	movs	r3, #0
 80099e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80099e4:	f7f7 f888 	bl	8000af8 <__aeabi_dcmpeq>
 80099e8:	b9d8      	cbnz	r0, 8009a22 <_printf_float+0x432>
 80099ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80099ee:	f108 0201 	add.w	r2, r8, #1
 80099f2:	4631      	mov	r1, r6
 80099f4:	4628      	mov	r0, r5
 80099f6:	47b8      	blx	r7
 80099f8:	3001      	adds	r0, #1
 80099fa:	d10e      	bne.n	8009a1a <_printf_float+0x42a>
 80099fc:	e657      	b.n	80096ae <_printf_float+0xbe>
 80099fe:	2301      	movs	r3, #1
 8009a00:	4652      	mov	r2, sl
 8009a02:	4631      	mov	r1, r6
 8009a04:	4628      	mov	r0, r5
 8009a06:	47b8      	blx	r7
 8009a08:	3001      	adds	r0, #1
 8009a0a:	f43f ae50 	beq.w	80096ae <_printf_float+0xbe>
 8009a0e:	f108 0801 	add.w	r8, r8, #1
 8009a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a14:	3b01      	subs	r3, #1
 8009a16:	4543      	cmp	r3, r8
 8009a18:	dcf1      	bgt.n	80099fe <_printf_float+0x40e>
 8009a1a:	464b      	mov	r3, r9
 8009a1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a20:	e6da      	b.n	80097d8 <_printf_float+0x1e8>
 8009a22:	f04f 0800 	mov.w	r8, #0
 8009a26:	f104 0a1a 	add.w	sl, r4, #26
 8009a2a:	e7f2      	b.n	8009a12 <_printf_float+0x422>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	4642      	mov	r2, r8
 8009a30:	e7df      	b.n	80099f2 <_printf_float+0x402>
 8009a32:	2301      	movs	r3, #1
 8009a34:	464a      	mov	r2, r9
 8009a36:	4631      	mov	r1, r6
 8009a38:	4628      	mov	r0, r5
 8009a3a:	47b8      	blx	r7
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	f43f ae36 	beq.w	80096ae <_printf_float+0xbe>
 8009a42:	f108 0801 	add.w	r8, r8, #1
 8009a46:	68e3      	ldr	r3, [r4, #12]
 8009a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a4a:	1a5b      	subs	r3, r3, r1
 8009a4c:	4543      	cmp	r3, r8
 8009a4e:	dcf0      	bgt.n	8009a32 <_printf_float+0x442>
 8009a50:	e6f8      	b.n	8009844 <_printf_float+0x254>
 8009a52:	f04f 0800 	mov.w	r8, #0
 8009a56:	f104 0919 	add.w	r9, r4, #25
 8009a5a:	e7f4      	b.n	8009a46 <_printf_float+0x456>

08009a5c <_printf_common>:
 8009a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a60:	4616      	mov	r6, r2
 8009a62:	4699      	mov	r9, r3
 8009a64:	688a      	ldr	r2, [r1, #8]
 8009a66:	690b      	ldr	r3, [r1, #16]
 8009a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	bfb8      	it	lt
 8009a70:	4613      	movlt	r3, r2
 8009a72:	6033      	str	r3, [r6, #0]
 8009a74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a78:	4607      	mov	r7, r0
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	b10a      	cbz	r2, 8009a82 <_printf_common+0x26>
 8009a7e:	3301      	adds	r3, #1
 8009a80:	6033      	str	r3, [r6, #0]
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	0699      	lsls	r1, r3, #26
 8009a86:	bf42      	ittt	mi
 8009a88:	6833      	ldrmi	r3, [r6, #0]
 8009a8a:	3302      	addmi	r3, #2
 8009a8c:	6033      	strmi	r3, [r6, #0]
 8009a8e:	6825      	ldr	r5, [r4, #0]
 8009a90:	f015 0506 	ands.w	r5, r5, #6
 8009a94:	d106      	bne.n	8009aa4 <_printf_common+0x48>
 8009a96:	f104 0a19 	add.w	sl, r4, #25
 8009a9a:	68e3      	ldr	r3, [r4, #12]
 8009a9c:	6832      	ldr	r2, [r6, #0]
 8009a9e:	1a9b      	subs	r3, r3, r2
 8009aa0:	42ab      	cmp	r3, r5
 8009aa2:	dc26      	bgt.n	8009af2 <_printf_common+0x96>
 8009aa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009aa8:	1e13      	subs	r3, r2, #0
 8009aaa:	6822      	ldr	r2, [r4, #0]
 8009aac:	bf18      	it	ne
 8009aae:	2301      	movne	r3, #1
 8009ab0:	0692      	lsls	r2, r2, #26
 8009ab2:	d42b      	bmi.n	8009b0c <_printf_common+0xb0>
 8009ab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ab8:	4649      	mov	r1, r9
 8009aba:	4638      	mov	r0, r7
 8009abc:	47c0      	blx	r8
 8009abe:	3001      	adds	r0, #1
 8009ac0:	d01e      	beq.n	8009b00 <_printf_common+0xa4>
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	6922      	ldr	r2, [r4, #16]
 8009ac6:	f003 0306 	and.w	r3, r3, #6
 8009aca:	2b04      	cmp	r3, #4
 8009acc:	bf02      	ittt	eq
 8009ace:	68e5      	ldreq	r5, [r4, #12]
 8009ad0:	6833      	ldreq	r3, [r6, #0]
 8009ad2:	1aed      	subeq	r5, r5, r3
 8009ad4:	68a3      	ldr	r3, [r4, #8]
 8009ad6:	bf0c      	ite	eq
 8009ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009adc:	2500      	movne	r5, #0
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	bfc4      	itt	gt
 8009ae2:	1a9b      	subgt	r3, r3, r2
 8009ae4:	18ed      	addgt	r5, r5, r3
 8009ae6:	2600      	movs	r6, #0
 8009ae8:	341a      	adds	r4, #26
 8009aea:	42b5      	cmp	r5, r6
 8009aec:	d11a      	bne.n	8009b24 <_printf_common+0xc8>
 8009aee:	2000      	movs	r0, #0
 8009af0:	e008      	b.n	8009b04 <_printf_common+0xa8>
 8009af2:	2301      	movs	r3, #1
 8009af4:	4652      	mov	r2, sl
 8009af6:	4649      	mov	r1, r9
 8009af8:	4638      	mov	r0, r7
 8009afa:	47c0      	blx	r8
 8009afc:	3001      	adds	r0, #1
 8009afe:	d103      	bne.n	8009b08 <_printf_common+0xac>
 8009b00:	f04f 30ff 	mov.w	r0, #4294967295
 8009b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b08:	3501      	adds	r5, #1
 8009b0a:	e7c6      	b.n	8009a9a <_printf_common+0x3e>
 8009b0c:	18e1      	adds	r1, r4, r3
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	2030      	movs	r0, #48	; 0x30
 8009b12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b16:	4422      	add	r2, r4
 8009b18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b20:	3302      	adds	r3, #2
 8009b22:	e7c7      	b.n	8009ab4 <_printf_common+0x58>
 8009b24:	2301      	movs	r3, #1
 8009b26:	4622      	mov	r2, r4
 8009b28:	4649      	mov	r1, r9
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	47c0      	blx	r8
 8009b2e:	3001      	adds	r0, #1
 8009b30:	d0e6      	beq.n	8009b00 <_printf_common+0xa4>
 8009b32:	3601      	adds	r6, #1
 8009b34:	e7d9      	b.n	8009aea <_printf_common+0x8e>
	...

08009b38 <_printf_i>:
 8009b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b3c:	7e0f      	ldrb	r7, [r1, #24]
 8009b3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b40:	2f78      	cmp	r7, #120	; 0x78
 8009b42:	4691      	mov	r9, r2
 8009b44:	4680      	mov	r8, r0
 8009b46:	460c      	mov	r4, r1
 8009b48:	469a      	mov	sl, r3
 8009b4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b4e:	d807      	bhi.n	8009b60 <_printf_i+0x28>
 8009b50:	2f62      	cmp	r7, #98	; 0x62
 8009b52:	d80a      	bhi.n	8009b6a <_printf_i+0x32>
 8009b54:	2f00      	cmp	r7, #0
 8009b56:	f000 80d4 	beq.w	8009d02 <_printf_i+0x1ca>
 8009b5a:	2f58      	cmp	r7, #88	; 0x58
 8009b5c:	f000 80c0 	beq.w	8009ce0 <_printf_i+0x1a8>
 8009b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b68:	e03a      	b.n	8009be0 <_printf_i+0xa8>
 8009b6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b6e:	2b15      	cmp	r3, #21
 8009b70:	d8f6      	bhi.n	8009b60 <_printf_i+0x28>
 8009b72:	a101      	add	r1, pc, #4	; (adr r1, 8009b78 <_printf_i+0x40>)
 8009b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b78:	08009bd1 	.word	0x08009bd1
 8009b7c:	08009be5 	.word	0x08009be5
 8009b80:	08009b61 	.word	0x08009b61
 8009b84:	08009b61 	.word	0x08009b61
 8009b88:	08009b61 	.word	0x08009b61
 8009b8c:	08009b61 	.word	0x08009b61
 8009b90:	08009be5 	.word	0x08009be5
 8009b94:	08009b61 	.word	0x08009b61
 8009b98:	08009b61 	.word	0x08009b61
 8009b9c:	08009b61 	.word	0x08009b61
 8009ba0:	08009b61 	.word	0x08009b61
 8009ba4:	08009ce9 	.word	0x08009ce9
 8009ba8:	08009c11 	.word	0x08009c11
 8009bac:	08009ca3 	.word	0x08009ca3
 8009bb0:	08009b61 	.word	0x08009b61
 8009bb4:	08009b61 	.word	0x08009b61
 8009bb8:	08009d0b 	.word	0x08009d0b
 8009bbc:	08009b61 	.word	0x08009b61
 8009bc0:	08009c11 	.word	0x08009c11
 8009bc4:	08009b61 	.word	0x08009b61
 8009bc8:	08009b61 	.word	0x08009b61
 8009bcc:	08009cab 	.word	0x08009cab
 8009bd0:	682b      	ldr	r3, [r5, #0]
 8009bd2:	1d1a      	adds	r2, r3, #4
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	602a      	str	r2, [r5, #0]
 8009bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009be0:	2301      	movs	r3, #1
 8009be2:	e09f      	b.n	8009d24 <_printf_i+0x1ec>
 8009be4:	6820      	ldr	r0, [r4, #0]
 8009be6:	682b      	ldr	r3, [r5, #0]
 8009be8:	0607      	lsls	r7, r0, #24
 8009bea:	f103 0104 	add.w	r1, r3, #4
 8009bee:	6029      	str	r1, [r5, #0]
 8009bf0:	d501      	bpl.n	8009bf6 <_printf_i+0xbe>
 8009bf2:	681e      	ldr	r6, [r3, #0]
 8009bf4:	e003      	b.n	8009bfe <_printf_i+0xc6>
 8009bf6:	0646      	lsls	r6, r0, #25
 8009bf8:	d5fb      	bpl.n	8009bf2 <_printf_i+0xba>
 8009bfa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009bfe:	2e00      	cmp	r6, #0
 8009c00:	da03      	bge.n	8009c0a <_printf_i+0xd2>
 8009c02:	232d      	movs	r3, #45	; 0x2d
 8009c04:	4276      	negs	r6, r6
 8009c06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c0a:	485a      	ldr	r0, [pc, #360]	; (8009d74 <_printf_i+0x23c>)
 8009c0c:	230a      	movs	r3, #10
 8009c0e:	e012      	b.n	8009c36 <_printf_i+0xfe>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	6820      	ldr	r0, [r4, #0]
 8009c14:	1d19      	adds	r1, r3, #4
 8009c16:	6029      	str	r1, [r5, #0]
 8009c18:	0605      	lsls	r5, r0, #24
 8009c1a:	d501      	bpl.n	8009c20 <_printf_i+0xe8>
 8009c1c:	681e      	ldr	r6, [r3, #0]
 8009c1e:	e002      	b.n	8009c26 <_printf_i+0xee>
 8009c20:	0641      	lsls	r1, r0, #25
 8009c22:	d5fb      	bpl.n	8009c1c <_printf_i+0xe4>
 8009c24:	881e      	ldrh	r6, [r3, #0]
 8009c26:	4853      	ldr	r0, [pc, #332]	; (8009d74 <_printf_i+0x23c>)
 8009c28:	2f6f      	cmp	r7, #111	; 0x6f
 8009c2a:	bf0c      	ite	eq
 8009c2c:	2308      	moveq	r3, #8
 8009c2e:	230a      	movne	r3, #10
 8009c30:	2100      	movs	r1, #0
 8009c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c36:	6865      	ldr	r5, [r4, #4]
 8009c38:	60a5      	str	r5, [r4, #8]
 8009c3a:	2d00      	cmp	r5, #0
 8009c3c:	bfa2      	ittt	ge
 8009c3e:	6821      	ldrge	r1, [r4, #0]
 8009c40:	f021 0104 	bicge.w	r1, r1, #4
 8009c44:	6021      	strge	r1, [r4, #0]
 8009c46:	b90e      	cbnz	r6, 8009c4c <_printf_i+0x114>
 8009c48:	2d00      	cmp	r5, #0
 8009c4a:	d04b      	beq.n	8009ce4 <_printf_i+0x1ac>
 8009c4c:	4615      	mov	r5, r2
 8009c4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c52:	fb03 6711 	mls	r7, r3, r1, r6
 8009c56:	5dc7      	ldrb	r7, [r0, r7]
 8009c58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c5c:	4637      	mov	r7, r6
 8009c5e:	42bb      	cmp	r3, r7
 8009c60:	460e      	mov	r6, r1
 8009c62:	d9f4      	bls.n	8009c4e <_printf_i+0x116>
 8009c64:	2b08      	cmp	r3, #8
 8009c66:	d10b      	bne.n	8009c80 <_printf_i+0x148>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	07de      	lsls	r6, r3, #31
 8009c6c:	d508      	bpl.n	8009c80 <_printf_i+0x148>
 8009c6e:	6923      	ldr	r3, [r4, #16]
 8009c70:	6861      	ldr	r1, [r4, #4]
 8009c72:	4299      	cmp	r1, r3
 8009c74:	bfde      	ittt	le
 8009c76:	2330      	movle	r3, #48	; 0x30
 8009c78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c80:	1b52      	subs	r2, r2, r5
 8009c82:	6122      	str	r2, [r4, #16]
 8009c84:	f8cd a000 	str.w	sl, [sp]
 8009c88:	464b      	mov	r3, r9
 8009c8a:	aa03      	add	r2, sp, #12
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	4640      	mov	r0, r8
 8009c90:	f7ff fee4 	bl	8009a5c <_printf_common>
 8009c94:	3001      	adds	r0, #1
 8009c96:	d14a      	bne.n	8009d2e <_printf_i+0x1f6>
 8009c98:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9c:	b004      	add	sp, #16
 8009c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	f043 0320 	orr.w	r3, r3, #32
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	4833      	ldr	r0, [pc, #204]	; (8009d78 <_printf_i+0x240>)
 8009cac:	2778      	movs	r7, #120	; 0x78
 8009cae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	6829      	ldr	r1, [r5, #0]
 8009cb6:	061f      	lsls	r7, r3, #24
 8009cb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cbc:	d402      	bmi.n	8009cc4 <_printf_i+0x18c>
 8009cbe:	065f      	lsls	r7, r3, #25
 8009cc0:	bf48      	it	mi
 8009cc2:	b2b6      	uxthmi	r6, r6
 8009cc4:	07df      	lsls	r7, r3, #31
 8009cc6:	bf48      	it	mi
 8009cc8:	f043 0320 	orrmi.w	r3, r3, #32
 8009ccc:	6029      	str	r1, [r5, #0]
 8009cce:	bf48      	it	mi
 8009cd0:	6023      	strmi	r3, [r4, #0]
 8009cd2:	b91e      	cbnz	r6, 8009cdc <_printf_i+0x1a4>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	f023 0320 	bic.w	r3, r3, #32
 8009cda:	6023      	str	r3, [r4, #0]
 8009cdc:	2310      	movs	r3, #16
 8009cde:	e7a7      	b.n	8009c30 <_printf_i+0xf8>
 8009ce0:	4824      	ldr	r0, [pc, #144]	; (8009d74 <_printf_i+0x23c>)
 8009ce2:	e7e4      	b.n	8009cae <_printf_i+0x176>
 8009ce4:	4615      	mov	r5, r2
 8009ce6:	e7bd      	b.n	8009c64 <_printf_i+0x12c>
 8009ce8:	682b      	ldr	r3, [r5, #0]
 8009cea:	6826      	ldr	r6, [r4, #0]
 8009cec:	6961      	ldr	r1, [r4, #20]
 8009cee:	1d18      	adds	r0, r3, #4
 8009cf0:	6028      	str	r0, [r5, #0]
 8009cf2:	0635      	lsls	r5, r6, #24
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	d501      	bpl.n	8009cfc <_printf_i+0x1c4>
 8009cf8:	6019      	str	r1, [r3, #0]
 8009cfa:	e002      	b.n	8009d02 <_printf_i+0x1ca>
 8009cfc:	0670      	lsls	r0, r6, #25
 8009cfe:	d5fb      	bpl.n	8009cf8 <_printf_i+0x1c0>
 8009d00:	8019      	strh	r1, [r3, #0]
 8009d02:	2300      	movs	r3, #0
 8009d04:	6123      	str	r3, [r4, #16]
 8009d06:	4615      	mov	r5, r2
 8009d08:	e7bc      	b.n	8009c84 <_printf_i+0x14c>
 8009d0a:	682b      	ldr	r3, [r5, #0]
 8009d0c:	1d1a      	adds	r2, r3, #4
 8009d0e:	602a      	str	r2, [r5, #0]
 8009d10:	681d      	ldr	r5, [r3, #0]
 8009d12:	6862      	ldr	r2, [r4, #4]
 8009d14:	2100      	movs	r1, #0
 8009d16:	4628      	mov	r0, r5
 8009d18:	f7f6 fa72 	bl	8000200 <memchr>
 8009d1c:	b108      	cbz	r0, 8009d22 <_printf_i+0x1ea>
 8009d1e:	1b40      	subs	r0, r0, r5
 8009d20:	6060      	str	r0, [r4, #4]
 8009d22:	6863      	ldr	r3, [r4, #4]
 8009d24:	6123      	str	r3, [r4, #16]
 8009d26:	2300      	movs	r3, #0
 8009d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d2c:	e7aa      	b.n	8009c84 <_printf_i+0x14c>
 8009d2e:	6923      	ldr	r3, [r4, #16]
 8009d30:	462a      	mov	r2, r5
 8009d32:	4649      	mov	r1, r9
 8009d34:	4640      	mov	r0, r8
 8009d36:	47d0      	blx	sl
 8009d38:	3001      	adds	r0, #1
 8009d3a:	d0ad      	beq.n	8009c98 <_printf_i+0x160>
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	079b      	lsls	r3, r3, #30
 8009d40:	d413      	bmi.n	8009d6a <_printf_i+0x232>
 8009d42:	68e0      	ldr	r0, [r4, #12]
 8009d44:	9b03      	ldr	r3, [sp, #12]
 8009d46:	4298      	cmp	r0, r3
 8009d48:	bfb8      	it	lt
 8009d4a:	4618      	movlt	r0, r3
 8009d4c:	e7a6      	b.n	8009c9c <_printf_i+0x164>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	4632      	mov	r2, r6
 8009d52:	4649      	mov	r1, r9
 8009d54:	4640      	mov	r0, r8
 8009d56:	47d0      	blx	sl
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d09d      	beq.n	8009c98 <_printf_i+0x160>
 8009d5c:	3501      	adds	r5, #1
 8009d5e:	68e3      	ldr	r3, [r4, #12]
 8009d60:	9903      	ldr	r1, [sp, #12]
 8009d62:	1a5b      	subs	r3, r3, r1
 8009d64:	42ab      	cmp	r3, r5
 8009d66:	dcf2      	bgt.n	8009d4e <_printf_i+0x216>
 8009d68:	e7eb      	b.n	8009d42 <_printf_i+0x20a>
 8009d6a:	2500      	movs	r5, #0
 8009d6c:	f104 0619 	add.w	r6, r4, #25
 8009d70:	e7f5      	b.n	8009d5e <_printf_i+0x226>
 8009d72:	bf00      	nop
 8009d74:	0800ca16 	.word	0x0800ca16
 8009d78:	0800ca27 	.word	0x0800ca27

08009d7c <std>:
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	b510      	push	{r4, lr}
 8009d80:	4604      	mov	r4, r0
 8009d82:	e9c0 3300 	strd	r3, r3, [r0]
 8009d86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d8a:	6083      	str	r3, [r0, #8]
 8009d8c:	8181      	strh	r1, [r0, #12]
 8009d8e:	6643      	str	r3, [r0, #100]	; 0x64
 8009d90:	81c2      	strh	r2, [r0, #14]
 8009d92:	6183      	str	r3, [r0, #24]
 8009d94:	4619      	mov	r1, r3
 8009d96:	2208      	movs	r2, #8
 8009d98:	305c      	adds	r0, #92	; 0x5c
 8009d9a:	f000 fa0d 	bl	800a1b8 <memset>
 8009d9e:	4b05      	ldr	r3, [pc, #20]	; (8009db4 <std+0x38>)
 8009da0:	6263      	str	r3, [r4, #36]	; 0x24
 8009da2:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <std+0x3c>)
 8009da4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009da6:	4b05      	ldr	r3, [pc, #20]	; (8009dbc <std+0x40>)
 8009da8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009daa:	4b05      	ldr	r3, [pc, #20]	; (8009dc0 <std+0x44>)
 8009dac:	6224      	str	r4, [r4, #32]
 8009dae:	6323      	str	r3, [r4, #48]	; 0x30
 8009db0:	bd10      	pop	{r4, pc}
 8009db2:	bf00      	nop
 8009db4:	0800a009 	.word	0x0800a009
 8009db8:	0800a02b 	.word	0x0800a02b
 8009dbc:	0800a063 	.word	0x0800a063
 8009dc0:	0800a087 	.word	0x0800a087

08009dc4 <stdio_exit_handler>:
 8009dc4:	4a02      	ldr	r2, [pc, #8]	; (8009dd0 <stdio_exit_handler+0xc>)
 8009dc6:	4903      	ldr	r1, [pc, #12]	; (8009dd4 <stdio_exit_handler+0x10>)
 8009dc8:	4803      	ldr	r0, [pc, #12]	; (8009dd8 <stdio_exit_handler+0x14>)
 8009dca:	f000 b869 	b.w	8009ea0 <_fwalk_sglue>
 8009dce:	bf00      	nop
 8009dd0:	20000024 	.word	0x20000024
 8009dd4:	0800bee9 	.word	0x0800bee9
 8009dd8:	20000030 	.word	0x20000030

08009ddc <cleanup_stdio>:
 8009ddc:	6841      	ldr	r1, [r0, #4]
 8009dde:	4b0c      	ldr	r3, [pc, #48]	; (8009e10 <cleanup_stdio+0x34>)
 8009de0:	4299      	cmp	r1, r3
 8009de2:	b510      	push	{r4, lr}
 8009de4:	4604      	mov	r4, r0
 8009de6:	d001      	beq.n	8009dec <cleanup_stdio+0x10>
 8009de8:	f002 f87e 	bl	800bee8 <_fflush_r>
 8009dec:	68a1      	ldr	r1, [r4, #8]
 8009dee:	4b09      	ldr	r3, [pc, #36]	; (8009e14 <cleanup_stdio+0x38>)
 8009df0:	4299      	cmp	r1, r3
 8009df2:	d002      	beq.n	8009dfa <cleanup_stdio+0x1e>
 8009df4:	4620      	mov	r0, r4
 8009df6:	f002 f877 	bl	800bee8 <_fflush_r>
 8009dfa:	68e1      	ldr	r1, [r4, #12]
 8009dfc:	4b06      	ldr	r3, [pc, #24]	; (8009e18 <cleanup_stdio+0x3c>)
 8009dfe:	4299      	cmp	r1, r3
 8009e00:	d004      	beq.n	8009e0c <cleanup_stdio+0x30>
 8009e02:	4620      	mov	r0, r4
 8009e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e08:	f002 b86e 	b.w	800bee8 <_fflush_r>
 8009e0c:	bd10      	pop	{r4, pc}
 8009e0e:	bf00      	nop
 8009e10:	2000262c 	.word	0x2000262c
 8009e14:	20002694 	.word	0x20002694
 8009e18:	200026fc 	.word	0x200026fc

08009e1c <global_stdio_init.part.0>:
 8009e1c:	b510      	push	{r4, lr}
 8009e1e:	4b0b      	ldr	r3, [pc, #44]	; (8009e4c <global_stdio_init.part.0+0x30>)
 8009e20:	4c0b      	ldr	r4, [pc, #44]	; (8009e50 <global_stdio_init.part.0+0x34>)
 8009e22:	4a0c      	ldr	r2, [pc, #48]	; (8009e54 <global_stdio_init.part.0+0x38>)
 8009e24:	601a      	str	r2, [r3, #0]
 8009e26:	4620      	mov	r0, r4
 8009e28:	2200      	movs	r2, #0
 8009e2a:	2104      	movs	r1, #4
 8009e2c:	f7ff ffa6 	bl	8009d7c <std>
 8009e30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009e34:	2201      	movs	r2, #1
 8009e36:	2109      	movs	r1, #9
 8009e38:	f7ff ffa0 	bl	8009d7c <std>
 8009e3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009e40:	2202      	movs	r2, #2
 8009e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e46:	2112      	movs	r1, #18
 8009e48:	f7ff bf98 	b.w	8009d7c <std>
 8009e4c:	20002764 	.word	0x20002764
 8009e50:	2000262c 	.word	0x2000262c
 8009e54:	08009dc5 	.word	0x08009dc5

08009e58 <__sfp_lock_acquire>:
 8009e58:	4801      	ldr	r0, [pc, #4]	; (8009e60 <__sfp_lock_acquire+0x8>)
 8009e5a:	f000 ba29 	b.w	800a2b0 <__retarget_lock_acquire_recursive>
 8009e5e:	bf00      	nop
 8009e60:	2000276d 	.word	0x2000276d

08009e64 <__sfp_lock_release>:
 8009e64:	4801      	ldr	r0, [pc, #4]	; (8009e6c <__sfp_lock_release+0x8>)
 8009e66:	f000 ba24 	b.w	800a2b2 <__retarget_lock_release_recursive>
 8009e6a:	bf00      	nop
 8009e6c:	2000276d 	.word	0x2000276d

08009e70 <__sinit>:
 8009e70:	b510      	push	{r4, lr}
 8009e72:	4604      	mov	r4, r0
 8009e74:	f7ff fff0 	bl	8009e58 <__sfp_lock_acquire>
 8009e78:	6a23      	ldr	r3, [r4, #32]
 8009e7a:	b11b      	cbz	r3, 8009e84 <__sinit+0x14>
 8009e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e80:	f7ff bff0 	b.w	8009e64 <__sfp_lock_release>
 8009e84:	4b04      	ldr	r3, [pc, #16]	; (8009e98 <__sinit+0x28>)
 8009e86:	6223      	str	r3, [r4, #32]
 8009e88:	4b04      	ldr	r3, [pc, #16]	; (8009e9c <__sinit+0x2c>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1f5      	bne.n	8009e7c <__sinit+0xc>
 8009e90:	f7ff ffc4 	bl	8009e1c <global_stdio_init.part.0>
 8009e94:	e7f2      	b.n	8009e7c <__sinit+0xc>
 8009e96:	bf00      	nop
 8009e98:	08009ddd 	.word	0x08009ddd
 8009e9c:	20002764 	.word	0x20002764

08009ea0 <_fwalk_sglue>:
 8009ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	4688      	mov	r8, r1
 8009ea8:	4614      	mov	r4, r2
 8009eaa:	2600      	movs	r6, #0
 8009eac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009eb0:	f1b9 0901 	subs.w	r9, r9, #1
 8009eb4:	d505      	bpl.n	8009ec2 <_fwalk_sglue+0x22>
 8009eb6:	6824      	ldr	r4, [r4, #0]
 8009eb8:	2c00      	cmp	r4, #0
 8009eba:	d1f7      	bne.n	8009eac <_fwalk_sglue+0xc>
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ec2:	89ab      	ldrh	r3, [r5, #12]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d907      	bls.n	8009ed8 <_fwalk_sglue+0x38>
 8009ec8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	d003      	beq.n	8009ed8 <_fwalk_sglue+0x38>
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	4638      	mov	r0, r7
 8009ed4:	47c0      	blx	r8
 8009ed6:	4306      	orrs	r6, r0
 8009ed8:	3568      	adds	r5, #104	; 0x68
 8009eda:	e7e9      	b.n	8009eb0 <_fwalk_sglue+0x10>

08009edc <iprintf>:
 8009edc:	b40f      	push	{r0, r1, r2, r3}
 8009ede:	b507      	push	{r0, r1, r2, lr}
 8009ee0:	4906      	ldr	r1, [pc, #24]	; (8009efc <iprintf+0x20>)
 8009ee2:	ab04      	add	r3, sp, #16
 8009ee4:	6808      	ldr	r0, [r1, #0]
 8009ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eea:	6881      	ldr	r1, [r0, #8]
 8009eec:	9301      	str	r3, [sp, #4]
 8009eee:	f001 fe5b 	bl	800bba8 <_vfiprintf_r>
 8009ef2:	b003      	add	sp, #12
 8009ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ef8:	b004      	add	sp, #16
 8009efa:	4770      	bx	lr
 8009efc:	2000007c 	.word	0x2000007c

08009f00 <putchar>:
 8009f00:	4b02      	ldr	r3, [pc, #8]	; (8009f0c <putchar+0xc>)
 8009f02:	4601      	mov	r1, r0
 8009f04:	6818      	ldr	r0, [r3, #0]
 8009f06:	6882      	ldr	r2, [r0, #8]
 8009f08:	f002 b878 	b.w	800bffc <_putc_r>
 8009f0c:	2000007c 	.word	0x2000007c

08009f10 <_puts_r>:
 8009f10:	6a03      	ldr	r3, [r0, #32]
 8009f12:	b570      	push	{r4, r5, r6, lr}
 8009f14:	6884      	ldr	r4, [r0, #8]
 8009f16:	4605      	mov	r5, r0
 8009f18:	460e      	mov	r6, r1
 8009f1a:	b90b      	cbnz	r3, 8009f20 <_puts_r+0x10>
 8009f1c:	f7ff ffa8 	bl	8009e70 <__sinit>
 8009f20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f22:	07db      	lsls	r3, r3, #31
 8009f24:	d405      	bmi.n	8009f32 <_puts_r+0x22>
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	0598      	lsls	r0, r3, #22
 8009f2a:	d402      	bmi.n	8009f32 <_puts_r+0x22>
 8009f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f2e:	f000 f9bf 	bl	800a2b0 <__retarget_lock_acquire_recursive>
 8009f32:	89a3      	ldrh	r3, [r4, #12]
 8009f34:	0719      	lsls	r1, r3, #28
 8009f36:	d513      	bpl.n	8009f60 <_puts_r+0x50>
 8009f38:	6923      	ldr	r3, [r4, #16]
 8009f3a:	b18b      	cbz	r3, 8009f60 <_puts_r+0x50>
 8009f3c:	3e01      	subs	r6, #1
 8009f3e:	68a3      	ldr	r3, [r4, #8]
 8009f40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f44:	3b01      	subs	r3, #1
 8009f46:	60a3      	str	r3, [r4, #8]
 8009f48:	b9e9      	cbnz	r1, 8009f86 <_puts_r+0x76>
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	da2e      	bge.n	8009fac <_puts_r+0x9c>
 8009f4e:	4622      	mov	r2, r4
 8009f50:	210a      	movs	r1, #10
 8009f52:	4628      	mov	r0, r5
 8009f54:	f000 f89b 	bl	800a08e <__swbuf_r>
 8009f58:	3001      	adds	r0, #1
 8009f5a:	d007      	beq.n	8009f6c <_puts_r+0x5c>
 8009f5c:	250a      	movs	r5, #10
 8009f5e:	e007      	b.n	8009f70 <_puts_r+0x60>
 8009f60:	4621      	mov	r1, r4
 8009f62:	4628      	mov	r0, r5
 8009f64:	f000 f8d0 	bl	800a108 <__swsetup_r>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d0e7      	beq.n	8009f3c <_puts_r+0x2c>
 8009f6c:	f04f 35ff 	mov.w	r5, #4294967295
 8009f70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f72:	07da      	lsls	r2, r3, #31
 8009f74:	d405      	bmi.n	8009f82 <_puts_r+0x72>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	059b      	lsls	r3, r3, #22
 8009f7a:	d402      	bmi.n	8009f82 <_puts_r+0x72>
 8009f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f7e:	f000 f998 	bl	800a2b2 <__retarget_lock_release_recursive>
 8009f82:	4628      	mov	r0, r5
 8009f84:	bd70      	pop	{r4, r5, r6, pc}
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	da04      	bge.n	8009f94 <_puts_r+0x84>
 8009f8a:	69a2      	ldr	r2, [r4, #24]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	dc06      	bgt.n	8009f9e <_puts_r+0x8e>
 8009f90:	290a      	cmp	r1, #10
 8009f92:	d004      	beq.n	8009f9e <_puts_r+0x8e>
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	1c5a      	adds	r2, r3, #1
 8009f98:	6022      	str	r2, [r4, #0]
 8009f9a:	7019      	strb	r1, [r3, #0]
 8009f9c:	e7cf      	b.n	8009f3e <_puts_r+0x2e>
 8009f9e:	4622      	mov	r2, r4
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f000 f874 	bl	800a08e <__swbuf_r>
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	d1c9      	bne.n	8009f3e <_puts_r+0x2e>
 8009faa:	e7df      	b.n	8009f6c <_puts_r+0x5c>
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	250a      	movs	r5, #10
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	6022      	str	r2, [r4, #0]
 8009fb4:	701d      	strb	r5, [r3, #0]
 8009fb6:	e7db      	b.n	8009f70 <_puts_r+0x60>

08009fb8 <puts>:
 8009fb8:	4b02      	ldr	r3, [pc, #8]	; (8009fc4 <puts+0xc>)
 8009fba:	4601      	mov	r1, r0
 8009fbc:	6818      	ldr	r0, [r3, #0]
 8009fbe:	f7ff bfa7 	b.w	8009f10 <_puts_r>
 8009fc2:	bf00      	nop
 8009fc4:	2000007c 	.word	0x2000007c

08009fc8 <siprintf>:
 8009fc8:	b40e      	push	{r1, r2, r3}
 8009fca:	b500      	push	{lr}
 8009fcc:	b09c      	sub	sp, #112	; 0x70
 8009fce:	ab1d      	add	r3, sp, #116	; 0x74
 8009fd0:	9002      	str	r0, [sp, #8]
 8009fd2:	9006      	str	r0, [sp, #24]
 8009fd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009fd8:	4809      	ldr	r0, [pc, #36]	; (800a000 <siprintf+0x38>)
 8009fda:	9107      	str	r1, [sp, #28]
 8009fdc:	9104      	str	r1, [sp, #16]
 8009fde:	4909      	ldr	r1, [pc, #36]	; (800a004 <siprintf+0x3c>)
 8009fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fe4:	9105      	str	r1, [sp, #20]
 8009fe6:	6800      	ldr	r0, [r0, #0]
 8009fe8:	9301      	str	r3, [sp, #4]
 8009fea:	a902      	add	r1, sp, #8
 8009fec:	f001 fcb4 	bl	800b958 <_svfiprintf_r>
 8009ff0:	9b02      	ldr	r3, [sp, #8]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	701a      	strb	r2, [r3, #0]
 8009ff6:	b01c      	add	sp, #112	; 0x70
 8009ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ffc:	b003      	add	sp, #12
 8009ffe:	4770      	bx	lr
 800a000:	2000007c 	.word	0x2000007c
 800a004:	ffff0208 	.word	0xffff0208

0800a008 <__sread>:
 800a008:	b510      	push	{r4, lr}
 800a00a:	460c      	mov	r4, r1
 800a00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a010:	f000 f900 	bl	800a214 <_read_r>
 800a014:	2800      	cmp	r0, #0
 800a016:	bfab      	itete	ge
 800a018:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a01a:	89a3      	ldrhlt	r3, [r4, #12]
 800a01c:	181b      	addge	r3, r3, r0
 800a01e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a022:	bfac      	ite	ge
 800a024:	6563      	strge	r3, [r4, #84]	; 0x54
 800a026:	81a3      	strhlt	r3, [r4, #12]
 800a028:	bd10      	pop	{r4, pc}

0800a02a <__swrite>:
 800a02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a02e:	461f      	mov	r7, r3
 800a030:	898b      	ldrh	r3, [r1, #12]
 800a032:	05db      	lsls	r3, r3, #23
 800a034:	4605      	mov	r5, r0
 800a036:	460c      	mov	r4, r1
 800a038:	4616      	mov	r6, r2
 800a03a:	d505      	bpl.n	800a048 <__swrite+0x1e>
 800a03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a040:	2302      	movs	r3, #2
 800a042:	2200      	movs	r2, #0
 800a044:	f000 f8d4 	bl	800a1f0 <_lseek_r>
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a04e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a052:	81a3      	strh	r3, [r4, #12]
 800a054:	4632      	mov	r2, r6
 800a056:	463b      	mov	r3, r7
 800a058:	4628      	mov	r0, r5
 800a05a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a05e:	f000 b8eb 	b.w	800a238 <_write_r>

0800a062 <__sseek>:
 800a062:	b510      	push	{r4, lr}
 800a064:	460c      	mov	r4, r1
 800a066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a06a:	f000 f8c1 	bl	800a1f0 <_lseek_r>
 800a06e:	1c43      	adds	r3, r0, #1
 800a070:	89a3      	ldrh	r3, [r4, #12]
 800a072:	bf15      	itete	ne
 800a074:	6560      	strne	r0, [r4, #84]	; 0x54
 800a076:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a07a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a07e:	81a3      	strheq	r3, [r4, #12]
 800a080:	bf18      	it	ne
 800a082:	81a3      	strhne	r3, [r4, #12]
 800a084:	bd10      	pop	{r4, pc}

0800a086 <__sclose>:
 800a086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a08a:	f000 b8a1 	b.w	800a1d0 <_close_r>

0800a08e <__swbuf_r>:
 800a08e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a090:	460e      	mov	r6, r1
 800a092:	4614      	mov	r4, r2
 800a094:	4605      	mov	r5, r0
 800a096:	b118      	cbz	r0, 800a0a0 <__swbuf_r+0x12>
 800a098:	6a03      	ldr	r3, [r0, #32]
 800a09a:	b90b      	cbnz	r3, 800a0a0 <__swbuf_r+0x12>
 800a09c:	f7ff fee8 	bl	8009e70 <__sinit>
 800a0a0:	69a3      	ldr	r3, [r4, #24]
 800a0a2:	60a3      	str	r3, [r4, #8]
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	071a      	lsls	r2, r3, #28
 800a0a8:	d525      	bpl.n	800a0f6 <__swbuf_r+0x68>
 800a0aa:	6923      	ldr	r3, [r4, #16]
 800a0ac:	b31b      	cbz	r3, 800a0f6 <__swbuf_r+0x68>
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	6922      	ldr	r2, [r4, #16]
 800a0b2:	1a98      	subs	r0, r3, r2
 800a0b4:	6963      	ldr	r3, [r4, #20]
 800a0b6:	b2f6      	uxtb	r6, r6
 800a0b8:	4283      	cmp	r3, r0
 800a0ba:	4637      	mov	r7, r6
 800a0bc:	dc04      	bgt.n	800a0c8 <__swbuf_r+0x3a>
 800a0be:	4621      	mov	r1, r4
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f001 ff11 	bl	800bee8 <_fflush_r>
 800a0c6:	b9e0      	cbnz	r0, 800a102 <__swbuf_r+0x74>
 800a0c8:	68a3      	ldr	r3, [r4, #8]
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	60a3      	str	r3, [r4, #8]
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	1c5a      	adds	r2, r3, #1
 800a0d2:	6022      	str	r2, [r4, #0]
 800a0d4:	701e      	strb	r6, [r3, #0]
 800a0d6:	6962      	ldr	r2, [r4, #20]
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d004      	beq.n	800a0e8 <__swbuf_r+0x5a>
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	07db      	lsls	r3, r3, #31
 800a0e2:	d506      	bpl.n	800a0f2 <__swbuf_r+0x64>
 800a0e4:	2e0a      	cmp	r6, #10
 800a0e6:	d104      	bne.n	800a0f2 <__swbuf_r+0x64>
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	f001 fefc 	bl	800bee8 <_fflush_r>
 800a0f0:	b938      	cbnz	r0, 800a102 <__swbuf_r+0x74>
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	f000 f805 	bl	800a108 <__swsetup_r>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d0d5      	beq.n	800a0ae <__swbuf_r+0x20>
 800a102:	f04f 37ff 	mov.w	r7, #4294967295
 800a106:	e7f4      	b.n	800a0f2 <__swbuf_r+0x64>

0800a108 <__swsetup_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4b2a      	ldr	r3, [pc, #168]	; (800a1b4 <__swsetup_r+0xac>)
 800a10c:	4605      	mov	r5, r0
 800a10e:	6818      	ldr	r0, [r3, #0]
 800a110:	460c      	mov	r4, r1
 800a112:	b118      	cbz	r0, 800a11c <__swsetup_r+0x14>
 800a114:	6a03      	ldr	r3, [r0, #32]
 800a116:	b90b      	cbnz	r3, 800a11c <__swsetup_r+0x14>
 800a118:	f7ff feaa 	bl	8009e70 <__sinit>
 800a11c:	89a3      	ldrh	r3, [r4, #12]
 800a11e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a122:	0718      	lsls	r0, r3, #28
 800a124:	d422      	bmi.n	800a16c <__swsetup_r+0x64>
 800a126:	06d9      	lsls	r1, r3, #27
 800a128:	d407      	bmi.n	800a13a <__swsetup_r+0x32>
 800a12a:	2309      	movs	r3, #9
 800a12c:	602b      	str	r3, [r5, #0]
 800a12e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a132:	81a3      	strh	r3, [r4, #12]
 800a134:	f04f 30ff 	mov.w	r0, #4294967295
 800a138:	e034      	b.n	800a1a4 <__swsetup_r+0x9c>
 800a13a:	0758      	lsls	r0, r3, #29
 800a13c:	d512      	bpl.n	800a164 <__swsetup_r+0x5c>
 800a13e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a140:	b141      	cbz	r1, 800a154 <__swsetup_r+0x4c>
 800a142:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a146:	4299      	cmp	r1, r3
 800a148:	d002      	beq.n	800a150 <__swsetup_r+0x48>
 800a14a:	4628      	mov	r0, r5
 800a14c:	f000 ff2e 	bl	800afac <_free_r>
 800a150:	2300      	movs	r3, #0
 800a152:	6363      	str	r3, [r4, #52]	; 0x34
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a15a:	81a3      	strh	r3, [r4, #12]
 800a15c:	2300      	movs	r3, #0
 800a15e:	6063      	str	r3, [r4, #4]
 800a160:	6923      	ldr	r3, [r4, #16]
 800a162:	6023      	str	r3, [r4, #0]
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	f043 0308 	orr.w	r3, r3, #8
 800a16a:	81a3      	strh	r3, [r4, #12]
 800a16c:	6923      	ldr	r3, [r4, #16]
 800a16e:	b94b      	cbnz	r3, 800a184 <__swsetup_r+0x7c>
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a17a:	d003      	beq.n	800a184 <__swsetup_r+0x7c>
 800a17c:	4621      	mov	r1, r4
 800a17e:	4628      	mov	r0, r5
 800a180:	f001 ff00 	bl	800bf84 <__smakebuf_r>
 800a184:	89a0      	ldrh	r0, [r4, #12]
 800a186:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a18a:	f010 0301 	ands.w	r3, r0, #1
 800a18e:	d00a      	beq.n	800a1a6 <__swsetup_r+0x9e>
 800a190:	2300      	movs	r3, #0
 800a192:	60a3      	str	r3, [r4, #8]
 800a194:	6963      	ldr	r3, [r4, #20]
 800a196:	425b      	negs	r3, r3
 800a198:	61a3      	str	r3, [r4, #24]
 800a19a:	6923      	ldr	r3, [r4, #16]
 800a19c:	b943      	cbnz	r3, 800a1b0 <__swsetup_r+0xa8>
 800a19e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1a2:	d1c4      	bne.n	800a12e <__swsetup_r+0x26>
 800a1a4:	bd38      	pop	{r3, r4, r5, pc}
 800a1a6:	0781      	lsls	r1, r0, #30
 800a1a8:	bf58      	it	pl
 800a1aa:	6963      	ldrpl	r3, [r4, #20]
 800a1ac:	60a3      	str	r3, [r4, #8]
 800a1ae:	e7f4      	b.n	800a19a <__swsetup_r+0x92>
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	e7f7      	b.n	800a1a4 <__swsetup_r+0x9c>
 800a1b4:	2000007c 	.word	0x2000007c

0800a1b8 <memset>:
 800a1b8:	4402      	add	r2, r0
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d100      	bne.n	800a1c2 <memset+0xa>
 800a1c0:	4770      	bx	lr
 800a1c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a1c6:	e7f9      	b.n	800a1bc <memset+0x4>

0800a1c8 <_localeconv_r>:
 800a1c8:	4800      	ldr	r0, [pc, #0]	; (800a1cc <_localeconv_r+0x4>)
 800a1ca:	4770      	bx	lr
 800a1cc:	20000170 	.word	0x20000170

0800a1d0 <_close_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d06      	ldr	r5, [pc, #24]	; (800a1ec <_close_r+0x1c>)
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	4608      	mov	r0, r1
 800a1da:	602b      	str	r3, [r5, #0]
 800a1dc:	f7f8 f98f 	bl	80024fe <_close>
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	d102      	bne.n	800a1ea <_close_r+0x1a>
 800a1e4:	682b      	ldr	r3, [r5, #0]
 800a1e6:	b103      	cbz	r3, 800a1ea <_close_r+0x1a>
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	bd38      	pop	{r3, r4, r5, pc}
 800a1ec:	20002768 	.word	0x20002768

0800a1f0 <_lseek_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	4d07      	ldr	r5, [pc, #28]	; (800a210 <_lseek_r+0x20>)
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	4608      	mov	r0, r1
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	602a      	str	r2, [r5, #0]
 800a1fe:	461a      	mov	r2, r3
 800a200:	f7f8 f9a4 	bl	800254c <_lseek>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	d102      	bne.n	800a20e <_lseek_r+0x1e>
 800a208:	682b      	ldr	r3, [r5, #0]
 800a20a:	b103      	cbz	r3, 800a20e <_lseek_r+0x1e>
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
 800a210:	20002768 	.word	0x20002768

0800a214 <_read_r>:
 800a214:	b538      	push	{r3, r4, r5, lr}
 800a216:	4d07      	ldr	r5, [pc, #28]	; (800a234 <_read_r+0x20>)
 800a218:	4604      	mov	r4, r0
 800a21a:	4608      	mov	r0, r1
 800a21c:	4611      	mov	r1, r2
 800a21e:	2200      	movs	r2, #0
 800a220:	602a      	str	r2, [r5, #0]
 800a222:	461a      	mov	r2, r3
 800a224:	f7f8 f932 	bl	800248c <_read>
 800a228:	1c43      	adds	r3, r0, #1
 800a22a:	d102      	bne.n	800a232 <_read_r+0x1e>
 800a22c:	682b      	ldr	r3, [r5, #0]
 800a22e:	b103      	cbz	r3, 800a232 <_read_r+0x1e>
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	20002768 	.word	0x20002768

0800a238 <_write_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4d07      	ldr	r5, [pc, #28]	; (800a258 <_write_r+0x20>)
 800a23c:	4604      	mov	r4, r0
 800a23e:	4608      	mov	r0, r1
 800a240:	4611      	mov	r1, r2
 800a242:	2200      	movs	r2, #0
 800a244:	602a      	str	r2, [r5, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	f7f8 f93d 	bl	80024c6 <_write>
 800a24c:	1c43      	adds	r3, r0, #1
 800a24e:	d102      	bne.n	800a256 <_write_r+0x1e>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	b103      	cbz	r3, 800a256 <_write_r+0x1e>
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	bd38      	pop	{r3, r4, r5, pc}
 800a258:	20002768 	.word	0x20002768

0800a25c <__errno>:
 800a25c:	4b01      	ldr	r3, [pc, #4]	; (800a264 <__errno+0x8>)
 800a25e:	6818      	ldr	r0, [r3, #0]
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	2000007c 	.word	0x2000007c

0800a268 <__libc_init_array>:
 800a268:	b570      	push	{r4, r5, r6, lr}
 800a26a:	4d0d      	ldr	r5, [pc, #52]	; (800a2a0 <__libc_init_array+0x38>)
 800a26c:	4c0d      	ldr	r4, [pc, #52]	; (800a2a4 <__libc_init_array+0x3c>)
 800a26e:	1b64      	subs	r4, r4, r5
 800a270:	10a4      	asrs	r4, r4, #2
 800a272:	2600      	movs	r6, #0
 800a274:	42a6      	cmp	r6, r4
 800a276:	d109      	bne.n	800a28c <__libc_init_array+0x24>
 800a278:	4d0b      	ldr	r5, [pc, #44]	; (800a2a8 <__libc_init_array+0x40>)
 800a27a:	4c0c      	ldr	r4, [pc, #48]	; (800a2ac <__libc_init_array+0x44>)
 800a27c:	f002 f834 	bl	800c2e8 <_init>
 800a280:	1b64      	subs	r4, r4, r5
 800a282:	10a4      	asrs	r4, r4, #2
 800a284:	2600      	movs	r6, #0
 800a286:	42a6      	cmp	r6, r4
 800a288:	d105      	bne.n	800a296 <__libc_init_array+0x2e>
 800a28a:	bd70      	pop	{r4, r5, r6, pc}
 800a28c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a290:	4798      	blx	r3
 800a292:	3601      	adds	r6, #1
 800a294:	e7ee      	b.n	800a274 <__libc_init_array+0xc>
 800a296:	f855 3b04 	ldr.w	r3, [r5], #4
 800a29a:	4798      	blx	r3
 800a29c:	3601      	adds	r6, #1
 800a29e:	e7f2      	b.n	800a286 <__libc_init_array+0x1e>
 800a2a0:	0800cd7c 	.word	0x0800cd7c
 800a2a4:	0800cd7c 	.word	0x0800cd7c
 800a2a8:	0800cd7c 	.word	0x0800cd7c
 800a2ac:	0800cd80 	.word	0x0800cd80

0800a2b0 <__retarget_lock_acquire_recursive>:
 800a2b0:	4770      	bx	lr

0800a2b2 <__retarget_lock_release_recursive>:
 800a2b2:	4770      	bx	lr

0800a2b4 <quorem>:
 800a2b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	6903      	ldr	r3, [r0, #16]
 800a2ba:	690c      	ldr	r4, [r1, #16]
 800a2bc:	42a3      	cmp	r3, r4
 800a2be:	4607      	mov	r7, r0
 800a2c0:	db7e      	blt.n	800a3c0 <quorem+0x10c>
 800a2c2:	3c01      	subs	r4, #1
 800a2c4:	f101 0814 	add.w	r8, r1, #20
 800a2c8:	f100 0514 	add.w	r5, r0, #20
 800a2cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2d0:	9301      	str	r3, [sp, #4]
 800a2d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a2d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a2e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2e6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2ea:	d331      	bcc.n	800a350 <quorem+0x9c>
 800a2ec:	f04f 0e00 	mov.w	lr, #0
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	46ac      	mov	ip, r5
 800a2f4:	46f2      	mov	sl, lr
 800a2f6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a2fa:	b293      	uxth	r3, r2
 800a2fc:	fb06 e303 	mla	r3, r6, r3, lr
 800a300:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a304:	0c1a      	lsrs	r2, r3, #16
 800a306:	b29b      	uxth	r3, r3
 800a308:	ebaa 0303 	sub.w	r3, sl, r3
 800a30c:	f8dc a000 	ldr.w	sl, [ip]
 800a310:	fa13 f38a 	uxtah	r3, r3, sl
 800a314:	fb06 220e 	mla	r2, r6, lr, r2
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	9b00      	ldr	r3, [sp, #0]
 800a31c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a320:	b292      	uxth	r2, r2
 800a322:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a326:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a32a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a32e:	4581      	cmp	r9, r0
 800a330:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a334:	f84c 3b04 	str.w	r3, [ip], #4
 800a338:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a33c:	d2db      	bcs.n	800a2f6 <quorem+0x42>
 800a33e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a342:	b92b      	cbnz	r3, 800a350 <quorem+0x9c>
 800a344:	9b01      	ldr	r3, [sp, #4]
 800a346:	3b04      	subs	r3, #4
 800a348:	429d      	cmp	r5, r3
 800a34a:	461a      	mov	r2, r3
 800a34c:	d32c      	bcc.n	800a3a8 <quorem+0xf4>
 800a34e:	613c      	str	r4, [r7, #16]
 800a350:	4638      	mov	r0, r7
 800a352:	f001 f9a7 	bl	800b6a4 <__mcmp>
 800a356:	2800      	cmp	r0, #0
 800a358:	db22      	blt.n	800a3a0 <quorem+0xec>
 800a35a:	3601      	adds	r6, #1
 800a35c:	4629      	mov	r1, r5
 800a35e:	2000      	movs	r0, #0
 800a360:	f858 2b04 	ldr.w	r2, [r8], #4
 800a364:	f8d1 c000 	ldr.w	ip, [r1]
 800a368:	b293      	uxth	r3, r2
 800a36a:	1ac3      	subs	r3, r0, r3
 800a36c:	0c12      	lsrs	r2, r2, #16
 800a36e:	fa13 f38c 	uxtah	r3, r3, ip
 800a372:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a376:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a380:	45c1      	cmp	r9, r8
 800a382:	f841 3b04 	str.w	r3, [r1], #4
 800a386:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a38a:	d2e9      	bcs.n	800a360 <quorem+0xac>
 800a38c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a390:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a394:	b922      	cbnz	r2, 800a3a0 <quorem+0xec>
 800a396:	3b04      	subs	r3, #4
 800a398:	429d      	cmp	r5, r3
 800a39a:	461a      	mov	r2, r3
 800a39c:	d30a      	bcc.n	800a3b4 <quorem+0x100>
 800a39e:	613c      	str	r4, [r7, #16]
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	b003      	add	sp, #12
 800a3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a8:	6812      	ldr	r2, [r2, #0]
 800a3aa:	3b04      	subs	r3, #4
 800a3ac:	2a00      	cmp	r2, #0
 800a3ae:	d1ce      	bne.n	800a34e <quorem+0x9a>
 800a3b0:	3c01      	subs	r4, #1
 800a3b2:	e7c9      	b.n	800a348 <quorem+0x94>
 800a3b4:	6812      	ldr	r2, [r2, #0]
 800a3b6:	3b04      	subs	r3, #4
 800a3b8:	2a00      	cmp	r2, #0
 800a3ba:	d1f0      	bne.n	800a39e <quorem+0xea>
 800a3bc:	3c01      	subs	r4, #1
 800a3be:	e7eb      	b.n	800a398 <quorem+0xe4>
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	e7ee      	b.n	800a3a2 <quorem+0xee>
 800a3c4:	0000      	movs	r0, r0
	...

0800a3c8 <_dtoa_r>:
 800a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3cc:	ed2d 8b04 	vpush	{d8-d9}
 800a3d0:	69c5      	ldr	r5, [r0, #28]
 800a3d2:	b093      	sub	sp, #76	; 0x4c
 800a3d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a3d8:	ec57 6b10 	vmov	r6, r7, d0
 800a3dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a3e0:	9107      	str	r1, [sp, #28]
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	920a      	str	r2, [sp, #40]	; 0x28
 800a3e6:	930d      	str	r3, [sp, #52]	; 0x34
 800a3e8:	b975      	cbnz	r5, 800a408 <_dtoa_r+0x40>
 800a3ea:	2010      	movs	r0, #16
 800a3ec:	f000 fe2a 	bl	800b044 <malloc>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	61e0      	str	r0, [r4, #28]
 800a3f4:	b920      	cbnz	r0, 800a400 <_dtoa_r+0x38>
 800a3f6:	4bae      	ldr	r3, [pc, #696]	; (800a6b0 <_dtoa_r+0x2e8>)
 800a3f8:	21ef      	movs	r1, #239	; 0xef
 800a3fa:	48ae      	ldr	r0, [pc, #696]	; (800a6b4 <_dtoa_r+0x2ec>)
 800a3fc:	f001 fe8c 	bl	800c118 <__assert_func>
 800a400:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a404:	6005      	str	r5, [r0, #0]
 800a406:	60c5      	str	r5, [r0, #12]
 800a408:	69e3      	ldr	r3, [r4, #28]
 800a40a:	6819      	ldr	r1, [r3, #0]
 800a40c:	b151      	cbz	r1, 800a424 <_dtoa_r+0x5c>
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	604a      	str	r2, [r1, #4]
 800a412:	2301      	movs	r3, #1
 800a414:	4093      	lsls	r3, r2
 800a416:	608b      	str	r3, [r1, #8]
 800a418:	4620      	mov	r0, r4
 800a41a:	f000 ff07 	bl	800b22c <_Bfree>
 800a41e:	69e3      	ldr	r3, [r4, #28]
 800a420:	2200      	movs	r2, #0
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	1e3b      	subs	r3, r7, #0
 800a426:	bfbb      	ittet	lt
 800a428:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a42c:	9303      	strlt	r3, [sp, #12]
 800a42e:	2300      	movge	r3, #0
 800a430:	2201      	movlt	r2, #1
 800a432:	bfac      	ite	ge
 800a434:	f8c8 3000 	strge.w	r3, [r8]
 800a438:	f8c8 2000 	strlt.w	r2, [r8]
 800a43c:	4b9e      	ldr	r3, [pc, #632]	; (800a6b8 <_dtoa_r+0x2f0>)
 800a43e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a442:	ea33 0308 	bics.w	r3, r3, r8
 800a446:	d11b      	bne.n	800a480 <_dtoa_r+0xb8>
 800a448:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a44a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a44e:	6013      	str	r3, [r2, #0]
 800a450:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a454:	4333      	orrs	r3, r6
 800a456:	f000 8593 	beq.w	800af80 <_dtoa_r+0xbb8>
 800a45a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a45c:	b963      	cbnz	r3, 800a478 <_dtoa_r+0xb0>
 800a45e:	4b97      	ldr	r3, [pc, #604]	; (800a6bc <_dtoa_r+0x2f4>)
 800a460:	e027      	b.n	800a4b2 <_dtoa_r+0xea>
 800a462:	4b97      	ldr	r3, [pc, #604]	; (800a6c0 <_dtoa_r+0x2f8>)
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	3308      	adds	r3, #8
 800a468:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	9800      	ldr	r0, [sp, #0]
 800a46e:	b013      	add	sp, #76	; 0x4c
 800a470:	ecbd 8b04 	vpop	{d8-d9}
 800a474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a478:	4b90      	ldr	r3, [pc, #576]	; (800a6bc <_dtoa_r+0x2f4>)
 800a47a:	9300      	str	r3, [sp, #0]
 800a47c:	3303      	adds	r3, #3
 800a47e:	e7f3      	b.n	800a468 <_dtoa_r+0xa0>
 800a480:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a484:	2200      	movs	r2, #0
 800a486:	ec51 0b17 	vmov	r0, r1, d7
 800a48a:	eeb0 8a47 	vmov.f32	s16, s14
 800a48e:	eef0 8a67 	vmov.f32	s17, s15
 800a492:	2300      	movs	r3, #0
 800a494:	f7f6 fb30 	bl	8000af8 <__aeabi_dcmpeq>
 800a498:	4681      	mov	r9, r0
 800a49a:	b160      	cbz	r0, 800a4b6 <_dtoa_r+0xee>
 800a49c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a49e:	2301      	movs	r3, #1
 800a4a0:	6013      	str	r3, [r2, #0]
 800a4a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 8568 	beq.w	800af7a <_dtoa_r+0xbb2>
 800a4aa:	4b86      	ldr	r3, [pc, #536]	; (800a6c4 <_dtoa_r+0x2fc>)
 800a4ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	e7da      	b.n	800a46c <_dtoa_r+0xa4>
 800a4b6:	aa10      	add	r2, sp, #64	; 0x40
 800a4b8:	a911      	add	r1, sp, #68	; 0x44
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	eeb0 0a48 	vmov.f32	s0, s16
 800a4c0:	eef0 0a68 	vmov.f32	s1, s17
 800a4c4:	f001 f994 	bl	800b7f0 <__d2b>
 800a4c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a4cc:	4682      	mov	sl, r0
 800a4ce:	2d00      	cmp	r5, #0
 800a4d0:	d07f      	beq.n	800a5d2 <_dtoa_r+0x20a>
 800a4d2:	ee18 3a90 	vmov	r3, s17
 800a4d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a4de:	ec51 0b18 	vmov	r0, r1, d8
 800a4e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a4e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a4ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	4b75      	ldr	r3, [pc, #468]	; (800a6c8 <_dtoa_r+0x300>)
 800a4f4:	f7f5 fee0 	bl	80002b8 <__aeabi_dsub>
 800a4f8:	a367      	add	r3, pc, #412	; (adr r3, 800a698 <_dtoa_r+0x2d0>)
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	f7f6 f893 	bl	8000628 <__aeabi_dmul>
 800a502:	a367      	add	r3, pc, #412	; (adr r3, 800a6a0 <_dtoa_r+0x2d8>)
 800a504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a508:	f7f5 fed8 	bl	80002bc <__adddf3>
 800a50c:	4606      	mov	r6, r0
 800a50e:	4628      	mov	r0, r5
 800a510:	460f      	mov	r7, r1
 800a512:	f7f6 f81f 	bl	8000554 <__aeabi_i2d>
 800a516:	a364      	add	r3, pc, #400	; (adr r3, 800a6a8 <_dtoa_r+0x2e0>)
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	f7f6 f884 	bl	8000628 <__aeabi_dmul>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	4630      	mov	r0, r6
 800a526:	4639      	mov	r1, r7
 800a528:	f7f5 fec8 	bl	80002bc <__adddf3>
 800a52c:	4606      	mov	r6, r0
 800a52e:	460f      	mov	r7, r1
 800a530:	f7f6 fb2a 	bl	8000b88 <__aeabi_d2iz>
 800a534:	2200      	movs	r2, #0
 800a536:	4683      	mov	fp, r0
 800a538:	2300      	movs	r3, #0
 800a53a:	4630      	mov	r0, r6
 800a53c:	4639      	mov	r1, r7
 800a53e:	f7f6 fae5 	bl	8000b0c <__aeabi_dcmplt>
 800a542:	b148      	cbz	r0, 800a558 <_dtoa_r+0x190>
 800a544:	4658      	mov	r0, fp
 800a546:	f7f6 f805 	bl	8000554 <__aeabi_i2d>
 800a54a:	4632      	mov	r2, r6
 800a54c:	463b      	mov	r3, r7
 800a54e:	f7f6 fad3 	bl	8000af8 <__aeabi_dcmpeq>
 800a552:	b908      	cbnz	r0, 800a558 <_dtoa_r+0x190>
 800a554:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a558:	f1bb 0f16 	cmp.w	fp, #22
 800a55c:	d857      	bhi.n	800a60e <_dtoa_r+0x246>
 800a55e:	4b5b      	ldr	r3, [pc, #364]	; (800a6cc <_dtoa_r+0x304>)
 800a560:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a568:	ec51 0b18 	vmov	r0, r1, d8
 800a56c:	f7f6 face 	bl	8000b0c <__aeabi_dcmplt>
 800a570:	2800      	cmp	r0, #0
 800a572:	d04e      	beq.n	800a612 <_dtoa_r+0x24a>
 800a574:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a578:	2300      	movs	r3, #0
 800a57a:	930c      	str	r3, [sp, #48]	; 0x30
 800a57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a57e:	1b5b      	subs	r3, r3, r5
 800a580:	1e5a      	subs	r2, r3, #1
 800a582:	bf45      	ittet	mi
 800a584:	f1c3 0301 	rsbmi	r3, r3, #1
 800a588:	9305      	strmi	r3, [sp, #20]
 800a58a:	2300      	movpl	r3, #0
 800a58c:	2300      	movmi	r3, #0
 800a58e:	9206      	str	r2, [sp, #24]
 800a590:	bf54      	ite	pl
 800a592:	9305      	strpl	r3, [sp, #20]
 800a594:	9306      	strmi	r3, [sp, #24]
 800a596:	f1bb 0f00 	cmp.w	fp, #0
 800a59a:	db3c      	blt.n	800a616 <_dtoa_r+0x24e>
 800a59c:	9b06      	ldr	r3, [sp, #24]
 800a59e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a5a2:	445b      	add	r3, fp
 800a5a4:	9306      	str	r3, [sp, #24]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	9308      	str	r3, [sp, #32]
 800a5aa:	9b07      	ldr	r3, [sp, #28]
 800a5ac:	2b09      	cmp	r3, #9
 800a5ae:	d868      	bhi.n	800a682 <_dtoa_r+0x2ba>
 800a5b0:	2b05      	cmp	r3, #5
 800a5b2:	bfc4      	itt	gt
 800a5b4:	3b04      	subgt	r3, #4
 800a5b6:	9307      	strgt	r3, [sp, #28]
 800a5b8:	9b07      	ldr	r3, [sp, #28]
 800a5ba:	f1a3 0302 	sub.w	r3, r3, #2
 800a5be:	bfcc      	ite	gt
 800a5c0:	2500      	movgt	r5, #0
 800a5c2:	2501      	movle	r5, #1
 800a5c4:	2b03      	cmp	r3, #3
 800a5c6:	f200 8085 	bhi.w	800a6d4 <_dtoa_r+0x30c>
 800a5ca:	e8df f003 	tbb	[pc, r3]
 800a5ce:	3b2e      	.short	0x3b2e
 800a5d0:	5839      	.short	0x5839
 800a5d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a5d6:	441d      	add	r5, r3
 800a5d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a5dc:	2b20      	cmp	r3, #32
 800a5de:	bfc1      	itttt	gt
 800a5e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a5e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a5ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a5f0:	bfd6      	itet	le
 800a5f2:	f1c3 0320 	rsble	r3, r3, #32
 800a5f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a5fa:	fa06 f003 	lslle.w	r0, r6, r3
 800a5fe:	f7f5 ff99 	bl	8000534 <__aeabi_ui2d>
 800a602:	2201      	movs	r2, #1
 800a604:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a608:	3d01      	subs	r5, #1
 800a60a:	920e      	str	r2, [sp, #56]	; 0x38
 800a60c:	e76f      	b.n	800a4ee <_dtoa_r+0x126>
 800a60e:	2301      	movs	r3, #1
 800a610:	e7b3      	b.n	800a57a <_dtoa_r+0x1b2>
 800a612:	900c      	str	r0, [sp, #48]	; 0x30
 800a614:	e7b2      	b.n	800a57c <_dtoa_r+0x1b4>
 800a616:	9b05      	ldr	r3, [sp, #20]
 800a618:	eba3 030b 	sub.w	r3, r3, fp
 800a61c:	9305      	str	r3, [sp, #20]
 800a61e:	f1cb 0300 	rsb	r3, fp, #0
 800a622:	9308      	str	r3, [sp, #32]
 800a624:	2300      	movs	r3, #0
 800a626:	930b      	str	r3, [sp, #44]	; 0x2c
 800a628:	e7bf      	b.n	800a5aa <_dtoa_r+0x1e2>
 800a62a:	2300      	movs	r3, #0
 800a62c:	9309      	str	r3, [sp, #36]	; 0x24
 800a62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a630:	2b00      	cmp	r3, #0
 800a632:	dc52      	bgt.n	800a6da <_dtoa_r+0x312>
 800a634:	2301      	movs	r3, #1
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	9304      	str	r3, [sp, #16]
 800a63a:	461a      	mov	r2, r3
 800a63c:	920a      	str	r2, [sp, #40]	; 0x28
 800a63e:	e00b      	b.n	800a658 <_dtoa_r+0x290>
 800a640:	2301      	movs	r3, #1
 800a642:	e7f3      	b.n	800a62c <_dtoa_r+0x264>
 800a644:	2300      	movs	r3, #0
 800a646:	9309      	str	r3, [sp, #36]	; 0x24
 800a648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a64a:	445b      	add	r3, fp
 800a64c:	9301      	str	r3, [sp, #4]
 800a64e:	3301      	adds	r3, #1
 800a650:	2b01      	cmp	r3, #1
 800a652:	9304      	str	r3, [sp, #16]
 800a654:	bfb8      	it	lt
 800a656:	2301      	movlt	r3, #1
 800a658:	69e0      	ldr	r0, [r4, #28]
 800a65a:	2100      	movs	r1, #0
 800a65c:	2204      	movs	r2, #4
 800a65e:	f102 0614 	add.w	r6, r2, #20
 800a662:	429e      	cmp	r6, r3
 800a664:	d93d      	bls.n	800a6e2 <_dtoa_r+0x31a>
 800a666:	6041      	str	r1, [r0, #4]
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 fd9f 	bl	800b1ac <_Balloc>
 800a66e:	9000      	str	r0, [sp, #0]
 800a670:	2800      	cmp	r0, #0
 800a672:	d139      	bne.n	800a6e8 <_dtoa_r+0x320>
 800a674:	4b16      	ldr	r3, [pc, #88]	; (800a6d0 <_dtoa_r+0x308>)
 800a676:	4602      	mov	r2, r0
 800a678:	f240 11af 	movw	r1, #431	; 0x1af
 800a67c:	e6bd      	b.n	800a3fa <_dtoa_r+0x32>
 800a67e:	2301      	movs	r3, #1
 800a680:	e7e1      	b.n	800a646 <_dtoa_r+0x27e>
 800a682:	2501      	movs	r5, #1
 800a684:	2300      	movs	r3, #0
 800a686:	9307      	str	r3, [sp, #28]
 800a688:	9509      	str	r5, [sp, #36]	; 0x24
 800a68a:	f04f 33ff 	mov.w	r3, #4294967295
 800a68e:	9301      	str	r3, [sp, #4]
 800a690:	9304      	str	r3, [sp, #16]
 800a692:	2200      	movs	r2, #0
 800a694:	2312      	movs	r3, #18
 800a696:	e7d1      	b.n	800a63c <_dtoa_r+0x274>
 800a698:	636f4361 	.word	0x636f4361
 800a69c:	3fd287a7 	.word	0x3fd287a7
 800a6a0:	8b60c8b3 	.word	0x8b60c8b3
 800a6a4:	3fc68a28 	.word	0x3fc68a28
 800a6a8:	509f79fb 	.word	0x509f79fb
 800a6ac:	3fd34413 	.word	0x3fd34413
 800a6b0:	0800ca45 	.word	0x0800ca45
 800a6b4:	0800ca5c 	.word	0x0800ca5c
 800a6b8:	7ff00000 	.word	0x7ff00000
 800a6bc:	0800ca41 	.word	0x0800ca41
 800a6c0:	0800ca38 	.word	0x0800ca38
 800a6c4:	0800ca15 	.word	0x0800ca15
 800a6c8:	3ff80000 	.word	0x3ff80000
 800a6cc:	0800cb48 	.word	0x0800cb48
 800a6d0:	0800cab4 	.word	0x0800cab4
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d8:	e7d7      	b.n	800a68a <_dtoa_r+0x2c2>
 800a6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6dc:	9301      	str	r3, [sp, #4]
 800a6de:	9304      	str	r3, [sp, #16]
 800a6e0:	e7ba      	b.n	800a658 <_dtoa_r+0x290>
 800a6e2:	3101      	adds	r1, #1
 800a6e4:	0052      	lsls	r2, r2, #1
 800a6e6:	e7ba      	b.n	800a65e <_dtoa_r+0x296>
 800a6e8:	69e3      	ldr	r3, [r4, #28]
 800a6ea:	9a00      	ldr	r2, [sp, #0]
 800a6ec:	601a      	str	r2, [r3, #0]
 800a6ee:	9b04      	ldr	r3, [sp, #16]
 800a6f0:	2b0e      	cmp	r3, #14
 800a6f2:	f200 80a8 	bhi.w	800a846 <_dtoa_r+0x47e>
 800a6f6:	2d00      	cmp	r5, #0
 800a6f8:	f000 80a5 	beq.w	800a846 <_dtoa_r+0x47e>
 800a6fc:	f1bb 0f00 	cmp.w	fp, #0
 800a700:	dd38      	ble.n	800a774 <_dtoa_r+0x3ac>
 800a702:	4bc0      	ldr	r3, [pc, #768]	; (800aa04 <_dtoa_r+0x63c>)
 800a704:	f00b 020f 	and.w	r2, fp, #15
 800a708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a70c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a710:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a714:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a718:	d019      	beq.n	800a74e <_dtoa_r+0x386>
 800a71a:	4bbb      	ldr	r3, [pc, #748]	; (800aa08 <_dtoa_r+0x640>)
 800a71c:	ec51 0b18 	vmov	r0, r1, d8
 800a720:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a724:	f7f6 f8aa 	bl	800087c <__aeabi_ddiv>
 800a728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a72c:	f008 080f 	and.w	r8, r8, #15
 800a730:	2503      	movs	r5, #3
 800a732:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800aa08 <_dtoa_r+0x640>
 800a736:	f1b8 0f00 	cmp.w	r8, #0
 800a73a:	d10a      	bne.n	800a752 <_dtoa_r+0x38a>
 800a73c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a740:	4632      	mov	r2, r6
 800a742:	463b      	mov	r3, r7
 800a744:	f7f6 f89a 	bl	800087c <__aeabi_ddiv>
 800a748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a74c:	e02b      	b.n	800a7a6 <_dtoa_r+0x3de>
 800a74e:	2502      	movs	r5, #2
 800a750:	e7ef      	b.n	800a732 <_dtoa_r+0x36a>
 800a752:	f018 0f01 	tst.w	r8, #1
 800a756:	d008      	beq.n	800a76a <_dtoa_r+0x3a2>
 800a758:	4630      	mov	r0, r6
 800a75a:	4639      	mov	r1, r7
 800a75c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a760:	f7f5 ff62 	bl	8000628 <__aeabi_dmul>
 800a764:	3501      	adds	r5, #1
 800a766:	4606      	mov	r6, r0
 800a768:	460f      	mov	r7, r1
 800a76a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a76e:	f109 0908 	add.w	r9, r9, #8
 800a772:	e7e0      	b.n	800a736 <_dtoa_r+0x36e>
 800a774:	f000 809f 	beq.w	800a8b6 <_dtoa_r+0x4ee>
 800a778:	f1cb 0600 	rsb	r6, fp, #0
 800a77c:	4ba1      	ldr	r3, [pc, #644]	; (800aa04 <_dtoa_r+0x63c>)
 800a77e:	4fa2      	ldr	r7, [pc, #648]	; (800aa08 <_dtoa_r+0x640>)
 800a780:	f006 020f 	and.w	r2, r6, #15
 800a784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78c:	ec51 0b18 	vmov	r0, r1, d8
 800a790:	f7f5 ff4a 	bl	8000628 <__aeabi_dmul>
 800a794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a798:	1136      	asrs	r6, r6, #4
 800a79a:	2300      	movs	r3, #0
 800a79c:	2502      	movs	r5, #2
 800a79e:	2e00      	cmp	r6, #0
 800a7a0:	d17e      	bne.n	800a8a0 <_dtoa_r+0x4d8>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1d0      	bne.n	800a748 <_dtoa_r+0x380>
 800a7a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 8084 	beq.w	800a8ba <_dtoa_r+0x4f2>
 800a7b2:	4b96      	ldr	r3, [pc, #600]	; (800aa0c <_dtoa_r+0x644>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	f7f6 f9a7 	bl	8000b0c <__aeabi_dcmplt>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d07b      	beq.n	800a8ba <_dtoa_r+0x4f2>
 800a7c2:	9b04      	ldr	r3, [sp, #16]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d078      	beq.n	800a8ba <_dtoa_r+0x4f2>
 800a7c8:	9b01      	ldr	r3, [sp, #4]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	dd39      	ble.n	800a842 <_dtoa_r+0x47a>
 800a7ce:	4b90      	ldr	r3, [pc, #576]	; (800aa10 <_dtoa_r+0x648>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	4640      	mov	r0, r8
 800a7d4:	4649      	mov	r1, r9
 800a7d6:	f7f5 ff27 	bl	8000628 <__aeabi_dmul>
 800a7da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7de:	9e01      	ldr	r6, [sp, #4]
 800a7e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a7e4:	3501      	adds	r5, #1
 800a7e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f7f5 feb2 	bl	8000554 <__aeabi_i2d>
 800a7f0:	4642      	mov	r2, r8
 800a7f2:	464b      	mov	r3, r9
 800a7f4:	f7f5 ff18 	bl	8000628 <__aeabi_dmul>
 800a7f8:	4b86      	ldr	r3, [pc, #536]	; (800aa14 <_dtoa_r+0x64c>)
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f7f5 fd5e 	bl	80002bc <__adddf3>
 800a800:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a808:	9303      	str	r3, [sp, #12]
 800a80a:	2e00      	cmp	r6, #0
 800a80c:	d158      	bne.n	800a8c0 <_dtoa_r+0x4f8>
 800a80e:	4b82      	ldr	r3, [pc, #520]	; (800aa18 <_dtoa_r+0x650>)
 800a810:	2200      	movs	r2, #0
 800a812:	4640      	mov	r0, r8
 800a814:	4649      	mov	r1, r9
 800a816:	f7f5 fd4f 	bl	80002b8 <__aeabi_dsub>
 800a81a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a81e:	4680      	mov	r8, r0
 800a820:	4689      	mov	r9, r1
 800a822:	f7f6 f991 	bl	8000b48 <__aeabi_dcmpgt>
 800a826:	2800      	cmp	r0, #0
 800a828:	f040 8296 	bne.w	800ad58 <_dtoa_r+0x990>
 800a82c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a830:	4640      	mov	r0, r8
 800a832:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a836:	4649      	mov	r1, r9
 800a838:	f7f6 f968 	bl	8000b0c <__aeabi_dcmplt>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	f040 8289 	bne.w	800ad54 <_dtoa_r+0x98c>
 800a842:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a846:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f2c0 814e 	blt.w	800aaea <_dtoa_r+0x722>
 800a84e:	f1bb 0f0e 	cmp.w	fp, #14
 800a852:	f300 814a 	bgt.w	800aaea <_dtoa_r+0x722>
 800a856:	4b6b      	ldr	r3, [pc, #428]	; (800aa04 <_dtoa_r+0x63c>)
 800a858:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a85c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a862:	2b00      	cmp	r3, #0
 800a864:	f280 80dc 	bge.w	800aa20 <_dtoa_r+0x658>
 800a868:	9b04      	ldr	r3, [sp, #16]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f300 80d8 	bgt.w	800aa20 <_dtoa_r+0x658>
 800a870:	f040 826f 	bne.w	800ad52 <_dtoa_r+0x98a>
 800a874:	4b68      	ldr	r3, [pc, #416]	; (800aa18 <_dtoa_r+0x650>)
 800a876:	2200      	movs	r2, #0
 800a878:	4640      	mov	r0, r8
 800a87a:	4649      	mov	r1, r9
 800a87c:	f7f5 fed4 	bl	8000628 <__aeabi_dmul>
 800a880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a884:	f7f6 f956 	bl	8000b34 <__aeabi_dcmpge>
 800a888:	9e04      	ldr	r6, [sp, #16]
 800a88a:	4637      	mov	r7, r6
 800a88c:	2800      	cmp	r0, #0
 800a88e:	f040 8245 	bne.w	800ad1c <_dtoa_r+0x954>
 800a892:	9d00      	ldr	r5, [sp, #0]
 800a894:	2331      	movs	r3, #49	; 0x31
 800a896:	f805 3b01 	strb.w	r3, [r5], #1
 800a89a:	f10b 0b01 	add.w	fp, fp, #1
 800a89e:	e241      	b.n	800ad24 <_dtoa_r+0x95c>
 800a8a0:	07f2      	lsls	r2, r6, #31
 800a8a2:	d505      	bpl.n	800a8b0 <_dtoa_r+0x4e8>
 800a8a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8a8:	f7f5 febe 	bl	8000628 <__aeabi_dmul>
 800a8ac:	3501      	adds	r5, #1
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	1076      	asrs	r6, r6, #1
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	e773      	b.n	800a79e <_dtoa_r+0x3d6>
 800a8b6:	2502      	movs	r5, #2
 800a8b8:	e775      	b.n	800a7a6 <_dtoa_r+0x3de>
 800a8ba:	9e04      	ldr	r6, [sp, #16]
 800a8bc:	465f      	mov	r7, fp
 800a8be:	e792      	b.n	800a7e6 <_dtoa_r+0x41e>
 800a8c0:	9900      	ldr	r1, [sp, #0]
 800a8c2:	4b50      	ldr	r3, [pc, #320]	; (800aa04 <_dtoa_r+0x63c>)
 800a8c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8c8:	4431      	add	r1, r6
 800a8ca:	9102      	str	r1, [sp, #8]
 800a8cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8ce:	eeb0 9a47 	vmov.f32	s18, s14
 800a8d2:	eef0 9a67 	vmov.f32	s19, s15
 800a8d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a8da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8de:	2900      	cmp	r1, #0
 800a8e0:	d044      	beq.n	800a96c <_dtoa_r+0x5a4>
 800a8e2:	494e      	ldr	r1, [pc, #312]	; (800aa1c <_dtoa_r+0x654>)
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	f7f5 ffc9 	bl	800087c <__aeabi_ddiv>
 800a8ea:	ec53 2b19 	vmov	r2, r3, d9
 800a8ee:	f7f5 fce3 	bl	80002b8 <__aeabi_dsub>
 800a8f2:	9d00      	ldr	r5, [sp, #0]
 800a8f4:	ec41 0b19 	vmov	d9, r0, r1
 800a8f8:	4649      	mov	r1, r9
 800a8fa:	4640      	mov	r0, r8
 800a8fc:	f7f6 f944 	bl	8000b88 <__aeabi_d2iz>
 800a900:	4606      	mov	r6, r0
 800a902:	f7f5 fe27 	bl	8000554 <__aeabi_i2d>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4640      	mov	r0, r8
 800a90c:	4649      	mov	r1, r9
 800a90e:	f7f5 fcd3 	bl	80002b8 <__aeabi_dsub>
 800a912:	3630      	adds	r6, #48	; 0x30
 800a914:	f805 6b01 	strb.w	r6, [r5], #1
 800a918:	ec53 2b19 	vmov	r2, r3, d9
 800a91c:	4680      	mov	r8, r0
 800a91e:	4689      	mov	r9, r1
 800a920:	f7f6 f8f4 	bl	8000b0c <__aeabi_dcmplt>
 800a924:	2800      	cmp	r0, #0
 800a926:	d164      	bne.n	800a9f2 <_dtoa_r+0x62a>
 800a928:	4642      	mov	r2, r8
 800a92a:	464b      	mov	r3, r9
 800a92c:	4937      	ldr	r1, [pc, #220]	; (800aa0c <_dtoa_r+0x644>)
 800a92e:	2000      	movs	r0, #0
 800a930:	f7f5 fcc2 	bl	80002b8 <__aeabi_dsub>
 800a934:	ec53 2b19 	vmov	r2, r3, d9
 800a938:	f7f6 f8e8 	bl	8000b0c <__aeabi_dcmplt>
 800a93c:	2800      	cmp	r0, #0
 800a93e:	f040 80b6 	bne.w	800aaae <_dtoa_r+0x6e6>
 800a942:	9b02      	ldr	r3, [sp, #8]
 800a944:	429d      	cmp	r5, r3
 800a946:	f43f af7c 	beq.w	800a842 <_dtoa_r+0x47a>
 800a94a:	4b31      	ldr	r3, [pc, #196]	; (800aa10 <_dtoa_r+0x648>)
 800a94c:	ec51 0b19 	vmov	r0, r1, d9
 800a950:	2200      	movs	r2, #0
 800a952:	f7f5 fe69 	bl	8000628 <__aeabi_dmul>
 800a956:	4b2e      	ldr	r3, [pc, #184]	; (800aa10 <_dtoa_r+0x648>)
 800a958:	ec41 0b19 	vmov	d9, r0, r1
 800a95c:	2200      	movs	r2, #0
 800a95e:	4640      	mov	r0, r8
 800a960:	4649      	mov	r1, r9
 800a962:	f7f5 fe61 	bl	8000628 <__aeabi_dmul>
 800a966:	4680      	mov	r8, r0
 800a968:	4689      	mov	r9, r1
 800a96a:	e7c5      	b.n	800a8f8 <_dtoa_r+0x530>
 800a96c:	ec51 0b17 	vmov	r0, r1, d7
 800a970:	f7f5 fe5a 	bl	8000628 <__aeabi_dmul>
 800a974:	9b02      	ldr	r3, [sp, #8]
 800a976:	9d00      	ldr	r5, [sp, #0]
 800a978:	930f      	str	r3, [sp, #60]	; 0x3c
 800a97a:	ec41 0b19 	vmov	d9, r0, r1
 800a97e:	4649      	mov	r1, r9
 800a980:	4640      	mov	r0, r8
 800a982:	f7f6 f901 	bl	8000b88 <__aeabi_d2iz>
 800a986:	4606      	mov	r6, r0
 800a988:	f7f5 fde4 	bl	8000554 <__aeabi_i2d>
 800a98c:	3630      	adds	r6, #48	; 0x30
 800a98e:	4602      	mov	r2, r0
 800a990:	460b      	mov	r3, r1
 800a992:	4640      	mov	r0, r8
 800a994:	4649      	mov	r1, r9
 800a996:	f7f5 fc8f 	bl	80002b8 <__aeabi_dsub>
 800a99a:	f805 6b01 	strb.w	r6, [r5], #1
 800a99e:	9b02      	ldr	r3, [sp, #8]
 800a9a0:	429d      	cmp	r5, r3
 800a9a2:	4680      	mov	r8, r0
 800a9a4:	4689      	mov	r9, r1
 800a9a6:	f04f 0200 	mov.w	r2, #0
 800a9aa:	d124      	bne.n	800a9f6 <_dtoa_r+0x62e>
 800a9ac:	4b1b      	ldr	r3, [pc, #108]	; (800aa1c <_dtoa_r+0x654>)
 800a9ae:	ec51 0b19 	vmov	r0, r1, d9
 800a9b2:	f7f5 fc83 	bl	80002bc <__adddf3>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	4649      	mov	r1, r9
 800a9be:	f7f6 f8c3 	bl	8000b48 <__aeabi_dcmpgt>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d173      	bne.n	800aaae <_dtoa_r+0x6e6>
 800a9c6:	ec53 2b19 	vmov	r2, r3, d9
 800a9ca:	4914      	ldr	r1, [pc, #80]	; (800aa1c <_dtoa_r+0x654>)
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	f7f5 fc73 	bl	80002b8 <__aeabi_dsub>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4640      	mov	r0, r8
 800a9d8:	4649      	mov	r1, r9
 800a9da:	f7f6 f897 	bl	8000b0c <__aeabi_dcmplt>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	f43f af2f 	beq.w	800a842 <_dtoa_r+0x47a>
 800a9e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a9e6:	1e6b      	subs	r3, r5, #1
 800a9e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a9ee:	2b30      	cmp	r3, #48	; 0x30
 800a9f0:	d0f8      	beq.n	800a9e4 <_dtoa_r+0x61c>
 800a9f2:	46bb      	mov	fp, r7
 800a9f4:	e04a      	b.n	800aa8c <_dtoa_r+0x6c4>
 800a9f6:	4b06      	ldr	r3, [pc, #24]	; (800aa10 <_dtoa_r+0x648>)
 800a9f8:	f7f5 fe16 	bl	8000628 <__aeabi_dmul>
 800a9fc:	4680      	mov	r8, r0
 800a9fe:	4689      	mov	r9, r1
 800aa00:	e7bd      	b.n	800a97e <_dtoa_r+0x5b6>
 800aa02:	bf00      	nop
 800aa04:	0800cb48 	.word	0x0800cb48
 800aa08:	0800cb20 	.word	0x0800cb20
 800aa0c:	3ff00000 	.word	0x3ff00000
 800aa10:	40240000 	.word	0x40240000
 800aa14:	401c0000 	.word	0x401c0000
 800aa18:	40140000 	.word	0x40140000
 800aa1c:	3fe00000 	.word	0x3fe00000
 800aa20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa24:	9d00      	ldr	r5, [sp, #0]
 800aa26:	4642      	mov	r2, r8
 800aa28:	464b      	mov	r3, r9
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	f7f5 ff25 	bl	800087c <__aeabi_ddiv>
 800aa32:	f7f6 f8a9 	bl	8000b88 <__aeabi_d2iz>
 800aa36:	9001      	str	r0, [sp, #4]
 800aa38:	f7f5 fd8c 	bl	8000554 <__aeabi_i2d>
 800aa3c:	4642      	mov	r2, r8
 800aa3e:	464b      	mov	r3, r9
 800aa40:	f7f5 fdf2 	bl	8000628 <__aeabi_dmul>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4630      	mov	r0, r6
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	f7f5 fc34 	bl	80002b8 <__aeabi_dsub>
 800aa50:	9e01      	ldr	r6, [sp, #4]
 800aa52:	9f04      	ldr	r7, [sp, #16]
 800aa54:	3630      	adds	r6, #48	; 0x30
 800aa56:	f805 6b01 	strb.w	r6, [r5], #1
 800aa5a:	9e00      	ldr	r6, [sp, #0]
 800aa5c:	1bae      	subs	r6, r5, r6
 800aa5e:	42b7      	cmp	r7, r6
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	d134      	bne.n	800aad0 <_dtoa_r+0x708>
 800aa66:	f7f5 fc29 	bl	80002bc <__adddf3>
 800aa6a:	4642      	mov	r2, r8
 800aa6c:	464b      	mov	r3, r9
 800aa6e:	4606      	mov	r6, r0
 800aa70:	460f      	mov	r7, r1
 800aa72:	f7f6 f869 	bl	8000b48 <__aeabi_dcmpgt>
 800aa76:	b9c8      	cbnz	r0, 800aaac <_dtoa_r+0x6e4>
 800aa78:	4642      	mov	r2, r8
 800aa7a:	464b      	mov	r3, r9
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	4639      	mov	r1, r7
 800aa80:	f7f6 f83a 	bl	8000af8 <__aeabi_dcmpeq>
 800aa84:	b110      	cbz	r0, 800aa8c <_dtoa_r+0x6c4>
 800aa86:	9b01      	ldr	r3, [sp, #4]
 800aa88:	07db      	lsls	r3, r3, #31
 800aa8a:	d40f      	bmi.n	800aaac <_dtoa_r+0x6e4>
 800aa8c:	4651      	mov	r1, sl
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f000 fbcc 	bl	800b22c <_Bfree>
 800aa94:	2300      	movs	r3, #0
 800aa96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa98:	702b      	strb	r3, [r5, #0]
 800aa9a:	f10b 0301 	add.w	r3, fp, #1
 800aa9e:	6013      	str	r3, [r2, #0]
 800aaa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f43f ace2 	beq.w	800a46c <_dtoa_r+0xa4>
 800aaa8:	601d      	str	r5, [r3, #0]
 800aaaa:	e4df      	b.n	800a46c <_dtoa_r+0xa4>
 800aaac:	465f      	mov	r7, fp
 800aaae:	462b      	mov	r3, r5
 800aab0:	461d      	mov	r5, r3
 800aab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aab6:	2a39      	cmp	r2, #57	; 0x39
 800aab8:	d106      	bne.n	800aac8 <_dtoa_r+0x700>
 800aaba:	9a00      	ldr	r2, [sp, #0]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d1f7      	bne.n	800aab0 <_dtoa_r+0x6e8>
 800aac0:	9900      	ldr	r1, [sp, #0]
 800aac2:	2230      	movs	r2, #48	; 0x30
 800aac4:	3701      	adds	r7, #1
 800aac6:	700a      	strb	r2, [r1, #0]
 800aac8:	781a      	ldrb	r2, [r3, #0]
 800aaca:	3201      	adds	r2, #1
 800aacc:	701a      	strb	r2, [r3, #0]
 800aace:	e790      	b.n	800a9f2 <_dtoa_r+0x62a>
 800aad0:	4ba3      	ldr	r3, [pc, #652]	; (800ad60 <_dtoa_r+0x998>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	f7f5 fda8 	bl	8000628 <__aeabi_dmul>
 800aad8:	2200      	movs	r2, #0
 800aada:	2300      	movs	r3, #0
 800aadc:	4606      	mov	r6, r0
 800aade:	460f      	mov	r7, r1
 800aae0:	f7f6 f80a 	bl	8000af8 <__aeabi_dcmpeq>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d09e      	beq.n	800aa26 <_dtoa_r+0x65e>
 800aae8:	e7d0      	b.n	800aa8c <_dtoa_r+0x6c4>
 800aaea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaec:	2a00      	cmp	r2, #0
 800aaee:	f000 80ca 	beq.w	800ac86 <_dtoa_r+0x8be>
 800aaf2:	9a07      	ldr	r2, [sp, #28]
 800aaf4:	2a01      	cmp	r2, #1
 800aaf6:	f300 80ad 	bgt.w	800ac54 <_dtoa_r+0x88c>
 800aafa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aafc:	2a00      	cmp	r2, #0
 800aafe:	f000 80a5 	beq.w	800ac4c <_dtoa_r+0x884>
 800ab02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab06:	9e08      	ldr	r6, [sp, #32]
 800ab08:	9d05      	ldr	r5, [sp, #20]
 800ab0a:	9a05      	ldr	r2, [sp, #20]
 800ab0c:	441a      	add	r2, r3
 800ab0e:	9205      	str	r2, [sp, #20]
 800ab10:	9a06      	ldr	r2, [sp, #24]
 800ab12:	2101      	movs	r1, #1
 800ab14:	441a      	add	r2, r3
 800ab16:	4620      	mov	r0, r4
 800ab18:	9206      	str	r2, [sp, #24]
 800ab1a:	f000 fc3d 	bl	800b398 <__i2b>
 800ab1e:	4607      	mov	r7, r0
 800ab20:	b165      	cbz	r5, 800ab3c <_dtoa_r+0x774>
 800ab22:	9b06      	ldr	r3, [sp, #24]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	dd09      	ble.n	800ab3c <_dtoa_r+0x774>
 800ab28:	42ab      	cmp	r3, r5
 800ab2a:	9a05      	ldr	r2, [sp, #20]
 800ab2c:	bfa8      	it	ge
 800ab2e:	462b      	movge	r3, r5
 800ab30:	1ad2      	subs	r2, r2, r3
 800ab32:	9205      	str	r2, [sp, #20]
 800ab34:	9a06      	ldr	r2, [sp, #24]
 800ab36:	1aed      	subs	r5, r5, r3
 800ab38:	1ad3      	subs	r3, r2, r3
 800ab3a:	9306      	str	r3, [sp, #24]
 800ab3c:	9b08      	ldr	r3, [sp, #32]
 800ab3e:	b1f3      	cbz	r3, 800ab7e <_dtoa_r+0x7b6>
 800ab40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f000 80a3 	beq.w	800ac8e <_dtoa_r+0x8c6>
 800ab48:	2e00      	cmp	r6, #0
 800ab4a:	dd10      	ble.n	800ab6e <_dtoa_r+0x7a6>
 800ab4c:	4639      	mov	r1, r7
 800ab4e:	4632      	mov	r2, r6
 800ab50:	4620      	mov	r0, r4
 800ab52:	f000 fce1 	bl	800b518 <__pow5mult>
 800ab56:	4652      	mov	r2, sl
 800ab58:	4601      	mov	r1, r0
 800ab5a:	4607      	mov	r7, r0
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f000 fc31 	bl	800b3c4 <__multiply>
 800ab62:	4651      	mov	r1, sl
 800ab64:	4680      	mov	r8, r0
 800ab66:	4620      	mov	r0, r4
 800ab68:	f000 fb60 	bl	800b22c <_Bfree>
 800ab6c:	46c2      	mov	sl, r8
 800ab6e:	9b08      	ldr	r3, [sp, #32]
 800ab70:	1b9a      	subs	r2, r3, r6
 800ab72:	d004      	beq.n	800ab7e <_dtoa_r+0x7b6>
 800ab74:	4651      	mov	r1, sl
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 fcce 	bl	800b518 <__pow5mult>
 800ab7c:	4682      	mov	sl, r0
 800ab7e:	2101      	movs	r1, #1
 800ab80:	4620      	mov	r0, r4
 800ab82:	f000 fc09 	bl	800b398 <__i2b>
 800ab86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	f340 8081 	ble.w	800ac92 <_dtoa_r+0x8ca>
 800ab90:	461a      	mov	r2, r3
 800ab92:	4601      	mov	r1, r0
 800ab94:	4620      	mov	r0, r4
 800ab96:	f000 fcbf 	bl	800b518 <__pow5mult>
 800ab9a:	9b07      	ldr	r3, [sp, #28]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	4606      	mov	r6, r0
 800aba0:	dd7a      	ble.n	800ac98 <_dtoa_r+0x8d0>
 800aba2:	f04f 0800 	mov.w	r8, #0
 800aba6:	6933      	ldr	r3, [r6, #16]
 800aba8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800abac:	6918      	ldr	r0, [r3, #16]
 800abae:	f000 fba5 	bl	800b2fc <__hi0bits>
 800abb2:	f1c0 0020 	rsb	r0, r0, #32
 800abb6:	9b06      	ldr	r3, [sp, #24]
 800abb8:	4418      	add	r0, r3
 800abba:	f010 001f 	ands.w	r0, r0, #31
 800abbe:	f000 8094 	beq.w	800acea <_dtoa_r+0x922>
 800abc2:	f1c0 0320 	rsb	r3, r0, #32
 800abc6:	2b04      	cmp	r3, #4
 800abc8:	f340 8085 	ble.w	800acd6 <_dtoa_r+0x90e>
 800abcc:	9b05      	ldr	r3, [sp, #20]
 800abce:	f1c0 001c 	rsb	r0, r0, #28
 800abd2:	4403      	add	r3, r0
 800abd4:	9305      	str	r3, [sp, #20]
 800abd6:	9b06      	ldr	r3, [sp, #24]
 800abd8:	4403      	add	r3, r0
 800abda:	4405      	add	r5, r0
 800abdc:	9306      	str	r3, [sp, #24]
 800abde:	9b05      	ldr	r3, [sp, #20]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	dd05      	ble.n	800abf0 <_dtoa_r+0x828>
 800abe4:	4651      	mov	r1, sl
 800abe6:	461a      	mov	r2, r3
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 fcef 	bl	800b5cc <__lshift>
 800abee:	4682      	mov	sl, r0
 800abf0:	9b06      	ldr	r3, [sp, #24]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	dd05      	ble.n	800ac02 <_dtoa_r+0x83a>
 800abf6:	4631      	mov	r1, r6
 800abf8:	461a      	mov	r2, r3
 800abfa:	4620      	mov	r0, r4
 800abfc:	f000 fce6 	bl	800b5cc <__lshift>
 800ac00:	4606      	mov	r6, r0
 800ac02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d072      	beq.n	800acee <_dtoa_r+0x926>
 800ac08:	4631      	mov	r1, r6
 800ac0a:	4650      	mov	r0, sl
 800ac0c:	f000 fd4a 	bl	800b6a4 <__mcmp>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	da6c      	bge.n	800acee <_dtoa_r+0x926>
 800ac14:	2300      	movs	r3, #0
 800ac16:	4651      	mov	r1, sl
 800ac18:	220a      	movs	r2, #10
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f000 fb28 	bl	800b270 <__multadd>
 800ac20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac26:	4682      	mov	sl, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f000 81b0 	beq.w	800af8e <_dtoa_r+0xbc6>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	4639      	mov	r1, r7
 800ac32:	220a      	movs	r2, #10
 800ac34:	4620      	mov	r0, r4
 800ac36:	f000 fb1b 	bl	800b270 <__multadd>
 800ac3a:	9b01      	ldr	r3, [sp, #4]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	4607      	mov	r7, r0
 800ac40:	f300 8096 	bgt.w	800ad70 <_dtoa_r+0x9a8>
 800ac44:	9b07      	ldr	r3, [sp, #28]
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	dc59      	bgt.n	800acfe <_dtoa_r+0x936>
 800ac4a:	e091      	b.n	800ad70 <_dtoa_r+0x9a8>
 800ac4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac52:	e758      	b.n	800ab06 <_dtoa_r+0x73e>
 800ac54:	9b04      	ldr	r3, [sp, #16]
 800ac56:	1e5e      	subs	r6, r3, #1
 800ac58:	9b08      	ldr	r3, [sp, #32]
 800ac5a:	42b3      	cmp	r3, r6
 800ac5c:	bfbf      	itttt	lt
 800ac5e:	9b08      	ldrlt	r3, [sp, #32]
 800ac60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ac62:	9608      	strlt	r6, [sp, #32]
 800ac64:	1af3      	sublt	r3, r6, r3
 800ac66:	bfb4      	ite	lt
 800ac68:	18d2      	addlt	r2, r2, r3
 800ac6a:	1b9e      	subge	r6, r3, r6
 800ac6c:	9b04      	ldr	r3, [sp, #16]
 800ac6e:	bfbc      	itt	lt
 800ac70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ac72:	2600      	movlt	r6, #0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	bfb7      	itett	lt
 800ac78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ac7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ac80:	1a9d      	sublt	r5, r3, r2
 800ac82:	2300      	movlt	r3, #0
 800ac84:	e741      	b.n	800ab0a <_dtoa_r+0x742>
 800ac86:	9e08      	ldr	r6, [sp, #32]
 800ac88:	9d05      	ldr	r5, [sp, #20]
 800ac8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ac8c:	e748      	b.n	800ab20 <_dtoa_r+0x758>
 800ac8e:	9a08      	ldr	r2, [sp, #32]
 800ac90:	e770      	b.n	800ab74 <_dtoa_r+0x7ac>
 800ac92:	9b07      	ldr	r3, [sp, #28]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	dc19      	bgt.n	800accc <_dtoa_r+0x904>
 800ac98:	9b02      	ldr	r3, [sp, #8]
 800ac9a:	b9bb      	cbnz	r3, 800accc <_dtoa_r+0x904>
 800ac9c:	9b03      	ldr	r3, [sp, #12]
 800ac9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aca2:	b99b      	cbnz	r3, 800accc <_dtoa_r+0x904>
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acaa:	0d1b      	lsrs	r3, r3, #20
 800acac:	051b      	lsls	r3, r3, #20
 800acae:	b183      	cbz	r3, 800acd2 <_dtoa_r+0x90a>
 800acb0:	9b05      	ldr	r3, [sp, #20]
 800acb2:	3301      	adds	r3, #1
 800acb4:	9305      	str	r3, [sp, #20]
 800acb6:	9b06      	ldr	r3, [sp, #24]
 800acb8:	3301      	adds	r3, #1
 800acba:	9306      	str	r3, [sp, #24]
 800acbc:	f04f 0801 	mov.w	r8, #1
 800acc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f47f af6f 	bne.w	800aba6 <_dtoa_r+0x7de>
 800acc8:	2001      	movs	r0, #1
 800acca:	e774      	b.n	800abb6 <_dtoa_r+0x7ee>
 800accc:	f04f 0800 	mov.w	r8, #0
 800acd0:	e7f6      	b.n	800acc0 <_dtoa_r+0x8f8>
 800acd2:	4698      	mov	r8, r3
 800acd4:	e7f4      	b.n	800acc0 <_dtoa_r+0x8f8>
 800acd6:	d082      	beq.n	800abde <_dtoa_r+0x816>
 800acd8:	9a05      	ldr	r2, [sp, #20]
 800acda:	331c      	adds	r3, #28
 800acdc:	441a      	add	r2, r3
 800acde:	9205      	str	r2, [sp, #20]
 800ace0:	9a06      	ldr	r2, [sp, #24]
 800ace2:	441a      	add	r2, r3
 800ace4:	441d      	add	r5, r3
 800ace6:	9206      	str	r2, [sp, #24]
 800ace8:	e779      	b.n	800abde <_dtoa_r+0x816>
 800acea:	4603      	mov	r3, r0
 800acec:	e7f4      	b.n	800acd8 <_dtoa_r+0x910>
 800acee:	9b04      	ldr	r3, [sp, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	dc37      	bgt.n	800ad64 <_dtoa_r+0x99c>
 800acf4:	9b07      	ldr	r3, [sp, #28]
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	dd34      	ble.n	800ad64 <_dtoa_r+0x99c>
 800acfa:	9b04      	ldr	r3, [sp, #16]
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	9b01      	ldr	r3, [sp, #4]
 800ad00:	b963      	cbnz	r3, 800ad1c <_dtoa_r+0x954>
 800ad02:	4631      	mov	r1, r6
 800ad04:	2205      	movs	r2, #5
 800ad06:	4620      	mov	r0, r4
 800ad08:	f000 fab2 	bl	800b270 <__multadd>
 800ad0c:	4601      	mov	r1, r0
 800ad0e:	4606      	mov	r6, r0
 800ad10:	4650      	mov	r0, sl
 800ad12:	f000 fcc7 	bl	800b6a4 <__mcmp>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	f73f adbb 	bgt.w	800a892 <_dtoa_r+0x4ca>
 800ad1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad1e:	9d00      	ldr	r5, [sp, #0]
 800ad20:	ea6f 0b03 	mvn.w	fp, r3
 800ad24:	f04f 0800 	mov.w	r8, #0
 800ad28:	4631      	mov	r1, r6
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 fa7e 	bl	800b22c <_Bfree>
 800ad30:	2f00      	cmp	r7, #0
 800ad32:	f43f aeab 	beq.w	800aa8c <_dtoa_r+0x6c4>
 800ad36:	f1b8 0f00 	cmp.w	r8, #0
 800ad3a:	d005      	beq.n	800ad48 <_dtoa_r+0x980>
 800ad3c:	45b8      	cmp	r8, r7
 800ad3e:	d003      	beq.n	800ad48 <_dtoa_r+0x980>
 800ad40:	4641      	mov	r1, r8
 800ad42:	4620      	mov	r0, r4
 800ad44:	f000 fa72 	bl	800b22c <_Bfree>
 800ad48:	4639      	mov	r1, r7
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 fa6e 	bl	800b22c <_Bfree>
 800ad50:	e69c      	b.n	800aa8c <_dtoa_r+0x6c4>
 800ad52:	2600      	movs	r6, #0
 800ad54:	4637      	mov	r7, r6
 800ad56:	e7e1      	b.n	800ad1c <_dtoa_r+0x954>
 800ad58:	46bb      	mov	fp, r7
 800ad5a:	4637      	mov	r7, r6
 800ad5c:	e599      	b.n	800a892 <_dtoa_r+0x4ca>
 800ad5e:	bf00      	nop
 800ad60:	40240000 	.word	0x40240000
 800ad64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f000 80c8 	beq.w	800aefc <_dtoa_r+0xb34>
 800ad6c:	9b04      	ldr	r3, [sp, #16]
 800ad6e:	9301      	str	r3, [sp, #4]
 800ad70:	2d00      	cmp	r5, #0
 800ad72:	dd05      	ble.n	800ad80 <_dtoa_r+0x9b8>
 800ad74:	4639      	mov	r1, r7
 800ad76:	462a      	mov	r2, r5
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f000 fc27 	bl	800b5cc <__lshift>
 800ad7e:	4607      	mov	r7, r0
 800ad80:	f1b8 0f00 	cmp.w	r8, #0
 800ad84:	d05b      	beq.n	800ae3e <_dtoa_r+0xa76>
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f000 fa0f 	bl	800b1ac <_Balloc>
 800ad8e:	4605      	mov	r5, r0
 800ad90:	b928      	cbnz	r0, 800ad9e <_dtoa_r+0x9d6>
 800ad92:	4b83      	ldr	r3, [pc, #524]	; (800afa0 <_dtoa_r+0xbd8>)
 800ad94:	4602      	mov	r2, r0
 800ad96:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ad9a:	f7ff bb2e 	b.w	800a3fa <_dtoa_r+0x32>
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	3202      	adds	r2, #2
 800ada2:	0092      	lsls	r2, r2, #2
 800ada4:	f107 010c 	add.w	r1, r7, #12
 800ada8:	300c      	adds	r0, #12
 800adaa:	f001 f9a7 	bl	800c0fc <memcpy>
 800adae:	2201      	movs	r2, #1
 800adb0:	4629      	mov	r1, r5
 800adb2:	4620      	mov	r0, r4
 800adb4:	f000 fc0a 	bl	800b5cc <__lshift>
 800adb8:	9b00      	ldr	r3, [sp, #0]
 800adba:	3301      	adds	r3, #1
 800adbc:	9304      	str	r3, [sp, #16]
 800adbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adc2:	4413      	add	r3, r2
 800adc4:	9308      	str	r3, [sp, #32]
 800adc6:	9b02      	ldr	r3, [sp, #8]
 800adc8:	f003 0301 	and.w	r3, r3, #1
 800adcc:	46b8      	mov	r8, r7
 800adce:	9306      	str	r3, [sp, #24]
 800add0:	4607      	mov	r7, r0
 800add2:	9b04      	ldr	r3, [sp, #16]
 800add4:	4631      	mov	r1, r6
 800add6:	3b01      	subs	r3, #1
 800add8:	4650      	mov	r0, sl
 800adda:	9301      	str	r3, [sp, #4]
 800addc:	f7ff fa6a 	bl	800a2b4 <quorem>
 800ade0:	4641      	mov	r1, r8
 800ade2:	9002      	str	r0, [sp, #8]
 800ade4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ade8:	4650      	mov	r0, sl
 800adea:	f000 fc5b 	bl	800b6a4 <__mcmp>
 800adee:	463a      	mov	r2, r7
 800adf0:	9005      	str	r0, [sp, #20]
 800adf2:	4631      	mov	r1, r6
 800adf4:	4620      	mov	r0, r4
 800adf6:	f000 fc71 	bl	800b6dc <__mdiff>
 800adfa:	68c2      	ldr	r2, [r0, #12]
 800adfc:	4605      	mov	r5, r0
 800adfe:	bb02      	cbnz	r2, 800ae42 <_dtoa_r+0xa7a>
 800ae00:	4601      	mov	r1, r0
 800ae02:	4650      	mov	r0, sl
 800ae04:	f000 fc4e 	bl	800b6a4 <__mcmp>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ae10:	f000 fa0c 	bl	800b22c <_Bfree>
 800ae14:	9b07      	ldr	r3, [sp, #28]
 800ae16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae18:	9d04      	ldr	r5, [sp, #16]
 800ae1a:	ea43 0102 	orr.w	r1, r3, r2
 800ae1e:	9b06      	ldr	r3, [sp, #24]
 800ae20:	4319      	orrs	r1, r3
 800ae22:	d110      	bne.n	800ae46 <_dtoa_r+0xa7e>
 800ae24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ae28:	d029      	beq.n	800ae7e <_dtoa_r+0xab6>
 800ae2a:	9b05      	ldr	r3, [sp, #20]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	dd02      	ble.n	800ae36 <_dtoa_r+0xa6e>
 800ae30:	9b02      	ldr	r3, [sp, #8]
 800ae32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ae36:	9b01      	ldr	r3, [sp, #4]
 800ae38:	f883 9000 	strb.w	r9, [r3]
 800ae3c:	e774      	b.n	800ad28 <_dtoa_r+0x960>
 800ae3e:	4638      	mov	r0, r7
 800ae40:	e7ba      	b.n	800adb8 <_dtoa_r+0x9f0>
 800ae42:	2201      	movs	r2, #1
 800ae44:	e7e1      	b.n	800ae0a <_dtoa_r+0xa42>
 800ae46:	9b05      	ldr	r3, [sp, #20]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	db04      	blt.n	800ae56 <_dtoa_r+0xa8e>
 800ae4c:	9907      	ldr	r1, [sp, #28]
 800ae4e:	430b      	orrs	r3, r1
 800ae50:	9906      	ldr	r1, [sp, #24]
 800ae52:	430b      	orrs	r3, r1
 800ae54:	d120      	bne.n	800ae98 <_dtoa_r+0xad0>
 800ae56:	2a00      	cmp	r2, #0
 800ae58:	dded      	ble.n	800ae36 <_dtoa_r+0xa6e>
 800ae5a:	4651      	mov	r1, sl
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f000 fbb4 	bl	800b5cc <__lshift>
 800ae64:	4631      	mov	r1, r6
 800ae66:	4682      	mov	sl, r0
 800ae68:	f000 fc1c 	bl	800b6a4 <__mcmp>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	dc03      	bgt.n	800ae78 <_dtoa_r+0xab0>
 800ae70:	d1e1      	bne.n	800ae36 <_dtoa_r+0xa6e>
 800ae72:	f019 0f01 	tst.w	r9, #1
 800ae76:	d0de      	beq.n	800ae36 <_dtoa_r+0xa6e>
 800ae78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ae7c:	d1d8      	bne.n	800ae30 <_dtoa_r+0xa68>
 800ae7e:	9a01      	ldr	r2, [sp, #4]
 800ae80:	2339      	movs	r3, #57	; 0x39
 800ae82:	7013      	strb	r3, [r2, #0]
 800ae84:	462b      	mov	r3, r5
 800ae86:	461d      	mov	r5, r3
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae8e:	2a39      	cmp	r2, #57	; 0x39
 800ae90:	d06c      	beq.n	800af6c <_dtoa_r+0xba4>
 800ae92:	3201      	adds	r2, #1
 800ae94:	701a      	strb	r2, [r3, #0]
 800ae96:	e747      	b.n	800ad28 <_dtoa_r+0x960>
 800ae98:	2a00      	cmp	r2, #0
 800ae9a:	dd07      	ble.n	800aeac <_dtoa_r+0xae4>
 800ae9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aea0:	d0ed      	beq.n	800ae7e <_dtoa_r+0xab6>
 800aea2:	9a01      	ldr	r2, [sp, #4]
 800aea4:	f109 0301 	add.w	r3, r9, #1
 800aea8:	7013      	strb	r3, [r2, #0]
 800aeaa:	e73d      	b.n	800ad28 <_dtoa_r+0x960>
 800aeac:	9b04      	ldr	r3, [sp, #16]
 800aeae:	9a08      	ldr	r2, [sp, #32]
 800aeb0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d043      	beq.n	800af40 <_dtoa_r+0xb78>
 800aeb8:	4651      	mov	r1, sl
 800aeba:	2300      	movs	r3, #0
 800aebc:	220a      	movs	r2, #10
 800aebe:	4620      	mov	r0, r4
 800aec0:	f000 f9d6 	bl	800b270 <__multadd>
 800aec4:	45b8      	cmp	r8, r7
 800aec6:	4682      	mov	sl, r0
 800aec8:	f04f 0300 	mov.w	r3, #0
 800aecc:	f04f 020a 	mov.w	r2, #10
 800aed0:	4641      	mov	r1, r8
 800aed2:	4620      	mov	r0, r4
 800aed4:	d107      	bne.n	800aee6 <_dtoa_r+0xb1e>
 800aed6:	f000 f9cb 	bl	800b270 <__multadd>
 800aeda:	4680      	mov	r8, r0
 800aedc:	4607      	mov	r7, r0
 800aede:	9b04      	ldr	r3, [sp, #16]
 800aee0:	3301      	adds	r3, #1
 800aee2:	9304      	str	r3, [sp, #16]
 800aee4:	e775      	b.n	800add2 <_dtoa_r+0xa0a>
 800aee6:	f000 f9c3 	bl	800b270 <__multadd>
 800aeea:	4639      	mov	r1, r7
 800aeec:	4680      	mov	r8, r0
 800aeee:	2300      	movs	r3, #0
 800aef0:	220a      	movs	r2, #10
 800aef2:	4620      	mov	r0, r4
 800aef4:	f000 f9bc 	bl	800b270 <__multadd>
 800aef8:	4607      	mov	r7, r0
 800aefa:	e7f0      	b.n	800aede <_dtoa_r+0xb16>
 800aefc:	9b04      	ldr	r3, [sp, #16]
 800aefe:	9301      	str	r3, [sp, #4]
 800af00:	9d00      	ldr	r5, [sp, #0]
 800af02:	4631      	mov	r1, r6
 800af04:	4650      	mov	r0, sl
 800af06:	f7ff f9d5 	bl	800a2b4 <quorem>
 800af0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800af0e:	9b00      	ldr	r3, [sp, #0]
 800af10:	f805 9b01 	strb.w	r9, [r5], #1
 800af14:	1aea      	subs	r2, r5, r3
 800af16:	9b01      	ldr	r3, [sp, #4]
 800af18:	4293      	cmp	r3, r2
 800af1a:	dd07      	ble.n	800af2c <_dtoa_r+0xb64>
 800af1c:	4651      	mov	r1, sl
 800af1e:	2300      	movs	r3, #0
 800af20:	220a      	movs	r2, #10
 800af22:	4620      	mov	r0, r4
 800af24:	f000 f9a4 	bl	800b270 <__multadd>
 800af28:	4682      	mov	sl, r0
 800af2a:	e7ea      	b.n	800af02 <_dtoa_r+0xb3a>
 800af2c:	9b01      	ldr	r3, [sp, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	bfc8      	it	gt
 800af32:	461d      	movgt	r5, r3
 800af34:	9b00      	ldr	r3, [sp, #0]
 800af36:	bfd8      	it	le
 800af38:	2501      	movle	r5, #1
 800af3a:	441d      	add	r5, r3
 800af3c:	f04f 0800 	mov.w	r8, #0
 800af40:	4651      	mov	r1, sl
 800af42:	2201      	movs	r2, #1
 800af44:	4620      	mov	r0, r4
 800af46:	f000 fb41 	bl	800b5cc <__lshift>
 800af4a:	4631      	mov	r1, r6
 800af4c:	4682      	mov	sl, r0
 800af4e:	f000 fba9 	bl	800b6a4 <__mcmp>
 800af52:	2800      	cmp	r0, #0
 800af54:	dc96      	bgt.n	800ae84 <_dtoa_r+0xabc>
 800af56:	d102      	bne.n	800af5e <_dtoa_r+0xb96>
 800af58:	f019 0f01 	tst.w	r9, #1
 800af5c:	d192      	bne.n	800ae84 <_dtoa_r+0xabc>
 800af5e:	462b      	mov	r3, r5
 800af60:	461d      	mov	r5, r3
 800af62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af66:	2a30      	cmp	r2, #48	; 0x30
 800af68:	d0fa      	beq.n	800af60 <_dtoa_r+0xb98>
 800af6a:	e6dd      	b.n	800ad28 <_dtoa_r+0x960>
 800af6c:	9a00      	ldr	r2, [sp, #0]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d189      	bne.n	800ae86 <_dtoa_r+0xabe>
 800af72:	f10b 0b01 	add.w	fp, fp, #1
 800af76:	2331      	movs	r3, #49	; 0x31
 800af78:	e796      	b.n	800aea8 <_dtoa_r+0xae0>
 800af7a:	4b0a      	ldr	r3, [pc, #40]	; (800afa4 <_dtoa_r+0xbdc>)
 800af7c:	f7ff ba99 	b.w	800a4b2 <_dtoa_r+0xea>
 800af80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af82:	2b00      	cmp	r3, #0
 800af84:	f47f aa6d 	bne.w	800a462 <_dtoa_r+0x9a>
 800af88:	4b07      	ldr	r3, [pc, #28]	; (800afa8 <_dtoa_r+0xbe0>)
 800af8a:	f7ff ba92 	b.w	800a4b2 <_dtoa_r+0xea>
 800af8e:	9b01      	ldr	r3, [sp, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	dcb5      	bgt.n	800af00 <_dtoa_r+0xb38>
 800af94:	9b07      	ldr	r3, [sp, #28]
 800af96:	2b02      	cmp	r3, #2
 800af98:	f73f aeb1 	bgt.w	800acfe <_dtoa_r+0x936>
 800af9c:	e7b0      	b.n	800af00 <_dtoa_r+0xb38>
 800af9e:	bf00      	nop
 800afa0:	0800cab4 	.word	0x0800cab4
 800afa4:	0800ca14 	.word	0x0800ca14
 800afa8:	0800ca38 	.word	0x0800ca38

0800afac <_free_r>:
 800afac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afae:	2900      	cmp	r1, #0
 800afb0:	d044      	beq.n	800b03c <_free_r+0x90>
 800afb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afb6:	9001      	str	r0, [sp, #4]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f1a1 0404 	sub.w	r4, r1, #4
 800afbe:	bfb8      	it	lt
 800afc0:	18e4      	addlt	r4, r4, r3
 800afc2:	f000 f8e7 	bl	800b194 <__malloc_lock>
 800afc6:	4a1e      	ldr	r2, [pc, #120]	; (800b040 <_free_r+0x94>)
 800afc8:	9801      	ldr	r0, [sp, #4]
 800afca:	6813      	ldr	r3, [r2, #0]
 800afcc:	b933      	cbnz	r3, 800afdc <_free_r+0x30>
 800afce:	6063      	str	r3, [r4, #4]
 800afd0:	6014      	str	r4, [r2, #0]
 800afd2:	b003      	add	sp, #12
 800afd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afd8:	f000 b8e2 	b.w	800b1a0 <__malloc_unlock>
 800afdc:	42a3      	cmp	r3, r4
 800afde:	d908      	bls.n	800aff2 <_free_r+0x46>
 800afe0:	6825      	ldr	r5, [r4, #0]
 800afe2:	1961      	adds	r1, r4, r5
 800afe4:	428b      	cmp	r3, r1
 800afe6:	bf01      	itttt	eq
 800afe8:	6819      	ldreq	r1, [r3, #0]
 800afea:	685b      	ldreq	r3, [r3, #4]
 800afec:	1949      	addeq	r1, r1, r5
 800afee:	6021      	streq	r1, [r4, #0]
 800aff0:	e7ed      	b.n	800afce <_free_r+0x22>
 800aff2:	461a      	mov	r2, r3
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	b10b      	cbz	r3, 800affc <_free_r+0x50>
 800aff8:	42a3      	cmp	r3, r4
 800affa:	d9fa      	bls.n	800aff2 <_free_r+0x46>
 800affc:	6811      	ldr	r1, [r2, #0]
 800affe:	1855      	adds	r5, r2, r1
 800b000:	42a5      	cmp	r5, r4
 800b002:	d10b      	bne.n	800b01c <_free_r+0x70>
 800b004:	6824      	ldr	r4, [r4, #0]
 800b006:	4421      	add	r1, r4
 800b008:	1854      	adds	r4, r2, r1
 800b00a:	42a3      	cmp	r3, r4
 800b00c:	6011      	str	r1, [r2, #0]
 800b00e:	d1e0      	bne.n	800afd2 <_free_r+0x26>
 800b010:	681c      	ldr	r4, [r3, #0]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	6053      	str	r3, [r2, #4]
 800b016:	440c      	add	r4, r1
 800b018:	6014      	str	r4, [r2, #0]
 800b01a:	e7da      	b.n	800afd2 <_free_r+0x26>
 800b01c:	d902      	bls.n	800b024 <_free_r+0x78>
 800b01e:	230c      	movs	r3, #12
 800b020:	6003      	str	r3, [r0, #0]
 800b022:	e7d6      	b.n	800afd2 <_free_r+0x26>
 800b024:	6825      	ldr	r5, [r4, #0]
 800b026:	1961      	adds	r1, r4, r5
 800b028:	428b      	cmp	r3, r1
 800b02a:	bf04      	itt	eq
 800b02c:	6819      	ldreq	r1, [r3, #0]
 800b02e:	685b      	ldreq	r3, [r3, #4]
 800b030:	6063      	str	r3, [r4, #4]
 800b032:	bf04      	itt	eq
 800b034:	1949      	addeq	r1, r1, r5
 800b036:	6021      	streq	r1, [r4, #0]
 800b038:	6054      	str	r4, [r2, #4]
 800b03a:	e7ca      	b.n	800afd2 <_free_r+0x26>
 800b03c:	b003      	add	sp, #12
 800b03e:	bd30      	pop	{r4, r5, pc}
 800b040:	20002770 	.word	0x20002770

0800b044 <malloc>:
 800b044:	4b02      	ldr	r3, [pc, #8]	; (800b050 <malloc+0xc>)
 800b046:	4601      	mov	r1, r0
 800b048:	6818      	ldr	r0, [r3, #0]
 800b04a:	f000 b823 	b.w	800b094 <_malloc_r>
 800b04e:	bf00      	nop
 800b050:	2000007c 	.word	0x2000007c

0800b054 <sbrk_aligned>:
 800b054:	b570      	push	{r4, r5, r6, lr}
 800b056:	4e0e      	ldr	r6, [pc, #56]	; (800b090 <sbrk_aligned+0x3c>)
 800b058:	460c      	mov	r4, r1
 800b05a:	6831      	ldr	r1, [r6, #0]
 800b05c:	4605      	mov	r5, r0
 800b05e:	b911      	cbnz	r1, 800b066 <sbrk_aligned+0x12>
 800b060:	f001 f83c 	bl	800c0dc <_sbrk_r>
 800b064:	6030      	str	r0, [r6, #0]
 800b066:	4621      	mov	r1, r4
 800b068:	4628      	mov	r0, r5
 800b06a:	f001 f837 	bl	800c0dc <_sbrk_r>
 800b06e:	1c43      	adds	r3, r0, #1
 800b070:	d00a      	beq.n	800b088 <sbrk_aligned+0x34>
 800b072:	1cc4      	adds	r4, r0, #3
 800b074:	f024 0403 	bic.w	r4, r4, #3
 800b078:	42a0      	cmp	r0, r4
 800b07a:	d007      	beq.n	800b08c <sbrk_aligned+0x38>
 800b07c:	1a21      	subs	r1, r4, r0
 800b07e:	4628      	mov	r0, r5
 800b080:	f001 f82c 	bl	800c0dc <_sbrk_r>
 800b084:	3001      	adds	r0, #1
 800b086:	d101      	bne.n	800b08c <sbrk_aligned+0x38>
 800b088:	f04f 34ff 	mov.w	r4, #4294967295
 800b08c:	4620      	mov	r0, r4
 800b08e:	bd70      	pop	{r4, r5, r6, pc}
 800b090:	20002774 	.word	0x20002774

0800b094 <_malloc_r>:
 800b094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b098:	1ccd      	adds	r5, r1, #3
 800b09a:	f025 0503 	bic.w	r5, r5, #3
 800b09e:	3508      	adds	r5, #8
 800b0a0:	2d0c      	cmp	r5, #12
 800b0a2:	bf38      	it	cc
 800b0a4:	250c      	movcc	r5, #12
 800b0a6:	2d00      	cmp	r5, #0
 800b0a8:	4607      	mov	r7, r0
 800b0aa:	db01      	blt.n	800b0b0 <_malloc_r+0x1c>
 800b0ac:	42a9      	cmp	r1, r5
 800b0ae:	d905      	bls.n	800b0bc <_malloc_r+0x28>
 800b0b0:	230c      	movs	r3, #12
 800b0b2:	603b      	str	r3, [r7, #0]
 800b0b4:	2600      	movs	r6, #0
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b190 <_malloc_r+0xfc>
 800b0c0:	f000 f868 	bl	800b194 <__malloc_lock>
 800b0c4:	f8d8 3000 	ldr.w	r3, [r8]
 800b0c8:	461c      	mov	r4, r3
 800b0ca:	bb5c      	cbnz	r4, 800b124 <_malloc_r+0x90>
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	f7ff ffc0 	bl	800b054 <sbrk_aligned>
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	d155      	bne.n	800b186 <_malloc_r+0xf2>
 800b0da:	f8d8 4000 	ldr.w	r4, [r8]
 800b0de:	4626      	mov	r6, r4
 800b0e0:	2e00      	cmp	r6, #0
 800b0e2:	d145      	bne.n	800b170 <_malloc_r+0xdc>
 800b0e4:	2c00      	cmp	r4, #0
 800b0e6:	d048      	beq.n	800b17a <_malloc_r+0xe6>
 800b0e8:	6823      	ldr	r3, [r4, #0]
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4638      	mov	r0, r7
 800b0ee:	eb04 0903 	add.w	r9, r4, r3
 800b0f2:	f000 fff3 	bl	800c0dc <_sbrk_r>
 800b0f6:	4581      	cmp	r9, r0
 800b0f8:	d13f      	bne.n	800b17a <_malloc_r+0xe6>
 800b0fa:	6821      	ldr	r1, [r4, #0]
 800b0fc:	1a6d      	subs	r5, r5, r1
 800b0fe:	4629      	mov	r1, r5
 800b100:	4638      	mov	r0, r7
 800b102:	f7ff ffa7 	bl	800b054 <sbrk_aligned>
 800b106:	3001      	adds	r0, #1
 800b108:	d037      	beq.n	800b17a <_malloc_r+0xe6>
 800b10a:	6823      	ldr	r3, [r4, #0]
 800b10c:	442b      	add	r3, r5
 800b10e:	6023      	str	r3, [r4, #0]
 800b110:	f8d8 3000 	ldr.w	r3, [r8]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d038      	beq.n	800b18a <_malloc_r+0xf6>
 800b118:	685a      	ldr	r2, [r3, #4]
 800b11a:	42a2      	cmp	r2, r4
 800b11c:	d12b      	bne.n	800b176 <_malloc_r+0xe2>
 800b11e:	2200      	movs	r2, #0
 800b120:	605a      	str	r2, [r3, #4]
 800b122:	e00f      	b.n	800b144 <_malloc_r+0xb0>
 800b124:	6822      	ldr	r2, [r4, #0]
 800b126:	1b52      	subs	r2, r2, r5
 800b128:	d41f      	bmi.n	800b16a <_malloc_r+0xd6>
 800b12a:	2a0b      	cmp	r2, #11
 800b12c:	d917      	bls.n	800b15e <_malloc_r+0xca>
 800b12e:	1961      	adds	r1, r4, r5
 800b130:	42a3      	cmp	r3, r4
 800b132:	6025      	str	r5, [r4, #0]
 800b134:	bf18      	it	ne
 800b136:	6059      	strne	r1, [r3, #4]
 800b138:	6863      	ldr	r3, [r4, #4]
 800b13a:	bf08      	it	eq
 800b13c:	f8c8 1000 	streq.w	r1, [r8]
 800b140:	5162      	str	r2, [r4, r5]
 800b142:	604b      	str	r3, [r1, #4]
 800b144:	4638      	mov	r0, r7
 800b146:	f104 060b 	add.w	r6, r4, #11
 800b14a:	f000 f829 	bl	800b1a0 <__malloc_unlock>
 800b14e:	f026 0607 	bic.w	r6, r6, #7
 800b152:	1d23      	adds	r3, r4, #4
 800b154:	1af2      	subs	r2, r6, r3
 800b156:	d0ae      	beq.n	800b0b6 <_malloc_r+0x22>
 800b158:	1b9b      	subs	r3, r3, r6
 800b15a:	50a3      	str	r3, [r4, r2]
 800b15c:	e7ab      	b.n	800b0b6 <_malloc_r+0x22>
 800b15e:	42a3      	cmp	r3, r4
 800b160:	6862      	ldr	r2, [r4, #4]
 800b162:	d1dd      	bne.n	800b120 <_malloc_r+0x8c>
 800b164:	f8c8 2000 	str.w	r2, [r8]
 800b168:	e7ec      	b.n	800b144 <_malloc_r+0xb0>
 800b16a:	4623      	mov	r3, r4
 800b16c:	6864      	ldr	r4, [r4, #4]
 800b16e:	e7ac      	b.n	800b0ca <_malloc_r+0x36>
 800b170:	4634      	mov	r4, r6
 800b172:	6876      	ldr	r6, [r6, #4]
 800b174:	e7b4      	b.n	800b0e0 <_malloc_r+0x4c>
 800b176:	4613      	mov	r3, r2
 800b178:	e7cc      	b.n	800b114 <_malloc_r+0x80>
 800b17a:	230c      	movs	r3, #12
 800b17c:	603b      	str	r3, [r7, #0]
 800b17e:	4638      	mov	r0, r7
 800b180:	f000 f80e 	bl	800b1a0 <__malloc_unlock>
 800b184:	e797      	b.n	800b0b6 <_malloc_r+0x22>
 800b186:	6025      	str	r5, [r4, #0]
 800b188:	e7dc      	b.n	800b144 <_malloc_r+0xb0>
 800b18a:	605b      	str	r3, [r3, #4]
 800b18c:	deff      	udf	#255	; 0xff
 800b18e:	bf00      	nop
 800b190:	20002770 	.word	0x20002770

0800b194 <__malloc_lock>:
 800b194:	4801      	ldr	r0, [pc, #4]	; (800b19c <__malloc_lock+0x8>)
 800b196:	f7ff b88b 	b.w	800a2b0 <__retarget_lock_acquire_recursive>
 800b19a:	bf00      	nop
 800b19c:	2000276c 	.word	0x2000276c

0800b1a0 <__malloc_unlock>:
 800b1a0:	4801      	ldr	r0, [pc, #4]	; (800b1a8 <__malloc_unlock+0x8>)
 800b1a2:	f7ff b886 	b.w	800a2b2 <__retarget_lock_release_recursive>
 800b1a6:	bf00      	nop
 800b1a8:	2000276c 	.word	0x2000276c

0800b1ac <_Balloc>:
 800b1ac:	b570      	push	{r4, r5, r6, lr}
 800b1ae:	69c6      	ldr	r6, [r0, #28]
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	460d      	mov	r5, r1
 800b1b4:	b976      	cbnz	r6, 800b1d4 <_Balloc+0x28>
 800b1b6:	2010      	movs	r0, #16
 800b1b8:	f7ff ff44 	bl	800b044 <malloc>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	61e0      	str	r0, [r4, #28]
 800b1c0:	b920      	cbnz	r0, 800b1cc <_Balloc+0x20>
 800b1c2:	4b18      	ldr	r3, [pc, #96]	; (800b224 <_Balloc+0x78>)
 800b1c4:	4818      	ldr	r0, [pc, #96]	; (800b228 <_Balloc+0x7c>)
 800b1c6:	216b      	movs	r1, #107	; 0x6b
 800b1c8:	f000 ffa6 	bl	800c118 <__assert_func>
 800b1cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1d0:	6006      	str	r6, [r0, #0]
 800b1d2:	60c6      	str	r6, [r0, #12]
 800b1d4:	69e6      	ldr	r6, [r4, #28]
 800b1d6:	68f3      	ldr	r3, [r6, #12]
 800b1d8:	b183      	cbz	r3, 800b1fc <_Balloc+0x50>
 800b1da:	69e3      	ldr	r3, [r4, #28]
 800b1dc:	68db      	ldr	r3, [r3, #12]
 800b1de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1e2:	b9b8      	cbnz	r0, 800b214 <_Balloc+0x68>
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	fa01 f605 	lsl.w	r6, r1, r5
 800b1ea:	1d72      	adds	r2, r6, #5
 800b1ec:	0092      	lsls	r2, r2, #2
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f000 ffb0 	bl	800c154 <_calloc_r>
 800b1f4:	b160      	cbz	r0, 800b210 <_Balloc+0x64>
 800b1f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1fa:	e00e      	b.n	800b21a <_Balloc+0x6e>
 800b1fc:	2221      	movs	r2, #33	; 0x21
 800b1fe:	2104      	movs	r1, #4
 800b200:	4620      	mov	r0, r4
 800b202:	f000 ffa7 	bl	800c154 <_calloc_r>
 800b206:	69e3      	ldr	r3, [r4, #28]
 800b208:	60f0      	str	r0, [r6, #12]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1e4      	bne.n	800b1da <_Balloc+0x2e>
 800b210:	2000      	movs	r0, #0
 800b212:	bd70      	pop	{r4, r5, r6, pc}
 800b214:	6802      	ldr	r2, [r0, #0]
 800b216:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b21a:	2300      	movs	r3, #0
 800b21c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b220:	e7f7      	b.n	800b212 <_Balloc+0x66>
 800b222:	bf00      	nop
 800b224:	0800ca45 	.word	0x0800ca45
 800b228:	0800cac5 	.word	0x0800cac5

0800b22c <_Bfree>:
 800b22c:	b570      	push	{r4, r5, r6, lr}
 800b22e:	69c6      	ldr	r6, [r0, #28]
 800b230:	4605      	mov	r5, r0
 800b232:	460c      	mov	r4, r1
 800b234:	b976      	cbnz	r6, 800b254 <_Bfree+0x28>
 800b236:	2010      	movs	r0, #16
 800b238:	f7ff ff04 	bl	800b044 <malloc>
 800b23c:	4602      	mov	r2, r0
 800b23e:	61e8      	str	r0, [r5, #28]
 800b240:	b920      	cbnz	r0, 800b24c <_Bfree+0x20>
 800b242:	4b09      	ldr	r3, [pc, #36]	; (800b268 <_Bfree+0x3c>)
 800b244:	4809      	ldr	r0, [pc, #36]	; (800b26c <_Bfree+0x40>)
 800b246:	218f      	movs	r1, #143	; 0x8f
 800b248:	f000 ff66 	bl	800c118 <__assert_func>
 800b24c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b250:	6006      	str	r6, [r0, #0]
 800b252:	60c6      	str	r6, [r0, #12]
 800b254:	b13c      	cbz	r4, 800b266 <_Bfree+0x3a>
 800b256:	69eb      	ldr	r3, [r5, #28]
 800b258:	6862      	ldr	r2, [r4, #4]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b260:	6021      	str	r1, [r4, #0]
 800b262:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b266:	bd70      	pop	{r4, r5, r6, pc}
 800b268:	0800ca45 	.word	0x0800ca45
 800b26c:	0800cac5 	.word	0x0800cac5

0800b270 <__multadd>:
 800b270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b274:	690d      	ldr	r5, [r1, #16]
 800b276:	4607      	mov	r7, r0
 800b278:	460c      	mov	r4, r1
 800b27a:	461e      	mov	r6, r3
 800b27c:	f101 0c14 	add.w	ip, r1, #20
 800b280:	2000      	movs	r0, #0
 800b282:	f8dc 3000 	ldr.w	r3, [ip]
 800b286:	b299      	uxth	r1, r3
 800b288:	fb02 6101 	mla	r1, r2, r1, r6
 800b28c:	0c1e      	lsrs	r6, r3, #16
 800b28e:	0c0b      	lsrs	r3, r1, #16
 800b290:	fb02 3306 	mla	r3, r2, r6, r3
 800b294:	b289      	uxth	r1, r1
 800b296:	3001      	adds	r0, #1
 800b298:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b29c:	4285      	cmp	r5, r0
 800b29e:	f84c 1b04 	str.w	r1, [ip], #4
 800b2a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2a6:	dcec      	bgt.n	800b282 <__multadd+0x12>
 800b2a8:	b30e      	cbz	r6, 800b2ee <__multadd+0x7e>
 800b2aa:	68a3      	ldr	r3, [r4, #8]
 800b2ac:	42ab      	cmp	r3, r5
 800b2ae:	dc19      	bgt.n	800b2e4 <__multadd+0x74>
 800b2b0:	6861      	ldr	r1, [r4, #4]
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	3101      	adds	r1, #1
 800b2b6:	f7ff ff79 	bl	800b1ac <_Balloc>
 800b2ba:	4680      	mov	r8, r0
 800b2bc:	b928      	cbnz	r0, 800b2ca <__multadd+0x5a>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	4b0c      	ldr	r3, [pc, #48]	; (800b2f4 <__multadd+0x84>)
 800b2c2:	480d      	ldr	r0, [pc, #52]	; (800b2f8 <__multadd+0x88>)
 800b2c4:	21ba      	movs	r1, #186	; 0xba
 800b2c6:	f000 ff27 	bl	800c118 <__assert_func>
 800b2ca:	6922      	ldr	r2, [r4, #16]
 800b2cc:	3202      	adds	r2, #2
 800b2ce:	f104 010c 	add.w	r1, r4, #12
 800b2d2:	0092      	lsls	r2, r2, #2
 800b2d4:	300c      	adds	r0, #12
 800b2d6:	f000 ff11 	bl	800c0fc <memcpy>
 800b2da:	4621      	mov	r1, r4
 800b2dc:	4638      	mov	r0, r7
 800b2de:	f7ff ffa5 	bl	800b22c <_Bfree>
 800b2e2:	4644      	mov	r4, r8
 800b2e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2e8:	3501      	adds	r5, #1
 800b2ea:	615e      	str	r6, [r3, #20]
 800b2ec:	6125      	str	r5, [r4, #16]
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2f4:	0800cab4 	.word	0x0800cab4
 800b2f8:	0800cac5 	.word	0x0800cac5

0800b2fc <__hi0bits>:
 800b2fc:	0c03      	lsrs	r3, r0, #16
 800b2fe:	041b      	lsls	r3, r3, #16
 800b300:	b9d3      	cbnz	r3, 800b338 <__hi0bits+0x3c>
 800b302:	0400      	lsls	r0, r0, #16
 800b304:	2310      	movs	r3, #16
 800b306:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b30a:	bf04      	itt	eq
 800b30c:	0200      	lsleq	r0, r0, #8
 800b30e:	3308      	addeq	r3, #8
 800b310:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b314:	bf04      	itt	eq
 800b316:	0100      	lsleq	r0, r0, #4
 800b318:	3304      	addeq	r3, #4
 800b31a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b31e:	bf04      	itt	eq
 800b320:	0080      	lsleq	r0, r0, #2
 800b322:	3302      	addeq	r3, #2
 800b324:	2800      	cmp	r0, #0
 800b326:	db05      	blt.n	800b334 <__hi0bits+0x38>
 800b328:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b32c:	f103 0301 	add.w	r3, r3, #1
 800b330:	bf08      	it	eq
 800b332:	2320      	moveq	r3, #32
 800b334:	4618      	mov	r0, r3
 800b336:	4770      	bx	lr
 800b338:	2300      	movs	r3, #0
 800b33a:	e7e4      	b.n	800b306 <__hi0bits+0xa>

0800b33c <__lo0bits>:
 800b33c:	6803      	ldr	r3, [r0, #0]
 800b33e:	f013 0207 	ands.w	r2, r3, #7
 800b342:	d00c      	beq.n	800b35e <__lo0bits+0x22>
 800b344:	07d9      	lsls	r1, r3, #31
 800b346:	d422      	bmi.n	800b38e <__lo0bits+0x52>
 800b348:	079a      	lsls	r2, r3, #30
 800b34a:	bf49      	itett	mi
 800b34c:	085b      	lsrmi	r3, r3, #1
 800b34e:	089b      	lsrpl	r3, r3, #2
 800b350:	6003      	strmi	r3, [r0, #0]
 800b352:	2201      	movmi	r2, #1
 800b354:	bf5c      	itt	pl
 800b356:	6003      	strpl	r3, [r0, #0]
 800b358:	2202      	movpl	r2, #2
 800b35a:	4610      	mov	r0, r2
 800b35c:	4770      	bx	lr
 800b35e:	b299      	uxth	r1, r3
 800b360:	b909      	cbnz	r1, 800b366 <__lo0bits+0x2a>
 800b362:	0c1b      	lsrs	r3, r3, #16
 800b364:	2210      	movs	r2, #16
 800b366:	b2d9      	uxtb	r1, r3
 800b368:	b909      	cbnz	r1, 800b36e <__lo0bits+0x32>
 800b36a:	3208      	adds	r2, #8
 800b36c:	0a1b      	lsrs	r3, r3, #8
 800b36e:	0719      	lsls	r1, r3, #28
 800b370:	bf04      	itt	eq
 800b372:	091b      	lsreq	r3, r3, #4
 800b374:	3204      	addeq	r2, #4
 800b376:	0799      	lsls	r1, r3, #30
 800b378:	bf04      	itt	eq
 800b37a:	089b      	lsreq	r3, r3, #2
 800b37c:	3202      	addeq	r2, #2
 800b37e:	07d9      	lsls	r1, r3, #31
 800b380:	d403      	bmi.n	800b38a <__lo0bits+0x4e>
 800b382:	085b      	lsrs	r3, r3, #1
 800b384:	f102 0201 	add.w	r2, r2, #1
 800b388:	d003      	beq.n	800b392 <__lo0bits+0x56>
 800b38a:	6003      	str	r3, [r0, #0]
 800b38c:	e7e5      	b.n	800b35a <__lo0bits+0x1e>
 800b38e:	2200      	movs	r2, #0
 800b390:	e7e3      	b.n	800b35a <__lo0bits+0x1e>
 800b392:	2220      	movs	r2, #32
 800b394:	e7e1      	b.n	800b35a <__lo0bits+0x1e>
	...

0800b398 <__i2b>:
 800b398:	b510      	push	{r4, lr}
 800b39a:	460c      	mov	r4, r1
 800b39c:	2101      	movs	r1, #1
 800b39e:	f7ff ff05 	bl	800b1ac <_Balloc>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	b928      	cbnz	r0, 800b3b2 <__i2b+0x1a>
 800b3a6:	4b05      	ldr	r3, [pc, #20]	; (800b3bc <__i2b+0x24>)
 800b3a8:	4805      	ldr	r0, [pc, #20]	; (800b3c0 <__i2b+0x28>)
 800b3aa:	f240 1145 	movw	r1, #325	; 0x145
 800b3ae:	f000 feb3 	bl	800c118 <__assert_func>
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	6144      	str	r4, [r0, #20]
 800b3b6:	6103      	str	r3, [r0, #16]
 800b3b8:	bd10      	pop	{r4, pc}
 800b3ba:	bf00      	nop
 800b3bc:	0800cab4 	.word	0x0800cab4
 800b3c0:	0800cac5 	.word	0x0800cac5

0800b3c4 <__multiply>:
 800b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	4691      	mov	r9, r2
 800b3ca:	690a      	ldr	r2, [r1, #16]
 800b3cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	bfb8      	it	lt
 800b3d4:	460b      	movlt	r3, r1
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	bfbc      	itt	lt
 800b3da:	464c      	movlt	r4, r9
 800b3dc:	4699      	movlt	r9, r3
 800b3de:	6927      	ldr	r7, [r4, #16]
 800b3e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b3e4:	68a3      	ldr	r3, [r4, #8]
 800b3e6:	6861      	ldr	r1, [r4, #4]
 800b3e8:	eb07 060a 	add.w	r6, r7, sl
 800b3ec:	42b3      	cmp	r3, r6
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	bfb8      	it	lt
 800b3f2:	3101      	addlt	r1, #1
 800b3f4:	f7ff feda 	bl	800b1ac <_Balloc>
 800b3f8:	b930      	cbnz	r0, 800b408 <__multiply+0x44>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	4b44      	ldr	r3, [pc, #272]	; (800b510 <__multiply+0x14c>)
 800b3fe:	4845      	ldr	r0, [pc, #276]	; (800b514 <__multiply+0x150>)
 800b400:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b404:	f000 fe88 	bl	800c118 <__assert_func>
 800b408:	f100 0514 	add.w	r5, r0, #20
 800b40c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b410:	462b      	mov	r3, r5
 800b412:	2200      	movs	r2, #0
 800b414:	4543      	cmp	r3, r8
 800b416:	d321      	bcc.n	800b45c <__multiply+0x98>
 800b418:	f104 0314 	add.w	r3, r4, #20
 800b41c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b420:	f109 0314 	add.w	r3, r9, #20
 800b424:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b428:	9202      	str	r2, [sp, #8]
 800b42a:	1b3a      	subs	r2, r7, r4
 800b42c:	3a15      	subs	r2, #21
 800b42e:	f022 0203 	bic.w	r2, r2, #3
 800b432:	3204      	adds	r2, #4
 800b434:	f104 0115 	add.w	r1, r4, #21
 800b438:	428f      	cmp	r7, r1
 800b43a:	bf38      	it	cc
 800b43c:	2204      	movcc	r2, #4
 800b43e:	9201      	str	r2, [sp, #4]
 800b440:	9a02      	ldr	r2, [sp, #8]
 800b442:	9303      	str	r3, [sp, #12]
 800b444:	429a      	cmp	r2, r3
 800b446:	d80c      	bhi.n	800b462 <__multiply+0x9e>
 800b448:	2e00      	cmp	r6, #0
 800b44a:	dd03      	ble.n	800b454 <__multiply+0x90>
 800b44c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b450:	2b00      	cmp	r3, #0
 800b452:	d05b      	beq.n	800b50c <__multiply+0x148>
 800b454:	6106      	str	r6, [r0, #16]
 800b456:	b005      	add	sp, #20
 800b458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45c:	f843 2b04 	str.w	r2, [r3], #4
 800b460:	e7d8      	b.n	800b414 <__multiply+0x50>
 800b462:	f8b3 a000 	ldrh.w	sl, [r3]
 800b466:	f1ba 0f00 	cmp.w	sl, #0
 800b46a:	d024      	beq.n	800b4b6 <__multiply+0xf2>
 800b46c:	f104 0e14 	add.w	lr, r4, #20
 800b470:	46a9      	mov	r9, r5
 800b472:	f04f 0c00 	mov.w	ip, #0
 800b476:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b47a:	f8d9 1000 	ldr.w	r1, [r9]
 800b47e:	fa1f fb82 	uxth.w	fp, r2
 800b482:	b289      	uxth	r1, r1
 800b484:	fb0a 110b 	mla	r1, sl, fp, r1
 800b488:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b48c:	f8d9 2000 	ldr.w	r2, [r9]
 800b490:	4461      	add	r1, ip
 800b492:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b496:	fb0a c20b 	mla	r2, sl, fp, ip
 800b49a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b49e:	b289      	uxth	r1, r1
 800b4a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4a4:	4577      	cmp	r7, lr
 800b4a6:	f849 1b04 	str.w	r1, [r9], #4
 800b4aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4ae:	d8e2      	bhi.n	800b476 <__multiply+0xb2>
 800b4b0:	9a01      	ldr	r2, [sp, #4]
 800b4b2:	f845 c002 	str.w	ip, [r5, r2]
 800b4b6:	9a03      	ldr	r2, [sp, #12]
 800b4b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4bc:	3304      	adds	r3, #4
 800b4be:	f1b9 0f00 	cmp.w	r9, #0
 800b4c2:	d021      	beq.n	800b508 <__multiply+0x144>
 800b4c4:	6829      	ldr	r1, [r5, #0]
 800b4c6:	f104 0c14 	add.w	ip, r4, #20
 800b4ca:	46ae      	mov	lr, r5
 800b4cc:	f04f 0a00 	mov.w	sl, #0
 800b4d0:	f8bc b000 	ldrh.w	fp, [ip]
 800b4d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b4d8:	fb09 220b 	mla	r2, r9, fp, r2
 800b4dc:	4452      	add	r2, sl
 800b4de:	b289      	uxth	r1, r1
 800b4e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4e4:	f84e 1b04 	str.w	r1, [lr], #4
 800b4e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b4ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4f0:	f8be 1000 	ldrh.w	r1, [lr]
 800b4f4:	fb09 110a 	mla	r1, r9, sl, r1
 800b4f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b4fc:	4567      	cmp	r7, ip
 800b4fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b502:	d8e5      	bhi.n	800b4d0 <__multiply+0x10c>
 800b504:	9a01      	ldr	r2, [sp, #4]
 800b506:	50a9      	str	r1, [r5, r2]
 800b508:	3504      	adds	r5, #4
 800b50a:	e799      	b.n	800b440 <__multiply+0x7c>
 800b50c:	3e01      	subs	r6, #1
 800b50e:	e79b      	b.n	800b448 <__multiply+0x84>
 800b510:	0800cab4 	.word	0x0800cab4
 800b514:	0800cac5 	.word	0x0800cac5

0800b518 <__pow5mult>:
 800b518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b51c:	4615      	mov	r5, r2
 800b51e:	f012 0203 	ands.w	r2, r2, #3
 800b522:	4606      	mov	r6, r0
 800b524:	460f      	mov	r7, r1
 800b526:	d007      	beq.n	800b538 <__pow5mult+0x20>
 800b528:	4c25      	ldr	r4, [pc, #148]	; (800b5c0 <__pow5mult+0xa8>)
 800b52a:	3a01      	subs	r2, #1
 800b52c:	2300      	movs	r3, #0
 800b52e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b532:	f7ff fe9d 	bl	800b270 <__multadd>
 800b536:	4607      	mov	r7, r0
 800b538:	10ad      	asrs	r5, r5, #2
 800b53a:	d03d      	beq.n	800b5b8 <__pow5mult+0xa0>
 800b53c:	69f4      	ldr	r4, [r6, #28]
 800b53e:	b97c      	cbnz	r4, 800b560 <__pow5mult+0x48>
 800b540:	2010      	movs	r0, #16
 800b542:	f7ff fd7f 	bl	800b044 <malloc>
 800b546:	4602      	mov	r2, r0
 800b548:	61f0      	str	r0, [r6, #28]
 800b54a:	b928      	cbnz	r0, 800b558 <__pow5mult+0x40>
 800b54c:	4b1d      	ldr	r3, [pc, #116]	; (800b5c4 <__pow5mult+0xac>)
 800b54e:	481e      	ldr	r0, [pc, #120]	; (800b5c8 <__pow5mult+0xb0>)
 800b550:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b554:	f000 fde0 	bl	800c118 <__assert_func>
 800b558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b55c:	6004      	str	r4, [r0, #0]
 800b55e:	60c4      	str	r4, [r0, #12]
 800b560:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b568:	b94c      	cbnz	r4, 800b57e <__pow5mult+0x66>
 800b56a:	f240 2171 	movw	r1, #625	; 0x271
 800b56e:	4630      	mov	r0, r6
 800b570:	f7ff ff12 	bl	800b398 <__i2b>
 800b574:	2300      	movs	r3, #0
 800b576:	f8c8 0008 	str.w	r0, [r8, #8]
 800b57a:	4604      	mov	r4, r0
 800b57c:	6003      	str	r3, [r0, #0]
 800b57e:	f04f 0900 	mov.w	r9, #0
 800b582:	07eb      	lsls	r3, r5, #31
 800b584:	d50a      	bpl.n	800b59c <__pow5mult+0x84>
 800b586:	4639      	mov	r1, r7
 800b588:	4622      	mov	r2, r4
 800b58a:	4630      	mov	r0, r6
 800b58c:	f7ff ff1a 	bl	800b3c4 <__multiply>
 800b590:	4639      	mov	r1, r7
 800b592:	4680      	mov	r8, r0
 800b594:	4630      	mov	r0, r6
 800b596:	f7ff fe49 	bl	800b22c <_Bfree>
 800b59a:	4647      	mov	r7, r8
 800b59c:	106d      	asrs	r5, r5, #1
 800b59e:	d00b      	beq.n	800b5b8 <__pow5mult+0xa0>
 800b5a0:	6820      	ldr	r0, [r4, #0]
 800b5a2:	b938      	cbnz	r0, 800b5b4 <__pow5mult+0x9c>
 800b5a4:	4622      	mov	r2, r4
 800b5a6:	4621      	mov	r1, r4
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7ff ff0b 	bl	800b3c4 <__multiply>
 800b5ae:	6020      	str	r0, [r4, #0]
 800b5b0:	f8c0 9000 	str.w	r9, [r0]
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	e7e4      	b.n	800b582 <__pow5mult+0x6a>
 800b5b8:	4638      	mov	r0, r7
 800b5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5be:	bf00      	nop
 800b5c0:	0800cc10 	.word	0x0800cc10
 800b5c4:	0800ca45 	.word	0x0800ca45
 800b5c8:	0800cac5 	.word	0x0800cac5

0800b5cc <__lshift>:
 800b5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	6849      	ldr	r1, [r1, #4]
 800b5d4:	6923      	ldr	r3, [r4, #16]
 800b5d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5da:	68a3      	ldr	r3, [r4, #8]
 800b5dc:	4607      	mov	r7, r0
 800b5de:	4691      	mov	r9, r2
 800b5e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5e4:	f108 0601 	add.w	r6, r8, #1
 800b5e8:	42b3      	cmp	r3, r6
 800b5ea:	db0b      	blt.n	800b604 <__lshift+0x38>
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	f7ff fddd 	bl	800b1ac <_Balloc>
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	b948      	cbnz	r0, 800b60a <__lshift+0x3e>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	4b28      	ldr	r3, [pc, #160]	; (800b69c <__lshift+0xd0>)
 800b5fa:	4829      	ldr	r0, [pc, #164]	; (800b6a0 <__lshift+0xd4>)
 800b5fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b600:	f000 fd8a 	bl	800c118 <__assert_func>
 800b604:	3101      	adds	r1, #1
 800b606:	005b      	lsls	r3, r3, #1
 800b608:	e7ee      	b.n	800b5e8 <__lshift+0x1c>
 800b60a:	2300      	movs	r3, #0
 800b60c:	f100 0114 	add.w	r1, r0, #20
 800b610:	f100 0210 	add.w	r2, r0, #16
 800b614:	4618      	mov	r0, r3
 800b616:	4553      	cmp	r3, sl
 800b618:	db33      	blt.n	800b682 <__lshift+0xb6>
 800b61a:	6920      	ldr	r0, [r4, #16]
 800b61c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b620:	f104 0314 	add.w	r3, r4, #20
 800b624:	f019 091f 	ands.w	r9, r9, #31
 800b628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b62c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b630:	d02b      	beq.n	800b68a <__lshift+0xbe>
 800b632:	f1c9 0e20 	rsb	lr, r9, #32
 800b636:	468a      	mov	sl, r1
 800b638:	2200      	movs	r2, #0
 800b63a:	6818      	ldr	r0, [r3, #0]
 800b63c:	fa00 f009 	lsl.w	r0, r0, r9
 800b640:	4310      	orrs	r0, r2
 800b642:	f84a 0b04 	str.w	r0, [sl], #4
 800b646:	f853 2b04 	ldr.w	r2, [r3], #4
 800b64a:	459c      	cmp	ip, r3
 800b64c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b650:	d8f3      	bhi.n	800b63a <__lshift+0x6e>
 800b652:	ebac 0304 	sub.w	r3, ip, r4
 800b656:	3b15      	subs	r3, #21
 800b658:	f023 0303 	bic.w	r3, r3, #3
 800b65c:	3304      	adds	r3, #4
 800b65e:	f104 0015 	add.w	r0, r4, #21
 800b662:	4584      	cmp	ip, r0
 800b664:	bf38      	it	cc
 800b666:	2304      	movcc	r3, #4
 800b668:	50ca      	str	r2, [r1, r3]
 800b66a:	b10a      	cbz	r2, 800b670 <__lshift+0xa4>
 800b66c:	f108 0602 	add.w	r6, r8, #2
 800b670:	3e01      	subs	r6, #1
 800b672:	4638      	mov	r0, r7
 800b674:	612e      	str	r6, [r5, #16]
 800b676:	4621      	mov	r1, r4
 800b678:	f7ff fdd8 	bl	800b22c <_Bfree>
 800b67c:	4628      	mov	r0, r5
 800b67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b682:	f842 0f04 	str.w	r0, [r2, #4]!
 800b686:	3301      	adds	r3, #1
 800b688:	e7c5      	b.n	800b616 <__lshift+0x4a>
 800b68a:	3904      	subs	r1, #4
 800b68c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b690:	f841 2f04 	str.w	r2, [r1, #4]!
 800b694:	459c      	cmp	ip, r3
 800b696:	d8f9      	bhi.n	800b68c <__lshift+0xc0>
 800b698:	e7ea      	b.n	800b670 <__lshift+0xa4>
 800b69a:	bf00      	nop
 800b69c:	0800cab4 	.word	0x0800cab4
 800b6a0:	0800cac5 	.word	0x0800cac5

0800b6a4 <__mcmp>:
 800b6a4:	b530      	push	{r4, r5, lr}
 800b6a6:	6902      	ldr	r2, [r0, #16]
 800b6a8:	690c      	ldr	r4, [r1, #16]
 800b6aa:	1b12      	subs	r2, r2, r4
 800b6ac:	d10e      	bne.n	800b6cc <__mcmp+0x28>
 800b6ae:	f100 0314 	add.w	r3, r0, #20
 800b6b2:	3114      	adds	r1, #20
 800b6b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b6bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b6c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6c4:	42a5      	cmp	r5, r4
 800b6c6:	d003      	beq.n	800b6d0 <__mcmp+0x2c>
 800b6c8:	d305      	bcc.n	800b6d6 <__mcmp+0x32>
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	4610      	mov	r0, r2
 800b6ce:	bd30      	pop	{r4, r5, pc}
 800b6d0:	4283      	cmp	r3, r0
 800b6d2:	d3f3      	bcc.n	800b6bc <__mcmp+0x18>
 800b6d4:	e7fa      	b.n	800b6cc <__mcmp+0x28>
 800b6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6da:	e7f7      	b.n	800b6cc <__mcmp+0x28>

0800b6dc <__mdiff>:
 800b6dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e0:	460c      	mov	r4, r1
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	4611      	mov	r1, r2
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	4690      	mov	r8, r2
 800b6ea:	f7ff ffdb 	bl	800b6a4 <__mcmp>
 800b6ee:	1e05      	subs	r5, r0, #0
 800b6f0:	d110      	bne.n	800b714 <__mdiff+0x38>
 800b6f2:	4629      	mov	r1, r5
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	f7ff fd59 	bl	800b1ac <_Balloc>
 800b6fa:	b930      	cbnz	r0, 800b70a <__mdiff+0x2e>
 800b6fc:	4b3a      	ldr	r3, [pc, #232]	; (800b7e8 <__mdiff+0x10c>)
 800b6fe:	4602      	mov	r2, r0
 800b700:	f240 2137 	movw	r1, #567	; 0x237
 800b704:	4839      	ldr	r0, [pc, #228]	; (800b7ec <__mdiff+0x110>)
 800b706:	f000 fd07 	bl	800c118 <__assert_func>
 800b70a:	2301      	movs	r3, #1
 800b70c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b714:	bfa4      	itt	ge
 800b716:	4643      	movge	r3, r8
 800b718:	46a0      	movge	r8, r4
 800b71a:	4630      	mov	r0, r6
 800b71c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b720:	bfa6      	itte	ge
 800b722:	461c      	movge	r4, r3
 800b724:	2500      	movge	r5, #0
 800b726:	2501      	movlt	r5, #1
 800b728:	f7ff fd40 	bl	800b1ac <_Balloc>
 800b72c:	b920      	cbnz	r0, 800b738 <__mdiff+0x5c>
 800b72e:	4b2e      	ldr	r3, [pc, #184]	; (800b7e8 <__mdiff+0x10c>)
 800b730:	4602      	mov	r2, r0
 800b732:	f240 2145 	movw	r1, #581	; 0x245
 800b736:	e7e5      	b.n	800b704 <__mdiff+0x28>
 800b738:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b73c:	6926      	ldr	r6, [r4, #16]
 800b73e:	60c5      	str	r5, [r0, #12]
 800b740:	f104 0914 	add.w	r9, r4, #20
 800b744:	f108 0514 	add.w	r5, r8, #20
 800b748:	f100 0e14 	add.w	lr, r0, #20
 800b74c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b750:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b754:	f108 0210 	add.w	r2, r8, #16
 800b758:	46f2      	mov	sl, lr
 800b75a:	2100      	movs	r1, #0
 800b75c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b760:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b764:	fa11 f88b 	uxtah	r8, r1, fp
 800b768:	b299      	uxth	r1, r3
 800b76a:	0c1b      	lsrs	r3, r3, #16
 800b76c:	eba8 0801 	sub.w	r8, r8, r1
 800b770:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b774:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b778:	fa1f f888 	uxth.w	r8, r8
 800b77c:	1419      	asrs	r1, r3, #16
 800b77e:	454e      	cmp	r6, r9
 800b780:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b784:	f84a 3b04 	str.w	r3, [sl], #4
 800b788:	d8e8      	bhi.n	800b75c <__mdiff+0x80>
 800b78a:	1b33      	subs	r3, r6, r4
 800b78c:	3b15      	subs	r3, #21
 800b78e:	f023 0303 	bic.w	r3, r3, #3
 800b792:	3304      	adds	r3, #4
 800b794:	3415      	adds	r4, #21
 800b796:	42a6      	cmp	r6, r4
 800b798:	bf38      	it	cc
 800b79a:	2304      	movcc	r3, #4
 800b79c:	441d      	add	r5, r3
 800b79e:	4473      	add	r3, lr
 800b7a0:	469e      	mov	lr, r3
 800b7a2:	462e      	mov	r6, r5
 800b7a4:	4566      	cmp	r6, ip
 800b7a6:	d30e      	bcc.n	800b7c6 <__mdiff+0xea>
 800b7a8:	f10c 0203 	add.w	r2, ip, #3
 800b7ac:	1b52      	subs	r2, r2, r5
 800b7ae:	f022 0203 	bic.w	r2, r2, #3
 800b7b2:	3d03      	subs	r5, #3
 800b7b4:	45ac      	cmp	ip, r5
 800b7b6:	bf38      	it	cc
 800b7b8:	2200      	movcc	r2, #0
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b7c0:	b17a      	cbz	r2, 800b7e2 <__mdiff+0x106>
 800b7c2:	6107      	str	r7, [r0, #16]
 800b7c4:	e7a4      	b.n	800b710 <__mdiff+0x34>
 800b7c6:	f856 8b04 	ldr.w	r8, [r6], #4
 800b7ca:	fa11 f288 	uxtah	r2, r1, r8
 800b7ce:	1414      	asrs	r4, r2, #16
 800b7d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b7d4:	b292      	uxth	r2, r2
 800b7d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b7da:	f84e 2b04 	str.w	r2, [lr], #4
 800b7de:	1421      	asrs	r1, r4, #16
 800b7e0:	e7e0      	b.n	800b7a4 <__mdiff+0xc8>
 800b7e2:	3f01      	subs	r7, #1
 800b7e4:	e7ea      	b.n	800b7bc <__mdiff+0xe0>
 800b7e6:	bf00      	nop
 800b7e8:	0800cab4 	.word	0x0800cab4
 800b7ec:	0800cac5 	.word	0x0800cac5

0800b7f0 <__d2b>:
 800b7f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7f4:	460f      	mov	r7, r1
 800b7f6:	2101      	movs	r1, #1
 800b7f8:	ec59 8b10 	vmov	r8, r9, d0
 800b7fc:	4616      	mov	r6, r2
 800b7fe:	f7ff fcd5 	bl	800b1ac <_Balloc>
 800b802:	4604      	mov	r4, r0
 800b804:	b930      	cbnz	r0, 800b814 <__d2b+0x24>
 800b806:	4602      	mov	r2, r0
 800b808:	4b24      	ldr	r3, [pc, #144]	; (800b89c <__d2b+0xac>)
 800b80a:	4825      	ldr	r0, [pc, #148]	; (800b8a0 <__d2b+0xb0>)
 800b80c:	f240 310f 	movw	r1, #783	; 0x30f
 800b810:	f000 fc82 	bl	800c118 <__assert_func>
 800b814:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b81c:	bb2d      	cbnz	r5, 800b86a <__d2b+0x7a>
 800b81e:	9301      	str	r3, [sp, #4]
 800b820:	f1b8 0300 	subs.w	r3, r8, #0
 800b824:	d026      	beq.n	800b874 <__d2b+0x84>
 800b826:	4668      	mov	r0, sp
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	f7ff fd87 	bl	800b33c <__lo0bits>
 800b82e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b832:	b1e8      	cbz	r0, 800b870 <__d2b+0x80>
 800b834:	f1c0 0320 	rsb	r3, r0, #32
 800b838:	fa02 f303 	lsl.w	r3, r2, r3
 800b83c:	430b      	orrs	r3, r1
 800b83e:	40c2      	lsrs	r2, r0
 800b840:	6163      	str	r3, [r4, #20]
 800b842:	9201      	str	r2, [sp, #4]
 800b844:	9b01      	ldr	r3, [sp, #4]
 800b846:	61a3      	str	r3, [r4, #24]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	bf14      	ite	ne
 800b84c:	2202      	movne	r2, #2
 800b84e:	2201      	moveq	r2, #1
 800b850:	6122      	str	r2, [r4, #16]
 800b852:	b1bd      	cbz	r5, 800b884 <__d2b+0x94>
 800b854:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b858:	4405      	add	r5, r0
 800b85a:	603d      	str	r5, [r7, #0]
 800b85c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b860:	6030      	str	r0, [r6, #0]
 800b862:	4620      	mov	r0, r4
 800b864:	b003      	add	sp, #12
 800b866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b86a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b86e:	e7d6      	b.n	800b81e <__d2b+0x2e>
 800b870:	6161      	str	r1, [r4, #20]
 800b872:	e7e7      	b.n	800b844 <__d2b+0x54>
 800b874:	a801      	add	r0, sp, #4
 800b876:	f7ff fd61 	bl	800b33c <__lo0bits>
 800b87a:	9b01      	ldr	r3, [sp, #4]
 800b87c:	6163      	str	r3, [r4, #20]
 800b87e:	3020      	adds	r0, #32
 800b880:	2201      	movs	r2, #1
 800b882:	e7e5      	b.n	800b850 <__d2b+0x60>
 800b884:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b888:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b88c:	6038      	str	r0, [r7, #0]
 800b88e:	6918      	ldr	r0, [r3, #16]
 800b890:	f7ff fd34 	bl	800b2fc <__hi0bits>
 800b894:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b898:	e7e2      	b.n	800b860 <__d2b+0x70>
 800b89a:	bf00      	nop
 800b89c:	0800cab4 	.word	0x0800cab4
 800b8a0:	0800cac5 	.word	0x0800cac5

0800b8a4 <__ssputs_r>:
 800b8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8a8:	688e      	ldr	r6, [r1, #8]
 800b8aa:	461f      	mov	r7, r3
 800b8ac:	42be      	cmp	r6, r7
 800b8ae:	680b      	ldr	r3, [r1, #0]
 800b8b0:	4682      	mov	sl, r0
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	4690      	mov	r8, r2
 800b8b6:	d82c      	bhi.n	800b912 <__ssputs_r+0x6e>
 800b8b8:	898a      	ldrh	r2, [r1, #12]
 800b8ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8be:	d026      	beq.n	800b90e <__ssputs_r+0x6a>
 800b8c0:	6965      	ldr	r5, [r4, #20]
 800b8c2:	6909      	ldr	r1, [r1, #16]
 800b8c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8c8:	eba3 0901 	sub.w	r9, r3, r1
 800b8cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8d0:	1c7b      	adds	r3, r7, #1
 800b8d2:	444b      	add	r3, r9
 800b8d4:	106d      	asrs	r5, r5, #1
 800b8d6:	429d      	cmp	r5, r3
 800b8d8:	bf38      	it	cc
 800b8da:	461d      	movcc	r5, r3
 800b8dc:	0553      	lsls	r3, r2, #21
 800b8de:	d527      	bpl.n	800b930 <__ssputs_r+0x8c>
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	f7ff fbd7 	bl	800b094 <_malloc_r>
 800b8e6:	4606      	mov	r6, r0
 800b8e8:	b360      	cbz	r0, 800b944 <__ssputs_r+0xa0>
 800b8ea:	6921      	ldr	r1, [r4, #16]
 800b8ec:	464a      	mov	r2, r9
 800b8ee:	f000 fc05 	bl	800c0fc <memcpy>
 800b8f2:	89a3      	ldrh	r3, [r4, #12]
 800b8f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8fc:	81a3      	strh	r3, [r4, #12]
 800b8fe:	6126      	str	r6, [r4, #16]
 800b900:	6165      	str	r5, [r4, #20]
 800b902:	444e      	add	r6, r9
 800b904:	eba5 0509 	sub.w	r5, r5, r9
 800b908:	6026      	str	r6, [r4, #0]
 800b90a:	60a5      	str	r5, [r4, #8]
 800b90c:	463e      	mov	r6, r7
 800b90e:	42be      	cmp	r6, r7
 800b910:	d900      	bls.n	800b914 <__ssputs_r+0x70>
 800b912:	463e      	mov	r6, r7
 800b914:	6820      	ldr	r0, [r4, #0]
 800b916:	4632      	mov	r2, r6
 800b918:	4641      	mov	r1, r8
 800b91a:	f000 fba3 	bl	800c064 <memmove>
 800b91e:	68a3      	ldr	r3, [r4, #8]
 800b920:	1b9b      	subs	r3, r3, r6
 800b922:	60a3      	str	r3, [r4, #8]
 800b924:	6823      	ldr	r3, [r4, #0]
 800b926:	4433      	add	r3, r6
 800b928:	6023      	str	r3, [r4, #0]
 800b92a:	2000      	movs	r0, #0
 800b92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b930:	462a      	mov	r2, r5
 800b932:	f000 fc37 	bl	800c1a4 <_realloc_r>
 800b936:	4606      	mov	r6, r0
 800b938:	2800      	cmp	r0, #0
 800b93a:	d1e0      	bne.n	800b8fe <__ssputs_r+0x5a>
 800b93c:	6921      	ldr	r1, [r4, #16]
 800b93e:	4650      	mov	r0, sl
 800b940:	f7ff fb34 	bl	800afac <_free_r>
 800b944:	230c      	movs	r3, #12
 800b946:	f8ca 3000 	str.w	r3, [sl]
 800b94a:	89a3      	ldrh	r3, [r4, #12]
 800b94c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b950:	81a3      	strh	r3, [r4, #12]
 800b952:	f04f 30ff 	mov.w	r0, #4294967295
 800b956:	e7e9      	b.n	800b92c <__ssputs_r+0x88>

0800b958 <_svfiprintf_r>:
 800b958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95c:	4698      	mov	r8, r3
 800b95e:	898b      	ldrh	r3, [r1, #12]
 800b960:	061b      	lsls	r3, r3, #24
 800b962:	b09d      	sub	sp, #116	; 0x74
 800b964:	4607      	mov	r7, r0
 800b966:	460d      	mov	r5, r1
 800b968:	4614      	mov	r4, r2
 800b96a:	d50e      	bpl.n	800b98a <_svfiprintf_r+0x32>
 800b96c:	690b      	ldr	r3, [r1, #16]
 800b96e:	b963      	cbnz	r3, 800b98a <_svfiprintf_r+0x32>
 800b970:	2140      	movs	r1, #64	; 0x40
 800b972:	f7ff fb8f 	bl	800b094 <_malloc_r>
 800b976:	6028      	str	r0, [r5, #0]
 800b978:	6128      	str	r0, [r5, #16]
 800b97a:	b920      	cbnz	r0, 800b986 <_svfiprintf_r+0x2e>
 800b97c:	230c      	movs	r3, #12
 800b97e:	603b      	str	r3, [r7, #0]
 800b980:	f04f 30ff 	mov.w	r0, #4294967295
 800b984:	e0d0      	b.n	800bb28 <_svfiprintf_r+0x1d0>
 800b986:	2340      	movs	r3, #64	; 0x40
 800b988:	616b      	str	r3, [r5, #20]
 800b98a:	2300      	movs	r3, #0
 800b98c:	9309      	str	r3, [sp, #36]	; 0x24
 800b98e:	2320      	movs	r3, #32
 800b990:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b994:	f8cd 800c 	str.w	r8, [sp, #12]
 800b998:	2330      	movs	r3, #48	; 0x30
 800b99a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bb40 <_svfiprintf_r+0x1e8>
 800b99e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9a2:	f04f 0901 	mov.w	r9, #1
 800b9a6:	4623      	mov	r3, r4
 800b9a8:	469a      	mov	sl, r3
 800b9aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9ae:	b10a      	cbz	r2, 800b9b4 <_svfiprintf_r+0x5c>
 800b9b0:	2a25      	cmp	r2, #37	; 0x25
 800b9b2:	d1f9      	bne.n	800b9a8 <_svfiprintf_r+0x50>
 800b9b4:	ebba 0b04 	subs.w	fp, sl, r4
 800b9b8:	d00b      	beq.n	800b9d2 <_svfiprintf_r+0x7a>
 800b9ba:	465b      	mov	r3, fp
 800b9bc:	4622      	mov	r2, r4
 800b9be:	4629      	mov	r1, r5
 800b9c0:	4638      	mov	r0, r7
 800b9c2:	f7ff ff6f 	bl	800b8a4 <__ssputs_r>
 800b9c6:	3001      	adds	r0, #1
 800b9c8:	f000 80a9 	beq.w	800bb1e <_svfiprintf_r+0x1c6>
 800b9cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9ce:	445a      	add	r2, fp
 800b9d0:	9209      	str	r2, [sp, #36]	; 0x24
 800b9d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	f000 80a1 	beq.w	800bb1e <_svfiprintf_r+0x1c6>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	f04f 32ff 	mov.w	r2, #4294967295
 800b9e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9e6:	f10a 0a01 	add.w	sl, sl, #1
 800b9ea:	9304      	str	r3, [sp, #16]
 800b9ec:	9307      	str	r3, [sp, #28]
 800b9ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9f2:	931a      	str	r3, [sp, #104]	; 0x68
 800b9f4:	4654      	mov	r4, sl
 800b9f6:	2205      	movs	r2, #5
 800b9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9fc:	4850      	ldr	r0, [pc, #320]	; (800bb40 <_svfiprintf_r+0x1e8>)
 800b9fe:	f7f4 fbff 	bl	8000200 <memchr>
 800ba02:	9a04      	ldr	r2, [sp, #16]
 800ba04:	b9d8      	cbnz	r0, 800ba3e <_svfiprintf_r+0xe6>
 800ba06:	06d0      	lsls	r0, r2, #27
 800ba08:	bf44      	itt	mi
 800ba0a:	2320      	movmi	r3, #32
 800ba0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba10:	0711      	lsls	r1, r2, #28
 800ba12:	bf44      	itt	mi
 800ba14:	232b      	movmi	r3, #43	; 0x2b
 800ba16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba20:	d015      	beq.n	800ba4e <_svfiprintf_r+0xf6>
 800ba22:	9a07      	ldr	r2, [sp, #28]
 800ba24:	4654      	mov	r4, sl
 800ba26:	2000      	movs	r0, #0
 800ba28:	f04f 0c0a 	mov.w	ip, #10
 800ba2c:	4621      	mov	r1, r4
 800ba2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba32:	3b30      	subs	r3, #48	; 0x30
 800ba34:	2b09      	cmp	r3, #9
 800ba36:	d94d      	bls.n	800bad4 <_svfiprintf_r+0x17c>
 800ba38:	b1b0      	cbz	r0, 800ba68 <_svfiprintf_r+0x110>
 800ba3a:	9207      	str	r2, [sp, #28]
 800ba3c:	e014      	b.n	800ba68 <_svfiprintf_r+0x110>
 800ba3e:	eba0 0308 	sub.w	r3, r0, r8
 800ba42:	fa09 f303 	lsl.w	r3, r9, r3
 800ba46:	4313      	orrs	r3, r2
 800ba48:	9304      	str	r3, [sp, #16]
 800ba4a:	46a2      	mov	sl, r4
 800ba4c:	e7d2      	b.n	800b9f4 <_svfiprintf_r+0x9c>
 800ba4e:	9b03      	ldr	r3, [sp, #12]
 800ba50:	1d19      	adds	r1, r3, #4
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	9103      	str	r1, [sp, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	bfbb      	ittet	lt
 800ba5a:	425b      	neglt	r3, r3
 800ba5c:	f042 0202 	orrlt.w	r2, r2, #2
 800ba60:	9307      	strge	r3, [sp, #28]
 800ba62:	9307      	strlt	r3, [sp, #28]
 800ba64:	bfb8      	it	lt
 800ba66:	9204      	strlt	r2, [sp, #16]
 800ba68:	7823      	ldrb	r3, [r4, #0]
 800ba6a:	2b2e      	cmp	r3, #46	; 0x2e
 800ba6c:	d10c      	bne.n	800ba88 <_svfiprintf_r+0x130>
 800ba6e:	7863      	ldrb	r3, [r4, #1]
 800ba70:	2b2a      	cmp	r3, #42	; 0x2a
 800ba72:	d134      	bne.n	800bade <_svfiprintf_r+0x186>
 800ba74:	9b03      	ldr	r3, [sp, #12]
 800ba76:	1d1a      	adds	r2, r3, #4
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	9203      	str	r2, [sp, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	bfb8      	it	lt
 800ba80:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba84:	3402      	adds	r4, #2
 800ba86:	9305      	str	r3, [sp, #20]
 800ba88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bb50 <_svfiprintf_r+0x1f8>
 800ba8c:	7821      	ldrb	r1, [r4, #0]
 800ba8e:	2203      	movs	r2, #3
 800ba90:	4650      	mov	r0, sl
 800ba92:	f7f4 fbb5 	bl	8000200 <memchr>
 800ba96:	b138      	cbz	r0, 800baa8 <_svfiprintf_r+0x150>
 800ba98:	9b04      	ldr	r3, [sp, #16]
 800ba9a:	eba0 000a 	sub.w	r0, r0, sl
 800ba9e:	2240      	movs	r2, #64	; 0x40
 800baa0:	4082      	lsls	r2, r0
 800baa2:	4313      	orrs	r3, r2
 800baa4:	3401      	adds	r4, #1
 800baa6:	9304      	str	r3, [sp, #16]
 800baa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baac:	4825      	ldr	r0, [pc, #148]	; (800bb44 <_svfiprintf_r+0x1ec>)
 800baae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bab2:	2206      	movs	r2, #6
 800bab4:	f7f4 fba4 	bl	8000200 <memchr>
 800bab8:	2800      	cmp	r0, #0
 800baba:	d038      	beq.n	800bb2e <_svfiprintf_r+0x1d6>
 800babc:	4b22      	ldr	r3, [pc, #136]	; (800bb48 <_svfiprintf_r+0x1f0>)
 800babe:	bb1b      	cbnz	r3, 800bb08 <_svfiprintf_r+0x1b0>
 800bac0:	9b03      	ldr	r3, [sp, #12]
 800bac2:	3307      	adds	r3, #7
 800bac4:	f023 0307 	bic.w	r3, r3, #7
 800bac8:	3308      	adds	r3, #8
 800baca:	9303      	str	r3, [sp, #12]
 800bacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bace:	4433      	add	r3, r6
 800bad0:	9309      	str	r3, [sp, #36]	; 0x24
 800bad2:	e768      	b.n	800b9a6 <_svfiprintf_r+0x4e>
 800bad4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bad8:	460c      	mov	r4, r1
 800bada:	2001      	movs	r0, #1
 800badc:	e7a6      	b.n	800ba2c <_svfiprintf_r+0xd4>
 800bade:	2300      	movs	r3, #0
 800bae0:	3401      	adds	r4, #1
 800bae2:	9305      	str	r3, [sp, #20]
 800bae4:	4619      	mov	r1, r3
 800bae6:	f04f 0c0a 	mov.w	ip, #10
 800baea:	4620      	mov	r0, r4
 800baec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baf0:	3a30      	subs	r2, #48	; 0x30
 800baf2:	2a09      	cmp	r2, #9
 800baf4:	d903      	bls.n	800bafe <_svfiprintf_r+0x1a6>
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d0c6      	beq.n	800ba88 <_svfiprintf_r+0x130>
 800bafa:	9105      	str	r1, [sp, #20]
 800bafc:	e7c4      	b.n	800ba88 <_svfiprintf_r+0x130>
 800bafe:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb02:	4604      	mov	r4, r0
 800bb04:	2301      	movs	r3, #1
 800bb06:	e7f0      	b.n	800baea <_svfiprintf_r+0x192>
 800bb08:	ab03      	add	r3, sp, #12
 800bb0a:	9300      	str	r3, [sp, #0]
 800bb0c:	462a      	mov	r2, r5
 800bb0e:	4b0f      	ldr	r3, [pc, #60]	; (800bb4c <_svfiprintf_r+0x1f4>)
 800bb10:	a904      	add	r1, sp, #16
 800bb12:	4638      	mov	r0, r7
 800bb14:	f7fd fd6c 	bl	80095f0 <_printf_float>
 800bb18:	1c42      	adds	r2, r0, #1
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	d1d6      	bne.n	800bacc <_svfiprintf_r+0x174>
 800bb1e:	89ab      	ldrh	r3, [r5, #12]
 800bb20:	065b      	lsls	r3, r3, #25
 800bb22:	f53f af2d 	bmi.w	800b980 <_svfiprintf_r+0x28>
 800bb26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb28:	b01d      	add	sp, #116	; 0x74
 800bb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2e:	ab03      	add	r3, sp, #12
 800bb30:	9300      	str	r3, [sp, #0]
 800bb32:	462a      	mov	r2, r5
 800bb34:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <_svfiprintf_r+0x1f4>)
 800bb36:	a904      	add	r1, sp, #16
 800bb38:	4638      	mov	r0, r7
 800bb3a:	f7fd fffd 	bl	8009b38 <_printf_i>
 800bb3e:	e7eb      	b.n	800bb18 <_svfiprintf_r+0x1c0>
 800bb40:	0800cc1c 	.word	0x0800cc1c
 800bb44:	0800cc26 	.word	0x0800cc26
 800bb48:	080095f1 	.word	0x080095f1
 800bb4c:	0800b8a5 	.word	0x0800b8a5
 800bb50:	0800cc22 	.word	0x0800cc22

0800bb54 <__sfputc_r>:
 800bb54:	6893      	ldr	r3, [r2, #8]
 800bb56:	3b01      	subs	r3, #1
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	b410      	push	{r4}
 800bb5c:	6093      	str	r3, [r2, #8]
 800bb5e:	da08      	bge.n	800bb72 <__sfputc_r+0x1e>
 800bb60:	6994      	ldr	r4, [r2, #24]
 800bb62:	42a3      	cmp	r3, r4
 800bb64:	db01      	blt.n	800bb6a <__sfputc_r+0x16>
 800bb66:	290a      	cmp	r1, #10
 800bb68:	d103      	bne.n	800bb72 <__sfputc_r+0x1e>
 800bb6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb6e:	f7fe ba8e 	b.w	800a08e <__swbuf_r>
 800bb72:	6813      	ldr	r3, [r2, #0]
 800bb74:	1c58      	adds	r0, r3, #1
 800bb76:	6010      	str	r0, [r2, #0]
 800bb78:	7019      	strb	r1, [r3, #0]
 800bb7a:	4608      	mov	r0, r1
 800bb7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb80:	4770      	bx	lr

0800bb82 <__sfputs_r>:
 800bb82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb84:	4606      	mov	r6, r0
 800bb86:	460f      	mov	r7, r1
 800bb88:	4614      	mov	r4, r2
 800bb8a:	18d5      	adds	r5, r2, r3
 800bb8c:	42ac      	cmp	r4, r5
 800bb8e:	d101      	bne.n	800bb94 <__sfputs_r+0x12>
 800bb90:	2000      	movs	r0, #0
 800bb92:	e007      	b.n	800bba4 <__sfputs_r+0x22>
 800bb94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb98:	463a      	mov	r2, r7
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f7ff ffda 	bl	800bb54 <__sfputc_r>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d1f3      	bne.n	800bb8c <__sfputs_r+0xa>
 800bba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bba8 <_vfiprintf_r>:
 800bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbac:	460d      	mov	r5, r1
 800bbae:	b09d      	sub	sp, #116	; 0x74
 800bbb0:	4614      	mov	r4, r2
 800bbb2:	4698      	mov	r8, r3
 800bbb4:	4606      	mov	r6, r0
 800bbb6:	b118      	cbz	r0, 800bbc0 <_vfiprintf_r+0x18>
 800bbb8:	6a03      	ldr	r3, [r0, #32]
 800bbba:	b90b      	cbnz	r3, 800bbc0 <_vfiprintf_r+0x18>
 800bbbc:	f7fe f958 	bl	8009e70 <__sinit>
 800bbc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbc2:	07d9      	lsls	r1, r3, #31
 800bbc4:	d405      	bmi.n	800bbd2 <_vfiprintf_r+0x2a>
 800bbc6:	89ab      	ldrh	r3, [r5, #12]
 800bbc8:	059a      	lsls	r2, r3, #22
 800bbca:	d402      	bmi.n	800bbd2 <_vfiprintf_r+0x2a>
 800bbcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbce:	f7fe fb6f 	bl	800a2b0 <__retarget_lock_acquire_recursive>
 800bbd2:	89ab      	ldrh	r3, [r5, #12]
 800bbd4:	071b      	lsls	r3, r3, #28
 800bbd6:	d501      	bpl.n	800bbdc <_vfiprintf_r+0x34>
 800bbd8:	692b      	ldr	r3, [r5, #16]
 800bbda:	b99b      	cbnz	r3, 800bc04 <_vfiprintf_r+0x5c>
 800bbdc:	4629      	mov	r1, r5
 800bbde:	4630      	mov	r0, r6
 800bbe0:	f7fe fa92 	bl	800a108 <__swsetup_r>
 800bbe4:	b170      	cbz	r0, 800bc04 <_vfiprintf_r+0x5c>
 800bbe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbe8:	07dc      	lsls	r4, r3, #31
 800bbea:	d504      	bpl.n	800bbf6 <_vfiprintf_r+0x4e>
 800bbec:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf0:	b01d      	add	sp, #116	; 0x74
 800bbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf6:	89ab      	ldrh	r3, [r5, #12]
 800bbf8:	0598      	lsls	r0, r3, #22
 800bbfa:	d4f7      	bmi.n	800bbec <_vfiprintf_r+0x44>
 800bbfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbfe:	f7fe fb58 	bl	800a2b2 <__retarget_lock_release_recursive>
 800bc02:	e7f3      	b.n	800bbec <_vfiprintf_r+0x44>
 800bc04:	2300      	movs	r3, #0
 800bc06:	9309      	str	r3, [sp, #36]	; 0x24
 800bc08:	2320      	movs	r3, #32
 800bc0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc12:	2330      	movs	r3, #48	; 0x30
 800bc14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bdc8 <_vfiprintf_r+0x220>
 800bc18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc1c:	f04f 0901 	mov.w	r9, #1
 800bc20:	4623      	mov	r3, r4
 800bc22:	469a      	mov	sl, r3
 800bc24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc28:	b10a      	cbz	r2, 800bc2e <_vfiprintf_r+0x86>
 800bc2a:	2a25      	cmp	r2, #37	; 0x25
 800bc2c:	d1f9      	bne.n	800bc22 <_vfiprintf_r+0x7a>
 800bc2e:	ebba 0b04 	subs.w	fp, sl, r4
 800bc32:	d00b      	beq.n	800bc4c <_vfiprintf_r+0xa4>
 800bc34:	465b      	mov	r3, fp
 800bc36:	4622      	mov	r2, r4
 800bc38:	4629      	mov	r1, r5
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f7ff ffa1 	bl	800bb82 <__sfputs_r>
 800bc40:	3001      	adds	r0, #1
 800bc42:	f000 80a9 	beq.w	800bd98 <_vfiprintf_r+0x1f0>
 800bc46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc48:	445a      	add	r2, fp
 800bc4a:	9209      	str	r2, [sp, #36]	; 0x24
 800bc4c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 80a1 	beq.w	800bd98 <_vfiprintf_r+0x1f0>
 800bc56:	2300      	movs	r3, #0
 800bc58:	f04f 32ff 	mov.w	r2, #4294967295
 800bc5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc60:	f10a 0a01 	add.w	sl, sl, #1
 800bc64:	9304      	str	r3, [sp, #16]
 800bc66:	9307      	str	r3, [sp, #28]
 800bc68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc6c:	931a      	str	r3, [sp, #104]	; 0x68
 800bc6e:	4654      	mov	r4, sl
 800bc70:	2205      	movs	r2, #5
 800bc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc76:	4854      	ldr	r0, [pc, #336]	; (800bdc8 <_vfiprintf_r+0x220>)
 800bc78:	f7f4 fac2 	bl	8000200 <memchr>
 800bc7c:	9a04      	ldr	r2, [sp, #16]
 800bc7e:	b9d8      	cbnz	r0, 800bcb8 <_vfiprintf_r+0x110>
 800bc80:	06d1      	lsls	r1, r2, #27
 800bc82:	bf44      	itt	mi
 800bc84:	2320      	movmi	r3, #32
 800bc86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc8a:	0713      	lsls	r3, r2, #28
 800bc8c:	bf44      	itt	mi
 800bc8e:	232b      	movmi	r3, #43	; 0x2b
 800bc90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc94:	f89a 3000 	ldrb.w	r3, [sl]
 800bc98:	2b2a      	cmp	r3, #42	; 0x2a
 800bc9a:	d015      	beq.n	800bcc8 <_vfiprintf_r+0x120>
 800bc9c:	9a07      	ldr	r2, [sp, #28]
 800bc9e:	4654      	mov	r4, sl
 800bca0:	2000      	movs	r0, #0
 800bca2:	f04f 0c0a 	mov.w	ip, #10
 800bca6:	4621      	mov	r1, r4
 800bca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcac:	3b30      	subs	r3, #48	; 0x30
 800bcae:	2b09      	cmp	r3, #9
 800bcb0:	d94d      	bls.n	800bd4e <_vfiprintf_r+0x1a6>
 800bcb2:	b1b0      	cbz	r0, 800bce2 <_vfiprintf_r+0x13a>
 800bcb4:	9207      	str	r2, [sp, #28]
 800bcb6:	e014      	b.n	800bce2 <_vfiprintf_r+0x13a>
 800bcb8:	eba0 0308 	sub.w	r3, r0, r8
 800bcbc:	fa09 f303 	lsl.w	r3, r9, r3
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	9304      	str	r3, [sp, #16]
 800bcc4:	46a2      	mov	sl, r4
 800bcc6:	e7d2      	b.n	800bc6e <_vfiprintf_r+0xc6>
 800bcc8:	9b03      	ldr	r3, [sp, #12]
 800bcca:	1d19      	adds	r1, r3, #4
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	9103      	str	r1, [sp, #12]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	bfbb      	ittet	lt
 800bcd4:	425b      	neglt	r3, r3
 800bcd6:	f042 0202 	orrlt.w	r2, r2, #2
 800bcda:	9307      	strge	r3, [sp, #28]
 800bcdc:	9307      	strlt	r3, [sp, #28]
 800bcde:	bfb8      	it	lt
 800bce0:	9204      	strlt	r2, [sp, #16]
 800bce2:	7823      	ldrb	r3, [r4, #0]
 800bce4:	2b2e      	cmp	r3, #46	; 0x2e
 800bce6:	d10c      	bne.n	800bd02 <_vfiprintf_r+0x15a>
 800bce8:	7863      	ldrb	r3, [r4, #1]
 800bcea:	2b2a      	cmp	r3, #42	; 0x2a
 800bcec:	d134      	bne.n	800bd58 <_vfiprintf_r+0x1b0>
 800bcee:	9b03      	ldr	r3, [sp, #12]
 800bcf0:	1d1a      	adds	r2, r3, #4
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	9203      	str	r2, [sp, #12]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	bfb8      	it	lt
 800bcfa:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcfe:	3402      	adds	r4, #2
 800bd00:	9305      	str	r3, [sp, #20]
 800bd02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bdd8 <_vfiprintf_r+0x230>
 800bd06:	7821      	ldrb	r1, [r4, #0]
 800bd08:	2203      	movs	r2, #3
 800bd0a:	4650      	mov	r0, sl
 800bd0c:	f7f4 fa78 	bl	8000200 <memchr>
 800bd10:	b138      	cbz	r0, 800bd22 <_vfiprintf_r+0x17a>
 800bd12:	9b04      	ldr	r3, [sp, #16]
 800bd14:	eba0 000a 	sub.w	r0, r0, sl
 800bd18:	2240      	movs	r2, #64	; 0x40
 800bd1a:	4082      	lsls	r2, r0
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	3401      	adds	r4, #1
 800bd20:	9304      	str	r3, [sp, #16]
 800bd22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd26:	4829      	ldr	r0, [pc, #164]	; (800bdcc <_vfiprintf_r+0x224>)
 800bd28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd2c:	2206      	movs	r2, #6
 800bd2e:	f7f4 fa67 	bl	8000200 <memchr>
 800bd32:	2800      	cmp	r0, #0
 800bd34:	d03f      	beq.n	800bdb6 <_vfiprintf_r+0x20e>
 800bd36:	4b26      	ldr	r3, [pc, #152]	; (800bdd0 <_vfiprintf_r+0x228>)
 800bd38:	bb1b      	cbnz	r3, 800bd82 <_vfiprintf_r+0x1da>
 800bd3a:	9b03      	ldr	r3, [sp, #12]
 800bd3c:	3307      	adds	r3, #7
 800bd3e:	f023 0307 	bic.w	r3, r3, #7
 800bd42:	3308      	adds	r3, #8
 800bd44:	9303      	str	r3, [sp, #12]
 800bd46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd48:	443b      	add	r3, r7
 800bd4a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd4c:	e768      	b.n	800bc20 <_vfiprintf_r+0x78>
 800bd4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd52:	460c      	mov	r4, r1
 800bd54:	2001      	movs	r0, #1
 800bd56:	e7a6      	b.n	800bca6 <_vfiprintf_r+0xfe>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	3401      	adds	r4, #1
 800bd5c:	9305      	str	r3, [sp, #20]
 800bd5e:	4619      	mov	r1, r3
 800bd60:	f04f 0c0a 	mov.w	ip, #10
 800bd64:	4620      	mov	r0, r4
 800bd66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd6a:	3a30      	subs	r2, #48	; 0x30
 800bd6c:	2a09      	cmp	r2, #9
 800bd6e:	d903      	bls.n	800bd78 <_vfiprintf_r+0x1d0>
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d0c6      	beq.n	800bd02 <_vfiprintf_r+0x15a>
 800bd74:	9105      	str	r1, [sp, #20]
 800bd76:	e7c4      	b.n	800bd02 <_vfiprintf_r+0x15a>
 800bd78:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e7f0      	b.n	800bd64 <_vfiprintf_r+0x1bc>
 800bd82:	ab03      	add	r3, sp, #12
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	462a      	mov	r2, r5
 800bd88:	4b12      	ldr	r3, [pc, #72]	; (800bdd4 <_vfiprintf_r+0x22c>)
 800bd8a:	a904      	add	r1, sp, #16
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f7fd fc2f 	bl	80095f0 <_printf_float>
 800bd92:	4607      	mov	r7, r0
 800bd94:	1c78      	adds	r0, r7, #1
 800bd96:	d1d6      	bne.n	800bd46 <_vfiprintf_r+0x19e>
 800bd98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd9a:	07d9      	lsls	r1, r3, #31
 800bd9c:	d405      	bmi.n	800bdaa <_vfiprintf_r+0x202>
 800bd9e:	89ab      	ldrh	r3, [r5, #12]
 800bda0:	059a      	lsls	r2, r3, #22
 800bda2:	d402      	bmi.n	800bdaa <_vfiprintf_r+0x202>
 800bda4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bda6:	f7fe fa84 	bl	800a2b2 <__retarget_lock_release_recursive>
 800bdaa:	89ab      	ldrh	r3, [r5, #12]
 800bdac:	065b      	lsls	r3, r3, #25
 800bdae:	f53f af1d 	bmi.w	800bbec <_vfiprintf_r+0x44>
 800bdb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdb4:	e71c      	b.n	800bbf0 <_vfiprintf_r+0x48>
 800bdb6:	ab03      	add	r3, sp, #12
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	462a      	mov	r2, r5
 800bdbc:	4b05      	ldr	r3, [pc, #20]	; (800bdd4 <_vfiprintf_r+0x22c>)
 800bdbe:	a904      	add	r1, sp, #16
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f7fd feb9 	bl	8009b38 <_printf_i>
 800bdc6:	e7e4      	b.n	800bd92 <_vfiprintf_r+0x1ea>
 800bdc8:	0800cc1c 	.word	0x0800cc1c
 800bdcc:	0800cc26 	.word	0x0800cc26
 800bdd0:	080095f1 	.word	0x080095f1
 800bdd4:	0800bb83 	.word	0x0800bb83
 800bdd8:	0800cc22 	.word	0x0800cc22

0800bddc <__sflush_r>:
 800bddc:	898a      	ldrh	r2, [r1, #12]
 800bdde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde2:	4605      	mov	r5, r0
 800bde4:	0710      	lsls	r0, r2, #28
 800bde6:	460c      	mov	r4, r1
 800bde8:	d458      	bmi.n	800be9c <__sflush_r+0xc0>
 800bdea:	684b      	ldr	r3, [r1, #4]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	dc05      	bgt.n	800bdfc <__sflush_r+0x20>
 800bdf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	dc02      	bgt.n	800bdfc <__sflush_r+0x20>
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdfe:	2e00      	cmp	r6, #0
 800be00:	d0f9      	beq.n	800bdf6 <__sflush_r+0x1a>
 800be02:	2300      	movs	r3, #0
 800be04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be08:	682f      	ldr	r7, [r5, #0]
 800be0a:	6a21      	ldr	r1, [r4, #32]
 800be0c:	602b      	str	r3, [r5, #0]
 800be0e:	d032      	beq.n	800be76 <__sflush_r+0x9a>
 800be10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be12:	89a3      	ldrh	r3, [r4, #12]
 800be14:	075a      	lsls	r2, r3, #29
 800be16:	d505      	bpl.n	800be24 <__sflush_r+0x48>
 800be18:	6863      	ldr	r3, [r4, #4]
 800be1a:	1ac0      	subs	r0, r0, r3
 800be1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be1e:	b10b      	cbz	r3, 800be24 <__sflush_r+0x48>
 800be20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be22:	1ac0      	subs	r0, r0, r3
 800be24:	2300      	movs	r3, #0
 800be26:	4602      	mov	r2, r0
 800be28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be2a:	6a21      	ldr	r1, [r4, #32]
 800be2c:	4628      	mov	r0, r5
 800be2e:	47b0      	blx	r6
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	89a3      	ldrh	r3, [r4, #12]
 800be34:	d106      	bne.n	800be44 <__sflush_r+0x68>
 800be36:	6829      	ldr	r1, [r5, #0]
 800be38:	291d      	cmp	r1, #29
 800be3a:	d82b      	bhi.n	800be94 <__sflush_r+0xb8>
 800be3c:	4a29      	ldr	r2, [pc, #164]	; (800bee4 <__sflush_r+0x108>)
 800be3e:	410a      	asrs	r2, r1
 800be40:	07d6      	lsls	r6, r2, #31
 800be42:	d427      	bmi.n	800be94 <__sflush_r+0xb8>
 800be44:	2200      	movs	r2, #0
 800be46:	6062      	str	r2, [r4, #4]
 800be48:	04d9      	lsls	r1, r3, #19
 800be4a:	6922      	ldr	r2, [r4, #16]
 800be4c:	6022      	str	r2, [r4, #0]
 800be4e:	d504      	bpl.n	800be5a <__sflush_r+0x7e>
 800be50:	1c42      	adds	r2, r0, #1
 800be52:	d101      	bne.n	800be58 <__sflush_r+0x7c>
 800be54:	682b      	ldr	r3, [r5, #0]
 800be56:	b903      	cbnz	r3, 800be5a <__sflush_r+0x7e>
 800be58:	6560      	str	r0, [r4, #84]	; 0x54
 800be5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be5c:	602f      	str	r7, [r5, #0]
 800be5e:	2900      	cmp	r1, #0
 800be60:	d0c9      	beq.n	800bdf6 <__sflush_r+0x1a>
 800be62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be66:	4299      	cmp	r1, r3
 800be68:	d002      	beq.n	800be70 <__sflush_r+0x94>
 800be6a:	4628      	mov	r0, r5
 800be6c:	f7ff f89e 	bl	800afac <_free_r>
 800be70:	2000      	movs	r0, #0
 800be72:	6360      	str	r0, [r4, #52]	; 0x34
 800be74:	e7c0      	b.n	800bdf8 <__sflush_r+0x1c>
 800be76:	2301      	movs	r3, #1
 800be78:	4628      	mov	r0, r5
 800be7a:	47b0      	blx	r6
 800be7c:	1c41      	adds	r1, r0, #1
 800be7e:	d1c8      	bne.n	800be12 <__sflush_r+0x36>
 800be80:	682b      	ldr	r3, [r5, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d0c5      	beq.n	800be12 <__sflush_r+0x36>
 800be86:	2b1d      	cmp	r3, #29
 800be88:	d001      	beq.n	800be8e <__sflush_r+0xb2>
 800be8a:	2b16      	cmp	r3, #22
 800be8c:	d101      	bne.n	800be92 <__sflush_r+0xb6>
 800be8e:	602f      	str	r7, [r5, #0]
 800be90:	e7b1      	b.n	800bdf6 <__sflush_r+0x1a>
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be98:	81a3      	strh	r3, [r4, #12]
 800be9a:	e7ad      	b.n	800bdf8 <__sflush_r+0x1c>
 800be9c:	690f      	ldr	r7, [r1, #16]
 800be9e:	2f00      	cmp	r7, #0
 800bea0:	d0a9      	beq.n	800bdf6 <__sflush_r+0x1a>
 800bea2:	0793      	lsls	r3, r2, #30
 800bea4:	680e      	ldr	r6, [r1, #0]
 800bea6:	bf08      	it	eq
 800bea8:	694b      	ldreq	r3, [r1, #20]
 800beaa:	600f      	str	r7, [r1, #0]
 800beac:	bf18      	it	ne
 800beae:	2300      	movne	r3, #0
 800beb0:	eba6 0807 	sub.w	r8, r6, r7
 800beb4:	608b      	str	r3, [r1, #8]
 800beb6:	f1b8 0f00 	cmp.w	r8, #0
 800beba:	dd9c      	ble.n	800bdf6 <__sflush_r+0x1a>
 800bebc:	6a21      	ldr	r1, [r4, #32]
 800bebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bec0:	4643      	mov	r3, r8
 800bec2:	463a      	mov	r2, r7
 800bec4:	4628      	mov	r0, r5
 800bec6:	47b0      	blx	r6
 800bec8:	2800      	cmp	r0, #0
 800beca:	dc06      	bgt.n	800beda <__sflush_r+0xfe>
 800becc:	89a3      	ldrh	r3, [r4, #12]
 800bece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bed2:	81a3      	strh	r3, [r4, #12]
 800bed4:	f04f 30ff 	mov.w	r0, #4294967295
 800bed8:	e78e      	b.n	800bdf8 <__sflush_r+0x1c>
 800beda:	4407      	add	r7, r0
 800bedc:	eba8 0800 	sub.w	r8, r8, r0
 800bee0:	e7e9      	b.n	800beb6 <__sflush_r+0xda>
 800bee2:	bf00      	nop
 800bee4:	dfbffffe 	.word	0xdfbffffe

0800bee8 <_fflush_r>:
 800bee8:	b538      	push	{r3, r4, r5, lr}
 800beea:	690b      	ldr	r3, [r1, #16]
 800beec:	4605      	mov	r5, r0
 800beee:	460c      	mov	r4, r1
 800bef0:	b913      	cbnz	r3, 800bef8 <_fflush_r+0x10>
 800bef2:	2500      	movs	r5, #0
 800bef4:	4628      	mov	r0, r5
 800bef6:	bd38      	pop	{r3, r4, r5, pc}
 800bef8:	b118      	cbz	r0, 800bf02 <_fflush_r+0x1a>
 800befa:	6a03      	ldr	r3, [r0, #32]
 800befc:	b90b      	cbnz	r3, 800bf02 <_fflush_r+0x1a>
 800befe:	f7fd ffb7 	bl	8009e70 <__sinit>
 800bf02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d0f3      	beq.n	800bef2 <_fflush_r+0xa>
 800bf0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf0c:	07d0      	lsls	r0, r2, #31
 800bf0e:	d404      	bmi.n	800bf1a <_fflush_r+0x32>
 800bf10:	0599      	lsls	r1, r3, #22
 800bf12:	d402      	bmi.n	800bf1a <_fflush_r+0x32>
 800bf14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf16:	f7fe f9cb 	bl	800a2b0 <__retarget_lock_acquire_recursive>
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	f7ff ff5d 	bl	800bddc <__sflush_r>
 800bf22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf24:	07da      	lsls	r2, r3, #31
 800bf26:	4605      	mov	r5, r0
 800bf28:	d4e4      	bmi.n	800bef4 <_fflush_r+0xc>
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	059b      	lsls	r3, r3, #22
 800bf2e:	d4e1      	bmi.n	800bef4 <_fflush_r+0xc>
 800bf30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf32:	f7fe f9be 	bl	800a2b2 <__retarget_lock_release_recursive>
 800bf36:	e7dd      	b.n	800bef4 <_fflush_r+0xc>

0800bf38 <__swhatbuf_r>:
 800bf38:	b570      	push	{r4, r5, r6, lr}
 800bf3a:	460c      	mov	r4, r1
 800bf3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf40:	2900      	cmp	r1, #0
 800bf42:	b096      	sub	sp, #88	; 0x58
 800bf44:	4615      	mov	r5, r2
 800bf46:	461e      	mov	r6, r3
 800bf48:	da0d      	bge.n	800bf66 <__swhatbuf_r+0x2e>
 800bf4a:	89a3      	ldrh	r3, [r4, #12]
 800bf4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bf50:	f04f 0100 	mov.w	r1, #0
 800bf54:	bf0c      	ite	eq
 800bf56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bf5a:	2340      	movne	r3, #64	; 0x40
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	6031      	str	r1, [r6, #0]
 800bf60:	602b      	str	r3, [r5, #0]
 800bf62:	b016      	add	sp, #88	; 0x58
 800bf64:	bd70      	pop	{r4, r5, r6, pc}
 800bf66:	466a      	mov	r2, sp
 800bf68:	f000 f896 	bl	800c098 <_fstat_r>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	dbec      	blt.n	800bf4a <__swhatbuf_r+0x12>
 800bf70:	9901      	ldr	r1, [sp, #4]
 800bf72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bf76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bf7a:	4259      	negs	r1, r3
 800bf7c:	4159      	adcs	r1, r3
 800bf7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf82:	e7eb      	b.n	800bf5c <__swhatbuf_r+0x24>

0800bf84 <__smakebuf_r>:
 800bf84:	898b      	ldrh	r3, [r1, #12]
 800bf86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf88:	079d      	lsls	r5, r3, #30
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	460c      	mov	r4, r1
 800bf8e:	d507      	bpl.n	800bfa0 <__smakebuf_r+0x1c>
 800bf90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf94:	6023      	str	r3, [r4, #0]
 800bf96:	6123      	str	r3, [r4, #16]
 800bf98:	2301      	movs	r3, #1
 800bf9a:	6163      	str	r3, [r4, #20]
 800bf9c:	b002      	add	sp, #8
 800bf9e:	bd70      	pop	{r4, r5, r6, pc}
 800bfa0:	ab01      	add	r3, sp, #4
 800bfa2:	466a      	mov	r2, sp
 800bfa4:	f7ff ffc8 	bl	800bf38 <__swhatbuf_r>
 800bfa8:	9900      	ldr	r1, [sp, #0]
 800bfaa:	4605      	mov	r5, r0
 800bfac:	4630      	mov	r0, r6
 800bfae:	f7ff f871 	bl	800b094 <_malloc_r>
 800bfb2:	b948      	cbnz	r0, 800bfc8 <__smakebuf_r+0x44>
 800bfb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfb8:	059a      	lsls	r2, r3, #22
 800bfba:	d4ef      	bmi.n	800bf9c <__smakebuf_r+0x18>
 800bfbc:	f023 0303 	bic.w	r3, r3, #3
 800bfc0:	f043 0302 	orr.w	r3, r3, #2
 800bfc4:	81a3      	strh	r3, [r4, #12]
 800bfc6:	e7e3      	b.n	800bf90 <__smakebuf_r+0xc>
 800bfc8:	89a3      	ldrh	r3, [r4, #12]
 800bfca:	6020      	str	r0, [r4, #0]
 800bfcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfd0:	81a3      	strh	r3, [r4, #12]
 800bfd2:	9b00      	ldr	r3, [sp, #0]
 800bfd4:	6163      	str	r3, [r4, #20]
 800bfd6:	9b01      	ldr	r3, [sp, #4]
 800bfd8:	6120      	str	r0, [r4, #16]
 800bfda:	b15b      	cbz	r3, 800bff4 <__smakebuf_r+0x70>
 800bfdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfe0:	4630      	mov	r0, r6
 800bfe2:	f000 f86b 	bl	800c0bc <_isatty_r>
 800bfe6:	b128      	cbz	r0, 800bff4 <__smakebuf_r+0x70>
 800bfe8:	89a3      	ldrh	r3, [r4, #12]
 800bfea:	f023 0303 	bic.w	r3, r3, #3
 800bfee:	f043 0301 	orr.w	r3, r3, #1
 800bff2:	81a3      	strh	r3, [r4, #12]
 800bff4:	89a3      	ldrh	r3, [r4, #12]
 800bff6:	431d      	orrs	r5, r3
 800bff8:	81a5      	strh	r5, [r4, #12]
 800bffa:	e7cf      	b.n	800bf9c <__smakebuf_r+0x18>

0800bffc <_putc_r>:
 800bffc:	b570      	push	{r4, r5, r6, lr}
 800bffe:	460d      	mov	r5, r1
 800c000:	4614      	mov	r4, r2
 800c002:	4606      	mov	r6, r0
 800c004:	b118      	cbz	r0, 800c00e <_putc_r+0x12>
 800c006:	6a03      	ldr	r3, [r0, #32]
 800c008:	b90b      	cbnz	r3, 800c00e <_putc_r+0x12>
 800c00a:	f7fd ff31 	bl	8009e70 <__sinit>
 800c00e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c010:	07d8      	lsls	r0, r3, #31
 800c012:	d405      	bmi.n	800c020 <_putc_r+0x24>
 800c014:	89a3      	ldrh	r3, [r4, #12]
 800c016:	0599      	lsls	r1, r3, #22
 800c018:	d402      	bmi.n	800c020 <_putc_r+0x24>
 800c01a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c01c:	f7fe f948 	bl	800a2b0 <__retarget_lock_acquire_recursive>
 800c020:	68a3      	ldr	r3, [r4, #8]
 800c022:	3b01      	subs	r3, #1
 800c024:	2b00      	cmp	r3, #0
 800c026:	60a3      	str	r3, [r4, #8]
 800c028:	da05      	bge.n	800c036 <_putc_r+0x3a>
 800c02a:	69a2      	ldr	r2, [r4, #24]
 800c02c:	4293      	cmp	r3, r2
 800c02e:	db12      	blt.n	800c056 <_putc_r+0x5a>
 800c030:	b2eb      	uxtb	r3, r5
 800c032:	2b0a      	cmp	r3, #10
 800c034:	d00f      	beq.n	800c056 <_putc_r+0x5a>
 800c036:	6823      	ldr	r3, [r4, #0]
 800c038:	1c5a      	adds	r2, r3, #1
 800c03a:	6022      	str	r2, [r4, #0]
 800c03c:	701d      	strb	r5, [r3, #0]
 800c03e:	b2ed      	uxtb	r5, r5
 800c040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c042:	07da      	lsls	r2, r3, #31
 800c044:	d405      	bmi.n	800c052 <_putc_r+0x56>
 800c046:	89a3      	ldrh	r3, [r4, #12]
 800c048:	059b      	lsls	r3, r3, #22
 800c04a:	d402      	bmi.n	800c052 <_putc_r+0x56>
 800c04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c04e:	f7fe f930 	bl	800a2b2 <__retarget_lock_release_recursive>
 800c052:	4628      	mov	r0, r5
 800c054:	bd70      	pop	{r4, r5, r6, pc}
 800c056:	4629      	mov	r1, r5
 800c058:	4622      	mov	r2, r4
 800c05a:	4630      	mov	r0, r6
 800c05c:	f7fe f817 	bl	800a08e <__swbuf_r>
 800c060:	4605      	mov	r5, r0
 800c062:	e7ed      	b.n	800c040 <_putc_r+0x44>

0800c064 <memmove>:
 800c064:	4288      	cmp	r0, r1
 800c066:	b510      	push	{r4, lr}
 800c068:	eb01 0402 	add.w	r4, r1, r2
 800c06c:	d902      	bls.n	800c074 <memmove+0x10>
 800c06e:	4284      	cmp	r4, r0
 800c070:	4623      	mov	r3, r4
 800c072:	d807      	bhi.n	800c084 <memmove+0x20>
 800c074:	1e43      	subs	r3, r0, #1
 800c076:	42a1      	cmp	r1, r4
 800c078:	d008      	beq.n	800c08c <memmove+0x28>
 800c07a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c07e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c082:	e7f8      	b.n	800c076 <memmove+0x12>
 800c084:	4402      	add	r2, r0
 800c086:	4601      	mov	r1, r0
 800c088:	428a      	cmp	r2, r1
 800c08a:	d100      	bne.n	800c08e <memmove+0x2a>
 800c08c:	bd10      	pop	{r4, pc}
 800c08e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c096:	e7f7      	b.n	800c088 <memmove+0x24>

0800c098 <_fstat_r>:
 800c098:	b538      	push	{r3, r4, r5, lr}
 800c09a:	4d07      	ldr	r5, [pc, #28]	; (800c0b8 <_fstat_r+0x20>)
 800c09c:	2300      	movs	r3, #0
 800c09e:	4604      	mov	r4, r0
 800c0a0:	4608      	mov	r0, r1
 800c0a2:	4611      	mov	r1, r2
 800c0a4:	602b      	str	r3, [r5, #0]
 800c0a6:	f7f6 fa36 	bl	8002516 <_fstat>
 800c0aa:	1c43      	adds	r3, r0, #1
 800c0ac:	d102      	bne.n	800c0b4 <_fstat_r+0x1c>
 800c0ae:	682b      	ldr	r3, [r5, #0]
 800c0b0:	b103      	cbz	r3, 800c0b4 <_fstat_r+0x1c>
 800c0b2:	6023      	str	r3, [r4, #0]
 800c0b4:	bd38      	pop	{r3, r4, r5, pc}
 800c0b6:	bf00      	nop
 800c0b8:	20002768 	.word	0x20002768

0800c0bc <_isatty_r>:
 800c0bc:	b538      	push	{r3, r4, r5, lr}
 800c0be:	4d06      	ldr	r5, [pc, #24]	; (800c0d8 <_isatty_r+0x1c>)
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	4608      	mov	r0, r1
 800c0c6:	602b      	str	r3, [r5, #0]
 800c0c8:	f7f6 fa35 	bl	8002536 <_isatty>
 800c0cc:	1c43      	adds	r3, r0, #1
 800c0ce:	d102      	bne.n	800c0d6 <_isatty_r+0x1a>
 800c0d0:	682b      	ldr	r3, [r5, #0]
 800c0d2:	b103      	cbz	r3, 800c0d6 <_isatty_r+0x1a>
 800c0d4:	6023      	str	r3, [r4, #0]
 800c0d6:	bd38      	pop	{r3, r4, r5, pc}
 800c0d8:	20002768 	.word	0x20002768

0800c0dc <_sbrk_r>:
 800c0dc:	b538      	push	{r3, r4, r5, lr}
 800c0de:	4d06      	ldr	r5, [pc, #24]	; (800c0f8 <_sbrk_r+0x1c>)
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	4608      	mov	r0, r1
 800c0e6:	602b      	str	r3, [r5, #0]
 800c0e8:	f7f6 fa3e 	bl	8002568 <_sbrk>
 800c0ec:	1c43      	adds	r3, r0, #1
 800c0ee:	d102      	bne.n	800c0f6 <_sbrk_r+0x1a>
 800c0f0:	682b      	ldr	r3, [r5, #0]
 800c0f2:	b103      	cbz	r3, 800c0f6 <_sbrk_r+0x1a>
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	bd38      	pop	{r3, r4, r5, pc}
 800c0f8:	20002768 	.word	0x20002768

0800c0fc <memcpy>:
 800c0fc:	440a      	add	r2, r1
 800c0fe:	4291      	cmp	r1, r2
 800c100:	f100 33ff 	add.w	r3, r0, #4294967295
 800c104:	d100      	bne.n	800c108 <memcpy+0xc>
 800c106:	4770      	bx	lr
 800c108:	b510      	push	{r4, lr}
 800c10a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c10e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c112:	4291      	cmp	r1, r2
 800c114:	d1f9      	bne.n	800c10a <memcpy+0xe>
 800c116:	bd10      	pop	{r4, pc}

0800c118 <__assert_func>:
 800c118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c11a:	4614      	mov	r4, r2
 800c11c:	461a      	mov	r2, r3
 800c11e:	4b09      	ldr	r3, [pc, #36]	; (800c144 <__assert_func+0x2c>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4605      	mov	r5, r0
 800c124:	68d8      	ldr	r0, [r3, #12]
 800c126:	b14c      	cbz	r4, 800c13c <__assert_func+0x24>
 800c128:	4b07      	ldr	r3, [pc, #28]	; (800c148 <__assert_func+0x30>)
 800c12a:	9100      	str	r1, [sp, #0]
 800c12c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c130:	4906      	ldr	r1, [pc, #24]	; (800c14c <__assert_func+0x34>)
 800c132:	462b      	mov	r3, r5
 800c134:	f000 f872 	bl	800c21c <fiprintf>
 800c138:	f000 f882 	bl	800c240 <abort>
 800c13c:	4b04      	ldr	r3, [pc, #16]	; (800c150 <__assert_func+0x38>)
 800c13e:	461c      	mov	r4, r3
 800c140:	e7f3      	b.n	800c12a <__assert_func+0x12>
 800c142:	bf00      	nop
 800c144:	2000007c 	.word	0x2000007c
 800c148:	0800cc37 	.word	0x0800cc37
 800c14c:	0800cc44 	.word	0x0800cc44
 800c150:	0800cc72 	.word	0x0800cc72

0800c154 <_calloc_r>:
 800c154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c156:	fba1 2402 	umull	r2, r4, r1, r2
 800c15a:	b94c      	cbnz	r4, 800c170 <_calloc_r+0x1c>
 800c15c:	4611      	mov	r1, r2
 800c15e:	9201      	str	r2, [sp, #4]
 800c160:	f7fe ff98 	bl	800b094 <_malloc_r>
 800c164:	9a01      	ldr	r2, [sp, #4]
 800c166:	4605      	mov	r5, r0
 800c168:	b930      	cbnz	r0, 800c178 <_calloc_r+0x24>
 800c16a:	4628      	mov	r0, r5
 800c16c:	b003      	add	sp, #12
 800c16e:	bd30      	pop	{r4, r5, pc}
 800c170:	220c      	movs	r2, #12
 800c172:	6002      	str	r2, [r0, #0]
 800c174:	2500      	movs	r5, #0
 800c176:	e7f8      	b.n	800c16a <_calloc_r+0x16>
 800c178:	4621      	mov	r1, r4
 800c17a:	f7fe f81d 	bl	800a1b8 <memset>
 800c17e:	e7f4      	b.n	800c16a <_calloc_r+0x16>

0800c180 <__ascii_mbtowc>:
 800c180:	b082      	sub	sp, #8
 800c182:	b901      	cbnz	r1, 800c186 <__ascii_mbtowc+0x6>
 800c184:	a901      	add	r1, sp, #4
 800c186:	b142      	cbz	r2, 800c19a <__ascii_mbtowc+0x1a>
 800c188:	b14b      	cbz	r3, 800c19e <__ascii_mbtowc+0x1e>
 800c18a:	7813      	ldrb	r3, [r2, #0]
 800c18c:	600b      	str	r3, [r1, #0]
 800c18e:	7812      	ldrb	r2, [r2, #0]
 800c190:	1e10      	subs	r0, r2, #0
 800c192:	bf18      	it	ne
 800c194:	2001      	movne	r0, #1
 800c196:	b002      	add	sp, #8
 800c198:	4770      	bx	lr
 800c19a:	4610      	mov	r0, r2
 800c19c:	e7fb      	b.n	800c196 <__ascii_mbtowc+0x16>
 800c19e:	f06f 0001 	mvn.w	r0, #1
 800c1a2:	e7f8      	b.n	800c196 <__ascii_mbtowc+0x16>

0800c1a4 <_realloc_r>:
 800c1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a8:	4680      	mov	r8, r0
 800c1aa:	4614      	mov	r4, r2
 800c1ac:	460e      	mov	r6, r1
 800c1ae:	b921      	cbnz	r1, 800c1ba <_realloc_r+0x16>
 800c1b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	f7fe bf6d 	b.w	800b094 <_malloc_r>
 800c1ba:	b92a      	cbnz	r2, 800c1c8 <_realloc_r+0x24>
 800c1bc:	f7fe fef6 	bl	800afac <_free_r>
 800c1c0:	4625      	mov	r5, r4
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1c8:	f000 f841 	bl	800c24e <_malloc_usable_size_r>
 800c1cc:	4284      	cmp	r4, r0
 800c1ce:	4607      	mov	r7, r0
 800c1d0:	d802      	bhi.n	800c1d8 <_realloc_r+0x34>
 800c1d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1d6:	d812      	bhi.n	800c1fe <_realloc_r+0x5a>
 800c1d8:	4621      	mov	r1, r4
 800c1da:	4640      	mov	r0, r8
 800c1dc:	f7fe ff5a 	bl	800b094 <_malloc_r>
 800c1e0:	4605      	mov	r5, r0
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	d0ed      	beq.n	800c1c2 <_realloc_r+0x1e>
 800c1e6:	42bc      	cmp	r4, r7
 800c1e8:	4622      	mov	r2, r4
 800c1ea:	4631      	mov	r1, r6
 800c1ec:	bf28      	it	cs
 800c1ee:	463a      	movcs	r2, r7
 800c1f0:	f7ff ff84 	bl	800c0fc <memcpy>
 800c1f4:	4631      	mov	r1, r6
 800c1f6:	4640      	mov	r0, r8
 800c1f8:	f7fe fed8 	bl	800afac <_free_r>
 800c1fc:	e7e1      	b.n	800c1c2 <_realloc_r+0x1e>
 800c1fe:	4635      	mov	r5, r6
 800c200:	e7df      	b.n	800c1c2 <_realloc_r+0x1e>

0800c202 <__ascii_wctomb>:
 800c202:	b149      	cbz	r1, 800c218 <__ascii_wctomb+0x16>
 800c204:	2aff      	cmp	r2, #255	; 0xff
 800c206:	bf85      	ittet	hi
 800c208:	238a      	movhi	r3, #138	; 0x8a
 800c20a:	6003      	strhi	r3, [r0, #0]
 800c20c:	700a      	strbls	r2, [r1, #0]
 800c20e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c212:	bf98      	it	ls
 800c214:	2001      	movls	r0, #1
 800c216:	4770      	bx	lr
 800c218:	4608      	mov	r0, r1
 800c21a:	4770      	bx	lr

0800c21c <fiprintf>:
 800c21c:	b40e      	push	{r1, r2, r3}
 800c21e:	b503      	push	{r0, r1, lr}
 800c220:	4601      	mov	r1, r0
 800c222:	ab03      	add	r3, sp, #12
 800c224:	4805      	ldr	r0, [pc, #20]	; (800c23c <fiprintf+0x20>)
 800c226:	f853 2b04 	ldr.w	r2, [r3], #4
 800c22a:	6800      	ldr	r0, [r0, #0]
 800c22c:	9301      	str	r3, [sp, #4]
 800c22e:	f7ff fcbb 	bl	800bba8 <_vfiprintf_r>
 800c232:	b002      	add	sp, #8
 800c234:	f85d eb04 	ldr.w	lr, [sp], #4
 800c238:	b003      	add	sp, #12
 800c23a:	4770      	bx	lr
 800c23c:	2000007c 	.word	0x2000007c

0800c240 <abort>:
 800c240:	b508      	push	{r3, lr}
 800c242:	2006      	movs	r0, #6
 800c244:	f000 f834 	bl	800c2b0 <raise>
 800c248:	2001      	movs	r0, #1
 800c24a:	f7f6 f915 	bl	8002478 <_exit>

0800c24e <_malloc_usable_size_r>:
 800c24e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c252:	1f18      	subs	r0, r3, #4
 800c254:	2b00      	cmp	r3, #0
 800c256:	bfbc      	itt	lt
 800c258:	580b      	ldrlt	r3, [r1, r0]
 800c25a:	18c0      	addlt	r0, r0, r3
 800c25c:	4770      	bx	lr

0800c25e <_raise_r>:
 800c25e:	291f      	cmp	r1, #31
 800c260:	b538      	push	{r3, r4, r5, lr}
 800c262:	4604      	mov	r4, r0
 800c264:	460d      	mov	r5, r1
 800c266:	d904      	bls.n	800c272 <_raise_r+0x14>
 800c268:	2316      	movs	r3, #22
 800c26a:	6003      	str	r3, [r0, #0]
 800c26c:	f04f 30ff 	mov.w	r0, #4294967295
 800c270:	bd38      	pop	{r3, r4, r5, pc}
 800c272:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c274:	b112      	cbz	r2, 800c27c <_raise_r+0x1e>
 800c276:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c27a:	b94b      	cbnz	r3, 800c290 <_raise_r+0x32>
 800c27c:	4620      	mov	r0, r4
 800c27e:	f000 f831 	bl	800c2e4 <_getpid_r>
 800c282:	462a      	mov	r2, r5
 800c284:	4601      	mov	r1, r0
 800c286:	4620      	mov	r0, r4
 800c288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c28c:	f000 b818 	b.w	800c2c0 <_kill_r>
 800c290:	2b01      	cmp	r3, #1
 800c292:	d00a      	beq.n	800c2aa <_raise_r+0x4c>
 800c294:	1c59      	adds	r1, r3, #1
 800c296:	d103      	bne.n	800c2a0 <_raise_r+0x42>
 800c298:	2316      	movs	r3, #22
 800c29a:	6003      	str	r3, [r0, #0]
 800c29c:	2001      	movs	r0, #1
 800c29e:	e7e7      	b.n	800c270 <_raise_r+0x12>
 800c2a0:	2400      	movs	r4, #0
 800c2a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	4798      	blx	r3
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	e7e0      	b.n	800c270 <_raise_r+0x12>
	...

0800c2b0 <raise>:
 800c2b0:	4b02      	ldr	r3, [pc, #8]	; (800c2bc <raise+0xc>)
 800c2b2:	4601      	mov	r1, r0
 800c2b4:	6818      	ldr	r0, [r3, #0]
 800c2b6:	f7ff bfd2 	b.w	800c25e <_raise_r>
 800c2ba:	bf00      	nop
 800c2bc:	2000007c 	.word	0x2000007c

0800c2c0 <_kill_r>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	4d07      	ldr	r5, [pc, #28]	; (800c2e0 <_kill_r+0x20>)
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	4608      	mov	r0, r1
 800c2ca:	4611      	mov	r1, r2
 800c2cc:	602b      	str	r3, [r5, #0]
 800c2ce:	f7f6 f8c3 	bl	8002458 <_kill>
 800c2d2:	1c43      	adds	r3, r0, #1
 800c2d4:	d102      	bne.n	800c2dc <_kill_r+0x1c>
 800c2d6:	682b      	ldr	r3, [r5, #0]
 800c2d8:	b103      	cbz	r3, 800c2dc <_kill_r+0x1c>
 800c2da:	6023      	str	r3, [r4, #0]
 800c2dc:	bd38      	pop	{r3, r4, r5, pc}
 800c2de:	bf00      	nop
 800c2e0:	20002768 	.word	0x20002768

0800c2e4 <_getpid_r>:
 800c2e4:	f7f6 b8b0 	b.w	8002448 <_getpid>

0800c2e8 <_init>:
 800c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ea:	bf00      	nop
 800c2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ee:	bc08      	pop	{r3}
 800c2f0:	469e      	mov	lr, r3
 800c2f2:	4770      	bx	lr

0800c2f4 <_fini>:
 800c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f6:	bf00      	nop
 800c2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2fa:	bc08      	pop	{r3}
 800c2fc:	469e      	mov	lr, r3
 800c2fe:	4770      	bx	lr
