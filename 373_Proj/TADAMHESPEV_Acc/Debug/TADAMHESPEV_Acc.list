
TADAMHESPEV_Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008630  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  080087f0  080087f0  000187f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c1c  08008c1c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008c1c  08008c1c  00018c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c24  08008c24  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c24  08008c24  00018c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c28  08008c28  00018c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001d4  08008e00  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08008e00  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133fd  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028cd  00000000  00000000  00033644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00035f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c82  00000000  00000000  00036f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b807  00000000  00000000  00037bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001518f  00000000  00000000  000633c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001048d2  00000000  00000000  00078550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005390  00000000  00000000  0017ce24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  001821b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080087d8 	.word	0x080087d8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	080087d8 	.word	0x080087d8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <setupAccModule>:
#define OUT_Z_L_A 0x2C
#define OUT_Z_H_A 0x2D

extern I2C_HandleTypeDef hi2c1;

void setupAccModule(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
	uint8_t buf[10]= {ACC_IR_CTRL1, CTR1_SETUP};
 8000eda:	f249 7320 	movw	r3, #38688	; 0x9720
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	809a      	strh	r2, [r3, #4]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDR << 1, buf, 2, 1000);
 8000eea:	1d3a      	adds	r2, r7, #4
 8000eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	2132      	movs	r1, #50	; 0x32
 8000ef6:	4809      	ldr	r0, [pc, #36]	; (8000f1c <setupAccModule+0x48>)
 8000ef8:	f001 fae8 	bl	80024cc <HAL_I2C_Master_Transmit>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73fb      	strb	r3, [r7, #15]
	if(ret == 0){
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d103      	bne.n	8000f0e <setupAccModule+0x3a>
		printf("We gucci\n");
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <setupAccModule+0x4c>)
 8000f08:	f005 fccc 	bl	80068a4 <puts>
	}
	else{
		printf("we not gucci\n");
	}
}
 8000f0c:	e002      	b.n	8000f14 <setupAccModule+0x40>
		printf("we not gucci\n");
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <setupAccModule+0x50>)
 8000f10:	f005 fcc8 	bl	80068a4 <puts>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200001f0 	.word	0x200001f0
 8000f20:	080087f0 	.word	0x080087f0
 8000f24:	080087fc 	.word	0x080087fc

08000f28 <accFloat2Binary>:

uint8_t accFloat2Binary(float accVal){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(fabs(accVal) < 0.125){
 8000f32:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f36:	eef0 7ae7 	vabs.f32	s15, s15
 8000f3a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8000f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f46:	d501      	bpl.n	8000f4c <accFloat2Binary+0x24>
		return 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e0c3      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else if(fabs(accVal) < 0.25){
 8000f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f50:	eef0 7ae7 	vabs.f32	s15, s15
 8000f54:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f60:	d501      	bpl.n	8000f66 <accFloat2Binary+0x3e>
		return 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e0b6      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else if(fabs(accVal) < 0.375){
 8000f66:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f6a:	eef0 7ae7 	vabs.f32	s15, s15
 8000f6e:	eeb5 7a08 	vmov.f32	s14, #88	; 0x3ec00000  0.375
 8000f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7a:	d501      	bpl.n	8000f80 <accFloat2Binary+0x58>
		return 2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e0a9      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else if(fabs(accVal) < 0.5){
 8000f80:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f84:	eef0 7ae7 	vabs.f32	s15, s15
 8000f88:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f94:	d501      	bpl.n	8000f9a <accFloat2Binary+0x72>
		return 3;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e09c      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else if(fabs(accVal) < 0.625){
 8000f9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9e:	eef0 7ae7 	vabs.f32	s15, s15
 8000fa2:	eeb6 7a04 	vmov.f32	s14, #100	; 0x3f200000  0.625
 8000fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d501      	bpl.n	8000fb4 <accFloat2Binary+0x8c>
		return 4;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	e08f      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else if(fabs(accVal) < 0.75){
 8000fb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb8:	eef0 7ae7 	vabs.f32	s15, s15
 8000fbc:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8000fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc8:	d501      	bpl.n	8000fce <accFloat2Binary+0xa6>
		return 5;
 8000fca:	2305      	movs	r3, #5
 8000fcc:	e082      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else if(fabs(accVal) < 0.875){
 8000fce:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd2:	eef0 7ae7 	vabs.f32	s15, s15
 8000fd6:	eeb6 7a0c 	vmov.f32	s14, #108	; 0x3f600000  0.875
 8000fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe2:	d501      	bpl.n	8000fe8 <accFloat2Binary+0xc0>
		return 6;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	e075      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else if(fabs(accVal) < 1){
 8000fe8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fec:	eef0 7ae7 	vabs.f32	s15, s15
 8000ff0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffc:	d501      	bpl.n	8001002 <accFloat2Binary+0xda>
		return 7;
 8000ffe:	2307      	movs	r3, #7
 8001000:	e068      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else if(fabs(accVal) < 1.125){
 8001002:	edd7 7a01 	vldr	s15, [r7, #4]
 8001006:	eef0 7ae7 	vabs.f32	s15, s15
 800100a:	eeb7 7a02 	vmov.f32	s14, #114	; 0x3f900000  1.125
 800100e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001016:	d501      	bpl.n	800101c <accFloat2Binary+0xf4>
		return 8;
 8001018:	2308      	movs	r3, #8
 800101a:	e05b      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else if(fabs(accVal) < 1.25){
 800101c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001020:	eef0 7ae7 	vabs.f32	s15, s15
 8001024:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8001028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	d501      	bpl.n	8001036 <accFloat2Binary+0x10e>
		return 9;
 8001032:	2309      	movs	r3, #9
 8001034:	e04e      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else if(fabs(accVal) < 1.375){
 8001036:	edd7 7a01 	vldr	s15, [r7, #4]
 800103a:	eef0 7ae7 	vabs.f32	s15, s15
 800103e:	eeb7 7a06 	vmov.f32	s14, #118	; 0x3fb00000  1.375
 8001042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	d501      	bpl.n	8001050 <accFloat2Binary+0x128>
		return 10;
 800104c:	230a      	movs	r3, #10
 800104e:	e041      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else if(fabs(accVal) < 1.5){
 8001050:	edd7 7a01 	vldr	s15, [r7, #4]
 8001054:	eef0 7ae7 	vabs.f32	s15, s15
 8001058:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800105c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	d501      	bpl.n	800106a <accFloat2Binary+0x142>
		return 11;
 8001066:	230b      	movs	r3, #11
 8001068:	e034      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else if(fabs(accVal) < 1.625){
 800106a:	edd7 7a01 	vldr	s15, [r7, #4]
 800106e:	eef0 7ae7 	vabs.f32	s15, s15
 8001072:	eeb7 7a0a 	vmov.f32	s14, #122	; 0x3fd00000  1.625
 8001076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107e:	d501      	bpl.n	8001084 <accFloat2Binary+0x15c>
		return 12;
 8001080:	230c      	movs	r3, #12
 8001082:	e027      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else if(fabs(accVal) < 1.75){
 8001084:	edd7 7a01 	vldr	s15, [r7, #4]
 8001088:	eef0 7ae7 	vabs.f32	s15, s15
 800108c:	eeb7 7a0c 	vmov.f32	s14, #124	; 0x3fe00000  1.750
 8001090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d501      	bpl.n	800109e <accFloat2Binary+0x176>
		return 13;
 800109a:	230d      	movs	r3, #13
 800109c:	e01a      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else if(fabs(accVal) < 1.875){
 800109e:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a2:	eef0 7ae7 	vabs.f32	s15, s15
 80010a6:	eeb7 7a0e 	vmov.f32	s14, #126	; 0x3ff00000  1.875
 80010aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	d501      	bpl.n	80010b8 <accFloat2Binary+0x190>
		return 14;
 80010b4:	230e      	movs	r3, #14
 80010b6:	e00d      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else if(fabs(accVal) < 2){
 80010b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010bc:	eef0 7ae7 	vabs.f32	s15, s15
 80010c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80010c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	d501      	bpl.n	80010d2 <accFloat2Binary+0x1aa>
		return 15;
 80010ce:	230f      	movs	r3, #15
 80010d0:	e000      	b.n	80010d4 <accFloat2Binary+0x1ac>
	}
	else{
		return 0xFF;
 80010d2:	23ff      	movs	r3, #255	; 0xff
	}
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <ReadAccData>:
	printf("Raw:\t%u\tAcc:\t%f\tBinary:\t",raw,acc);
	printBinary(accBin);
	printf("\n");
}

float ReadAccData(){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
		uint8_t buf[1]= {OUT_X_L_A | 1 << 7}; //Auto-Increment OUT_X_L_A
 80010e6:	23a8      	movs	r3, #168	; 0xa8
 80010e8:	713b      	strb	r3, [r7, #4]
		uint8_t rbuf[2];
		float accVal = 0;
 80010ea:	f04f 0300 	mov.w	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]

		HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDR << 1, buf, 1, 1000);
 80010f0:	1d3a      	adds	r2, r7, #4
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	2132      	movs	r1, #50	; 0x32
 80010fc:	4829      	ldr	r0, [pc, #164]	; (80011a4 <ReadAccData+0xc4>)
 80010fe:	f001 f9e5 	bl	80024cc <HAL_I2C_Master_Transmit>
 8001102:	4603      	mov	r3, r0
 8001104:	72fb      	strb	r3, [r7, #11]
		//[TODO] - Have error checking for communication errors
		ret =  HAL_I2C_Master_Receive(&hi2c1, ACC_I2C_ADDR << 1, rbuf, 2, 1000);
 8001106:	463a      	mov	r2, r7
 8001108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2302      	movs	r3, #2
 8001110:	2132      	movs	r1, #50	; 0x32
 8001112:	4824      	ldr	r0, [pc, #144]	; (80011a4 <ReadAccData+0xc4>)
 8001114:	f001 faf2 	bl	80026fc <HAL_I2C_Master_Receive>
 8001118:	4603      	mov	r3, r0
 800111a:	72fb      	strb	r3, [r7, #11]
		//[TODO] - Have error checking for communication errors

		uint16_t raw = (rbuf[1] << 8) | rbuf[0];	// 2's compliment, +-2g's
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	783b      	ldrb	r3, [r7, #0]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21b      	sxth	r3, r3
 800112a:	813b      	strh	r3, [r7, #8]
		if(raw > 64100){
 800112c:	893b      	ldrh	r3, [r7, #8]
 800112e:	f64f 2264 	movw	r2, #64100	; 0xfa64
 8001132:	4293      	cmp	r3, r2
 8001134:	d903      	bls.n	800113e <ReadAccData+0x5e>
			accVal = 0;
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	e021      	b.n	8001182 <ReadAccData+0xa2>
		}
		else if(raw & 0x8000){ //if value is negative
 800113e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	da10      	bge.n	8001168 <ReadAccData+0x88>
			int16_t temp = -((raw ^ 0xFFFF) + 1);
 8001146:	893b      	ldrh	r3, [r7, #8]
 8001148:	80fb      	strh	r3, [r7, #6]
			accVal = (temp / (float)(1 << 15))*2;
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001156:	eddf 6a14 	vldr	s13, [pc, #80]	; 80011a8 <ReadAccData+0xc8>
 800115a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001162:	edc7 7a03 	vstr	s15, [r7, #12]
 8001166:	e00c      	b.n	8001182 <ReadAccData+0xa2>
		}
		else{ //positive acceleration
			accVal = (raw / (float)((1 << 15) - 1))*2;
 8001168:	893b      	ldrh	r3, [r7, #8]
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001172:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80011ac <ReadAccData+0xcc>
 8001176:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800117a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800117e:	edc7 7a03 	vstr	s15, [r7, #12]
		}
		printf("Accel:\t%f",accVal);
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff f9f8 	bl	8000578 <__aeabi_f2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <ReadAccData+0xd0>)
 800118e:	f005 fb23 	bl	80067d8 <iprintf>
		return accVal;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	ee07 3a90 	vmov	s15, r3
		//[TODO] - error check if binAcc = -1;

//		printf("%i\t%b\n",binAcc);

//		printf("%i\t%f\n",cnt++, accVal);
}
 8001198:	eeb0 0a67 	vmov.f32	s0, s15
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200001f0 	.word	0x200001f0
 80011a8:	47000000 	.word	0x47000000
 80011ac:	46fffe00 	.word	0x46fffe00
 80011b0:	0800882c 	.word	0x0800882c

080011b4 <ledTest>:
			LED_COLOR_ARR[i] = 2; // 2 = red
		}
	}
}

void ledTest(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
	//4 start + (4*2 led) + ceil((NUM_TEST_LEDS - 1)/16) = 13 bytes
	uint8_t buf[13];

	// Probably redundant, but fill the start frame
	buf[0] = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	703b      	strb	r3, [r7, #0]
	buf[1] = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	707b      	strb	r3, [r7, #1]
	buf[2] = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	70bb      	strb	r3, [r7, #2]
	buf[3] = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	70fb      	strb	r3, [r7, #3]

	// led_frame = [31:29] = 111; [28:24] = brightness; [23:16] = Blue; [15:8] = Green; [7:0] = Red
	// frames at lower indexes are closest to the data input
	buf[13] = 0b11110000;
 80011ca:	23f0      	movs	r3, #240	; 0xf0
 80011cc:	737b      	strb	r3, [r7, #13]
	buf[12] = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	733b      	strb	r3, [r7, #12]

	//LED closest to connector turned off
	buf[4] = 0b11100000; // no brightness
 80011d2:	23e0      	movs	r3, #224	; 0xe0
 80011d4:	713b      	strb	r3, [r7, #4]
	buf[5] = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	717b      	strb	r3, [r7, #5]
	buf[6] = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	71bb      	strb	r3, [r7, #6]
	buf[7] = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]

	//2nd LED with RED turned on
	buf[8] = 0b11110000;
 80011e2:	23f0      	movs	r3, #240	; 0xf0
 80011e4:	723b      	strb	r3, [r7, #8]
	buf[9] = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	727b      	strb	r3, [r7, #9]
	buf[10] = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	72bb      	strb	r3, [r7, #10]
	buf[11] = 255;
 80011ee:	23ff      	movs	r3, #255	; 0xff
 80011f0:	72fb      	strb	r3, [r7, #11]

	//end frame
	buf[12] = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	733b      	strb	r3, [r7, #12]

	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)buf, 13,1000);
 80011f6:	4639      	mov	r1, r7
 80011f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fc:	220d      	movs	r2, #13
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <ledTest+0x5c>)
 8001200:	f003 fc03 	bl	8004a0a <HAL_SPI_Transmit>
 8001204:	4603      	mov	r3, r0
 8001206:	73fb      	strb	r3, [r7, #15]

	if(ret != HAL_OK){
		//There is a problem
	}
}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200002d8 	.word	0x200002d8

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121a:	f000 fdb6 	bl	8001d8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121e:	f000 f81b 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001222:	f000 f927 	bl	8001474 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001226:	f000 f85d 	bl	80012e4 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800122a:	f000 f899 	bl	8001360 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 800122e:	f000 f8e3 	bl	80013f8 <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  static int cnt = 0;
  setupAccModule();
 8001232:	f7ff fe4f 	bl	8000ed4 <setupAccModule>

  float acc = ReadAccData();
 8001236:	f7ff ff53 	bl	80010e0 <ReadAccData>
 800123a:	ed87 0a03 	vstr	s0, [r7, #12]
  uint8_t binAccRead = accFloat2Binary(acc);
 800123e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001242:	f7ff fe71 	bl	8000f28 <accFloat2Binary>
 8001246:	4603      	mov	r3, r0
 8001248:	72fb      	strb	r3, [r7, #11]
  uint8_t dispBinAcc = binAccRead;
 800124a:	7afb      	ldrb	r3, [r7, #11]
 800124c:	72bb      	strb	r3, [r7, #10]
  int diffTol = 5;
 800124e:	2305      	movs	r3, #5
 8001250:	607b      	str	r3, [r7, #4]
  {
//	 acc = ReadAccData();
//	 printLEDs(acc);


	  ledTest();
 8001252:	f7ff ffaf 	bl	80011b4 <ledTest>
 8001256:	e7fc      	b.n	8001252 <main+0x3e>

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b096      	sub	sp, #88	; 0x58
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2244      	movs	r2, #68	; 0x44
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f005 fb24 	bl	80068b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800127a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800127e:	f001 fe7d 	bl	8002f7c <HAL_PWREx_ControlVoltageScaling>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001288:	f000 fb2a 	bl	80018e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800128c:	2310      	movs	r3, #16
 800128e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001290:	2301      	movs	r3, #1
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001298:	2360      	movs	r3, #96	; 0x60
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 ff1d 	bl	80030e4 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80012b0:	f000 fb16 	bl	80018e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 fb23 	bl	8003918 <HAL_RCC_ClockConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012d8:	f000 fb02 	bl	80018e0 <Error_Handler>
  }
}
 80012dc:	bf00      	nop
 80012de:	3758      	adds	r7, #88	; 0x58
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <MX_I2C1_Init+0x74>)
 80012ea:	4a1c      	ldr	r2, [pc, #112]	; (800135c <MX_I2C1_Init+0x78>)
 80012ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_I2C1_Init+0x74>)
 80012f0:	f640 6214 	movw	r2, #3604	; 0xe14
 80012f4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <MX_I2C1_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_I2C1_Init+0x74>)
 80012fe:	2201      	movs	r2, #1
 8001300:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <MX_I2C1_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_I2C1_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_I2C1_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_I2C1_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_I2C1_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_I2C1_Init+0x74>)
 8001322:	f001 f837 	bl	8002394 <HAL_I2C_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800132c:	f000 fad8 	bl	80018e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001330:	2100      	movs	r1, #0
 8001332:	4809      	ldr	r0, [pc, #36]	; (8001358 <MX_I2C1_Init+0x74>)
 8001334:	f001 fd6a 	bl	8002e0c <HAL_I2CEx_ConfigAnalogFilter>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800133e:	f000 facf 	bl	80018e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001342:	2100      	movs	r1, #0
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_I2C1_Init+0x74>)
 8001346:	f001 fdac 	bl	8002ea2 <HAL_I2CEx_ConfigDigitalFilter>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001350:	f000 fac6 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200001f0 	.word	0x200001f0
 800135c:	40005400 	.word	0x40005400

08001360 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <MX_LPUART1_UART_Init+0x90>)
 8001366:	4a23      	ldr	r2, [pc, #140]	; (80013f4 <MX_LPUART1_UART_Init+0x94>)
 8001368:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <MX_LPUART1_UART_Init+0x90>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <MX_LPUART1_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_LPUART1_UART_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_LPUART1_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_LPUART1_UART_Init+0x90>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_LPUART1_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_LPUART1_UART_Init+0x90>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <MX_LPUART1_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_LPUART1_UART_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <MX_LPUART1_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80013a8:	4811      	ldr	r0, [pc, #68]	; (80013f0 <MX_LPUART1_UART_Init+0x90>)
 80013aa:	f003 fe07 	bl	8004fbc <HAL_UART_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80013b4:	f000 fa94 	bl	80018e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b8:	2100      	movs	r1, #0
 80013ba:	480d      	ldr	r0, [pc, #52]	; (80013f0 <MX_LPUART1_UART_Init+0x90>)
 80013bc:	f004 fc2c 	bl	8005c18 <HAL_UARTEx_SetTxFifoThreshold>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013c6:	f000 fa8b 	bl	80018e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ca:	2100      	movs	r1, #0
 80013cc:	4808      	ldr	r0, [pc, #32]	; (80013f0 <MX_LPUART1_UART_Init+0x90>)
 80013ce:	f004 fc61 	bl	8005c94 <HAL_UARTEx_SetRxFifoThreshold>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013d8:	f000 fa82 	bl	80018e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_LPUART1_UART_Init+0x90>)
 80013de:	f004 fbe2 	bl	8005ba6 <HAL_UARTEx_DisableFifoMode>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013e8:	f000 fa7a 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000244 	.word	0x20000244
 80013f4:	40008000 	.word	0x40008000

080013f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_SPI1_Init+0x74>)
 80013fe:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <MX_SPI1_Init+0x78>)
 8001400:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_SPI1_Init+0x74>)
 8001404:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001408:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_SPI1_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_SPI1_Init+0x74>)
 8001412:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001416:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_SPI1_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <MX_SPI1_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_SPI1_Init+0x74>)
 8001426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800142a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_SPI1_Init+0x74>)
 800142e:	2208      	movs	r2, #8
 8001430:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_SPI1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_SPI1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_SPI1_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_SPI1_Init+0x74>)
 8001446:	2207      	movs	r2, #7
 8001448:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <MX_SPI1_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_SPI1_Init+0x74>)
 8001452:	2208      	movs	r2, #8
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_SPI1_Init+0x74>)
 8001458:	f003 fa34 	bl	80048c4 <HAL_SPI_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001462:	f000 fa3d 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200002d8 	.word	0x200002d8
 8001470:	40013000 	.word	0x40013000

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	; 0x38
 8001478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800148a:	4bb2      	ldr	r3, [pc, #712]	; (8001754 <MX_GPIO_Init+0x2e0>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	4ab1      	ldr	r2, [pc, #708]	; (8001754 <MX_GPIO_Init+0x2e0>)
 8001490:	f043 0310 	orr.w	r3, r3, #16
 8001494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001496:	4baf      	ldr	r3, [pc, #700]	; (8001754 <MX_GPIO_Init+0x2e0>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	623b      	str	r3, [r7, #32]
 80014a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4bac      	ldr	r3, [pc, #688]	; (8001754 <MX_GPIO_Init+0x2e0>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	4aab      	ldr	r2, [pc, #684]	; (8001754 <MX_GPIO_Init+0x2e0>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ae:	4ba9      	ldr	r3, [pc, #676]	; (8001754 <MX_GPIO_Init+0x2e0>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ba:	4ba6      	ldr	r3, [pc, #664]	; (8001754 <MX_GPIO_Init+0x2e0>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	4aa5      	ldr	r2, [pc, #660]	; (8001754 <MX_GPIO_Init+0x2e0>)
 80014c0:	f043 0320 	orr.w	r3, r3, #32
 80014c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c6:	4ba3      	ldr	r3, [pc, #652]	; (8001754 <MX_GPIO_Init+0x2e0>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	f003 0320 	and.w	r3, r3, #32
 80014ce:	61bb      	str	r3, [r7, #24]
 80014d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d2:	4ba0      	ldr	r3, [pc, #640]	; (8001754 <MX_GPIO_Init+0x2e0>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	4a9f      	ldr	r2, [pc, #636]	; (8001754 <MX_GPIO_Init+0x2e0>)
 80014d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014de:	4b9d      	ldr	r3, [pc, #628]	; (8001754 <MX_GPIO_Init+0x2e0>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	4b9a      	ldr	r3, [pc, #616]	; (8001754 <MX_GPIO_Init+0x2e0>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	4a99      	ldr	r2, [pc, #612]	; (8001754 <MX_GPIO_Init+0x2e0>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f6:	4b97      	ldr	r3, [pc, #604]	; (8001754 <MX_GPIO_Init+0x2e0>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	4b94      	ldr	r3, [pc, #592]	; (8001754 <MX_GPIO_Init+0x2e0>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	4a93      	ldr	r2, [pc, #588]	; (8001754 <MX_GPIO_Init+0x2e0>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150e:	4b91      	ldr	r3, [pc, #580]	; (8001754 <MX_GPIO_Init+0x2e0>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151a:	4b8e      	ldr	r3, [pc, #568]	; (8001754 <MX_GPIO_Init+0x2e0>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a8d      	ldr	r2, [pc, #564]	; (8001754 <MX_GPIO_Init+0x2e0>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001526:	4b8b      	ldr	r3, [pc, #556]	; (8001754 <MX_GPIO_Init+0x2e0>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001532:	4b88      	ldr	r3, [pc, #544]	; (8001754 <MX_GPIO_Init+0x2e0>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	4a87      	ldr	r2, [pc, #540]	; (8001754 <MX_GPIO_Init+0x2e0>)
 8001538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800153c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153e:	4b85      	ldr	r3, [pc, #532]	; (8001754 <MX_GPIO_Init+0x2e0>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800154a:	f001 fdbb 	bl	80030c4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2178      	movs	r1, #120	; 0x78
 8001552:	4881      	ldr	r0, [pc, #516]	; (8001758 <MX_GPIO_Init+0x2e4>)
 8001554:	f000 ff06 	bl	8002364 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001558:	230c      	movs	r3, #12
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001568:	230d      	movs	r3, #13
 800156a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	487a      	ldr	r0, [pc, #488]	; (800175c <MX_GPIO_Init+0x2e8>)
 8001574:	f000 fd64 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001578:	2307      	movs	r3, #7
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157c:	2312      	movs	r3, #18
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001588:	2304      	movs	r3, #4
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	4873      	ldr	r0, [pc, #460]	; (8001760 <MX_GPIO_Init+0x2ec>)
 8001594:	f000 fd54 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80015a8:	230d      	movs	r3, #13
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	4619      	mov	r1, r3
 80015b2:	486b      	ldr	r0, [pc, #428]	; (8001760 <MX_GPIO_Init+0x2ec>)
 80015b4:	f000 fd44 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015b8:	233f      	movs	r3, #63	; 0x3f
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015bc:	230b      	movs	r3, #11
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	4866      	ldr	r0, [pc, #408]	; (8001764 <MX_GPIO_Init+0x2f0>)
 80015cc:	f000 fd38 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015d0:	2301      	movs	r3, #1
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015e0:	2301      	movs	r3, #1
 80015e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e8:	4619      	mov	r1, r3
 80015ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ee:	f000 fd27 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80015f2:	230a      	movs	r3, #10
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015f6:	230b      	movs	r3, #11
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f000 fd1a 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800160c:	2301      	movs	r3, #1
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800161c:	2302      	movs	r3, #2
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	4619      	mov	r1, r3
 8001626:	484c      	ldr	r0, [pc, #304]	; (8001758 <MX_GPIO_Init+0x2e4>)
 8001628:	f000 fd0a 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800162c:	2302      	movs	r3, #2
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001630:	230b      	movs	r3, #11
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163c:	4619      	mov	r1, r3
 800163e:	4846      	ldr	r0, [pc, #280]	; (8001758 <MX_GPIO_Init+0x2e4>)
 8001640:	f000 fcfe 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001644:	2304      	movs	r3, #4
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001648:	2303      	movs	r3, #3
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	4619      	mov	r1, r3
 8001656:	4840      	ldr	r0, [pc, #256]	; (8001758 <MX_GPIO_Init+0x2e4>)
 8001658:	f000 fcf2 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800165c:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800166e:	2301      	movs	r3, #1
 8001670:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001676:	4619      	mov	r1, r3
 8001678:	4838      	ldr	r0, [pc, #224]	; (800175c <MX_GPIO_Init+0x2e8>)
 800167a:	f000 fce1 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800167e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001690:	2303      	movs	r3, #3
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001698:	4619      	mov	r1, r3
 800169a:	4830      	ldr	r0, [pc, #192]	; (800175c <MX_GPIO_Init+0x2e8>)
 800169c:	f000 fcd0 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016b2:	2301      	movs	r3, #1
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ba:	4619      	mov	r1, r3
 80016bc:	4826      	ldr	r0, [pc, #152]	; (8001758 <MX_GPIO_Init+0x2e4>)
 80016be:	f000 fcbf 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80016c2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80016d4:	230d      	movs	r3, #13
 80016d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016dc:	4619      	mov	r1, r3
 80016de:	481e      	ldr	r0, [pc, #120]	; (8001758 <MX_GPIO_Init+0x2e4>)
 80016e0:	f000 fcae 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80016f6:	230e      	movs	r3, #14
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fe:	4619      	mov	r1, r3
 8001700:	4815      	ldr	r0, [pc, #84]	; (8001758 <MX_GPIO_Init+0x2e4>)
 8001702:	f000 fc9d 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001706:	f44f 7340 	mov.w	r3, #768	; 0x300
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001718:	2307      	movs	r3, #7
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4619      	mov	r1, r3
 8001722:	4811      	ldr	r0, [pc, #68]	; (8001768 <MX_GPIO_Init+0x2f4>)
 8001724:	f000 fc8c 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001728:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800173a:	2302      	movs	r3, #2
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	4808      	ldr	r0, [pc, #32]	; (8001768 <MX_GPIO_Init+0x2f4>)
 8001746:	f000 fc7b 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800174a:	2340      	movs	r3, #64	; 0x40
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	e00c      	b.n	800176c <MX_GPIO_Init+0x2f8>
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	48000400 	.word	0x48000400
 800175c:	48001000 	.word	0x48001000
 8001760:	48001400 	.word	0x48001400
 8001764:	48000800 	.word	0x48000800
 8001768:	48000c00 	.word	0x48000c00
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001776:	230d      	movs	r3, #13
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177e:	4619      	mov	r1, r3
 8001780:	484a      	ldr	r0, [pc, #296]	; (80018ac <MX_GPIO_Init+0x438>)
 8001782:	f000 fc5d 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001796:	2302      	movs	r3, #2
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179e:	4619      	mov	r1, r3
 80017a0:	4842      	ldr	r0, [pc, #264]	; (80018ac <MX_GPIO_Init+0x438>)
 80017a2:	f000 fc4d 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80017a6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017b8:	230c      	movs	r3, #12
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	483a      	ldr	r0, [pc, #232]	; (80018ac <MX_GPIO_Init+0x438>)
 80017c4:	f000 fc3c 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80017c8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017da:	230a      	movs	r3, #10
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e8:	f000 fc2a 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001804:	f000 fc1c 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001808:	2301      	movs	r3, #1
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001818:	2309      	movs	r3, #9
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001820:	4619      	mov	r1, r3
 8001822:	4823      	ldr	r0, [pc, #140]	; (80018b0 <MX_GPIO_Init+0x43c>)
 8001824:	f000 fc0c 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001828:	2304      	movs	r3, #4
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001838:	230c      	movs	r3, #12
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800183c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001840:	4619      	mov	r1, r3
 8001842:	481b      	ldr	r0, [pc, #108]	; (80018b0 <MX_GPIO_Init+0x43c>)
 8001844:	f000 fbfc 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001848:	2378      	movs	r3, #120	; 0x78
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001858:	2307      	movs	r3, #7
 800185a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001860:	4619      	mov	r1, r3
 8001862:	4813      	ldr	r0, [pc, #76]	; (80018b0 <MX_GPIO_Init+0x43c>)
 8001864:	f000 fbec 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001868:	2378      	movs	r3, #120	; 0x78
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187c:	4619      	mov	r1, r3
 800187e:	480d      	ldr	r0, [pc, #52]	; (80018b4 <MX_GPIO_Init+0x440>)
 8001880:	f000 fbde 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001884:	2301      	movs	r3, #1
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001894:	2302      	movs	r3, #2
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189c:	4619      	mov	r1, r3
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <MX_GPIO_Init+0x444>)
 80018a0:	f000 fbce 	bl	8002040 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a4:	bf00      	nop
 80018a6:	3738      	adds	r7, #56	; 0x38
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	48000800 	.word	0x48000800
 80018b0:	48000c00 	.word	0x48000c00
 80018b4:	48000400 	.word	0x48000400
 80018b8:	48001000 	.word	0x48001000

080018bc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80018c4:	1d39      	adds	r1, r7, #4
 80018c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ca:	2201      	movs	r2, #1
 80018cc:	4803      	ldr	r0, [pc, #12]	; (80018dc <__io_putchar+0x20>)
 80018ce:	f003 fbc5 	bl	800505c <HAL_UART_Transmit>
  return ch;
 80018d2:	687b      	ldr	r3, [r7, #4]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000244 	.word	0x20000244

080018e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <Error_Handler+0x8>
	...

080018ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_MspInit+0x44>)
 80018f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f6:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_MspInit+0x44>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6613      	str	r3, [r2, #96]	; 0x60
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_MspInit+0x44>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_MspInit+0x44>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	4a08      	ldr	r2, [pc, #32]	; (8001930 <HAL_MspInit+0x44>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001914:	6593      	str	r3, [r2, #88]	; 0x58
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_MspInit+0x44>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0ae      	sub	sp, #184	; 0xb8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	2294      	movs	r2, #148	; 0x94
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f004 ffad 	bl	80068b4 <memset>
  if(hi2c->Instance==I2C1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a21      	ldr	r2, [pc, #132]	; (80019e4 <HAL_I2C_MspInit+0xb0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d13b      	bne.n	80019dc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001964:	2340      	movs	r3, #64	; 0x40
 8001966:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001968:	2300      	movs	r3, #0
 800196a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4618      	mov	r0, r3
 8001972:	f002 fa8f 	bl	8003e94 <HAL_RCCEx_PeriphCLKConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800197c:	f7ff ffb0 	bl	80018e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_I2C_MspInit+0xb4>)
 8001982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001984:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <HAL_I2C_MspInit+0xb4>)
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <HAL_I2C_MspInit+0xb4>)
 800198e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001998:	f44f 7340 	mov.w	r3, #768	; 0x300
 800199c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a0:	2312      	movs	r3, #18
 80019a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b2:	2304      	movs	r3, #4
 80019b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019bc:	4619      	mov	r1, r3
 80019be:	480b      	ldr	r0, [pc, #44]	; (80019ec <HAL_I2C_MspInit+0xb8>)
 80019c0:	f000 fb3e 	bl	8002040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_I2C_MspInit+0xb4>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_I2C_MspInit+0xb4>)
 80019ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019ce:	6593      	str	r3, [r2, #88]	; 0x58
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_I2C_MspInit+0xb4>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019dc:	bf00      	nop
 80019de:	37b8      	adds	r7, #184	; 0xb8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40005400 	.word	0x40005400
 80019e8:	40021000 	.word	0x40021000
 80019ec:	48000400 	.word	0x48000400

080019f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b0ae      	sub	sp, #184	; 0xb8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	2294      	movs	r2, #148	; 0x94
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f004 ff4f 	bl	80068b4 <memset>
  if(huart->Instance==LPUART1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a22      	ldr	r2, [pc, #136]	; (8001aa4 <HAL_UART_MspInit+0xb4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d13d      	bne.n	8001a9c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a20:	2320      	movs	r3, #32
 8001a22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f002 fa31 	bl	8003e94 <HAL_RCCEx_PeriphCLKConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a38:	f7ff ff52 	bl	80018e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_UART_MspInit+0xb8>)
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_UART_MspInit+0xb8>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_UART_MspInit+0xb8>)
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_UART_MspInit+0xb8>)
 8001a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a58:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <HAL_UART_MspInit+0xb8>)
 8001a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_UART_MspInit+0xb8>)
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001a6c:	f001 fb2a 	bl	80030c4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001a70:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a94:	4619      	mov	r1, r3
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <HAL_UART_MspInit+0xbc>)
 8001a98:	f000 fad2 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001a9c:	bf00      	nop
 8001a9e:	37b8      	adds	r7, #184	; 0xb8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40008000 	.word	0x40008000
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	48001800 	.word	0x48001800

08001ab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <HAL_SPI_MspInit+0x7c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d128      	bne.n	8001b24 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_SPI_MspInit+0x80>)
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad6:	4a16      	ldr	r2, [pc, #88]	; (8001b30 <HAL_SPI_MspInit+0x80>)
 8001ad8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001adc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <HAL_SPI_MspInit+0x80>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_SPI_MspInit+0x80>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <HAL_SPI_MspInit+0x80>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_SPI_MspInit+0x80>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b02:	23f0      	movs	r3, #240	; 0xf0
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b12:	2305      	movs	r3, #5
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b20:	f000 fa8e 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40013000 	.word	0x40013000
 8001b30:	40021000 	.word	0x40021000

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <NMI_Handler+0x4>

08001b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <MemManage_Handler+0x4>

08001b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <BusFault_Handler+0x4>

08001b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <UsageFault_Handler+0x4>

08001b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b80:	f000 f958 	bl	8001e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return 1;
 8001b8c:	2301      	movs	r3, #1
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_kill>:

int _kill(int pid, int sig)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ba2:	f004 fe93 	bl	80068cc <__errno>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2216      	movs	r2, #22
 8001baa:	601a      	str	r2, [r3, #0]
  return -1;
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <_exit>:

void _exit (int status)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ffe7 	bl	8001b98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bca:	e7fe      	b.n	8001bca <_exit+0x12>

08001bcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e00a      	b.n	8001bf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bde:	f3af 8000 	nop.w
 8001be2:	4601      	mov	r1, r0
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	b2ca      	uxtb	r2, r1
 8001bec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dbf0      	blt.n	8001bde <_read+0x12>
  }

  return len;
 8001bfc:	687b      	ldr	r3, [r7, #4]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e009      	b.n	8001c2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60ba      	str	r2, [r7, #8]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fe4b 	bl	80018bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dbf1      	blt.n	8001c18 <_write+0x12>
  }
  return len;
 8001c34:	687b      	ldr	r3, [r7, #4]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_close>:

int _close(int file)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c66:	605a      	str	r2, [r3, #4]
  return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_isatty>:

int _isatty(int file)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <_sbrk+0x5c>)
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <_sbrk+0x60>)
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <_sbrk+0x64>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <_sbrk+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd8:	f004 fdf8 	bl	80068cc <__errno>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	220c      	movs	r2, #12
 8001ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ce6:	e009      	b.n	8001cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <_sbrk+0x64>)
 8001cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	200a0000 	.word	0x200a0000
 8001d08:	00000400 	.word	0x00000400
 8001d0c:	2000033c 	.word	0x2000033c
 8001d10:	20000490 	.word	0x20000490

08001d14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <SystemInit+0x20>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <SystemInit+0x20>)
 8001d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d3c:	f7ff ffea 	bl	8001d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d42:	490d      	ldr	r1, [pc, #52]	; (8001d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d44:	4a0d      	ldr	r2, [pc, #52]	; (8001d7c <LoopForever+0xe>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d58:	4c0a      	ldr	r4, [pc, #40]	; (8001d84 <LoopForever+0x16>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d66:	f004 fdb7 	bl	80068d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d6a:	f7ff fa53 	bl	8001214 <main>

08001d6e <LoopForever>:

LoopForever:
    b LoopForever
 8001d6e:	e7fe      	b.n	8001d6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d70:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d78:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d7c:	08008c2c 	.word	0x08008c2c
  ldr r2, =_sbss
 8001d80:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d84:	20000490 	.word	0x20000490

08001d88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC1_IRQHandler>

08001d8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	2003      	movs	r0, #3
 8001d96:	f000 f91f 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f000 f80e 	bl	8001dbc <HAL_InitTick>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	e001      	b.n	8001db0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dac:	f7ff fd9e 	bl	80018ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001db0:	79fb      	ldrb	r3, [r7, #7]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_InitTick+0x6c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d023      	beq.n	8001e18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <HAL_InitTick+0x70>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_InitTick+0x6c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f91d 	bl	8002026 <HAL_SYSTICK_Config>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10f      	bne.n	8001e12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d809      	bhi.n	8001e0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e00:	f000 f8f5 	bl	8001fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_InitTick+0x74>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e007      	b.n	8001e1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e004      	b.n	8001e1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	73fb      	strb	r3, [r7, #15]
 8001e16:	e001      	b.n	8001e1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000004 	.word	0x20000004

08001e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_IncTick+0x20>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_IncTick+0x24>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_IncTick+0x24>)
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000008 	.word	0x20000008
 8001e58:	20000340 	.word	0x20000340

08001e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_GetTick+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000340 	.word	0x20000340

08001e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	; (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <SysTick_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fb8:	f7ff ff8e 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <SysTick_Config+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <SysTick_Config+0x40>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff47 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff5c 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ff8e 	bl	8001f2c <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffb0 	bl	8001f94 <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204e:	e166      	b.n	800231e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8158 	beq.w	8002318 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d005      	beq.n	8002080 <HAL_GPIO_Init+0x40>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d130      	bne.n	80020e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020b6:	2201      	movs	r2, #1
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f003 0201 	and.w	r2, r3, #1
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d017      	beq.n	800211e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	2203      	movs	r2, #3
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d123      	bne.n	8002172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	08da      	lsrs	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3208      	adds	r2, #8
 8002132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	220f      	movs	r2, #15
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	08da      	lsrs	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3208      	adds	r2, #8
 800216c:	6939      	ldr	r1, [r7, #16]
 800216e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0203 	and.w	r2, r3, #3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80b2 	beq.w	8002318 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b4:	4b61      	ldr	r3, [pc, #388]	; (800233c <HAL_GPIO_Init+0x2fc>)
 80021b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b8:	4a60      	ldr	r2, [pc, #384]	; (800233c <HAL_GPIO_Init+0x2fc>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6613      	str	r3, [r2, #96]	; 0x60
 80021c0:	4b5e      	ldr	r3, [pc, #376]	; (800233c <HAL_GPIO_Init+0x2fc>)
 80021c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021cc:	4a5c      	ldr	r2, [pc, #368]	; (8002340 <HAL_GPIO_Init+0x300>)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	220f      	movs	r2, #15
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021f6:	d02b      	beq.n	8002250 <HAL_GPIO_Init+0x210>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a52      	ldr	r2, [pc, #328]	; (8002344 <HAL_GPIO_Init+0x304>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d025      	beq.n	800224c <HAL_GPIO_Init+0x20c>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a51      	ldr	r2, [pc, #324]	; (8002348 <HAL_GPIO_Init+0x308>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d01f      	beq.n	8002248 <HAL_GPIO_Init+0x208>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a50      	ldr	r2, [pc, #320]	; (800234c <HAL_GPIO_Init+0x30c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d019      	beq.n	8002244 <HAL_GPIO_Init+0x204>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a4f      	ldr	r2, [pc, #316]	; (8002350 <HAL_GPIO_Init+0x310>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d013      	beq.n	8002240 <HAL_GPIO_Init+0x200>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a4e      	ldr	r2, [pc, #312]	; (8002354 <HAL_GPIO_Init+0x314>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00d      	beq.n	800223c <HAL_GPIO_Init+0x1fc>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a4d      	ldr	r2, [pc, #308]	; (8002358 <HAL_GPIO_Init+0x318>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d007      	beq.n	8002238 <HAL_GPIO_Init+0x1f8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a4c      	ldr	r2, [pc, #304]	; (800235c <HAL_GPIO_Init+0x31c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_GPIO_Init+0x1f4>
 8002230:	2307      	movs	r3, #7
 8002232:	e00e      	b.n	8002252 <HAL_GPIO_Init+0x212>
 8002234:	2308      	movs	r3, #8
 8002236:	e00c      	b.n	8002252 <HAL_GPIO_Init+0x212>
 8002238:	2306      	movs	r3, #6
 800223a:	e00a      	b.n	8002252 <HAL_GPIO_Init+0x212>
 800223c:	2305      	movs	r3, #5
 800223e:	e008      	b.n	8002252 <HAL_GPIO_Init+0x212>
 8002240:	2304      	movs	r3, #4
 8002242:	e006      	b.n	8002252 <HAL_GPIO_Init+0x212>
 8002244:	2303      	movs	r3, #3
 8002246:	e004      	b.n	8002252 <HAL_GPIO_Init+0x212>
 8002248:	2302      	movs	r3, #2
 800224a:	e002      	b.n	8002252 <HAL_GPIO_Init+0x212>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <HAL_GPIO_Init+0x212>
 8002250:	2300      	movs	r3, #0
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	f002 0203 	and.w	r2, r2, #3
 8002258:	0092      	lsls	r2, r2, #2
 800225a:	4093      	lsls	r3, r2
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002262:	4937      	ldr	r1, [pc, #220]	; (8002340 <HAL_GPIO_Init+0x300>)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	3302      	adds	r3, #2
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002270:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <HAL_GPIO_Init+0x320>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43db      	mvns	r3, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002294:	4a32      	ldr	r2, [pc, #200]	; (8002360 <HAL_GPIO_Init+0x320>)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800229a:	4b31      	ldr	r3, [pc, #196]	; (8002360 <HAL_GPIO_Init+0x320>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022be:	4a28      	ldr	r2, [pc, #160]	; (8002360 <HAL_GPIO_Init+0x320>)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022c4:	4b26      	ldr	r3, [pc, #152]	; (8002360 <HAL_GPIO_Init+0x320>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022e8:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <HAL_GPIO_Init+0x320>)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_GPIO_Init+0x320>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002312:	4a13      	ldr	r2, [pc, #76]	; (8002360 <HAL_GPIO_Init+0x320>)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	3301      	adds	r3, #1
 800231c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	f47f ae91 	bne.w	8002050 <HAL_GPIO_Init+0x10>
  }
}
 800232e:	bf00      	nop
 8002330:	bf00      	nop
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40021000 	.word	0x40021000
 8002340:	40010000 	.word	0x40010000
 8002344:	48000400 	.word	0x48000400
 8002348:	48000800 	.word	0x48000800
 800234c:	48000c00 	.word	0x48000c00
 8002350:	48001000 	.word	0x48001000
 8002354:	48001400 	.word	0x48001400
 8002358:	48001800 	.word	0x48001800
 800235c:	48001c00 	.word	0x48001c00
 8002360:	40010400 	.word	0x40010400

08002364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
 8002370:	4613      	mov	r3, r2
 8002372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002374:	787b      	ldrb	r3, [r7, #1]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002380:	e002      	b.n	8002388 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e08d      	b.n	80024c2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff faba 	bl	8001934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2224      	movs	r2, #36	; 0x24
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d107      	bne.n	800240e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	e006      	b.n	800241c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800241a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d108      	bne.n	8002436 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	e007      	b.n	8002446 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002444:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002458:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002468:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69d9      	ldr	r1, [r3, #28]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1a      	ldr	r2, [r3, #32]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	461a      	mov	r2, r3
 80024d8:	460b      	mov	r3, r1
 80024da:	817b      	strh	r3, [r7, #10]
 80024dc:	4613      	mov	r3, r2
 80024de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	f040 80fd 	bne.w	80026e8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_I2C_Master_Transmit+0x30>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e0f6      	b.n	80026ea <HAL_I2C_Master_Transmit+0x21e>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002504:	f7ff fcaa 	bl	8001e5c <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	2319      	movs	r3, #25
 8002510:	2201      	movs	r2, #1
 8002512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fa0a 	bl	8002930 <I2C_WaitOnFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0e1      	b.n	80026ea <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2221      	movs	r2, #33	; 0x21
 800252a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2210      	movs	r2, #16
 8002532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	893a      	ldrh	r2, [r7, #8]
 8002546:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	2bff      	cmp	r3, #255	; 0xff
 8002556:	d906      	bls.n	8002566 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	22ff      	movs	r2, #255	; 0xff
 800255c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800255e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	e007      	b.n	8002576 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002570:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002574:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	d024      	beq.n	80025c8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	8979      	ldrh	r1, [r7, #10]
 80025ba:	4b4e      	ldr	r3, [pc, #312]	; (80026f4 <HAL_I2C_Master_Transmit+0x228>)
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 fbf1 	bl	8002da8 <I2C_TransferConfig>
 80025c6:	e066      	b.n	8002696 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	8979      	ldrh	r1, [r7, #10]
 80025d0:	4b48      	ldr	r3, [pc, #288]	; (80026f4 <HAL_I2C_Master_Transmit+0x228>)
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fbe6 	bl	8002da8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025dc:	e05b      	b.n	8002696 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	6a39      	ldr	r1, [r7, #32]
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f9f3 	bl	80029ce <I2C_WaitOnTXISFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e07b      	b.n	80026ea <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d034      	beq.n	8002696 <HAL_I2C_Master_Transmit+0x1ca>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002630:	2b00      	cmp	r3, #0
 8002632:	d130      	bne.n	8002696 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	2200      	movs	r2, #0
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f976 	bl	8002930 <I2C_WaitOnFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e04d      	b.n	80026ea <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002652:	b29b      	uxth	r3, r3
 8002654:	2bff      	cmp	r3, #255	; 0xff
 8002656:	d90e      	bls.n	8002676 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	22ff      	movs	r2, #255	; 0xff
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	b2da      	uxtb	r2, r3
 8002664:	8979      	ldrh	r1, [r7, #10]
 8002666:	2300      	movs	r3, #0
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fb9a 	bl	8002da8 <I2C_TransferConfig>
 8002674:	e00f      	b.n	8002696 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	b2da      	uxtb	r2, r3
 8002686:	8979      	ldrh	r1, [r7, #10]
 8002688:	2300      	movs	r3, #0
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fb89 	bl	8002da8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d19e      	bne.n	80025de <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	6a39      	ldr	r1, [r7, #32]
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f9d9 	bl	8002a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e01a      	b.n	80026ea <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2220      	movs	r2, #32
 80026ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6859      	ldr	r1, [r3, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <HAL_I2C_Master_Transmit+0x22c>)
 80026c8:	400b      	ands	r3, r1
 80026ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e000      	b.n	80026ea <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80026e8:	2302      	movs	r3, #2
  }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	80002000 	.word	0x80002000
 80026f8:	fe00e800 	.word	0xfe00e800

080026fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	461a      	mov	r2, r3
 8002708:	460b      	mov	r3, r1
 800270a:	817b      	strh	r3, [r7, #10]
 800270c:	4613      	mov	r3, r2
 800270e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b20      	cmp	r3, #32
 800271a:	f040 80db 	bne.w	80028d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_I2C_Master_Receive+0x30>
 8002728:	2302      	movs	r3, #2
 800272a:	e0d4      	b.n	80028d6 <HAL_I2C_Master_Receive+0x1da>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002734:	f7ff fb92 	bl	8001e5c <HAL_GetTick>
 8002738:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2319      	movs	r3, #25
 8002740:	2201      	movs	r2, #1
 8002742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f8f2 	bl	8002930 <I2C_WaitOnFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e0bf      	b.n	80028d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2222      	movs	r2, #34	; 0x22
 800275a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2210      	movs	r2, #16
 8002762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	893a      	ldrh	r2, [r7, #8]
 8002776:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	2bff      	cmp	r3, #255	; 0xff
 8002786:	d90e      	bls.n	80027a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	22ff      	movs	r2, #255	; 0xff
 800278c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002792:	b2da      	uxtb	r2, r3
 8002794:	8979      	ldrh	r1, [r7, #10]
 8002796:	4b52      	ldr	r3, [pc, #328]	; (80028e0 <HAL_I2C_Master_Receive+0x1e4>)
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 fb02 	bl	8002da8 <I2C_TransferConfig>
 80027a4:	e06d      	b.n	8002882 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	8979      	ldrh	r1, [r7, #10]
 80027b8:	4b49      	ldr	r3, [pc, #292]	; (80028e0 <HAL_I2C_Master_Receive+0x1e4>)
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 faf1 	bl	8002da8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80027c6:	e05c      	b.n	8002882 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	6a39      	ldr	r1, [r7, #32]
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f989 	bl	8002ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e07c      	b.n	80028d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d034      	beq.n	8002882 <HAL_I2C_Master_Receive+0x186>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	2b00      	cmp	r3, #0
 800281e:	d130      	bne.n	8002882 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	2200      	movs	r2, #0
 8002828:	2180      	movs	r1, #128	; 0x80
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f880 	bl	8002930 <I2C_WaitOnFlagUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e04d      	b.n	80028d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	2bff      	cmp	r3, #255	; 0xff
 8002842:	d90e      	bls.n	8002862 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	22ff      	movs	r2, #255	; 0xff
 8002848:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284e:	b2da      	uxtb	r2, r3
 8002850:	8979      	ldrh	r1, [r7, #10]
 8002852:	2300      	movs	r3, #0
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 faa4 	bl	8002da8 <I2C_TransferConfig>
 8002860:	e00f      	b.n	8002882 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	b2da      	uxtb	r2, r3
 8002872:	8979      	ldrh	r1, [r7, #10]
 8002874:	2300      	movs	r3, #0
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fa93 	bl	8002da8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d19d      	bne.n	80027c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	6a39      	ldr	r1, [r7, #32]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f8e3 	bl	8002a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e01a      	b.n	80028d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2220      	movs	r2, #32
 80028a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <HAL_I2C_Master_Receive+0x1e8>)
 80028b4:	400b      	ands	r3, r1
 80028b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e000      	b.n	80028d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80028d4:	2302      	movs	r3, #2
  }
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	80002400 	.word	0x80002400
 80028e4:	fe00e800 	.word	0xfe00e800

080028e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d103      	bne.n	8002906 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d007      	beq.n	8002924 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	619a      	str	r2, [r3, #24]
  }
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002940:	e031      	b.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002948:	d02d      	beq.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294a:	f7ff fa87 	bl	8001e5c <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <I2C_WaitOnFlagUntilTimeout+0x30>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d122      	bne.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4013      	ands	r3, r2
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	429a      	cmp	r2, r3
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	429a      	cmp	r2, r3
 800297c:	d113      	bne.n	80029a6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	f043 0220 	orr.w	r2, r3, #32
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00f      	b.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699a      	ldr	r2, [r3, #24]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4013      	ands	r3, r2
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	bf0c      	ite	eq
 80029b6:	2301      	moveq	r3, #1
 80029b8:	2300      	movne	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d0be      	beq.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029da:	e033      	b.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f901 	bl	8002be8 <I2C_IsErrorOccurred>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e031      	b.n	8002a54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f6:	d025      	beq.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f8:	f7ff fa30 	bl	8001e5c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d302      	bcc.n	8002a0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d11a      	bne.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d013      	beq.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e007      	b.n	8002a54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d1c4      	bne.n	80029dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a68:	e02f      	b.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f8ba 	bl	8002be8 <I2C_IsErrorOccurred>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e02d      	b.n	8002ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7ff f9ed 	bl	8001e5c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11a      	bne.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d013      	beq.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f043 0220 	orr.w	r2, r3, #32
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e007      	b.n	8002ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d1c8      	bne.n	8002a6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002af0:	e06b      	b.n	8002bca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f876 	bl	8002be8 <I2C_IsErrorOccurred>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e069      	b.n	8002bda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d138      	bne.n	8002b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d105      	bne.n	8002b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e055      	b.n	8002bda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d107      	bne.n	8002b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2210      	movs	r2, #16
 8002b42:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2204      	movs	r2, #4
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
 8002b4a:	e002      	b.n	8002b52 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2220      	movs	r2, #32
 8002b58:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b1f      	ldr	r3, [pc, #124]	; (8002be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002b66:	400b      	ands	r3, r1
 8002b68:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e029      	b.n	8002bda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b86:	f7ff f969 	bl	8001e5c <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d302      	bcc.n	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d116      	bne.n	8002bca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d00f      	beq.n	8002bca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f043 0220 	orr.w	r2, r3, #32
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e007      	b.n	8002bda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d18c      	bne.n	8002af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	fe00e800 	.word	0xfe00e800

08002be8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	; 0x28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d068      	beq.n	8002ce6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2210      	movs	r2, #16
 8002c1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c1c:	e049      	b.n	8002cb2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c24:	d045      	beq.n	8002cb2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c26:	f7ff f919 	bl	8001e5c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d302      	bcc.n	8002c3c <I2C_IsErrorOccurred+0x54>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d13a      	bne.n	8002cb2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c5e:	d121      	bne.n	8002ca4 <I2C_IsErrorOccurred+0xbc>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c66:	d01d      	beq.n	8002ca4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d01a      	beq.n	8002ca4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c7e:	f7ff f8ed 	bl	8001e5c <HAL_GetTick>
 8002c82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c84:	e00e      	b.n	8002ca4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c86:	f7ff f8e9 	bl	8001e5c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b19      	cmp	r3, #25
 8002c92:	d907      	bls.n	8002ca4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	f043 0320 	orr.w	r3, r3, #32
 8002c9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002ca2:	e006      	b.n	8002cb2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d1e9      	bne.n	8002c86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d003      	beq.n	8002cc8 <I2C_IsErrorOccurred+0xe0>
 8002cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0aa      	beq.n	8002c1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d103      	bne.n	8002cd8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	f043 0308 	orr.w	r3, r3, #8
 8002d20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d01c      	beq.n	8002d96 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f7ff fdc3 	bl	80028e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <I2C_IsErrorOccurred+0x1bc>)
 8002d6e:	400b      	ands	r3, r1
 8002d70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3728      	adds	r7, #40	; 0x28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	fe00e800 	.word	0xfe00e800

08002da8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	460b      	mov	r3, r1
 8002db4:	817b      	strh	r3, [r7, #10]
 8002db6:	4613      	mov	r3, r2
 8002db8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dba:	897b      	ldrh	r3, [r7, #10]
 8002dbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dc0:	7a7b      	ldrb	r3, [r7, #9]
 8002dc2:	041b      	lsls	r3, r3, #16
 8002dc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dc8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dd6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	0d5b      	lsrs	r3, r3, #21
 8002de2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <I2C_TransferConfig+0x60>)
 8002de8:	430b      	orrs	r3, r1
 8002dea:	43db      	mvns	r3, r3
 8002dec:	ea02 0103 	and.w	r1, r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	03ff63ff 	.word	0x03ff63ff

08002e0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d138      	bne.n	8002e94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e032      	b.n	8002e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	; 0x24
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0201 	bic.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e000      	b.n	8002e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
  }
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d139      	bne.n	8002f2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e033      	b.n	8002f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2224      	movs	r2, #36	; 0x24
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ef4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e000      	b.n	8002f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f2c:	2302      	movs	r3, #2
  }
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4c:	d102      	bne.n	8002f54 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f52:	e00b      	b.n	8002f6c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f62:	d102      	bne.n	8002f6a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f68:	e000      	b.n	8002f6c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002f6a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40007000 	.word	0x40007000

08002f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d141      	bne.n	800300e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f8a:	4b4b      	ldr	r3, [pc, #300]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f96:	d131      	bne.n	8002ffc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f98:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f9e:	4a46      	ldr	r2, [pc, #280]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fa8:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fb0:	4a41      	ldr	r2, [pc, #260]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002fb8:	4b40      	ldr	r3, [pc, #256]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2232      	movs	r2, #50	; 0x32
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	4a3f      	ldr	r2, [pc, #252]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	0c9b      	lsrs	r3, r3, #18
 8002fca:	3301      	adds	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fce:	e002      	b.n	8002fd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd6:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe2:	d102      	bne.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f2      	bne.n	8002fd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fea:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff6:	d158      	bne.n	80030aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e057      	b.n	80030ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ffc:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003002:	4a2d      	ldr	r2, [pc, #180]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003008:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800300c:	e04d      	b.n	80030aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003014:	d141      	bne.n	800309a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003016:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003022:	d131      	bne.n	8003088 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800302a:	4a23      	ldr	r2, [pc, #140]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003030:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003034:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800303c:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003042:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003044:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2232      	movs	r2, #50	; 0x32
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	0c9b      	lsrs	r3, r3, #18
 8003056:	3301      	adds	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800305a:	e002      	b.n	8003062 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3b01      	subs	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306e:	d102      	bne.n	8003076 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f2      	bne.n	800305c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003082:	d112      	bne.n	80030aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e011      	b.n	80030ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800308e:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003094:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003098:	e007      	b.n	80030aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030a2:	4a05      	ldr	r2, [pc, #20]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030a8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40007000 	.word	0x40007000
 80030bc:	20000000 	.word	0x20000000
 80030c0:	431bde83 	.word	0x431bde83

080030c4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80030ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030d2:	6053      	str	r3, [r2, #4]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40007000 	.word	0x40007000

080030e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f000 bc08 	b.w	8003908 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030f8:	4b96      	ldr	r3, [pc, #600]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003102:	4b94      	ldr	r3, [pc, #592]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80e4 	beq.w	80032e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <HAL_RCC_OscConfig+0x4c>
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2b0c      	cmp	r3, #12
 8003124:	f040 808b 	bne.w	800323e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2b01      	cmp	r3, #1
 800312c:	f040 8087 	bne.w	800323e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003130:	4b88      	ldr	r3, [pc, #544]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_OscConfig+0x64>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e3df      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1a      	ldr	r2, [r3, #32]
 800314c:	4b81      	ldr	r3, [pc, #516]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d004      	beq.n	8003162 <HAL_RCC_OscConfig+0x7e>
 8003158:	4b7e      	ldr	r3, [pc, #504]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003160:	e005      	b.n	800316e <HAL_RCC_OscConfig+0x8a>
 8003162:	4b7c      	ldr	r3, [pc, #496]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 8003164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800316e:	4293      	cmp	r3, r2
 8003170:	d223      	bcs.n	80031ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fdcc 	bl	8003d14 <RCC_SetFlashLatencyFromMSIRange>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e3c0      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003186:	4b73      	ldr	r3, [pc, #460]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a72      	ldr	r2, [pc, #456]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 800318c:	f043 0308 	orr.w	r3, r3, #8
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	4b70      	ldr	r3, [pc, #448]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	496d      	ldr	r1, [pc, #436]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031a4:	4b6b      	ldr	r3, [pc, #428]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	4968      	ldr	r1, [pc, #416]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
 80031b8:	e025      	b.n	8003206 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ba:	4b66      	ldr	r3, [pc, #408]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a65      	ldr	r2, [pc, #404]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 80031c0:	f043 0308 	orr.w	r3, r3, #8
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b63      	ldr	r3, [pc, #396]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4960      	ldr	r1, [pc, #384]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d8:	4b5e      	ldr	r3, [pc, #376]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	495b      	ldr	r1, [pc, #364]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d109      	bne.n	8003206 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fd8c 	bl	8003d14 <RCC_SetFlashLatencyFromMSIRange>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e380      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003206:	f000 fcc1 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 800320a:	4602      	mov	r2, r0
 800320c:	4b51      	ldr	r3, [pc, #324]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	4950      	ldr	r1, [pc, #320]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 8003218:	5ccb      	ldrb	r3, [r1, r3]
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	4a4e      	ldr	r2, [pc, #312]	; (800335c <HAL_RCC_OscConfig+0x278>)
 8003224:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003226:	4b4e      	ldr	r3, [pc, #312]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe fdc6 	bl	8001dbc <HAL_InitTick>
 8003230:	4603      	mov	r3, r0
 8003232:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d052      	beq.n	80032e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	e364      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d032      	beq.n	80032ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003246:	4b43      	ldr	r3, [pc, #268]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a42      	ldr	r2, [pc, #264]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003252:	f7fe fe03 	bl	8001e5c <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800325a:	f7fe fdff 	bl	8001e5c <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e34d      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800326c:	4b39      	ldr	r3, [pc, #228]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003278:	4b36      	ldr	r3, [pc, #216]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a35      	ldr	r2, [pc, #212]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 800327e:	f043 0308 	orr.w	r3, r3, #8
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b33      	ldr	r3, [pc, #204]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	4930      	ldr	r1, [pc, #192]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003296:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	492b      	ldr	r1, [pc, #172]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
 80032aa:	e01a      	b.n	80032e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032ac:	4b29      	ldr	r3, [pc, #164]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a28      	ldr	r2, [pc, #160]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032b8:	f7fe fdd0 	bl	8001e5c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032c0:	f7fe fdcc 	bl	8001e5c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e31a      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032d2:	4b20      	ldr	r3, [pc, #128]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x1dc>
 80032de:	e000      	b.n	80032e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d073      	beq.n	80033d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_OscConfig+0x21c>
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b0c      	cmp	r3, #12
 80032f8:	d10e      	bne.n	8003318 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d10b      	bne.n	8003318 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	4b14      	ldr	r3, [pc, #80]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d063      	beq.n	80033d4 <HAL_RCC_OscConfig+0x2f0>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d15f      	bne.n	80033d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e2f7      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d106      	bne.n	8003330 <HAL_RCC_OscConfig+0x24c>
 8003322:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e025      	b.n	800337c <HAL_RCC_OscConfig+0x298>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003338:	d114      	bne.n	8003364 <HAL_RCC_OscConfig+0x280>
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a05      	ldr	r2, [pc, #20]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 8003340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a02      	ldr	r2, [pc, #8]	; (8003354 <HAL_RCC_OscConfig+0x270>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e013      	b.n	800337c <HAL_RCC_OscConfig+0x298>
 8003354:	40021000 	.word	0x40021000
 8003358:	08008838 	.word	0x08008838
 800335c:	20000000 	.word	0x20000000
 8003360:	20000004 	.word	0x20000004
 8003364:	4ba0      	ldr	r3, [pc, #640]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a9f      	ldr	r2, [pc, #636]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 800336a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4b9d      	ldr	r3, [pc, #628]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a9c      	ldr	r2, [pc, #624]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 8003376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d013      	beq.n	80033ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fe fd6a 	bl	8001e5c <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800338c:	f7fe fd66 	bl	8001e5c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b64      	cmp	r3, #100	; 0x64
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e2b4      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800339e:	4b92      	ldr	r3, [pc, #584]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x2a8>
 80033aa:	e014      	b.n	80033d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fe fd56 	bl	8001e5c <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fe fd52 	bl	8001e5c <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	; 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e2a0      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033c6:	4b88      	ldr	r3, [pc, #544]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x2d0>
 80033d2:	e000      	b.n	80033d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d060      	beq.n	80034a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_OscConfig+0x310>
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b0c      	cmp	r3, #12
 80033ec:	d119      	bne.n	8003422 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d116      	bne.n	8003422 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f4:	4b7c      	ldr	r3, [pc, #496]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_OscConfig+0x328>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e27d      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340c:	4b76      	ldr	r3, [pc, #472]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	061b      	lsls	r3, r3, #24
 800341a:	4973      	ldr	r1, [pc, #460]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003420:	e040      	b.n	80034a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d023      	beq.n	8003472 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800342a:	4b6f      	ldr	r3, [pc, #444]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a6e      	ldr	r2, [pc, #440]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 8003430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fe fd11 	bl	8001e5c <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800343e:	f7fe fd0d 	bl	8001e5c <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e25b      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003450:	4b65      	ldr	r3, [pc, #404]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345c:	4b62      	ldr	r3, [pc, #392]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	061b      	lsls	r3, r3, #24
 800346a:	495f      	ldr	r1, [pc, #380]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
 8003470:	e018      	b.n	80034a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003472:	4b5d      	ldr	r3, [pc, #372]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a5c      	ldr	r2, [pc, #368]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 8003478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800347c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fe fced 	bl	8001e5c <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003486:	f7fe fce9 	bl	8001e5c <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e237      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003498:	4b53      	ldr	r3, [pc, #332]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f0      	bne.n	8003486 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d03c      	beq.n	800352a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01c      	beq.n	80034f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b8:	4b4b      	ldr	r3, [pc, #300]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 80034ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034be:	4a4a      	ldr	r2, [pc, #296]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fe fcc8 	bl	8001e5c <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d0:	f7fe fcc4 	bl	8001e5c <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e212      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034e2:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 80034e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0ef      	beq.n	80034d0 <HAL_RCC_OscConfig+0x3ec>
 80034f0:	e01b      	b.n	800352a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f2:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 80034f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f8:	4a3b      	ldr	r2, [pc, #236]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003502:	f7fe fcab 	bl	8001e5c <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350a:	f7fe fca7 	bl	8001e5c <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e1f5      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800351c:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 800351e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1ef      	bne.n	800350a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80a6 	beq.w	8003684 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003538:	2300      	movs	r3, #0
 800353a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800353c:	4b2a      	ldr	r3, [pc, #168]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 800353e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10d      	bne.n	8003564 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003548:	4b27      	ldr	r3, [pc, #156]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 800354a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354c:	4a26      	ldr	r2, [pc, #152]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003552:	6593      	str	r3, [r2, #88]	; 0x58
 8003554:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 8003556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003560:	2301      	movs	r3, #1
 8003562:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003564:	4b21      	ldr	r3, [pc, #132]	; (80035ec <HAL_RCC_OscConfig+0x508>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d118      	bne.n	80035a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003570:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <HAL_RCC_OscConfig+0x508>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1d      	ldr	r2, [pc, #116]	; (80035ec <HAL_RCC_OscConfig+0x508>)
 8003576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357c:	f7fe fc6e 	bl	8001e5c <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003584:	f7fe fc6a 	bl	8001e5c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e1b8      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <HAL_RCC_OscConfig+0x508>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d108      	bne.n	80035bc <HAL_RCC_OscConfig+0x4d8>
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b0:	4a0d      	ldr	r2, [pc, #52]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035ba:	e029      	b.n	8003610 <HAL_RCC_OscConfig+0x52c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b05      	cmp	r3, #5
 80035c2:	d115      	bne.n	80035f0 <HAL_RCC_OscConfig+0x50c>
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	4a07      	ldr	r2, [pc, #28]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 80035cc:	f043 0304 	orr.w	r3, r3, #4
 80035d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035d4:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	4a03      	ldr	r2, [pc, #12]	; (80035e8 <HAL_RCC_OscConfig+0x504>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035e4:	e014      	b.n	8003610 <HAL_RCC_OscConfig+0x52c>
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40007000 	.word	0x40007000
 80035f0:	4b9d      	ldr	r3, [pc, #628]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	4a9c      	ldr	r2, [pc, #624]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003600:	4b99      	ldr	r3, [pc, #612]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003606:	4a98      	ldr	r2, [pc, #608]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 8003608:	f023 0304 	bic.w	r3, r3, #4
 800360c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d016      	beq.n	8003646 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fe fc20 	bl	8001e5c <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800361e:	e00a      	b.n	8003636 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003620:	f7fe fc1c 	bl	8001e5c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e168      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003636:	4b8c      	ldr	r3, [pc, #560]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0ed      	beq.n	8003620 <HAL_RCC_OscConfig+0x53c>
 8003644:	e015      	b.n	8003672 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003646:	f7fe fc09 	bl	8001e5c <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800364c:	e00a      	b.n	8003664 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fe fc05 	bl	8001e5c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	; 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e151      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003664:	4b80      	ldr	r3, [pc, #512]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1ed      	bne.n	800364e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003672:	7ffb      	ldrb	r3, [r7, #31]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d105      	bne.n	8003684 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003678:	4b7b      	ldr	r3, [pc, #492]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	4a7a      	ldr	r2, [pc, #488]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 800367e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003682:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b00      	cmp	r3, #0
 800368e:	d03c      	beq.n	800370a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01c      	beq.n	80036d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003698:	4b73      	ldr	r3, [pc, #460]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 800369a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800369e:	4a72      	ldr	r2, [pc, #456]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fe fbd8 	bl	8001e5c <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b0:	f7fe fbd4 	bl	8001e5c <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e122      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036c2:	4b69      	ldr	r3, [pc, #420]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 80036c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0ef      	beq.n	80036b0 <HAL_RCC_OscConfig+0x5cc>
 80036d0:	e01b      	b.n	800370a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036d2:	4b65      	ldr	r3, [pc, #404]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 80036d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036d8:	4a63      	ldr	r2, [pc, #396]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 80036da:	f023 0301 	bic.w	r3, r3, #1
 80036de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fe fbbb 	bl	8001e5c <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ea:	f7fe fbb7 	bl	8001e5c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e105      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036fc:	4b5a      	ldr	r3, [pc, #360]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 80036fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1ef      	bne.n	80036ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 80f9 	beq.w	8003906 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	2b02      	cmp	r3, #2
 800371a:	f040 80cf 	bne.w	80038bc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800371e:	4b52      	ldr	r3, [pc, #328]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f003 0203 	and.w	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	429a      	cmp	r2, r3
 8003730:	d12c      	bne.n	800378c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	3b01      	subs	r3, #1
 800373e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d123      	bne.n	800378c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d11b      	bne.n	800378c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d113      	bne.n	800378c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	3b01      	subs	r3, #1
 8003772:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d109      	bne.n	800378c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	3b01      	subs	r3, #1
 8003786:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d071      	beq.n	8003870 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b0c      	cmp	r3, #12
 8003790:	d068      	beq.n	8003864 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003792:	4b35      	ldr	r3, [pc, #212]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d105      	bne.n	80037aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800379e:	4b32      	ldr	r3, [pc, #200]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e0ac      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037ae:	4b2e      	ldr	r3, [pc, #184]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a2d      	ldr	r2, [pc, #180]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 80037b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037ba:	f7fe fb4f 	bl	8001e5c <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c2:	f7fe fb4b 	bl	8001e5c <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e099      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d4:	4b24      	ldr	r3, [pc, #144]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f0      	bne.n	80037c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e0:	4b21      	ldr	r3, [pc, #132]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	4b21      	ldr	r3, [pc, #132]	; (800386c <HAL_RCC_OscConfig+0x788>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037f0:	3a01      	subs	r2, #1
 80037f2:	0112      	lsls	r2, r2, #4
 80037f4:	4311      	orrs	r1, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037fa:	0212      	lsls	r2, r2, #8
 80037fc:	4311      	orrs	r1, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003802:	0852      	lsrs	r2, r2, #1
 8003804:	3a01      	subs	r2, #1
 8003806:	0552      	lsls	r2, r2, #21
 8003808:	4311      	orrs	r1, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800380e:	0852      	lsrs	r2, r2, #1
 8003810:	3a01      	subs	r2, #1
 8003812:	0652      	lsls	r2, r2, #25
 8003814:	4311      	orrs	r1, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800381a:	06d2      	lsls	r2, r2, #27
 800381c:	430a      	orrs	r2, r1
 800381e:	4912      	ldr	r1, [pc, #72]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 8003820:	4313      	orrs	r3, r2
 8003822:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003824:	4b10      	ldr	r3, [pc, #64]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a0f      	ldr	r2, [pc, #60]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 800382a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800382e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003830:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4a0c      	ldr	r2, [pc, #48]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 8003836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800383c:	f7fe fb0e 	bl	8001e5c <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe fb0a 	bl	8001e5c <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e058      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003856:	4b04      	ldr	r3, [pc, #16]	; (8003868 <HAL_RCC_OscConfig+0x784>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003862:	e050      	b.n	8003906 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e04f      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
 8003868:	40021000 	.word	0x40021000
 800386c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <HAL_RCC_OscConfig+0x82c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d144      	bne.n	8003906 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800387c:	4b24      	ldr	r3, [pc, #144]	; (8003910 <HAL_RCC_OscConfig+0x82c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a23      	ldr	r2, [pc, #140]	; (8003910 <HAL_RCC_OscConfig+0x82c>)
 8003882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003886:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003888:	4b21      	ldr	r3, [pc, #132]	; (8003910 <HAL_RCC_OscConfig+0x82c>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a20      	ldr	r2, [pc, #128]	; (8003910 <HAL_RCC_OscConfig+0x82c>)
 800388e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003892:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003894:	f7fe fae2 	bl	8001e5c <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389c:	f7fe fade 	bl	8001e5c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e02c      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ae:	4b18      	ldr	r3, [pc, #96]	; (8003910 <HAL_RCC_OscConfig+0x82c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x7b8>
 80038ba:	e024      	b.n	8003906 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b0c      	cmp	r3, #12
 80038c0:	d01f      	beq.n	8003902 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <HAL_RCC_OscConfig+0x82c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a12      	ldr	r2, [pc, #72]	; (8003910 <HAL_RCC_OscConfig+0x82c>)
 80038c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7fe fac5 	bl	8001e5c <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fe fac1 	bl	8001e5c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e00f      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <HAL_RCC_OscConfig+0x82c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f0      	bne.n	80038d6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_RCC_OscConfig+0x82c>)
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	4905      	ldr	r1, [pc, #20]	; (8003910 <HAL_RCC_OscConfig+0x82c>)
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_RCC_OscConfig+0x830>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	60cb      	str	r3, [r1, #12]
 8003900:	e001      	b.n	8003906 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3720      	adds	r7, #32
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000
 8003914:	feeefffc 	.word	0xfeeefffc

08003918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e11d      	b.n	8003b6c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003930:	4b90      	ldr	r3, [pc, #576]	; (8003b74 <HAL_RCC_ClockConfig+0x25c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d910      	bls.n	8003960 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393e:	4b8d      	ldr	r3, [pc, #564]	; (8003b74 <HAL_RCC_ClockConfig+0x25c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 020f 	bic.w	r2, r3, #15
 8003946:	498b      	ldr	r1, [pc, #556]	; (8003b74 <HAL_RCC_ClockConfig+0x25c>)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	4313      	orrs	r3, r2
 800394c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800394e:	4b89      	ldr	r3, [pc, #548]	; (8003b74 <HAL_RCC_ClockConfig+0x25c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d001      	beq.n	8003960 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e105      	b.n	8003b6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d010      	beq.n	800398e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	4b81      	ldr	r3, [pc, #516]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003978:	429a      	cmp	r2, r3
 800397a:	d908      	bls.n	800398e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800397c:	4b7e      	ldr	r3, [pc, #504]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	497b      	ldr	r1, [pc, #492]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d079      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d11e      	bne.n	80039e0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a2:	4b75      	ldr	r3, [pc, #468]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e0dc      	b.n	8003b6c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80039b2:	f000 fa09 	bl	8003dc8 <RCC_GetSysClockFreqFromPLLSource>
 80039b6:	4603      	mov	r3, r0
 80039b8:	4a70      	ldr	r2, [pc, #448]	; (8003b7c <HAL_RCC_ClockConfig+0x264>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d946      	bls.n	8003a4c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80039be:	4b6e      	ldr	r3, [pc, #440]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d140      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039ca:	4b6b      	ldr	r3, [pc, #428]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039d2:	4a69      	ldr	r2, [pc, #420]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 80039d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039da:	2380      	movs	r3, #128	; 0x80
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	e035      	b.n	8003a4c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039e8:	4b63      	ldr	r3, [pc, #396]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d115      	bne.n	8003a20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0b9      	b.n	8003b6c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d107      	bne.n	8003a10 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a00:	4b5d      	ldr	r3, [pc, #372]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0ad      	b.n	8003b6c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a10:	4b59      	ldr	r3, [pc, #356]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0a5      	b.n	8003b6c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003a20:	f000 f8b4 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8003a24:	4603      	mov	r3, r0
 8003a26:	4a55      	ldr	r2, [pc, #340]	; (8003b7c <HAL_RCC_ClockConfig+0x264>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d90f      	bls.n	8003a4c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a2c:	4b52      	ldr	r3, [pc, #328]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d109      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a38:	4b4f      	ldr	r3, [pc, #316]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a40:	4a4d      	ldr	r2, [pc, #308]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a46:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a4c:	4b4a      	ldr	r3, [pc, #296]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 0203 	bic.w	r2, r3, #3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4947      	ldr	r1, [pc, #284]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a5e:	f7fe f9fd 	bl	8001e5c <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a64:	e00a      	b.n	8003a7c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a66:	f7fe f9f9 	bl	8001e5c <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e077      	b.n	8003b6c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7c:	4b3e      	ldr	r3, [pc, #248]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 020c 	and.w	r2, r3, #12
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d1eb      	bne.n	8003a66 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b80      	cmp	r3, #128	; 0x80
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a94:	4b38      	ldr	r3, [pc, #224]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4a37      	ldr	r2, [pc, #220]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a9e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d010      	beq.n	8003ace <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d208      	bcs.n	8003ace <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abc:	4b2e      	ldr	r3, [pc, #184]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	492b      	ldr	r1, [pc, #172]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ace:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <HAL_RCC_ClockConfig+0x25c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d210      	bcs.n	8003afe <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003adc:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <HAL_RCC_ClockConfig+0x25c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 020f 	bic.w	r2, r3, #15
 8003ae4:	4923      	ldr	r1, [pc, #140]	; (8003b74 <HAL_RCC_ClockConfig+0x25c>)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aec:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <HAL_RCC_ClockConfig+0x25c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d001      	beq.n	8003afe <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e036      	b.n	8003b6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b0a:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	4918      	ldr	r1, [pc, #96]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4910      	ldr	r1, [pc, #64]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b3c:	f000 f826 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <HAL_RCC_ClockConfig+0x260>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	490c      	ldr	r1, [pc, #48]	; (8003b80 <HAL_RCC_ClockConfig+0x268>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
 8003b58:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <HAL_RCC_ClockConfig+0x26c>)
 8003b5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <HAL_RCC_ClockConfig+0x270>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fe f92b 	bl	8001dbc <HAL_InitTick>
 8003b66:	4603      	mov	r3, r0
 8003b68:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40022000 	.word	0x40022000
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	04c4b400 	.word	0x04c4b400
 8003b80:	08008838 	.word	0x08008838
 8003b84:	20000000 	.word	0x20000000
 8003b88:	20000004 	.word	0x20000004

08003b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b089      	sub	sp, #36	; 0x24
 8003b90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9a:	4b3e      	ldr	r3, [pc, #248]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba4:	4b3b      	ldr	r3, [pc, #236]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b0c      	cmp	r3, #12
 8003bb8:	d121      	bne.n	8003bfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d11e      	bne.n	8003bfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bc0:	4b34      	ldr	r3, [pc, #208]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d107      	bne.n	8003bdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bcc:	4b31      	ldr	r3, [pc, #196]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd2:	0a1b      	lsrs	r3, r3, #8
 8003bd4:	f003 030f 	and.w	r3, r3, #15
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	e005      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bdc:	4b2d      	ldr	r3, [pc, #180]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003be8:	4a2b      	ldr	r2, [pc, #172]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10d      	bne.n	8003c14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d102      	bne.n	8003c0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c04:	4b25      	ldr	r3, [pc, #148]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	e004      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c10:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d134      	bne.n	8003c84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d003      	beq.n	8003c32 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d003      	beq.n	8003c38 <HAL_RCC_GetSysClockFreq+0xac>
 8003c30:	e005      	b.n	8003c3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c32:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003c34:	617b      	str	r3, [r7, #20]
      break;
 8003c36:	e005      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c38:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c3a:	617b      	str	r3, [r7, #20]
      break;
 8003c3c:	e002      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	617b      	str	r3, [r7, #20]
      break;
 8003c42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c44:	4b13      	ldr	r3, [pc, #76]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	091b      	lsrs	r3, r3, #4
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	3301      	adds	r3, #1
 8003c50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c52:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	0a1b      	lsrs	r3, r3, #8
 8003c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	fb03 f202 	mul.w	r2, r3, r2
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	0e5b      	lsrs	r3, r3, #25
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	3301      	adds	r3, #1
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c84:	69bb      	ldr	r3, [r7, #24]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3724      	adds	r7, #36	; 0x24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40021000 	.word	0x40021000
 8003c98:	08008850 	.word	0x08008850
 8003c9c:	00f42400 	.word	0x00f42400
 8003ca0:	007a1200 	.word	0x007a1200

08003ca4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca8:	4b03      	ldr	r3, [pc, #12]	; (8003cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003caa:	681b      	ldr	r3, [r3, #0]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000000 	.word	0x20000000

08003cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cc0:	f7ff fff0 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	4904      	ldr	r1, [pc, #16]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cd2:	5ccb      	ldrb	r3, [r1, r3]
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	08008848 	.word	0x08008848

08003ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cec:	f7ff ffda 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	0adb      	lsrs	r3, r3, #11
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	4904      	ldr	r1, [pc, #16]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cfe:	5ccb      	ldrb	r3, [r1, r3]
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	08008848 	.word	0x08008848

08003d14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d20:	4b27      	ldr	r3, [pc, #156]	; (8003dc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d2c:	f7ff f906 	bl	8002f3c <HAL_PWREx_GetVoltageRange>
 8003d30:	6178      	str	r0, [r7, #20]
 8003d32:	e014      	b.n	8003d5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d34:	4b22      	ldr	r3, [pc, #136]	; (8003dc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d38:	4a21      	ldr	r2, [pc, #132]	; (8003dc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d40:	4b1f      	ldr	r3, [pc, #124]	; (8003dc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d4c:	f7ff f8f6 	bl	8002f3c <HAL_PWREx_GetVoltageRange>
 8003d50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d52:	4b1b      	ldr	r3, [pc, #108]	; (8003dc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	4a1a      	ldr	r2, [pc, #104]	; (8003dc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d64:	d10b      	bne.n	8003d7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b80      	cmp	r3, #128	; 0x80
 8003d6a:	d913      	bls.n	8003d94 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2ba0      	cmp	r3, #160	; 0xa0
 8003d70:	d902      	bls.n	8003d78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d72:	2302      	movs	r3, #2
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	e00d      	b.n	8003d94 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d78:	2301      	movs	r3, #1
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	e00a      	b.n	8003d94 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b7f      	cmp	r3, #127	; 0x7f
 8003d82:	d902      	bls.n	8003d8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003d84:	2302      	movs	r3, #2
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	e004      	b.n	8003d94 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b70      	cmp	r3, #112	; 0x70
 8003d8e:	d101      	bne.n	8003d94 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d90:	2301      	movs	r3, #1
 8003d92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f023 020f 	bic.w	r2, r3, #15
 8003d9c:	4909      	ldr	r1, [pc, #36]	; (8003dc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003da4:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d001      	beq.n	8003db6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40022000 	.word	0x40022000

08003dc8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dce:	4b2d      	ldr	r3, [pc, #180]	; (8003e84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d00b      	beq.n	8003df6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d825      	bhi.n	8003e30 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d008      	beq.n	8003dfc <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d11f      	bne.n	8003e30 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003df0:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003df2:	613b      	str	r3, [r7, #16]
    break;
 8003df4:	e01f      	b.n	8003e36 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003df6:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003df8:	613b      	str	r3, [r7, #16]
    break;
 8003dfa:	e01c      	b.n	8003e36 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dfc:	4b21      	ldr	r3, [pc, #132]	; (8003e84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d107      	bne.n	8003e18 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e08:	4b1e      	ldr	r3, [pc, #120]	; (8003e84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0e:	0a1b      	lsrs	r3, r3, #8
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	e005      	b.n	8003e24 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e18:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003e24:	4a1a      	ldr	r2, [pc, #104]	; (8003e90 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e2c:	613b      	str	r3, [r7, #16]
    break;
 8003e2e:	e002      	b.n	8003e36 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]
    break;
 8003e34:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e36:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	091b      	lsrs	r3, r3, #4
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	3301      	adds	r3, #1
 8003e42:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e44:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	0a1b      	lsrs	r3, r3, #8
 8003e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	fb03 f202 	mul.w	r2, r3, r2
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e5c:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	0e5b      	lsrs	r3, r3, #25
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	3301      	adds	r3, #1
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e74:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003e76:	683b      	ldr	r3, [r7, #0]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	40021000 	.word	0x40021000
 8003e88:	00f42400 	.word	0x00f42400
 8003e8c:	007a1200 	.word	0x007a1200
 8003e90:	08008850 	.word	0x08008850

08003e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d040      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	d02a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003eb8:	2b80      	cmp	r3, #128	; 0x80
 8003eba:	d825      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ebc:	2b60      	cmp	r3, #96	; 0x60
 8003ebe:	d026      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ec0:	2b60      	cmp	r3, #96	; 0x60
 8003ec2:	d821      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d006      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d81d      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d009      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d010      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003ed4:	e018      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ed6:	4b89      	ldr	r3, [pc, #548]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	4a88      	ldr	r2, [pc, #544]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ee2:	e015      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fb02 	bl	80044f4 <RCCEx_PLLSAI1_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ef4:	e00c      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3320      	adds	r3, #32
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fbed 	bl	80046dc <RCCEx_PLLSAI2_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f06:	e003      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	74fb      	strb	r3, [r7, #19]
      break;
 8003f0c:	e000      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f10:	7cfb      	ldrb	r3, [r7, #19]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10b      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f16:	4b79      	ldr	r3, [pc, #484]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f1c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f24:	4975      	ldr	r1, [pc, #468]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f2c:	e001      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2e:	7cfb      	ldrb	r3, [r7, #19]
 8003f30:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d047      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f46:	d030      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4c:	d82a      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f52:	d02a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003f54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f58:	d824      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f64:	d81e      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6e:	d010      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f70:	e018      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f72:	4b62      	ldr	r3, [pc, #392]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	4a61      	ldr	r2, [pc, #388]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f7e:	e015      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3304      	adds	r3, #4
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fab4 	bl	80044f4 <RCCEx_PLLSAI1_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f90:	e00c      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3320      	adds	r3, #32
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fb9f 	bl	80046dc <RCCEx_PLLSAI2_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fa2:	e003      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	74fb      	strb	r3, [r7, #19]
      break;
 8003fa8:	e000      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10b      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fb2:	4b52      	ldr	r3, [pc, #328]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	494e      	ldr	r1, [pc, #312]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003fc8:	e001      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 809f 	beq.w	800411a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fe0:	4b46      	ldr	r3, [pc, #280]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00d      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff6:	4b41      	ldr	r3, [pc, #260]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	4a40      	ldr	r2, [pc, #256]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004000:	6593      	str	r3, [r2, #88]	; 0x58
 8004002:	4b3e      	ldr	r3, [pc, #248]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400e:	2301      	movs	r3, #1
 8004010:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004012:	4b3b      	ldr	r3, [pc, #236]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a3a      	ldr	r2, [pc, #232]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800401e:	f7fd ff1d 	bl	8001e5c <HAL_GetTick>
 8004022:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004024:	e009      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004026:	f7fd ff19 	bl	8001e5c <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d902      	bls.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	74fb      	strb	r3, [r7, #19]
        break;
 8004038:	e005      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800403a:	4b31      	ldr	r3, [pc, #196]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0ef      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d15b      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800404c:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004056:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01f      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	429a      	cmp	r2, r3
 8004068:	d019      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800406a:	4b24      	ldr	r3, [pc, #144]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004074:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004076:	4b21      	ldr	r3, [pc, #132]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407c:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800407e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408c:	4a1b      	ldr	r2, [pc, #108]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800408e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004096:	4a19      	ldr	r2, [pc, #100]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d016      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a8:	f7fd fed8 	bl	8001e5c <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ae:	e00b      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b0:	f7fd fed4 	bl	8001e5c <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d902      	bls.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	74fb      	strb	r3, [r7, #19]
            break;
 80040c6:	e006      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c8:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0ec      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80040d6:	7cfb      	ldrb	r3, [r7, #19]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10c      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040dc:	4b07      	ldr	r3, [pc, #28]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ec:	4903      	ldr	r1, [pc, #12]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040f4:	e008      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	74bb      	strb	r3, [r7, #18]
 80040fa:	e005      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80040fc:	40021000 	.word	0x40021000
 8004100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004104:	7cfb      	ldrb	r3, [r7, #19]
 8004106:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004108:	7c7b      	ldrb	r3, [r7, #17]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d105      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410e:	4ba0      	ldr	r3, [pc, #640]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004112:	4a9f      	ldr	r2, [pc, #636]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004118:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004126:	4b9a      	ldr	r3, [pc, #616]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412c:	f023 0203 	bic.w	r2, r3, #3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004134:	4996      	ldr	r1, [pc, #600]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004148:	4b91      	ldr	r3, [pc, #580]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414e:	f023 020c 	bic.w	r2, r3, #12
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	498e      	ldr	r1, [pc, #568]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800416a:	4b89      	ldr	r3, [pc, #548]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004178:	4985      	ldr	r1, [pc, #532]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800418c:	4b80      	ldr	r3, [pc, #512]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004192:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419a:	497d      	ldr	r1, [pc, #500]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041ae:	4b78      	ldr	r3, [pc, #480]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041bc:	4974      	ldr	r1, [pc, #464]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041d0:	4b6f      	ldr	r3, [pc, #444]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041de:	496c      	ldr	r1, [pc, #432]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041f2:	4b67      	ldr	r3, [pc, #412]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004200:	4963      	ldr	r1, [pc, #396]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004214:	4b5e      	ldr	r3, [pc, #376]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004222:	495b      	ldr	r1, [pc, #364]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004236:	4b56      	ldr	r3, [pc, #344]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	4952      	ldr	r1, [pc, #328]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004258:	4b4d      	ldr	r3, [pc, #308]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	494a      	ldr	r1, [pc, #296]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800427a:	4b45      	ldr	r3, [pc, #276]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004280:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004288:	4941      	ldr	r1, [pc, #260]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800429c:	4b3c      	ldr	r3, [pc, #240]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800429e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042a2:	f023 0203 	bic.w	r2, r3, #3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042aa:	4939      	ldr	r1, [pc, #228]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d028      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042be:	4b34      	ldr	r3, [pc, #208]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042cc:	4930      	ldr	r1, [pc, #192]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042dc:	d106      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042de:	4b2c      	ldr	r3, [pc, #176]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	4a2b      	ldr	r2, [pc, #172]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e8:	60d3      	str	r3, [r2, #12]
 80042ea:	e011      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042f4:	d10c      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3304      	adds	r3, #4
 80042fa:	2101      	movs	r1, #1
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f8f9 	bl	80044f4 <RCCEx_PLLSAI1_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004306:	7cfb      	ldrb	r3, [r7, #19]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d04d      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004324:	d108      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004326:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004328:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800432c:	4a18      	ldr	r2, [pc, #96]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800432e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004332:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004336:	e012      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004338:	4b15      	ldr	r3, [pc, #84]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800433a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800433e:	4a14      	ldr	r2, [pc, #80]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004344:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004348:	4b11      	ldr	r3, [pc, #68]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004356:	490e      	ldr	r1, [pc, #56]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004366:	d106      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004368:	4b09      	ldr	r3, [pc, #36]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4a08      	ldr	r2, [pc, #32]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800436e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004372:	60d3      	str	r3, [r2, #12]
 8004374:	e020      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800437a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800437e:	d109      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004380:	4b03      	ldr	r3, [pc, #12]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a02      	ldr	r2, [pc, #8]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438a:	60d3      	str	r3, [r2, #12]
 800438c:	e014      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800438e:	bf00      	nop
 8004390:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004398:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3304      	adds	r3, #4
 80043a2:	2101      	movs	r1, #1
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 f8a5 	bl	80044f4 <RCCEx_PLLSAI1_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d028      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043c4:	4b4a      	ldr	r3, [pc, #296]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d2:	4947      	ldr	r1, [pc, #284]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043e2:	d106      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043e4:	4b42      	ldr	r3, [pc, #264]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	4a41      	ldr	r2, [pc, #260]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ee:	60d3      	str	r3, [r2, #12]
 80043f0:	e011      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043fa:	d10c      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3304      	adds	r3, #4
 8004400:	2101      	movs	r1, #1
 8004402:	4618      	mov	r0, r3
 8004404:	f000 f876 	bl	80044f4 <RCCEx_PLLSAI1_Config>
 8004408:	4603      	mov	r3, r0
 800440a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800440c:	7cfb      	ldrb	r3, [r7, #19]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004412:	7cfb      	ldrb	r3, [r7, #19]
 8004414:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01e      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004422:	4b33      	ldr	r3, [pc, #204]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004432:	492f      	ldr	r1, [pc, #188]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004444:	d10c      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3304      	adds	r3, #4
 800444a:	2102      	movs	r1, #2
 800444c:	4618      	mov	r0, r3
 800444e:	f000 f851 	bl	80044f4 <RCCEx_PLLSAI1_Config>
 8004452:	4603      	mov	r3, r0
 8004454:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004456:	7cfb      	ldrb	r3, [r7, #19]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00b      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800446c:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004472:	f023 0204 	bic.w	r2, r3, #4
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447c:	491c      	ldr	r1, [pc, #112]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00b      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004490:	4b17      	ldr	r3, [pc, #92]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004496:	f023 0218 	bic.w	r2, r3, #24
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a0:	4913      	ldr	r1, [pc, #76]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d017      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80044b4:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c4:	490a      	ldr	r1, [pc, #40]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044d6:	d105      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000

080044f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004502:	4b72      	ldr	r3, [pc, #456]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00e      	beq.n	800452c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800450e:	4b6f      	ldr	r3, [pc, #444]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0203 	and.w	r2, r3, #3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d103      	bne.n	8004526 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
       ||
 8004522:	2b00      	cmp	r3, #0
 8004524:	d142      	bne.n	80045ac <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	73fb      	strb	r3, [r7, #15]
 800452a:	e03f      	b.n	80045ac <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b03      	cmp	r3, #3
 8004532:	d018      	beq.n	8004566 <RCCEx_PLLSAI1_Config+0x72>
 8004534:	2b03      	cmp	r3, #3
 8004536:	d825      	bhi.n	8004584 <RCCEx_PLLSAI1_Config+0x90>
 8004538:	2b01      	cmp	r3, #1
 800453a:	d002      	beq.n	8004542 <RCCEx_PLLSAI1_Config+0x4e>
 800453c:	2b02      	cmp	r3, #2
 800453e:	d009      	beq.n	8004554 <RCCEx_PLLSAI1_Config+0x60>
 8004540:	e020      	b.n	8004584 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004542:	4b62      	ldr	r3, [pc, #392]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d11d      	bne.n	800458a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004552:	e01a      	b.n	800458a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004554:	4b5d      	ldr	r3, [pc, #372]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455c:	2b00      	cmp	r3, #0
 800455e:	d116      	bne.n	800458e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004564:	e013      	b.n	800458e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004566:	4b59      	ldr	r3, [pc, #356]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10f      	bne.n	8004592 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004572:	4b56      	ldr	r3, [pc, #344]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004582:	e006      	b.n	8004592 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
      break;
 8004588:	e004      	b.n	8004594 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800458a:	bf00      	nop
 800458c:	e002      	b.n	8004594 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800458e:	bf00      	nop
 8004590:	e000      	b.n	8004594 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004592:	bf00      	nop
    }

    if(status == HAL_OK)
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d108      	bne.n	80045ac <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800459a:	4b4c      	ldr	r3, [pc, #304]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f023 0203 	bic.w	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4949      	ldr	r1, [pc, #292]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f040 8086 	bne.w	80046c0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045b4:	4b45      	ldr	r3, [pc, #276]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a44      	ldr	r2, [pc, #272]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c0:	f7fd fc4c 	bl	8001e5c <HAL_GetTick>
 80045c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045c6:	e009      	b.n	80045dc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c8:	f7fd fc48 	bl	8001e5c <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d902      	bls.n	80045dc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	73fb      	strb	r3, [r7, #15]
        break;
 80045da:	e005      	b.n	80045e8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045dc:	4b3b      	ldr	r3, [pc, #236]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ef      	bne.n	80045c8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d168      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d113      	bne.n	800461c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045f4:	4b35      	ldr	r3, [pc, #212]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	4b35      	ldr	r3, [pc, #212]	; (80046d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6892      	ldr	r2, [r2, #8]
 8004600:	0211      	lsls	r1, r2, #8
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68d2      	ldr	r2, [r2, #12]
 8004606:	06d2      	lsls	r2, r2, #27
 8004608:	4311      	orrs	r1, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6852      	ldr	r2, [r2, #4]
 800460e:	3a01      	subs	r2, #1
 8004610:	0112      	lsls	r2, r2, #4
 8004612:	430a      	orrs	r2, r1
 8004614:	492d      	ldr	r1, [pc, #180]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004616:	4313      	orrs	r3, r2
 8004618:	610b      	str	r3, [r1, #16]
 800461a:	e02d      	b.n	8004678 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d115      	bne.n	800464e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004622:	4b2a      	ldr	r3, [pc, #168]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	4b2b      	ldr	r3, [pc, #172]	; (80046d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004628:	4013      	ands	r3, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6892      	ldr	r2, [r2, #8]
 800462e:	0211      	lsls	r1, r2, #8
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6912      	ldr	r2, [r2, #16]
 8004634:	0852      	lsrs	r2, r2, #1
 8004636:	3a01      	subs	r2, #1
 8004638:	0552      	lsls	r2, r2, #21
 800463a:	4311      	orrs	r1, r2
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6852      	ldr	r2, [r2, #4]
 8004640:	3a01      	subs	r2, #1
 8004642:	0112      	lsls	r2, r2, #4
 8004644:	430a      	orrs	r2, r1
 8004646:	4921      	ldr	r1, [pc, #132]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004648:	4313      	orrs	r3, r2
 800464a:	610b      	str	r3, [r1, #16]
 800464c:	e014      	b.n	8004678 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800464e:	4b1f      	ldr	r3, [pc, #124]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6892      	ldr	r2, [r2, #8]
 800465a:	0211      	lsls	r1, r2, #8
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6952      	ldr	r2, [r2, #20]
 8004660:	0852      	lsrs	r2, r2, #1
 8004662:	3a01      	subs	r2, #1
 8004664:	0652      	lsls	r2, r2, #25
 8004666:	4311      	orrs	r1, r2
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6852      	ldr	r2, [r2, #4]
 800466c:	3a01      	subs	r2, #1
 800466e:	0112      	lsls	r2, r2, #4
 8004670:	430a      	orrs	r2, r1
 8004672:	4916      	ldr	r1, [pc, #88]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004674:	4313      	orrs	r3, r2
 8004676:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004678:	4b14      	ldr	r3, [pc, #80]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a13      	ldr	r2, [pc, #76]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800467e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004682:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fd fbea 	bl	8001e5c <HAL_GetTick>
 8004688:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800468a:	e009      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800468c:	f7fd fbe6 	bl	8001e5c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d902      	bls.n	80046a0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	73fb      	strb	r3, [r7, #15]
          break;
 800469e:	e005      	b.n	80046ac <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046a0:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0ef      	beq.n	800468c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	4904      	ldr	r1, [pc, #16]	; (80046cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40021000 	.word	0x40021000
 80046d0:	07ff800f 	.word	0x07ff800f
 80046d4:	ff9f800f 	.word	0xff9f800f
 80046d8:	f9ff800f 	.word	0xf9ff800f

080046dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046ea:	4b72      	ldr	r3, [pc, #456]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00e      	beq.n	8004714 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046f6:	4b6f      	ldr	r3, [pc, #444]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0203 	and.w	r2, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d103      	bne.n	800470e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
       ||
 800470a:	2b00      	cmp	r3, #0
 800470c:	d142      	bne.n	8004794 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	73fb      	strb	r3, [r7, #15]
 8004712:	e03f      	b.n	8004794 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d018      	beq.n	800474e <RCCEx_PLLSAI2_Config+0x72>
 800471c:	2b03      	cmp	r3, #3
 800471e:	d825      	bhi.n	800476c <RCCEx_PLLSAI2_Config+0x90>
 8004720:	2b01      	cmp	r3, #1
 8004722:	d002      	beq.n	800472a <RCCEx_PLLSAI2_Config+0x4e>
 8004724:	2b02      	cmp	r3, #2
 8004726:	d009      	beq.n	800473c <RCCEx_PLLSAI2_Config+0x60>
 8004728:	e020      	b.n	800476c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800472a:	4b62      	ldr	r3, [pc, #392]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d11d      	bne.n	8004772 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800473a:	e01a      	b.n	8004772 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800473c:	4b5d      	ldr	r3, [pc, #372]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004744:	2b00      	cmp	r3, #0
 8004746:	d116      	bne.n	8004776 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474c:	e013      	b.n	8004776 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800474e:	4b59      	ldr	r3, [pc, #356]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10f      	bne.n	800477a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800475a:	4b56      	ldr	r3, [pc, #344]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800476a:	e006      	b.n	800477a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      break;
 8004770:	e004      	b.n	800477c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004772:	bf00      	nop
 8004774:	e002      	b.n	800477c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004776:	bf00      	nop
 8004778:	e000      	b.n	800477c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800477a:	bf00      	nop
    }

    if(status == HAL_OK)
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d108      	bne.n	8004794 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004782:	4b4c      	ldr	r3, [pc, #304]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f023 0203 	bic.w	r2, r3, #3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4949      	ldr	r1, [pc, #292]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004790:	4313      	orrs	r3, r2
 8004792:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	2b00      	cmp	r3, #0
 8004798:	f040 8086 	bne.w	80048a8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800479c:	4b45      	ldr	r3, [pc, #276]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a44      	ldr	r2, [pc, #272]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a8:	f7fd fb58 	bl	8001e5c <HAL_GetTick>
 80047ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047ae:	e009      	b.n	80047c4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047b0:	f7fd fb54 	bl	8001e5c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d902      	bls.n	80047c4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	73fb      	strb	r3, [r7, #15]
        break;
 80047c2:	e005      	b.n	80047d0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047c4:	4b3b      	ldr	r3, [pc, #236]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1ef      	bne.n	80047b0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d168      	bne.n	80048a8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d113      	bne.n	8004804 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047dc:	4b35      	ldr	r3, [pc, #212]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	4b35      	ldr	r3, [pc, #212]	; (80048b8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6892      	ldr	r2, [r2, #8]
 80047e8:	0211      	lsls	r1, r2, #8
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68d2      	ldr	r2, [r2, #12]
 80047ee:	06d2      	lsls	r2, r2, #27
 80047f0:	4311      	orrs	r1, r2
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6852      	ldr	r2, [r2, #4]
 80047f6:	3a01      	subs	r2, #1
 80047f8:	0112      	lsls	r2, r2, #4
 80047fa:	430a      	orrs	r2, r1
 80047fc:	492d      	ldr	r1, [pc, #180]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	614b      	str	r3, [r1, #20]
 8004802:	e02d      	b.n	8004860 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d115      	bne.n	8004836 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800480a:	4b2a      	ldr	r3, [pc, #168]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	4b2b      	ldr	r3, [pc, #172]	; (80048bc <RCCEx_PLLSAI2_Config+0x1e0>)
 8004810:	4013      	ands	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6892      	ldr	r2, [r2, #8]
 8004816:	0211      	lsls	r1, r2, #8
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6912      	ldr	r2, [r2, #16]
 800481c:	0852      	lsrs	r2, r2, #1
 800481e:	3a01      	subs	r2, #1
 8004820:	0552      	lsls	r2, r2, #21
 8004822:	4311      	orrs	r1, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6852      	ldr	r2, [r2, #4]
 8004828:	3a01      	subs	r2, #1
 800482a:	0112      	lsls	r2, r2, #4
 800482c:	430a      	orrs	r2, r1
 800482e:	4921      	ldr	r1, [pc, #132]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004830:	4313      	orrs	r3, r2
 8004832:	614b      	str	r3, [r1, #20]
 8004834:	e014      	b.n	8004860 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004836:	4b1f      	ldr	r3, [pc, #124]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	4b21      	ldr	r3, [pc, #132]	; (80048c0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800483c:	4013      	ands	r3, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6892      	ldr	r2, [r2, #8]
 8004842:	0211      	lsls	r1, r2, #8
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6952      	ldr	r2, [r2, #20]
 8004848:	0852      	lsrs	r2, r2, #1
 800484a:	3a01      	subs	r2, #1
 800484c:	0652      	lsls	r2, r2, #25
 800484e:	4311      	orrs	r1, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6852      	ldr	r2, [r2, #4]
 8004854:	3a01      	subs	r2, #1
 8004856:	0112      	lsls	r2, r2, #4
 8004858:	430a      	orrs	r2, r1
 800485a:	4916      	ldr	r1, [pc, #88]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800485c:	4313      	orrs	r3, r2
 800485e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004860:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a13      	ldr	r2, [pc, #76]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486c:	f7fd faf6 	bl	8001e5c <HAL_GetTick>
 8004870:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004872:	e009      	b.n	8004888 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004874:	f7fd faf2 	bl	8001e5c <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d902      	bls.n	8004888 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	73fb      	strb	r3, [r7, #15]
          break;
 8004886:	e005      	b.n	8004894 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ef      	beq.n	8004874 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004894:	7bfb      	ldrb	r3, [r7, #15]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	4904      	ldr	r1, [pc, #16]	; (80048b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40021000 	.word	0x40021000
 80048b8:	07ff800f 	.word	0x07ff800f
 80048bc:	ff9f800f 	.word	0xff9f800f
 80048c0:	f9ff800f 	.word	0xf9ff800f

080048c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e095      	b.n	8004a02 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d108      	bne.n	80048f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e6:	d009      	beq.n	80048fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	61da      	str	r2, [r3, #28]
 80048ee:	e005      	b.n	80048fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fd f8ca 	bl	8001ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004932:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800493c:	d902      	bls.n	8004944 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e002      	b.n	800494a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004948:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004952:	d007      	beq.n	8004964 <HAL_SPI_Init+0xa0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800495c:	d002      	beq.n	8004964 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a6:	ea42 0103 	orr.w	r1, r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	0c1b      	lsrs	r3, r3, #16
 80049c0:	f003 0204 	and.w	r2, r3, #4
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049e0:	ea42 0103 	orr.w	r1, r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b088      	sub	sp, #32
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	4613      	mov	r3, r2
 8004a18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_SPI_Transmit+0x22>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e15f      	b.n	8004cec <HAL_SPI_Transmit+0x2e2>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a34:	f7fd fa12 	bl	8001e5c <HAL_GetTick>
 8004a38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d002      	beq.n	8004a50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a4e:	e148      	b.n	8004ce2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_SPI_Transmit+0x52>
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d102      	bne.n	8004a62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a60:	e13f      	b.n	8004ce2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2203      	movs	r2, #3
 8004a66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	88fa      	ldrh	r2, [r7, #6]
 8004a7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	88fa      	ldrh	r2, [r7, #6]
 8004a80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aac:	d10f      	bne.n	8004ace <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004abc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004acc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d007      	beq.n	8004aec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004af4:	d94f      	bls.n	8004b96 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_SPI_Transmit+0xfa>
 8004afe:	8afb      	ldrh	r3, [r7, #22]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d142      	bne.n	8004b8a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	881a      	ldrh	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	1c9a      	adds	r2, r3, #2
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b28:	e02f      	b.n	8004b8a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d112      	bne.n	8004b5e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	881a      	ldrh	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	1c9a      	adds	r2, r3, #2
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b5c:	e015      	b.n	8004b8a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b5e:	f7fd f97d 	bl	8001e5c <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d803      	bhi.n	8004b76 <HAL_SPI_Transmit+0x16c>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b74:	d102      	bne.n	8004b7c <HAL_SPI_Transmit+0x172>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004b88:	e0ab      	b.n	8004ce2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1ca      	bne.n	8004b2a <HAL_SPI_Transmit+0x120>
 8004b94:	e080      	b.n	8004c98 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_SPI_Transmit+0x19a>
 8004b9e:	8afb      	ldrh	r3, [r7, #22]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d174      	bne.n	8004c8e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d912      	bls.n	8004bd4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	881a      	ldrh	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	1c9a      	adds	r2, r3, #2
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b02      	subs	r3, #2
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bd2:	e05c      	b.n	8004c8e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	330c      	adds	r3, #12
 8004bde:	7812      	ldrb	r2, [r2, #0]
 8004be0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004bfa:	e048      	b.n	8004c8e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d12b      	bne.n	8004c62 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d912      	bls.n	8004c3a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	881a      	ldrh	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	1c9a      	adds	r2, r3, #2
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b02      	subs	r3, #2
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c38:	e029      	b.n	8004c8e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	7812      	ldrb	r2, [r2, #0]
 8004c46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c60:	e015      	b.n	8004c8e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c62:	f7fd f8fb 	bl	8001e5c <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d803      	bhi.n	8004c7a <HAL_SPI_Transmit+0x270>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c78:	d102      	bne.n	8004c80 <HAL_SPI_Transmit+0x276>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004c8c:	e029      	b.n	8004ce2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1b1      	bne.n	8004bfc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	6839      	ldr	r1, [r7, #0]
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f947 	bl	8004f30 <SPI_EndRxTxTransaction>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e003      	b.n	8004ce2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004cea:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	4613      	mov	r3, r2
 8004d02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d04:	f7fd f8aa 	bl	8001e5c <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	1a9b      	subs	r3, r3, r2
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	4413      	add	r3, r2
 8004d12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d14:	f7fd f8a2 	bl	8001e5c <HAL_GetTick>
 8004d18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d1a:	4b39      	ldr	r3, [pc, #228]	; (8004e00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	015b      	lsls	r3, r3, #5
 8004d20:	0d1b      	lsrs	r3, r3, #20
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	fb02 f303 	mul.w	r3, r2, r3
 8004d28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d2a:	e054      	b.n	8004dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d32:	d050      	beq.n	8004dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d34:	f7fd f892 	bl	8001e5c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d902      	bls.n	8004d4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d13d      	bne.n	8004dc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d62:	d111      	bne.n	8004d88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d6c:	d004      	beq.n	8004d78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d76:	d107      	bne.n	8004d88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d90:	d10f      	bne.n	8004db2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004db0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e017      	b.n	8004df6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4013      	ands	r3, r2
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	bf0c      	ite	eq
 8004de6:	2301      	moveq	r3, #1
 8004de8:	2300      	movne	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d19b      	bne.n	8004d2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000000 	.word	0x20000000

08004e04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	; 0x28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e16:	f7fd f821 	bl	8001e5c <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	4413      	add	r3, r2
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004e26:	f7fd f819 	bl	8001e5c <HAL_GetTick>
 8004e2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e34:	4b3d      	ldr	r3, [pc, #244]	; (8004f2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	00da      	lsls	r2, r3, #3
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	0d1b      	lsrs	r3, r3, #20
 8004e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e46:	fb02 f303 	mul.w	r3, r2, r3
 8004e4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e4c:	e060      	b.n	8004f10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e54:	d107      	bne.n	8004e66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d104      	bne.n	8004e66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e6c:	d050      	beq.n	8004f10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e6e:	f7fc fff5 	bl	8001e5c <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d902      	bls.n	8004e84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d13d      	bne.n	8004f00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e9c:	d111      	bne.n	8004ec2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea6:	d004      	beq.n	8004eb2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb0:	d107      	bne.n	8004ec2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eca:	d10f      	bne.n	8004eec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e010      	b.n	8004f22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d196      	bne.n	8004e4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3728      	adds	r7, #40	; 0x28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000000 	.word	0x20000000

08004f30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f7ff ff5b 	bl	8004e04 <SPI_WaitFifoStateUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f58:	f043 0220 	orr.w	r2, r3, #32
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e027      	b.n	8004fb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2180      	movs	r1, #128	; 0x80
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7ff fec0 	bl	8004cf4 <SPI_WaitFlagStateUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d007      	beq.n	8004f8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7e:	f043 0220 	orr.w	r2, r3, #32
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e014      	b.n	8004fb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f7ff ff34 	bl	8004e04 <SPI_WaitFifoStateUntilTimeout>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d007      	beq.n	8004fb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa6:	f043 0220 	orr.w	r2, r3, #32
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e000      	b.n	8004fb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e042      	b.n	8005054 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d106      	bne.n	8004fe6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7fc fd05 	bl	80019f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2224      	movs	r2, #36	; 0x24
 8004fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0201 	bic.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fbb4 	bl	8005774 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f8b5 	bl	800517c <UART_SetConfig>
 8005012:	4603      	mov	r3, r0
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e01b      	b.n	8005054 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800502a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800503a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fc33 	bl	80058b8 <UART_CheckIdleState>
 8005052:	4603      	mov	r3, r0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	; 0x28
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005072:	2b20      	cmp	r3, #32
 8005074:	d17c      	bne.n	8005170 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <HAL_UART_Transmit+0x26>
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e075      	b.n	8005172 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2221      	movs	r2, #33	; 0x21
 8005092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005096:	f7fc fee1 	bl	8001e5c <HAL_GetTick>
 800509a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	88fa      	ldrh	r2, [r7, #6]
 80050a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	88fa      	ldrh	r2, [r7, #6]
 80050a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b4:	d108      	bne.n	80050c8 <HAL_UART_Transmit+0x6c>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d104      	bne.n	80050c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	e003      	b.n	80050d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050d0:	e031      	b.n	8005136 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	2180      	movs	r1, #128	; 0x80
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 fc95 	bl	8005a0c <UART_WaitOnFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e03e      	b.n	8005172 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	881a      	ldrh	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005106:	b292      	uxth	r2, r2
 8005108:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	3302      	adds	r3, #2
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	e008      	b.n	8005124 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	781a      	ldrb	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	b292      	uxth	r2, r2
 800511c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	3301      	adds	r3, #1
 8005122:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1c7      	bne.n	80050d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2200      	movs	r2, #0
 800514a:	2140      	movs	r1, #64	; 0x40
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 fc5d 	bl	8005a0c <UART_WaitOnFlagUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d005      	beq.n	8005164 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e006      	b.n	8005172 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	e000      	b.n	8005172 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8005170:	2302      	movs	r3, #2
  }
}
 8005172:	4618      	mov	r0, r3
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800517c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005180:	b08c      	sub	sp, #48	; 0x30
 8005182:	af00      	add	r7, sp, #0
 8005184:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	431a      	orrs	r2, r3
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	431a      	orrs	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4baa      	ldr	r3, [pc, #680]	; (8005454 <UART_SetConfig+0x2d8>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a9f      	ldr	r2, [pc, #636]	; (8005458 <UART_SetConfig+0x2dc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051e4:	4313      	orrs	r3, r2
 80051e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80051f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	f023 010f 	bic.w	r1, r3, #15
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a90      	ldr	r2, [pc, #576]	; (800545c <UART_SetConfig+0x2e0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d125      	bne.n	800526c <UART_SetConfig+0xf0>
 8005220:	4b8f      	ldr	r3, [pc, #572]	; (8005460 <UART_SetConfig+0x2e4>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	2b03      	cmp	r3, #3
 800522c:	d81a      	bhi.n	8005264 <UART_SetConfig+0xe8>
 800522e:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <UART_SetConfig+0xb8>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	08005245 	.word	0x08005245
 8005238:	08005255 	.word	0x08005255
 800523c:	0800524d 	.word	0x0800524d
 8005240:	0800525d 	.word	0x0800525d
 8005244:	2301      	movs	r3, #1
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800524a:	e116      	b.n	800547a <UART_SetConfig+0x2fe>
 800524c:	2302      	movs	r3, #2
 800524e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005252:	e112      	b.n	800547a <UART_SetConfig+0x2fe>
 8005254:	2304      	movs	r3, #4
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525a:	e10e      	b.n	800547a <UART_SetConfig+0x2fe>
 800525c:	2308      	movs	r3, #8
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005262:	e10a      	b.n	800547a <UART_SetConfig+0x2fe>
 8005264:	2310      	movs	r3, #16
 8005266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800526a:	e106      	b.n	800547a <UART_SetConfig+0x2fe>
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a7c      	ldr	r2, [pc, #496]	; (8005464 <UART_SetConfig+0x2e8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d138      	bne.n	80052e8 <UART_SetConfig+0x16c>
 8005276:	4b7a      	ldr	r3, [pc, #488]	; (8005460 <UART_SetConfig+0x2e4>)
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527c:	f003 030c 	and.w	r3, r3, #12
 8005280:	2b0c      	cmp	r3, #12
 8005282:	d82d      	bhi.n	80052e0 <UART_SetConfig+0x164>
 8005284:	a201      	add	r2, pc, #4	; (adr r2, 800528c <UART_SetConfig+0x110>)
 8005286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528a:	bf00      	nop
 800528c:	080052c1 	.word	0x080052c1
 8005290:	080052e1 	.word	0x080052e1
 8005294:	080052e1 	.word	0x080052e1
 8005298:	080052e1 	.word	0x080052e1
 800529c:	080052d1 	.word	0x080052d1
 80052a0:	080052e1 	.word	0x080052e1
 80052a4:	080052e1 	.word	0x080052e1
 80052a8:	080052e1 	.word	0x080052e1
 80052ac:	080052c9 	.word	0x080052c9
 80052b0:	080052e1 	.word	0x080052e1
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	080052e1 	.word	0x080052e1
 80052bc:	080052d9 	.word	0x080052d9
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052c6:	e0d8      	b.n	800547a <UART_SetConfig+0x2fe>
 80052c8:	2302      	movs	r3, #2
 80052ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ce:	e0d4      	b.n	800547a <UART_SetConfig+0x2fe>
 80052d0:	2304      	movs	r3, #4
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052d6:	e0d0      	b.n	800547a <UART_SetConfig+0x2fe>
 80052d8:	2308      	movs	r3, #8
 80052da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052de:	e0cc      	b.n	800547a <UART_SetConfig+0x2fe>
 80052e0:	2310      	movs	r3, #16
 80052e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052e6:	e0c8      	b.n	800547a <UART_SetConfig+0x2fe>
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a5e      	ldr	r2, [pc, #376]	; (8005468 <UART_SetConfig+0x2ec>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d125      	bne.n	800533e <UART_SetConfig+0x1c2>
 80052f2:	4b5b      	ldr	r3, [pc, #364]	; (8005460 <UART_SetConfig+0x2e4>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052fc:	2b30      	cmp	r3, #48	; 0x30
 80052fe:	d016      	beq.n	800532e <UART_SetConfig+0x1b2>
 8005300:	2b30      	cmp	r3, #48	; 0x30
 8005302:	d818      	bhi.n	8005336 <UART_SetConfig+0x1ba>
 8005304:	2b20      	cmp	r3, #32
 8005306:	d00a      	beq.n	800531e <UART_SetConfig+0x1a2>
 8005308:	2b20      	cmp	r3, #32
 800530a:	d814      	bhi.n	8005336 <UART_SetConfig+0x1ba>
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <UART_SetConfig+0x19a>
 8005310:	2b10      	cmp	r3, #16
 8005312:	d008      	beq.n	8005326 <UART_SetConfig+0x1aa>
 8005314:	e00f      	b.n	8005336 <UART_SetConfig+0x1ba>
 8005316:	2300      	movs	r3, #0
 8005318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800531c:	e0ad      	b.n	800547a <UART_SetConfig+0x2fe>
 800531e:	2302      	movs	r3, #2
 8005320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005324:	e0a9      	b.n	800547a <UART_SetConfig+0x2fe>
 8005326:	2304      	movs	r3, #4
 8005328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800532c:	e0a5      	b.n	800547a <UART_SetConfig+0x2fe>
 800532e:	2308      	movs	r3, #8
 8005330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005334:	e0a1      	b.n	800547a <UART_SetConfig+0x2fe>
 8005336:	2310      	movs	r3, #16
 8005338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800533c:	e09d      	b.n	800547a <UART_SetConfig+0x2fe>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a4a      	ldr	r2, [pc, #296]	; (800546c <UART_SetConfig+0x2f0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d125      	bne.n	8005394 <UART_SetConfig+0x218>
 8005348:	4b45      	ldr	r3, [pc, #276]	; (8005460 <UART_SetConfig+0x2e4>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005352:	2bc0      	cmp	r3, #192	; 0xc0
 8005354:	d016      	beq.n	8005384 <UART_SetConfig+0x208>
 8005356:	2bc0      	cmp	r3, #192	; 0xc0
 8005358:	d818      	bhi.n	800538c <UART_SetConfig+0x210>
 800535a:	2b80      	cmp	r3, #128	; 0x80
 800535c:	d00a      	beq.n	8005374 <UART_SetConfig+0x1f8>
 800535e:	2b80      	cmp	r3, #128	; 0x80
 8005360:	d814      	bhi.n	800538c <UART_SetConfig+0x210>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <UART_SetConfig+0x1f0>
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d008      	beq.n	800537c <UART_SetConfig+0x200>
 800536a:	e00f      	b.n	800538c <UART_SetConfig+0x210>
 800536c:	2300      	movs	r3, #0
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005372:	e082      	b.n	800547a <UART_SetConfig+0x2fe>
 8005374:	2302      	movs	r3, #2
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800537a:	e07e      	b.n	800547a <UART_SetConfig+0x2fe>
 800537c:	2304      	movs	r3, #4
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005382:	e07a      	b.n	800547a <UART_SetConfig+0x2fe>
 8005384:	2308      	movs	r3, #8
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800538a:	e076      	b.n	800547a <UART_SetConfig+0x2fe>
 800538c:	2310      	movs	r3, #16
 800538e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005392:	e072      	b.n	800547a <UART_SetConfig+0x2fe>
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a35      	ldr	r2, [pc, #212]	; (8005470 <UART_SetConfig+0x2f4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d12a      	bne.n	80053f4 <UART_SetConfig+0x278>
 800539e:	4b30      	ldr	r3, [pc, #192]	; (8005460 <UART_SetConfig+0x2e4>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ac:	d01a      	beq.n	80053e4 <UART_SetConfig+0x268>
 80053ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053b2:	d81b      	bhi.n	80053ec <UART_SetConfig+0x270>
 80053b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053b8:	d00c      	beq.n	80053d4 <UART_SetConfig+0x258>
 80053ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053be:	d815      	bhi.n	80053ec <UART_SetConfig+0x270>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <UART_SetConfig+0x250>
 80053c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c8:	d008      	beq.n	80053dc <UART_SetConfig+0x260>
 80053ca:	e00f      	b.n	80053ec <UART_SetConfig+0x270>
 80053cc:	2300      	movs	r3, #0
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053d2:	e052      	b.n	800547a <UART_SetConfig+0x2fe>
 80053d4:	2302      	movs	r3, #2
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053da:	e04e      	b.n	800547a <UART_SetConfig+0x2fe>
 80053dc:	2304      	movs	r3, #4
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053e2:	e04a      	b.n	800547a <UART_SetConfig+0x2fe>
 80053e4:	2308      	movs	r3, #8
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ea:	e046      	b.n	800547a <UART_SetConfig+0x2fe>
 80053ec:	2310      	movs	r3, #16
 80053ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053f2:	e042      	b.n	800547a <UART_SetConfig+0x2fe>
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a17      	ldr	r2, [pc, #92]	; (8005458 <UART_SetConfig+0x2dc>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d13a      	bne.n	8005474 <UART_SetConfig+0x2f8>
 80053fe:	4b18      	ldr	r3, [pc, #96]	; (8005460 <UART_SetConfig+0x2e4>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005404:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800540c:	d01a      	beq.n	8005444 <UART_SetConfig+0x2c8>
 800540e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005412:	d81b      	bhi.n	800544c <UART_SetConfig+0x2d0>
 8005414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005418:	d00c      	beq.n	8005434 <UART_SetConfig+0x2b8>
 800541a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800541e:	d815      	bhi.n	800544c <UART_SetConfig+0x2d0>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <UART_SetConfig+0x2b0>
 8005424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005428:	d008      	beq.n	800543c <UART_SetConfig+0x2c0>
 800542a:	e00f      	b.n	800544c <UART_SetConfig+0x2d0>
 800542c:	2300      	movs	r3, #0
 800542e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005432:	e022      	b.n	800547a <UART_SetConfig+0x2fe>
 8005434:	2302      	movs	r3, #2
 8005436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800543a:	e01e      	b.n	800547a <UART_SetConfig+0x2fe>
 800543c:	2304      	movs	r3, #4
 800543e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005442:	e01a      	b.n	800547a <UART_SetConfig+0x2fe>
 8005444:	2308      	movs	r3, #8
 8005446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800544a:	e016      	b.n	800547a <UART_SetConfig+0x2fe>
 800544c:	2310      	movs	r3, #16
 800544e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005452:	e012      	b.n	800547a <UART_SetConfig+0x2fe>
 8005454:	cfff69f3 	.word	0xcfff69f3
 8005458:	40008000 	.word	0x40008000
 800545c:	40013800 	.word	0x40013800
 8005460:	40021000 	.word	0x40021000
 8005464:	40004400 	.word	0x40004400
 8005468:	40004800 	.word	0x40004800
 800546c:	40004c00 	.word	0x40004c00
 8005470:	40005000 	.word	0x40005000
 8005474:	2310      	movs	r3, #16
 8005476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4aae      	ldr	r2, [pc, #696]	; (8005738 <UART_SetConfig+0x5bc>)
 8005480:	4293      	cmp	r3, r2
 8005482:	f040 8097 	bne.w	80055b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005486:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800548a:	2b08      	cmp	r3, #8
 800548c:	d823      	bhi.n	80054d6 <UART_SetConfig+0x35a>
 800548e:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <UART_SetConfig+0x318>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054b9 	.word	0x080054b9
 8005498:	080054d7 	.word	0x080054d7
 800549c:	080054c1 	.word	0x080054c1
 80054a0:	080054d7 	.word	0x080054d7
 80054a4:	080054c7 	.word	0x080054c7
 80054a8:	080054d7 	.word	0x080054d7
 80054ac:	080054d7 	.word	0x080054d7
 80054b0:	080054d7 	.word	0x080054d7
 80054b4:	080054cf 	.word	0x080054cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b8:	f7fe fc00 	bl	8003cbc <HAL_RCC_GetPCLK1Freq>
 80054bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054be:	e010      	b.n	80054e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054c0:	4b9e      	ldr	r3, [pc, #632]	; (800573c <UART_SetConfig+0x5c0>)
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054c4:	e00d      	b.n	80054e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054c6:	f7fe fb61 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 80054ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054cc:	e009      	b.n	80054e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054d4:	e005      	b.n	80054e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80054e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 8130 	beq.w	800574a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	4a94      	ldr	r2, [pc, #592]	; (8005740 <UART_SetConfig+0x5c4>)
 80054f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	4413      	add	r3, r2
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	429a      	cmp	r2, r3
 800550c:	d305      	bcc.n	800551a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	429a      	cmp	r2, r3
 8005518:	d903      	bls.n	8005522 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005520:	e113      	b.n	800574a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	2200      	movs	r2, #0
 8005526:	60bb      	str	r3, [r7, #8]
 8005528:	60fa      	str	r2, [r7, #12]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	4a84      	ldr	r2, [pc, #528]	; (8005740 <UART_SetConfig+0x5c4>)
 8005530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005534:	b29b      	uxth	r3, r3
 8005536:	2200      	movs	r2, #0
 8005538:	603b      	str	r3, [r7, #0]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005540:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005544:	f7fb fb48 	bl	8000bd8 <__aeabi_uldivmod>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4610      	mov	r0, r2
 800554e:	4619      	mov	r1, r3
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	020b      	lsls	r3, r1, #8
 800555a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800555e:	0202      	lsls	r2, r0, #8
 8005560:	6979      	ldr	r1, [r7, #20]
 8005562:	6849      	ldr	r1, [r1, #4]
 8005564:	0849      	lsrs	r1, r1, #1
 8005566:	2000      	movs	r0, #0
 8005568:	460c      	mov	r4, r1
 800556a:	4605      	mov	r5, r0
 800556c:	eb12 0804 	adds.w	r8, r2, r4
 8005570:	eb43 0905 	adc.w	r9, r3, r5
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	469a      	mov	sl, r3
 800557c:	4693      	mov	fp, r2
 800557e:	4652      	mov	r2, sl
 8005580:	465b      	mov	r3, fp
 8005582:	4640      	mov	r0, r8
 8005584:	4649      	mov	r1, r9
 8005586:	f7fb fb27 	bl	8000bd8 <__aeabi_uldivmod>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4613      	mov	r3, r2
 8005590:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005598:	d308      	bcc.n	80055ac <UART_SetConfig+0x430>
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a0:	d204      	bcs.n	80055ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a3a      	ldr	r2, [r7, #32]
 80055a8:	60da      	str	r2, [r3, #12]
 80055aa:	e0ce      	b.n	800574a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80055b2:	e0ca      	b.n	800574a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055bc:	d166      	bne.n	800568c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80055be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055c2:	2b08      	cmp	r3, #8
 80055c4:	d827      	bhi.n	8005616 <UART_SetConfig+0x49a>
 80055c6:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <UART_SetConfig+0x450>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	080055f1 	.word	0x080055f1
 80055d0:	080055f9 	.word	0x080055f9
 80055d4:	08005601 	.word	0x08005601
 80055d8:	08005617 	.word	0x08005617
 80055dc:	08005607 	.word	0x08005607
 80055e0:	08005617 	.word	0x08005617
 80055e4:	08005617 	.word	0x08005617
 80055e8:	08005617 	.word	0x08005617
 80055ec:	0800560f 	.word	0x0800560f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f0:	f7fe fb64 	bl	8003cbc <HAL_RCC_GetPCLK1Freq>
 80055f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055f6:	e014      	b.n	8005622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f8:	f7fe fb76 	bl	8003ce8 <HAL_RCC_GetPCLK2Freq>
 80055fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055fe:	e010      	b.n	8005622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005600:	4b4e      	ldr	r3, [pc, #312]	; (800573c <UART_SetConfig+0x5c0>)
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005604:	e00d      	b.n	8005622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005606:	f7fe fac1 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 800560a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800560c:	e009      	b.n	8005622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800560e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005614:	e005      	b.n	8005622 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8090 	beq.w	800574a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	4a44      	ldr	r2, [pc, #272]	; (8005740 <UART_SetConfig+0x5c4>)
 8005630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005634:	461a      	mov	r2, r3
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	fbb3 f3f2 	udiv	r3, r3, r2
 800563c:	005a      	lsls	r2, r3, #1
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	441a      	add	r2, r3
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	fbb2 f3f3 	udiv	r3, r2, r3
 800564e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	2b0f      	cmp	r3, #15
 8005654:	d916      	bls.n	8005684 <UART_SetConfig+0x508>
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800565c:	d212      	bcs.n	8005684 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	b29b      	uxth	r3, r3
 8005662:	f023 030f 	bic.w	r3, r3, #15
 8005666:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	085b      	lsrs	r3, r3, #1
 800566c:	b29b      	uxth	r3, r3
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	b29a      	uxth	r2, r3
 8005674:	8bfb      	ldrh	r3, [r7, #30]
 8005676:	4313      	orrs	r3, r2
 8005678:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	8bfa      	ldrh	r2, [r7, #30]
 8005680:	60da      	str	r2, [r3, #12]
 8005682:	e062      	b.n	800574a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800568a:	e05e      	b.n	800574a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800568c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005690:	2b08      	cmp	r3, #8
 8005692:	d828      	bhi.n	80056e6 <UART_SetConfig+0x56a>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <UART_SetConfig+0x520>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	080056c1 	.word	0x080056c1
 80056a0:	080056c9 	.word	0x080056c9
 80056a4:	080056d1 	.word	0x080056d1
 80056a8:	080056e7 	.word	0x080056e7
 80056ac:	080056d7 	.word	0x080056d7
 80056b0:	080056e7 	.word	0x080056e7
 80056b4:	080056e7 	.word	0x080056e7
 80056b8:	080056e7 	.word	0x080056e7
 80056bc:	080056df 	.word	0x080056df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c0:	f7fe fafc 	bl	8003cbc <HAL_RCC_GetPCLK1Freq>
 80056c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056c6:	e014      	b.n	80056f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056c8:	f7fe fb0e 	bl	8003ce8 <HAL_RCC_GetPCLK2Freq>
 80056cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056ce:	e010      	b.n	80056f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056d0:	4b1a      	ldr	r3, [pc, #104]	; (800573c <UART_SetConfig+0x5c0>)
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056d4:	e00d      	b.n	80056f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056d6:	f7fe fa59 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 80056da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056dc:	e009      	b.n	80056f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056e4:	e005      	b.n	80056f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80056f0:	bf00      	nop
    }

    if (pclk != 0U)
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d028      	beq.n	800574a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	4a10      	ldr	r2, [pc, #64]	; (8005740 <UART_SetConfig+0x5c4>)
 80056fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005702:	461a      	mov	r2, r3
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	fbb3 f2f2 	udiv	r2, r3, r2
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	441a      	add	r2, r3
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	fbb2 f3f3 	udiv	r3, r2, r3
 800571a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	2b0f      	cmp	r3, #15
 8005720:	d910      	bls.n	8005744 <UART_SetConfig+0x5c8>
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005728:	d20c      	bcs.n	8005744 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	b29a      	uxth	r2, r3
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60da      	str	r2, [r3, #12]
 8005734:	e009      	b.n	800574a <UART_SetConfig+0x5ce>
 8005736:	bf00      	nop
 8005738:	40008000 	.word	0x40008000
 800573c:	00f42400 	.word	0x00f42400
 8005740:	08008880 	.word	0x08008880
      }
      else
      {
        ret = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2201      	movs	r2, #1
 800574e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2201      	movs	r2, #1
 8005756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2200      	movs	r2, #0
 800575e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2200      	movs	r2, #0
 8005764:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005766:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800576a:	4618      	mov	r0, r3
 800576c:	3730      	adds	r7, #48	; 0x30
 800576e:	46bd      	mov	sp, r7
 8005770:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	f003 0310 	and.w	r3, r3, #16
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01a      	beq.n	800588a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005872:	d10a      	bne.n	800588a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	605a      	str	r2, [r3, #4]
  }
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b098      	sub	sp, #96	; 0x60
 80058bc:	af02      	add	r7, sp, #8
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058c8:	f7fc fac8 	bl	8001e5c <HAL_GetTick>
 80058cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d12f      	bne.n	800593c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058e4:	2200      	movs	r2, #0
 80058e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f88e 	bl	8005a0c <UART_WaitOnFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d022      	beq.n	800593c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800590a:	653b      	str	r3, [r7, #80]	; 0x50
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005914:	647b      	str	r3, [r7, #68]	; 0x44
 8005916:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800591a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e6      	bne.n	80058f6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e063      	b.n	8005a04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b04      	cmp	r3, #4
 8005948:	d149      	bne.n	80059de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800594a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005952:	2200      	movs	r2, #0
 8005954:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f857 	bl	8005a0c <UART_WaitOnFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d03c      	beq.n	80059de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	623b      	str	r3, [r7, #32]
   return(result);
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005982:	633b      	str	r3, [r7, #48]	; 0x30
 8005984:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e6      	bne.n	8005964 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3308      	adds	r3, #8
 800599c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3308      	adds	r3, #8
 80059b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059b6:	61fa      	str	r2, [r7, #28]
 80059b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	69b9      	ldr	r1, [r7, #24]
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	617b      	str	r3, [r7, #20]
   return(result);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e5      	bne.n	8005996 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e012      	b.n	8005a04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3758      	adds	r7, #88	; 0x58
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a1c:	e049      	b.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a24:	d045      	beq.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a26:	f7fc fa19 	bl	8001e5c <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d302      	bcc.n	8005a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e048      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0304 	and.w	r3, r3, #4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d031      	beq.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d110      	bne.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2208      	movs	r2, #8
 8005a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f838 	bl	8005ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2208      	movs	r2, #8
 8005a6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e029      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a8c:	d111      	bne.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f81e 	bl	8005ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e00f      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69da      	ldr	r2, [r3, #28]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4013      	ands	r3, r2
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	bf0c      	ite	eq
 8005ac2:	2301      	moveq	r3, #1
 8005ac4:	2300      	movne	r3, #0
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	461a      	mov	r2, r3
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d0a6      	beq.n	8005a1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b095      	sub	sp, #84	; 0x54
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b00:	643b      	str	r3, [r7, #64]	; 0x40
 8005b02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e6      	bne.n	8005ae2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3308      	adds	r3, #8
 8005b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b2a:	f023 0301 	bic.w	r3, r3, #1
 8005b2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3308      	adds	r3, #8
 8005b36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b40:	e841 2300 	strex	r3, r2, [r1]
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e3      	bne.n	8005b14 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d118      	bne.n	8005b86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f023 0310 	bic.w	r3, r3, #16
 8005b68:	647b      	str	r3, [r7, #68]	; 0x44
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6979      	ldr	r1, [r7, #20]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e6      	bne.n	8005b54 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005b9a:	bf00      	nop
 8005b9c:	3754      	adds	r7, #84	; 0x54
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b085      	sub	sp, #20
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_UARTEx_DisableFifoMode+0x16>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e027      	b.n	8005c0c <HAL_UARTEx_DisableFifoMode+0x66>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2224      	movs	r2, #36	; 0x24
 8005bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0201 	bic.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005bea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d101      	bne.n	8005c30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e02d      	b.n	8005c8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2224      	movs	r2, #36	; 0x24
 8005c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0201 	bic.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f84f 	bl	8005d10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e02d      	b.n	8005d08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2224      	movs	r2, #36	; 0x24
 8005cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0201 	bic.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f811 	bl	8005d10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d108      	bne.n	8005d32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d30:	e031      	b.n	8005d96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d32:	2308      	movs	r3, #8
 8005d34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d36:	2308      	movs	r3, #8
 8005d38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	0e5b      	lsrs	r3, r3, #25
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	0f5b      	lsrs	r3, r3, #29
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d5a:	7bbb      	ldrb	r3, [r7, #14]
 8005d5c:	7b3a      	ldrb	r2, [r7, #12]
 8005d5e:	4911      	ldr	r1, [pc, #68]	; (8005da4 <UARTEx_SetNbDataToProcess+0x94>)
 8005d60:	5c8a      	ldrb	r2, [r1, r2]
 8005d62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d66:	7b3a      	ldrb	r2, [r7, #12]
 8005d68:	490f      	ldr	r1, [pc, #60]	; (8005da8 <UARTEx_SetNbDataToProcess+0x98>)
 8005d6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	7b7a      	ldrb	r2, [r7, #13]
 8005d7c:	4909      	ldr	r1, [pc, #36]	; (8005da4 <UARTEx_SetNbDataToProcess+0x94>)
 8005d7e:	5c8a      	ldrb	r2, [r1, r2]
 8005d80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d84:	7b7a      	ldrb	r2, [r7, #13]
 8005d86:	4908      	ldr	r1, [pc, #32]	; (8005da8 <UARTEx_SetNbDataToProcess+0x98>)
 8005d88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	08008898 	.word	0x08008898
 8005da8:	080088a0 	.word	0x080088a0

08005dac <__cvt>:
 8005dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005db0:	ec55 4b10 	vmov	r4, r5, d0
 8005db4:	2d00      	cmp	r5, #0
 8005db6:	460e      	mov	r6, r1
 8005db8:	4619      	mov	r1, r3
 8005dba:	462b      	mov	r3, r5
 8005dbc:	bfbb      	ittet	lt
 8005dbe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005dc2:	461d      	movlt	r5, r3
 8005dc4:	2300      	movge	r3, #0
 8005dc6:	232d      	movlt	r3, #45	; 0x2d
 8005dc8:	700b      	strb	r3, [r1, #0]
 8005dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dcc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005dd0:	4691      	mov	r9, r2
 8005dd2:	f023 0820 	bic.w	r8, r3, #32
 8005dd6:	bfbc      	itt	lt
 8005dd8:	4622      	movlt	r2, r4
 8005dda:	4614      	movlt	r4, r2
 8005ddc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005de0:	d005      	beq.n	8005dee <__cvt+0x42>
 8005de2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005de6:	d100      	bne.n	8005dea <__cvt+0x3e>
 8005de8:	3601      	adds	r6, #1
 8005dea:	2102      	movs	r1, #2
 8005dec:	e000      	b.n	8005df0 <__cvt+0x44>
 8005dee:	2103      	movs	r1, #3
 8005df0:	ab03      	add	r3, sp, #12
 8005df2:	9301      	str	r3, [sp, #4]
 8005df4:	ab02      	add	r3, sp, #8
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	ec45 4b10 	vmov	d0, r4, r5
 8005dfc:	4653      	mov	r3, sl
 8005dfe:	4632      	mov	r2, r6
 8005e00:	f000 fe1a 	bl	8006a38 <_dtoa_r>
 8005e04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e08:	4607      	mov	r7, r0
 8005e0a:	d102      	bne.n	8005e12 <__cvt+0x66>
 8005e0c:	f019 0f01 	tst.w	r9, #1
 8005e10:	d022      	beq.n	8005e58 <__cvt+0xac>
 8005e12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e16:	eb07 0906 	add.w	r9, r7, r6
 8005e1a:	d110      	bne.n	8005e3e <__cvt+0x92>
 8005e1c:	783b      	ldrb	r3, [r7, #0]
 8005e1e:	2b30      	cmp	r3, #48	; 0x30
 8005e20:	d10a      	bne.n	8005e38 <__cvt+0x8c>
 8005e22:	2200      	movs	r2, #0
 8005e24:	2300      	movs	r3, #0
 8005e26:	4620      	mov	r0, r4
 8005e28:	4629      	mov	r1, r5
 8005e2a:	f7fa fe65 	bl	8000af8 <__aeabi_dcmpeq>
 8005e2e:	b918      	cbnz	r0, 8005e38 <__cvt+0x8c>
 8005e30:	f1c6 0601 	rsb	r6, r6, #1
 8005e34:	f8ca 6000 	str.w	r6, [sl]
 8005e38:	f8da 3000 	ldr.w	r3, [sl]
 8005e3c:	4499      	add	r9, r3
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2300      	movs	r3, #0
 8005e42:	4620      	mov	r0, r4
 8005e44:	4629      	mov	r1, r5
 8005e46:	f7fa fe57 	bl	8000af8 <__aeabi_dcmpeq>
 8005e4a:	b108      	cbz	r0, 8005e50 <__cvt+0xa4>
 8005e4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e50:	2230      	movs	r2, #48	; 0x30
 8005e52:	9b03      	ldr	r3, [sp, #12]
 8005e54:	454b      	cmp	r3, r9
 8005e56:	d307      	bcc.n	8005e68 <__cvt+0xbc>
 8005e58:	9b03      	ldr	r3, [sp, #12]
 8005e5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e5c:	1bdb      	subs	r3, r3, r7
 8005e5e:	4638      	mov	r0, r7
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	b004      	add	sp, #16
 8005e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e68:	1c59      	adds	r1, r3, #1
 8005e6a:	9103      	str	r1, [sp, #12]
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	e7f0      	b.n	8005e52 <__cvt+0xa6>

08005e70 <__exponent>:
 8005e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e72:	4603      	mov	r3, r0
 8005e74:	2900      	cmp	r1, #0
 8005e76:	bfb8      	it	lt
 8005e78:	4249      	neglt	r1, r1
 8005e7a:	f803 2b02 	strb.w	r2, [r3], #2
 8005e7e:	bfb4      	ite	lt
 8005e80:	222d      	movlt	r2, #45	; 0x2d
 8005e82:	222b      	movge	r2, #43	; 0x2b
 8005e84:	2909      	cmp	r1, #9
 8005e86:	7042      	strb	r2, [r0, #1]
 8005e88:	dd2a      	ble.n	8005ee0 <__exponent+0x70>
 8005e8a:	f10d 0207 	add.w	r2, sp, #7
 8005e8e:	4617      	mov	r7, r2
 8005e90:	260a      	movs	r6, #10
 8005e92:	4694      	mov	ip, r2
 8005e94:	fb91 f5f6 	sdiv	r5, r1, r6
 8005e98:	fb06 1415 	mls	r4, r6, r5, r1
 8005e9c:	3430      	adds	r4, #48	; 0x30
 8005e9e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	2c63      	cmp	r4, #99	; 0x63
 8005ea6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005eaa:	4629      	mov	r1, r5
 8005eac:	dcf1      	bgt.n	8005e92 <__exponent+0x22>
 8005eae:	3130      	adds	r1, #48	; 0x30
 8005eb0:	f1ac 0402 	sub.w	r4, ip, #2
 8005eb4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005eb8:	1c41      	adds	r1, r0, #1
 8005eba:	4622      	mov	r2, r4
 8005ebc:	42ba      	cmp	r2, r7
 8005ebe:	d30a      	bcc.n	8005ed6 <__exponent+0x66>
 8005ec0:	f10d 0209 	add.w	r2, sp, #9
 8005ec4:	eba2 020c 	sub.w	r2, r2, ip
 8005ec8:	42bc      	cmp	r4, r7
 8005eca:	bf88      	it	hi
 8005ecc:	2200      	movhi	r2, #0
 8005ece:	4413      	add	r3, r2
 8005ed0:	1a18      	subs	r0, r3, r0
 8005ed2:	b003      	add	sp, #12
 8005ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005eda:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005ede:	e7ed      	b.n	8005ebc <__exponent+0x4c>
 8005ee0:	2330      	movs	r3, #48	; 0x30
 8005ee2:	3130      	adds	r1, #48	; 0x30
 8005ee4:	7083      	strb	r3, [r0, #2]
 8005ee6:	70c1      	strb	r1, [r0, #3]
 8005ee8:	1d03      	adds	r3, r0, #4
 8005eea:	e7f1      	b.n	8005ed0 <__exponent+0x60>

08005eec <_printf_float>:
 8005eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef0:	ed2d 8b02 	vpush	{d8}
 8005ef4:	b08d      	sub	sp, #52	; 0x34
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005efc:	4616      	mov	r6, r2
 8005efe:	461f      	mov	r7, r3
 8005f00:	4605      	mov	r5, r0
 8005f02:	f000 fcdf 	bl	80068c4 <_localeconv_r>
 8005f06:	f8d0 a000 	ldr.w	sl, [r0]
 8005f0a:	4650      	mov	r0, sl
 8005f0c:	f7fa f9c8 	bl	80002a0 <strlen>
 8005f10:	2300      	movs	r3, #0
 8005f12:	930a      	str	r3, [sp, #40]	; 0x28
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	9305      	str	r3, [sp, #20]
 8005f18:	f8d8 3000 	ldr.w	r3, [r8]
 8005f1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f20:	3307      	adds	r3, #7
 8005f22:	f023 0307 	bic.w	r3, r3, #7
 8005f26:	f103 0208 	add.w	r2, r3, #8
 8005f2a:	f8c8 2000 	str.w	r2, [r8]
 8005f2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f36:	9307      	str	r3, [sp, #28]
 8005f38:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f3c:	ee08 0a10 	vmov	s16, r0
 8005f40:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005f44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f48:	4b9e      	ldr	r3, [pc, #632]	; (80061c4 <_printf_float+0x2d8>)
 8005f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f4e:	f7fa fe05 	bl	8000b5c <__aeabi_dcmpun>
 8005f52:	bb88      	cbnz	r0, 8005fb8 <_printf_float+0xcc>
 8005f54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f58:	4b9a      	ldr	r3, [pc, #616]	; (80061c4 <_printf_float+0x2d8>)
 8005f5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f5e:	f7fa fddf 	bl	8000b20 <__aeabi_dcmple>
 8005f62:	bb48      	cbnz	r0, 8005fb8 <_printf_float+0xcc>
 8005f64:	2200      	movs	r2, #0
 8005f66:	2300      	movs	r3, #0
 8005f68:	4640      	mov	r0, r8
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	f7fa fdce 	bl	8000b0c <__aeabi_dcmplt>
 8005f70:	b110      	cbz	r0, 8005f78 <_printf_float+0x8c>
 8005f72:	232d      	movs	r3, #45	; 0x2d
 8005f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f78:	4a93      	ldr	r2, [pc, #588]	; (80061c8 <_printf_float+0x2dc>)
 8005f7a:	4b94      	ldr	r3, [pc, #592]	; (80061cc <_printf_float+0x2e0>)
 8005f7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f80:	bf94      	ite	ls
 8005f82:	4690      	movls	r8, r2
 8005f84:	4698      	movhi	r8, r3
 8005f86:	2303      	movs	r3, #3
 8005f88:	6123      	str	r3, [r4, #16]
 8005f8a:	9b05      	ldr	r3, [sp, #20]
 8005f8c:	f023 0304 	bic.w	r3, r3, #4
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	f04f 0900 	mov.w	r9, #0
 8005f96:	9700      	str	r7, [sp, #0]
 8005f98:	4633      	mov	r3, r6
 8005f9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f000 f9da 	bl	8006358 <_printf_common>
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	f040 8090 	bne.w	80060ca <_printf_float+0x1de>
 8005faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fae:	b00d      	add	sp, #52	; 0x34
 8005fb0:	ecbd 8b02 	vpop	{d8}
 8005fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb8:	4642      	mov	r2, r8
 8005fba:	464b      	mov	r3, r9
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	f7fa fdcc 	bl	8000b5c <__aeabi_dcmpun>
 8005fc4:	b140      	cbz	r0, 8005fd8 <_printf_float+0xec>
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bfbc      	itt	lt
 8005fcc:	232d      	movlt	r3, #45	; 0x2d
 8005fce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005fd2:	4a7f      	ldr	r2, [pc, #508]	; (80061d0 <_printf_float+0x2e4>)
 8005fd4:	4b7f      	ldr	r3, [pc, #508]	; (80061d4 <_printf_float+0x2e8>)
 8005fd6:	e7d1      	b.n	8005f7c <_printf_float+0x90>
 8005fd8:	6863      	ldr	r3, [r4, #4]
 8005fda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005fde:	9206      	str	r2, [sp, #24]
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	d13f      	bne.n	8006064 <_printf_float+0x178>
 8005fe4:	2306      	movs	r3, #6
 8005fe6:	6063      	str	r3, [r4, #4]
 8005fe8:	9b05      	ldr	r3, [sp, #20]
 8005fea:	6861      	ldr	r1, [r4, #4]
 8005fec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	9303      	str	r3, [sp, #12]
 8005ff4:	ab0a      	add	r3, sp, #40	; 0x28
 8005ff6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ffa:	ab09      	add	r3, sp, #36	; 0x24
 8005ffc:	ec49 8b10 	vmov	d0, r8, r9
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	6022      	str	r2, [r4, #0]
 8006004:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006008:	4628      	mov	r0, r5
 800600a:	f7ff fecf 	bl	8005dac <__cvt>
 800600e:	9b06      	ldr	r3, [sp, #24]
 8006010:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006012:	2b47      	cmp	r3, #71	; 0x47
 8006014:	4680      	mov	r8, r0
 8006016:	d108      	bne.n	800602a <_printf_float+0x13e>
 8006018:	1cc8      	adds	r0, r1, #3
 800601a:	db02      	blt.n	8006022 <_printf_float+0x136>
 800601c:	6863      	ldr	r3, [r4, #4]
 800601e:	4299      	cmp	r1, r3
 8006020:	dd41      	ble.n	80060a6 <_printf_float+0x1ba>
 8006022:	f1ab 0302 	sub.w	r3, fp, #2
 8006026:	fa5f fb83 	uxtb.w	fp, r3
 800602a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800602e:	d820      	bhi.n	8006072 <_printf_float+0x186>
 8006030:	3901      	subs	r1, #1
 8006032:	465a      	mov	r2, fp
 8006034:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006038:	9109      	str	r1, [sp, #36]	; 0x24
 800603a:	f7ff ff19 	bl	8005e70 <__exponent>
 800603e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006040:	1813      	adds	r3, r2, r0
 8006042:	2a01      	cmp	r2, #1
 8006044:	4681      	mov	r9, r0
 8006046:	6123      	str	r3, [r4, #16]
 8006048:	dc02      	bgt.n	8006050 <_printf_float+0x164>
 800604a:	6822      	ldr	r2, [r4, #0]
 800604c:	07d2      	lsls	r2, r2, #31
 800604e:	d501      	bpl.n	8006054 <_printf_float+0x168>
 8006050:	3301      	adds	r3, #1
 8006052:	6123      	str	r3, [r4, #16]
 8006054:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006058:	2b00      	cmp	r3, #0
 800605a:	d09c      	beq.n	8005f96 <_printf_float+0xaa>
 800605c:	232d      	movs	r3, #45	; 0x2d
 800605e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006062:	e798      	b.n	8005f96 <_printf_float+0xaa>
 8006064:	9a06      	ldr	r2, [sp, #24]
 8006066:	2a47      	cmp	r2, #71	; 0x47
 8006068:	d1be      	bne.n	8005fe8 <_printf_float+0xfc>
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1bc      	bne.n	8005fe8 <_printf_float+0xfc>
 800606e:	2301      	movs	r3, #1
 8006070:	e7b9      	b.n	8005fe6 <_printf_float+0xfa>
 8006072:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006076:	d118      	bne.n	80060aa <_printf_float+0x1be>
 8006078:	2900      	cmp	r1, #0
 800607a:	6863      	ldr	r3, [r4, #4]
 800607c:	dd0b      	ble.n	8006096 <_printf_float+0x1aa>
 800607e:	6121      	str	r1, [r4, #16]
 8006080:	b913      	cbnz	r3, 8006088 <_printf_float+0x19c>
 8006082:	6822      	ldr	r2, [r4, #0]
 8006084:	07d0      	lsls	r0, r2, #31
 8006086:	d502      	bpl.n	800608e <_printf_float+0x1a2>
 8006088:	3301      	adds	r3, #1
 800608a:	440b      	add	r3, r1
 800608c:	6123      	str	r3, [r4, #16]
 800608e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006090:	f04f 0900 	mov.w	r9, #0
 8006094:	e7de      	b.n	8006054 <_printf_float+0x168>
 8006096:	b913      	cbnz	r3, 800609e <_printf_float+0x1b2>
 8006098:	6822      	ldr	r2, [r4, #0]
 800609a:	07d2      	lsls	r2, r2, #31
 800609c:	d501      	bpl.n	80060a2 <_printf_float+0x1b6>
 800609e:	3302      	adds	r3, #2
 80060a0:	e7f4      	b.n	800608c <_printf_float+0x1a0>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e7f2      	b.n	800608c <_printf_float+0x1a0>
 80060a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80060aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ac:	4299      	cmp	r1, r3
 80060ae:	db05      	blt.n	80060bc <_printf_float+0x1d0>
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	6121      	str	r1, [r4, #16]
 80060b4:	07d8      	lsls	r0, r3, #31
 80060b6:	d5ea      	bpl.n	800608e <_printf_float+0x1a2>
 80060b8:	1c4b      	adds	r3, r1, #1
 80060ba:	e7e7      	b.n	800608c <_printf_float+0x1a0>
 80060bc:	2900      	cmp	r1, #0
 80060be:	bfd4      	ite	le
 80060c0:	f1c1 0202 	rsble	r2, r1, #2
 80060c4:	2201      	movgt	r2, #1
 80060c6:	4413      	add	r3, r2
 80060c8:	e7e0      	b.n	800608c <_printf_float+0x1a0>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	055a      	lsls	r2, r3, #21
 80060ce:	d407      	bmi.n	80060e0 <_printf_float+0x1f4>
 80060d0:	6923      	ldr	r3, [r4, #16]
 80060d2:	4642      	mov	r2, r8
 80060d4:	4631      	mov	r1, r6
 80060d6:	4628      	mov	r0, r5
 80060d8:	47b8      	blx	r7
 80060da:	3001      	adds	r0, #1
 80060dc:	d12c      	bne.n	8006138 <_printf_float+0x24c>
 80060de:	e764      	b.n	8005faa <_printf_float+0xbe>
 80060e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060e4:	f240 80e0 	bls.w	80062a8 <_printf_float+0x3bc>
 80060e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060ec:	2200      	movs	r2, #0
 80060ee:	2300      	movs	r3, #0
 80060f0:	f7fa fd02 	bl	8000af8 <__aeabi_dcmpeq>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d034      	beq.n	8006162 <_printf_float+0x276>
 80060f8:	4a37      	ldr	r2, [pc, #220]	; (80061d8 <_printf_float+0x2ec>)
 80060fa:	2301      	movs	r3, #1
 80060fc:	4631      	mov	r1, r6
 80060fe:	4628      	mov	r0, r5
 8006100:	47b8      	blx	r7
 8006102:	3001      	adds	r0, #1
 8006104:	f43f af51 	beq.w	8005faa <_printf_float+0xbe>
 8006108:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800610c:	429a      	cmp	r2, r3
 800610e:	db02      	blt.n	8006116 <_printf_float+0x22a>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	07d8      	lsls	r0, r3, #31
 8006114:	d510      	bpl.n	8006138 <_printf_float+0x24c>
 8006116:	ee18 3a10 	vmov	r3, s16
 800611a:	4652      	mov	r2, sl
 800611c:	4631      	mov	r1, r6
 800611e:	4628      	mov	r0, r5
 8006120:	47b8      	blx	r7
 8006122:	3001      	adds	r0, #1
 8006124:	f43f af41 	beq.w	8005faa <_printf_float+0xbe>
 8006128:	f04f 0800 	mov.w	r8, #0
 800612c:	f104 091a 	add.w	r9, r4, #26
 8006130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006132:	3b01      	subs	r3, #1
 8006134:	4543      	cmp	r3, r8
 8006136:	dc09      	bgt.n	800614c <_printf_float+0x260>
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	079b      	lsls	r3, r3, #30
 800613c:	f100 8107 	bmi.w	800634e <_printf_float+0x462>
 8006140:	68e0      	ldr	r0, [r4, #12]
 8006142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006144:	4298      	cmp	r0, r3
 8006146:	bfb8      	it	lt
 8006148:	4618      	movlt	r0, r3
 800614a:	e730      	b.n	8005fae <_printf_float+0xc2>
 800614c:	2301      	movs	r3, #1
 800614e:	464a      	mov	r2, r9
 8006150:	4631      	mov	r1, r6
 8006152:	4628      	mov	r0, r5
 8006154:	47b8      	blx	r7
 8006156:	3001      	adds	r0, #1
 8006158:	f43f af27 	beq.w	8005faa <_printf_float+0xbe>
 800615c:	f108 0801 	add.w	r8, r8, #1
 8006160:	e7e6      	b.n	8006130 <_printf_float+0x244>
 8006162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006164:	2b00      	cmp	r3, #0
 8006166:	dc39      	bgt.n	80061dc <_printf_float+0x2f0>
 8006168:	4a1b      	ldr	r2, [pc, #108]	; (80061d8 <_printf_float+0x2ec>)
 800616a:	2301      	movs	r3, #1
 800616c:	4631      	mov	r1, r6
 800616e:	4628      	mov	r0, r5
 8006170:	47b8      	blx	r7
 8006172:	3001      	adds	r0, #1
 8006174:	f43f af19 	beq.w	8005faa <_printf_float+0xbe>
 8006178:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800617c:	4313      	orrs	r3, r2
 800617e:	d102      	bne.n	8006186 <_printf_float+0x29a>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	07d9      	lsls	r1, r3, #31
 8006184:	d5d8      	bpl.n	8006138 <_printf_float+0x24c>
 8006186:	ee18 3a10 	vmov	r3, s16
 800618a:	4652      	mov	r2, sl
 800618c:	4631      	mov	r1, r6
 800618e:	4628      	mov	r0, r5
 8006190:	47b8      	blx	r7
 8006192:	3001      	adds	r0, #1
 8006194:	f43f af09 	beq.w	8005faa <_printf_float+0xbe>
 8006198:	f04f 0900 	mov.w	r9, #0
 800619c:	f104 0a1a 	add.w	sl, r4, #26
 80061a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a2:	425b      	negs	r3, r3
 80061a4:	454b      	cmp	r3, r9
 80061a6:	dc01      	bgt.n	80061ac <_printf_float+0x2c0>
 80061a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061aa:	e792      	b.n	80060d2 <_printf_float+0x1e6>
 80061ac:	2301      	movs	r3, #1
 80061ae:	4652      	mov	r2, sl
 80061b0:	4631      	mov	r1, r6
 80061b2:	4628      	mov	r0, r5
 80061b4:	47b8      	blx	r7
 80061b6:	3001      	adds	r0, #1
 80061b8:	f43f aef7 	beq.w	8005faa <_printf_float+0xbe>
 80061bc:	f109 0901 	add.w	r9, r9, #1
 80061c0:	e7ee      	b.n	80061a0 <_printf_float+0x2b4>
 80061c2:	bf00      	nop
 80061c4:	7fefffff 	.word	0x7fefffff
 80061c8:	080088a8 	.word	0x080088a8
 80061cc:	080088ac 	.word	0x080088ac
 80061d0:	080088b0 	.word	0x080088b0
 80061d4:	080088b4 	.word	0x080088b4
 80061d8:	080088b8 	.word	0x080088b8
 80061dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061e0:	429a      	cmp	r2, r3
 80061e2:	bfa8      	it	ge
 80061e4:	461a      	movge	r2, r3
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	4691      	mov	r9, r2
 80061ea:	dc37      	bgt.n	800625c <_printf_float+0x370>
 80061ec:	f04f 0b00 	mov.w	fp, #0
 80061f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061f4:	f104 021a 	add.w	r2, r4, #26
 80061f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061fa:	9305      	str	r3, [sp, #20]
 80061fc:	eba3 0309 	sub.w	r3, r3, r9
 8006200:	455b      	cmp	r3, fp
 8006202:	dc33      	bgt.n	800626c <_printf_float+0x380>
 8006204:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006208:	429a      	cmp	r2, r3
 800620a:	db3b      	blt.n	8006284 <_printf_float+0x398>
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	07da      	lsls	r2, r3, #31
 8006210:	d438      	bmi.n	8006284 <_printf_float+0x398>
 8006212:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006216:	eba2 0903 	sub.w	r9, r2, r3
 800621a:	9b05      	ldr	r3, [sp, #20]
 800621c:	1ad2      	subs	r2, r2, r3
 800621e:	4591      	cmp	r9, r2
 8006220:	bfa8      	it	ge
 8006222:	4691      	movge	r9, r2
 8006224:	f1b9 0f00 	cmp.w	r9, #0
 8006228:	dc35      	bgt.n	8006296 <_printf_float+0x3aa>
 800622a:	f04f 0800 	mov.w	r8, #0
 800622e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006232:	f104 0a1a 	add.w	sl, r4, #26
 8006236:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	eba3 0309 	sub.w	r3, r3, r9
 8006240:	4543      	cmp	r3, r8
 8006242:	f77f af79 	ble.w	8006138 <_printf_float+0x24c>
 8006246:	2301      	movs	r3, #1
 8006248:	4652      	mov	r2, sl
 800624a:	4631      	mov	r1, r6
 800624c:	4628      	mov	r0, r5
 800624e:	47b8      	blx	r7
 8006250:	3001      	adds	r0, #1
 8006252:	f43f aeaa 	beq.w	8005faa <_printf_float+0xbe>
 8006256:	f108 0801 	add.w	r8, r8, #1
 800625a:	e7ec      	b.n	8006236 <_printf_float+0x34a>
 800625c:	4613      	mov	r3, r2
 800625e:	4631      	mov	r1, r6
 8006260:	4642      	mov	r2, r8
 8006262:	4628      	mov	r0, r5
 8006264:	47b8      	blx	r7
 8006266:	3001      	adds	r0, #1
 8006268:	d1c0      	bne.n	80061ec <_printf_float+0x300>
 800626a:	e69e      	b.n	8005faa <_printf_float+0xbe>
 800626c:	2301      	movs	r3, #1
 800626e:	4631      	mov	r1, r6
 8006270:	4628      	mov	r0, r5
 8006272:	9205      	str	r2, [sp, #20]
 8006274:	47b8      	blx	r7
 8006276:	3001      	adds	r0, #1
 8006278:	f43f ae97 	beq.w	8005faa <_printf_float+0xbe>
 800627c:	9a05      	ldr	r2, [sp, #20]
 800627e:	f10b 0b01 	add.w	fp, fp, #1
 8006282:	e7b9      	b.n	80061f8 <_printf_float+0x30c>
 8006284:	ee18 3a10 	vmov	r3, s16
 8006288:	4652      	mov	r2, sl
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	47b8      	blx	r7
 8006290:	3001      	adds	r0, #1
 8006292:	d1be      	bne.n	8006212 <_printf_float+0x326>
 8006294:	e689      	b.n	8005faa <_printf_float+0xbe>
 8006296:	9a05      	ldr	r2, [sp, #20]
 8006298:	464b      	mov	r3, r9
 800629a:	4442      	add	r2, r8
 800629c:	4631      	mov	r1, r6
 800629e:	4628      	mov	r0, r5
 80062a0:	47b8      	blx	r7
 80062a2:	3001      	adds	r0, #1
 80062a4:	d1c1      	bne.n	800622a <_printf_float+0x33e>
 80062a6:	e680      	b.n	8005faa <_printf_float+0xbe>
 80062a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062aa:	2a01      	cmp	r2, #1
 80062ac:	dc01      	bgt.n	80062b2 <_printf_float+0x3c6>
 80062ae:	07db      	lsls	r3, r3, #31
 80062b0:	d53a      	bpl.n	8006328 <_printf_float+0x43c>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4642      	mov	r2, r8
 80062b6:	4631      	mov	r1, r6
 80062b8:	4628      	mov	r0, r5
 80062ba:	47b8      	blx	r7
 80062bc:	3001      	adds	r0, #1
 80062be:	f43f ae74 	beq.w	8005faa <_printf_float+0xbe>
 80062c2:	ee18 3a10 	vmov	r3, s16
 80062c6:	4652      	mov	r2, sl
 80062c8:	4631      	mov	r1, r6
 80062ca:	4628      	mov	r0, r5
 80062cc:	47b8      	blx	r7
 80062ce:	3001      	adds	r0, #1
 80062d0:	f43f ae6b 	beq.w	8005faa <_printf_float+0xbe>
 80062d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062d8:	2200      	movs	r2, #0
 80062da:	2300      	movs	r3, #0
 80062dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80062e0:	f7fa fc0a 	bl	8000af8 <__aeabi_dcmpeq>
 80062e4:	b9d8      	cbnz	r0, 800631e <_printf_float+0x432>
 80062e6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80062ea:	f108 0201 	add.w	r2, r8, #1
 80062ee:	4631      	mov	r1, r6
 80062f0:	4628      	mov	r0, r5
 80062f2:	47b8      	blx	r7
 80062f4:	3001      	adds	r0, #1
 80062f6:	d10e      	bne.n	8006316 <_printf_float+0x42a>
 80062f8:	e657      	b.n	8005faa <_printf_float+0xbe>
 80062fa:	2301      	movs	r3, #1
 80062fc:	4652      	mov	r2, sl
 80062fe:	4631      	mov	r1, r6
 8006300:	4628      	mov	r0, r5
 8006302:	47b8      	blx	r7
 8006304:	3001      	adds	r0, #1
 8006306:	f43f ae50 	beq.w	8005faa <_printf_float+0xbe>
 800630a:	f108 0801 	add.w	r8, r8, #1
 800630e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006310:	3b01      	subs	r3, #1
 8006312:	4543      	cmp	r3, r8
 8006314:	dcf1      	bgt.n	80062fa <_printf_float+0x40e>
 8006316:	464b      	mov	r3, r9
 8006318:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800631c:	e6da      	b.n	80060d4 <_printf_float+0x1e8>
 800631e:	f04f 0800 	mov.w	r8, #0
 8006322:	f104 0a1a 	add.w	sl, r4, #26
 8006326:	e7f2      	b.n	800630e <_printf_float+0x422>
 8006328:	2301      	movs	r3, #1
 800632a:	4642      	mov	r2, r8
 800632c:	e7df      	b.n	80062ee <_printf_float+0x402>
 800632e:	2301      	movs	r3, #1
 8006330:	464a      	mov	r2, r9
 8006332:	4631      	mov	r1, r6
 8006334:	4628      	mov	r0, r5
 8006336:	47b8      	blx	r7
 8006338:	3001      	adds	r0, #1
 800633a:	f43f ae36 	beq.w	8005faa <_printf_float+0xbe>
 800633e:	f108 0801 	add.w	r8, r8, #1
 8006342:	68e3      	ldr	r3, [r4, #12]
 8006344:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006346:	1a5b      	subs	r3, r3, r1
 8006348:	4543      	cmp	r3, r8
 800634a:	dcf0      	bgt.n	800632e <_printf_float+0x442>
 800634c:	e6f8      	b.n	8006140 <_printf_float+0x254>
 800634e:	f04f 0800 	mov.w	r8, #0
 8006352:	f104 0919 	add.w	r9, r4, #25
 8006356:	e7f4      	b.n	8006342 <_printf_float+0x456>

08006358 <_printf_common>:
 8006358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800635c:	4616      	mov	r6, r2
 800635e:	4699      	mov	r9, r3
 8006360:	688a      	ldr	r2, [r1, #8]
 8006362:	690b      	ldr	r3, [r1, #16]
 8006364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006368:	4293      	cmp	r3, r2
 800636a:	bfb8      	it	lt
 800636c:	4613      	movlt	r3, r2
 800636e:	6033      	str	r3, [r6, #0]
 8006370:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006374:	4607      	mov	r7, r0
 8006376:	460c      	mov	r4, r1
 8006378:	b10a      	cbz	r2, 800637e <_printf_common+0x26>
 800637a:	3301      	adds	r3, #1
 800637c:	6033      	str	r3, [r6, #0]
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	0699      	lsls	r1, r3, #26
 8006382:	bf42      	ittt	mi
 8006384:	6833      	ldrmi	r3, [r6, #0]
 8006386:	3302      	addmi	r3, #2
 8006388:	6033      	strmi	r3, [r6, #0]
 800638a:	6825      	ldr	r5, [r4, #0]
 800638c:	f015 0506 	ands.w	r5, r5, #6
 8006390:	d106      	bne.n	80063a0 <_printf_common+0x48>
 8006392:	f104 0a19 	add.w	sl, r4, #25
 8006396:	68e3      	ldr	r3, [r4, #12]
 8006398:	6832      	ldr	r2, [r6, #0]
 800639a:	1a9b      	subs	r3, r3, r2
 800639c:	42ab      	cmp	r3, r5
 800639e:	dc26      	bgt.n	80063ee <_printf_common+0x96>
 80063a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063a4:	1e13      	subs	r3, r2, #0
 80063a6:	6822      	ldr	r2, [r4, #0]
 80063a8:	bf18      	it	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	0692      	lsls	r2, r2, #26
 80063ae:	d42b      	bmi.n	8006408 <_printf_common+0xb0>
 80063b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063b4:	4649      	mov	r1, r9
 80063b6:	4638      	mov	r0, r7
 80063b8:	47c0      	blx	r8
 80063ba:	3001      	adds	r0, #1
 80063bc:	d01e      	beq.n	80063fc <_printf_common+0xa4>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	6922      	ldr	r2, [r4, #16]
 80063c2:	f003 0306 	and.w	r3, r3, #6
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	bf02      	ittt	eq
 80063ca:	68e5      	ldreq	r5, [r4, #12]
 80063cc:	6833      	ldreq	r3, [r6, #0]
 80063ce:	1aed      	subeq	r5, r5, r3
 80063d0:	68a3      	ldr	r3, [r4, #8]
 80063d2:	bf0c      	ite	eq
 80063d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063d8:	2500      	movne	r5, #0
 80063da:	4293      	cmp	r3, r2
 80063dc:	bfc4      	itt	gt
 80063de:	1a9b      	subgt	r3, r3, r2
 80063e0:	18ed      	addgt	r5, r5, r3
 80063e2:	2600      	movs	r6, #0
 80063e4:	341a      	adds	r4, #26
 80063e6:	42b5      	cmp	r5, r6
 80063e8:	d11a      	bne.n	8006420 <_printf_common+0xc8>
 80063ea:	2000      	movs	r0, #0
 80063ec:	e008      	b.n	8006400 <_printf_common+0xa8>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4652      	mov	r2, sl
 80063f2:	4649      	mov	r1, r9
 80063f4:	4638      	mov	r0, r7
 80063f6:	47c0      	blx	r8
 80063f8:	3001      	adds	r0, #1
 80063fa:	d103      	bne.n	8006404 <_printf_common+0xac>
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006404:	3501      	adds	r5, #1
 8006406:	e7c6      	b.n	8006396 <_printf_common+0x3e>
 8006408:	18e1      	adds	r1, r4, r3
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	2030      	movs	r0, #48	; 0x30
 800640e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006412:	4422      	add	r2, r4
 8006414:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006418:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800641c:	3302      	adds	r3, #2
 800641e:	e7c7      	b.n	80063b0 <_printf_common+0x58>
 8006420:	2301      	movs	r3, #1
 8006422:	4622      	mov	r2, r4
 8006424:	4649      	mov	r1, r9
 8006426:	4638      	mov	r0, r7
 8006428:	47c0      	blx	r8
 800642a:	3001      	adds	r0, #1
 800642c:	d0e6      	beq.n	80063fc <_printf_common+0xa4>
 800642e:	3601      	adds	r6, #1
 8006430:	e7d9      	b.n	80063e6 <_printf_common+0x8e>
	...

08006434 <_printf_i>:
 8006434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006438:	7e0f      	ldrb	r7, [r1, #24]
 800643a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800643c:	2f78      	cmp	r7, #120	; 0x78
 800643e:	4691      	mov	r9, r2
 8006440:	4680      	mov	r8, r0
 8006442:	460c      	mov	r4, r1
 8006444:	469a      	mov	sl, r3
 8006446:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800644a:	d807      	bhi.n	800645c <_printf_i+0x28>
 800644c:	2f62      	cmp	r7, #98	; 0x62
 800644e:	d80a      	bhi.n	8006466 <_printf_i+0x32>
 8006450:	2f00      	cmp	r7, #0
 8006452:	f000 80d4 	beq.w	80065fe <_printf_i+0x1ca>
 8006456:	2f58      	cmp	r7, #88	; 0x58
 8006458:	f000 80c0 	beq.w	80065dc <_printf_i+0x1a8>
 800645c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006460:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006464:	e03a      	b.n	80064dc <_printf_i+0xa8>
 8006466:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800646a:	2b15      	cmp	r3, #21
 800646c:	d8f6      	bhi.n	800645c <_printf_i+0x28>
 800646e:	a101      	add	r1, pc, #4	; (adr r1, 8006474 <_printf_i+0x40>)
 8006470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006474:	080064cd 	.word	0x080064cd
 8006478:	080064e1 	.word	0x080064e1
 800647c:	0800645d 	.word	0x0800645d
 8006480:	0800645d 	.word	0x0800645d
 8006484:	0800645d 	.word	0x0800645d
 8006488:	0800645d 	.word	0x0800645d
 800648c:	080064e1 	.word	0x080064e1
 8006490:	0800645d 	.word	0x0800645d
 8006494:	0800645d 	.word	0x0800645d
 8006498:	0800645d 	.word	0x0800645d
 800649c:	0800645d 	.word	0x0800645d
 80064a0:	080065e5 	.word	0x080065e5
 80064a4:	0800650d 	.word	0x0800650d
 80064a8:	0800659f 	.word	0x0800659f
 80064ac:	0800645d 	.word	0x0800645d
 80064b0:	0800645d 	.word	0x0800645d
 80064b4:	08006607 	.word	0x08006607
 80064b8:	0800645d 	.word	0x0800645d
 80064bc:	0800650d 	.word	0x0800650d
 80064c0:	0800645d 	.word	0x0800645d
 80064c4:	0800645d 	.word	0x0800645d
 80064c8:	080065a7 	.word	0x080065a7
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	1d1a      	adds	r2, r3, #4
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	602a      	str	r2, [r5, #0]
 80064d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064dc:	2301      	movs	r3, #1
 80064de:	e09f      	b.n	8006620 <_printf_i+0x1ec>
 80064e0:	6820      	ldr	r0, [r4, #0]
 80064e2:	682b      	ldr	r3, [r5, #0]
 80064e4:	0607      	lsls	r7, r0, #24
 80064e6:	f103 0104 	add.w	r1, r3, #4
 80064ea:	6029      	str	r1, [r5, #0]
 80064ec:	d501      	bpl.n	80064f2 <_printf_i+0xbe>
 80064ee:	681e      	ldr	r6, [r3, #0]
 80064f0:	e003      	b.n	80064fa <_printf_i+0xc6>
 80064f2:	0646      	lsls	r6, r0, #25
 80064f4:	d5fb      	bpl.n	80064ee <_printf_i+0xba>
 80064f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80064fa:	2e00      	cmp	r6, #0
 80064fc:	da03      	bge.n	8006506 <_printf_i+0xd2>
 80064fe:	232d      	movs	r3, #45	; 0x2d
 8006500:	4276      	negs	r6, r6
 8006502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006506:	485a      	ldr	r0, [pc, #360]	; (8006670 <_printf_i+0x23c>)
 8006508:	230a      	movs	r3, #10
 800650a:	e012      	b.n	8006532 <_printf_i+0xfe>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	6820      	ldr	r0, [r4, #0]
 8006510:	1d19      	adds	r1, r3, #4
 8006512:	6029      	str	r1, [r5, #0]
 8006514:	0605      	lsls	r5, r0, #24
 8006516:	d501      	bpl.n	800651c <_printf_i+0xe8>
 8006518:	681e      	ldr	r6, [r3, #0]
 800651a:	e002      	b.n	8006522 <_printf_i+0xee>
 800651c:	0641      	lsls	r1, r0, #25
 800651e:	d5fb      	bpl.n	8006518 <_printf_i+0xe4>
 8006520:	881e      	ldrh	r6, [r3, #0]
 8006522:	4853      	ldr	r0, [pc, #332]	; (8006670 <_printf_i+0x23c>)
 8006524:	2f6f      	cmp	r7, #111	; 0x6f
 8006526:	bf0c      	ite	eq
 8006528:	2308      	moveq	r3, #8
 800652a:	230a      	movne	r3, #10
 800652c:	2100      	movs	r1, #0
 800652e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006532:	6865      	ldr	r5, [r4, #4]
 8006534:	60a5      	str	r5, [r4, #8]
 8006536:	2d00      	cmp	r5, #0
 8006538:	bfa2      	ittt	ge
 800653a:	6821      	ldrge	r1, [r4, #0]
 800653c:	f021 0104 	bicge.w	r1, r1, #4
 8006540:	6021      	strge	r1, [r4, #0]
 8006542:	b90e      	cbnz	r6, 8006548 <_printf_i+0x114>
 8006544:	2d00      	cmp	r5, #0
 8006546:	d04b      	beq.n	80065e0 <_printf_i+0x1ac>
 8006548:	4615      	mov	r5, r2
 800654a:	fbb6 f1f3 	udiv	r1, r6, r3
 800654e:	fb03 6711 	mls	r7, r3, r1, r6
 8006552:	5dc7      	ldrb	r7, [r0, r7]
 8006554:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006558:	4637      	mov	r7, r6
 800655a:	42bb      	cmp	r3, r7
 800655c:	460e      	mov	r6, r1
 800655e:	d9f4      	bls.n	800654a <_printf_i+0x116>
 8006560:	2b08      	cmp	r3, #8
 8006562:	d10b      	bne.n	800657c <_printf_i+0x148>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	07de      	lsls	r6, r3, #31
 8006568:	d508      	bpl.n	800657c <_printf_i+0x148>
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	6861      	ldr	r1, [r4, #4]
 800656e:	4299      	cmp	r1, r3
 8006570:	bfde      	ittt	le
 8006572:	2330      	movle	r3, #48	; 0x30
 8006574:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006578:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800657c:	1b52      	subs	r2, r2, r5
 800657e:	6122      	str	r2, [r4, #16]
 8006580:	f8cd a000 	str.w	sl, [sp]
 8006584:	464b      	mov	r3, r9
 8006586:	aa03      	add	r2, sp, #12
 8006588:	4621      	mov	r1, r4
 800658a:	4640      	mov	r0, r8
 800658c:	f7ff fee4 	bl	8006358 <_printf_common>
 8006590:	3001      	adds	r0, #1
 8006592:	d14a      	bne.n	800662a <_printf_i+0x1f6>
 8006594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006598:	b004      	add	sp, #16
 800659a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	f043 0320 	orr.w	r3, r3, #32
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	4833      	ldr	r0, [pc, #204]	; (8006674 <_printf_i+0x240>)
 80065a8:	2778      	movs	r7, #120	; 0x78
 80065aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	6829      	ldr	r1, [r5, #0]
 80065b2:	061f      	lsls	r7, r3, #24
 80065b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80065b8:	d402      	bmi.n	80065c0 <_printf_i+0x18c>
 80065ba:	065f      	lsls	r7, r3, #25
 80065bc:	bf48      	it	mi
 80065be:	b2b6      	uxthmi	r6, r6
 80065c0:	07df      	lsls	r7, r3, #31
 80065c2:	bf48      	it	mi
 80065c4:	f043 0320 	orrmi.w	r3, r3, #32
 80065c8:	6029      	str	r1, [r5, #0]
 80065ca:	bf48      	it	mi
 80065cc:	6023      	strmi	r3, [r4, #0]
 80065ce:	b91e      	cbnz	r6, 80065d8 <_printf_i+0x1a4>
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	f023 0320 	bic.w	r3, r3, #32
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	2310      	movs	r3, #16
 80065da:	e7a7      	b.n	800652c <_printf_i+0xf8>
 80065dc:	4824      	ldr	r0, [pc, #144]	; (8006670 <_printf_i+0x23c>)
 80065de:	e7e4      	b.n	80065aa <_printf_i+0x176>
 80065e0:	4615      	mov	r5, r2
 80065e2:	e7bd      	b.n	8006560 <_printf_i+0x12c>
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	6826      	ldr	r6, [r4, #0]
 80065e8:	6961      	ldr	r1, [r4, #20]
 80065ea:	1d18      	adds	r0, r3, #4
 80065ec:	6028      	str	r0, [r5, #0]
 80065ee:	0635      	lsls	r5, r6, #24
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	d501      	bpl.n	80065f8 <_printf_i+0x1c4>
 80065f4:	6019      	str	r1, [r3, #0]
 80065f6:	e002      	b.n	80065fe <_printf_i+0x1ca>
 80065f8:	0670      	lsls	r0, r6, #25
 80065fa:	d5fb      	bpl.n	80065f4 <_printf_i+0x1c0>
 80065fc:	8019      	strh	r1, [r3, #0]
 80065fe:	2300      	movs	r3, #0
 8006600:	6123      	str	r3, [r4, #16]
 8006602:	4615      	mov	r5, r2
 8006604:	e7bc      	b.n	8006580 <_printf_i+0x14c>
 8006606:	682b      	ldr	r3, [r5, #0]
 8006608:	1d1a      	adds	r2, r3, #4
 800660a:	602a      	str	r2, [r5, #0]
 800660c:	681d      	ldr	r5, [r3, #0]
 800660e:	6862      	ldr	r2, [r4, #4]
 8006610:	2100      	movs	r1, #0
 8006612:	4628      	mov	r0, r5
 8006614:	f7f9 fdf4 	bl	8000200 <memchr>
 8006618:	b108      	cbz	r0, 800661e <_printf_i+0x1ea>
 800661a:	1b40      	subs	r0, r0, r5
 800661c:	6060      	str	r0, [r4, #4]
 800661e:	6863      	ldr	r3, [r4, #4]
 8006620:	6123      	str	r3, [r4, #16]
 8006622:	2300      	movs	r3, #0
 8006624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006628:	e7aa      	b.n	8006580 <_printf_i+0x14c>
 800662a:	6923      	ldr	r3, [r4, #16]
 800662c:	462a      	mov	r2, r5
 800662e:	4649      	mov	r1, r9
 8006630:	4640      	mov	r0, r8
 8006632:	47d0      	blx	sl
 8006634:	3001      	adds	r0, #1
 8006636:	d0ad      	beq.n	8006594 <_printf_i+0x160>
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	079b      	lsls	r3, r3, #30
 800663c:	d413      	bmi.n	8006666 <_printf_i+0x232>
 800663e:	68e0      	ldr	r0, [r4, #12]
 8006640:	9b03      	ldr	r3, [sp, #12]
 8006642:	4298      	cmp	r0, r3
 8006644:	bfb8      	it	lt
 8006646:	4618      	movlt	r0, r3
 8006648:	e7a6      	b.n	8006598 <_printf_i+0x164>
 800664a:	2301      	movs	r3, #1
 800664c:	4632      	mov	r2, r6
 800664e:	4649      	mov	r1, r9
 8006650:	4640      	mov	r0, r8
 8006652:	47d0      	blx	sl
 8006654:	3001      	adds	r0, #1
 8006656:	d09d      	beq.n	8006594 <_printf_i+0x160>
 8006658:	3501      	adds	r5, #1
 800665a:	68e3      	ldr	r3, [r4, #12]
 800665c:	9903      	ldr	r1, [sp, #12]
 800665e:	1a5b      	subs	r3, r3, r1
 8006660:	42ab      	cmp	r3, r5
 8006662:	dcf2      	bgt.n	800664a <_printf_i+0x216>
 8006664:	e7eb      	b.n	800663e <_printf_i+0x20a>
 8006666:	2500      	movs	r5, #0
 8006668:	f104 0619 	add.w	r6, r4, #25
 800666c:	e7f5      	b.n	800665a <_printf_i+0x226>
 800666e:	bf00      	nop
 8006670:	080088ba 	.word	0x080088ba
 8006674:	080088cb 	.word	0x080088cb

08006678 <std>:
 8006678:	2300      	movs	r3, #0
 800667a:	b510      	push	{r4, lr}
 800667c:	4604      	mov	r4, r0
 800667e:	e9c0 3300 	strd	r3, r3, [r0]
 8006682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006686:	6083      	str	r3, [r0, #8]
 8006688:	8181      	strh	r1, [r0, #12]
 800668a:	6643      	str	r3, [r0, #100]	; 0x64
 800668c:	81c2      	strh	r2, [r0, #14]
 800668e:	6183      	str	r3, [r0, #24]
 8006690:	4619      	mov	r1, r3
 8006692:	2208      	movs	r2, #8
 8006694:	305c      	adds	r0, #92	; 0x5c
 8006696:	f000 f90d 	bl	80068b4 <memset>
 800669a:	4b05      	ldr	r3, [pc, #20]	; (80066b0 <std+0x38>)
 800669c:	6263      	str	r3, [r4, #36]	; 0x24
 800669e:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <std+0x3c>)
 80066a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80066a2:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <std+0x40>)
 80066a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066a6:	4b05      	ldr	r3, [pc, #20]	; (80066bc <std+0x44>)
 80066a8:	6224      	str	r4, [r4, #32]
 80066aa:	6323      	str	r3, [r4, #48]	; 0x30
 80066ac:	bd10      	pop	{r4, pc}
 80066ae:	bf00      	nop
 80066b0:	08008261 	.word	0x08008261
 80066b4:	08008283 	.word	0x08008283
 80066b8:	080082bb 	.word	0x080082bb
 80066bc:	080082df 	.word	0x080082df

080066c0 <stdio_exit_handler>:
 80066c0:	4a02      	ldr	r2, [pc, #8]	; (80066cc <stdio_exit_handler+0xc>)
 80066c2:	4903      	ldr	r1, [pc, #12]	; (80066d0 <stdio_exit_handler+0x10>)
 80066c4:	4803      	ldr	r0, [pc, #12]	; (80066d4 <stdio_exit_handler+0x14>)
 80066c6:	f000 b869 	b.w	800679c <_fwalk_sglue>
 80066ca:	bf00      	nop
 80066cc:	2000000c 	.word	0x2000000c
 80066d0:	08007b01 	.word	0x08007b01
 80066d4:	20000018 	.word	0x20000018

080066d8 <cleanup_stdio>:
 80066d8:	6841      	ldr	r1, [r0, #4]
 80066da:	4b0c      	ldr	r3, [pc, #48]	; (800670c <cleanup_stdio+0x34>)
 80066dc:	4299      	cmp	r1, r3
 80066de:	b510      	push	{r4, lr}
 80066e0:	4604      	mov	r4, r0
 80066e2:	d001      	beq.n	80066e8 <cleanup_stdio+0x10>
 80066e4:	f001 fa0c 	bl	8007b00 <_fflush_r>
 80066e8:	68a1      	ldr	r1, [r4, #8]
 80066ea:	4b09      	ldr	r3, [pc, #36]	; (8006710 <cleanup_stdio+0x38>)
 80066ec:	4299      	cmp	r1, r3
 80066ee:	d002      	beq.n	80066f6 <cleanup_stdio+0x1e>
 80066f0:	4620      	mov	r0, r4
 80066f2:	f001 fa05 	bl	8007b00 <_fflush_r>
 80066f6:	68e1      	ldr	r1, [r4, #12]
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <cleanup_stdio+0x3c>)
 80066fa:	4299      	cmp	r1, r3
 80066fc:	d004      	beq.n	8006708 <cleanup_stdio+0x30>
 80066fe:	4620      	mov	r0, r4
 8006700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006704:	f001 b9fc 	b.w	8007b00 <_fflush_r>
 8006708:	bd10      	pop	{r4, pc}
 800670a:	bf00      	nop
 800670c:	20000344 	.word	0x20000344
 8006710:	200003ac 	.word	0x200003ac
 8006714:	20000414 	.word	0x20000414

08006718 <global_stdio_init.part.0>:
 8006718:	b510      	push	{r4, lr}
 800671a:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <global_stdio_init.part.0+0x30>)
 800671c:	4c0b      	ldr	r4, [pc, #44]	; (800674c <global_stdio_init.part.0+0x34>)
 800671e:	4a0c      	ldr	r2, [pc, #48]	; (8006750 <global_stdio_init.part.0+0x38>)
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	4620      	mov	r0, r4
 8006724:	2200      	movs	r2, #0
 8006726:	2104      	movs	r1, #4
 8006728:	f7ff ffa6 	bl	8006678 <std>
 800672c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006730:	2201      	movs	r2, #1
 8006732:	2109      	movs	r1, #9
 8006734:	f7ff ffa0 	bl	8006678 <std>
 8006738:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800673c:	2202      	movs	r2, #2
 800673e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006742:	2112      	movs	r1, #18
 8006744:	f7ff bf98 	b.w	8006678 <std>
 8006748:	2000047c 	.word	0x2000047c
 800674c:	20000344 	.word	0x20000344
 8006750:	080066c1 	.word	0x080066c1

08006754 <__sfp_lock_acquire>:
 8006754:	4801      	ldr	r0, [pc, #4]	; (800675c <__sfp_lock_acquire+0x8>)
 8006756:	f000 b8e3 	b.w	8006920 <__retarget_lock_acquire_recursive>
 800675a:	bf00      	nop
 800675c:	20000481 	.word	0x20000481

08006760 <__sfp_lock_release>:
 8006760:	4801      	ldr	r0, [pc, #4]	; (8006768 <__sfp_lock_release+0x8>)
 8006762:	f000 b8de 	b.w	8006922 <__retarget_lock_release_recursive>
 8006766:	bf00      	nop
 8006768:	20000481 	.word	0x20000481

0800676c <__sinit>:
 800676c:	b510      	push	{r4, lr}
 800676e:	4604      	mov	r4, r0
 8006770:	f7ff fff0 	bl	8006754 <__sfp_lock_acquire>
 8006774:	6a23      	ldr	r3, [r4, #32]
 8006776:	b11b      	cbz	r3, 8006780 <__sinit+0x14>
 8006778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800677c:	f7ff bff0 	b.w	8006760 <__sfp_lock_release>
 8006780:	4b04      	ldr	r3, [pc, #16]	; (8006794 <__sinit+0x28>)
 8006782:	6223      	str	r3, [r4, #32]
 8006784:	4b04      	ldr	r3, [pc, #16]	; (8006798 <__sinit+0x2c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1f5      	bne.n	8006778 <__sinit+0xc>
 800678c:	f7ff ffc4 	bl	8006718 <global_stdio_init.part.0>
 8006790:	e7f2      	b.n	8006778 <__sinit+0xc>
 8006792:	bf00      	nop
 8006794:	080066d9 	.word	0x080066d9
 8006798:	2000047c 	.word	0x2000047c

0800679c <_fwalk_sglue>:
 800679c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a0:	4607      	mov	r7, r0
 80067a2:	4688      	mov	r8, r1
 80067a4:	4614      	mov	r4, r2
 80067a6:	2600      	movs	r6, #0
 80067a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067ac:	f1b9 0901 	subs.w	r9, r9, #1
 80067b0:	d505      	bpl.n	80067be <_fwalk_sglue+0x22>
 80067b2:	6824      	ldr	r4, [r4, #0]
 80067b4:	2c00      	cmp	r4, #0
 80067b6:	d1f7      	bne.n	80067a8 <_fwalk_sglue+0xc>
 80067b8:	4630      	mov	r0, r6
 80067ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067be:	89ab      	ldrh	r3, [r5, #12]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d907      	bls.n	80067d4 <_fwalk_sglue+0x38>
 80067c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067c8:	3301      	adds	r3, #1
 80067ca:	d003      	beq.n	80067d4 <_fwalk_sglue+0x38>
 80067cc:	4629      	mov	r1, r5
 80067ce:	4638      	mov	r0, r7
 80067d0:	47c0      	blx	r8
 80067d2:	4306      	orrs	r6, r0
 80067d4:	3568      	adds	r5, #104	; 0x68
 80067d6:	e7e9      	b.n	80067ac <_fwalk_sglue+0x10>

080067d8 <iprintf>:
 80067d8:	b40f      	push	{r0, r1, r2, r3}
 80067da:	b507      	push	{r0, r1, r2, lr}
 80067dc:	4906      	ldr	r1, [pc, #24]	; (80067f8 <iprintf+0x20>)
 80067de:	ab04      	add	r3, sp, #16
 80067e0:	6808      	ldr	r0, [r1, #0]
 80067e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e6:	6881      	ldr	r1, [r0, #8]
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	f000 ff41 	bl	8007670 <_vfiprintf_r>
 80067ee:	b003      	add	sp, #12
 80067f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067f4:	b004      	add	sp, #16
 80067f6:	4770      	bx	lr
 80067f8:	20000064 	.word	0x20000064

080067fc <_puts_r>:
 80067fc:	6a03      	ldr	r3, [r0, #32]
 80067fe:	b570      	push	{r4, r5, r6, lr}
 8006800:	6884      	ldr	r4, [r0, #8]
 8006802:	4605      	mov	r5, r0
 8006804:	460e      	mov	r6, r1
 8006806:	b90b      	cbnz	r3, 800680c <_puts_r+0x10>
 8006808:	f7ff ffb0 	bl	800676c <__sinit>
 800680c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800680e:	07db      	lsls	r3, r3, #31
 8006810:	d405      	bmi.n	800681e <_puts_r+0x22>
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	0598      	lsls	r0, r3, #22
 8006816:	d402      	bmi.n	800681e <_puts_r+0x22>
 8006818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800681a:	f000 f881 	bl	8006920 <__retarget_lock_acquire_recursive>
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	0719      	lsls	r1, r3, #28
 8006822:	d513      	bpl.n	800684c <_puts_r+0x50>
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	b18b      	cbz	r3, 800684c <_puts_r+0x50>
 8006828:	3e01      	subs	r6, #1
 800682a:	68a3      	ldr	r3, [r4, #8]
 800682c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006830:	3b01      	subs	r3, #1
 8006832:	60a3      	str	r3, [r4, #8]
 8006834:	b9e9      	cbnz	r1, 8006872 <_puts_r+0x76>
 8006836:	2b00      	cmp	r3, #0
 8006838:	da2e      	bge.n	8006898 <_puts_r+0x9c>
 800683a:	4622      	mov	r2, r4
 800683c:	210a      	movs	r1, #10
 800683e:	4628      	mov	r0, r5
 8006840:	f001 fd51 	bl	80082e6 <__swbuf_r>
 8006844:	3001      	adds	r0, #1
 8006846:	d007      	beq.n	8006858 <_puts_r+0x5c>
 8006848:	250a      	movs	r5, #10
 800684a:	e007      	b.n	800685c <_puts_r+0x60>
 800684c:	4621      	mov	r1, r4
 800684e:	4628      	mov	r0, r5
 8006850:	f001 fd86 	bl	8008360 <__swsetup_r>
 8006854:	2800      	cmp	r0, #0
 8006856:	d0e7      	beq.n	8006828 <_puts_r+0x2c>
 8006858:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800685c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800685e:	07da      	lsls	r2, r3, #31
 8006860:	d405      	bmi.n	800686e <_puts_r+0x72>
 8006862:	89a3      	ldrh	r3, [r4, #12]
 8006864:	059b      	lsls	r3, r3, #22
 8006866:	d402      	bmi.n	800686e <_puts_r+0x72>
 8006868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800686a:	f000 f85a 	bl	8006922 <__retarget_lock_release_recursive>
 800686e:	4628      	mov	r0, r5
 8006870:	bd70      	pop	{r4, r5, r6, pc}
 8006872:	2b00      	cmp	r3, #0
 8006874:	da04      	bge.n	8006880 <_puts_r+0x84>
 8006876:	69a2      	ldr	r2, [r4, #24]
 8006878:	429a      	cmp	r2, r3
 800687a:	dc06      	bgt.n	800688a <_puts_r+0x8e>
 800687c:	290a      	cmp	r1, #10
 800687e:	d004      	beq.n	800688a <_puts_r+0x8e>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	6022      	str	r2, [r4, #0]
 8006886:	7019      	strb	r1, [r3, #0]
 8006888:	e7cf      	b.n	800682a <_puts_r+0x2e>
 800688a:	4622      	mov	r2, r4
 800688c:	4628      	mov	r0, r5
 800688e:	f001 fd2a 	bl	80082e6 <__swbuf_r>
 8006892:	3001      	adds	r0, #1
 8006894:	d1c9      	bne.n	800682a <_puts_r+0x2e>
 8006896:	e7df      	b.n	8006858 <_puts_r+0x5c>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	250a      	movs	r5, #10
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	6022      	str	r2, [r4, #0]
 80068a0:	701d      	strb	r5, [r3, #0]
 80068a2:	e7db      	b.n	800685c <_puts_r+0x60>

080068a4 <puts>:
 80068a4:	4b02      	ldr	r3, [pc, #8]	; (80068b0 <puts+0xc>)
 80068a6:	4601      	mov	r1, r0
 80068a8:	6818      	ldr	r0, [r3, #0]
 80068aa:	f7ff bfa7 	b.w	80067fc <_puts_r>
 80068ae:	bf00      	nop
 80068b0:	20000064 	.word	0x20000064

080068b4 <memset>:
 80068b4:	4402      	add	r2, r0
 80068b6:	4603      	mov	r3, r0
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d100      	bne.n	80068be <memset+0xa>
 80068bc:	4770      	bx	lr
 80068be:	f803 1b01 	strb.w	r1, [r3], #1
 80068c2:	e7f9      	b.n	80068b8 <memset+0x4>

080068c4 <_localeconv_r>:
 80068c4:	4800      	ldr	r0, [pc, #0]	; (80068c8 <_localeconv_r+0x4>)
 80068c6:	4770      	bx	lr
 80068c8:	20000158 	.word	0x20000158

080068cc <__errno>:
 80068cc:	4b01      	ldr	r3, [pc, #4]	; (80068d4 <__errno+0x8>)
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20000064 	.word	0x20000064

080068d8 <__libc_init_array>:
 80068d8:	b570      	push	{r4, r5, r6, lr}
 80068da:	4d0d      	ldr	r5, [pc, #52]	; (8006910 <__libc_init_array+0x38>)
 80068dc:	4c0d      	ldr	r4, [pc, #52]	; (8006914 <__libc_init_array+0x3c>)
 80068de:	1b64      	subs	r4, r4, r5
 80068e0:	10a4      	asrs	r4, r4, #2
 80068e2:	2600      	movs	r6, #0
 80068e4:	42a6      	cmp	r6, r4
 80068e6:	d109      	bne.n	80068fc <__libc_init_array+0x24>
 80068e8:	4d0b      	ldr	r5, [pc, #44]	; (8006918 <__libc_init_array+0x40>)
 80068ea:	4c0c      	ldr	r4, [pc, #48]	; (800691c <__libc_init_array+0x44>)
 80068ec:	f001 ff74 	bl	80087d8 <_init>
 80068f0:	1b64      	subs	r4, r4, r5
 80068f2:	10a4      	asrs	r4, r4, #2
 80068f4:	2600      	movs	r6, #0
 80068f6:	42a6      	cmp	r6, r4
 80068f8:	d105      	bne.n	8006906 <__libc_init_array+0x2e>
 80068fa:	bd70      	pop	{r4, r5, r6, pc}
 80068fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006900:	4798      	blx	r3
 8006902:	3601      	adds	r6, #1
 8006904:	e7ee      	b.n	80068e4 <__libc_init_array+0xc>
 8006906:	f855 3b04 	ldr.w	r3, [r5], #4
 800690a:	4798      	blx	r3
 800690c:	3601      	adds	r6, #1
 800690e:	e7f2      	b.n	80068f6 <__libc_init_array+0x1e>
 8006910:	08008c24 	.word	0x08008c24
 8006914:	08008c24 	.word	0x08008c24
 8006918:	08008c24 	.word	0x08008c24
 800691c:	08008c28 	.word	0x08008c28

08006920 <__retarget_lock_acquire_recursive>:
 8006920:	4770      	bx	lr

08006922 <__retarget_lock_release_recursive>:
 8006922:	4770      	bx	lr

08006924 <quorem>:
 8006924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006928:	6903      	ldr	r3, [r0, #16]
 800692a:	690c      	ldr	r4, [r1, #16]
 800692c:	42a3      	cmp	r3, r4
 800692e:	4607      	mov	r7, r0
 8006930:	db7e      	blt.n	8006a30 <quorem+0x10c>
 8006932:	3c01      	subs	r4, #1
 8006934:	f101 0814 	add.w	r8, r1, #20
 8006938:	f100 0514 	add.w	r5, r0, #20
 800693c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006946:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800694a:	3301      	adds	r3, #1
 800694c:	429a      	cmp	r2, r3
 800694e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006952:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006956:	fbb2 f6f3 	udiv	r6, r2, r3
 800695a:	d331      	bcc.n	80069c0 <quorem+0x9c>
 800695c:	f04f 0e00 	mov.w	lr, #0
 8006960:	4640      	mov	r0, r8
 8006962:	46ac      	mov	ip, r5
 8006964:	46f2      	mov	sl, lr
 8006966:	f850 2b04 	ldr.w	r2, [r0], #4
 800696a:	b293      	uxth	r3, r2
 800696c:	fb06 e303 	mla	r3, r6, r3, lr
 8006970:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006974:	0c1a      	lsrs	r2, r3, #16
 8006976:	b29b      	uxth	r3, r3
 8006978:	ebaa 0303 	sub.w	r3, sl, r3
 800697c:	f8dc a000 	ldr.w	sl, [ip]
 8006980:	fa13 f38a 	uxtah	r3, r3, sl
 8006984:	fb06 220e 	mla	r2, r6, lr, r2
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	9b00      	ldr	r3, [sp, #0]
 800698c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006990:	b292      	uxth	r2, r2
 8006992:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006996:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800699a:	f8bd 3000 	ldrh.w	r3, [sp]
 800699e:	4581      	cmp	r9, r0
 80069a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069a4:	f84c 3b04 	str.w	r3, [ip], #4
 80069a8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80069ac:	d2db      	bcs.n	8006966 <quorem+0x42>
 80069ae:	f855 300b 	ldr.w	r3, [r5, fp]
 80069b2:	b92b      	cbnz	r3, 80069c0 <quorem+0x9c>
 80069b4:	9b01      	ldr	r3, [sp, #4]
 80069b6:	3b04      	subs	r3, #4
 80069b8:	429d      	cmp	r5, r3
 80069ba:	461a      	mov	r2, r3
 80069bc:	d32c      	bcc.n	8006a18 <quorem+0xf4>
 80069be:	613c      	str	r4, [r7, #16]
 80069c0:	4638      	mov	r0, r7
 80069c2:	f001 fb4d 	bl	8008060 <__mcmp>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	db22      	blt.n	8006a10 <quorem+0xec>
 80069ca:	3601      	adds	r6, #1
 80069cc:	4629      	mov	r1, r5
 80069ce:	2000      	movs	r0, #0
 80069d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80069d4:	f8d1 c000 	ldr.w	ip, [r1]
 80069d8:	b293      	uxth	r3, r2
 80069da:	1ac3      	subs	r3, r0, r3
 80069dc:	0c12      	lsrs	r2, r2, #16
 80069de:	fa13 f38c 	uxtah	r3, r3, ip
 80069e2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80069e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069f0:	45c1      	cmp	r9, r8
 80069f2:	f841 3b04 	str.w	r3, [r1], #4
 80069f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069fa:	d2e9      	bcs.n	80069d0 <quorem+0xac>
 80069fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a04:	b922      	cbnz	r2, 8006a10 <quorem+0xec>
 8006a06:	3b04      	subs	r3, #4
 8006a08:	429d      	cmp	r5, r3
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	d30a      	bcc.n	8006a24 <quorem+0x100>
 8006a0e:	613c      	str	r4, [r7, #16]
 8006a10:	4630      	mov	r0, r6
 8006a12:	b003      	add	sp, #12
 8006a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	3b04      	subs	r3, #4
 8006a1c:	2a00      	cmp	r2, #0
 8006a1e:	d1ce      	bne.n	80069be <quorem+0x9a>
 8006a20:	3c01      	subs	r4, #1
 8006a22:	e7c9      	b.n	80069b8 <quorem+0x94>
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	3b04      	subs	r3, #4
 8006a28:	2a00      	cmp	r2, #0
 8006a2a:	d1f0      	bne.n	8006a0e <quorem+0xea>
 8006a2c:	3c01      	subs	r4, #1
 8006a2e:	e7eb      	b.n	8006a08 <quorem+0xe4>
 8006a30:	2000      	movs	r0, #0
 8006a32:	e7ee      	b.n	8006a12 <quorem+0xee>
 8006a34:	0000      	movs	r0, r0
	...

08006a38 <_dtoa_r>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	ed2d 8b04 	vpush	{d8-d9}
 8006a40:	69c5      	ldr	r5, [r0, #28]
 8006a42:	b093      	sub	sp, #76	; 0x4c
 8006a44:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a48:	ec57 6b10 	vmov	r6, r7, d0
 8006a4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a50:	9107      	str	r1, [sp, #28]
 8006a52:	4604      	mov	r4, r0
 8006a54:	920a      	str	r2, [sp, #40]	; 0x28
 8006a56:	930d      	str	r3, [sp, #52]	; 0x34
 8006a58:	b975      	cbnz	r5, 8006a78 <_dtoa_r+0x40>
 8006a5a:	2010      	movs	r0, #16
 8006a5c:	f000 ff22 	bl	80078a4 <malloc>
 8006a60:	4602      	mov	r2, r0
 8006a62:	61e0      	str	r0, [r4, #28]
 8006a64:	b920      	cbnz	r0, 8006a70 <_dtoa_r+0x38>
 8006a66:	4bae      	ldr	r3, [pc, #696]	; (8006d20 <_dtoa_r+0x2e8>)
 8006a68:	21ef      	movs	r1, #239	; 0xef
 8006a6a:	48ae      	ldr	r0, [pc, #696]	; (8006d24 <_dtoa_r+0x2ec>)
 8006a6c:	f001 fdb8 	bl	80085e0 <__assert_func>
 8006a70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a74:	6005      	str	r5, [r0, #0]
 8006a76:	60c5      	str	r5, [r0, #12]
 8006a78:	69e3      	ldr	r3, [r4, #28]
 8006a7a:	6819      	ldr	r1, [r3, #0]
 8006a7c:	b151      	cbz	r1, 8006a94 <_dtoa_r+0x5c>
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	604a      	str	r2, [r1, #4]
 8006a82:	2301      	movs	r3, #1
 8006a84:	4093      	lsls	r3, r2
 8006a86:	608b      	str	r3, [r1, #8]
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f001 f8ad 	bl	8007be8 <_Bfree>
 8006a8e:	69e3      	ldr	r3, [r4, #28]
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	1e3b      	subs	r3, r7, #0
 8006a96:	bfbb      	ittet	lt
 8006a98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a9c:	9303      	strlt	r3, [sp, #12]
 8006a9e:	2300      	movge	r3, #0
 8006aa0:	2201      	movlt	r2, #1
 8006aa2:	bfac      	ite	ge
 8006aa4:	f8c8 3000 	strge.w	r3, [r8]
 8006aa8:	f8c8 2000 	strlt.w	r2, [r8]
 8006aac:	4b9e      	ldr	r3, [pc, #632]	; (8006d28 <_dtoa_r+0x2f0>)
 8006aae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006ab2:	ea33 0308 	bics.w	r3, r3, r8
 8006ab6:	d11b      	bne.n	8006af0 <_dtoa_r+0xb8>
 8006ab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006aba:	f242 730f 	movw	r3, #9999	; 0x270f
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006ac4:	4333      	orrs	r3, r6
 8006ac6:	f000 8593 	beq.w	80075f0 <_dtoa_r+0xbb8>
 8006aca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006acc:	b963      	cbnz	r3, 8006ae8 <_dtoa_r+0xb0>
 8006ace:	4b97      	ldr	r3, [pc, #604]	; (8006d2c <_dtoa_r+0x2f4>)
 8006ad0:	e027      	b.n	8006b22 <_dtoa_r+0xea>
 8006ad2:	4b97      	ldr	r3, [pc, #604]	; (8006d30 <_dtoa_r+0x2f8>)
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	9800      	ldr	r0, [sp, #0]
 8006ade:	b013      	add	sp, #76	; 0x4c
 8006ae0:	ecbd 8b04 	vpop	{d8-d9}
 8006ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae8:	4b90      	ldr	r3, [pc, #576]	; (8006d2c <_dtoa_r+0x2f4>)
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	3303      	adds	r3, #3
 8006aee:	e7f3      	b.n	8006ad8 <_dtoa_r+0xa0>
 8006af0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006af4:	2200      	movs	r2, #0
 8006af6:	ec51 0b17 	vmov	r0, r1, d7
 8006afa:	eeb0 8a47 	vmov.f32	s16, s14
 8006afe:	eef0 8a67 	vmov.f32	s17, s15
 8006b02:	2300      	movs	r3, #0
 8006b04:	f7f9 fff8 	bl	8000af8 <__aeabi_dcmpeq>
 8006b08:	4681      	mov	r9, r0
 8006b0a:	b160      	cbz	r0, 8006b26 <_dtoa_r+0xee>
 8006b0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b0e:	2301      	movs	r3, #1
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 8568 	beq.w	80075ea <_dtoa_r+0xbb2>
 8006b1a:	4b86      	ldr	r3, [pc, #536]	; (8006d34 <_dtoa_r+0x2fc>)
 8006b1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	e7da      	b.n	8006adc <_dtoa_r+0xa4>
 8006b26:	aa10      	add	r2, sp, #64	; 0x40
 8006b28:	a911      	add	r1, sp, #68	; 0x44
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	eeb0 0a48 	vmov.f32	s0, s16
 8006b30:	eef0 0a68 	vmov.f32	s1, s17
 8006b34:	f001 fb3a 	bl	80081ac <__d2b>
 8006b38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b3c:	4682      	mov	sl, r0
 8006b3e:	2d00      	cmp	r5, #0
 8006b40:	d07f      	beq.n	8006c42 <_dtoa_r+0x20a>
 8006b42:	ee18 3a90 	vmov	r3, s17
 8006b46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b4a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006b4e:	ec51 0b18 	vmov	r0, r1, d8
 8006b52:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b5a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006b5e:	4619      	mov	r1, r3
 8006b60:	2200      	movs	r2, #0
 8006b62:	4b75      	ldr	r3, [pc, #468]	; (8006d38 <_dtoa_r+0x300>)
 8006b64:	f7f9 fba8 	bl	80002b8 <__aeabi_dsub>
 8006b68:	a367      	add	r3, pc, #412	; (adr r3, 8006d08 <_dtoa_r+0x2d0>)
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	f7f9 fd5b 	bl	8000628 <__aeabi_dmul>
 8006b72:	a367      	add	r3, pc, #412	; (adr r3, 8006d10 <_dtoa_r+0x2d8>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f7f9 fba0 	bl	80002bc <__adddf3>
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	4628      	mov	r0, r5
 8006b80:	460f      	mov	r7, r1
 8006b82:	f7f9 fce7 	bl	8000554 <__aeabi_i2d>
 8006b86:	a364      	add	r3, pc, #400	; (adr r3, 8006d18 <_dtoa_r+0x2e0>)
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	f7f9 fd4c 	bl	8000628 <__aeabi_dmul>
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	4630      	mov	r0, r6
 8006b96:	4639      	mov	r1, r7
 8006b98:	f7f9 fb90 	bl	80002bc <__adddf3>
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	460f      	mov	r7, r1
 8006ba0:	f7f9 fff2 	bl	8000b88 <__aeabi_d2iz>
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	4683      	mov	fp, r0
 8006ba8:	2300      	movs	r3, #0
 8006baa:	4630      	mov	r0, r6
 8006bac:	4639      	mov	r1, r7
 8006bae:	f7f9 ffad 	bl	8000b0c <__aeabi_dcmplt>
 8006bb2:	b148      	cbz	r0, 8006bc8 <_dtoa_r+0x190>
 8006bb4:	4658      	mov	r0, fp
 8006bb6:	f7f9 fccd 	bl	8000554 <__aeabi_i2d>
 8006bba:	4632      	mov	r2, r6
 8006bbc:	463b      	mov	r3, r7
 8006bbe:	f7f9 ff9b 	bl	8000af8 <__aeabi_dcmpeq>
 8006bc2:	b908      	cbnz	r0, 8006bc8 <_dtoa_r+0x190>
 8006bc4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006bc8:	f1bb 0f16 	cmp.w	fp, #22
 8006bcc:	d857      	bhi.n	8006c7e <_dtoa_r+0x246>
 8006bce:	4b5b      	ldr	r3, [pc, #364]	; (8006d3c <_dtoa_r+0x304>)
 8006bd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd8:	ec51 0b18 	vmov	r0, r1, d8
 8006bdc:	f7f9 ff96 	bl	8000b0c <__aeabi_dcmplt>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d04e      	beq.n	8006c82 <_dtoa_r+0x24a>
 8006be4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006be8:	2300      	movs	r3, #0
 8006bea:	930c      	str	r3, [sp, #48]	; 0x30
 8006bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bee:	1b5b      	subs	r3, r3, r5
 8006bf0:	1e5a      	subs	r2, r3, #1
 8006bf2:	bf45      	ittet	mi
 8006bf4:	f1c3 0301 	rsbmi	r3, r3, #1
 8006bf8:	9305      	strmi	r3, [sp, #20]
 8006bfa:	2300      	movpl	r3, #0
 8006bfc:	2300      	movmi	r3, #0
 8006bfe:	9206      	str	r2, [sp, #24]
 8006c00:	bf54      	ite	pl
 8006c02:	9305      	strpl	r3, [sp, #20]
 8006c04:	9306      	strmi	r3, [sp, #24]
 8006c06:	f1bb 0f00 	cmp.w	fp, #0
 8006c0a:	db3c      	blt.n	8006c86 <_dtoa_r+0x24e>
 8006c0c:	9b06      	ldr	r3, [sp, #24]
 8006c0e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006c12:	445b      	add	r3, fp
 8006c14:	9306      	str	r3, [sp, #24]
 8006c16:	2300      	movs	r3, #0
 8006c18:	9308      	str	r3, [sp, #32]
 8006c1a:	9b07      	ldr	r3, [sp, #28]
 8006c1c:	2b09      	cmp	r3, #9
 8006c1e:	d868      	bhi.n	8006cf2 <_dtoa_r+0x2ba>
 8006c20:	2b05      	cmp	r3, #5
 8006c22:	bfc4      	itt	gt
 8006c24:	3b04      	subgt	r3, #4
 8006c26:	9307      	strgt	r3, [sp, #28]
 8006c28:	9b07      	ldr	r3, [sp, #28]
 8006c2a:	f1a3 0302 	sub.w	r3, r3, #2
 8006c2e:	bfcc      	ite	gt
 8006c30:	2500      	movgt	r5, #0
 8006c32:	2501      	movle	r5, #1
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	f200 8085 	bhi.w	8006d44 <_dtoa_r+0x30c>
 8006c3a:	e8df f003 	tbb	[pc, r3]
 8006c3e:	3b2e      	.short	0x3b2e
 8006c40:	5839      	.short	0x5839
 8006c42:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c46:	441d      	add	r5, r3
 8006c48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	bfc1      	itttt	gt
 8006c50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c54:	fa08 f803 	lslgt.w	r8, r8, r3
 8006c58:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006c5c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006c60:	bfd6      	itet	le
 8006c62:	f1c3 0320 	rsble	r3, r3, #32
 8006c66:	ea48 0003 	orrgt.w	r0, r8, r3
 8006c6a:	fa06 f003 	lslle.w	r0, r6, r3
 8006c6e:	f7f9 fc61 	bl	8000534 <__aeabi_ui2d>
 8006c72:	2201      	movs	r2, #1
 8006c74:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006c78:	3d01      	subs	r5, #1
 8006c7a:	920e      	str	r2, [sp, #56]	; 0x38
 8006c7c:	e76f      	b.n	8006b5e <_dtoa_r+0x126>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e7b3      	b.n	8006bea <_dtoa_r+0x1b2>
 8006c82:	900c      	str	r0, [sp, #48]	; 0x30
 8006c84:	e7b2      	b.n	8006bec <_dtoa_r+0x1b4>
 8006c86:	9b05      	ldr	r3, [sp, #20]
 8006c88:	eba3 030b 	sub.w	r3, r3, fp
 8006c8c:	9305      	str	r3, [sp, #20]
 8006c8e:	f1cb 0300 	rsb	r3, fp, #0
 8006c92:	9308      	str	r3, [sp, #32]
 8006c94:	2300      	movs	r3, #0
 8006c96:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c98:	e7bf      	b.n	8006c1a <_dtoa_r+0x1e2>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	dc52      	bgt.n	8006d4a <_dtoa_r+0x312>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	461a      	mov	r2, r3
 8006cac:	920a      	str	r2, [sp, #40]	; 0x28
 8006cae:	e00b      	b.n	8006cc8 <_dtoa_r+0x290>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e7f3      	b.n	8006c9c <_dtoa_r+0x264>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cba:	445b      	add	r3, fp
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	9304      	str	r3, [sp, #16]
 8006cc4:	bfb8      	it	lt
 8006cc6:	2301      	movlt	r3, #1
 8006cc8:	69e0      	ldr	r0, [r4, #28]
 8006cca:	2100      	movs	r1, #0
 8006ccc:	2204      	movs	r2, #4
 8006cce:	f102 0614 	add.w	r6, r2, #20
 8006cd2:	429e      	cmp	r6, r3
 8006cd4:	d93d      	bls.n	8006d52 <_dtoa_r+0x31a>
 8006cd6:	6041      	str	r1, [r0, #4]
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 ff45 	bl	8007b68 <_Balloc>
 8006cde:	9000      	str	r0, [sp, #0]
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d139      	bne.n	8006d58 <_dtoa_r+0x320>
 8006ce4:	4b16      	ldr	r3, [pc, #88]	; (8006d40 <_dtoa_r+0x308>)
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	f240 11af 	movw	r1, #431	; 0x1af
 8006cec:	e6bd      	b.n	8006a6a <_dtoa_r+0x32>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e7e1      	b.n	8006cb6 <_dtoa_r+0x27e>
 8006cf2:	2501      	movs	r5, #1
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9307      	str	r3, [sp, #28]
 8006cf8:	9509      	str	r5, [sp, #36]	; 0x24
 8006cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cfe:	9301      	str	r3, [sp, #4]
 8006d00:	9304      	str	r3, [sp, #16]
 8006d02:	2200      	movs	r2, #0
 8006d04:	2312      	movs	r3, #18
 8006d06:	e7d1      	b.n	8006cac <_dtoa_r+0x274>
 8006d08:	636f4361 	.word	0x636f4361
 8006d0c:	3fd287a7 	.word	0x3fd287a7
 8006d10:	8b60c8b3 	.word	0x8b60c8b3
 8006d14:	3fc68a28 	.word	0x3fc68a28
 8006d18:	509f79fb 	.word	0x509f79fb
 8006d1c:	3fd34413 	.word	0x3fd34413
 8006d20:	080088e9 	.word	0x080088e9
 8006d24:	08008900 	.word	0x08008900
 8006d28:	7ff00000 	.word	0x7ff00000
 8006d2c:	080088e5 	.word	0x080088e5
 8006d30:	080088dc 	.word	0x080088dc
 8006d34:	080088b9 	.word	0x080088b9
 8006d38:	3ff80000 	.word	0x3ff80000
 8006d3c:	08008a00 	.word	0x08008a00
 8006d40:	08008958 	.word	0x08008958
 8006d44:	2301      	movs	r3, #1
 8006d46:	9309      	str	r3, [sp, #36]	; 0x24
 8006d48:	e7d7      	b.n	8006cfa <_dtoa_r+0x2c2>
 8006d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	e7ba      	b.n	8006cc8 <_dtoa_r+0x290>
 8006d52:	3101      	adds	r1, #1
 8006d54:	0052      	lsls	r2, r2, #1
 8006d56:	e7ba      	b.n	8006cce <_dtoa_r+0x296>
 8006d58:	69e3      	ldr	r3, [r4, #28]
 8006d5a:	9a00      	ldr	r2, [sp, #0]
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	9b04      	ldr	r3, [sp, #16]
 8006d60:	2b0e      	cmp	r3, #14
 8006d62:	f200 80a8 	bhi.w	8006eb6 <_dtoa_r+0x47e>
 8006d66:	2d00      	cmp	r5, #0
 8006d68:	f000 80a5 	beq.w	8006eb6 <_dtoa_r+0x47e>
 8006d6c:	f1bb 0f00 	cmp.w	fp, #0
 8006d70:	dd38      	ble.n	8006de4 <_dtoa_r+0x3ac>
 8006d72:	4bc0      	ldr	r3, [pc, #768]	; (8007074 <_dtoa_r+0x63c>)
 8006d74:	f00b 020f 	and.w	r2, fp, #15
 8006d78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d80:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006d84:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006d88:	d019      	beq.n	8006dbe <_dtoa_r+0x386>
 8006d8a:	4bbb      	ldr	r3, [pc, #748]	; (8007078 <_dtoa_r+0x640>)
 8006d8c:	ec51 0b18 	vmov	r0, r1, d8
 8006d90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d94:	f7f9 fd72 	bl	800087c <__aeabi_ddiv>
 8006d98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d9c:	f008 080f 	and.w	r8, r8, #15
 8006da0:	2503      	movs	r5, #3
 8006da2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007078 <_dtoa_r+0x640>
 8006da6:	f1b8 0f00 	cmp.w	r8, #0
 8006daa:	d10a      	bne.n	8006dc2 <_dtoa_r+0x38a>
 8006dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006db0:	4632      	mov	r2, r6
 8006db2:	463b      	mov	r3, r7
 8006db4:	f7f9 fd62 	bl	800087c <__aeabi_ddiv>
 8006db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dbc:	e02b      	b.n	8006e16 <_dtoa_r+0x3de>
 8006dbe:	2502      	movs	r5, #2
 8006dc0:	e7ef      	b.n	8006da2 <_dtoa_r+0x36a>
 8006dc2:	f018 0f01 	tst.w	r8, #1
 8006dc6:	d008      	beq.n	8006dda <_dtoa_r+0x3a2>
 8006dc8:	4630      	mov	r0, r6
 8006dca:	4639      	mov	r1, r7
 8006dcc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006dd0:	f7f9 fc2a 	bl	8000628 <__aeabi_dmul>
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	460f      	mov	r7, r1
 8006dda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006dde:	f109 0908 	add.w	r9, r9, #8
 8006de2:	e7e0      	b.n	8006da6 <_dtoa_r+0x36e>
 8006de4:	f000 809f 	beq.w	8006f26 <_dtoa_r+0x4ee>
 8006de8:	f1cb 0600 	rsb	r6, fp, #0
 8006dec:	4ba1      	ldr	r3, [pc, #644]	; (8007074 <_dtoa_r+0x63c>)
 8006dee:	4fa2      	ldr	r7, [pc, #648]	; (8007078 <_dtoa_r+0x640>)
 8006df0:	f006 020f 	and.w	r2, r6, #15
 8006df4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	ec51 0b18 	vmov	r0, r1, d8
 8006e00:	f7f9 fc12 	bl	8000628 <__aeabi_dmul>
 8006e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e08:	1136      	asrs	r6, r6, #4
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	2502      	movs	r5, #2
 8006e0e:	2e00      	cmp	r6, #0
 8006e10:	d17e      	bne.n	8006f10 <_dtoa_r+0x4d8>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1d0      	bne.n	8006db8 <_dtoa_r+0x380>
 8006e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 8084 	beq.w	8006f2a <_dtoa_r+0x4f2>
 8006e22:	4b96      	ldr	r3, [pc, #600]	; (800707c <_dtoa_r+0x644>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	4640      	mov	r0, r8
 8006e28:	4649      	mov	r1, r9
 8006e2a:	f7f9 fe6f 	bl	8000b0c <__aeabi_dcmplt>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d07b      	beq.n	8006f2a <_dtoa_r+0x4f2>
 8006e32:	9b04      	ldr	r3, [sp, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d078      	beq.n	8006f2a <_dtoa_r+0x4f2>
 8006e38:	9b01      	ldr	r3, [sp, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	dd39      	ble.n	8006eb2 <_dtoa_r+0x47a>
 8006e3e:	4b90      	ldr	r3, [pc, #576]	; (8007080 <_dtoa_r+0x648>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	4640      	mov	r0, r8
 8006e44:	4649      	mov	r1, r9
 8006e46:	f7f9 fbef 	bl	8000628 <__aeabi_dmul>
 8006e4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e4e:	9e01      	ldr	r6, [sp, #4]
 8006e50:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006e54:	3501      	adds	r5, #1
 8006e56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f7f9 fb7a 	bl	8000554 <__aeabi_i2d>
 8006e60:	4642      	mov	r2, r8
 8006e62:	464b      	mov	r3, r9
 8006e64:	f7f9 fbe0 	bl	8000628 <__aeabi_dmul>
 8006e68:	4b86      	ldr	r3, [pc, #536]	; (8007084 <_dtoa_r+0x64c>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f7f9 fa26 	bl	80002bc <__adddf3>
 8006e70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e78:	9303      	str	r3, [sp, #12]
 8006e7a:	2e00      	cmp	r6, #0
 8006e7c:	d158      	bne.n	8006f30 <_dtoa_r+0x4f8>
 8006e7e:	4b82      	ldr	r3, [pc, #520]	; (8007088 <_dtoa_r+0x650>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	4640      	mov	r0, r8
 8006e84:	4649      	mov	r1, r9
 8006e86:	f7f9 fa17 	bl	80002b8 <__aeabi_dsub>
 8006e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e8e:	4680      	mov	r8, r0
 8006e90:	4689      	mov	r9, r1
 8006e92:	f7f9 fe59 	bl	8000b48 <__aeabi_dcmpgt>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f040 8296 	bne.w	80073c8 <_dtoa_r+0x990>
 8006e9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006ea0:	4640      	mov	r0, r8
 8006ea2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	f7f9 fe30 	bl	8000b0c <__aeabi_dcmplt>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	f040 8289 	bne.w	80073c4 <_dtoa_r+0x98c>
 8006eb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006eb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f2c0 814e 	blt.w	800715a <_dtoa_r+0x722>
 8006ebe:	f1bb 0f0e 	cmp.w	fp, #14
 8006ec2:	f300 814a 	bgt.w	800715a <_dtoa_r+0x722>
 8006ec6:	4b6b      	ldr	r3, [pc, #428]	; (8007074 <_dtoa_r+0x63c>)
 8006ec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ecc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f280 80dc 	bge.w	8007090 <_dtoa_r+0x658>
 8006ed8:	9b04      	ldr	r3, [sp, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f300 80d8 	bgt.w	8007090 <_dtoa_r+0x658>
 8006ee0:	f040 826f 	bne.w	80073c2 <_dtoa_r+0x98a>
 8006ee4:	4b68      	ldr	r3, [pc, #416]	; (8007088 <_dtoa_r+0x650>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	4640      	mov	r0, r8
 8006eea:	4649      	mov	r1, r9
 8006eec:	f7f9 fb9c 	bl	8000628 <__aeabi_dmul>
 8006ef0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ef4:	f7f9 fe1e 	bl	8000b34 <__aeabi_dcmpge>
 8006ef8:	9e04      	ldr	r6, [sp, #16]
 8006efa:	4637      	mov	r7, r6
 8006efc:	2800      	cmp	r0, #0
 8006efe:	f040 8245 	bne.w	800738c <_dtoa_r+0x954>
 8006f02:	9d00      	ldr	r5, [sp, #0]
 8006f04:	2331      	movs	r3, #49	; 0x31
 8006f06:	f805 3b01 	strb.w	r3, [r5], #1
 8006f0a:	f10b 0b01 	add.w	fp, fp, #1
 8006f0e:	e241      	b.n	8007394 <_dtoa_r+0x95c>
 8006f10:	07f2      	lsls	r2, r6, #31
 8006f12:	d505      	bpl.n	8006f20 <_dtoa_r+0x4e8>
 8006f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f18:	f7f9 fb86 	bl	8000628 <__aeabi_dmul>
 8006f1c:	3501      	adds	r5, #1
 8006f1e:	2301      	movs	r3, #1
 8006f20:	1076      	asrs	r6, r6, #1
 8006f22:	3708      	adds	r7, #8
 8006f24:	e773      	b.n	8006e0e <_dtoa_r+0x3d6>
 8006f26:	2502      	movs	r5, #2
 8006f28:	e775      	b.n	8006e16 <_dtoa_r+0x3de>
 8006f2a:	9e04      	ldr	r6, [sp, #16]
 8006f2c:	465f      	mov	r7, fp
 8006f2e:	e792      	b.n	8006e56 <_dtoa_r+0x41e>
 8006f30:	9900      	ldr	r1, [sp, #0]
 8006f32:	4b50      	ldr	r3, [pc, #320]	; (8007074 <_dtoa_r+0x63c>)
 8006f34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f38:	4431      	add	r1, r6
 8006f3a:	9102      	str	r1, [sp, #8]
 8006f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f3e:	eeb0 9a47 	vmov.f32	s18, s14
 8006f42:	eef0 9a67 	vmov.f32	s19, s15
 8006f46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f4e:	2900      	cmp	r1, #0
 8006f50:	d044      	beq.n	8006fdc <_dtoa_r+0x5a4>
 8006f52:	494e      	ldr	r1, [pc, #312]	; (800708c <_dtoa_r+0x654>)
 8006f54:	2000      	movs	r0, #0
 8006f56:	f7f9 fc91 	bl	800087c <__aeabi_ddiv>
 8006f5a:	ec53 2b19 	vmov	r2, r3, d9
 8006f5e:	f7f9 f9ab 	bl	80002b8 <__aeabi_dsub>
 8006f62:	9d00      	ldr	r5, [sp, #0]
 8006f64:	ec41 0b19 	vmov	d9, r0, r1
 8006f68:	4649      	mov	r1, r9
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	f7f9 fe0c 	bl	8000b88 <__aeabi_d2iz>
 8006f70:	4606      	mov	r6, r0
 8006f72:	f7f9 faef 	bl	8000554 <__aeabi_i2d>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	f7f9 f99b 	bl	80002b8 <__aeabi_dsub>
 8006f82:	3630      	adds	r6, #48	; 0x30
 8006f84:	f805 6b01 	strb.w	r6, [r5], #1
 8006f88:	ec53 2b19 	vmov	r2, r3, d9
 8006f8c:	4680      	mov	r8, r0
 8006f8e:	4689      	mov	r9, r1
 8006f90:	f7f9 fdbc 	bl	8000b0c <__aeabi_dcmplt>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d164      	bne.n	8007062 <_dtoa_r+0x62a>
 8006f98:	4642      	mov	r2, r8
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	4937      	ldr	r1, [pc, #220]	; (800707c <_dtoa_r+0x644>)
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	f7f9 f98a 	bl	80002b8 <__aeabi_dsub>
 8006fa4:	ec53 2b19 	vmov	r2, r3, d9
 8006fa8:	f7f9 fdb0 	bl	8000b0c <__aeabi_dcmplt>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	f040 80b6 	bne.w	800711e <_dtoa_r+0x6e6>
 8006fb2:	9b02      	ldr	r3, [sp, #8]
 8006fb4:	429d      	cmp	r5, r3
 8006fb6:	f43f af7c 	beq.w	8006eb2 <_dtoa_r+0x47a>
 8006fba:	4b31      	ldr	r3, [pc, #196]	; (8007080 <_dtoa_r+0x648>)
 8006fbc:	ec51 0b19 	vmov	r0, r1, d9
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f7f9 fb31 	bl	8000628 <__aeabi_dmul>
 8006fc6:	4b2e      	ldr	r3, [pc, #184]	; (8007080 <_dtoa_r+0x648>)
 8006fc8:	ec41 0b19 	vmov	d9, r0, r1
 8006fcc:	2200      	movs	r2, #0
 8006fce:	4640      	mov	r0, r8
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	f7f9 fb29 	bl	8000628 <__aeabi_dmul>
 8006fd6:	4680      	mov	r8, r0
 8006fd8:	4689      	mov	r9, r1
 8006fda:	e7c5      	b.n	8006f68 <_dtoa_r+0x530>
 8006fdc:	ec51 0b17 	vmov	r0, r1, d7
 8006fe0:	f7f9 fb22 	bl	8000628 <__aeabi_dmul>
 8006fe4:	9b02      	ldr	r3, [sp, #8]
 8006fe6:	9d00      	ldr	r5, [sp, #0]
 8006fe8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fea:	ec41 0b19 	vmov	d9, r0, r1
 8006fee:	4649      	mov	r1, r9
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	f7f9 fdc9 	bl	8000b88 <__aeabi_d2iz>
 8006ff6:	4606      	mov	r6, r0
 8006ff8:	f7f9 faac 	bl	8000554 <__aeabi_i2d>
 8006ffc:	3630      	adds	r6, #48	; 0x30
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4640      	mov	r0, r8
 8007004:	4649      	mov	r1, r9
 8007006:	f7f9 f957 	bl	80002b8 <__aeabi_dsub>
 800700a:	f805 6b01 	strb.w	r6, [r5], #1
 800700e:	9b02      	ldr	r3, [sp, #8]
 8007010:	429d      	cmp	r5, r3
 8007012:	4680      	mov	r8, r0
 8007014:	4689      	mov	r9, r1
 8007016:	f04f 0200 	mov.w	r2, #0
 800701a:	d124      	bne.n	8007066 <_dtoa_r+0x62e>
 800701c:	4b1b      	ldr	r3, [pc, #108]	; (800708c <_dtoa_r+0x654>)
 800701e:	ec51 0b19 	vmov	r0, r1, d9
 8007022:	f7f9 f94b 	bl	80002bc <__adddf3>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4640      	mov	r0, r8
 800702c:	4649      	mov	r1, r9
 800702e:	f7f9 fd8b 	bl	8000b48 <__aeabi_dcmpgt>
 8007032:	2800      	cmp	r0, #0
 8007034:	d173      	bne.n	800711e <_dtoa_r+0x6e6>
 8007036:	ec53 2b19 	vmov	r2, r3, d9
 800703a:	4914      	ldr	r1, [pc, #80]	; (800708c <_dtoa_r+0x654>)
 800703c:	2000      	movs	r0, #0
 800703e:	f7f9 f93b 	bl	80002b8 <__aeabi_dsub>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	4640      	mov	r0, r8
 8007048:	4649      	mov	r1, r9
 800704a:	f7f9 fd5f 	bl	8000b0c <__aeabi_dcmplt>
 800704e:	2800      	cmp	r0, #0
 8007050:	f43f af2f 	beq.w	8006eb2 <_dtoa_r+0x47a>
 8007054:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007056:	1e6b      	subs	r3, r5, #1
 8007058:	930f      	str	r3, [sp, #60]	; 0x3c
 800705a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800705e:	2b30      	cmp	r3, #48	; 0x30
 8007060:	d0f8      	beq.n	8007054 <_dtoa_r+0x61c>
 8007062:	46bb      	mov	fp, r7
 8007064:	e04a      	b.n	80070fc <_dtoa_r+0x6c4>
 8007066:	4b06      	ldr	r3, [pc, #24]	; (8007080 <_dtoa_r+0x648>)
 8007068:	f7f9 fade 	bl	8000628 <__aeabi_dmul>
 800706c:	4680      	mov	r8, r0
 800706e:	4689      	mov	r9, r1
 8007070:	e7bd      	b.n	8006fee <_dtoa_r+0x5b6>
 8007072:	bf00      	nop
 8007074:	08008a00 	.word	0x08008a00
 8007078:	080089d8 	.word	0x080089d8
 800707c:	3ff00000 	.word	0x3ff00000
 8007080:	40240000 	.word	0x40240000
 8007084:	401c0000 	.word	0x401c0000
 8007088:	40140000 	.word	0x40140000
 800708c:	3fe00000 	.word	0x3fe00000
 8007090:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007094:	9d00      	ldr	r5, [sp, #0]
 8007096:	4642      	mov	r2, r8
 8007098:	464b      	mov	r3, r9
 800709a:	4630      	mov	r0, r6
 800709c:	4639      	mov	r1, r7
 800709e:	f7f9 fbed 	bl	800087c <__aeabi_ddiv>
 80070a2:	f7f9 fd71 	bl	8000b88 <__aeabi_d2iz>
 80070a6:	9001      	str	r0, [sp, #4]
 80070a8:	f7f9 fa54 	bl	8000554 <__aeabi_i2d>
 80070ac:	4642      	mov	r2, r8
 80070ae:	464b      	mov	r3, r9
 80070b0:	f7f9 faba 	bl	8000628 <__aeabi_dmul>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4630      	mov	r0, r6
 80070ba:	4639      	mov	r1, r7
 80070bc:	f7f9 f8fc 	bl	80002b8 <__aeabi_dsub>
 80070c0:	9e01      	ldr	r6, [sp, #4]
 80070c2:	9f04      	ldr	r7, [sp, #16]
 80070c4:	3630      	adds	r6, #48	; 0x30
 80070c6:	f805 6b01 	strb.w	r6, [r5], #1
 80070ca:	9e00      	ldr	r6, [sp, #0]
 80070cc:	1bae      	subs	r6, r5, r6
 80070ce:	42b7      	cmp	r7, r6
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	d134      	bne.n	8007140 <_dtoa_r+0x708>
 80070d6:	f7f9 f8f1 	bl	80002bc <__adddf3>
 80070da:	4642      	mov	r2, r8
 80070dc:	464b      	mov	r3, r9
 80070de:	4606      	mov	r6, r0
 80070e0:	460f      	mov	r7, r1
 80070e2:	f7f9 fd31 	bl	8000b48 <__aeabi_dcmpgt>
 80070e6:	b9c8      	cbnz	r0, 800711c <_dtoa_r+0x6e4>
 80070e8:	4642      	mov	r2, r8
 80070ea:	464b      	mov	r3, r9
 80070ec:	4630      	mov	r0, r6
 80070ee:	4639      	mov	r1, r7
 80070f0:	f7f9 fd02 	bl	8000af8 <__aeabi_dcmpeq>
 80070f4:	b110      	cbz	r0, 80070fc <_dtoa_r+0x6c4>
 80070f6:	9b01      	ldr	r3, [sp, #4]
 80070f8:	07db      	lsls	r3, r3, #31
 80070fa:	d40f      	bmi.n	800711c <_dtoa_r+0x6e4>
 80070fc:	4651      	mov	r1, sl
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 fd72 	bl	8007be8 <_Bfree>
 8007104:	2300      	movs	r3, #0
 8007106:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007108:	702b      	strb	r3, [r5, #0]
 800710a:	f10b 0301 	add.w	r3, fp, #1
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007112:	2b00      	cmp	r3, #0
 8007114:	f43f ace2 	beq.w	8006adc <_dtoa_r+0xa4>
 8007118:	601d      	str	r5, [r3, #0]
 800711a:	e4df      	b.n	8006adc <_dtoa_r+0xa4>
 800711c:	465f      	mov	r7, fp
 800711e:	462b      	mov	r3, r5
 8007120:	461d      	mov	r5, r3
 8007122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007126:	2a39      	cmp	r2, #57	; 0x39
 8007128:	d106      	bne.n	8007138 <_dtoa_r+0x700>
 800712a:	9a00      	ldr	r2, [sp, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d1f7      	bne.n	8007120 <_dtoa_r+0x6e8>
 8007130:	9900      	ldr	r1, [sp, #0]
 8007132:	2230      	movs	r2, #48	; 0x30
 8007134:	3701      	adds	r7, #1
 8007136:	700a      	strb	r2, [r1, #0]
 8007138:	781a      	ldrb	r2, [r3, #0]
 800713a:	3201      	adds	r2, #1
 800713c:	701a      	strb	r2, [r3, #0]
 800713e:	e790      	b.n	8007062 <_dtoa_r+0x62a>
 8007140:	4ba3      	ldr	r3, [pc, #652]	; (80073d0 <_dtoa_r+0x998>)
 8007142:	2200      	movs	r2, #0
 8007144:	f7f9 fa70 	bl	8000628 <__aeabi_dmul>
 8007148:	2200      	movs	r2, #0
 800714a:	2300      	movs	r3, #0
 800714c:	4606      	mov	r6, r0
 800714e:	460f      	mov	r7, r1
 8007150:	f7f9 fcd2 	bl	8000af8 <__aeabi_dcmpeq>
 8007154:	2800      	cmp	r0, #0
 8007156:	d09e      	beq.n	8007096 <_dtoa_r+0x65e>
 8007158:	e7d0      	b.n	80070fc <_dtoa_r+0x6c4>
 800715a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800715c:	2a00      	cmp	r2, #0
 800715e:	f000 80ca 	beq.w	80072f6 <_dtoa_r+0x8be>
 8007162:	9a07      	ldr	r2, [sp, #28]
 8007164:	2a01      	cmp	r2, #1
 8007166:	f300 80ad 	bgt.w	80072c4 <_dtoa_r+0x88c>
 800716a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800716c:	2a00      	cmp	r2, #0
 800716e:	f000 80a5 	beq.w	80072bc <_dtoa_r+0x884>
 8007172:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007176:	9e08      	ldr	r6, [sp, #32]
 8007178:	9d05      	ldr	r5, [sp, #20]
 800717a:	9a05      	ldr	r2, [sp, #20]
 800717c:	441a      	add	r2, r3
 800717e:	9205      	str	r2, [sp, #20]
 8007180:	9a06      	ldr	r2, [sp, #24]
 8007182:	2101      	movs	r1, #1
 8007184:	441a      	add	r2, r3
 8007186:	4620      	mov	r0, r4
 8007188:	9206      	str	r2, [sp, #24]
 800718a:	f000 fde3 	bl	8007d54 <__i2b>
 800718e:	4607      	mov	r7, r0
 8007190:	b165      	cbz	r5, 80071ac <_dtoa_r+0x774>
 8007192:	9b06      	ldr	r3, [sp, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	dd09      	ble.n	80071ac <_dtoa_r+0x774>
 8007198:	42ab      	cmp	r3, r5
 800719a:	9a05      	ldr	r2, [sp, #20]
 800719c:	bfa8      	it	ge
 800719e:	462b      	movge	r3, r5
 80071a0:	1ad2      	subs	r2, r2, r3
 80071a2:	9205      	str	r2, [sp, #20]
 80071a4:	9a06      	ldr	r2, [sp, #24]
 80071a6:	1aed      	subs	r5, r5, r3
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	9306      	str	r3, [sp, #24]
 80071ac:	9b08      	ldr	r3, [sp, #32]
 80071ae:	b1f3      	cbz	r3, 80071ee <_dtoa_r+0x7b6>
 80071b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 80a3 	beq.w	80072fe <_dtoa_r+0x8c6>
 80071b8:	2e00      	cmp	r6, #0
 80071ba:	dd10      	ble.n	80071de <_dtoa_r+0x7a6>
 80071bc:	4639      	mov	r1, r7
 80071be:	4632      	mov	r2, r6
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 fe87 	bl	8007ed4 <__pow5mult>
 80071c6:	4652      	mov	r2, sl
 80071c8:	4601      	mov	r1, r0
 80071ca:	4607      	mov	r7, r0
 80071cc:	4620      	mov	r0, r4
 80071ce:	f000 fdd7 	bl	8007d80 <__multiply>
 80071d2:	4651      	mov	r1, sl
 80071d4:	4680      	mov	r8, r0
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 fd06 	bl	8007be8 <_Bfree>
 80071dc:	46c2      	mov	sl, r8
 80071de:	9b08      	ldr	r3, [sp, #32]
 80071e0:	1b9a      	subs	r2, r3, r6
 80071e2:	d004      	beq.n	80071ee <_dtoa_r+0x7b6>
 80071e4:	4651      	mov	r1, sl
 80071e6:	4620      	mov	r0, r4
 80071e8:	f000 fe74 	bl	8007ed4 <__pow5mult>
 80071ec:	4682      	mov	sl, r0
 80071ee:	2101      	movs	r1, #1
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 fdaf 	bl	8007d54 <__i2b>
 80071f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	4606      	mov	r6, r0
 80071fc:	f340 8081 	ble.w	8007302 <_dtoa_r+0x8ca>
 8007200:	461a      	mov	r2, r3
 8007202:	4601      	mov	r1, r0
 8007204:	4620      	mov	r0, r4
 8007206:	f000 fe65 	bl	8007ed4 <__pow5mult>
 800720a:	9b07      	ldr	r3, [sp, #28]
 800720c:	2b01      	cmp	r3, #1
 800720e:	4606      	mov	r6, r0
 8007210:	dd7a      	ble.n	8007308 <_dtoa_r+0x8d0>
 8007212:	f04f 0800 	mov.w	r8, #0
 8007216:	6933      	ldr	r3, [r6, #16]
 8007218:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800721c:	6918      	ldr	r0, [r3, #16]
 800721e:	f000 fd4b 	bl	8007cb8 <__hi0bits>
 8007222:	f1c0 0020 	rsb	r0, r0, #32
 8007226:	9b06      	ldr	r3, [sp, #24]
 8007228:	4418      	add	r0, r3
 800722a:	f010 001f 	ands.w	r0, r0, #31
 800722e:	f000 8094 	beq.w	800735a <_dtoa_r+0x922>
 8007232:	f1c0 0320 	rsb	r3, r0, #32
 8007236:	2b04      	cmp	r3, #4
 8007238:	f340 8085 	ble.w	8007346 <_dtoa_r+0x90e>
 800723c:	9b05      	ldr	r3, [sp, #20]
 800723e:	f1c0 001c 	rsb	r0, r0, #28
 8007242:	4403      	add	r3, r0
 8007244:	9305      	str	r3, [sp, #20]
 8007246:	9b06      	ldr	r3, [sp, #24]
 8007248:	4403      	add	r3, r0
 800724a:	4405      	add	r5, r0
 800724c:	9306      	str	r3, [sp, #24]
 800724e:	9b05      	ldr	r3, [sp, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	dd05      	ble.n	8007260 <_dtoa_r+0x828>
 8007254:	4651      	mov	r1, sl
 8007256:	461a      	mov	r2, r3
 8007258:	4620      	mov	r0, r4
 800725a:	f000 fe95 	bl	8007f88 <__lshift>
 800725e:	4682      	mov	sl, r0
 8007260:	9b06      	ldr	r3, [sp, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	dd05      	ble.n	8007272 <_dtoa_r+0x83a>
 8007266:	4631      	mov	r1, r6
 8007268:	461a      	mov	r2, r3
 800726a:	4620      	mov	r0, r4
 800726c:	f000 fe8c 	bl	8007f88 <__lshift>
 8007270:	4606      	mov	r6, r0
 8007272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007274:	2b00      	cmp	r3, #0
 8007276:	d072      	beq.n	800735e <_dtoa_r+0x926>
 8007278:	4631      	mov	r1, r6
 800727a:	4650      	mov	r0, sl
 800727c:	f000 fef0 	bl	8008060 <__mcmp>
 8007280:	2800      	cmp	r0, #0
 8007282:	da6c      	bge.n	800735e <_dtoa_r+0x926>
 8007284:	2300      	movs	r3, #0
 8007286:	4651      	mov	r1, sl
 8007288:	220a      	movs	r2, #10
 800728a:	4620      	mov	r0, r4
 800728c:	f000 fcce 	bl	8007c2c <__multadd>
 8007290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007292:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007296:	4682      	mov	sl, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 81b0 	beq.w	80075fe <_dtoa_r+0xbc6>
 800729e:	2300      	movs	r3, #0
 80072a0:	4639      	mov	r1, r7
 80072a2:	220a      	movs	r2, #10
 80072a4:	4620      	mov	r0, r4
 80072a6:	f000 fcc1 	bl	8007c2c <__multadd>
 80072aa:	9b01      	ldr	r3, [sp, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	4607      	mov	r7, r0
 80072b0:	f300 8096 	bgt.w	80073e0 <_dtoa_r+0x9a8>
 80072b4:	9b07      	ldr	r3, [sp, #28]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	dc59      	bgt.n	800736e <_dtoa_r+0x936>
 80072ba:	e091      	b.n	80073e0 <_dtoa_r+0x9a8>
 80072bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072c2:	e758      	b.n	8007176 <_dtoa_r+0x73e>
 80072c4:	9b04      	ldr	r3, [sp, #16]
 80072c6:	1e5e      	subs	r6, r3, #1
 80072c8:	9b08      	ldr	r3, [sp, #32]
 80072ca:	42b3      	cmp	r3, r6
 80072cc:	bfbf      	itttt	lt
 80072ce:	9b08      	ldrlt	r3, [sp, #32]
 80072d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80072d2:	9608      	strlt	r6, [sp, #32]
 80072d4:	1af3      	sublt	r3, r6, r3
 80072d6:	bfb4      	ite	lt
 80072d8:	18d2      	addlt	r2, r2, r3
 80072da:	1b9e      	subge	r6, r3, r6
 80072dc:	9b04      	ldr	r3, [sp, #16]
 80072de:	bfbc      	itt	lt
 80072e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80072e2:	2600      	movlt	r6, #0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bfb7      	itett	lt
 80072e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80072ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80072f0:	1a9d      	sublt	r5, r3, r2
 80072f2:	2300      	movlt	r3, #0
 80072f4:	e741      	b.n	800717a <_dtoa_r+0x742>
 80072f6:	9e08      	ldr	r6, [sp, #32]
 80072f8:	9d05      	ldr	r5, [sp, #20]
 80072fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80072fc:	e748      	b.n	8007190 <_dtoa_r+0x758>
 80072fe:	9a08      	ldr	r2, [sp, #32]
 8007300:	e770      	b.n	80071e4 <_dtoa_r+0x7ac>
 8007302:	9b07      	ldr	r3, [sp, #28]
 8007304:	2b01      	cmp	r3, #1
 8007306:	dc19      	bgt.n	800733c <_dtoa_r+0x904>
 8007308:	9b02      	ldr	r3, [sp, #8]
 800730a:	b9bb      	cbnz	r3, 800733c <_dtoa_r+0x904>
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007312:	b99b      	cbnz	r3, 800733c <_dtoa_r+0x904>
 8007314:	9b03      	ldr	r3, [sp, #12]
 8007316:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800731a:	0d1b      	lsrs	r3, r3, #20
 800731c:	051b      	lsls	r3, r3, #20
 800731e:	b183      	cbz	r3, 8007342 <_dtoa_r+0x90a>
 8007320:	9b05      	ldr	r3, [sp, #20]
 8007322:	3301      	adds	r3, #1
 8007324:	9305      	str	r3, [sp, #20]
 8007326:	9b06      	ldr	r3, [sp, #24]
 8007328:	3301      	adds	r3, #1
 800732a:	9306      	str	r3, [sp, #24]
 800732c:	f04f 0801 	mov.w	r8, #1
 8007330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007332:	2b00      	cmp	r3, #0
 8007334:	f47f af6f 	bne.w	8007216 <_dtoa_r+0x7de>
 8007338:	2001      	movs	r0, #1
 800733a:	e774      	b.n	8007226 <_dtoa_r+0x7ee>
 800733c:	f04f 0800 	mov.w	r8, #0
 8007340:	e7f6      	b.n	8007330 <_dtoa_r+0x8f8>
 8007342:	4698      	mov	r8, r3
 8007344:	e7f4      	b.n	8007330 <_dtoa_r+0x8f8>
 8007346:	d082      	beq.n	800724e <_dtoa_r+0x816>
 8007348:	9a05      	ldr	r2, [sp, #20]
 800734a:	331c      	adds	r3, #28
 800734c:	441a      	add	r2, r3
 800734e:	9205      	str	r2, [sp, #20]
 8007350:	9a06      	ldr	r2, [sp, #24]
 8007352:	441a      	add	r2, r3
 8007354:	441d      	add	r5, r3
 8007356:	9206      	str	r2, [sp, #24]
 8007358:	e779      	b.n	800724e <_dtoa_r+0x816>
 800735a:	4603      	mov	r3, r0
 800735c:	e7f4      	b.n	8007348 <_dtoa_r+0x910>
 800735e:	9b04      	ldr	r3, [sp, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	dc37      	bgt.n	80073d4 <_dtoa_r+0x99c>
 8007364:	9b07      	ldr	r3, [sp, #28]
 8007366:	2b02      	cmp	r3, #2
 8007368:	dd34      	ble.n	80073d4 <_dtoa_r+0x99c>
 800736a:	9b04      	ldr	r3, [sp, #16]
 800736c:	9301      	str	r3, [sp, #4]
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	b963      	cbnz	r3, 800738c <_dtoa_r+0x954>
 8007372:	4631      	mov	r1, r6
 8007374:	2205      	movs	r2, #5
 8007376:	4620      	mov	r0, r4
 8007378:	f000 fc58 	bl	8007c2c <__multadd>
 800737c:	4601      	mov	r1, r0
 800737e:	4606      	mov	r6, r0
 8007380:	4650      	mov	r0, sl
 8007382:	f000 fe6d 	bl	8008060 <__mcmp>
 8007386:	2800      	cmp	r0, #0
 8007388:	f73f adbb 	bgt.w	8006f02 <_dtoa_r+0x4ca>
 800738c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738e:	9d00      	ldr	r5, [sp, #0]
 8007390:	ea6f 0b03 	mvn.w	fp, r3
 8007394:	f04f 0800 	mov.w	r8, #0
 8007398:	4631      	mov	r1, r6
 800739a:	4620      	mov	r0, r4
 800739c:	f000 fc24 	bl	8007be8 <_Bfree>
 80073a0:	2f00      	cmp	r7, #0
 80073a2:	f43f aeab 	beq.w	80070fc <_dtoa_r+0x6c4>
 80073a6:	f1b8 0f00 	cmp.w	r8, #0
 80073aa:	d005      	beq.n	80073b8 <_dtoa_r+0x980>
 80073ac:	45b8      	cmp	r8, r7
 80073ae:	d003      	beq.n	80073b8 <_dtoa_r+0x980>
 80073b0:	4641      	mov	r1, r8
 80073b2:	4620      	mov	r0, r4
 80073b4:	f000 fc18 	bl	8007be8 <_Bfree>
 80073b8:	4639      	mov	r1, r7
 80073ba:	4620      	mov	r0, r4
 80073bc:	f000 fc14 	bl	8007be8 <_Bfree>
 80073c0:	e69c      	b.n	80070fc <_dtoa_r+0x6c4>
 80073c2:	2600      	movs	r6, #0
 80073c4:	4637      	mov	r7, r6
 80073c6:	e7e1      	b.n	800738c <_dtoa_r+0x954>
 80073c8:	46bb      	mov	fp, r7
 80073ca:	4637      	mov	r7, r6
 80073cc:	e599      	b.n	8006f02 <_dtoa_r+0x4ca>
 80073ce:	bf00      	nop
 80073d0:	40240000 	.word	0x40240000
 80073d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 80c8 	beq.w	800756c <_dtoa_r+0xb34>
 80073dc:	9b04      	ldr	r3, [sp, #16]
 80073de:	9301      	str	r3, [sp, #4]
 80073e0:	2d00      	cmp	r5, #0
 80073e2:	dd05      	ble.n	80073f0 <_dtoa_r+0x9b8>
 80073e4:	4639      	mov	r1, r7
 80073e6:	462a      	mov	r2, r5
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 fdcd 	bl	8007f88 <__lshift>
 80073ee:	4607      	mov	r7, r0
 80073f0:	f1b8 0f00 	cmp.w	r8, #0
 80073f4:	d05b      	beq.n	80074ae <_dtoa_r+0xa76>
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 fbb5 	bl	8007b68 <_Balloc>
 80073fe:	4605      	mov	r5, r0
 8007400:	b928      	cbnz	r0, 800740e <_dtoa_r+0x9d6>
 8007402:	4b83      	ldr	r3, [pc, #524]	; (8007610 <_dtoa_r+0xbd8>)
 8007404:	4602      	mov	r2, r0
 8007406:	f240 21ef 	movw	r1, #751	; 0x2ef
 800740a:	f7ff bb2e 	b.w	8006a6a <_dtoa_r+0x32>
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	3202      	adds	r2, #2
 8007412:	0092      	lsls	r2, r2, #2
 8007414:	f107 010c 	add.w	r1, r7, #12
 8007418:	300c      	adds	r0, #12
 800741a:	f001 f8d3 	bl	80085c4 <memcpy>
 800741e:	2201      	movs	r2, #1
 8007420:	4629      	mov	r1, r5
 8007422:	4620      	mov	r0, r4
 8007424:	f000 fdb0 	bl	8007f88 <__lshift>
 8007428:	9b00      	ldr	r3, [sp, #0]
 800742a:	3301      	adds	r3, #1
 800742c:	9304      	str	r3, [sp, #16]
 800742e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007432:	4413      	add	r3, r2
 8007434:	9308      	str	r3, [sp, #32]
 8007436:	9b02      	ldr	r3, [sp, #8]
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	46b8      	mov	r8, r7
 800743e:	9306      	str	r3, [sp, #24]
 8007440:	4607      	mov	r7, r0
 8007442:	9b04      	ldr	r3, [sp, #16]
 8007444:	4631      	mov	r1, r6
 8007446:	3b01      	subs	r3, #1
 8007448:	4650      	mov	r0, sl
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	f7ff fa6a 	bl	8006924 <quorem>
 8007450:	4641      	mov	r1, r8
 8007452:	9002      	str	r0, [sp, #8]
 8007454:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007458:	4650      	mov	r0, sl
 800745a:	f000 fe01 	bl	8008060 <__mcmp>
 800745e:	463a      	mov	r2, r7
 8007460:	9005      	str	r0, [sp, #20]
 8007462:	4631      	mov	r1, r6
 8007464:	4620      	mov	r0, r4
 8007466:	f000 fe17 	bl	8008098 <__mdiff>
 800746a:	68c2      	ldr	r2, [r0, #12]
 800746c:	4605      	mov	r5, r0
 800746e:	bb02      	cbnz	r2, 80074b2 <_dtoa_r+0xa7a>
 8007470:	4601      	mov	r1, r0
 8007472:	4650      	mov	r0, sl
 8007474:	f000 fdf4 	bl	8008060 <__mcmp>
 8007478:	4602      	mov	r2, r0
 800747a:	4629      	mov	r1, r5
 800747c:	4620      	mov	r0, r4
 800747e:	9209      	str	r2, [sp, #36]	; 0x24
 8007480:	f000 fbb2 	bl	8007be8 <_Bfree>
 8007484:	9b07      	ldr	r3, [sp, #28]
 8007486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007488:	9d04      	ldr	r5, [sp, #16]
 800748a:	ea43 0102 	orr.w	r1, r3, r2
 800748e:	9b06      	ldr	r3, [sp, #24]
 8007490:	4319      	orrs	r1, r3
 8007492:	d110      	bne.n	80074b6 <_dtoa_r+0xa7e>
 8007494:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007498:	d029      	beq.n	80074ee <_dtoa_r+0xab6>
 800749a:	9b05      	ldr	r3, [sp, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	dd02      	ble.n	80074a6 <_dtoa_r+0xa6e>
 80074a0:	9b02      	ldr	r3, [sp, #8]
 80074a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80074a6:	9b01      	ldr	r3, [sp, #4]
 80074a8:	f883 9000 	strb.w	r9, [r3]
 80074ac:	e774      	b.n	8007398 <_dtoa_r+0x960>
 80074ae:	4638      	mov	r0, r7
 80074b0:	e7ba      	b.n	8007428 <_dtoa_r+0x9f0>
 80074b2:	2201      	movs	r2, #1
 80074b4:	e7e1      	b.n	800747a <_dtoa_r+0xa42>
 80074b6:	9b05      	ldr	r3, [sp, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	db04      	blt.n	80074c6 <_dtoa_r+0xa8e>
 80074bc:	9907      	ldr	r1, [sp, #28]
 80074be:	430b      	orrs	r3, r1
 80074c0:	9906      	ldr	r1, [sp, #24]
 80074c2:	430b      	orrs	r3, r1
 80074c4:	d120      	bne.n	8007508 <_dtoa_r+0xad0>
 80074c6:	2a00      	cmp	r2, #0
 80074c8:	dded      	ble.n	80074a6 <_dtoa_r+0xa6e>
 80074ca:	4651      	mov	r1, sl
 80074cc:	2201      	movs	r2, #1
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 fd5a 	bl	8007f88 <__lshift>
 80074d4:	4631      	mov	r1, r6
 80074d6:	4682      	mov	sl, r0
 80074d8:	f000 fdc2 	bl	8008060 <__mcmp>
 80074dc:	2800      	cmp	r0, #0
 80074de:	dc03      	bgt.n	80074e8 <_dtoa_r+0xab0>
 80074e0:	d1e1      	bne.n	80074a6 <_dtoa_r+0xa6e>
 80074e2:	f019 0f01 	tst.w	r9, #1
 80074e6:	d0de      	beq.n	80074a6 <_dtoa_r+0xa6e>
 80074e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074ec:	d1d8      	bne.n	80074a0 <_dtoa_r+0xa68>
 80074ee:	9a01      	ldr	r2, [sp, #4]
 80074f0:	2339      	movs	r3, #57	; 0x39
 80074f2:	7013      	strb	r3, [r2, #0]
 80074f4:	462b      	mov	r3, r5
 80074f6:	461d      	mov	r5, r3
 80074f8:	3b01      	subs	r3, #1
 80074fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074fe:	2a39      	cmp	r2, #57	; 0x39
 8007500:	d06c      	beq.n	80075dc <_dtoa_r+0xba4>
 8007502:	3201      	adds	r2, #1
 8007504:	701a      	strb	r2, [r3, #0]
 8007506:	e747      	b.n	8007398 <_dtoa_r+0x960>
 8007508:	2a00      	cmp	r2, #0
 800750a:	dd07      	ble.n	800751c <_dtoa_r+0xae4>
 800750c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007510:	d0ed      	beq.n	80074ee <_dtoa_r+0xab6>
 8007512:	9a01      	ldr	r2, [sp, #4]
 8007514:	f109 0301 	add.w	r3, r9, #1
 8007518:	7013      	strb	r3, [r2, #0]
 800751a:	e73d      	b.n	8007398 <_dtoa_r+0x960>
 800751c:	9b04      	ldr	r3, [sp, #16]
 800751e:	9a08      	ldr	r2, [sp, #32]
 8007520:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007524:	4293      	cmp	r3, r2
 8007526:	d043      	beq.n	80075b0 <_dtoa_r+0xb78>
 8007528:	4651      	mov	r1, sl
 800752a:	2300      	movs	r3, #0
 800752c:	220a      	movs	r2, #10
 800752e:	4620      	mov	r0, r4
 8007530:	f000 fb7c 	bl	8007c2c <__multadd>
 8007534:	45b8      	cmp	r8, r7
 8007536:	4682      	mov	sl, r0
 8007538:	f04f 0300 	mov.w	r3, #0
 800753c:	f04f 020a 	mov.w	r2, #10
 8007540:	4641      	mov	r1, r8
 8007542:	4620      	mov	r0, r4
 8007544:	d107      	bne.n	8007556 <_dtoa_r+0xb1e>
 8007546:	f000 fb71 	bl	8007c2c <__multadd>
 800754a:	4680      	mov	r8, r0
 800754c:	4607      	mov	r7, r0
 800754e:	9b04      	ldr	r3, [sp, #16]
 8007550:	3301      	adds	r3, #1
 8007552:	9304      	str	r3, [sp, #16]
 8007554:	e775      	b.n	8007442 <_dtoa_r+0xa0a>
 8007556:	f000 fb69 	bl	8007c2c <__multadd>
 800755a:	4639      	mov	r1, r7
 800755c:	4680      	mov	r8, r0
 800755e:	2300      	movs	r3, #0
 8007560:	220a      	movs	r2, #10
 8007562:	4620      	mov	r0, r4
 8007564:	f000 fb62 	bl	8007c2c <__multadd>
 8007568:	4607      	mov	r7, r0
 800756a:	e7f0      	b.n	800754e <_dtoa_r+0xb16>
 800756c:	9b04      	ldr	r3, [sp, #16]
 800756e:	9301      	str	r3, [sp, #4]
 8007570:	9d00      	ldr	r5, [sp, #0]
 8007572:	4631      	mov	r1, r6
 8007574:	4650      	mov	r0, sl
 8007576:	f7ff f9d5 	bl	8006924 <quorem>
 800757a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800757e:	9b00      	ldr	r3, [sp, #0]
 8007580:	f805 9b01 	strb.w	r9, [r5], #1
 8007584:	1aea      	subs	r2, r5, r3
 8007586:	9b01      	ldr	r3, [sp, #4]
 8007588:	4293      	cmp	r3, r2
 800758a:	dd07      	ble.n	800759c <_dtoa_r+0xb64>
 800758c:	4651      	mov	r1, sl
 800758e:	2300      	movs	r3, #0
 8007590:	220a      	movs	r2, #10
 8007592:	4620      	mov	r0, r4
 8007594:	f000 fb4a 	bl	8007c2c <__multadd>
 8007598:	4682      	mov	sl, r0
 800759a:	e7ea      	b.n	8007572 <_dtoa_r+0xb3a>
 800759c:	9b01      	ldr	r3, [sp, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bfc8      	it	gt
 80075a2:	461d      	movgt	r5, r3
 80075a4:	9b00      	ldr	r3, [sp, #0]
 80075a6:	bfd8      	it	le
 80075a8:	2501      	movle	r5, #1
 80075aa:	441d      	add	r5, r3
 80075ac:	f04f 0800 	mov.w	r8, #0
 80075b0:	4651      	mov	r1, sl
 80075b2:	2201      	movs	r2, #1
 80075b4:	4620      	mov	r0, r4
 80075b6:	f000 fce7 	bl	8007f88 <__lshift>
 80075ba:	4631      	mov	r1, r6
 80075bc:	4682      	mov	sl, r0
 80075be:	f000 fd4f 	bl	8008060 <__mcmp>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	dc96      	bgt.n	80074f4 <_dtoa_r+0xabc>
 80075c6:	d102      	bne.n	80075ce <_dtoa_r+0xb96>
 80075c8:	f019 0f01 	tst.w	r9, #1
 80075cc:	d192      	bne.n	80074f4 <_dtoa_r+0xabc>
 80075ce:	462b      	mov	r3, r5
 80075d0:	461d      	mov	r5, r3
 80075d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075d6:	2a30      	cmp	r2, #48	; 0x30
 80075d8:	d0fa      	beq.n	80075d0 <_dtoa_r+0xb98>
 80075da:	e6dd      	b.n	8007398 <_dtoa_r+0x960>
 80075dc:	9a00      	ldr	r2, [sp, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d189      	bne.n	80074f6 <_dtoa_r+0xabe>
 80075e2:	f10b 0b01 	add.w	fp, fp, #1
 80075e6:	2331      	movs	r3, #49	; 0x31
 80075e8:	e796      	b.n	8007518 <_dtoa_r+0xae0>
 80075ea:	4b0a      	ldr	r3, [pc, #40]	; (8007614 <_dtoa_r+0xbdc>)
 80075ec:	f7ff ba99 	b.w	8006b22 <_dtoa_r+0xea>
 80075f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f47f aa6d 	bne.w	8006ad2 <_dtoa_r+0x9a>
 80075f8:	4b07      	ldr	r3, [pc, #28]	; (8007618 <_dtoa_r+0xbe0>)
 80075fa:	f7ff ba92 	b.w	8006b22 <_dtoa_r+0xea>
 80075fe:	9b01      	ldr	r3, [sp, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	dcb5      	bgt.n	8007570 <_dtoa_r+0xb38>
 8007604:	9b07      	ldr	r3, [sp, #28]
 8007606:	2b02      	cmp	r3, #2
 8007608:	f73f aeb1 	bgt.w	800736e <_dtoa_r+0x936>
 800760c:	e7b0      	b.n	8007570 <_dtoa_r+0xb38>
 800760e:	bf00      	nop
 8007610:	08008958 	.word	0x08008958
 8007614:	080088b8 	.word	0x080088b8
 8007618:	080088dc 	.word	0x080088dc

0800761c <__sfputc_r>:
 800761c:	6893      	ldr	r3, [r2, #8]
 800761e:	3b01      	subs	r3, #1
 8007620:	2b00      	cmp	r3, #0
 8007622:	b410      	push	{r4}
 8007624:	6093      	str	r3, [r2, #8]
 8007626:	da08      	bge.n	800763a <__sfputc_r+0x1e>
 8007628:	6994      	ldr	r4, [r2, #24]
 800762a:	42a3      	cmp	r3, r4
 800762c:	db01      	blt.n	8007632 <__sfputc_r+0x16>
 800762e:	290a      	cmp	r1, #10
 8007630:	d103      	bne.n	800763a <__sfputc_r+0x1e>
 8007632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007636:	f000 be56 	b.w	80082e6 <__swbuf_r>
 800763a:	6813      	ldr	r3, [r2, #0]
 800763c:	1c58      	adds	r0, r3, #1
 800763e:	6010      	str	r0, [r2, #0]
 8007640:	7019      	strb	r1, [r3, #0]
 8007642:	4608      	mov	r0, r1
 8007644:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007648:	4770      	bx	lr

0800764a <__sfputs_r>:
 800764a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764c:	4606      	mov	r6, r0
 800764e:	460f      	mov	r7, r1
 8007650:	4614      	mov	r4, r2
 8007652:	18d5      	adds	r5, r2, r3
 8007654:	42ac      	cmp	r4, r5
 8007656:	d101      	bne.n	800765c <__sfputs_r+0x12>
 8007658:	2000      	movs	r0, #0
 800765a:	e007      	b.n	800766c <__sfputs_r+0x22>
 800765c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007660:	463a      	mov	r2, r7
 8007662:	4630      	mov	r0, r6
 8007664:	f7ff ffda 	bl	800761c <__sfputc_r>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d1f3      	bne.n	8007654 <__sfputs_r+0xa>
 800766c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007670 <_vfiprintf_r>:
 8007670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	460d      	mov	r5, r1
 8007676:	b09d      	sub	sp, #116	; 0x74
 8007678:	4614      	mov	r4, r2
 800767a:	4698      	mov	r8, r3
 800767c:	4606      	mov	r6, r0
 800767e:	b118      	cbz	r0, 8007688 <_vfiprintf_r+0x18>
 8007680:	6a03      	ldr	r3, [r0, #32]
 8007682:	b90b      	cbnz	r3, 8007688 <_vfiprintf_r+0x18>
 8007684:	f7ff f872 	bl	800676c <__sinit>
 8007688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800768a:	07d9      	lsls	r1, r3, #31
 800768c:	d405      	bmi.n	800769a <_vfiprintf_r+0x2a>
 800768e:	89ab      	ldrh	r3, [r5, #12]
 8007690:	059a      	lsls	r2, r3, #22
 8007692:	d402      	bmi.n	800769a <_vfiprintf_r+0x2a>
 8007694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007696:	f7ff f943 	bl	8006920 <__retarget_lock_acquire_recursive>
 800769a:	89ab      	ldrh	r3, [r5, #12]
 800769c:	071b      	lsls	r3, r3, #28
 800769e:	d501      	bpl.n	80076a4 <_vfiprintf_r+0x34>
 80076a0:	692b      	ldr	r3, [r5, #16]
 80076a2:	b99b      	cbnz	r3, 80076cc <_vfiprintf_r+0x5c>
 80076a4:	4629      	mov	r1, r5
 80076a6:	4630      	mov	r0, r6
 80076a8:	f000 fe5a 	bl	8008360 <__swsetup_r>
 80076ac:	b170      	cbz	r0, 80076cc <_vfiprintf_r+0x5c>
 80076ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076b0:	07dc      	lsls	r4, r3, #31
 80076b2:	d504      	bpl.n	80076be <_vfiprintf_r+0x4e>
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076b8:	b01d      	add	sp, #116	; 0x74
 80076ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076be:	89ab      	ldrh	r3, [r5, #12]
 80076c0:	0598      	lsls	r0, r3, #22
 80076c2:	d4f7      	bmi.n	80076b4 <_vfiprintf_r+0x44>
 80076c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076c6:	f7ff f92c 	bl	8006922 <__retarget_lock_release_recursive>
 80076ca:	e7f3      	b.n	80076b4 <_vfiprintf_r+0x44>
 80076cc:	2300      	movs	r3, #0
 80076ce:	9309      	str	r3, [sp, #36]	; 0x24
 80076d0:	2320      	movs	r3, #32
 80076d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80076da:	2330      	movs	r3, #48	; 0x30
 80076dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007890 <_vfiprintf_r+0x220>
 80076e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076e4:	f04f 0901 	mov.w	r9, #1
 80076e8:	4623      	mov	r3, r4
 80076ea:	469a      	mov	sl, r3
 80076ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076f0:	b10a      	cbz	r2, 80076f6 <_vfiprintf_r+0x86>
 80076f2:	2a25      	cmp	r2, #37	; 0x25
 80076f4:	d1f9      	bne.n	80076ea <_vfiprintf_r+0x7a>
 80076f6:	ebba 0b04 	subs.w	fp, sl, r4
 80076fa:	d00b      	beq.n	8007714 <_vfiprintf_r+0xa4>
 80076fc:	465b      	mov	r3, fp
 80076fe:	4622      	mov	r2, r4
 8007700:	4629      	mov	r1, r5
 8007702:	4630      	mov	r0, r6
 8007704:	f7ff ffa1 	bl	800764a <__sfputs_r>
 8007708:	3001      	adds	r0, #1
 800770a:	f000 80a9 	beq.w	8007860 <_vfiprintf_r+0x1f0>
 800770e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007710:	445a      	add	r2, fp
 8007712:	9209      	str	r2, [sp, #36]	; 0x24
 8007714:	f89a 3000 	ldrb.w	r3, [sl]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 80a1 	beq.w	8007860 <_vfiprintf_r+0x1f0>
 800771e:	2300      	movs	r3, #0
 8007720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007724:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007728:	f10a 0a01 	add.w	sl, sl, #1
 800772c:	9304      	str	r3, [sp, #16]
 800772e:	9307      	str	r3, [sp, #28]
 8007730:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007734:	931a      	str	r3, [sp, #104]	; 0x68
 8007736:	4654      	mov	r4, sl
 8007738:	2205      	movs	r2, #5
 800773a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800773e:	4854      	ldr	r0, [pc, #336]	; (8007890 <_vfiprintf_r+0x220>)
 8007740:	f7f8 fd5e 	bl	8000200 <memchr>
 8007744:	9a04      	ldr	r2, [sp, #16]
 8007746:	b9d8      	cbnz	r0, 8007780 <_vfiprintf_r+0x110>
 8007748:	06d1      	lsls	r1, r2, #27
 800774a:	bf44      	itt	mi
 800774c:	2320      	movmi	r3, #32
 800774e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007752:	0713      	lsls	r3, r2, #28
 8007754:	bf44      	itt	mi
 8007756:	232b      	movmi	r3, #43	; 0x2b
 8007758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800775c:	f89a 3000 	ldrb.w	r3, [sl]
 8007760:	2b2a      	cmp	r3, #42	; 0x2a
 8007762:	d015      	beq.n	8007790 <_vfiprintf_r+0x120>
 8007764:	9a07      	ldr	r2, [sp, #28]
 8007766:	4654      	mov	r4, sl
 8007768:	2000      	movs	r0, #0
 800776a:	f04f 0c0a 	mov.w	ip, #10
 800776e:	4621      	mov	r1, r4
 8007770:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007774:	3b30      	subs	r3, #48	; 0x30
 8007776:	2b09      	cmp	r3, #9
 8007778:	d94d      	bls.n	8007816 <_vfiprintf_r+0x1a6>
 800777a:	b1b0      	cbz	r0, 80077aa <_vfiprintf_r+0x13a>
 800777c:	9207      	str	r2, [sp, #28]
 800777e:	e014      	b.n	80077aa <_vfiprintf_r+0x13a>
 8007780:	eba0 0308 	sub.w	r3, r0, r8
 8007784:	fa09 f303 	lsl.w	r3, r9, r3
 8007788:	4313      	orrs	r3, r2
 800778a:	9304      	str	r3, [sp, #16]
 800778c:	46a2      	mov	sl, r4
 800778e:	e7d2      	b.n	8007736 <_vfiprintf_r+0xc6>
 8007790:	9b03      	ldr	r3, [sp, #12]
 8007792:	1d19      	adds	r1, r3, #4
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	9103      	str	r1, [sp, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	bfbb      	ittet	lt
 800779c:	425b      	neglt	r3, r3
 800779e:	f042 0202 	orrlt.w	r2, r2, #2
 80077a2:	9307      	strge	r3, [sp, #28]
 80077a4:	9307      	strlt	r3, [sp, #28]
 80077a6:	bfb8      	it	lt
 80077a8:	9204      	strlt	r2, [sp, #16]
 80077aa:	7823      	ldrb	r3, [r4, #0]
 80077ac:	2b2e      	cmp	r3, #46	; 0x2e
 80077ae:	d10c      	bne.n	80077ca <_vfiprintf_r+0x15a>
 80077b0:	7863      	ldrb	r3, [r4, #1]
 80077b2:	2b2a      	cmp	r3, #42	; 0x2a
 80077b4:	d134      	bne.n	8007820 <_vfiprintf_r+0x1b0>
 80077b6:	9b03      	ldr	r3, [sp, #12]
 80077b8:	1d1a      	adds	r2, r3, #4
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	9203      	str	r2, [sp, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bfb8      	it	lt
 80077c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80077c6:	3402      	adds	r4, #2
 80077c8:	9305      	str	r3, [sp, #20]
 80077ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80078a0 <_vfiprintf_r+0x230>
 80077ce:	7821      	ldrb	r1, [r4, #0]
 80077d0:	2203      	movs	r2, #3
 80077d2:	4650      	mov	r0, sl
 80077d4:	f7f8 fd14 	bl	8000200 <memchr>
 80077d8:	b138      	cbz	r0, 80077ea <_vfiprintf_r+0x17a>
 80077da:	9b04      	ldr	r3, [sp, #16]
 80077dc:	eba0 000a 	sub.w	r0, r0, sl
 80077e0:	2240      	movs	r2, #64	; 0x40
 80077e2:	4082      	lsls	r2, r0
 80077e4:	4313      	orrs	r3, r2
 80077e6:	3401      	adds	r4, #1
 80077e8:	9304      	str	r3, [sp, #16]
 80077ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ee:	4829      	ldr	r0, [pc, #164]	; (8007894 <_vfiprintf_r+0x224>)
 80077f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077f4:	2206      	movs	r2, #6
 80077f6:	f7f8 fd03 	bl	8000200 <memchr>
 80077fa:	2800      	cmp	r0, #0
 80077fc:	d03f      	beq.n	800787e <_vfiprintf_r+0x20e>
 80077fe:	4b26      	ldr	r3, [pc, #152]	; (8007898 <_vfiprintf_r+0x228>)
 8007800:	bb1b      	cbnz	r3, 800784a <_vfiprintf_r+0x1da>
 8007802:	9b03      	ldr	r3, [sp, #12]
 8007804:	3307      	adds	r3, #7
 8007806:	f023 0307 	bic.w	r3, r3, #7
 800780a:	3308      	adds	r3, #8
 800780c:	9303      	str	r3, [sp, #12]
 800780e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007810:	443b      	add	r3, r7
 8007812:	9309      	str	r3, [sp, #36]	; 0x24
 8007814:	e768      	b.n	80076e8 <_vfiprintf_r+0x78>
 8007816:	fb0c 3202 	mla	r2, ip, r2, r3
 800781a:	460c      	mov	r4, r1
 800781c:	2001      	movs	r0, #1
 800781e:	e7a6      	b.n	800776e <_vfiprintf_r+0xfe>
 8007820:	2300      	movs	r3, #0
 8007822:	3401      	adds	r4, #1
 8007824:	9305      	str	r3, [sp, #20]
 8007826:	4619      	mov	r1, r3
 8007828:	f04f 0c0a 	mov.w	ip, #10
 800782c:	4620      	mov	r0, r4
 800782e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007832:	3a30      	subs	r2, #48	; 0x30
 8007834:	2a09      	cmp	r2, #9
 8007836:	d903      	bls.n	8007840 <_vfiprintf_r+0x1d0>
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0c6      	beq.n	80077ca <_vfiprintf_r+0x15a>
 800783c:	9105      	str	r1, [sp, #20]
 800783e:	e7c4      	b.n	80077ca <_vfiprintf_r+0x15a>
 8007840:	fb0c 2101 	mla	r1, ip, r1, r2
 8007844:	4604      	mov	r4, r0
 8007846:	2301      	movs	r3, #1
 8007848:	e7f0      	b.n	800782c <_vfiprintf_r+0x1bc>
 800784a:	ab03      	add	r3, sp, #12
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	462a      	mov	r2, r5
 8007850:	4b12      	ldr	r3, [pc, #72]	; (800789c <_vfiprintf_r+0x22c>)
 8007852:	a904      	add	r1, sp, #16
 8007854:	4630      	mov	r0, r6
 8007856:	f7fe fb49 	bl	8005eec <_printf_float>
 800785a:	4607      	mov	r7, r0
 800785c:	1c78      	adds	r0, r7, #1
 800785e:	d1d6      	bne.n	800780e <_vfiprintf_r+0x19e>
 8007860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007862:	07d9      	lsls	r1, r3, #31
 8007864:	d405      	bmi.n	8007872 <_vfiprintf_r+0x202>
 8007866:	89ab      	ldrh	r3, [r5, #12]
 8007868:	059a      	lsls	r2, r3, #22
 800786a:	d402      	bmi.n	8007872 <_vfiprintf_r+0x202>
 800786c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800786e:	f7ff f858 	bl	8006922 <__retarget_lock_release_recursive>
 8007872:	89ab      	ldrh	r3, [r5, #12]
 8007874:	065b      	lsls	r3, r3, #25
 8007876:	f53f af1d 	bmi.w	80076b4 <_vfiprintf_r+0x44>
 800787a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800787c:	e71c      	b.n	80076b8 <_vfiprintf_r+0x48>
 800787e:	ab03      	add	r3, sp, #12
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	462a      	mov	r2, r5
 8007884:	4b05      	ldr	r3, [pc, #20]	; (800789c <_vfiprintf_r+0x22c>)
 8007886:	a904      	add	r1, sp, #16
 8007888:	4630      	mov	r0, r6
 800788a:	f7fe fdd3 	bl	8006434 <_printf_i>
 800788e:	e7e4      	b.n	800785a <_vfiprintf_r+0x1ea>
 8007890:	08008969 	.word	0x08008969
 8007894:	08008973 	.word	0x08008973
 8007898:	08005eed 	.word	0x08005eed
 800789c:	0800764b 	.word	0x0800764b
 80078a0:	0800896f 	.word	0x0800896f

080078a4 <malloc>:
 80078a4:	4b02      	ldr	r3, [pc, #8]	; (80078b0 <malloc+0xc>)
 80078a6:	4601      	mov	r1, r0
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	f000 b823 	b.w	80078f4 <_malloc_r>
 80078ae:	bf00      	nop
 80078b0:	20000064 	.word	0x20000064

080078b4 <sbrk_aligned>:
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	4e0e      	ldr	r6, [pc, #56]	; (80078f0 <sbrk_aligned+0x3c>)
 80078b8:	460c      	mov	r4, r1
 80078ba:	6831      	ldr	r1, [r6, #0]
 80078bc:	4605      	mov	r5, r0
 80078be:	b911      	cbnz	r1, 80078c6 <sbrk_aligned+0x12>
 80078c0:	f000 fe5e 	bl	8008580 <_sbrk_r>
 80078c4:	6030      	str	r0, [r6, #0]
 80078c6:	4621      	mov	r1, r4
 80078c8:	4628      	mov	r0, r5
 80078ca:	f000 fe59 	bl	8008580 <_sbrk_r>
 80078ce:	1c43      	adds	r3, r0, #1
 80078d0:	d00a      	beq.n	80078e8 <sbrk_aligned+0x34>
 80078d2:	1cc4      	adds	r4, r0, #3
 80078d4:	f024 0403 	bic.w	r4, r4, #3
 80078d8:	42a0      	cmp	r0, r4
 80078da:	d007      	beq.n	80078ec <sbrk_aligned+0x38>
 80078dc:	1a21      	subs	r1, r4, r0
 80078de:	4628      	mov	r0, r5
 80078e0:	f000 fe4e 	bl	8008580 <_sbrk_r>
 80078e4:	3001      	adds	r0, #1
 80078e6:	d101      	bne.n	80078ec <sbrk_aligned+0x38>
 80078e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80078ec:	4620      	mov	r0, r4
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
 80078f0:	20000488 	.word	0x20000488

080078f4 <_malloc_r>:
 80078f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f8:	1ccd      	adds	r5, r1, #3
 80078fa:	f025 0503 	bic.w	r5, r5, #3
 80078fe:	3508      	adds	r5, #8
 8007900:	2d0c      	cmp	r5, #12
 8007902:	bf38      	it	cc
 8007904:	250c      	movcc	r5, #12
 8007906:	2d00      	cmp	r5, #0
 8007908:	4607      	mov	r7, r0
 800790a:	db01      	blt.n	8007910 <_malloc_r+0x1c>
 800790c:	42a9      	cmp	r1, r5
 800790e:	d905      	bls.n	800791c <_malloc_r+0x28>
 8007910:	230c      	movs	r3, #12
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	2600      	movs	r6, #0
 8007916:	4630      	mov	r0, r6
 8007918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800791c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80079f0 <_malloc_r+0xfc>
 8007920:	f000 f916 	bl	8007b50 <__malloc_lock>
 8007924:	f8d8 3000 	ldr.w	r3, [r8]
 8007928:	461c      	mov	r4, r3
 800792a:	bb5c      	cbnz	r4, 8007984 <_malloc_r+0x90>
 800792c:	4629      	mov	r1, r5
 800792e:	4638      	mov	r0, r7
 8007930:	f7ff ffc0 	bl	80078b4 <sbrk_aligned>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	4604      	mov	r4, r0
 8007938:	d155      	bne.n	80079e6 <_malloc_r+0xf2>
 800793a:	f8d8 4000 	ldr.w	r4, [r8]
 800793e:	4626      	mov	r6, r4
 8007940:	2e00      	cmp	r6, #0
 8007942:	d145      	bne.n	80079d0 <_malloc_r+0xdc>
 8007944:	2c00      	cmp	r4, #0
 8007946:	d048      	beq.n	80079da <_malloc_r+0xe6>
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	4631      	mov	r1, r6
 800794c:	4638      	mov	r0, r7
 800794e:	eb04 0903 	add.w	r9, r4, r3
 8007952:	f000 fe15 	bl	8008580 <_sbrk_r>
 8007956:	4581      	cmp	r9, r0
 8007958:	d13f      	bne.n	80079da <_malloc_r+0xe6>
 800795a:	6821      	ldr	r1, [r4, #0]
 800795c:	1a6d      	subs	r5, r5, r1
 800795e:	4629      	mov	r1, r5
 8007960:	4638      	mov	r0, r7
 8007962:	f7ff ffa7 	bl	80078b4 <sbrk_aligned>
 8007966:	3001      	adds	r0, #1
 8007968:	d037      	beq.n	80079da <_malloc_r+0xe6>
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	442b      	add	r3, r5
 800796e:	6023      	str	r3, [r4, #0]
 8007970:	f8d8 3000 	ldr.w	r3, [r8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d038      	beq.n	80079ea <_malloc_r+0xf6>
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	42a2      	cmp	r2, r4
 800797c:	d12b      	bne.n	80079d6 <_malloc_r+0xe2>
 800797e:	2200      	movs	r2, #0
 8007980:	605a      	str	r2, [r3, #4]
 8007982:	e00f      	b.n	80079a4 <_malloc_r+0xb0>
 8007984:	6822      	ldr	r2, [r4, #0]
 8007986:	1b52      	subs	r2, r2, r5
 8007988:	d41f      	bmi.n	80079ca <_malloc_r+0xd6>
 800798a:	2a0b      	cmp	r2, #11
 800798c:	d917      	bls.n	80079be <_malloc_r+0xca>
 800798e:	1961      	adds	r1, r4, r5
 8007990:	42a3      	cmp	r3, r4
 8007992:	6025      	str	r5, [r4, #0]
 8007994:	bf18      	it	ne
 8007996:	6059      	strne	r1, [r3, #4]
 8007998:	6863      	ldr	r3, [r4, #4]
 800799a:	bf08      	it	eq
 800799c:	f8c8 1000 	streq.w	r1, [r8]
 80079a0:	5162      	str	r2, [r4, r5]
 80079a2:	604b      	str	r3, [r1, #4]
 80079a4:	4638      	mov	r0, r7
 80079a6:	f104 060b 	add.w	r6, r4, #11
 80079aa:	f000 f8d7 	bl	8007b5c <__malloc_unlock>
 80079ae:	f026 0607 	bic.w	r6, r6, #7
 80079b2:	1d23      	adds	r3, r4, #4
 80079b4:	1af2      	subs	r2, r6, r3
 80079b6:	d0ae      	beq.n	8007916 <_malloc_r+0x22>
 80079b8:	1b9b      	subs	r3, r3, r6
 80079ba:	50a3      	str	r3, [r4, r2]
 80079bc:	e7ab      	b.n	8007916 <_malloc_r+0x22>
 80079be:	42a3      	cmp	r3, r4
 80079c0:	6862      	ldr	r2, [r4, #4]
 80079c2:	d1dd      	bne.n	8007980 <_malloc_r+0x8c>
 80079c4:	f8c8 2000 	str.w	r2, [r8]
 80079c8:	e7ec      	b.n	80079a4 <_malloc_r+0xb0>
 80079ca:	4623      	mov	r3, r4
 80079cc:	6864      	ldr	r4, [r4, #4]
 80079ce:	e7ac      	b.n	800792a <_malloc_r+0x36>
 80079d0:	4634      	mov	r4, r6
 80079d2:	6876      	ldr	r6, [r6, #4]
 80079d4:	e7b4      	b.n	8007940 <_malloc_r+0x4c>
 80079d6:	4613      	mov	r3, r2
 80079d8:	e7cc      	b.n	8007974 <_malloc_r+0x80>
 80079da:	230c      	movs	r3, #12
 80079dc:	603b      	str	r3, [r7, #0]
 80079de:	4638      	mov	r0, r7
 80079e0:	f000 f8bc 	bl	8007b5c <__malloc_unlock>
 80079e4:	e797      	b.n	8007916 <_malloc_r+0x22>
 80079e6:	6025      	str	r5, [r4, #0]
 80079e8:	e7dc      	b.n	80079a4 <_malloc_r+0xb0>
 80079ea:	605b      	str	r3, [r3, #4]
 80079ec:	deff      	udf	#255	; 0xff
 80079ee:	bf00      	nop
 80079f0:	20000484 	.word	0x20000484

080079f4 <__sflush_r>:
 80079f4:	898a      	ldrh	r2, [r1, #12]
 80079f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fa:	4605      	mov	r5, r0
 80079fc:	0710      	lsls	r0, r2, #28
 80079fe:	460c      	mov	r4, r1
 8007a00:	d458      	bmi.n	8007ab4 <__sflush_r+0xc0>
 8007a02:	684b      	ldr	r3, [r1, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dc05      	bgt.n	8007a14 <__sflush_r+0x20>
 8007a08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	dc02      	bgt.n	8007a14 <__sflush_r+0x20>
 8007a0e:	2000      	movs	r0, #0
 8007a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a16:	2e00      	cmp	r6, #0
 8007a18:	d0f9      	beq.n	8007a0e <__sflush_r+0x1a>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a20:	682f      	ldr	r7, [r5, #0]
 8007a22:	6a21      	ldr	r1, [r4, #32]
 8007a24:	602b      	str	r3, [r5, #0]
 8007a26:	d032      	beq.n	8007a8e <__sflush_r+0x9a>
 8007a28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	075a      	lsls	r2, r3, #29
 8007a2e:	d505      	bpl.n	8007a3c <__sflush_r+0x48>
 8007a30:	6863      	ldr	r3, [r4, #4]
 8007a32:	1ac0      	subs	r0, r0, r3
 8007a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a36:	b10b      	cbz	r3, 8007a3c <__sflush_r+0x48>
 8007a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a3a:	1ac0      	subs	r0, r0, r3
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4602      	mov	r2, r0
 8007a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a42:	6a21      	ldr	r1, [r4, #32]
 8007a44:	4628      	mov	r0, r5
 8007a46:	47b0      	blx	r6
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	d106      	bne.n	8007a5c <__sflush_r+0x68>
 8007a4e:	6829      	ldr	r1, [r5, #0]
 8007a50:	291d      	cmp	r1, #29
 8007a52:	d82b      	bhi.n	8007aac <__sflush_r+0xb8>
 8007a54:	4a29      	ldr	r2, [pc, #164]	; (8007afc <__sflush_r+0x108>)
 8007a56:	410a      	asrs	r2, r1
 8007a58:	07d6      	lsls	r6, r2, #31
 8007a5a:	d427      	bmi.n	8007aac <__sflush_r+0xb8>
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	6062      	str	r2, [r4, #4]
 8007a60:	04d9      	lsls	r1, r3, #19
 8007a62:	6922      	ldr	r2, [r4, #16]
 8007a64:	6022      	str	r2, [r4, #0]
 8007a66:	d504      	bpl.n	8007a72 <__sflush_r+0x7e>
 8007a68:	1c42      	adds	r2, r0, #1
 8007a6a:	d101      	bne.n	8007a70 <__sflush_r+0x7c>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	b903      	cbnz	r3, 8007a72 <__sflush_r+0x7e>
 8007a70:	6560      	str	r0, [r4, #84]	; 0x54
 8007a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a74:	602f      	str	r7, [r5, #0]
 8007a76:	2900      	cmp	r1, #0
 8007a78:	d0c9      	beq.n	8007a0e <__sflush_r+0x1a>
 8007a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a7e:	4299      	cmp	r1, r3
 8007a80:	d002      	beq.n	8007a88 <__sflush_r+0x94>
 8007a82:	4628      	mov	r0, r5
 8007a84:	f000 fde0 	bl	8008648 <_free_r>
 8007a88:	2000      	movs	r0, #0
 8007a8a:	6360      	str	r0, [r4, #52]	; 0x34
 8007a8c:	e7c0      	b.n	8007a10 <__sflush_r+0x1c>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4628      	mov	r0, r5
 8007a92:	47b0      	blx	r6
 8007a94:	1c41      	adds	r1, r0, #1
 8007a96:	d1c8      	bne.n	8007a2a <__sflush_r+0x36>
 8007a98:	682b      	ldr	r3, [r5, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d0c5      	beq.n	8007a2a <__sflush_r+0x36>
 8007a9e:	2b1d      	cmp	r3, #29
 8007aa0:	d001      	beq.n	8007aa6 <__sflush_r+0xb2>
 8007aa2:	2b16      	cmp	r3, #22
 8007aa4:	d101      	bne.n	8007aaa <__sflush_r+0xb6>
 8007aa6:	602f      	str	r7, [r5, #0]
 8007aa8:	e7b1      	b.n	8007a0e <__sflush_r+0x1a>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ab0:	81a3      	strh	r3, [r4, #12]
 8007ab2:	e7ad      	b.n	8007a10 <__sflush_r+0x1c>
 8007ab4:	690f      	ldr	r7, [r1, #16]
 8007ab6:	2f00      	cmp	r7, #0
 8007ab8:	d0a9      	beq.n	8007a0e <__sflush_r+0x1a>
 8007aba:	0793      	lsls	r3, r2, #30
 8007abc:	680e      	ldr	r6, [r1, #0]
 8007abe:	bf08      	it	eq
 8007ac0:	694b      	ldreq	r3, [r1, #20]
 8007ac2:	600f      	str	r7, [r1, #0]
 8007ac4:	bf18      	it	ne
 8007ac6:	2300      	movne	r3, #0
 8007ac8:	eba6 0807 	sub.w	r8, r6, r7
 8007acc:	608b      	str	r3, [r1, #8]
 8007ace:	f1b8 0f00 	cmp.w	r8, #0
 8007ad2:	dd9c      	ble.n	8007a0e <__sflush_r+0x1a>
 8007ad4:	6a21      	ldr	r1, [r4, #32]
 8007ad6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ad8:	4643      	mov	r3, r8
 8007ada:	463a      	mov	r2, r7
 8007adc:	4628      	mov	r0, r5
 8007ade:	47b0      	blx	r6
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	dc06      	bgt.n	8007af2 <__sflush_r+0xfe>
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aea:	81a3      	strh	r3, [r4, #12]
 8007aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007af0:	e78e      	b.n	8007a10 <__sflush_r+0x1c>
 8007af2:	4407      	add	r7, r0
 8007af4:	eba8 0800 	sub.w	r8, r8, r0
 8007af8:	e7e9      	b.n	8007ace <__sflush_r+0xda>
 8007afa:	bf00      	nop
 8007afc:	dfbffffe 	.word	0xdfbffffe

08007b00 <_fflush_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	690b      	ldr	r3, [r1, #16]
 8007b04:	4605      	mov	r5, r0
 8007b06:	460c      	mov	r4, r1
 8007b08:	b913      	cbnz	r3, 8007b10 <_fflush_r+0x10>
 8007b0a:	2500      	movs	r5, #0
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	b118      	cbz	r0, 8007b1a <_fflush_r+0x1a>
 8007b12:	6a03      	ldr	r3, [r0, #32]
 8007b14:	b90b      	cbnz	r3, 8007b1a <_fflush_r+0x1a>
 8007b16:	f7fe fe29 	bl	800676c <__sinit>
 8007b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0f3      	beq.n	8007b0a <_fflush_r+0xa>
 8007b22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b24:	07d0      	lsls	r0, r2, #31
 8007b26:	d404      	bmi.n	8007b32 <_fflush_r+0x32>
 8007b28:	0599      	lsls	r1, r3, #22
 8007b2a:	d402      	bmi.n	8007b32 <_fflush_r+0x32>
 8007b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b2e:	f7fe fef7 	bl	8006920 <__retarget_lock_acquire_recursive>
 8007b32:	4628      	mov	r0, r5
 8007b34:	4621      	mov	r1, r4
 8007b36:	f7ff ff5d 	bl	80079f4 <__sflush_r>
 8007b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b3c:	07da      	lsls	r2, r3, #31
 8007b3e:	4605      	mov	r5, r0
 8007b40:	d4e4      	bmi.n	8007b0c <_fflush_r+0xc>
 8007b42:	89a3      	ldrh	r3, [r4, #12]
 8007b44:	059b      	lsls	r3, r3, #22
 8007b46:	d4e1      	bmi.n	8007b0c <_fflush_r+0xc>
 8007b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b4a:	f7fe feea 	bl	8006922 <__retarget_lock_release_recursive>
 8007b4e:	e7dd      	b.n	8007b0c <_fflush_r+0xc>

08007b50 <__malloc_lock>:
 8007b50:	4801      	ldr	r0, [pc, #4]	; (8007b58 <__malloc_lock+0x8>)
 8007b52:	f7fe bee5 	b.w	8006920 <__retarget_lock_acquire_recursive>
 8007b56:	bf00      	nop
 8007b58:	20000480 	.word	0x20000480

08007b5c <__malloc_unlock>:
 8007b5c:	4801      	ldr	r0, [pc, #4]	; (8007b64 <__malloc_unlock+0x8>)
 8007b5e:	f7fe bee0 	b.w	8006922 <__retarget_lock_release_recursive>
 8007b62:	bf00      	nop
 8007b64:	20000480 	.word	0x20000480

08007b68 <_Balloc>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	69c6      	ldr	r6, [r0, #28]
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	460d      	mov	r5, r1
 8007b70:	b976      	cbnz	r6, 8007b90 <_Balloc+0x28>
 8007b72:	2010      	movs	r0, #16
 8007b74:	f7ff fe96 	bl	80078a4 <malloc>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	61e0      	str	r0, [r4, #28]
 8007b7c:	b920      	cbnz	r0, 8007b88 <_Balloc+0x20>
 8007b7e:	4b18      	ldr	r3, [pc, #96]	; (8007be0 <_Balloc+0x78>)
 8007b80:	4818      	ldr	r0, [pc, #96]	; (8007be4 <_Balloc+0x7c>)
 8007b82:	216b      	movs	r1, #107	; 0x6b
 8007b84:	f000 fd2c 	bl	80085e0 <__assert_func>
 8007b88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b8c:	6006      	str	r6, [r0, #0]
 8007b8e:	60c6      	str	r6, [r0, #12]
 8007b90:	69e6      	ldr	r6, [r4, #28]
 8007b92:	68f3      	ldr	r3, [r6, #12]
 8007b94:	b183      	cbz	r3, 8007bb8 <_Balloc+0x50>
 8007b96:	69e3      	ldr	r3, [r4, #28]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b9e:	b9b8      	cbnz	r0, 8007bd0 <_Balloc+0x68>
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ba6:	1d72      	adds	r2, r6, #5
 8007ba8:	0092      	lsls	r2, r2, #2
 8007baa:	4620      	mov	r0, r4
 8007bac:	f000 fd36 	bl	800861c <_calloc_r>
 8007bb0:	b160      	cbz	r0, 8007bcc <_Balloc+0x64>
 8007bb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bb6:	e00e      	b.n	8007bd6 <_Balloc+0x6e>
 8007bb8:	2221      	movs	r2, #33	; 0x21
 8007bba:	2104      	movs	r1, #4
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f000 fd2d 	bl	800861c <_calloc_r>
 8007bc2:	69e3      	ldr	r3, [r4, #28]
 8007bc4:	60f0      	str	r0, [r6, #12]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e4      	bne.n	8007b96 <_Balloc+0x2e>
 8007bcc:	2000      	movs	r0, #0
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	6802      	ldr	r2, [r0, #0]
 8007bd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007bdc:	e7f7      	b.n	8007bce <_Balloc+0x66>
 8007bde:	bf00      	nop
 8007be0:	080088e9 	.word	0x080088e9
 8007be4:	0800897a 	.word	0x0800897a

08007be8 <_Bfree>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	69c6      	ldr	r6, [r0, #28]
 8007bec:	4605      	mov	r5, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	b976      	cbnz	r6, 8007c10 <_Bfree+0x28>
 8007bf2:	2010      	movs	r0, #16
 8007bf4:	f7ff fe56 	bl	80078a4 <malloc>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	61e8      	str	r0, [r5, #28]
 8007bfc:	b920      	cbnz	r0, 8007c08 <_Bfree+0x20>
 8007bfe:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <_Bfree+0x3c>)
 8007c00:	4809      	ldr	r0, [pc, #36]	; (8007c28 <_Bfree+0x40>)
 8007c02:	218f      	movs	r1, #143	; 0x8f
 8007c04:	f000 fcec 	bl	80085e0 <__assert_func>
 8007c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c0c:	6006      	str	r6, [r0, #0]
 8007c0e:	60c6      	str	r6, [r0, #12]
 8007c10:	b13c      	cbz	r4, 8007c22 <_Bfree+0x3a>
 8007c12:	69eb      	ldr	r3, [r5, #28]
 8007c14:	6862      	ldr	r2, [r4, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c1c:	6021      	str	r1, [r4, #0]
 8007c1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	080088e9 	.word	0x080088e9
 8007c28:	0800897a 	.word	0x0800897a

08007c2c <__multadd>:
 8007c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c30:	690d      	ldr	r5, [r1, #16]
 8007c32:	4607      	mov	r7, r0
 8007c34:	460c      	mov	r4, r1
 8007c36:	461e      	mov	r6, r3
 8007c38:	f101 0c14 	add.w	ip, r1, #20
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	f8dc 3000 	ldr.w	r3, [ip]
 8007c42:	b299      	uxth	r1, r3
 8007c44:	fb02 6101 	mla	r1, r2, r1, r6
 8007c48:	0c1e      	lsrs	r6, r3, #16
 8007c4a:	0c0b      	lsrs	r3, r1, #16
 8007c4c:	fb02 3306 	mla	r3, r2, r6, r3
 8007c50:	b289      	uxth	r1, r1
 8007c52:	3001      	adds	r0, #1
 8007c54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c58:	4285      	cmp	r5, r0
 8007c5a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c62:	dcec      	bgt.n	8007c3e <__multadd+0x12>
 8007c64:	b30e      	cbz	r6, 8007caa <__multadd+0x7e>
 8007c66:	68a3      	ldr	r3, [r4, #8]
 8007c68:	42ab      	cmp	r3, r5
 8007c6a:	dc19      	bgt.n	8007ca0 <__multadd+0x74>
 8007c6c:	6861      	ldr	r1, [r4, #4]
 8007c6e:	4638      	mov	r0, r7
 8007c70:	3101      	adds	r1, #1
 8007c72:	f7ff ff79 	bl	8007b68 <_Balloc>
 8007c76:	4680      	mov	r8, r0
 8007c78:	b928      	cbnz	r0, 8007c86 <__multadd+0x5a>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	4b0c      	ldr	r3, [pc, #48]	; (8007cb0 <__multadd+0x84>)
 8007c7e:	480d      	ldr	r0, [pc, #52]	; (8007cb4 <__multadd+0x88>)
 8007c80:	21ba      	movs	r1, #186	; 0xba
 8007c82:	f000 fcad 	bl	80085e0 <__assert_func>
 8007c86:	6922      	ldr	r2, [r4, #16]
 8007c88:	3202      	adds	r2, #2
 8007c8a:	f104 010c 	add.w	r1, r4, #12
 8007c8e:	0092      	lsls	r2, r2, #2
 8007c90:	300c      	adds	r0, #12
 8007c92:	f000 fc97 	bl	80085c4 <memcpy>
 8007c96:	4621      	mov	r1, r4
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f7ff ffa5 	bl	8007be8 <_Bfree>
 8007c9e:	4644      	mov	r4, r8
 8007ca0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ca4:	3501      	adds	r5, #1
 8007ca6:	615e      	str	r6, [r3, #20]
 8007ca8:	6125      	str	r5, [r4, #16]
 8007caa:	4620      	mov	r0, r4
 8007cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb0:	08008958 	.word	0x08008958
 8007cb4:	0800897a 	.word	0x0800897a

08007cb8 <__hi0bits>:
 8007cb8:	0c03      	lsrs	r3, r0, #16
 8007cba:	041b      	lsls	r3, r3, #16
 8007cbc:	b9d3      	cbnz	r3, 8007cf4 <__hi0bits+0x3c>
 8007cbe:	0400      	lsls	r0, r0, #16
 8007cc0:	2310      	movs	r3, #16
 8007cc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007cc6:	bf04      	itt	eq
 8007cc8:	0200      	lsleq	r0, r0, #8
 8007cca:	3308      	addeq	r3, #8
 8007ccc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007cd0:	bf04      	itt	eq
 8007cd2:	0100      	lsleq	r0, r0, #4
 8007cd4:	3304      	addeq	r3, #4
 8007cd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007cda:	bf04      	itt	eq
 8007cdc:	0080      	lsleq	r0, r0, #2
 8007cde:	3302      	addeq	r3, #2
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	db05      	blt.n	8007cf0 <__hi0bits+0x38>
 8007ce4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ce8:	f103 0301 	add.w	r3, r3, #1
 8007cec:	bf08      	it	eq
 8007cee:	2320      	moveq	r3, #32
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	4770      	bx	lr
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	e7e4      	b.n	8007cc2 <__hi0bits+0xa>

08007cf8 <__lo0bits>:
 8007cf8:	6803      	ldr	r3, [r0, #0]
 8007cfa:	f013 0207 	ands.w	r2, r3, #7
 8007cfe:	d00c      	beq.n	8007d1a <__lo0bits+0x22>
 8007d00:	07d9      	lsls	r1, r3, #31
 8007d02:	d422      	bmi.n	8007d4a <__lo0bits+0x52>
 8007d04:	079a      	lsls	r2, r3, #30
 8007d06:	bf49      	itett	mi
 8007d08:	085b      	lsrmi	r3, r3, #1
 8007d0a:	089b      	lsrpl	r3, r3, #2
 8007d0c:	6003      	strmi	r3, [r0, #0]
 8007d0e:	2201      	movmi	r2, #1
 8007d10:	bf5c      	itt	pl
 8007d12:	6003      	strpl	r3, [r0, #0]
 8007d14:	2202      	movpl	r2, #2
 8007d16:	4610      	mov	r0, r2
 8007d18:	4770      	bx	lr
 8007d1a:	b299      	uxth	r1, r3
 8007d1c:	b909      	cbnz	r1, 8007d22 <__lo0bits+0x2a>
 8007d1e:	0c1b      	lsrs	r3, r3, #16
 8007d20:	2210      	movs	r2, #16
 8007d22:	b2d9      	uxtb	r1, r3
 8007d24:	b909      	cbnz	r1, 8007d2a <__lo0bits+0x32>
 8007d26:	3208      	adds	r2, #8
 8007d28:	0a1b      	lsrs	r3, r3, #8
 8007d2a:	0719      	lsls	r1, r3, #28
 8007d2c:	bf04      	itt	eq
 8007d2e:	091b      	lsreq	r3, r3, #4
 8007d30:	3204      	addeq	r2, #4
 8007d32:	0799      	lsls	r1, r3, #30
 8007d34:	bf04      	itt	eq
 8007d36:	089b      	lsreq	r3, r3, #2
 8007d38:	3202      	addeq	r2, #2
 8007d3a:	07d9      	lsls	r1, r3, #31
 8007d3c:	d403      	bmi.n	8007d46 <__lo0bits+0x4e>
 8007d3e:	085b      	lsrs	r3, r3, #1
 8007d40:	f102 0201 	add.w	r2, r2, #1
 8007d44:	d003      	beq.n	8007d4e <__lo0bits+0x56>
 8007d46:	6003      	str	r3, [r0, #0]
 8007d48:	e7e5      	b.n	8007d16 <__lo0bits+0x1e>
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	e7e3      	b.n	8007d16 <__lo0bits+0x1e>
 8007d4e:	2220      	movs	r2, #32
 8007d50:	e7e1      	b.n	8007d16 <__lo0bits+0x1e>
	...

08007d54 <__i2b>:
 8007d54:	b510      	push	{r4, lr}
 8007d56:	460c      	mov	r4, r1
 8007d58:	2101      	movs	r1, #1
 8007d5a:	f7ff ff05 	bl	8007b68 <_Balloc>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	b928      	cbnz	r0, 8007d6e <__i2b+0x1a>
 8007d62:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <__i2b+0x24>)
 8007d64:	4805      	ldr	r0, [pc, #20]	; (8007d7c <__i2b+0x28>)
 8007d66:	f240 1145 	movw	r1, #325	; 0x145
 8007d6a:	f000 fc39 	bl	80085e0 <__assert_func>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	6144      	str	r4, [r0, #20]
 8007d72:	6103      	str	r3, [r0, #16]
 8007d74:	bd10      	pop	{r4, pc}
 8007d76:	bf00      	nop
 8007d78:	08008958 	.word	0x08008958
 8007d7c:	0800897a 	.word	0x0800897a

08007d80 <__multiply>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	4691      	mov	r9, r2
 8007d86:	690a      	ldr	r2, [r1, #16]
 8007d88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	bfb8      	it	lt
 8007d90:	460b      	movlt	r3, r1
 8007d92:	460c      	mov	r4, r1
 8007d94:	bfbc      	itt	lt
 8007d96:	464c      	movlt	r4, r9
 8007d98:	4699      	movlt	r9, r3
 8007d9a:	6927      	ldr	r7, [r4, #16]
 8007d9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007da0:	68a3      	ldr	r3, [r4, #8]
 8007da2:	6861      	ldr	r1, [r4, #4]
 8007da4:	eb07 060a 	add.w	r6, r7, sl
 8007da8:	42b3      	cmp	r3, r6
 8007daa:	b085      	sub	sp, #20
 8007dac:	bfb8      	it	lt
 8007dae:	3101      	addlt	r1, #1
 8007db0:	f7ff feda 	bl	8007b68 <_Balloc>
 8007db4:	b930      	cbnz	r0, 8007dc4 <__multiply+0x44>
 8007db6:	4602      	mov	r2, r0
 8007db8:	4b44      	ldr	r3, [pc, #272]	; (8007ecc <__multiply+0x14c>)
 8007dba:	4845      	ldr	r0, [pc, #276]	; (8007ed0 <__multiply+0x150>)
 8007dbc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007dc0:	f000 fc0e 	bl	80085e0 <__assert_func>
 8007dc4:	f100 0514 	add.w	r5, r0, #20
 8007dc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007dcc:	462b      	mov	r3, r5
 8007dce:	2200      	movs	r2, #0
 8007dd0:	4543      	cmp	r3, r8
 8007dd2:	d321      	bcc.n	8007e18 <__multiply+0x98>
 8007dd4:	f104 0314 	add.w	r3, r4, #20
 8007dd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ddc:	f109 0314 	add.w	r3, r9, #20
 8007de0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007de4:	9202      	str	r2, [sp, #8]
 8007de6:	1b3a      	subs	r2, r7, r4
 8007de8:	3a15      	subs	r2, #21
 8007dea:	f022 0203 	bic.w	r2, r2, #3
 8007dee:	3204      	adds	r2, #4
 8007df0:	f104 0115 	add.w	r1, r4, #21
 8007df4:	428f      	cmp	r7, r1
 8007df6:	bf38      	it	cc
 8007df8:	2204      	movcc	r2, #4
 8007dfa:	9201      	str	r2, [sp, #4]
 8007dfc:	9a02      	ldr	r2, [sp, #8]
 8007dfe:	9303      	str	r3, [sp, #12]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d80c      	bhi.n	8007e1e <__multiply+0x9e>
 8007e04:	2e00      	cmp	r6, #0
 8007e06:	dd03      	ble.n	8007e10 <__multiply+0x90>
 8007e08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d05b      	beq.n	8007ec8 <__multiply+0x148>
 8007e10:	6106      	str	r6, [r0, #16]
 8007e12:	b005      	add	sp, #20
 8007e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e18:	f843 2b04 	str.w	r2, [r3], #4
 8007e1c:	e7d8      	b.n	8007dd0 <__multiply+0x50>
 8007e1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e22:	f1ba 0f00 	cmp.w	sl, #0
 8007e26:	d024      	beq.n	8007e72 <__multiply+0xf2>
 8007e28:	f104 0e14 	add.w	lr, r4, #20
 8007e2c:	46a9      	mov	r9, r5
 8007e2e:	f04f 0c00 	mov.w	ip, #0
 8007e32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007e36:	f8d9 1000 	ldr.w	r1, [r9]
 8007e3a:	fa1f fb82 	uxth.w	fp, r2
 8007e3e:	b289      	uxth	r1, r1
 8007e40:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007e48:	f8d9 2000 	ldr.w	r2, [r9]
 8007e4c:	4461      	add	r1, ip
 8007e4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e52:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e5a:	b289      	uxth	r1, r1
 8007e5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e60:	4577      	cmp	r7, lr
 8007e62:	f849 1b04 	str.w	r1, [r9], #4
 8007e66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e6a:	d8e2      	bhi.n	8007e32 <__multiply+0xb2>
 8007e6c:	9a01      	ldr	r2, [sp, #4]
 8007e6e:	f845 c002 	str.w	ip, [r5, r2]
 8007e72:	9a03      	ldr	r2, [sp, #12]
 8007e74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	f1b9 0f00 	cmp.w	r9, #0
 8007e7e:	d021      	beq.n	8007ec4 <__multiply+0x144>
 8007e80:	6829      	ldr	r1, [r5, #0]
 8007e82:	f104 0c14 	add.w	ip, r4, #20
 8007e86:	46ae      	mov	lr, r5
 8007e88:	f04f 0a00 	mov.w	sl, #0
 8007e8c:	f8bc b000 	ldrh.w	fp, [ip]
 8007e90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e94:	fb09 220b 	mla	r2, r9, fp, r2
 8007e98:	4452      	add	r2, sl
 8007e9a:	b289      	uxth	r1, r1
 8007e9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ea0:	f84e 1b04 	str.w	r1, [lr], #4
 8007ea4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ea8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007eac:	f8be 1000 	ldrh.w	r1, [lr]
 8007eb0:	fb09 110a 	mla	r1, r9, sl, r1
 8007eb4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007eb8:	4567      	cmp	r7, ip
 8007eba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ebe:	d8e5      	bhi.n	8007e8c <__multiply+0x10c>
 8007ec0:	9a01      	ldr	r2, [sp, #4]
 8007ec2:	50a9      	str	r1, [r5, r2]
 8007ec4:	3504      	adds	r5, #4
 8007ec6:	e799      	b.n	8007dfc <__multiply+0x7c>
 8007ec8:	3e01      	subs	r6, #1
 8007eca:	e79b      	b.n	8007e04 <__multiply+0x84>
 8007ecc:	08008958 	.word	0x08008958
 8007ed0:	0800897a 	.word	0x0800897a

08007ed4 <__pow5mult>:
 8007ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ed8:	4615      	mov	r5, r2
 8007eda:	f012 0203 	ands.w	r2, r2, #3
 8007ede:	4606      	mov	r6, r0
 8007ee0:	460f      	mov	r7, r1
 8007ee2:	d007      	beq.n	8007ef4 <__pow5mult+0x20>
 8007ee4:	4c25      	ldr	r4, [pc, #148]	; (8007f7c <__pow5mult+0xa8>)
 8007ee6:	3a01      	subs	r2, #1
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007eee:	f7ff fe9d 	bl	8007c2c <__multadd>
 8007ef2:	4607      	mov	r7, r0
 8007ef4:	10ad      	asrs	r5, r5, #2
 8007ef6:	d03d      	beq.n	8007f74 <__pow5mult+0xa0>
 8007ef8:	69f4      	ldr	r4, [r6, #28]
 8007efa:	b97c      	cbnz	r4, 8007f1c <__pow5mult+0x48>
 8007efc:	2010      	movs	r0, #16
 8007efe:	f7ff fcd1 	bl	80078a4 <malloc>
 8007f02:	4602      	mov	r2, r0
 8007f04:	61f0      	str	r0, [r6, #28]
 8007f06:	b928      	cbnz	r0, 8007f14 <__pow5mult+0x40>
 8007f08:	4b1d      	ldr	r3, [pc, #116]	; (8007f80 <__pow5mult+0xac>)
 8007f0a:	481e      	ldr	r0, [pc, #120]	; (8007f84 <__pow5mult+0xb0>)
 8007f0c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007f10:	f000 fb66 	bl	80085e0 <__assert_func>
 8007f14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f18:	6004      	str	r4, [r0, #0]
 8007f1a:	60c4      	str	r4, [r0, #12]
 8007f1c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007f20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f24:	b94c      	cbnz	r4, 8007f3a <__pow5mult+0x66>
 8007f26:	f240 2171 	movw	r1, #625	; 0x271
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f7ff ff12 	bl	8007d54 <__i2b>
 8007f30:	2300      	movs	r3, #0
 8007f32:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f36:	4604      	mov	r4, r0
 8007f38:	6003      	str	r3, [r0, #0]
 8007f3a:	f04f 0900 	mov.w	r9, #0
 8007f3e:	07eb      	lsls	r3, r5, #31
 8007f40:	d50a      	bpl.n	8007f58 <__pow5mult+0x84>
 8007f42:	4639      	mov	r1, r7
 8007f44:	4622      	mov	r2, r4
 8007f46:	4630      	mov	r0, r6
 8007f48:	f7ff ff1a 	bl	8007d80 <__multiply>
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	4680      	mov	r8, r0
 8007f50:	4630      	mov	r0, r6
 8007f52:	f7ff fe49 	bl	8007be8 <_Bfree>
 8007f56:	4647      	mov	r7, r8
 8007f58:	106d      	asrs	r5, r5, #1
 8007f5a:	d00b      	beq.n	8007f74 <__pow5mult+0xa0>
 8007f5c:	6820      	ldr	r0, [r4, #0]
 8007f5e:	b938      	cbnz	r0, 8007f70 <__pow5mult+0x9c>
 8007f60:	4622      	mov	r2, r4
 8007f62:	4621      	mov	r1, r4
 8007f64:	4630      	mov	r0, r6
 8007f66:	f7ff ff0b 	bl	8007d80 <__multiply>
 8007f6a:	6020      	str	r0, [r4, #0]
 8007f6c:	f8c0 9000 	str.w	r9, [r0]
 8007f70:	4604      	mov	r4, r0
 8007f72:	e7e4      	b.n	8007f3e <__pow5mult+0x6a>
 8007f74:	4638      	mov	r0, r7
 8007f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f7a:	bf00      	nop
 8007f7c:	08008ac8 	.word	0x08008ac8
 8007f80:	080088e9 	.word	0x080088e9
 8007f84:	0800897a 	.word	0x0800897a

08007f88 <__lshift>:
 8007f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	6849      	ldr	r1, [r1, #4]
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f96:	68a3      	ldr	r3, [r4, #8]
 8007f98:	4607      	mov	r7, r0
 8007f9a:	4691      	mov	r9, r2
 8007f9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fa0:	f108 0601 	add.w	r6, r8, #1
 8007fa4:	42b3      	cmp	r3, r6
 8007fa6:	db0b      	blt.n	8007fc0 <__lshift+0x38>
 8007fa8:	4638      	mov	r0, r7
 8007faa:	f7ff fddd 	bl	8007b68 <_Balloc>
 8007fae:	4605      	mov	r5, r0
 8007fb0:	b948      	cbnz	r0, 8007fc6 <__lshift+0x3e>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	4b28      	ldr	r3, [pc, #160]	; (8008058 <__lshift+0xd0>)
 8007fb6:	4829      	ldr	r0, [pc, #164]	; (800805c <__lshift+0xd4>)
 8007fb8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007fbc:	f000 fb10 	bl	80085e0 <__assert_func>
 8007fc0:	3101      	adds	r1, #1
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	e7ee      	b.n	8007fa4 <__lshift+0x1c>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f100 0114 	add.w	r1, r0, #20
 8007fcc:	f100 0210 	add.w	r2, r0, #16
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	4553      	cmp	r3, sl
 8007fd4:	db33      	blt.n	800803e <__lshift+0xb6>
 8007fd6:	6920      	ldr	r0, [r4, #16]
 8007fd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fdc:	f104 0314 	add.w	r3, r4, #20
 8007fe0:	f019 091f 	ands.w	r9, r9, #31
 8007fe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fe8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007fec:	d02b      	beq.n	8008046 <__lshift+0xbe>
 8007fee:	f1c9 0e20 	rsb	lr, r9, #32
 8007ff2:	468a      	mov	sl, r1
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	6818      	ldr	r0, [r3, #0]
 8007ff8:	fa00 f009 	lsl.w	r0, r0, r9
 8007ffc:	4310      	orrs	r0, r2
 8007ffe:	f84a 0b04 	str.w	r0, [sl], #4
 8008002:	f853 2b04 	ldr.w	r2, [r3], #4
 8008006:	459c      	cmp	ip, r3
 8008008:	fa22 f20e 	lsr.w	r2, r2, lr
 800800c:	d8f3      	bhi.n	8007ff6 <__lshift+0x6e>
 800800e:	ebac 0304 	sub.w	r3, ip, r4
 8008012:	3b15      	subs	r3, #21
 8008014:	f023 0303 	bic.w	r3, r3, #3
 8008018:	3304      	adds	r3, #4
 800801a:	f104 0015 	add.w	r0, r4, #21
 800801e:	4584      	cmp	ip, r0
 8008020:	bf38      	it	cc
 8008022:	2304      	movcc	r3, #4
 8008024:	50ca      	str	r2, [r1, r3]
 8008026:	b10a      	cbz	r2, 800802c <__lshift+0xa4>
 8008028:	f108 0602 	add.w	r6, r8, #2
 800802c:	3e01      	subs	r6, #1
 800802e:	4638      	mov	r0, r7
 8008030:	612e      	str	r6, [r5, #16]
 8008032:	4621      	mov	r1, r4
 8008034:	f7ff fdd8 	bl	8007be8 <_Bfree>
 8008038:	4628      	mov	r0, r5
 800803a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008042:	3301      	adds	r3, #1
 8008044:	e7c5      	b.n	8007fd2 <__lshift+0x4a>
 8008046:	3904      	subs	r1, #4
 8008048:	f853 2b04 	ldr.w	r2, [r3], #4
 800804c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008050:	459c      	cmp	ip, r3
 8008052:	d8f9      	bhi.n	8008048 <__lshift+0xc0>
 8008054:	e7ea      	b.n	800802c <__lshift+0xa4>
 8008056:	bf00      	nop
 8008058:	08008958 	.word	0x08008958
 800805c:	0800897a 	.word	0x0800897a

08008060 <__mcmp>:
 8008060:	b530      	push	{r4, r5, lr}
 8008062:	6902      	ldr	r2, [r0, #16]
 8008064:	690c      	ldr	r4, [r1, #16]
 8008066:	1b12      	subs	r2, r2, r4
 8008068:	d10e      	bne.n	8008088 <__mcmp+0x28>
 800806a:	f100 0314 	add.w	r3, r0, #20
 800806e:	3114      	adds	r1, #20
 8008070:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008074:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008078:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800807c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008080:	42a5      	cmp	r5, r4
 8008082:	d003      	beq.n	800808c <__mcmp+0x2c>
 8008084:	d305      	bcc.n	8008092 <__mcmp+0x32>
 8008086:	2201      	movs	r2, #1
 8008088:	4610      	mov	r0, r2
 800808a:	bd30      	pop	{r4, r5, pc}
 800808c:	4283      	cmp	r3, r0
 800808e:	d3f3      	bcc.n	8008078 <__mcmp+0x18>
 8008090:	e7fa      	b.n	8008088 <__mcmp+0x28>
 8008092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008096:	e7f7      	b.n	8008088 <__mcmp+0x28>

08008098 <__mdiff>:
 8008098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809c:	460c      	mov	r4, r1
 800809e:	4606      	mov	r6, r0
 80080a0:	4611      	mov	r1, r2
 80080a2:	4620      	mov	r0, r4
 80080a4:	4690      	mov	r8, r2
 80080a6:	f7ff ffdb 	bl	8008060 <__mcmp>
 80080aa:	1e05      	subs	r5, r0, #0
 80080ac:	d110      	bne.n	80080d0 <__mdiff+0x38>
 80080ae:	4629      	mov	r1, r5
 80080b0:	4630      	mov	r0, r6
 80080b2:	f7ff fd59 	bl	8007b68 <_Balloc>
 80080b6:	b930      	cbnz	r0, 80080c6 <__mdiff+0x2e>
 80080b8:	4b3a      	ldr	r3, [pc, #232]	; (80081a4 <__mdiff+0x10c>)
 80080ba:	4602      	mov	r2, r0
 80080bc:	f240 2137 	movw	r1, #567	; 0x237
 80080c0:	4839      	ldr	r0, [pc, #228]	; (80081a8 <__mdiff+0x110>)
 80080c2:	f000 fa8d 	bl	80085e0 <__assert_func>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d0:	bfa4      	itt	ge
 80080d2:	4643      	movge	r3, r8
 80080d4:	46a0      	movge	r8, r4
 80080d6:	4630      	mov	r0, r6
 80080d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80080dc:	bfa6      	itte	ge
 80080de:	461c      	movge	r4, r3
 80080e0:	2500      	movge	r5, #0
 80080e2:	2501      	movlt	r5, #1
 80080e4:	f7ff fd40 	bl	8007b68 <_Balloc>
 80080e8:	b920      	cbnz	r0, 80080f4 <__mdiff+0x5c>
 80080ea:	4b2e      	ldr	r3, [pc, #184]	; (80081a4 <__mdiff+0x10c>)
 80080ec:	4602      	mov	r2, r0
 80080ee:	f240 2145 	movw	r1, #581	; 0x245
 80080f2:	e7e5      	b.n	80080c0 <__mdiff+0x28>
 80080f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80080f8:	6926      	ldr	r6, [r4, #16]
 80080fa:	60c5      	str	r5, [r0, #12]
 80080fc:	f104 0914 	add.w	r9, r4, #20
 8008100:	f108 0514 	add.w	r5, r8, #20
 8008104:	f100 0e14 	add.w	lr, r0, #20
 8008108:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800810c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008110:	f108 0210 	add.w	r2, r8, #16
 8008114:	46f2      	mov	sl, lr
 8008116:	2100      	movs	r1, #0
 8008118:	f859 3b04 	ldr.w	r3, [r9], #4
 800811c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008120:	fa11 f88b 	uxtah	r8, r1, fp
 8008124:	b299      	uxth	r1, r3
 8008126:	0c1b      	lsrs	r3, r3, #16
 8008128:	eba8 0801 	sub.w	r8, r8, r1
 800812c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008130:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008134:	fa1f f888 	uxth.w	r8, r8
 8008138:	1419      	asrs	r1, r3, #16
 800813a:	454e      	cmp	r6, r9
 800813c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008140:	f84a 3b04 	str.w	r3, [sl], #4
 8008144:	d8e8      	bhi.n	8008118 <__mdiff+0x80>
 8008146:	1b33      	subs	r3, r6, r4
 8008148:	3b15      	subs	r3, #21
 800814a:	f023 0303 	bic.w	r3, r3, #3
 800814e:	3304      	adds	r3, #4
 8008150:	3415      	adds	r4, #21
 8008152:	42a6      	cmp	r6, r4
 8008154:	bf38      	it	cc
 8008156:	2304      	movcc	r3, #4
 8008158:	441d      	add	r5, r3
 800815a:	4473      	add	r3, lr
 800815c:	469e      	mov	lr, r3
 800815e:	462e      	mov	r6, r5
 8008160:	4566      	cmp	r6, ip
 8008162:	d30e      	bcc.n	8008182 <__mdiff+0xea>
 8008164:	f10c 0203 	add.w	r2, ip, #3
 8008168:	1b52      	subs	r2, r2, r5
 800816a:	f022 0203 	bic.w	r2, r2, #3
 800816e:	3d03      	subs	r5, #3
 8008170:	45ac      	cmp	ip, r5
 8008172:	bf38      	it	cc
 8008174:	2200      	movcc	r2, #0
 8008176:	4413      	add	r3, r2
 8008178:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800817c:	b17a      	cbz	r2, 800819e <__mdiff+0x106>
 800817e:	6107      	str	r7, [r0, #16]
 8008180:	e7a4      	b.n	80080cc <__mdiff+0x34>
 8008182:	f856 8b04 	ldr.w	r8, [r6], #4
 8008186:	fa11 f288 	uxtah	r2, r1, r8
 800818a:	1414      	asrs	r4, r2, #16
 800818c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008190:	b292      	uxth	r2, r2
 8008192:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008196:	f84e 2b04 	str.w	r2, [lr], #4
 800819a:	1421      	asrs	r1, r4, #16
 800819c:	e7e0      	b.n	8008160 <__mdiff+0xc8>
 800819e:	3f01      	subs	r7, #1
 80081a0:	e7ea      	b.n	8008178 <__mdiff+0xe0>
 80081a2:	bf00      	nop
 80081a4:	08008958 	.word	0x08008958
 80081a8:	0800897a 	.word	0x0800897a

080081ac <__d2b>:
 80081ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081b0:	460f      	mov	r7, r1
 80081b2:	2101      	movs	r1, #1
 80081b4:	ec59 8b10 	vmov	r8, r9, d0
 80081b8:	4616      	mov	r6, r2
 80081ba:	f7ff fcd5 	bl	8007b68 <_Balloc>
 80081be:	4604      	mov	r4, r0
 80081c0:	b930      	cbnz	r0, 80081d0 <__d2b+0x24>
 80081c2:	4602      	mov	r2, r0
 80081c4:	4b24      	ldr	r3, [pc, #144]	; (8008258 <__d2b+0xac>)
 80081c6:	4825      	ldr	r0, [pc, #148]	; (800825c <__d2b+0xb0>)
 80081c8:	f240 310f 	movw	r1, #783	; 0x30f
 80081cc:	f000 fa08 	bl	80085e0 <__assert_func>
 80081d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80081d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081d8:	bb2d      	cbnz	r5, 8008226 <__d2b+0x7a>
 80081da:	9301      	str	r3, [sp, #4]
 80081dc:	f1b8 0300 	subs.w	r3, r8, #0
 80081e0:	d026      	beq.n	8008230 <__d2b+0x84>
 80081e2:	4668      	mov	r0, sp
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	f7ff fd87 	bl	8007cf8 <__lo0bits>
 80081ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 80081ee:	b1e8      	cbz	r0, 800822c <__d2b+0x80>
 80081f0:	f1c0 0320 	rsb	r3, r0, #32
 80081f4:	fa02 f303 	lsl.w	r3, r2, r3
 80081f8:	430b      	orrs	r3, r1
 80081fa:	40c2      	lsrs	r2, r0
 80081fc:	6163      	str	r3, [r4, #20]
 80081fe:	9201      	str	r2, [sp, #4]
 8008200:	9b01      	ldr	r3, [sp, #4]
 8008202:	61a3      	str	r3, [r4, #24]
 8008204:	2b00      	cmp	r3, #0
 8008206:	bf14      	ite	ne
 8008208:	2202      	movne	r2, #2
 800820a:	2201      	moveq	r2, #1
 800820c:	6122      	str	r2, [r4, #16]
 800820e:	b1bd      	cbz	r5, 8008240 <__d2b+0x94>
 8008210:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008214:	4405      	add	r5, r0
 8008216:	603d      	str	r5, [r7, #0]
 8008218:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800821c:	6030      	str	r0, [r6, #0]
 800821e:	4620      	mov	r0, r4
 8008220:	b003      	add	sp, #12
 8008222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800822a:	e7d6      	b.n	80081da <__d2b+0x2e>
 800822c:	6161      	str	r1, [r4, #20]
 800822e:	e7e7      	b.n	8008200 <__d2b+0x54>
 8008230:	a801      	add	r0, sp, #4
 8008232:	f7ff fd61 	bl	8007cf8 <__lo0bits>
 8008236:	9b01      	ldr	r3, [sp, #4]
 8008238:	6163      	str	r3, [r4, #20]
 800823a:	3020      	adds	r0, #32
 800823c:	2201      	movs	r2, #1
 800823e:	e7e5      	b.n	800820c <__d2b+0x60>
 8008240:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008244:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008248:	6038      	str	r0, [r7, #0]
 800824a:	6918      	ldr	r0, [r3, #16]
 800824c:	f7ff fd34 	bl	8007cb8 <__hi0bits>
 8008250:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008254:	e7e2      	b.n	800821c <__d2b+0x70>
 8008256:	bf00      	nop
 8008258:	08008958 	.word	0x08008958
 800825c:	0800897a 	.word	0x0800897a

08008260 <__sread>:
 8008260:	b510      	push	{r4, lr}
 8008262:	460c      	mov	r4, r1
 8008264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008268:	f000 f978 	bl	800855c <_read_r>
 800826c:	2800      	cmp	r0, #0
 800826e:	bfab      	itete	ge
 8008270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008272:	89a3      	ldrhlt	r3, [r4, #12]
 8008274:	181b      	addge	r3, r3, r0
 8008276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800827a:	bfac      	ite	ge
 800827c:	6563      	strge	r3, [r4, #84]	; 0x54
 800827e:	81a3      	strhlt	r3, [r4, #12]
 8008280:	bd10      	pop	{r4, pc}

08008282 <__swrite>:
 8008282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008286:	461f      	mov	r7, r3
 8008288:	898b      	ldrh	r3, [r1, #12]
 800828a:	05db      	lsls	r3, r3, #23
 800828c:	4605      	mov	r5, r0
 800828e:	460c      	mov	r4, r1
 8008290:	4616      	mov	r6, r2
 8008292:	d505      	bpl.n	80082a0 <__swrite+0x1e>
 8008294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008298:	2302      	movs	r3, #2
 800829a:	2200      	movs	r2, #0
 800829c:	f000 f94c 	bl	8008538 <_lseek_r>
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082aa:	81a3      	strh	r3, [r4, #12]
 80082ac:	4632      	mov	r2, r6
 80082ae:	463b      	mov	r3, r7
 80082b0:	4628      	mov	r0, r5
 80082b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082b6:	f000 b973 	b.w	80085a0 <_write_r>

080082ba <__sseek>:
 80082ba:	b510      	push	{r4, lr}
 80082bc:	460c      	mov	r4, r1
 80082be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c2:	f000 f939 	bl	8008538 <_lseek_r>
 80082c6:	1c43      	adds	r3, r0, #1
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	bf15      	itete	ne
 80082cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80082ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082d6:	81a3      	strheq	r3, [r4, #12]
 80082d8:	bf18      	it	ne
 80082da:	81a3      	strhne	r3, [r4, #12]
 80082dc:	bd10      	pop	{r4, pc}

080082de <__sclose>:
 80082de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e2:	f000 b8f7 	b.w	80084d4 <_close_r>

080082e6 <__swbuf_r>:
 80082e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e8:	460e      	mov	r6, r1
 80082ea:	4614      	mov	r4, r2
 80082ec:	4605      	mov	r5, r0
 80082ee:	b118      	cbz	r0, 80082f8 <__swbuf_r+0x12>
 80082f0:	6a03      	ldr	r3, [r0, #32]
 80082f2:	b90b      	cbnz	r3, 80082f8 <__swbuf_r+0x12>
 80082f4:	f7fe fa3a 	bl	800676c <__sinit>
 80082f8:	69a3      	ldr	r3, [r4, #24]
 80082fa:	60a3      	str	r3, [r4, #8]
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	071a      	lsls	r2, r3, #28
 8008300:	d525      	bpl.n	800834e <__swbuf_r+0x68>
 8008302:	6923      	ldr	r3, [r4, #16]
 8008304:	b31b      	cbz	r3, 800834e <__swbuf_r+0x68>
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	6922      	ldr	r2, [r4, #16]
 800830a:	1a98      	subs	r0, r3, r2
 800830c:	6963      	ldr	r3, [r4, #20]
 800830e:	b2f6      	uxtb	r6, r6
 8008310:	4283      	cmp	r3, r0
 8008312:	4637      	mov	r7, r6
 8008314:	dc04      	bgt.n	8008320 <__swbuf_r+0x3a>
 8008316:	4621      	mov	r1, r4
 8008318:	4628      	mov	r0, r5
 800831a:	f7ff fbf1 	bl	8007b00 <_fflush_r>
 800831e:	b9e0      	cbnz	r0, 800835a <__swbuf_r+0x74>
 8008320:	68a3      	ldr	r3, [r4, #8]
 8008322:	3b01      	subs	r3, #1
 8008324:	60a3      	str	r3, [r4, #8]
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	1c5a      	adds	r2, r3, #1
 800832a:	6022      	str	r2, [r4, #0]
 800832c:	701e      	strb	r6, [r3, #0]
 800832e:	6962      	ldr	r2, [r4, #20]
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	429a      	cmp	r2, r3
 8008334:	d004      	beq.n	8008340 <__swbuf_r+0x5a>
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	07db      	lsls	r3, r3, #31
 800833a:	d506      	bpl.n	800834a <__swbuf_r+0x64>
 800833c:	2e0a      	cmp	r6, #10
 800833e:	d104      	bne.n	800834a <__swbuf_r+0x64>
 8008340:	4621      	mov	r1, r4
 8008342:	4628      	mov	r0, r5
 8008344:	f7ff fbdc 	bl	8007b00 <_fflush_r>
 8008348:	b938      	cbnz	r0, 800835a <__swbuf_r+0x74>
 800834a:	4638      	mov	r0, r7
 800834c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800834e:	4621      	mov	r1, r4
 8008350:	4628      	mov	r0, r5
 8008352:	f000 f805 	bl	8008360 <__swsetup_r>
 8008356:	2800      	cmp	r0, #0
 8008358:	d0d5      	beq.n	8008306 <__swbuf_r+0x20>
 800835a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800835e:	e7f4      	b.n	800834a <__swbuf_r+0x64>

08008360 <__swsetup_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4b2a      	ldr	r3, [pc, #168]	; (800840c <__swsetup_r+0xac>)
 8008364:	4605      	mov	r5, r0
 8008366:	6818      	ldr	r0, [r3, #0]
 8008368:	460c      	mov	r4, r1
 800836a:	b118      	cbz	r0, 8008374 <__swsetup_r+0x14>
 800836c:	6a03      	ldr	r3, [r0, #32]
 800836e:	b90b      	cbnz	r3, 8008374 <__swsetup_r+0x14>
 8008370:	f7fe f9fc 	bl	800676c <__sinit>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800837a:	0718      	lsls	r0, r3, #28
 800837c:	d422      	bmi.n	80083c4 <__swsetup_r+0x64>
 800837e:	06d9      	lsls	r1, r3, #27
 8008380:	d407      	bmi.n	8008392 <__swsetup_r+0x32>
 8008382:	2309      	movs	r3, #9
 8008384:	602b      	str	r3, [r5, #0]
 8008386:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800838a:	81a3      	strh	r3, [r4, #12]
 800838c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008390:	e034      	b.n	80083fc <__swsetup_r+0x9c>
 8008392:	0758      	lsls	r0, r3, #29
 8008394:	d512      	bpl.n	80083bc <__swsetup_r+0x5c>
 8008396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008398:	b141      	cbz	r1, 80083ac <__swsetup_r+0x4c>
 800839a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800839e:	4299      	cmp	r1, r3
 80083a0:	d002      	beq.n	80083a8 <__swsetup_r+0x48>
 80083a2:	4628      	mov	r0, r5
 80083a4:	f000 f950 	bl	8008648 <_free_r>
 80083a8:	2300      	movs	r3, #0
 80083aa:	6363      	str	r3, [r4, #52]	; 0x34
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083b2:	81a3      	strh	r3, [r4, #12]
 80083b4:	2300      	movs	r3, #0
 80083b6:	6063      	str	r3, [r4, #4]
 80083b8:	6923      	ldr	r3, [r4, #16]
 80083ba:	6023      	str	r3, [r4, #0]
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	f043 0308 	orr.w	r3, r3, #8
 80083c2:	81a3      	strh	r3, [r4, #12]
 80083c4:	6923      	ldr	r3, [r4, #16]
 80083c6:	b94b      	cbnz	r3, 80083dc <__swsetup_r+0x7c>
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083d2:	d003      	beq.n	80083dc <__swsetup_r+0x7c>
 80083d4:	4621      	mov	r1, r4
 80083d6:	4628      	mov	r0, r5
 80083d8:	f000 f840 	bl	800845c <__smakebuf_r>
 80083dc:	89a0      	ldrh	r0, [r4, #12]
 80083de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083e2:	f010 0301 	ands.w	r3, r0, #1
 80083e6:	d00a      	beq.n	80083fe <__swsetup_r+0x9e>
 80083e8:	2300      	movs	r3, #0
 80083ea:	60a3      	str	r3, [r4, #8]
 80083ec:	6963      	ldr	r3, [r4, #20]
 80083ee:	425b      	negs	r3, r3
 80083f0:	61a3      	str	r3, [r4, #24]
 80083f2:	6923      	ldr	r3, [r4, #16]
 80083f4:	b943      	cbnz	r3, 8008408 <__swsetup_r+0xa8>
 80083f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083fa:	d1c4      	bne.n	8008386 <__swsetup_r+0x26>
 80083fc:	bd38      	pop	{r3, r4, r5, pc}
 80083fe:	0781      	lsls	r1, r0, #30
 8008400:	bf58      	it	pl
 8008402:	6963      	ldrpl	r3, [r4, #20]
 8008404:	60a3      	str	r3, [r4, #8]
 8008406:	e7f4      	b.n	80083f2 <__swsetup_r+0x92>
 8008408:	2000      	movs	r0, #0
 800840a:	e7f7      	b.n	80083fc <__swsetup_r+0x9c>
 800840c:	20000064 	.word	0x20000064

08008410 <__swhatbuf_r>:
 8008410:	b570      	push	{r4, r5, r6, lr}
 8008412:	460c      	mov	r4, r1
 8008414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008418:	2900      	cmp	r1, #0
 800841a:	b096      	sub	sp, #88	; 0x58
 800841c:	4615      	mov	r5, r2
 800841e:	461e      	mov	r6, r3
 8008420:	da0d      	bge.n	800843e <__swhatbuf_r+0x2e>
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008428:	f04f 0100 	mov.w	r1, #0
 800842c:	bf0c      	ite	eq
 800842e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008432:	2340      	movne	r3, #64	; 0x40
 8008434:	2000      	movs	r0, #0
 8008436:	6031      	str	r1, [r6, #0]
 8008438:	602b      	str	r3, [r5, #0]
 800843a:	b016      	add	sp, #88	; 0x58
 800843c:	bd70      	pop	{r4, r5, r6, pc}
 800843e:	466a      	mov	r2, sp
 8008440:	f000 f858 	bl	80084f4 <_fstat_r>
 8008444:	2800      	cmp	r0, #0
 8008446:	dbec      	blt.n	8008422 <__swhatbuf_r+0x12>
 8008448:	9901      	ldr	r1, [sp, #4]
 800844a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800844e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008452:	4259      	negs	r1, r3
 8008454:	4159      	adcs	r1, r3
 8008456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800845a:	e7eb      	b.n	8008434 <__swhatbuf_r+0x24>

0800845c <__smakebuf_r>:
 800845c:	898b      	ldrh	r3, [r1, #12]
 800845e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008460:	079d      	lsls	r5, r3, #30
 8008462:	4606      	mov	r6, r0
 8008464:	460c      	mov	r4, r1
 8008466:	d507      	bpl.n	8008478 <__smakebuf_r+0x1c>
 8008468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	6123      	str	r3, [r4, #16]
 8008470:	2301      	movs	r3, #1
 8008472:	6163      	str	r3, [r4, #20]
 8008474:	b002      	add	sp, #8
 8008476:	bd70      	pop	{r4, r5, r6, pc}
 8008478:	ab01      	add	r3, sp, #4
 800847a:	466a      	mov	r2, sp
 800847c:	f7ff ffc8 	bl	8008410 <__swhatbuf_r>
 8008480:	9900      	ldr	r1, [sp, #0]
 8008482:	4605      	mov	r5, r0
 8008484:	4630      	mov	r0, r6
 8008486:	f7ff fa35 	bl	80078f4 <_malloc_r>
 800848a:	b948      	cbnz	r0, 80084a0 <__smakebuf_r+0x44>
 800848c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008490:	059a      	lsls	r2, r3, #22
 8008492:	d4ef      	bmi.n	8008474 <__smakebuf_r+0x18>
 8008494:	f023 0303 	bic.w	r3, r3, #3
 8008498:	f043 0302 	orr.w	r3, r3, #2
 800849c:	81a3      	strh	r3, [r4, #12]
 800849e:	e7e3      	b.n	8008468 <__smakebuf_r+0xc>
 80084a0:	89a3      	ldrh	r3, [r4, #12]
 80084a2:	6020      	str	r0, [r4, #0]
 80084a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a8:	81a3      	strh	r3, [r4, #12]
 80084aa:	9b00      	ldr	r3, [sp, #0]
 80084ac:	6163      	str	r3, [r4, #20]
 80084ae:	9b01      	ldr	r3, [sp, #4]
 80084b0:	6120      	str	r0, [r4, #16]
 80084b2:	b15b      	cbz	r3, 80084cc <__smakebuf_r+0x70>
 80084b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084b8:	4630      	mov	r0, r6
 80084ba:	f000 f82d 	bl	8008518 <_isatty_r>
 80084be:	b128      	cbz	r0, 80084cc <__smakebuf_r+0x70>
 80084c0:	89a3      	ldrh	r3, [r4, #12]
 80084c2:	f023 0303 	bic.w	r3, r3, #3
 80084c6:	f043 0301 	orr.w	r3, r3, #1
 80084ca:	81a3      	strh	r3, [r4, #12]
 80084cc:	89a3      	ldrh	r3, [r4, #12]
 80084ce:	431d      	orrs	r5, r3
 80084d0:	81a5      	strh	r5, [r4, #12]
 80084d2:	e7cf      	b.n	8008474 <__smakebuf_r+0x18>

080084d4 <_close_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4d06      	ldr	r5, [pc, #24]	; (80084f0 <_close_r+0x1c>)
 80084d8:	2300      	movs	r3, #0
 80084da:	4604      	mov	r4, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	602b      	str	r3, [r5, #0]
 80084e0:	f7f9 fbad 	bl	8001c3e <_close>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_close_r+0x1a>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_close_r+0x1a>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	2000048c 	.word	0x2000048c

080084f4 <_fstat_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4d07      	ldr	r5, [pc, #28]	; (8008514 <_fstat_r+0x20>)
 80084f8:	2300      	movs	r3, #0
 80084fa:	4604      	mov	r4, r0
 80084fc:	4608      	mov	r0, r1
 80084fe:	4611      	mov	r1, r2
 8008500:	602b      	str	r3, [r5, #0]
 8008502:	f7f9 fba8 	bl	8001c56 <_fstat>
 8008506:	1c43      	adds	r3, r0, #1
 8008508:	d102      	bne.n	8008510 <_fstat_r+0x1c>
 800850a:	682b      	ldr	r3, [r5, #0]
 800850c:	b103      	cbz	r3, 8008510 <_fstat_r+0x1c>
 800850e:	6023      	str	r3, [r4, #0]
 8008510:	bd38      	pop	{r3, r4, r5, pc}
 8008512:	bf00      	nop
 8008514:	2000048c 	.word	0x2000048c

08008518 <_isatty_r>:
 8008518:	b538      	push	{r3, r4, r5, lr}
 800851a:	4d06      	ldr	r5, [pc, #24]	; (8008534 <_isatty_r+0x1c>)
 800851c:	2300      	movs	r3, #0
 800851e:	4604      	mov	r4, r0
 8008520:	4608      	mov	r0, r1
 8008522:	602b      	str	r3, [r5, #0]
 8008524:	f7f9 fba7 	bl	8001c76 <_isatty>
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	d102      	bne.n	8008532 <_isatty_r+0x1a>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	b103      	cbz	r3, 8008532 <_isatty_r+0x1a>
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	bd38      	pop	{r3, r4, r5, pc}
 8008534:	2000048c 	.word	0x2000048c

08008538 <_lseek_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4d07      	ldr	r5, [pc, #28]	; (8008558 <_lseek_r+0x20>)
 800853c:	4604      	mov	r4, r0
 800853e:	4608      	mov	r0, r1
 8008540:	4611      	mov	r1, r2
 8008542:	2200      	movs	r2, #0
 8008544:	602a      	str	r2, [r5, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	f7f9 fba0 	bl	8001c8c <_lseek>
 800854c:	1c43      	adds	r3, r0, #1
 800854e:	d102      	bne.n	8008556 <_lseek_r+0x1e>
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	b103      	cbz	r3, 8008556 <_lseek_r+0x1e>
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	bd38      	pop	{r3, r4, r5, pc}
 8008558:	2000048c 	.word	0x2000048c

0800855c <_read_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4d07      	ldr	r5, [pc, #28]	; (800857c <_read_r+0x20>)
 8008560:	4604      	mov	r4, r0
 8008562:	4608      	mov	r0, r1
 8008564:	4611      	mov	r1, r2
 8008566:	2200      	movs	r2, #0
 8008568:	602a      	str	r2, [r5, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	f7f9 fb2e 	bl	8001bcc <_read>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	d102      	bne.n	800857a <_read_r+0x1e>
 8008574:	682b      	ldr	r3, [r5, #0]
 8008576:	b103      	cbz	r3, 800857a <_read_r+0x1e>
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	bd38      	pop	{r3, r4, r5, pc}
 800857c:	2000048c 	.word	0x2000048c

08008580 <_sbrk_r>:
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	4d06      	ldr	r5, [pc, #24]	; (800859c <_sbrk_r+0x1c>)
 8008584:	2300      	movs	r3, #0
 8008586:	4604      	mov	r4, r0
 8008588:	4608      	mov	r0, r1
 800858a:	602b      	str	r3, [r5, #0]
 800858c:	f7f9 fb8c 	bl	8001ca8 <_sbrk>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_sbrk_r+0x1a>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	b103      	cbz	r3, 800859a <_sbrk_r+0x1a>
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	2000048c 	.word	0x2000048c

080085a0 <_write_r>:
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	4d07      	ldr	r5, [pc, #28]	; (80085c0 <_write_r+0x20>)
 80085a4:	4604      	mov	r4, r0
 80085a6:	4608      	mov	r0, r1
 80085a8:	4611      	mov	r1, r2
 80085aa:	2200      	movs	r2, #0
 80085ac:	602a      	str	r2, [r5, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	f7f9 fb29 	bl	8001c06 <_write>
 80085b4:	1c43      	adds	r3, r0, #1
 80085b6:	d102      	bne.n	80085be <_write_r+0x1e>
 80085b8:	682b      	ldr	r3, [r5, #0]
 80085ba:	b103      	cbz	r3, 80085be <_write_r+0x1e>
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	2000048c 	.word	0x2000048c

080085c4 <memcpy>:
 80085c4:	440a      	add	r2, r1
 80085c6:	4291      	cmp	r1, r2
 80085c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80085cc:	d100      	bne.n	80085d0 <memcpy+0xc>
 80085ce:	4770      	bx	lr
 80085d0:	b510      	push	{r4, lr}
 80085d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085da:	4291      	cmp	r1, r2
 80085dc:	d1f9      	bne.n	80085d2 <memcpy+0xe>
 80085de:	bd10      	pop	{r4, pc}

080085e0 <__assert_func>:
 80085e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085e2:	4614      	mov	r4, r2
 80085e4:	461a      	mov	r2, r3
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <__assert_func+0x2c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4605      	mov	r5, r0
 80085ec:	68d8      	ldr	r0, [r3, #12]
 80085ee:	b14c      	cbz	r4, 8008604 <__assert_func+0x24>
 80085f0:	4b07      	ldr	r3, [pc, #28]	; (8008610 <__assert_func+0x30>)
 80085f2:	9100      	str	r1, [sp, #0]
 80085f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085f8:	4906      	ldr	r1, [pc, #24]	; (8008614 <__assert_func+0x34>)
 80085fa:	462b      	mov	r3, r5
 80085fc:	f000 f882 	bl	8008704 <fiprintf>
 8008600:	f000 f89f 	bl	8008742 <abort>
 8008604:	4b04      	ldr	r3, [pc, #16]	; (8008618 <__assert_func+0x38>)
 8008606:	461c      	mov	r4, r3
 8008608:	e7f3      	b.n	80085f2 <__assert_func+0x12>
 800860a:	bf00      	nop
 800860c:	20000064 	.word	0x20000064
 8008610:	08008bdf 	.word	0x08008bdf
 8008614:	08008bec 	.word	0x08008bec
 8008618:	08008c1a 	.word	0x08008c1a

0800861c <_calloc_r>:
 800861c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800861e:	fba1 2402 	umull	r2, r4, r1, r2
 8008622:	b94c      	cbnz	r4, 8008638 <_calloc_r+0x1c>
 8008624:	4611      	mov	r1, r2
 8008626:	9201      	str	r2, [sp, #4]
 8008628:	f7ff f964 	bl	80078f4 <_malloc_r>
 800862c:	9a01      	ldr	r2, [sp, #4]
 800862e:	4605      	mov	r5, r0
 8008630:	b930      	cbnz	r0, 8008640 <_calloc_r+0x24>
 8008632:	4628      	mov	r0, r5
 8008634:	b003      	add	sp, #12
 8008636:	bd30      	pop	{r4, r5, pc}
 8008638:	220c      	movs	r2, #12
 800863a:	6002      	str	r2, [r0, #0]
 800863c:	2500      	movs	r5, #0
 800863e:	e7f8      	b.n	8008632 <_calloc_r+0x16>
 8008640:	4621      	mov	r1, r4
 8008642:	f7fe f937 	bl	80068b4 <memset>
 8008646:	e7f4      	b.n	8008632 <_calloc_r+0x16>

08008648 <_free_r>:
 8008648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800864a:	2900      	cmp	r1, #0
 800864c:	d044      	beq.n	80086d8 <_free_r+0x90>
 800864e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008652:	9001      	str	r0, [sp, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	f1a1 0404 	sub.w	r4, r1, #4
 800865a:	bfb8      	it	lt
 800865c:	18e4      	addlt	r4, r4, r3
 800865e:	f7ff fa77 	bl	8007b50 <__malloc_lock>
 8008662:	4a1e      	ldr	r2, [pc, #120]	; (80086dc <_free_r+0x94>)
 8008664:	9801      	ldr	r0, [sp, #4]
 8008666:	6813      	ldr	r3, [r2, #0]
 8008668:	b933      	cbnz	r3, 8008678 <_free_r+0x30>
 800866a:	6063      	str	r3, [r4, #4]
 800866c:	6014      	str	r4, [r2, #0]
 800866e:	b003      	add	sp, #12
 8008670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008674:	f7ff ba72 	b.w	8007b5c <__malloc_unlock>
 8008678:	42a3      	cmp	r3, r4
 800867a:	d908      	bls.n	800868e <_free_r+0x46>
 800867c:	6825      	ldr	r5, [r4, #0]
 800867e:	1961      	adds	r1, r4, r5
 8008680:	428b      	cmp	r3, r1
 8008682:	bf01      	itttt	eq
 8008684:	6819      	ldreq	r1, [r3, #0]
 8008686:	685b      	ldreq	r3, [r3, #4]
 8008688:	1949      	addeq	r1, r1, r5
 800868a:	6021      	streq	r1, [r4, #0]
 800868c:	e7ed      	b.n	800866a <_free_r+0x22>
 800868e:	461a      	mov	r2, r3
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	b10b      	cbz	r3, 8008698 <_free_r+0x50>
 8008694:	42a3      	cmp	r3, r4
 8008696:	d9fa      	bls.n	800868e <_free_r+0x46>
 8008698:	6811      	ldr	r1, [r2, #0]
 800869a:	1855      	adds	r5, r2, r1
 800869c:	42a5      	cmp	r5, r4
 800869e:	d10b      	bne.n	80086b8 <_free_r+0x70>
 80086a0:	6824      	ldr	r4, [r4, #0]
 80086a2:	4421      	add	r1, r4
 80086a4:	1854      	adds	r4, r2, r1
 80086a6:	42a3      	cmp	r3, r4
 80086a8:	6011      	str	r1, [r2, #0]
 80086aa:	d1e0      	bne.n	800866e <_free_r+0x26>
 80086ac:	681c      	ldr	r4, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	6053      	str	r3, [r2, #4]
 80086b2:	440c      	add	r4, r1
 80086b4:	6014      	str	r4, [r2, #0]
 80086b6:	e7da      	b.n	800866e <_free_r+0x26>
 80086b8:	d902      	bls.n	80086c0 <_free_r+0x78>
 80086ba:	230c      	movs	r3, #12
 80086bc:	6003      	str	r3, [r0, #0]
 80086be:	e7d6      	b.n	800866e <_free_r+0x26>
 80086c0:	6825      	ldr	r5, [r4, #0]
 80086c2:	1961      	adds	r1, r4, r5
 80086c4:	428b      	cmp	r3, r1
 80086c6:	bf04      	itt	eq
 80086c8:	6819      	ldreq	r1, [r3, #0]
 80086ca:	685b      	ldreq	r3, [r3, #4]
 80086cc:	6063      	str	r3, [r4, #4]
 80086ce:	bf04      	itt	eq
 80086d0:	1949      	addeq	r1, r1, r5
 80086d2:	6021      	streq	r1, [r4, #0]
 80086d4:	6054      	str	r4, [r2, #4]
 80086d6:	e7ca      	b.n	800866e <_free_r+0x26>
 80086d8:	b003      	add	sp, #12
 80086da:	bd30      	pop	{r4, r5, pc}
 80086dc:	20000484 	.word	0x20000484

080086e0 <__ascii_mbtowc>:
 80086e0:	b082      	sub	sp, #8
 80086e2:	b901      	cbnz	r1, 80086e6 <__ascii_mbtowc+0x6>
 80086e4:	a901      	add	r1, sp, #4
 80086e6:	b142      	cbz	r2, 80086fa <__ascii_mbtowc+0x1a>
 80086e8:	b14b      	cbz	r3, 80086fe <__ascii_mbtowc+0x1e>
 80086ea:	7813      	ldrb	r3, [r2, #0]
 80086ec:	600b      	str	r3, [r1, #0]
 80086ee:	7812      	ldrb	r2, [r2, #0]
 80086f0:	1e10      	subs	r0, r2, #0
 80086f2:	bf18      	it	ne
 80086f4:	2001      	movne	r0, #1
 80086f6:	b002      	add	sp, #8
 80086f8:	4770      	bx	lr
 80086fa:	4610      	mov	r0, r2
 80086fc:	e7fb      	b.n	80086f6 <__ascii_mbtowc+0x16>
 80086fe:	f06f 0001 	mvn.w	r0, #1
 8008702:	e7f8      	b.n	80086f6 <__ascii_mbtowc+0x16>

08008704 <fiprintf>:
 8008704:	b40e      	push	{r1, r2, r3}
 8008706:	b503      	push	{r0, r1, lr}
 8008708:	4601      	mov	r1, r0
 800870a:	ab03      	add	r3, sp, #12
 800870c:	4805      	ldr	r0, [pc, #20]	; (8008724 <fiprintf+0x20>)
 800870e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008712:	6800      	ldr	r0, [r0, #0]
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	f7fe ffab 	bl	8007670 <_vfiprintf_r>
 800871a:	b002      	add	sp, #8
 800871c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008720:	b003      	add	sp, #12
 8008722:	4770      	bx	lr
 8008724:	20000064 	.word	0x20000064

08008728 <__ascii_wctomb>:
 8008728:	b149      	cbz	r1, 800873e <__ascii_wctomb+0x16>
 800872a:	2aff      	cmp	r2, #255	; 0xff
 800872c:	bf85      	ittet	hi
 800872e:	238a      	movhi	r3, #138	; 0x8a
 8008730:	6003      	strhi	r3, [r0, #0]
 8008732:	700a      	strbls	r2, [r1, #0]
 8008734:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008738:	bf98      	it	ls
 800873a:	2001      	movls	r0, #1
 800873c:	4770      	bx	lr
 800873e:	4608      	mov	r0, r1
 8008740:	4770      	bx	lr

08008742 <abort>:
 8008742:	b508      	push	{r3, lr}
 8008744:	2006      	movs	r0, #6
 8008746:	f000 f82b 	bl	80087a0 <raise>
 800874a:	2001      	movs	r0, #1
 800874c:	f7f9 fa34 	bl	8001bb8 <_exit>

08008750 <_raise_r>:
 8008750:	291f      	cmp	r1, #31
 8008752:	b538      	push	{r3, r4, r5, lr}
 8008754:	4604      	mov	r4, r0
 8008756:	460d      	mov	r5, r1
 8008758:	d904      	bls.n	8008764 <_raise_r+0x14>
 800875a:	2316      	movs	r3, #22
 800875c:	6003      	str	r3, [r0, #0]
 800875e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008766:	b112      	cbz	r2, 800876e <_raise_r+0x1e>
 8008768:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800876c:	b94b      	cbnz	r3, 8008782 <_raise_r+0x32>
 800876e:	4620      	mov	r0, r4
 8008770:	f000 f830 	bl	80087d4 <_getpid_r>
 8008774:	462a      	mov	r2, r5
 8008776:	4601      	mov	r1, r0
 8008778:	4620      	mov	r0, r4
 800877a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800877e:	f000 b817 	b.w	80087b0 <_kill_r>
 8008782:	2b01      	cmp	r3, #1
 8008784:	d00a      	beq.n	800879c <_raise_r+0x4c>
 8008786:	1c59      	adds	r1, r3, #1
 8008788:	d103      	bne.n	8008792 <_raise_r+0x42>
 800878a:	2316      	movs	r3, #22
 800878c:	6003      	str	r3, [r0, #0]
 800878e:	2001      	movs	r0, #1
 8008790:	e7e7      	b.n	8008762 <_raise_r+0x12>
 8008792:	2400      	movs	r4, #0
 8008794:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008798:	4628      	mov	r0, r5
 800879a:	4798      	blx	r3
 800879c:	2000      	movs	r0, #0
 800879e:	e7e0      	b.n	8008762 <_raise_r+0x12>

080087a0 <raise>:
 80087a0:	4b02      	ldr	r3, [pc, #8]	; (80087ac <raise+0xc>)
 80087a2:	4601      	mov	r1, r0
 80087a4:	6818      	ldr	r0, [r3, #0]
 80087a6:	f7ff bfd3 	b.w	8008750 <_raise_r>
 80087aa:	bf00      	nop
 80087ac:	20000064 	.word	0x20000064

080087b0 <_kill_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d07      	ldr	r5, [pc, #28]	; (80087d0 <_kill_r+0x20>)
 80087b4:	2300      	movs	r3, #0
 80087b6:	4604      	mov	r4, r0
 80087b8:	4608      	mov	r0, r1
 80087ba:	4611      	mov	r1, r2
 80087bc:	602b      	str	r3, [r5, #0]
 80087be:	f7f9 f9eb 	bl	8001b98 <_kill>
 80087c2:	1c43      	adds	r3, r0, #1
 80087c4:	d102      	bne.n	80087cc <_kill_r+0x1c>
 80087c6:	682b      	ldr	r3, [r5, #0]
 80087c8:	b103      	cbz	r3, 80087cc <_kill_r+0x1c>
 80087ca:	6023      	str	r3, [r4, #0]
 80087cc:	bd38      	pop	{r3, r4, r5, pc}
 80087ce:	bf00      	nop
 80087d0:	2000048c 	.word	0x2000048c

080087d4 <_getpid_r>:
 80087d4:	f7f9 b9d8 	b.w	8001b88 <_getpid>

080087d8 <_init>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	bf00      	nop
 80087dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087de:	bc08      	pop	{r3}
 80087e0:	469e      	mov	lr, r3
 80087e2:	4770      	bx	lr

080087e4 <_fini>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	bf00      	nop
 80087e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ea:	bc08      	pop	{r3}
 80087ec:	469e      	mov	lr, r3
 80087ee:	4770      	bx	lr
