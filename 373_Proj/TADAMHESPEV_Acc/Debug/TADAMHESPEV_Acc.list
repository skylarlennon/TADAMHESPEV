
TADAMHESPEV_Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099e8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08009ba8  08009ba8  00019ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fd4  08009fd4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009fd4  08009fd4  00019fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fdc  08009fdc  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fdc  08009fdc  00019fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fe0  08009fe0  00019fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  200001d8  0800a1bc  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  0800a1bc  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018cf9  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fa7  00000000  00000000  00038f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0003bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001110  00000000  00000000  0003d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c9ee  00000000  00000000  0003e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b1c3  00000000  00000000  0006afa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f351  00000000  00000000  00086169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d4c  00000000  00000000  001954bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0019c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009b90 	.word	0x08009b90

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	08009b90 	.word	0x08009b90

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <setupAccModule>:
#define OUT_Z_L_A 0x2C
#define OUT_Z_H_A 0x2D

extern I2C_HandleTypeDef hi2c1;

void setupAccModule(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
	uint8_t buf[10]= {ACC_IR_CTRL1, CTR1_SETUP};
 8000eda:	f249 7320 	movw	r3, #38688	; 0x9720
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	809a      	strh	r2, [r3, #4]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDR << 1, buf, 2, 1000);
 8000eea:	1d3a      	adds	r2, r7, #4
 8000eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	2132      	movs	r1, #50	; 0x32
 8000ef6:	4809      	ldr	r0, [pc, #36]	; (8000f1c <setupAccModule+0x48>)
 8000ef8:	f001 fc94 	bl	8002824 <HAL_I2C_Master_Transmit>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73fb      	strb	r3, [r7, #15]
	if(ret == 0){
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d103      	bne.n	8000f0e <setupAccModule+0x3a>
		printf("We gucci\n");
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <setupAccModule+0x4c>)
 8000f08:	f006 feaa 	bl	8007c60 <puts>
	}
	else{
		printf("we not gucci\n");
	}
}
 8000f0c:	e002      	b.n	8000f14 <setupAccModule+0x40>
		printf("we not gucci\n");
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <setupAccModule+0x50>)
 8000f10:	f006 fea6 	bl	8007c60 <puts>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000284 	.word	0x20000284
 8000f20:	08009ba8 	.word	0x08009ba8
 8000f24:	08009bb4 	.word	0x08009bb4

08000f28 <ReadAccData>:
	printf("Raw:\t%u\tAcc:\t%f\tBinary:\t",raw,acc);
	printBinary(accBin);
	printf("\n");
}

float ReadAccData(){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af02      	add	r7, sp, #8
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2140      	movs	r1, #64	; 0x40
 8000f32:	4830      	ldr	r0, [pc, #192]	; (8000ff4 <ReadAccData+0xcc>)
 8000f34:	f001 fbc2 	bl	80026bc <HAL_GPIO_WritePin>
		uint8_t buf[1]= {OUT_X_L_A | 1 << 7}; //Auto-Increment OUT_X_L_A
 8000f38:	23a8      	movs	r3, #168	; 0xa8
 8000f3a:	713b      	strb	r3, [r7, #4]
		uint8_t rbuf[2];
		float accVal = 0;
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]

		HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDR << 1, buf, 1, 1000);
 8000f42:	1d3a      	adds	r2, r7, #4
 8000f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	2132      	movs	r1, #50	; 0x32
 8000f4e:	482a      	ldr	r0, [pc, #168]	; (8000ff8 <ReadAccData+0xd0>)
 8000f50:	f001 fc68 	bl	8002824 <HAL_I2C_Master_Transmit>
 8000f54:	4603      	mov	r3, r0
 8000f56:	72fb      	strb	r3, [r7, #11]
		//[TODO] - Have error checking for communication errors
		ret =  HAL_I2C_Master_Receive(&hi2c1, ACC_I2C_ADDR << 1, rbuf, 2, 1000);
 8000f58:	463a      	mov	r2, r7
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2302      	movs	r3, #2
 8000f62:	2132      	movs	r1, #50	; 0x32
 8000f64:	4824      	ldr	r0, [pc, #144]	; (8000ff8 <ReadAccData+0xd0>)
 8000f66:	f001 fd75 	bl	8002a54 <HAL_I2C_Master_Receive>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	72fb      	strb	r3, [r7, #11]
		//[TODO] - Have error checking for communication errors

		uint16_t raw = (rbuf[1] << 8) | rbuf[0];	// 2's compliment, +-2g's
 8000f6e:	787b      	ldrb	r3, [r7, #1]
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	783b      	ldrb	r3, [r7, #0]
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	813b      	strh	r3, [r7, #8]
		if(raw > 64100){
 8000f7e:	893b      	ldrh	r3, [r7, #8]
 8000f80:	f64f 2264 	movw	r2, #64100	; 0xfa64
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d903      	bls.n	8000f90 <ReadAccData+0x68>
			accVal = 0;
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	e021      	b.n	8000fd4 <ReadAccData+0xac>
		}
		else if(raw & 0x8000){ //if value is negative
 8000f90:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	da10      	bge.n	8000fba <ReadAccData+0x92>
			int16_t temp = -((raw ^ 0xFFFF) + 1);
 8000f98:	893b      	ldrh	r3, [r7, #8]
 8000f9a:	80fb      	strh	r3, [r7, #6]
			accVal = (temp / (float)(1 << 15))*2;
 8000f9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa8:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000ffc <ReadAccData+0xd4>
 8000fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fb4:	edc7 7a03 	vstr	s15, [r7, #12]
 8000fb8:	e00c      	b.n	8000fd4 <ReadAccData+0xac>
		}
		else{ //positive acceleration
			accVal = (raw / (float)((1 << 15) - 1))*2;
 8000fba:	893b      	ldrh	r3, [r7, #8]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001000 <ReadAccData+0xd8>
 8000fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fcc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fd0:	edc7 7a03 	vstr	s15, [r7, #12]
		}
		printf("Accel:\t%f",accVal);
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f7ff facf 	bl	8000578 <__aeabi_f2d>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4809      	ldr	r0, [pc, #36]	; (8001004 <ReadAccData+0xdc>)
 8000fe0:	f006 fdd8 	bl	8007b94 <iprintf>
		return accVal;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	ee07 3a90 	vmov	s15, r3
		//[TODO] - error check if binAcc = -1;

//		printf("%i\t%b\n",binAcc);

//		printf("%i\t%f\n",cnt++, accVal);
}
 8000fea:	eeb0 0a67 	vmov.f32	s0, s15
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	20000284 	.word	0x20000284
 8000ffc:	47000000 	.word	0x47000000
 8001000:	46fffe00 	.word	0x46fffe00
 8001004:	08009be4 	.word	0x08009be4

08001008 <setupLEDS>:
uint8_t clearLEDs[NUM_MSG_BYTES];
uint8_t BLANK_LED[4] = {0xE0, 0x00, 0x00, 0x00};

extern SPI_HandleTypeDef hspi1;

void setupLEDS(){
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
	float acc_inc = MAX_ACCEL/NUM_LEDS;
 800100e:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <setupLEDS+0xb8>)
 8001010:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < NUM_LEDS; ++i){
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	e028      	b.n	800106a <setupLEDS+0x62>
		//setup LED_INDEX_THRESHOLD
		LED_INDEX_THRESHOLD[i] = i*acc_inc;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001022:	edd7 7a01 	vldr	s15, [r7, #4]
 8001026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102a:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <setupLEDS+0xbc>)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	edc3 7a00 	vstr	s15, [r3]

		//setup LED_COLOR_ARR
		if(i < NUM_GREEN){
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2b04      	cmp	r3, #4
 800103a:	dc05      	bgt.n	8001048 <setupLEDS+0x40>
			LED_COLOR_ARR[i] = 0; // 0 = green
 800103c:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <setupLEDS+0xc0>)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4413      	add	r3, r2
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	e00d      	b.n	8001064 <setupLEDS+0x5c>
		}
		else if(i < NUM_GREEN + NUM_YELLOW){
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b0a      	cmp	r3, #10
 800104c:	dc05      	bgt.n	800105a <setupLEDS+0x52>
			LED_COLOR_ARR[i] = 1; // 1 = yellow
 800104e:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <setupLEDS+0xc0>)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	e004      	b.n	8001064 <setupLEDS+0x5c>
		}
		else{
			LED_COLOR_ARR[i] = 2; // 2 = red
 800105a:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <setupLEDS+0xc0>)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	2202      	movs	r2, #2
 8001062:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_LEDS; ++i){
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3301      	adds	r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b0e      	cmp	r3, #14
 800106e:	ddd3      	ble.n	8001018 <setupLEDS+0x10>
		}
	}

	//initialize a blank LED strip array
	for(int j = 0; j < NUM_MSG_BYTES; ++j){
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	e01a      	b.n	80010ac <setupLEDS+0xa4>
		if(j < 4){
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	2b03      	cmp	r3, #3
 800107a:	dc05      	bgt.n	8001088 <setupLEDS+0x80>
			clearLEDs[j] = 0;
 800107c:	4a13      	ldr	r2, [pc, #76]	; (80010cc <setupLEDS+0xc4>)
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	4413      	add	r3, r2
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	e00e      	b.n	80010a6 <setupLEDS+0x9e>
		}
		else if(j < (NUM_MSG_BYTES - 1)){
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	2b3f      	cmp	r3, #63	; 0x3f
 800108c:	dc06      	bgt.n	800109c <setupLEDS+0x94>
			memcpy(&clearLEDs[j],BLANK_LED,sizeof(BLANK_LED));
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <setupLEDS+0xc4>)
 8001092:	4413      	add	r3, r2
 8001094:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <setupLEDS+0xc8>)
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	e004      	b.n	80010a6 <setupLEDS+0x9e>
		}
		else{
			clearLEDs[j] = 0;
 800109c:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <setupLEDS+0xc4>)
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	4413      	add	r3, r2
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < NUM_MSG_BYTES; ++j){
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3301      	adds	r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	2b40      	cmp	r3, #64	; 0x40
 80010b0:	dde1      	ble.n	8001076 <setupLEDS+0x6e>
		}
	}
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	3e088889 	.word	0x3e088889
 80010c4:	200001f4 	.word	0x200001f4
 80010c8:	20000230 	.word	0x20000230
 80010cc:	20000240 	.word	0x20000240
 80010d0:	20000000 	.word	0x20000000

080010d4 <makeLEDFrame>:
	if(ret != HAL_OK){
		//There is a problem
	}
}

void makeLEDFrame(uint8_t* frame, uint8_t gr_yel_red){
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
	switch(gr_yel_red){
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d026      	beq.n	8001134 <makeLEDFrame+0x60>
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	dc34      	bgt.n	8001154 <makeLEDFrame+0x80>
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <makeLEDFrame+0x20>
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d010      	beq.n	8001114 <makeLEDFrame+0x40>
 80010f2:	e02f      	b.n	8001154 <makeLEDFrame+0x80>
		case 0:									// green
			*(frame) = LED_FRAME_START_BRIGHT;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	22e3      	movs	r2, #227	; 0xe3
 80010f8:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 	//green
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3301      	adds	r3, #1
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 255; 		//blue
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3302      	adds	r3, #2
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 0;		//red
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3303      	adds	r3, #3
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
			break;
 8001112:	e02f      	b.n	8001174 <makeLEDFrame+0xa0>
		case 1:					 				// yellow
			*(frame) = LED_FRAME_START_BRIGHT;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	22e3      	movs	r2, #227	; 0xe3
 8001118:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 	//green
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3301      	adds	r3, #1
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 255; 		//blue
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3302      	adds	r3, #2
 8001126:	22ff      	movs	r2, #255	; 0xff
 8001128:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 255;		//red
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3303      	adds	r3, #3
 800112e:	22ff      	movs	r2, #255	; 0xff
 8001130:	701a      	strb	r2, [r3, #0]
			break;
 8001132:	e01f      	b.n	8001174 <makeLEDFrame+0xa0>
		case 2:					 				// red
			*(frame) = LED_FRAME_START_BRIGHT;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	22e3      	movs	r2, #227	; 0xe3
 8001138:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 		//green
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3301      	adds	r3, #1
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 0;	 	//blue
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3302      	adds	r3, #2
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 255;		//red
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3303      	adds	r3, #3
 800114e:	22ff      	movs	r2, #255	; 0xff
 8001150:	701a      	strb	r2, [r3, #0]
			break;
 8001152:	e00f      	b.n	8001174 <makeLEDFrame+0xa0>
		default:								// no brightness
			*(frame) = LED_FRAME_START_OFF;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	22e0      	movs	r2, #224	; 0xe0
 8001158:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 		//green
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3301      	adds	r3, #1
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 0; 		//blue
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3302      	adds	r3, #2
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 0;		//red
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3303      	adds	r3, #3
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
			break;
 8001172:	bf00      	nop
			//	[TODO] maybe try making them all off rather than having blue?
	}

}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <printLEDs>:

void printLEDs(float accVal){
 8001180:	b580      	push	{r7, lr}
 8001182:	b096      	sub	sp, #88	; 0x58
 8001184:	af00      	add	r7, sp, #0
 8001186:	ed87 0a01 	vstr	s0, [r7, #4]
	accVal = fabs(accVal);
 800118a:	edd7 7a01 	vldr	s15, [r7, #4]
 800118e:	eef0 7ae7 	vabs.f32	s15, s15
 8001192:	edc7 7a01 	vstr	s15, [r7, #4]

	uint8_t led_msg[NUM_MSG_BYTES];

	//create start frame
	int i = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	657b      	str	r3, [r7, #84]	; 0x54
	for(; i < 4; ++i){
 800119a:	e008      	b.n	80011ae <printLEDs+0x2e>
		led_msg[i] = 0;
 800119c:	f107 020c 	add.w	r2, r7, #12
 80011a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011a2:	4413      	add	r3, r2
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
	for(; i < 4; ++i){
 80011a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011aa:	3301      	adds	r3, #1
 80011ac:	657b      	str	r3, [r7, #84]	; 0x54
 80011ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	ddf3      	ble.n	800119c <printLEDs+0x1c>
	}

	//create LED frame
	for(int j = 0; j < NUM_LEDS; ++j){
 80011b4:	2300      	movs	r3, #0
 80011b6:	653b      	str	r3, [r7, #80]	; 0x50
 80011b8:	e029      	b.n	800120e <printLEDs+0x8e>
		uint8_t led_frame[4];
		if(accVal > LED_INDEX_THRESHOLD[j]){
 80011ba:	4a27      	ldr	r2, [pc, #156]	; (8001258 <printLEDs+0xd8>)
 80011bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	edd3 7a00 	vldr	s15, [r3]
 80011c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d2:	dd0a      	ble.n	80011ea <printLEDs+0x6a>
			makeLEDFrame(led_frame,LED_COLOR_ARR[j]); //LED_COLOR_ARR[j] = 0,1,2
 80011d4:	4a21      	ldr	r2, [pc, #132]	; (800125c <printLEDs+0xdc>)
 80011d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011d8:	4413      	add	r3, r2
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff76 	bl	80010d4 <makeLEDFrame>
 80011e8:	e005      	b.n	80011f6 <printLEDs+0x76>
		}
		else{
			makeLEDFrame(led_frame,4); //no brightness
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	2104      	movs	r1, #4
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff6f 	bl	80010d4 <makeLEDFrame>
		}
		//add the frame to the rest of the message
		memcpy(&led_msg[i],led_frame,sizeof(led_frame));
 80011f6:	f107 020c 	add.w	r2, r7, #12
 80011fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011fc:	4413      	add	r3, r2
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	601a      	str	r2, [r3, #0]
//		led_msg[i] = led_frame;
		i = i + 4;
 8001202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001204:	3304      	adds	r3, #4
 8001206:	657b      	str	r3, [r7, #84]	; 0x54
	for(int j = 0; j < NUM_LEDS; ++j){
 8001208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800120a:	3301      	adds	r3, #1
 800120c:	653b      	str	r3, [r7, #80]	; 0x50
 800120e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001210:	2b0e      	cmp	r3, #14
 8001212:	ddd2      	ble.n	80011ba <printLEDs+0x3a>
			//full pause
		}
	}

	//create the end frame
	for(; i < NUM_MSG_BYTES; ++i){
 8001214:	e008      	b.n	8001228 <printLEDs+0xa8>
		led_msg[i] = 0;
 8001216:	f107 020c 	add.w	r2, r7, #12
 800121a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800121c:	4413      	add	r3, r2
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
	for(; i < NUM_MSG_BYTES; ++i){
 8001222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001224:	3301      	adds	r3, #1
 8001226:	657b      	str	r3, [r7, #84]	; 0x54
 8001228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800122a:	2b40      	cmp	r3, #64	; 0x40
 800122c:	ddf3      	ble.n	8001216 <printLEDs+0x96>
	}

	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)led_msg, NUM_MSG_BYTES,1000);
 800122e:	f107 010c 	add.w	r1, r7, #12
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	2241      	movs	r2, #65	; 0x41
 8001238:	4809      	ldr	r0, [pc, #36]	; (8001260 <printLEDs+0xe0>)
 800123a:	f003 fd92 	bl	8004d62 <HAL_SPI_Transmit>
 800123e:	4603      	mov	r3, r0
 8001240:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if(ret != HAL_OK){
		//There is a problem
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2140      	movs	r1, #64	; 0x40
 8001248:	4806      	ldr	r0, [pc, #24]	; (8001264 <printLEDs+0xe4>)
 800124a:	f001 fa37 	bl	80026bc <HAL_GPIO_WritePin>
}
 800124e:	bf00      	nop
 8001250:	3758      	adds	r7, #88	; 0x58
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200001f4 	.word	0x200001f4
 800125c:	20000230 	.word	0x20000230
 8001260:	2000036c 	.word	0x2000036c
 8001264:	48000400 	.word	0x48000400

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 ff0c 	bl	800208a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f82d 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001276:	f000 f9d7 	bl	8001628 <MX_GPIO_Init>
  MX_I2C1_Init();
 800127a:	f000 f86f 	bl	800135c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800127e:	f000 f8ab 	bl	80013d8 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8001282:	f000 f8f5 	bl	8001470 <MX_SPI1_Init>
  MX_TIM15_Init();
 8001286:	f000 f931 	bl	80014ec <MX_TIM15_Init>
  MX_TIM17_Init();
 800128a:	f000 f981 	bl	8001590 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Base_Start_IT(&htim15) != HAL_OK)
 800128e:	480e      	ldr	r0, [pc, #56]	; (80012c8 <main+0x60>)
 8001290:	f004 f898 	bl	80053c4 <HAL_TIM_Base_Start_IT>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <main+0x36>
   {
     /* Starting Error */
     Error_Handler();
 800129a:	f000 fbeb 	bl	8001a74 <Error_Handler>
   }
  if (HAL_TIM_IC_Start_IT(&htim17,TIM_CHANNEL_1) != HAL_OK)
 800129e:	2100      	movs	r1, #0
 80012a0:	480a      	ldr	r0, [pc, #40]	; (80012cc <main+0x64>)
 80012a2:	f004 f961 	bl	8005568 <HAL_TIM_IC_Start_IT>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <main+0x48>
     {
       /* Starting Error */
       Error_Handler();
 80012ac:	f000 fbe2 	bl	8001a74 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  static int cnt = 0;
  setupAccModule();
 80012b0:	f7ff fe10 	bl	8000ed4 <setupAccModule>
  setupLEDS();
 80012b4:	f7ff fea8 	bl	8001008 <setupLEDS>
//  uint8_t dispBinAcc = binAccRead;
//  int diffTol = 5;

  while (1)
  {
	  int val = __HAL_TIM_GET_COUNTER(&htim17);
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <main+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	607b      	str	r3, [r7, #4]
	  int temp = val;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	603b      	str	r3, [r7, #0]
  {
 80012c4:	e7f8      	b.n	80012b8 <main+0x50>
 80012c6:	bf00      	nop
 80012c8:	200003d0 	.word	0x200003d0
 80012cc:	2000041c 	.word	0x2000041c

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b096      	sub	sp, #88	; 0x58
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	2244      	movs	r2, #68	; 0x44
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f006 fcc6 	bl	8007c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	463b      	mov	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012f6:	f001 ffed 	bl	80032d4 <HAL_PWREx_ControlVoltageScaling>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001300:	f000 fbb8 	bl	8001a74 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001304:	2310      	movs	r3, #16
 8001306:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001308:	2301      	movs	r3, #1
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001310:	2360      	movs	r3, #96	; 0x60
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4618      	mov	r0, r3
 800131e:	f002 f88d 	bl	800343c <HAL_RCC_OscConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001328:	f000 fba4 	bl	8001a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132c:	230f      	movs	r3, #15
 800132e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f002 fc93 	bl	8003c70 <HAL_RCC_ClockConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001350:	f000 fb90 	bl	8001a74 <Error_Handler>
  }
}
 8001354:	bf00      	nop
 8001356:	3758      	adds	r7, #88	; 0x58
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <MX_I2C1_Init+0x78>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001368:	f640 6214 	movw	r2, #3604	; 0xe14
 800136c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001376:	2201      	movs	r2, #1
 8001378:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_I2C1_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_I2C1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_I2C1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <MX_I2C1_Init+0x74>)
 800139a:	f001 f9a7 	bl	80026ec <HAL_I2C_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013a4:	f000 fb66 	bl	8001a74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013a8:	2100      	movs	r1, #0
 80013aa:	4809      	ldr	r0, [pc, #36]	; (80013d0 <MX_I2C1_Init+0x74>)
 80013ac:	f001 feda 	bl	8003164 <HAL_I2CEx_ConfigAnalogFilter>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80013b6:	f000 fb5d 	bl	8001a74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013ba:	2100      	movs	r1, #0
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_I2C1_Init+0x74>)
 80013be:	f001 ff1c 	bl	80031fa <HAL_I2CEx_ConfigDigitalFilter>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80013c8:	f000 fb54 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000284 	.word	0x20000284
 80013d4:	40005400 	.word	0x40005400

080013d8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <MX_LPUART1_UART_Init+0x90>)
 80013de:	4a23      	ldr	r2, [pc, #140]	; (800146c <MX_LPUART1_UART_Init+0x94>)
 80013e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <MX_LPUART1_UART_Init+0x90>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_LPUART1_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <MX_LPUART1_UART_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <MX_LPUART1_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_LPUART1_UART_Init+0x90>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <MX_LPUART1_UART_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_LPUART1_UART_Init+0x90>)
 800140a:	2200      	movs	r2, #0
 800140c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_LPUART1_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_LPUART1_UART_Init+0x90>)
 8001416:	2200      	movs	r2, #0
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MX_LPUART1_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001420:	4811      	ldr	r0, [pc, #68]	; (8001468 <MX_LPUART1_UART_Init+0x90>)
 8001422:	f004 ffa9 	bl	8006378 <HAL_UART_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800142c:	f000 fb22 	bl	8001a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001430:	2100      	movs	r1, #0
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_LPUART1_UART_Init+0x90>)
 8001434:	f005 fdce 	bl	8006fd4 <HAL_UARTEx_SetTxFifoThreshold>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800143e:	f000 fb19 	bl	8001a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001442:	2100      	movs	r1, #0
 8001444:	4808      	ldr	r0, [pc, #32]	; (8001468 <MX_LPUART1_UART_Init+0x90>)
 8001446:	f005 fe03 	bl	8007050 <HAL_UARTEx_SetRxFifoThreshold>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001450:	f000 fb10 	bl	8001a74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_LPUART1_UART_Init+0x90>)
 8001456:	f005 fd84 	bl	8006f62 <HAL_UARTEx_DisableFifoMode>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001460:	f000 fb08 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200002d8 	.word	0x200002d8
 800146c:	40008000 	.word	0x40008000

08001470 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <MX_SPI1_Init+0x74>)
 8001476:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <MX_SPI1_Init+0x78>)
 8001478:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_SPI1_Init+0x74>)
 800147c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001480:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <MX_SPI1_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_SPI1_Init+0x74>)
 800148a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800148e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_SPI1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_SPI1_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_SPI1_Init+0x74>)
 800149e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_SPI1_Init+0x74>)
 80014a6:	2208      	movs	r2, #8
 80014a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_SPI1_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_SPI1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <MX_SPI1_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_SPI1_Init+0x74>)
 80014be:	2207      	movs	r2, #7
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <MX_SPI1_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_SPI1_Init+0x74>)
 80014ca:	2208      	movs	r2, #8
 80014cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_SPI1_Init+0x74>)
 80014d0:	f003 fba4 	bl	8004c1c <HAL_SPI_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014da:	f000 facb 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000036c 	.word	0x2000036c
 80014e8:	40013000 	.word	0x40013000

080014ec <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <MX_TIM15_Init+0x9c>)
 800150c:	4a1f      	ldr	r2, [pc, #124]	; (800158c <MX_TIM15_Init+0xa0>)
 800150e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3999;
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <MX_TIM15_Init+0x9c>)
 8001512:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001516:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <MX_TIM15_Init+0x9c>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 79;
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <MX_TIM15_Init+0x9c>)
 8001520:	224f      	movs	r2, #79	; 0x4f
 8001522:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <MX_TIM15_Init+0x9c>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <MX_TIM15_Init+0x9c>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <MX_TIM15_Init+0x9c>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001536:	4814      	ldr	r0, [pc, #80]	; (8001588 <MX_TIM15_Init+0x9c>)
 8001538:	f003 feec 	bl	8005314 <HAL_TIM_Base_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001542:	f000 fa97 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4619      	mov	r1, r3
 8001552:	480d      	ldr	r0, [pc, #52]	; (8001588 <MX_TIM15_Init+0x9c>)
 8001554:	f004 faf0 	bl	8005b38 <HAL_TIM_ConfigClockSource>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800155e:	f000 fa89 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <MX_TIM15_Init+0x9c>)
 8001570:	f004 fe5c 	bl	800622c <HAL_TIMEx_MasterConfigSynchronization>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800157a:	f000 fa7b 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200003d0 	.word	0x200003d0
 800158c:	40014000 	.word	0x40014000

08001590 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001596:	463b      	mov	r3, r7
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <MX_TIM17_Init+0x90>)
 80015a4:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <MX_TIM17_Init+0x94>)
 80015a6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3999;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <MX_TIM17_Init+0x90>)
 80015aa:	f640 729f 	movw	r2, #3999	; 0xf9f
 80015ae:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <MX_TIM17_Init+0x90>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <MX_TIM17_Init+0x90>)
 80015b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015bc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <MX_TIM17_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <MX_TIM17_Init+0x90>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <MX_TIM17_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80015d0:	4813      	ldr	r0, [pc, #76]	; (8001620 <MX_TIM17_Init+0x90>)
 80015d2:	f003 fe9f 	bl	8005314 <HAL_TIM_Base_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM17_Init+0x50>
  {
    Error_Handler();
 80015dc:	f000 fa4a 	bl	8001a74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 80015e0:	480f      	ldr	r0, [pc, #60]	; (8001620 <MX_TIM17_Init+0x90>)
 80015e2:	f003 ff5f 	bl	80054a4 <HAL_TIM_IC_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80015ec:	f000 fa42 	bl	8001a74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015f0:	2300      	movs	r3, #0
 80015f2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015f4:	2301      	movs	r3, #1
 80015f6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80015fc:	230f      	movs	r3, #15
 80015fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <MX_TIM17_Init+0x90>)
 8001608:	f004 f9fa 	bl	8005a00 <HAL_TIM_IC_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM17_Init+0x86>
  {
    Error_Handler();
 8001612:	f000 fa2f 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000041c 	.word	0x2000041c
 8001624:	40014800 	.word	0x40014800

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08e      	sub	sp, #56	; 0x38
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800163e:	4bb2      	ldr	r3, [pc, #712]	; (8001908 <MX_GPIO_Init+0x2e0>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4ab1      	ldr	r2, [pc, #708]	; (8001908 <MX_GPIO_Init+0x2e0>)
 8001644:	f043 0310 	orr.w	r3, r3, #16
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	4baf      	ldr	r3, [pc, #700]	; (8001908 <MX_GPIO_Init+0x2e0>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	623b      	str	r3, [r7, #32]
 8001654:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	4bac      	ldr	r3, [pc, #688]	; (8001908 <MX_GPIO_Init+0x2e0>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	4aab      	ldr	r2, [pc, #684]	; (8001908 <MX_GPIO_Init+0x2e0>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001662:	4ba9      	ldr	r3, [pc, #676]	; (8001908 <MX_GPIO_Init+0x2e0>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800166e:	4ba6      	ldr	r3, [pc, #664]	; (8001908 <MX_GPIO_Init+0x2e0>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	4aa5      	ldr	r2, [pc, #660]	; (8001908 <MX_GPIO_Init+0x2e0>)
 8001674:	f043 0320 	orr.w	r3, r3, #32
 8001678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167a:	4ba3      	ldr	r3, [pc, #652]	; (8001908 <MX_GPIO_Init+0x2e0>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001686:	4ba0      	ldr	r3, [pc, #640]	; (8001908 <MX_GPIO_Init+0x2e0>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4a9f      	ldr	r2, [pc, #636]	; (8001908 <MX_GPIO_Init+0x2e0>)
 800168c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4b9d      	ldr	r3, [pc, #628]	; (8001908 <MX_GPIO_Init+0x2e0>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b9a      	ldr	r3, [pc, #616]	; (8001908 <MX_GPIO_Init+0x2e0>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	4a99      	ldr	r2, [pc, #612]	; (8001908 <MX_GPIO_Init+0x2e0>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016aa:	4b97      	ldr	r3, [pc, #604]	; (8001908 <MX_GPIO_Init+0x2e0>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4b94      	ldr	r3, [pc, #592]	; (8001908 <MX_GPIO_Init+0x2e0>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a93      	ldr	r2, [pc, #588]	; (8001908 <MX_GPIO_Init+0x2e0>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b91      	ldr	r3, [pc, #580]	; (8001908 <MX_GPIO_Init+0x2e0>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ce:	4b8e      	ldr	r3, [pc, #568]	; (8001908 <MX_GPIO_Init+0x2e0>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a8d      	ldr	r2, [pc, #564]	; (8001908 <MX_GPIO_Init+0x2e0>)
 80016d4:	f043 0308 	orr.w	r3, r3, #8
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b8b      	ldr	r3, [pc, #556]	; (8001908 <MX_GPIO_Init+0x2e0>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016e6:	4b88      	ldr	r3, [pc, #544]	; (8001908 <MX_GPIO_Init+0x2e0>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a87      	ldr	r2, [pc, #540]	; (8001908 <MX_GPIO_Init+0x2e0>)
 80016ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b85      	ldr	r3, [pc, #532]	; (8001908 <MX_GPIO_Init+0x2e0>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80016fe:	f001 fe8d 	bl	800341c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	2140      	movs	r1, #64	; 0x40
 8001706:	4881      	ldr	r0, [pc, #516]	; (800190c <MX_GPIO_Init+0x2e4>)
 8001708:	f000 ffd8 	bl	80026bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800170c:	230c      	movs	r3, #12
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800171c:	230d      	movs	r3, #13
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001724:	4619      	mov	r1, r3
 8001726:	487a      	ldr	r0, [pc, #488]	; (8001910 <MX_GPIO_Init+0x2e8>)
 8001728:	f000 fe36 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800172c:	2307      	movs	r3, #7
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001730:	2312      	movs	r3, #18
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800173c:	2304      	movs	r3, #4
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	4619      	mov	r1, r3
 8001746:	4873      	ldr	r0, [pc, #460]	; (8001914 <MX_GPIO_Init+0x2ec>)
 8001748:	f000 fe26 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800175c:	230d      	movs	r3, #13
 800175e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001764:	4619      	mov	r1, r3
 8001766:	486b      	ldr	r0, [pc, #428]	; (8001914 <MX_GPIO_Init+0x2ec>)
 8001768:	f000 fe16 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800176c:	233f      	movs	r3, #63	; 0x3f
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001770:	230b      	movs	r3, #11
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	4866      	ldr	r0, [pc, #408]	; (8001918 <MX_GPIO_Init+0x2f0>)
 8001780:	f000 fe0a 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001784:	2301      	movs	r3, #1
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001794:	2301      	movs	r3, #1
 8001796:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179c:	4619      	mov	r1, r3
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f000 fdf9 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80017a6:	230a      	movs	r3, #10
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017aa:	230b      	movs	r3, #11
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f000 fdec 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017c0:	2301      	movs	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017d0:	2302      	movs	r3, #2
 80017d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d8:	4619      	mov	r1, r3
 80017da:	484c      	ldr	r0, [pc, #304]	; (800190c <MX_GPIO_Init+0x2e4>)
 80017dc:	f000 fddc 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017e0:	2302      	movs	r3, #2
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017e4:	230b      	movs	r3, #11
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f0:	4619      	mov	r1, r3
 80017f2:	4846      	ldr	r0, [pc, #280]	; (800190c <MX_GPIO_Init+0x2e4>)
 80017f4:	f000 fdd0 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017f8:	2304      	movs	r3, #4
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fc:	2303      	movs	r3, #3
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001808:	4619      	mov	r1, r3
 800180a:	4840      	ldr	r0, [pc, #256]	; (800190c <MX_GPIO_Init+0x2e4>)
 800180c:	f000 fdc4 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001810:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001822:	2301      	movs	r3, #1
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182a:	4619      	mov	r1, r3
 800182c:	4838      	ldr	r0, [pc, #224]	; (8001910 <MX_GPIO_Init+0x2e8>)
 800182e:	f000 fdb3 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001832:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001844:	2303      	movs	r3, #3
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184c:	4619      	mov	r1, r3
 800184e:	4830      	ldr	r0, [pc, #192]	; (8001910 <MX_GPIO_Init+0x2e8>)
 8001850:	f000 fda2 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001866:	2301      	movs	r3, #1
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186e:	4619      	mov	r1, r3
 8001870:	4826      	ldr	r0, [pc, #152]	; (800190c <MX_GPIO_Init+0x2e4>)
 8001872:	f000 fd91 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001876:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001888:	230d      	movs	r3, #13
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001890:	4619      	mov	r1, r3
 8001892:	481e      	ldr	r0, [pc, #120]	; (800190c <MX_GPIO_Init+0x2e4>)
 8001894:	f000 fd80 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001898:	f44f 7340 	mov.w	r3, #768	; 0x300
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018aa:	2307      	movs	r3, #7
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	4819      	ldr	r0, [pc, #100]	; (800191c <MX_GPIO_Init+0x2f4>)
 80018b6:	f000 fd6f 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018cc:	2302      	movs	r3, #2
 80018ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d4:	4619      	mov	r1, r3
 80018d6:	4811      	ldr	r0, [pc, #68]	; (800191c <MX_GPIO_Init+0x2f4>)
 80018d8:	f000 fd5e 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018dc:	2340      	movs	r3, #64	; 0x40
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80018ec:	230d      	movs	r3, #13
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f4:	4619      	mov	r1, r3
 80018f6:	4808      	ldr	r0, [pc, #32]	; (8001918 <MX_GPIO_Init+0x2f0>)
 80018f8:	f000 fd4e 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
 8001904:	e00c      	b.n	8001920 <MX_GPIO_Init+0x2f8>
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	48000400 	.word	0x48000400
 8001910:	48001000 	.word	0x48001000
 8001914:	48001400 	.word	0x48001400
 8001918:	48000800 	.word	0x48000800
 800191c:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001928:	2302      	movs	r3, #2
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001930:	4619      	mov	r1, r3
 8001932:	4843      	ldr	r0, [pc, #268]	; (8001a40 <MX_GPIO_Init+0x418>)
 8001934:	f000 fd30 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001938:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800194a:	230c      	movs	r3, #12
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001952:	4619      	mov	r1, r3
 8001954:	483a      	ldr	r0, [pc, #232]	; (8001a40 <MX_GPIO_Init+0x418>)
 8001956:	f000 fd1f 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800195a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800196c:	230a      	movs	r3, #10
 800196e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	4619      	mov	r1, r3
 8001976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197a:	f000 fd0d 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800197e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001996:	f000 fcff 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800199a:	2301      	movs	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019aa:	2309      	movs	r3, #9
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b2:	4619      	mov	r1, r3
 80019b4:	4823      	ldr	r0, [pc, #140]	; (8001a44 <MX_GPIO_Init+0x41c>)
 80019b6:	f000 fcef 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019ba:	2304      	movs	r3, #4
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80019ca:	230c      	movs	r3, #12
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d2:	4619      	mov	r1, r3
 80019d4:	481b      	ldr	r0, [pc, #108]	; (8001a44 <MX_GPIO_Init+0x41c>)
 80019d6:	f000 fcdf 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80019da:	2378      	movs	r3, #120	; 0x78
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ea:	2307      	movs	r3, #7
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	4619      	mov	r1, r3
 80019f4:	4813      	ldr	r0, [pc, #76]	; (8001a44 <MX_GPIO_Init+0x41c>)
 80019f6:	f000 fccf 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019fa:	2340      	movs	r3, #64	; 0x40
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a02:	2302      	movs	r3, #2
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480d      	ldr	r0, [pc, #52]	; (8001a48 <MX_GPIO_Init+0x420>)
 8001a12:	f000 fcc1 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a16:	2301      	movs	r3, #1
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a26:	2302      	movs	r3, #2
 8001a28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4806      	ldr	r0, [pc, #24]	; (8001a4c <MX_GPIO_Init+0x424>)
 8001a32:	f000 fcb1 	bl	8002398 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a36:	bf00      	nop
 8001a38:	3738      	adds	r7, #56	; 0x38
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	48000800 	.word	0x48000800
 8001a44:	48000c00 	.word	0x48000c00
 8001a48:	48000400 	.word	0x48000400
 8001a4c:	48001000 	.word	0x48001000

08001a50 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001a58:	1d39      	adds	r1, r7, #4
 8001a5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4803      	ldr	r0, [pc, #12]	; (8001a70 <__io_putchar+0x20>)
 8001a62:	f004 fcd9 	bl	8006418 <HAL_UART_Transmit>
  return ch;
 8001a66:	687b      	ldr	r3, [r7, #4]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200002d8 	.word	0x200002d8

08001a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a78:	b672      	cpsid	i
}
 8001a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <Error_Handler+0x8>
	...

08001a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6613      	str	r3, [r2, #96]	; 0x60
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0ae      	sub	sp, #184	; 0xb8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	2294      	movs	r2, #148	; 0x94
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f006 f8c1 	bl	8007c70 <memset>
  if(hi2c->Instance==I2C1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a21      	ldr	r2, [pc, #132]	; (8001b78 <HAL_I2C_MspInit+0xb0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d13b      	bne.n	8001b70 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001af8:	2340      	movs	r3, #64	; 0x40
 8001afa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fb71 	bl	80041ec <HAL_RCCEx_PeriphCLKConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b10:	f7ff ffb0 	bl	8001a74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_I2C_MspInit+0xb4>)
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b18:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <HAL_I2C_MspInit+0xb4>)
 8001b1a:	f043 0302 	orr.w	r3, r3, #2
 8001b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <HAL_I2C_MspInit+0xb4>)
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b34:	2312      	movs	r3, #18
 8001b36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b46:	2304      	movs	r3, #4
 8001b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b50:	4619      	mov	r1, r3
 8001b52:	480b      	ldr	r0, [pc, #44]	; (8001b80 <HAL_I2C_MspInit+0xb8>)
 8001b54:	f000 fc20 	bl	8002398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_I2C_MspInit+0xb4>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <HAL_I2C_MspInit+0xb4>)
 8001b5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b62:	6593      	str	r3, [r2, #88]	; 0x58
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_I2C_MspInit+0xb4>)
 8001b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b70:	bf00      	nop
 8001b72:	37b8      	adds	r7, #184	; 0xb8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	48000400 	.word	0x48000400

08001b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b0ae      	sub	sp, #184	; 0xb8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	2294      	movs	r2, #148	; 0x94
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f006 f863 	bl	8007c70 <memset>
  if(huart->Instance==LPUART1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a22      	ldr	r2, [pc, #136]	; (8001c38 <HAL_UART_MspInit+0xb4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d13d      	bne.n	8001c30 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bbc:	f107 0310 	add.w	r3, r7, #16
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f002 fb13 	bl	80041ec <HAL_RCCEx_PeriphCLKConfig>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bcc:	f7ff ff52 	bl	8001a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_UART_MspInit+0xb8>)
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <HAL_UART_MspInit+0xb8>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001bdc:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <HAL_UART_MspInit+0xb8>)
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <HAL_UART_MspInit+0xb8>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <HAL_UART_MspInit+0xb8>)
 8001bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_UART_MspInit+0xb8>)
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001c00:	f001 fc0c 	bl	800341c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001c1e:	2308      	movs	r3, #8
 8001c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <HAL_UART_MspInit+0xbc>)
 8001c2c:	f000 fbb4 	bl	8002398 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001c30:	bf00      	nop
 8001c32:	37b8      	adds	r7, #184	; 0xb8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40008000 	.word	0x40008000
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	48001800 	.word	0x48001800

08001c44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <HAL_SPI_MspInit+0x7c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d128      	bne.n	8001cb8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_SPI_MspInit+0x80>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6a:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <HAL_SPI_MspInit+0x80>)
 8001c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c70:	6613      	str	r3, [r2, #96]	; 0x60
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_SPI_MspInit+0x80>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_SPI_MspInit+0x80>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <HAL_SPI_MspInit+0x80>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_SPI_MspInit+0x80>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c96:	23f0      	movs	r3, #240	; 0xf0
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb4:	f000 fb70 	bl	8002398 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40013000 	.word	0x40013000
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08c      	sub	sp, #48	; 0x30
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM15)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a36      	ldr	r2, [pc, #216]	; (8001dc0 <HAL_TIM_Base_MspInit+0xf8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d131      	bne.n	8001d4e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <HAL_TIM_Base_MspInit+0xfc>)
 8001cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cee:	4a35      	ldr	r2, [pc, #212]	; (8001dc4 <HAL_TIM_Base_MspInit+0xfc>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6613      	str	r3, [r2, #96]	; 0x60
 8001cf6:	4b33      	ldr	r3, [pc, #204]	; (8001dc4 <HAL_TIM_Base_MspInit+0xfc>)
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <HAL_TIM_Base_MspInit+0xfc>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	4a2f      	ldr	r2, [pc, #188]	; (8001dc4 <HAL_TIM_Base_MspInit+0xfc>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_TIM_Base_MspInit+0xfc>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697b      	ldr	r3, [r7, #20]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001d2c:	230e      	movs	r3, #14
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 031c 	add.w	r3, r7, #28
 8001d34:	4619      	mov	r1, r3
 8001d36:	4824      	ldr	r0, [pc, #144]	; (8001dc8 <HAL_TIM_Base_MspInit+0x100>)
 8001d38:	f000 fb2e 	bl	8002398 <HAL_GPIO_Init>

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2101      	movs	r1, #1
 8001d40:	2018      	movs	r0, #24
 8001d42:	f000 faf2 	bl	800232a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001d46:	2018      	movs	r0, #24
 8001d48:	f000 fb0b 	bl	8002362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001d4c:	e034      	b.n	8001db8 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM17)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <HAL_TIM_Base_MspInit+0x104>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d12f      	bne.n	8001db8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_TIM_Base_MspInit+0xfc>)
 8001d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <HAL_TIM_Base_MspInit+0xfc>)
 8001d5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d62:	6613      	str	r3, [r2, #96]	; 0x60
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_TIM_Base_MspInit+0xfc>)
 8001d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_TIM_Base_MspInit+0xfc>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	4a13      	ldr	r2, [pc, #76]	; (8001dc4 <HAL_TIM_Base_MspInit+0xfc>)
 8001d76:	f043 0310 	orr.w	r3, r3, #16
 8001d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_TIM_Base_MspInit+0xfc>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8001d98:	230e      	movs	r3, #14
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4619      	mov	r1, r3
 8001da2:	480b      	ldr	r0, [pc, #44]	; (8001dd0 <HAL_TIM_Base_MspInit+0x108>)
 8001da4:	f000 faf8 	bl	8002398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2100      	movs	r1, #0
 8001dac:	201a      	movs	r0, #26
 8001dae:	f000 fabc 	bl	800232a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001db2:	201a      	movs	r0, #26
 8001db4:	f000 fad5 	bl	8002362 <HAL_NVIC_EnableIRQ>
}
 8001db8:	bf00      	nop
 8001dba:	3730      	adds	r7, #48	; 0x30
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40014000 	.word	0x40014000
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	48000400 	.word	0x48000400
 8001dcc:	40014800 	.word	0x40014800
 8001dd0:	48001000 	.word	0x48001000

08001dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <NMI_Handler+0x4>

08001dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <HardFault_Handler+0x4>

08001de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <MemManage_Handler+0x4>

08001de6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <BusFault_Handler+0x4>

08001dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <UsageFault_Handler+0x4>

08001df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e20:	f000 f988 	bl	8002134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8001e2e:	f003 fce5 	bl	80057fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  acc = ReadAccData();
 8001e32:	f7ff f879 	bl	8000f28 <ReadAccData>
 8001e36:	ee07 0a90 	vmov	s15, r0
 8001e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 8001e40:	edc3 7a00 	vstr	s15, [r3]
  printLEDs(acc);
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fb95 	bl	8000578 <__aeabi_f2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	ec43 2b10 	vmov	d0, r2, r3
 8001e56:	f7ff f993 	bl	8001180 <printLEDs>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200003d0 	.word	0x200003d0
 8001e64:	20000468 	.word	0x20000468

08001e68 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8001e70:	f003 fcc4 	bl	80057fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  int val = __HAL_TIM_GET_COUNTER(&htim17);
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	607b      	str	r3, [r7, #4]

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	2000041c 	.word	0x2000041c

08001e88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return 1;
 8001e8c:	2301      	movs	r3, #1
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <_kill>:

int _kill(int pid, int sig)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea2:	f005 fef1 	bl	8007c88 <__errno>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2216      	movs	r2, #22
 8001eaa:	601a      	str	r2, [r3, #0]
  return -1;
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <_exit>:

void _exit (int status)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ffe7 	bl	8001e98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eca:	e7fe      	b.n	8001eca <_exit+0x12>

08001ecc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	e00a      	b.n	8001ef4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ede:	f3af 8000 	nop.w
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	60ba      	str	r2, [r7, #8]
 8001eea:	b2ca      	uxtb	r2, r1
 8001eec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	dbf0      	blt.n	8001ede <_read+0x12>
  }

  return len;
 8001efc:	687b      	ldr	r3, [r7, #4]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e009      	b.n	8001f2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	60ba      	str	r2, [r7, #8]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fd95 	bl	8001a50 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	dbf1      	blt.n	8001f18 <_write+0x12>
  }
  return len;
 8001f34:	687b      	ldr	r3, [r7, #4]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <_close>:

int _close(int file)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f66:	605a      	str	r2, [r3, #4]
  return 0;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_isatty>:

int _isatty(int file)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb0:	4a14      	ldr	r2, [pc, #80]	; (8002004 <_sbrk+0x5c>)
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <_sbrk+0x60>)
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d102      	bne.n	8001fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <_sbrk+0x64>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <_sbrk+0x68>)
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d207      	bcs.n	8001fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd8:	f005 fe56 	bl	8007c88 <__errno>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	220c      	movs	r2, #12
 8001fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fe6:	e009      	b.n	8001ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <_sbrk+0x64>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <_sbrk+0x64>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <_sbrk+0x64>)
 8001ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200a0000 	.word	0x200a0000
 8002008:	00000400 	.word	0x00000400
 800200c:	2000046c 	.word	0x2000046c
 8002010:	200005c0 	.word	0x200005c0

08002014 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <SystemInit+0x20>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <SystemInit+0x20>)
 8002020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002070 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800203c:	f7ff ffea 	bl	8002014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <LoopForever+0x6>)
  ldr r1, =_edata
 8002042:	490d      	ldr	r1, [pc, #52]	; (8002078 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002044:	4a0d      	ldr	r2, [pc, #52]	; (800207c <LoopForever+0xe>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002048:	e002      	b.n	8002050 <LoopCopyDataInit>

0800204a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800204c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204e:	3304      	adds	r3, #4

08002050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002054:	d3f9      	bcc.n	800204a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002058:	4c0a      	ldr	r4, [pc, #40]	; (8002084 <LoopForever+0x16>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800205c:	e001      	b.n	8002062 <LoopFillZerobss>

0800205e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002060:	3204      	adds	r2, #4

08002062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002064:	d3fb      	bcc.n	800205e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002066:	f005 fe15 	bl	8007c94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800206a:	f7ff f8fd 	bl	8001268 <main>

0800206e <LoopForever>:

LoopForever:
    b LoopForever
 800206e:	e7fe      	b.n	800206e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002070:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002078:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800207c:	08009fe4 	.word	0x08009fe4
  ldr r2, =_sbss
 8002080:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002084:	200005c0 	.word	0x200005c0

08002088 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002088:	e7fe      	b.n	8002088 <ADC1_IRQHandler>

0800208a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002094:	2003      	movs	r0, #3
 8002096:	f000 f93d 	bl	8002314 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800209a:	2000      	movs	r0, #0
 800209c:	f000 f80e 	bl	80020bc <HAL_InitTick>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	71fb      	strb	r3, [r7, #7]
 80020aa:	e001      	b.n	80020b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020ac:	f7ff fce8 	bl	8001a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020b0:	79fb      	ldrb	r3, [r7, #7]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <HAL_InitTick+0x6c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d023      	beq.n	8002118 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020d0:	4b16      	ldr	r3, [pc, #88]	; (800212c <HAL_InitTick+0x70>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <HAL_InitTick+0x6c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020de:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f949 	bl	800237e <HAL_SYSTICK_Config>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10f      	bne.n	8002112 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b0f      	cmp	r3, #15
 80020f6:	d809      	bhi.n	800210c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f8:	2200      	movs	r2, #0
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002100:	f000 f913 	bl	800232a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002104:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <HAL_InitTick+0x74>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e007      	b.n	800211c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e004      	b.n	800211c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
 8002116:	e001      	b.n	800211c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000000c 	.word	0x2000000c
 800212c:	20000004 	.word	0x20000004
 8002130:	20000008 	.word	0x20000008

08002134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_IncTick+0x20>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_IncTick+0x24>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4413      	add	r3, r2
 8002144:	4a04      	ldr	r2, [pc, #16]	; (8002158 <HAL_IncTick+0x24>)
 8002146:	6013      	str	r3, [r2, #0]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	2000000c 	.word	0x2000000c
 8002158:	20000470 	.word	0x20000470

0800215c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return uwTick;
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <HAL_GetTick+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000470 	.word	0x20000470

08002174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002190:	4013      	ands	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800219c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a6:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	60d3      	str	r3, [r2, #12]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <__NVIC_GetPriorityGrouping+0x18>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	f003 0307 	and.w	r3, r3, #7
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	db0b      	blt.n	8002202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	f003 021f 	and.w	r2, r3, #31
 80021f0:	4907      	ldr	r1, [pc, #28]	; (8002210 <__NVIC_EnableIRQ+0x38>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2001      	movs	r0, #1
 80021fa:	fa00 f202 	lsl.w	r2, r0, r2
 80021fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000e100 	.word	0xe000e100

08002214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	2b00      	cmp	r3, #0
 8002226:	db0a      	blt.n	800223e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	490c      	ldr	r1, [pc, #48]	; (8002260 <__NVIC_SetPriority+0x4c>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	0112      	lsls	r2, r2, #4
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	440b      	add	r3, r1
 8002238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800223c:	e00a      	b.n	8002254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4908      	ldr	r1, [pc, #32]	; (8002264 <__NVIC_SetPriority+0x50>)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	3b04      	subs	r3, #4
 800224c:	0112      	lsls	r2, r2, #4
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	440b      	add	r3, r1
 8002252:	761a      	strb	r2, [r3, #24]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000e100 	.word	0xe000e100
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f1c3 0307 	rsb	r3, r3, #7
 8002282:	2b04      	cmp	r3, #4
 8002284:	bf28      	it	cs
 8002286:	2304      	movcs	r3, #4
 8002288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3304      	adds	r3, #4
 800228e:	2b06      	cmp	r3, #6
 8002290:	d902      	bls.n	8002298 <NVIC_EncodePriority+0x30>
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3b03      	subs	r3, #3
 8002296:	e000      	b.n	800229a <NVIC_EncodePriority+0x32>
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	401a      	ands	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	43d9      	mvns	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	4313      	orrs	r3, r2
         );
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3724      	adds	r7, #36	; 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e0:	d301      	bcc.n	80022e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00f      	b.n	8002306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <SysTick_Config+0x40>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ee:	210f      	movs	r1, #15
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022f4:	f7ff ff8e 	bl	8002214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <SysTick_Config+0x40>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <SysTick_Config+0x40>)
 8002300:	2207      	movs	r2, #7
 8002302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	e000e010 	.word	0xe000e010

08002314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff29 	bl	8002174 <__NVIC_SetPriorityGrouping>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800233c:	f7ff ff3e 	bl	80021bc <__NVIC_GetPriorityGrouping>
 8002340:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	6978      	ldr	r0, [r7, #20]
 8002348:	f7ff ff8e 	bl	8002268 <NVIC_EncodePriority>
 800234c:	4602      	mov	r2, r0
 800234e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff5d 	bl	8002214 <__NVIC_SetPriority>
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800236c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff31 	bl	80021d8 <__NVIC_EnableIRQ>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ffa2 	bl	80022d0 <SysTick_Config>
 800238c:	4603      	mov	r3, r0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a6:	e166      	b.n	8002676 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2101      	movs	r1, #1
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	4013      	ands	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8158 	beq.w	8002670 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d005      	beq.n	80023d8 <HAL_GPIO_Init+0x40>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d130      	bne.n	800243a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800240e:	2201      	movs	r2, #1
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f003 0201 	and.w	r2, r3, #1
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b03      	cmp	r3, #3
 8002444:	d017      	beq.n	8002476 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	2203      	movs	r2, #3
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d123      	bne.n	80024ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	08da      	lsrs	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3208      	adds	r2, #8
 800248a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800248e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	220f      	movs	r2, #15
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	08da      	lsrs	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3208      	adds	r2, #8
 80024c4:	6939      	ldr	r1, [r7, #16]
 80024c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0203 	and.w	r2, r3, #3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 80b2 	beq.w	8002670 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250c:	4b61      	ldr	r3, [pc, #388]	; (8002694 <HAL_GPIO_Init+0x2fc>)
 800250e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002510:	4a60      	ldr	r2, [pc, #384]	; (8002694 <HAL_GPIO_Init+0x2fc>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6613      	str	r3, [r2, #96]	; 0x60
 8002518:	4b5e      	ldr	r3, [pc, #376]	; (8002694 <HAL_GPIO_Init+0x2fc>)
 800251a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002524:	4a5c      	ldr	r2, [pc, #368]	; (8002698 <HAL_GPIO_Init+0x300>)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	220f      	movs	r2, #15
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800254e:	d02b      	beq.n	80025a8 <HAL_GPIO_Init+0x210>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a52      	ldr	r2, [pc, #328]	; (800269c <HAL_GPIO_Init+0x304>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d025      	beq.n	80025a4 <HAL_GPIO_Init+0x20c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a51      	ldr	r2, [pc, #324]	; (80026a0 <HAL_GPIO_Init+0x308>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d01f      	beq.n	80025a0 <HAL_GPIO_Init+0x208>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a50      	ldr	r2, [pc, #320]	; (80026a4 <HAL_GPIO_Init+0x30c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d019      	beq.n	800259c <HAL_GPIO_Init+0x204>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a4f      	ldr	r2, [pc, #316]	; (80026a8 <HAL_GPIO_Init+0x310>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d013      	beq.n	8002598 <HAL_GPIO_Init+0x200>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a4e      	ldr	r2, [pc, #312]	; (80026ac <HAL_GPIO_Init+0x314>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00d      	beq.n	8002594 <HAL_GPIO_Init+0x1fc>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a4d      	ldr	r2, [pc, #308]	; (80026b0 <HAL_GPIO_Init+0x318>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d007      	beq.n	8002590 <HAL_GPIO_Init+0x1f8>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a4c      	ldr	r2, [pc, #304]	; (80026b4 <HAL_GPIO_Init+0x31c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d101      	bne.n	800258c <HAL_GPIO_Init+0x1f4>
 8002588:	2307      	movs	r3, #7
 800258a:	e00e      	b.n	80025aa <HAL_GPIO_Init+0x212>
 800258c:	2308      	movs	r3, #8
 800258e:	e00c      	b.n	80025aa <HAL_GPIO_Init+0x212>
 8002590:	2306      	movs	r3, #6
 8002592:	e00a      	b.n	80025aa <HAL_GPIO_Init+0x212>
 8002594:	2305      	movs	r3, #5
 8002596:	e008      	b.n	80025aa <HAL_GPIO_Init+0x212>
 8002598:	2304      	movs	r3, #4
 800259a:	e006      	b.n	80025aa <HAL_GPIO_Init+0x212>
 800259c:	2303      	movs	r3, #3
 800259e:	e004      	b.n	80025aa <HAL_GPIO_Init+0x212>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e002      	b.n	80025aa <HAL_GPIO_Init+0x212>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <HAL_GPIO_Init+0x212>
 80025a8:	2300      	movs	r3, #0
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	f002 0203 	and.w	r2, r2, #3
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	4093      	lsls	r3, r2
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ba:	4937      	ldr	r1, [pc, #220]	; (8002698 <HAL_GPIO_Init+0x300>)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c8:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <HAL_GPIO_Init+0x320>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025ec:	4a32      	ldr	r2, [pc, #200]	; (80026b8 <HAL_GPIO_Init+0x320>)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025f2:	4b31      	ldr	r3, [pc, #196]	; (80026b8 <HAL_GPIO_Init+0x320>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002616:	4a28      	ldr	r2, [pc, #160]	; (80026b8 <HAL_GPIO_Init+0x320>)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800261c:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <HAL_GPIO_Init+0x320>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	43db      	mvns	r3, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002640:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <HAL_GPIO_Init+0x320>)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002646:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <HAL_GPIO_Init+0x320>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800266a:	4a13      	ldr	r2, [pc, #76]	; (80026b8 <HAL_GPIO_Init+0x320>)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3301      	adds	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	f47f ae91 	bne.w	80023a8 <HAL_GPIO_Init+0x10>
  }
}
 8002686:	bf00      	nop
 8002688:	bf00      	nop
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	40021000 	.word	0x40021000
 8002698:	40010000 	.word	0x40010000
 800269c:	48000400 	.word	0x48000400
 80026a0:	48000800 	.word	0x48000800
 80026a4:	48000c00 	.word	0x48000c00
 80026a8:	48001000 	.word	0x48001000
 80026ac:	48001400 	.word	0x48001400
 80026b0:	48001800 	.word	0x48001800
 80026b4:	48001c00 	.word	0x48001c00
 80026b8:	40010400 	.word	0x40010400

080026bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	807b      	strh	r3, [r7, #2]
 80026c8:	4613      	mov	r3, r2
 80026ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026cc:	787b      	ldrb	r3, [r7, #1]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e08d      	b.n	800281a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff f9d8 	bl	8001ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2224      	movs	r2, #36	; 0x24
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0201 	bic.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800273c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800274c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d107      	bne.n	8002766 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	e006      	b.n	8002774 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002772:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d108      	bne.n	800278e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	e007      	b.n	800279e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800279c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69d9      	ldr	r1, [r3, #28]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1a      	ldr	r2, [r3, #32]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	461a      	mov	r2, r3
 8002830:	460b      	mov	r3, r1
 8002832:	817b      	strh	r3, [r7, #10]
 8002834:	4613      	mov	r3, r2
 8002836:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b20      	cmp	r3, #32
 8002842:	f040 80fd 	bne.w	8002a40 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_I2C_Master_Transmit+0x30>
 8002850:	2302      	movs	r3, #2
 8002852:	e0f6      	b.n	8002a42 <HAL_I2C_Master_Transmit+0x21e>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800285c:	f7ff fc7e 	bl	800215c <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2319      	movs	r3, #25
 8002868:	2201      	movs	r2, #1
 800286a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fa0a 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0e1      	b.n	8002a42 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2221      	movs	r2, #33	; 0x21
 8002882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2210      	movs	r2, #16
 800288a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	893a      	ldrh	r2, [r7, #8]
 800289e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2bff      	cmp	r3, #255	; 0xff
 80028ae:	d906      	bls.n	80028be <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	22ff      	movs	r2, #255	; 0xff
 80028b4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80028b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	e007      	b.n	80028ce <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80028c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028cc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d024      	beq.n	8002920 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	781a      	ldrb	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	b2db      	uxtb	r3, r3
 800290c:	3301      	adds	r3, #1
 800290e:	b2da      	uxtb	r2, r3
 8002910:	8979      	ldrh	r1, [r7, #10]
 8002912:	4b4e      	ldr	r3, [pc, #312]	; (8002a4c <HAL_I2C_Master_Transmit+0x228>)
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fbf1 	bl	8003100 <I2C_TransferConfig>
 800291e:	e066      	b.n	80029ee <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	b2da      	uxtb	r2, r3
 8002926:	8979      	ldrh	r1, [r7, #10]
 8002928:	4b48      	ldr	r3, [pc, #288]	; (8002a4c <HAL_I2C_Master_Transmit+0x228>)
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fbe6 	bl	8003100 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002934:	e05b      	b.n	80029ee <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	6a39      	ldr	r1, [r7, #32]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f9f3 	bl	8002d26 <I2C_WaitOnTXISFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e07b      	b.n	8002a42 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d034      	beq.n	80029ee <HAL_I2C_Master_Transmit+0x1ca>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002988:	2b00      	cmp	r3, #0
 800298a:	d130      	bne.n	80029ee <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	2200      	movs	r2, #0
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f976 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e04d      	b.n	8002a42 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2bff      	cmp	r3, #255	; 0xff
 80029ae:	d90e      	bls.n	80029ce <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	22ff      	movs	r2, #255	; 0xff
 80029b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	8979      	ldrh	r1, [r7, #10]
 80029be:	2300      	movs	r3, #0
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fb9a 	bl	8003100 <I2C_TransferConfig>
 80029cc:	e00f      	b.n	80029ee <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	8979      	ldrh	r1, [r7, #10]
 80029e0:	2300      	movs	r3, #0
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fb89 	bl	8003100 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d19e      	bne.n	8002936 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	6a39      	ldr	r1, [r7, #32]
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 f9d9 	bl	8002db4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e01a      	b.n	8002a42 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2220      	movs	r2, #32
 8002a12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6859      	ldr	r1, [r3, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <HAL_I2C_Master_Transmit+0x22c>)
 8002a20:	400b      	ands	r3, r1
 8002a22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e000      	b.n	8002a42 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	80002000 	.word	0x80002000
 8002a50:	fe00e800 	.word	0xfe00e800

08002a54 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	460b      	mov	r3, r1
 8002a62:	817b      	strh	r3, [r7, #10]
 8002a64:	4613      	mov	r3, r2
 8002a66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	f040 80db 	bne.w	8002c2c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_I2C_Master_Receive+0x30>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0d4      	b.n	8002c2e <HAL_I2C_Master_Receive+0x1da>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a8c:	f7ff fb66 	bl	800215c <HAL_GetTick>
 8002a90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2319      	movs	r3, #25
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f8f2 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0bf      	b.n	8002c2e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2222      	movs	r2, #34	; 0x22
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	893a      	ldrh	r2, [r7, #8]
 8002ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2bff      	cmp	r3, #255	; 0xff
 8002ade:	d90e      	bls.n	8002afe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	22ff      	movs	r2, #255	; 0xff
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	8979      	ldrh	r1, [r7, #10]
 8002aee:	4b52      	ldr	r3, [pc, #328]	; (8002c38 <HAL_I2C_Master_Receive+0x1e4>)
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fb02 	bl	8003100 <I2C_TransferConfig>
 8002afc:	e06d      	b.n	8002bda <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	8979      	ldrh	r1, [r7, #10]
 8002b10:	4b49      	ldr	r3, [pc, #292]	; (8002c38 <HAL_I2C_Master_Receive+0x1e4>)
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 faf1 	bl	8003100 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002b1e:	e05c      	b.n	8002bda <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	6a39      	ldr	r1, [r7, #32]
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f989 	bl	8002e3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e07c      	b.n	8002c2e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d034      	beq.n	8002bda <HAL_I2C_Master_Receive+0x186>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d130      	bne.n	8002bda <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f880 	bl	8002c88 <I2C_WaitOnFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e04d      	b.n	8002c2e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2bff      	cmp	r3, #255	; 0xff
 8002b9a:	d90e      	bls.n	8002bba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	22ff      	movs	r2, #255	; 0xff
 8002ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	8979      	ldrh	r1, [r7, #10]
 8002baa:	2300      	movs	r3, #0
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 faa4 	bl	8003100 <I2C_TransferConfig>
 8002bb8:	e00f      	b.n	8002bda <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	8979      	ldrh	r1, [r7, #10]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fa93 	bl	8003100 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d19d      	bne.n	8002b20 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	6a39      	ldr	r1, [r7, #32]
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f8e3 	bl	8002db4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e01a      	b.n	8002c2e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6859      	ldr	r1, [r3, #4]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <HAL_I2C_Master_Receive+0x1e8>)
 8002c0c:	400b      	ands	r3, r1
 8002c0e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e000      	b.n	8002c2e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c2c:	2302      	movs	r3, #2
  }
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	80002400 	.word	0x80002400
 8002c3c:	fe00e800 	.word	0xfe00e800

08002c40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d103      	bne.n	8002c5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d007      	beq.n	8002c7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	619a      	str	r2, [r3, #24]
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	4613      	mov	r3, r2
 8002c96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c98:	e031      	b.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ca0:	d02d      	beq.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca2:	f7ff fa5b 	bl	800215c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d302      	bcc.n	8002cb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d122      	bne.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d113      	bne.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	f043 0220 	orr.w	r2, r3, #32
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00f      	b.n	8002d1e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699a      	ldr	r2, [r3, #24]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4013      	ands	r3, r2
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	bf0c      	ite	eq
 8002d0e:	2301      	moveq	r3, #1
 8002d10:	2300      	movne	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d0be      	beq.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d32:	e033      	b.n	8002d9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f901 	bl	8002f40 <I2C_IsErrorOccurred>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e031      	b.n	8002dac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d4e:	d025      	beq.n	8002d9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d50:	f7ff fa04 	bl	800215c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d302      	bcc.n	8002d66 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d11a      	bne.n	8002d9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d013      	beq.n	8002d9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e007      	b.n	8002dac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d1c4      	bne.n	8002d34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dc0:	e02f      	b.n	8002e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f8ba 	bl	8002f40 <I2C_IsErrorOccurred>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e02d      	b.n	8002e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7ff f9c1 	bl	800215c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d11a      	bne.n	8002e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d013      	beq.n	8002e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	f043 0220 	orr.w	r2, r3, #32
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e007      	b.n	8002e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d1c8      	bne.n	8002dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e48:	e06b      	b.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f876 	bl	8002f40 <I2C_IsErrorOccurred>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e069      	b.n	8002f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d138      	bne.n	8002ede <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d105      	bne.n	8002e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e055      	b.n	8002f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d107      	bne.n	8002ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2210      	movs	r2, #16
 8002e9a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
 8002ea2:	e002      	b.n	8002eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b1f      	ldr	r3, [pc, #124]	; (8002f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e029      	b.n	8002f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7ff f93d 	bl	800215c <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d116      	bne.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d00f      	beq.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e007      	b.n	8002f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d18c      	bne.n	8002e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	fe00e800 	.word	0xfe00e800

08002f40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d068      	beq.n	800303e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2210      	movs	r2, #16
 8002f72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f74:	e049      	b.n	800300a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f7c:	d045      	beq.n	800300a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f7e:	f7ff f8ed 	bl	800215c <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <I2C_IsErrorOccurred+0x54>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d13a      	bne.n	800300a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fa6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb6:	d121      	bne.n	8002ffc <I2C_IsErrorOccurred+0xbc>
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fbe:	d01d      	beq.n	8002ffc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d01a      	beq.n	8002ffc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fd4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fd6:	f7ff f8c1 	bl	800215c <HAL_GetTick>
 8002fda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fdc:	e00e      	b.n	8002ffc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fde:	f7ff f8bd 	bl	800215c <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b19      	cmp	r3, #25
 8002fea:	d907      	bls.n	8002ffc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f043 0320 	orr.w	r3, r3, #32
 8002ff2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002ffa:	e006      	b.n	800300a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	2b20      	cmp	r3, #32
 8003008:	d1e9      	bne.n	8002fde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b20      	cmp	r3, #32
 8003016:	d003      	beq.n	8003020 <I2C_IsErrorOccurred+0xe0>
 8003018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0aa      	beq.n	8002f76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003024:	2b00      	cmp	r3, #0
 8003026:	d103      	bne.n	8003030 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2220      	movs	r2, #32
 800302e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00b      	beq.n	8003068 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003060:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	f043 0308 	orr.w	r3, r3, #8
 8003078:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003082:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	f043 0302 	orr.w	r3, r3, #2
 800309a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80030ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01c      	beq.n	80030ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff fdc3 	bl	8002c40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <I2C_IsErrorOccurred+0x1bc>)
 80030c6:	400b      	ands	r3, r1
 80030c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80030ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3728      	adds	r7, #40	; 0x28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	fe00e800 	.word	0xfe00e800

08003100 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	460b      	mov	r3, r1
 800310c:	817b      	strh	r3, [r7, #10]
 800310e:	4613      	mov	r3, r2
 8003110:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003112:	897b      	ldrh	r3, [r7, #10]
 8003114:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003118:	7a7b      	ldrb	r3, [r7, #9]
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003120:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	4313      	orrs	r3, r2
 800312a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800312e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	0d5b      	lsrs	r3, r3, #21
 800313a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800313e:	4b08      	ldr	r3, [pc, #32]	; (8003160 <I2C_TransferConfig+0x60>)
 8003140:	430b      	orrs	r3, r1
 8003142:	43db      	mvns	r3, r3
 8003144:	ea02 0103 	and.w	r1, r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	03ff63ff 	.word	0x03ff63ff

08003164 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b20      	cmp	r3, #32
 8003178:	d138      	bne.n	80031ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003184:	2302      	movs	r3, #2
 8003186:	e032      	b.n	80031ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2224      	movs	r2, #36	; 0x24
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6819      	ldr	r1, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e000      	b.n	80031ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
  }
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b20      	cmp	r3, #32
 800320e:	d139      	bne.n	8003284 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800321a:	2302      	movs	r3, #2
 800321c:	e033      	b.n	8003286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2224      	movs	r2, #36	; 0x24
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0201 	bic.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800324c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003284:	2302      	movs	r3, #2
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003298:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a4:	d102      	bne.n	80032ac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80032a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032aa:	e00b      	b.n	80032c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80032ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ba:	d102      	bne.n	80032c2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80032bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032c0:	e000      	b.n	80032c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80032c2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40007000 	.word	0x40007000

080032d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d141      	bne.n	8003366 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032e2:	4b4b      	ldr	r3, [pc, #300]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ee:	d131      	bne.n	8003354 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032f0:	4b47      	ldr	r3, [pc, #284]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032f6:	4a46      	ldr	r2, [pc, #280]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003300:	4b43      	ldr	r3, [pc, #268]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003308:	4a41      	ldr	r2, [pc, #260]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800330e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003310:	4b40      	ldr	r3, [pc, #256]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2232      	movs	r2, #50	; 0x32
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	4a3f      	ldr	r2, [pc, #252]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	0c9b      	lsrs	r3, r3, #18
 8003322:	3301      	adds	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003326:	e002      	b.n	800332e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3b01      	subs	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800332e:	4b38      	ldr	r3, [pc, #224]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333a:	d102      	bne.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f2      	bne.n	8003328 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003342:	4b33      	ldr	r3, [pc, #204]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334e:	d158      	bne.n	8003402 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e057      	b.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003354:	4b2e      	ldr	r3, [pc, #184]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800335a:	4a2d      	ldr	r2, [pc, #180]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003360:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003364:	e04d      	b.n	8003402 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336c:	d141      	bne.n	80033f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800336e:	4b28      	ldr	r3, [pc, #160]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337a:	d131      	bne.n	80033e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800337c:	4b24      	ldr	r3, [pc, #144]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003382:	4a23      	ldr	r2, [pc, #140]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003388:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800338c:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003394:	4a1e      	ldr	r2, [pc, #120]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800339a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800339c:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2232      	movs	r2, #50	; 0x32
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	0c9b      	lsrs	r3, r3, #18
 80033ae:	3301      	adds	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033b2:	e002      	b.n	80033ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c6:	d102      	bne.n	80033ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f2      	bne.n	80033b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033da:	d112      	bne.n	8003402 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e011      	b.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e6:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033f0:	e007      	b.n	8003402 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033f2:	4b07      	ldr	r3, [pc, #28]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033fa:	4a05      	ldr	r2, [pc, #20]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003400:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40007000 	.word	0x40007000
 8003414:	20000004 	.word	0x20000004
 8003418:	431bde83 	.word	0x431bde83

0800341c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a04      	ldr	r2, [pc, #16]	; (8003438 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800342a:	6053      	str	r3, [r2, #4]
}
 800342c:	bf00      	nop
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40007000 	.word	0x40007000

0800343c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d102      	bne.n	8003450 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f000 bc08 	b.w	8003c60 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003450:	4b96      	ldr	r3, [pc, #600]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800345a:	4b94      	ldr	r3, [pc, #592]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80e4 	beq.w	800363a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <HAL_RCC_OscConfig+0x4c>
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	f040 808b 	bne.w	8003596 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2b01      	cmp	r3, #1
 8003484:	f040 8087 	bne.w	8003596 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003488:	4b88      	ldr	r3, [pc, #544]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_OscConfig+0x64>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e3df      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1a      	ldr	r2, [r3, #32]
 80034a4:	4b81      	ldr	r3, [pc, #516]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d004      	beq.n	80034ba <HAL_RCC_OscConfig+0x7e>
 80034b0:	4b7e      	ldr	r3, [pc, #504]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b8:	e005      	b.n	80034c6 <HAL_RCC_OscConfig+0x8a>
 80034ba:	4b7c      	ldr	r3, [pc, #496]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d223      	bcs.n	8003512 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 fdcc 	bl	800406c <RCC_SetFlashLatencyFromMSIRange>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e3c0      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034de:	4b73      	ldr	r3, [pc, #460]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a72      	ldr	r2, [pc, #456]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034e4:	f043 0308 	orr.w	r3, r3, #8
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	4b70      	ldr	r3, [pc, #448]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	496d      	ldr	r1, [pc, #436]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034fc:	4b6b      	ldr	r3, [pc, #428]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	021b      	lsls	r3, r3, #8
 800350a:	4968      	ldr	r1, [pc, #416]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800350c:	4313      	orrs	r3, r2
 800350e:	604b      	str	r3, [r1, #4]
 8003510:	e025      	b.n	800355e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003512:	4b66      	ldr	r3, [pc, #408]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a65      	ldr	r2, [pc, #404]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003518:	f043 0308 	orr.w	r3, r3, #8
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	4b63      	ldr	r3, [pc, #396]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	4960      	ldr	r1, [pc, #384]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003530:	4b5e      	ldr	r3, [pc, #376]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	495b      	ldr	r1, [pc, #364]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fd8c 	bl	800406c <RCC_SetFlashLatencyFromMSIRange>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e380      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800355e:	f000 fcc1 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003562:	4602      	mov	r2, r0
 8003564:	4b51      	ldr	r3, [pc, #324]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	091b      	lsrs	r3, r3, #4
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	4950      	ldr	r1, [pc, #320]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003570:	5ccb      	ldrb	r3, [r1, r3]
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	fa22 f303 	lsr.w	r3, r2, r3
 800357a:	4a4e      	ldr	r2, [pc, #312]	; (80036b4 <HAL_RCC_OscConfig+0x278>)
 800357c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800357e:	4b4e      	ldr	r3, [pc, #312]	; (80036b8 <HAL_RCC_OscConfig+0x27c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe fd9a 	bl	80020bc <HAL_InitTick>
 8003588:	4603      	mov	r3, r0
 800358a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d052      	beq.n	8003638 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	e364      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d032      	beq.n	8003604 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800359e:	4b43      	ldr	r3, [pc, #268]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a42      	ldr	r2, [pc, #264]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035aa:	f7fe fdd7 	bl	800215c <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035b2:	f7fe fdd3 	bl	800215c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e34d      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035c4:	4b39      	ldr	r3, [pc, #228]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035d0:	4b36      	ldr	r3, [pc, #216]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a35      	ldr	r2, [pc, #212]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035d6:	f043 0308 	orr.w	r3, r3, #8
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	4b33      	ldr	r3, [pc, #204]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	4930      	ldr	r1, [pc, #192]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ee:	4b2f      	ldr	r3, [pc, #188]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	021b      	lsls	r3, r3, #8
 80035fc:	492b      	ldr	r1, [pc, #172]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
 8003602:	e01a      	b.n	800363a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003604:	4b29      	ldr	r3, [pc, #164]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a28      	ldr	r2, [pc, #160]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800360a:	f023 0301 	bic.w	r3, r3, #1
 800360e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003610:	f7fe fda4 	bl	800215c <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003618:	f7fe fda0 	bl	800215c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e31a      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800362a:	4b20      	ldr	r3, [pc, #128]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x1dc>
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003638:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d073      	beq.n	800372e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d005      	beq.n	8003658 <HAL_RCC_OscConfig+0x21c>
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b0c      	cmp	r3, #12
 8003650:	d10e      	bne.n	8003670 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d10b      	bne.n	8003670 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003658:	4b14      	ldr	r3, [pc, #80]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d063      	beq.n	800372c <HAL_RCC_OscConfig+0x2f0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d15f      	bne.n	800372c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e2f7      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003678:	d106      	bne.n	8003688 <HAL_RCC_OscConfig+0x24c>
 800367a:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a0b      	ldr	r2, [pc, #44]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	e025      	b.n	80036d4 <HAL_RCC_OscConfig+0x298>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003690:	d114      	bne.n	80036bc <HAL_RCC_OscConfig+0x280>
 8003692:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a05      	ldr	r2, [pc, #20]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4b03      	ldr	r3, [pc, #12]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a02      	ldr	r2, [pc, #8]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e013      	b.n	80036d4 <HAL_RCC_OscConfig+0x298>
 80036ac:	40021000 	.word	0x40021000
 80036b0:	08009bf0 	.word	0x08009bf0
 80036b4:	20000004 	.word	0x20000004
 80036b8:	20000008 	.word	0x20000008
 80036bc:	4ba0      	ldr	r3, [pc, #640]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a9f      	ldr	r2, [pc, #636]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b9d      	ldr	r3, [pc, #628]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a9c      	ldr	r2, [pc, #624]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80036ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d013      	beq.n	8003704 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7fe fd3e 	bl	800215c <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e4:	f7fe fd3a 	bl	800215c <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	; 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e2b4      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f6:	4b92      	ldr	r3, [pc, #584]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x2a8>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fe fd2a 	bl	800215c <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800370c:	f7fe fd26 	bl	800215c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e2a0      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800371e:	4b88      	ldr	r3, [pc, #544]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x2d0>
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d060      	beq.n	80037fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b04      	cmp	r3, #4
 800373e:	d005      	beq.n	800374c <HAL_RCC_OscConfig+0x310>
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d119      	bne.n	800377a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d116      	bne.n	800377a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800374c:	4b7c      	ldr	r3, [pc, #496]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_OscConfig+0x328>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e27d      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003764:	4b76      	ldr	r3, [pc, #472]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	4973      	ldr	r1, [pc, #460]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003778:	e040      	b.n	80037fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d023      	beq.n	80037ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003782:	4b6f      	ldr	r3, [pc, #444]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a6e      	ldr	r2, [pc, #440]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378e:	f7fe fce5 	bl	800215c <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003796:	f7fe fce1 	bl	800215c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e25b      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a8:	4b65      	ldr	r3, [pc, #404]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b4:	4b62      	ldr	r3, [pc, #392]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	061b      	lsls	r3, r3, #24
 80037c2:	495f      	ldr	r1, [pc, #380]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	604b      	str	r3, [r1, #4]
 80037c8:	e018      	b.n	80037fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ca:	4b5d      	ldr	r3, [pc, #372]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a5c      	ldr	r2, [pc, #368]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80037d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fe fcc1 	bl	800215c <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037de:	f7fe fcbd 	bl	800215c <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e237      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037f0:	4b53      	ldr	r3, [pc, #332]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d03c      	beq.n	8003882 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01c      	beq.n	800384a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003810:	4b4b      	ldr	r3, [pc, #300]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003816:	4a4a      	ldr	r2, [pc, #296]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fe fc9c 	bl	800215c <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003828:	f7fe fc98 	bl	800215c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e212      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800383a:	4b41      	ldr	r3, [pc, #260]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 800383c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ef      	beq.n	8003828 <HAL_RCC_OscConfig+0x3ec>
 8003848:	e01b      	b.n	8003882 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384a:	4b3d      	ldr	r3, [pc, #244]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 800384c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003850:	4a3b      	ldr	r2, [pc, #236]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003852:	f023 0301 	bic.w	r3, r3, #1
 8003856:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385a:	f7fe fc7f 	bl	800215c <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003862:	f7fe fc7b 	bl	800215c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e1f5      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003874:	4b32      	ldr	r3, [pc, #200]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1ef      	bne.n	8003862 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80a6 	beq.w	80039dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003890:	2300      	movs	r3, #0
 8003892:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003894:	4b2a      	ldr	r3, [pc, #168]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10d      	bne.n	80038bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a0:	4b27      	ldr	r3, [pc, #156]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	4a26      	ldr	r2, [pc, #152]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6593      	str	r3, [r2, #88]	; 0x58
 80038ac:	4b24      	ldr	r3, [pc, #144]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b8:	2301      	movs	r3, #1
 80038ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038bc:	4b21      	ldr	r3, [pc, #132]	; (8003944 <HAL_RCC_OscConfig+0x508>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d118      	bne.n	80038fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c8:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <HAL_RCC_OscConfig+0x508>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <HAL_RCC_OscConfig+0x508>)
 80038ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d4:	f7fe fc42 	bl	800215c <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038dc:	f7fe fc3e 	bl	800215c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e1b8      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ee:	4b15      	ldr	r3, [pc, #84]	; (8003944 <HAL_RCC_OscConfig+0x508>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d108      	bne.n	8003914 <HAL_RCC_OscConfig+0x4d8>
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003908:	4a0d      	ldr	r2, [pc, #52]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003912:	e029      	b.n	8003968 <HAL_RCC_OscConfig+0x52c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b05      	cmp	r3, #5
 800391a:	d115      	bne.n	8003948 <HAL_RCC_OscConfig+0x50c>
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003922:	4a07      	ldr	r2, [pc, #28]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003924:	f043 0304 	orr.w	r3, r3, #4
 8003928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800392c:	4b04      	ldr	r3, [pc, #16]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 800392e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003932:	4a03      	ldr	r2, [pc, #12]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800393c:	e014      	b.n	8003968 <HAL_RCC_OscConfig+0x52c>
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000
 8003944:	40007000 	.word	0x40007000
 8003948:	4b9d      	ldr	r3, [pc, #628]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	4a9c      	ldr	r2, [pc, #624]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003958:	4b99      	ldr	r3, [pc, #612]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	4a98      	ldr	r2, [pc, #608]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003960:	f023 0304 	bic.w	r3, r3, #4
 8003964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d016      	beq.n	800399e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003970:	f7fe fbf4 	bl	800215c <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003976:	e00a      	b.n	800398e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003978:	f7fe fbf0 	bl	800215c <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f241 3288 	movw	r2, #5000	; 0x1388
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e168      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800398e:	4b8c      	ldr	r3, [pc, #560]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ed      	beq.n	8003978 <HAL_RCC_OscConfig+0x53c>
 800399c:	e015      	b.n	80039ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399e:	f7fe fbdd 	bl	800215c <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039a4:	e00a      	b.n	80039bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a6:	f7fe fbd9 	bl	800215c <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e151      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039bc:	4b80      	ldr	r3, [pc, #512]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1ed      	bne.n	80039a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ca:	7ffb      	ldrb	r3, [r7, #31]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d0:	4b7b      	ldr	r3, [pc, #492]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 80039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d4:	4a7a      	ldr	r2, [pc, #488]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 80039d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d03c      	beq.n	8003a62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01c      	beq.n	8003a2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039f0:	4b73      	ldr	r3, [pc, #460]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 80039f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039f6:	4a72      	ldr	r2, [pc, #456]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fe fbac 	bl	800215c <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a08:	f7fe fba8 	bl	800215c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e122      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a1a:	4b69      	ldr	r3, [pc, #420]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ef      	beq.n	8003a08 <HAL_RCC_OscConfig+0x5cc>
 8003a28:	e01b      	b.n	8003a62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a2a:	4b65      	ldr	r3, [pc, #404]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a30:	4a63      	ldr	r2, [pc, #396]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3a:	f7fe fb8f 	bl	800215c <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a42:	f7fe fb8b 	bl	800215c <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e105      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a54:	4b5a      	ldr	r3, [pc, #360]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1ef      	bne.n	8003a42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 80f9 	beq.w	8003c5e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	f040 80cf 	bne.w	8003c14 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a76:	4b52      	ldr	r3, [pc, #328]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f003 0203 	and.w	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d12c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	3b01      	subs	r3, #1
 8003a96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d123      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d11b      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d113      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac6:	085b      	lsrs	r3, r3, #1
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d109      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	3b01      	subs	r3, #1
 8003ade:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d071      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b0c      	cmp	r3, #12
 8003ae8:	d068      	beq.n	8003bbc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003aea:	4b35      	ldr	r3, [pc, #212]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d105      	bne.n	8003b02 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003af6:	4b32      	ldr	r3, [pc, #200]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e0ac      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b06:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a2d      	ldr	r2, [pc, #180]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003b0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b12:	f7fe fb23 	bl	800215c <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1a:	f7fe fb1f 	bl	800215c <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e099      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b2c:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f0      	bne.n	8003b1a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b38:	4b21      	ldr	r3, [pc, #132]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	4b21      	ldr	r3, [pc, #132]	; (8003bc4 <HAL_RCC_OscConfig+0x788>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b48:	3a01      	subs	r2, #1
 8003b4a:	0112      	lsls	r2, r2, #4
 8003b4c:	4311      	orrs	r1, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b52:	0212      	lsls	r2, r2, #8
 8003b54:	4311      	orrs	r1, r2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b5a:	0852      	lsrs	r2, r2, #1
 8003b5c:	3a01      	subs	r2, #1
 8003b5e:	0552      	lsls	r2, r2, #21
 8003b60:	4311      	orrs	r1, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b66:	0852      	lsrs	r2, r2, #1
 8003b68:	3a01      	subs	r2, #1
 8003b6a:	0652      	lsls	r2, r2, #25
 8003b6c:	4311      	orrs	r1, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b72:	06d2      	lsls	r2, r2, #27
 8003b74:	430a      	orrs	r2, r1
 8003b76:	4912      	ldr	r1, [pc, #72]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b7c:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a0f      	ldr	r2, [pc, #60]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b88:	4b0d      	ldr	r3, [pc, #52]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4a0c      	ldr	r2, [pc, #48]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b94:	f7fe fae2 	bl	800215c <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fe fade 	bl	800215c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e058      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bae:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <HAL_RCC_OscConfig+0x784>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bba:	e050      	b.n	8003c5e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e04f      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc8:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <HAL_RCC_OscConfig+0x82c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d144      	bne.n	8003c5e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bd4:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <HAL_RCC_OscConfig+0x82c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a23      	ldr	r2, [pc, #140]	; (8003c68 <HAL_RCC_OscConfig+0x82c>)
 8003bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003be0:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <HAL_RCC_OscConfig+0x82c>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4a20      	ldr	r2, [pc, #128]	; (8003c68 <HAL_RCC_OscConfig+0x82c>)
 8003be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bec:	f7fe fab6 	bl	800215c <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7fe fab2 	bl	800215c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e02c      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c06:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <HAL_RCC_OscConfig+0x82c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x7b8>
 8003c12:	e024      	b.n	8003c5e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d01f      	beq.n	8003c5a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <HAL_RCC_OscConfig+0x82c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <HAL_RCC_OscConfig+0x82c>)
 8003c20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c26:	f7fe fa99 	bl	800215c <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2e:	f7fe fa95 	bl	800215c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e00f      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c40:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <HAL_RCC_OscConfig+0x82c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f0      	bne.n	8003c2e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_RCC_OscConfig+0x82c>)
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	4905      	ldr	r1, [pc, #20]	; (8003c68 <HAL_RCC_OscConfig+0x82c>)
 8003c52:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_RCC_OscConfig+0x830>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	60cb      	str	r3, [r1, #12]
 8003c58:	e001      	b.n	8003c5e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	feeefffc 	.word	0xfeeefffc

08003c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e11d      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c88:	4b90      	ldr	r3, [pc, #576]	; (8003ecc <HAL_RCC_ClockConfig+0x25c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d910      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b8d      	ldr	r3, [pc, #564]	; (8003ecc <HAL_RCC_ClockConfig+0x25c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 020f 	bic.w	r2, r3, #15
 8003c9e:	498b      	ldr	r1, [pc, #556]	; (8003ecc <HAL_RCC_ClockConfig+0x25c>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b89      	ldr	r3, [pc, #548]	; (8003ecc <HAL_RCC_ClockConfig+0x25c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e105      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d010      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	4b81      	ldr	r3, [pc, #516]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d908      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd4:	4b7e      	ldr	r3, [pc, #504]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	497b      	ldr	r1, [pc, #492]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d079      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d11e      	bne.n	8003d38 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfa:	4b75      	ldr	r3, [pc, #468]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e0dc      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003d0a:	f000 fa09 	bl	8004120 <RCC_GetSysClockFreqFromPLLSource>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4a70      	ldr	r2, [pc, #448]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d946      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d16:	4b6e      	ldr	r3, [pc, #440]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d140      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d22:	4b6b      	ldr	r3, [pc, #428]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2a:	4a69      	ldr	r2, [pc, #420]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d32:	2380      	movs	r3, #128	; 0x80
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e035      	b.n	8003da4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d107      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d40:	4b63      	ldr	r3, [pc, #396]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d115      	bne.n	8003d78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0b9      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d107      	bne.n	8003d68 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d58:	4b5d      	ldr	r3, [pc, #372]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d109      	bne.n	8003d78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0ad      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d68:	4b59      	ldr	r3, [pc, #356]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0a5      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003d78:	f000 f8b4 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	4a55      	ldr	r2, [pc, #340]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d90f      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d84:	4b52      	ldr	r3, [pc, #328]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d109      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d90:	4b4f      	ldr	r3, [pc, #316]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d98:	4a4d      	ldr	r2, [pc, #308]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003da4:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f023 0203 	bic.w	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4947      	ldr	r1, [pc, #284]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db6:	f7fe f9d1 	bl	800215c <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbc:	e00a      	b.n	8003dd4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dbe:	f7fe f9cd 	bl	800215c <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e077      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd4:	4b3e      	ldr	r3, [pc, #248]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 020c 	and.w	r2, r3, #12
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d1eb      	bne.n	8003dbe <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b80      	cmp	r3, #128	; 0x80
 8003dea:	d105      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003dec:	4b38      	ldr	r3, [pc, #224]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4a37      	ldr	r2, [pc, #220]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d010      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	4b31      	ldr	r3, [pc, #196]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d208      	bcs.n	8003e26 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e14:	4b2e      	ldr	r3, [pc, #184]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	492b      	ldr	r1, [pc, #172]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e26:	4b29      	ldr	r3, [pc, #164]	; (8003ecc <HAL_RCC_ClockConfig+0x25c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d210      	bcs.n	8003e56 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e34:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <HAL_RCC_ClockConfig+0x25c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 020f 	bic.w	r2, r3, #15
 8003e3c:	4923      	ldr	r1, [pc, #140]	; (8003ecc <HAL_RCC_ClockConfig+0x25c>)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e44:	4b21      	ldr	r3, [pc, #132]	; (8003ecc <HAL_RCC_ClockConfig+0x25c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d001      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e036      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e62:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	4918      	ldr	r1, [pc, #96]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e80:	4b13      	ldr	r3, [pc, #76]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4910      	ldr	r1, [pc, #64]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e94:	f000 f826 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	490c      	ldr	r1, [pc, #48]	; (8003ed8 <HAL_RCC_ClockConfig+0x268>)
 8003ea6:	5ccb      	ldrb	r3, [r1, r3]
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb0:	4a0a      	ldr	r2, [pc, #40]	; (8003edc <HAL_RCC_ClockConfig+0x26c>)
 8003eb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <HAL_RCC_ClockConfig+0x270>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fe f8ff 	bl	80020bc <HAL_InitTick>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	73fb      	strb	r3, [r7, #15]

  return status;
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40022000 	.word	0x40022000
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	04c4b400 	.word	0x04c4b400
 8003ed8:	08009bf0 	.word	0x08009bf0
 8003edc:	20000004 	.word	0x20000004
 8003ee0:	20000008 	.word	0x20000008

08003ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b089      	sub	sp, #36	; 0x24
 8003ee8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ef2:	4b3e      	ldr	r3, [pc, #248]	; (8003fec <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003efc:	4b3b      	ldr	r3, [pc, #236]	; (8003fec <HAL_RCC_GetSysClockFreq+0x108>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0303 	and.w	r3, r3, #3
 8003f04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x34>
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b0c      	cmp	r3, #12
 8003f10:	d121      	bne.n	8003f56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d11e      	bne.n	8003f56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f18:	4b34      	ldr	r3, [pc, #208]	; (8003fec <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d107      	bne.n	8003f34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f24:	4b31      	ldr	r3, [pc, #196]	; (8003fec <HAL_RCC_GetSysClockFreq+0x108>)
 8003f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	e005      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f34:	4b2d      	ldr	r3, [pc, #180]	; (8003fec <HAL_RCC_GetSysClockFreq+0x108>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f40:	4a2b      	ldr	r2, [pc, #172]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10d      	bne.n	8003f6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f54:	e00a      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d102      	bne.n	8003f62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f5c:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f5e:	61bb      	str	r3, [r7, #24]
 8003f60:	e004      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f68:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	2b0c      	cmp	r3, #12
 8003f70:	d134      	bne.n	8003fdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f72:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <HAL_RCC_GetSysClockFreq+0x108>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d003      	beq.n	8003f8a <HAL_RCC_GetSysClockFreq+0xa6>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d003      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0xac>
 8003f88:	e005      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f8c:	617b      	str	r3, [r7, #20]
      break;
 8003f8e:	e005      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f90:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f92:	617b      	str	r3, [r7, #20]
      break;
 8003f94:	e002      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	617b      	str	r3, [r7, #20]
      break;
 8003f9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f9c:	4b13      	ldr	r3, [pc, #76]	; (8003fec <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <HAL_RCC_GetSysClockFreq+0x108>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	fb03 f202 	mul.w	r2, r3, r2
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	0e5b      	lsrs	r3, r3, #25
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	3301      	adds	r3, #1
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fdc:	69bb      	ldr	r3, [r7, #24]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3724      	adds	r7, #36	; 0x24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	08009c08 	.word	0x08009c08
 8003ff4:	00f42400 	.word	0x00f42400
 8003ff8:	007a1200 	.word	0x007a1200

08003ffc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004000:	4b03      	ldr	r3, [pc, #12]	; (8004010 <HAL_RCC_GetHCLKFreq+0x14>)
 8004002:	681b      	ldr	r3, [r3, #0]
}
 8004004:	4618      	mov	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000004 	.word	0x20000004

08004014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004018:	f7ff fff0 	bl	8003ffc <HAL_RCC_GetHCLKFreq>
 800401c:	4602      	mov	r2, r0
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	4904      	ldr	r1, [pc, #16]	; (800403c <HAL_RCC_GetPCLK1Freq+0x28>)
 800402a:	5ccb      	ldrb	r3, [r1, r3]
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004034:	4618      	mov	r0, r3
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000
 800403c:	08009c00 	.word	0x08009c00

08004040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004044:	f7ff ffda 	bl	8003ffc <HAL_RCC_GetHCLKFreq>
 8004048:	4602      	mov	r2, r0
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	0adb      	lsrs	r3, r3, #11
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	4904      	ldr	r1, [pc, #16]	; (8004068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004056:	5ccb      	ldrb	r3, [r1, r3]
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004060:	4618      	mov	r0, r3
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40021000 	.word	0x40021000
 8004068:	08009c00 	.word	0x08009c00

0800406c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004078:	4b27      	ldr	r3, [pc, #156]	; (8004118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004084:	f7ff f906 	bl	8003294 <HAL_PWREx_GetVoltageRange>
 8004088:	6178      	str	r0, [r7, #20]
 800408a:	e014      	b.n	80040b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800408c:	4b22      	ldr	r3, [pc, #136]	; (8004118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	4a21      	ldr	r2, [pc, #132]	; (8004118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004096:	6593      	str	r3, [r2, #88]	; 0x58
 8004098:	4b1f      	ldr	r3, [pc, #124]	; (8004118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040a4:	f7ff f8f6 	bl	8003294 <HAL_PWREx_GetVoltageRange>
 80040a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040aa:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	4a1a      	ldr	r2, [pc, #104]	; (8004118 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040bc:	d10b      	bne.n	80040d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b80      	cmp	r3, #128	; 0x80
 80040c2:	d913      	bls.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2ba0      	cmp	r3, #160	; 0xa0
 80040c8:	d902      	bls.n	80040d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040ca:	2302      	movs	r3, #2
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	e00d      	b.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040d0:	2301      	movs	r3, #1
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	e00a      	b.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b7f      	cmp	r3, #127	; 0x7f
 80040da:	d902      	bls.n	80040e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80040dc:	2302      	movs	r3, #2
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	e004      	b.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b70      	cmp	r3, #112	; 0x70
 80040e6:	d101      	bne.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040e8:	2301      	movs	r3, #1
 80040ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f023 020f 	bic.w	r2, r3, #15
 80040f4:	4909      	ldr	r1, [pc, #36]	; (800411c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040fc:	4b07      	ldr	r3, [pc, #28]	; (800411c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	429a      	cmp	r2, r3
 8004108:	d001      	beq.n	800410e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	40022000 	.word	0x40022000

08004120 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004126:	4b2d      	ldr	r3, [pc, #180]	; (80041dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b03      	cmp	r3, #3
 8004134:	d00b      	beq.n	800414e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d825      	bhi.n	8004188 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d008      	beq.n	8004154 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d11f      	bne.n	8004188 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004148:	4b25      	ldr	r3, [pc, #148]	; (80041e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800414a:	613b      	str	r3, [r7, #16]
    break;
 800414c:	e01f      	b.n	800418e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800414e:	4b25      	ldr	r3, [pc, #148]	; (80041e4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004150:	613b      	str	r3, [r7, #16]
    break;
 8004152:	e01c      	b.n	800418e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004154:	4b21      	ldr	r3, [pc, #132]	; (80041dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d107      	bne.n	8004170 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004160:	4b1e      	ldr	r3, [pc, #120]	; (80041dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	e005      	b.n	800417c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004170:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800417c:	4a1a      	ldr	r2, [pc, #104]	; (80041e8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004184:	613b      	str	r3, [r7, #16]
    break;
 8004186:	e002      	b.n	800418e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	613b      	str	r3, [r7, #16]
    break;
 800418c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800418e:	4b13      	ldr	r3, [pc, #76]	; (80041dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	3301      	adds	r3, #1
 800419a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	0a1b      	lsrs	r3, r3, #8
 80041a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	fb03 f202 	mul.w	r2, r3, r2
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041b4:	4b09      	ldr	r3, [pc, #36]	; (80041dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	0e5b      	lsrs	r3, r3, #25
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	3301      	adds	r3, #1
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041cc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80041ce:	683b      	ldr	r3, [r7, #0]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	40021000 	.word	0x40021000
 80041e0:	00f42400 	.word	0x00f42400
 80041e4:	007a1200 	.word	0x007a1200
 80041e8:	08009c08 	.word	0x08009c08

080041ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041f4:	2300      	movs	r3, #0
 80041f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041f8:	2300      	movs	r3, #0
 80041fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004204:	2b00      	cmp	r3, #0
 8004206:	d040      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800420c:	2b80      	cmp	r3, #128	; 0x80
 800420e:	d02a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004210:	2b80      	cmp	r3, #128	; 0x80
 8004212:	d825      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004214:	2b60      	cmp	r3, #96	; 0x60
 8004216:	d026      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004218:	2b60      	cmp	r3, #96	; 0x60
 800421a:	d821      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d006      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004220:	2b40      	cmp	r3, #64	; 0x40
 8004222:	d81d      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d009      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004228:	2b20      	cmp	r3, #32
 800422a:	d010      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800422c:	e018      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800422e:	4b89      	ldr	r3, [pc, #548]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	4a88      	ldr	r2, [pc, #544]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004238:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800423a:	e015      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3304      	adds	r3, #4
 8004240:	2100      	movs	r1, #0
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fb02 	bl	800484c <RCCEx_PLLSAI1_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800424c:	e00c      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3320      	adds	r3, #32
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fbed 	bl	8004a34 <RCCEx_PLLSAI2_Config>
 800425a:	4603      	mov	r3, r0
 800425c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800425e:	e003      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	74fb      	strb	r3, [r7, #19]
      break;
 8004264:	e000      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004268:	7cfb      	ldrb	r3, [r7, #19]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800426e:	4b79      	ldr	r3, [pc, #484]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004270:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004274:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800427c:	4975      	ldr	r1, [pc, #468]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004284:	e001      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d047      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429e:	d030      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80042a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a4:	d82a      	bhi.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80042a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042aa:	d02a      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80042ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042b0:	d824      	bhi.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80042b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b6:	d008      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 80042b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042bc:	d81e      	bhi.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c6:	d010      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80042c8:	e018      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042ca:	4b62      	ldr	r3, [pc, #392]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	4a61      	ldr	r2, [pc, #388]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042d6:	e015      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fab4 	bl	800484c <RCCEx_PLLSAI1_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042e8:	e00c      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3320      	adds	r3, #32
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fb9f 	bl	8004a34 <RCCEx_PLLSAI2_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042fa:	e003      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	74fb      	strb	r3, [r7, #19]
      break;
 8004300:	e000      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10b      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800430a:	4b52      	ldr	r3, [pc, #328]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800430c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	494e      	ldr	r1, [pc, #312]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004320:	e001      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004322:	7cfb      	ldrb	r3, [r7, #19]
 8004324:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 809f 	beq.w	8004472 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004334:	2300      	movs	r3, #0
 8004336:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004338:	4b46      	ldr	r3, [pc, #280]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800433a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004348:	2300      	movs	r3, #0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00d      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	4a40      	ldr	r2, [pc, #256]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004358:	6593      	str	r3, [r2, #88]	; 0x58
 800435a:	4b3e      	ldr	r3, [pc, #248]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004366:	2301      	movs	r3, #1
 8004368:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800436a:	4b3b      	ldr	r3, [pc, #236]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a3a      	ldr	r2, [pc, #232]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004374:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004376:	f7fd fef1 	bl	800215c <HAL_GetTick>
 800437a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800437c:	e009      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437e:	f7fd feed 	bl	800215c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d902      	bls.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	74fb      	strb	r3, [r7, #19]
        break;
 8004390:	e005      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004392:	4b31      	ldr	r3, [pc, #196]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0ef      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800439e:	7cfb      	ldrb	r3, [r7, #19]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d15b      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043a4:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01f      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d019      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043c2:	4b24      	ldr	r3, [pc, #144]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043ce:	4b21      	ldr	r3, [pc, #132]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d4:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	4a1b      	ldr	r2, [pc, #108]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043ee:	4a19      	ldr	r2, [pc, #100]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d016      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fd feac 	bl	800215c <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004406:	e00b      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004408:	f7fd fea8 	bl	800215c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f241 3288 	movw	r2, #5000	; 0x1388
 8004416:	4293      	cmp	r3, r2
 8004418:	d902      	bls.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	74fb      	strb	r3, [r7, #19]
            break;
 800441e:	e006      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0ec      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800442e:	7cfb      	ldrb	r3, [r7, #19]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10c      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004434:	4b07      	ldr	r3, [pc, #28]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	4903      	ldr	r1, [pc, #12]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800444c:	e008      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800444e:	7cfb      	ldrb	r3, [r7, #19]
 8004450:	74bb      	strb	r3, [r7, #18]
 8004452:	e005      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004454:	40021000 	.word	0x40021000
 8004458:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004460:	7c7b      	ldrb	r3, [r7, #17]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d105      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004466:	4ba0      	ldr	r3, [pc, #640]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446a:	4a9f      	ldr	r2, [pc, #636]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800446c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004470:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800447e:	4b9a      	ldr	r3, [pc, #616]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004484:	f023 0203 	bic.w	r2, r3, #3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448c:	4996      	ldr	r1, [pc, #600]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044a0:	4b91      	ldr	r3, [pc, #580]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f023 020c 	bic.w	r2, r3, #12
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	498e      	ldr	r1, [pc, #568]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044c2:	4b89      	ldr	r3, [pc, #548]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d0:	4985      	ldr	r1, [pc, #532]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044e4:	4b80      	ldr	r3, [pc, #512]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f2:	497d      	ldr	r1, [pc, #500]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004506:	4b78      	ldr	r3, [pc, #480]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004514:	4974      	ldr	r1, [pc, #464]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004528:	4b6f      	ldr	r3, [pc, #444]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004536:	496c      	ldr	r1, [pc, #432]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800454a:	4b67      	ldr	r3, [pc, #412]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004558:	4963      	ldr	r1, [pc, #396]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800456c:	4b5e      	ldr	r3, [pc, #376]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800457a:	495b      	ldr	r1, [pc, #364]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800458e:	4b56      	ldr	r3, [pc, #344]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	4952      	ldr	r1, [pc, #328]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045b0:	4b4d      	ldr	r3, [pc, #308]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045be:	494a      	ldr	r1, [pc, #296]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045d2:	4b45      	ldr	r3, [pc, #276]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e0:	4941      	ldr	r1, [pc, #260]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045f4:	4b3c      	ldr	r3, [pc, #240]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045fa:	f023 0203 	bic.w	r2, r3, #3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004602:	4939      	ldr	r1, [pc, #228]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d028      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004616:	4b34      	ldr	r3, [pc, #208]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004624:	4930      	ldr	r1, [pc, #192]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004634:	d106      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004636:	4b2c      	ldr	r3, [pc, #176]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	4a2b      	ldr	r2, [pc, #172]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800463c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004640:	60d3      	str	r3, [r2, #12]
 8004642:	e011      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800464c:	d10c      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3304      	adds	r3, #4
 8004652:	2101      	movs	r1, #1
 8004654:	4618      	mov	r0, r3
 8004656:	f000 f8f9 	bl	800484c <RCCEx_PLLSAI1_Config>
 800465a:	4603      	mov	r3, r0
 800465c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800465e:	7cfb      	ldrb	r3, [r7, #19]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d04d      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800467c:	d108      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800467e:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004680:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004684:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800468a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800468e:	e012      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004690:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004692:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004696:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800469c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80046a0:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ae:	490e      	ldr	r1, [pc, #56]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046be:	d106      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4a08      	ldr	r2, [pc, #32]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ca:	60d3      	str	r3, [r2, #12]
 80046cc:	e020      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046d6:	d109      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046d8:	4b03      	ldr	r3, [pc, #12]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4a02      	ldr	r2, [pc, #8]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e2:	60d3      	str	r3, [r2, #12]
 80046e4:	e014      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046f4:	d10c      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3304      	adds	r3, #4
 80046fa:	2101      	movs	r1, #1
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 f8a5 	bl	800484c <RCCEx_PLLSAI1_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004706:	7cfb      	ldrb	r3, [r7, #19]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d028      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800471c:	4b4a      	ldr	r3, [pc, #296]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800472a:	4947      	ldr	r1, [pc, #284]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800473a:	d106      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800473c:	4b42      	ldr	r3, [pc, #264]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4a41      	ldr	r2, [pc, #260]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004746:	60d3      	str	r3, [r2, #12]
 8004748:	e011      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800474e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004752:	d10c      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3304      	adds	r3, #4
 8004758:	2101      	movs	r1, #1
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f876 	bl	800484c <RCCEx_PLLSAI1_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004764:	7cfb      	ldrb	r3, [r7, #19]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800476a:	7cfb      	ldrb	r3, [r7, #19]
 800476c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01e      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800477a:	4b33      	ldr	r3, [pc, #204]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800478a:	492f      	ldr	r1, [pc, #188]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004798:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800479c:	d10c      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3304      	adds	r3, #4
 80047a2:	2102      	movs	r1, #2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f851 	bl	800484c <RCCEx_PLLSAI1_Config>
 80047aa:	4603      	mov	r3, r0
 80047ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ae:	7cfb      	ldrb	r3, [r7, #19]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80047b4:	7cfb      	ldrb	r3, [r7, #19]
 80047b6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00b      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047c4:	4b20      	ldr	r3, [pc, #128]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047ca:	f023 0204 	bic.w	r2, r3, #4
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d4:	491c      	ldr	r1, [pc, #112]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00b      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80047e8:	4b17      	ldr	r3, [pc, #92]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047ee:	f023 0218 	bic.w	r2, r3, #24
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f8:	4913      	ldr	r1, [pc, #76]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d017      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800480c:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800480e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004812:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800481c:	490a      	ldr	r1, [pc, #40]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800482a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800482e:	d105      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	4a04      	ldr	r2, [pc, #16]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800483a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800483c:	7cbb      	ldrb	r3, [r7, #18]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40021000 	.word	0x40021000

0800484c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800485a:	4b72      	ldr	r3, [pc, #456]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00e      	beq.n	8004884 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004866:	4b6f      	ldr	r3, [pc, #444]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0203 	and.w	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d103      	bne.n	800487e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
       ||
 800487a:	2b00      	cmp	r3, #0
 800487c:	d142      	bne.n	8004904 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
 8004882:	e03f      	b.n	8004904 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d018      	beq.n	80048be <RCCEx_PLLSAI1_Config+0x72>
 800488c:	2b03      	cmp	r3, #3
 800488e:	d825      	bhi.n	80048dc <RCCEx_PLLSAI1_Config+0x90>
 8004890:	2b01      	cmp	r3, #1
 8004892:	d002      	beq.n	800489a <RCCEx_PLLSAI1_Config+0x4e>
 8004894:	2b02      	cmp	r3, #2
 8004896:	d009      	beq.n	80048ac <RCCEx_PLLSAI1_Config+0x60>
 8004898:	e020      	b.n	80048dc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800489a:	4b62      	ldr	r3, [pc, #392]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d11d      	bne.n	80048e2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048aa:	e01a      	b.n	80048e2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048ac:	4b5d      	ldr	r3, [pc, #372]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d116      	bne.n	80048e6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048bc:	e013      	b.n	80048e6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048be:	4b59      	ldr	r3, [pc, #356]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10f      	bne.n	80048ea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048ca:	4b56      	ldr	r3, [pc, #344]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048da:	e006      	b.n	80048ea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
      break;
 80048e0:	e004      	b.n	80048ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80048e2:	bf00      	nop
 80048e4:	e002      	b.n	80048ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80048e6:	bf00      	nop
 80048e8:	e000      	b.n	80048ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80048ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d108      	bne.n	8004904 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80048f2:	4b4c      	ldr	r3, [pc, #304]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f023 0203 	bic.w	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4949      	ldr	r1, [pc, #292]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004900:	4313      	orrs	r3, r2
 8004902:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f040 8086 	bne.w	8004a18 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800490c:	4b45      	ldr	r3, [pc, #276]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a44      	ldr	r2, [pc, #272]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004912:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004918:	f7fd fc20 	bl	800215c <HAL_GetTick>
 800491c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800491e:	e009      	b.n	8004934 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004920:	f7fd fc1c 	bl	800215c <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d902      	bls.n	8004934 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	73fb      	strb	r3, [r7, #15]
        break;
 8004932:	e005      	b.n	8004940 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004934:	4b3b      	ldr	r3, [pc, #236]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ef      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d168      	bne.n	8004a18 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d113      	bne.n	8004974 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800494c:	4b35      	ldr	r3, [pc, #212]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	4b35      	ldr	r3, [pc, #212]	; (8004a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004952:	4013      	ands	r3, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6892      	ldr	r2, [r2, #8]
 8004958:	0211      	lsls	r1, r2, #8
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68d2      	ldr	r2, [r2, #12]
 800495e:	06d2      	lsls	r2, r2, #27
 8004960:	4311      	orrs	r1, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6852      	ldr	r2, [r2, #4]
 8004966:	3a01      	subs	r2, #1
 8004968:	0112      	lsls	r2, r2, #4
 800496a:	430a      	orrs	r2, r1
 800496c:	492d      	ldr	r1, [pc, #180]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800496e:	4313      	orrs	r3, r2
 8004970:	610b      	str	r3, [r1, #16]
 8004972:	e02d      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d115      	bne.n	80049a6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800497a:	4b2a      	ldr	r3, [pc, #168]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	4b2b      	ldr	r3, [pc, #172]	; (8004a2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004980:	4013      	ands	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6892      	ldr	r2, [r2, #8]
 8004986:	0211      	lsls	r1, r2, #8
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6912      	ldr	r2, [r2, #16]
 800498c:	0852      	lsrs	r2, r2, #1
 800498e:	3a01      	subs	r2, #1
 8004990:	0552      	lsls	r2, r2, #21
 8004992:	4311      	orrs	r1, r2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6852      	ldr	r2, [r2, #4]
 8004998:	3a01      	subs	r2, #1
 800499a:	0112      	lsls	r2, r2, #4
 800499c:	430a      	orrs	r2, r1
 800499e:	4921      	ldr	r1, [pc, #132]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	610b      	str	r3, [r1, #16]
 80049a4:	e014      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049a6:	4b1f      	ldr	r3, [pc, #124]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049a8:	691a      	ldr	r2, [r3, #16]
 80049aa:	4b21      	ldr	r3, [pc, #132]	; (8004a30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6892      	ldr	r2, [r2, #8]
 80049b2:	0211      	lsls	r1, r2, #8
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6952      	ldr	r2, [r2, #20]
 80049b8:	0852      	lsrs	r2, r2, #1
 80049ba:	3a01      	subs	r2, #1
 80049bc:	0652      	lsls	r2, r2, #25
 80049be:	4311      	orrs	r1, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6852      	ldr	r2, [r2, #4]
 80049c4:	3a01      	subs	r2, #1
 80049c6:	0112      	lsls	r2, r2, #4
 80049c8:	430a      	orrs	r2, r1
 80049ca:	4916      	ldr	r1, [pc, #88]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049d0:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a13      	ldr	r2, [pc, #76]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049dc:	f7fd fbbe 	bl	800215c <HAL_GetTick>
 80049e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049e2:	e009      	b.n	80049f8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049e4:	f7fd fbba 	bl	800215c <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d902      	bls.n	80049f8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	73fb      	strb	r3, [r7, #15]
          break;
 80049f6:	e005      	b.n	8004a04 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049f8:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0ef      	beq.n	80049e4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	4904      	ldr	r1, [pc, #16]	; (8004a24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000
 8004a28:	07ff800f 	.word	0x07ff800f
 8004a2c:	ff9f800f 	.word	0xff9f800f
 8004a30:	f9ff800f 	.word	0xf9ff800f

08004a34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a42:	4b72      	ldr	r3, [pc, #456]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00e      	beq.n	8004a6c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a4e:	4b6f      	ldr	r3, [pc, #444]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0203 	and.w	r2, r3, #3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d103      	bne.n	8004a66 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
       ||
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d142      	bne.n	8004aec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
 8004a6a:	e03f      	b.n	8004aec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d018      	beq.n	8004aa6 <RCCEx_PLLSAI2_Config+0x72>
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d825      	bhi.n	8004ac4 <RCCEx_PLLSAI2_Config+0x90>
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d002      	beq.n	8004a82 <RCCEx_PLLSAI2_Config+0x4e>
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d009      	beq.n	8004a94 <RCCEx_PLLSAI2_Config+0x60>
 8004a80:	e020      	b.n	8004ac4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a82:	4b62      	ldr	r3, [pc, #392]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d11d      	bne.n	8004aca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a92:	e01a      	b.n	8004aca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a94:	4b5d      	ldr	r3, [pc, #372]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d116      	bne.n	8004ace <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa4:	e013      	b.n	8004ace <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004aa6:	4b59      	ldr	r3, [pc, #356]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10f      	bne.n	8004ad2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ab2:	4b56      	ldr	r3, [pc, #344]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ac2:	e006      	b.n	8004ad2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac8:	e004      	b.n	8004ad4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004aca:	bf00      	nop
 8004acc:	e002      	b.n	8004ad4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004ace:	bf00      	nop
 8004ad0:	e000      	b.n	8004ad4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004ad2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d108      	bne.n	8004aec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004ada:	4b4c      	ldr	r3, [pc, #304]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f023 0203 	bic.w	r2, r3, #3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4949      	ldr	r1, [pc, #292]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f040 8086 	bne.w	8004c00 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004af4:	4b45      	ldr	r3, [pc, #276]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a44      	ldr	r2, [pc, #272]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b00:	f7fd fb2c 	bl	800215c <HAL_GetTick>
 8004b04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b06:	e009      	b.n	8004b1c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b08:	f7fd fb28 	bl	800215c <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d902      	bls.n	8004b1c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	73fb      	strb	r3, [r7, #15]
        break;
 8004b1a:	e005      	b.n	8004b28 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b1c:	4b3b      	ldr	r3, [pc, #236]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ef      	bne.n	8004b08 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d168      	bne.n	8004c00 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d113      	bne.n	8004b5c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b34:	4b35      	ldr	r3, [pc, #212]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	4b35      	ldr	r3, [pc, #212]	; (8004c10 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6892      	ldr	r2, [r2, #8]
 8004b40:	0211      	lsls	r1, r2, #8
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	68d2      	ldr	r2, [r2, #12]
 8004b46:	06d2      	lsls	r2, r2, #27
 8004b48:	4311      	orrs	r1, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6852      	ldr	r2, [r2, #4]
 8004b4e:	3a01      	subs	r2, #1
 8004b50:	0112      	lsls	r2, r2, #4
 8004b52:	430a      	orrs	r2, r1
 8004b54:	492d      	ldr	r1, [pc, #180]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	614b      	str	r3, [r1, #20]
 8004b5a:	e02d      	b.n	8004bb8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d115      	bne.n	8004b8e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b62:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	4b2b      	ldr	r3, [pc, #172]	; (8004c14 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6892      	ldr	r2, [r2, #8]
 8004b6e:	0211      	lsls	r1, r2, #8
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6912      	ldr	r2, [r2, #16]
 8004b74:	0852      	lsrs	r2, r2, #1
 8004b76:	3a01      	subs	r2, #1
 8004b78:	0552      	lsls	r2, r2, #21
 8004b7a:	4311      	orrs	r1, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6852      	ldr	r2, [r2, #4]
 8004b80:	3a01      	subs	r2, #1
 8004b82:	0112      	lsls	r2, r2, #4
 8004b84:	430a      	orrs	r2, r1
 8004b86:	4921      	ldr	r1, [pc, #132]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	614b      	str	r3, [r1, #20]
 8004b8c:	e014      	b.n	8004bb8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b8e:	4b1f      	ldr	r3, [pc, #124]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b90:	695a      	ldr	r2, [r3, #20]
 8004b92:	4b21      	ldr	r3, [pc, #132]	; (8004c18 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6892      	ldr	r2, [r2, #8]
 8004b9a:	0211      	lsls	r1, r2, #8
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6952      	ldr	r2, [r2, #20]
 8004ba0:	0852      	lsrs	r2, r2, #1
 8004ba2:	3a01      	subs	r2, #1
 8004ba4:	0652      	lsls	r2, r2, #25
 8004ba6:	4311      	orrs	r1, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6852      	ldr	r2, [r2, #4]
 8004bac:	3a01      	subs	r2, #1
 8004bae:	0112      	lsls	r2, r2, #4
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	4916      	ldr	r1, [pc, #88]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004bb8:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc4:	f7fd faca 	bl	800215c <HAL_GetTick>
 8004bc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bca:	e009      	b.n	8004be0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bcc:	f7fd fac6 	bl	800215c <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d902      	bls.n	8004be0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	73fb      	strb	r3, [r7, #15]
          break;
 8004bde:	e005      	b.n	8004bec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004be0:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ef      	beq.n	8004bcc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	4904      	ldr	r1, [pc, #16]	; (8004c0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	07ff800f 	.word	0x07ff800f
 8004c14:	ff9f800f 	.word	0xff9f800f
 8004c18:	f9ff800f 	.word	0xf9ff800f

08004c1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e095      	b.n	8004d5a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d108      	bne.n	8004c48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c3e:	d009      	beq.n	8004c54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	61da      	str	r2, [r3, #28]
 8004c46:	e005      	b.n	8004c54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fc ffe8 	bl	8001c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c94:	d902      	bls.n	8004c9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	e002      	b.n	8004ca2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ca0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004caa:	d007      	beq.n	8004cbc <HAL_SPI_Init+0xa0>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cb4:	d002      	beq.n	8004cbc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfe:	ea42 0103 	orr.w	r1, r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	0c1b      	lsrs	r3, r3, #16
 8004d18:	f003 0204 	and.w	r2, r3, #4
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d38:	ea42 0103 	orr.w	r1, r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b088      	sub	sp, #32
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	603b      	str	r3, [r7, #0]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_SPI_Transmit+0x22>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e15f      	b.n	8005044 <HAL_SPI_Transmit+0x2e2>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d8c:	f7fd f9e6 	bl	800215c <HAL_GetTick>
 8004d90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d002      	beq.n	8004da8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004da2:	2302      	movs	r3, #2
 8004da4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004da6:	e148      	b.n	800503a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_SPI_Transmit+0x52>
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004db8:	e13f      	b.n	800503a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	88fa      	ldrh	r2, [r7, #6]
 8004dd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	88fa      	ldrh	r2, [r7, #6]
 8004dd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e04:	d10f      	bne.n	8004e26 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d007      	beq.n	8004e44 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e4c:	d94f      	bls.n	8004eee <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <HAL_SPI_Transmit+0xfa>
 8004e56:	8afb      	ldrh	r3, [r7, #22]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d142      	bne.n	8004ee2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	881a      	ldrh	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	1c9a      	adds	r2, r3, #2
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e80:	e02f      	b.n	8004ee2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d112      	bne.n	8004eb6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	881a      	ldrh	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	1c9a      	adds	r2, r3, #2
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eb4:	e015      	b.n	8004ee2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eb6:	f7fd f951 	bl	800215c <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d803      	bhi.n	8004ece <HAL_SPI_Transmit+0x16c>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ecc:	d102      	bne.n	8004ed4 <HAL_SPI_Transmit+0x172>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d106      	bne.n	8004ee2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004ee0:	e0ab      	b.n	800503a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1ca      	bne.n	8004e82 <HAL_SPI_Transmit+0x120>
 8004eec:	e080      	b.n	8004ff0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <HAL_SPI_Transmit+0x19a>
 8004ef6:	8afb      	ldrh	r3, [r7, #22]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d174      	bne.n	8004fe6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d912      	bls.n	8004f2c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	881a      	ldrh	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	1c9a      	adds	r2, r3, #2
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b02      	subs	r3, #2
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f2a:	e05c      	b.n	8004fe6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	330c      	adds	r3, #12
 8004f36:	7812      	ldrb	r2, [r2, #0]
 8004f38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f52:	e048      	b.n	8004fe6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d12b      	bne.n	8004fba <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d912      	bls.n	8004f92 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	881a      	ldrh	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	1c9a      	adds	r2, r3, #2
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b02      	subs	r3, #2
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f90:	e029      	b.n	8004fe6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	330c      	adds	r3, #12
 8004f9c:	7812      	ldrb	r2, [r2, #0]
 8004f9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fb8:	e015      	b.n	8004fe6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fba:	f7fd f8cf 	bl	800215c <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d803      	bhi.n	8004fd2 <HAL_SPI_Transmit+0x270>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fd0:	d102      	bne.n	8004fd8 <HAL_SPI_Transmit+0x276>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d106      	bne.n	8004fe6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004fe4:	e029      	b.n	800503a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1b1      	bne.n	8004f54 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	6839      	ldr	r1, [r7, #0]
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f947 	bl	8005288 <SPI_EndRxTxTransaction>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10a      	bne.n	8005024 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800500e:	2300      	movs	r3, #0
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e003      	b.n	800503a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005042:	7ffb      	ldrb	r3, [r7, #31]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3720      	adds	r7, #32
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800505c:	f7fd f87e 	bl	800215c <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	4413      	add	r3, r2
 800506a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800506c:	f7fd f876 	bl	800215c <HAL_GetTick>
 8005070:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005072:	4b39      	ldr	r3, [pc, #228]	; (8005158 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	015b      	lsls	r3, r3, #5
 8005078:	0d1b      	lsrs	r3, r3, #20
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	fb02 f303 	mul.w	r3, r2, r3
 8005080:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005082:	e054      	b.n	800512e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800508a:	d050      	beq.n	800512e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800508c:	f7fd f866 	bl	800215c <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	429a      	cmp	r2, r3
 800509a:	d902      	bls.n	80050a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d13d      	bne.n	800511e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ba:	d111      	bne.n	80050e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c4:	d004      	beq.n	80050d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ce:	d107      	bne.n	80050e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e8:	d10f      	bne.n	800510a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005108:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e017      	b.n	800514e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	3b01      	subs	r3, #1
 800512c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	bf0c      	ite	eq
 800513e:	2301      	moveq	r3, #1
 8005140:	2300      	movne	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	429a      	cmp	r2, r3
 800514a:	d19b      	bne.n	8005084 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3720      	adds	r7, #32
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20000004 	.word	0x20000004

0800515c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	; 0x28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800516e:	f7fc fff5 	bl	800215c <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	4413      	add	r3, r2
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800517e:	f7fc ffed 	bl	800215c <HAL_GetTick>
 8005182:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800518c:	4b3d      	ldr	r3, [pc, #244]	; (8005284 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	00da      	lsls	r2, r3, #3
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	0d1b      	lsrs	r3, r3, #20
 800519c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519e:	fb02 f303 	mul.w	r3, r2, r3
 80051a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80051a4:	e060      	b.n	8005268 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80051ac:	d107      	bne.n	80051be <SPI_WaitFifoStateUntilTimeout+0x62>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d104      	bne.n	80051be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051c4:	d050      	beq.n	8005268 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051c6:	f7fc ffc9 	bl	800215c <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d902      	bls.n	80051dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d13d      	bne.n	8005258 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051f4:	d111      	bne.n	800521a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051fe:	d004      	beq.n	800520a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005208:	d107      	bne.n	800521a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005218:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005222:	d10f      	bne.n	8005244 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005242:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e010      	b.n	800527a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	3b01      	subs	r3, #1
 8005266:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4013      	ands	r3, r2
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	429a      	cmp	r2, r3
 8005276:	d196      	bne.n	80051a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3728      	adds	r7, #40	; 0x28
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000004 	.word	0x20000004

08005288 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af02      	add	r7, sp, #8
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2200      	movs	r2, #0
 800529c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f7ff ff5b 	bl	800515c <SPI_WaitFifoStateUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d007      	beq.n	80052bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b0:	f043 0220 	orr.w	r2, r3, #32
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e027      	b.n	800530c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2200      	movs	r2, #0
 80052c4:	2180      	movs	r1, #128	; 0x80
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f7ff fec0 	bl	800504c <SPI_WaitFlagStateUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d007      	beq.n	80052e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d6:	f043 0220 	orr.w	r2, r3, #32
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e014      	b.n	800530c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff ff34 	bl	800515c <SPI_WaitFifoStateUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d007      	beq.n	800530a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052fe:	f043 0220 	orr.w	r2, r3, #32
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e000      	b.n	800530c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e049      	b.n	80053ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fc fcc4 	bl	8001cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3304      	adds	r3, #4
 8005350:	4619      	mov	r1, r3
 8005352:	4610      	mov	r0, r2
 8005354:	f000 fcec 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d001      	beq.n	80053dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e04f      	b.n	800547c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a23      	ldr	r2, [pc, #140]	; (8005488 <HAL_TIM_Base_Start_IT+0xc4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d01d      	beq.n	800543a <HAL_TIM_Base_Start_IT+0x76>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005406:	d018      	beq.n	800543a <HAL_TIM_Base_Start_IT+0x76>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a1f      	ldr	r2, [pc, #124]	; (800548c <HAL_TIM_Base_Start_IT+0xc8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d013      	beq.n	800543a <HAL_TIM_Base_Start_IT+0x76>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1e      	ldr	r2, [pc, #120]	; (8005490 <HAL_TIM_Base_Start_IT+0xcc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00e      	beq.n	800543a <HAL_TIM_Base_Start_IT+0x76>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1c      	ldr	r2, [pc, #112]	; (8005494 <HAL_TIM_Base_Start_IT+0xd0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d009      	beq.n	800543a <HAL_TIM_Base_Start_IT+0x76>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1b      	ldr	r2, [pc, #108]	; (8005498 <HAL_TIM_Base_Start_IT+0xd4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d004      	beq.n	800543a <HAL_TIM_Base_Start_IT+0x76>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a19      	ldr	r2, [pc, #100]	; (800549c <HAL_TIM_Base_Start_IT+0xd8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d115      	bne.n	8005466 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	4b17      	ldr	r3, [pc, #92]	; (80054a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005442:	4013      	ands	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b06      	cmp	r3, #6
 800544a:	d015      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0xb4>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005452:	d011      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005464:	e008      	b.n	8005478 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0201 	orr.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	e000      	b.n	800547a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005478:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40000400 	.word	0x40000400
 8005490:	40000800 	.word	0x40000800
 8005494:	40000c00 	.word	0x40000c00
 8005498:	40013400 	.word	0x40013400
 800549c:	40014000 	.word	0x40014000
 80054a0:	00010007 	.word	0x00010007

080054a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e049      	b.n	800554a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f841 	bl	8005552 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3304      	adds	r3, #4
 80054e0:	4619      	mov	r1, r3
 80054e2:	4610      	mov	r0, r2
 80054e4:	f000 fc24 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
	...

08005568 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d104      	bne.n	8005586 <HAL_TIM_IC_Start_IT+0x1e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005582:	b2db      	uxtb	r3, r3
 8005584:	e023      	b.n	80055ce <HAL_TIM_IC_Start_IT+0x66>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b04      	cmp	r3, #4
 800558a:	d104      	bne.n	8005596 <HAL_TIM_IC_Start_IT+0x2e>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005592:	b2db      	uxtb	r3, r3
 8005594:	e01b      	b.n	80055ce <HAL_TIM_IC_Start_IT+0x66>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b08      	cmp	r3, #8
 800559a:	d104      	bne.n	80055a6 <HAL_TIM_IC_Start_IT+0x3e>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	e013      	b.n	80055ce <HAL_TIM_IC_Start_IT+0x66>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b0c      	cmp	r3, #12
 80055aa:	d104      	bne.n	80055b6 <HAL_TIM_IC_Start_IT+0x4e>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	e00b      	b.n	80055ce <HAL_TIM_IC_Start_IT+0x66>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b10      	cmp	r3, #16
 80055ba:	d104      	bne.n	80055c6 <HAL_TIM_IC_Start_IT+0x5e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	e003      	b.n	80055ce <HAL_TIM_IC_Start_IT+0x66>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d104      	bne.n	80055e0 <HAL_TIM_IC_Start_IT+0x78>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	e013      	b.n	8005608 <HAL_TIM_IC_Start_IT+0xa0>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d104      	bne.n	80055f0 <HAL_TIM_IC_Start_IT+0x88>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	e00b      	b.n	8005608 <HAL_TIM_IC_Start_IT+0xa0>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d104      	bne.n	8005600 <HAL_TIM_IC_Start_IT+0x98>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	e003      	b.n	8005608 <HAL_TIM_IC_Start_IT+0xa0>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005606:	b2db      	uxtb	r3, r3
 8005608:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800560a:	7bbb      	ldrb	r3, [r7, #14]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d102      	bne.n	8005616 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005610:	7b7b      	ldrb	r3, [r7, #13]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d001      	beq.n	800561a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e0dd      	b.n	80057d6 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d104      	bne.n	800562a <HAL_TIM_IC_Start_IT+0xc2>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005628:	e023      	b.n	8005672 <HAL_TIM_IC_Start_IT+0x10a>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b04      	cmp	r3, #4
 800562e:	d104      	bne.n	800563a <HAL_TIM_IC_Start_IT+0xd2>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005638:	e01b      	b.n	8005672 <HAL_TIM_IC_Start_IT+0x10a>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b08      	cmp	r3, #8
 800563e:	d104      	bne.n	800564a <HAL_TIM_IC_Start_IT+0xe2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005648:	e013      	b.n	8005672 <HAL_TIM_IC_Start_IT+0x10a>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b0c      	cmp	r3, #12
 800564e:	d104      	bne.n	800565a <HAL_TIM_IC_Start_IT+0xf2>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005658:	e00b      	b.n	8005672 <HAL_TIM_IC_Start_IT+0x10a>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b10      	cmp	r3, #16
 800565e:	d104      	bne.n	800566a <HAL_TIM_IC_Start_IT+0x102>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005668:	e003      	b.n	8005672 <HAL_TIM_IC_Start_IT+0x10a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2202      	movs	r2, #2
 800566e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d104      	bne.n	8005682 <HAL_TIM_IC_Start_IT+0x11a>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005680:	e013      	b.n	80056aa <HAL_TIM_IC_Start_IT+0x142>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b04      	cmp	r3, #4
 8005686:	d104      	bne.n	8005692 <HAL_TIM_IC_Start_IT+0x12a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005690:	e00b      	b.n	80056aa <HAL_TIM_IC_Start_IT+0x142>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b08      	cmp	r3, #8
 8005696:	d104      	bne.n	80056a2 <HAL_TIM_IC_Start_IT+0x13a>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056a0:	e003      	b.n	80056aa <HAL_TIM_IC_Start_IT+0x142>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2202      	movs	r2, #2
 80056a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b0c      	cmp	r3, #12
 80056ae:	d841      	bhi.n	8005734 <HAL_TIM_IC_Start_IT+0x1cc>
 80056b0:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <HAL_TIM_IC_Start_IT+0x150>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056ed 	.word	0x080056ed
 80056bc:	08005735 	.word	0x08005735
 80056c0:	08005735 	.word	0x08005735
 80056c4:	08005735 	.word	0x08005735
 80056c8:	080056ff 	.word	0x080056ff
 80056cc:	08005735 	.word	0x08005735
 80056d0:	08005735 	.word	0x08005735
 80056d4:	08005735 	.word	0x08005735
 80056d8:	08005711 	.word	0x08005711
 80056dc:	08005735 	.word	0x08005735
 80056e0:	08005735 	.word	0x08005735
 80056e4:	08005735 	.word	0x08005735
 80056e8:	08005723 	.word	0x08005723
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0202 	orr.w	r2, r2, #2
 80056fa:	60da      	str	r2, [r3, #12]
      break;
 80056fc:	e01d      	b.n	800573a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0204 	orr.w	r2, r2, #4
 800570c:	60da      	str	r2, [r3, #12]
      break;
 800570e:	e014      	b.n	800573a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0208 	orr.w	r2, r2, #8
 800571e:	60da      	str	r2, [r3, #12]
      break;
 8005720:	e00b      	b.n	800573a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0210 	orr.w	r2, r2, #16
 8005730:	60da      	str	r2, [r3, #12]
      break;
 8005732:	e002      	b.n	800573a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
      break;
 8005738:	bf00      	nop
  }

  if (status == HAL_OK)
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d149      	bne.n	80057d4 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2201      	movs	r2, #1
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fd49 	bl	80061e0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a23      	ldr	r2, [pc, #140]	; (80057e0 <HAL_TIM_IC_Start_IT+0x278>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d01d      	beq.n	8005794 <HAL_TIM_IC_Start_IT+0x22c>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005760:	d018      	beq.n	8005794 <HAL_TIM_IC_Start_IT+0x22c>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1f      	ldr	r2, [pc, #124]	; (80057e4 <HAL_TIM_IC_Start_IT+0x27c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d013      	beq.n	8005794 <HAL_TIM_IC_Start_IT+0x22c>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1d      	ldr	r2, [pc, #116]	; (80057e8 <HAL_TIM_IC_Start_IT+0x280>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00e      	beq.n	8005794 <HAL_TIM_IC_Start_IT+0x22c>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1c      	ldr	r2, [pc, #112]	; (80057ec <HAL_TIM_IC_Start_IT+0x284>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d009      	beq.n	8005794 <HAL_TIM_IC_Start_IT+0x22c>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1a      	ldr	r2, [pc, #104]	; (80057f0 <HAL_TIM_IC_Start_IT+0x288>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d004      	beq.n	8005794 <HAL_TIM_IC_Start_IT+0x22c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a19      	ldr	r2, [pc, #100]	; (80057f4 <HAL_TIM_IC_Start_IT+0x28c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d115      	bne.n	80057c0 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	4b17      	ldr	r3, [pc, #92]	; (80057f8 <HAL_TIM_IC_Start_IT+0x290>)
 800579c:	4013      	ands	r3, r2
 800579e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b06      	cmp	r3, #6
 80057a4:	d015      	beq.n	80057d2 <HAL_TIM_IC_Start_IT+0x26a>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ac:	d011      	beq.n	80057d2 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0201 	orr.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057be:	e008      	b.n	80057d2 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	e000      	b.n	80057d4 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40000c00 	.word	0x40000c00
 80057f0:	40013400 	.word	0x40013400
 80057f4:	40014000 	.word	0x40014000
 80057f8:	00010007 	.word	0x00010007

080057fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d020      	beq.n	8005860 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01b      	beq.n	8005860 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0202 	mvn.w	r2, #2
 8005830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fa53 	bl	8005cf2 <HAL_TIM_IC_CaptureCallback>
 800584c:	e005      	b.n	800585a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fa45 	bl	8005cde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fa56 	bl	8005d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f003 0304 	and.w	r3, r3, #4
 8005866:	2b00      	cmp	r3, #0
 8005868:	d020      	beq.n	80058ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01b      	beq.n	80058ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0204 	mvn.w	r2, #4
 800587c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2202      	movs	r2, #2
 8005882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fa2d 	bl	8005cf2 <HAL_TIM_IC_CaptureCallback>
 8005898:	e005      	b.n	80058a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fa1f 	bl	8005cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fa30 	bl	8005d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d020      	beq.n	80058f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d01b      	beq.n	80058f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0208 	mvn.w	r2, #8
 80058c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2204      	movs	r2, #4
 80058ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fa07 	bl	8005cf2 <HAL_TIM_IC_CaptureCallback>
 80058e4:	e005      	b.n	80058f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f9f9 	bl	8005cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fa0a 	bl	8005d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d020      	beq.n	8005944 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01b      	beq.n	8005944 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0210 	mvn.w	r2, #16
 8005914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2208      	movs	r2, #8
 800591a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f9e1 	bl	8005cf2 <HAL_TIM_IC_CaptureCallback>
 8005930:	e005      	b.n	800593e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f9d3 	bl	8005cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f9e4 	bl	8005d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00c      	beq.n	8005968 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0201 	mvn.w	r2, #1
 8005960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f9b1 	bl	8005cca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00c      	beq.n	800598c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fce2 	bl	8006350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00c      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fcda 	bl	8006364 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00c      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d007      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f9a3 	bl	8005d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00c      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0220 	mvn.w	r2, #32
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fca2 	bl	800633c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059f8:	bf00      	nop
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <HAL_TIM_IC_ConfigChannel+0x1e>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e088      	b.n	8005b30 <HAL_TIM_IC_ConfigChannel+0x130>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d11b      	bne.n	8005a64 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005a3c:	f000 fa12 	bl	8005e64 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 020c 	bic.w	r2, r2, #12
 8005a4e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6999      	ldr	r1, [r3, #24]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	619a      	str	r2, [r3, #24]
 8005a62:	e060      	b.n	8005b26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d11c      	bne.n	8005aa4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005a7a:	f000 fa90 	bl	8005f9e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699a      	ldr	r2, [r3, #24]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a8c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6999      	ldr	r1, [r3, #24]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	021a      	lsls	r2, r3, #8
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	619a      	str	r2, [r3, #24]
 8005aa2:	e040      	b.n	8005b26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d11b      	bne.n	8005ae2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005aba:	f000 fadd 	bl	8006078 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 020c 	bic.w	r2, r2, #12
 8005acc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69d9      	ldr	r1, [r3, #28]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	61da      	str	r2, [r3, #28]
 8005ae0:	e021      	b.n	8005b26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b0c      	cmp	r3, #12
 8005ae6:	d11c      	bne.n	8005b22 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005af8:	f000 fafa 	bl	80060f0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69da      	ldr	r2, [r3, #28]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b0a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69d9      	ldr	r1, [r3, #28]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	021a      	lsls	r2, r3, #8
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	61da      	str	r2, [r3, #28]
 8005b20:	e001      	b.n	8005b26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_TIM_ConfigClockSource+0x1c>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e0b6      	b.n	8005cc2 <HAL_TIM_ConfigClockSource+0x18a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b90:	d03e      	beq.n	8005c10 <HAL_TIM_ConfigClockSource+0xd8>
 8005b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b96:	f200 8087 	bhi.w	8005ca8 <HAL_TIM_ConfigClockSource+0x170>
 8005b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9e:	f000 8086 	beq.w	8005cae <HAL_TIM_ConfigClockSource+0x176>
 8005ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba6:	d87f      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x170>
 8005ba8:	2b70      	cmp	r3, #112	; 0x70
 8005baa:	d01a      	beq.n	8005be2 <HAL_TIM_ConfigClockSource+0xaa>
 8005bac:	2b70      	cmp	r3, #112	; 0x70
 8005bae:	d87b      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x170>
 8005bb0:	2b60      	cmp	r3, #96	; 0x60
 8005bb2:	d050      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x11e>
 8005bb4:	2b60      	cmp	r3, #96	; 0x60
 8005bb6:	d877      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x170>
 8005bb8:	2b50      	cmp	r3, #80	; 0x50
 8005bba:	d03c      	beq.n	8005c36 <HAL_TIM_ConfigClockSource+0xfe>
 8005bbc:	2b50      	cmp	r3, #80	; 0x50
 8005bbe:	d873      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x170>
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d058      	beq.n	8005c76 <HAL_TIM_ConfigClockSource+0x13e>
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	d86f      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x170>
 8005bc8:	2b30      	cmp	r3, #48	; 0x30
 8005bca:	d064      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15e>
 8005bcc:	2b30      	cmp	r3, #48	; 0x30
 8005bce:	d86b      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x170>
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	d060      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15e>
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d867      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x170>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d05c      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15e>
 8005bdc:	2b10      	cmp	r3, #16
 8005bde:	d05a      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15e>
 8005be0:	e062      	b.n	8005ca8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bf2:	f000 fad5 	bl	80061a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	609a      	str	r2, [r3, #8]
      break;
 8005c0e:	e04f      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c20:	f000 fabe 	bl	80061a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c32:	609a      	str	r2, [r3, #8]
      break;
 8005c34:	e03c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c42:	461a      	mov	r2, r3
 8005c44:	f000 f97c 	bl	8005f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2150      	movs	r1, #80	; 0x50
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fa8b 	bl	800616a <TIM_ITRx_SetConfig>
      break;
 8005c54:	e02c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c62:	461a      	mov	r2, r3
 8005c64:	f000 f9d8 	bl	8006018 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2160      	movs	r1, #96	; 0x60
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fa7b 	bl	800616a <TIM_ITRx_SetConfig>
      break;
 8005c74:	e01c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c82:	461a      	mov	r2, r3
 8005c84:	f000 f95c 	bl	8005f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2140      	movs	r1, #64	; 0x40
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fa6b 	bl	800616a <TIM_ITRx_SetConfig>
      break;
 8005c94:	e00c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	f000 fa62 	bl	800616a <TIM_ITRx_SetConfig>
      break;
 8005ca6:	e003      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cac:	e000      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
	...

08005d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a40      	ldr	r2, [pc, #256]	; (8005e44 <TIM_Base_SetConfig+0x114>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4e:	d00f      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a3d      	ldr	r2, [pc, #244]	; (8005e48 <TIM_Base_SetConfig+0x118>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a3c      	ldr	r2, [pc, #240]	; (8005e4c <TIM_Base_SetConfig+0x11c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d007      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a3b      	ldr	r2, [pc, #236]	; (8005e50 <TIM_Base_SetConfig+0x120>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a3a      	ldr	r2, [pc, #232]	; (8005e54 <TIM_Base_SetConfig+0x124>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d108      	bne.n	8005d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2f      	ldr	r2, [pc, #188]	; (8005e44 <TIM_Base_SetConfig+0x114>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d01f      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d90:	d01b      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2c      	ldr	r2, [pc, #176]	; (8005e48 <TIM_Base_SetConfig+0x118>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d017      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a2b      	ldr	r2, [pc, #172]	; (8005e4c <TIM_Base_SetConfig+0x11c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d013      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a2a      	ldr	r2, [pc, #168]	; (8005e50 <TIM_Base_SetConfig+0x120>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00f      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a29      	ldr	r2, [pc, #164]	; (8005e54 <TIM_Base_SetConfig+0x124>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00b      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a28      	ldr	r2, [pc, #160]	; (8005e58 <TIM_Base_SetConfig+0x128>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d007      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a27      	ldr	r2, [pc, #156]	; (8005e5c <TIM_Base_SetConfig+0x12c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d003      	beq.n	8005dca <TIM_Base_SetConfig+0x9a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a26      	ldr	r2, [pc, #152]	; (8005e60 <TIM_Base_SetConfig+0x130>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d108      	bne.n	8005ddc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a10      	ldr	r2, [pc, #64]	; (8005e44 <TIM_Base_SetConfig+0x114>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00f      	beq.n	8005e28 <TIM_Base_SetConfig+0xf8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a12      	ldr	r2, [pc, #72]	; (8005e54 <TIM_Base_SetConfig+0x124>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00b      	beq.n	8005e28 <TIM_Base_SetConfig+0xf8>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a11      	ldr	r2, [pc, #68]	; (8005e58 <TIM_Base_SetConfig+0x128>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d007      	beq.n	8005e28 <TIM_Base_SetConfig+0xf8>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a10      	ldr	r2, [pc, #64]	; (8005e5c <TIM_Base_SetConfig+0x12c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_Base_SetConfig+0xf8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a0f      	ldr	r2, [pc, #60]	; (8005e60 <TIM_Base_SetConfig+0x130>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d103      	bne.n	8005e30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	615a      	str	r2, [r3, #20]
}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40012c00 	.word	0x40012c00
 8005e48:	40000400 	.word	0x40000400
 8005e4c:	40000800 	.word	0x40000800
 8005e50:	40000c00 	.word	0x40000c00
 8005e54:	40013400 	.word	0x40013400
 8005e58:	40014000 	.word	0x40014000
 8005e5c:	40014400 	.word	0x40014400
 8005e60:	40014800 	.word	0x40014800

08005e64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	f023 0201 	bic.w	r2, r3, #1
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4a26      	ldr	r2, [pc, #152]	; (8005f28 <TIM_TI1_SetConfig+0xc4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d017      	beq.n	8005ec2 <TIM_TI1_SetConfig+0x5e>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e98:	d013      	beq.n	8005ec2 <TIM_TI1_SetConfig+0x5e>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4a23      	ldr	r2, [pc, #140]	; (8005f2c <TIM_TI1_SetConfig+0xc8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00f      	beq.n	8005ec2 <TIM_TI1_SetConfig+0x5e>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a22      	ldr	r2, [pc, #136]	; (8005f30 <TIM_TI1_SetConfig+0xcc>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d00b      	beq.n	8005ec2 <TIM_TI1_SetConfig+0x5e>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4a21      	ldr	r2, [pc, #132]	; (8005f34 <TIM_TI1_SetConfig+0xd0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d007      	beq.n	8005ec2 <TIM_TI1_SetConfig+0x5e>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4a20      	ldr	r2, [pc, #128]	; (8005f38 <TIM_TI1_SetConfig+0xd4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d003      	beq.n	8005ec2 <TIM_TI1_SetConfig+0x5e>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4a1f      	ldr	r2, [pc, #124]	; (8005f3c <TIM_TI1_SetConfig+0xd8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d101      	bne.n	8005ec6 <TIM_TI1_SetConfig+0x62>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <TIM_TI1_SetConfig+0x64>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f023 0303 	bic.w	r3, r3, #3
 8005ed2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	e003      	b.n	8005ee6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f043 0301 	orr.w	r3, r3, #1
 8005ee4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f023 030a 	bic.w	r3, r3, #10
 8005f00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f003 030a 	and.w	r3, r3, #10
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	621a      	str	r2, [r3, #32]
}
 8005f1a:	bf00      	nop
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40012c00 	.word	0x40012c00
 8005f2c:	40000400 	.word	0x40000400
 8005f30:	40000800 	.word	0x40000800
 8005f34:	40000c00 	.word	0x40000c00
 8005f38:	40013400 	.word	0x40013400
 8005f3c:	40014000 	.word	0x40014000

08005f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	f023 0201 	bic.w	r2, r3, #1
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f023 030a 	bic.w	r3, r3, #10
 8005f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	621a      	str	r2, [r3, #32]
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b087      	sub	sp, #28
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	f023 0210 	bic.w	r2, r3, #16
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	031b      	lsls	r3, r3, #12
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	621a      	str	r2, [r3, #32]
}
 800600c:	bf00      	nop
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	f023 0210 	bic.w	r2, r3, #16
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	031b      	lsls	r3, r3, #12
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006054:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	621a      	str	r2, [r3, #32]
}
 800606c:	bf00      	nop
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f023 0303 	bic.w	r3, r3, #3
 80060a4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80060c8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	621a      	str	r2, [r3, #32]
}
 80060e4:	bf00      	nop
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800611c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800612e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	031b      	lsls	r3, r3, #12
 8006134:	b29b      	uxth	r3, r3
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	4313      	orrs	r3, r2
 800613a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006142:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	031b      	lsls	r3, r3, #12
 8006148:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006180:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	f043 0307 	orr.w	r3, r3, #7
 800618c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	609a      	str	r2, [r3, #8]
}
 8006194:	bf00      	nop
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	021a      	lsls	r2, r3, #8
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	609a      	str	r2, [r3, #8]
}
 80061d4:	bf00      	nop
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	2201      	movs	r2, #1
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a1a      	ldr	r2, [r3, #32]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	43db      	mvns	r3, r3
 8006202:	401a      	ands	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a1a      	ldr	r2, [r3, #32]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	fa01 f303 	lsl.w	r3, r1, r3
 8006218:	431a      	orrs	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	621a      	str	r2, [r3, #32]
}
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006240:	2302      	movs	r3, #2
 8006242:	e068      	b.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a2e      	ldr	r2, [pc, #184]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d004      	beq.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a2d      	ldr	r2, [pc, #180]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d108      	bne.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800627e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006290:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1e      	ldr	r2, [pc, #120]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d01d      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b6:	d018      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1b      	ldr	r2, [pc, #108]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1a      	ldr	r2, [pc, #104]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00e      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a18      	ldr	r2, [pc, #96]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d009      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a13      	ldr	r2, [pc, #76]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a14      	ldr	r2, [pc, #80]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d10c      	bne.n	8006304 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40013400 	.word	0x40013400
 800632c:	40000400 	.word	0x40000400
 8006330:	40000800 	.word	0x40000800
 8006334:	40000c00 	.word	0x40000c00
 8006338:	40014000 	.word	0x40014000

0800633c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e042      	b.n	8006410 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006390:	2b00      	cmp	r3, #0
 8006392:	d106      	bne.n	80063a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7fb fbf1 	bl	8001b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2224      	movs	r2, #36	; 0x24
 80063a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0201 	bic.w	r2, r2, #1
 80063b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d002      	beq.n	80063c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fbb4 	bl	8006b30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f8b5 	bl	8006538 <UART_SetConfig>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e01b      	b.n	8006410 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0201 	orr.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fc33 	bl	8006c74 <UART_CheckIdleState>
 800640e:	4603      	mov	r3, r0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08a      	sub	sp, #40	; 0x28
 800641c:	af02      	add	r7, sp, #8
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	603b      	str	r3, [r7, #0]
 8006424:	4613      	mov	r3, r2
 8006426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642e:	2b20      	cmp	r3, #32
 8006430:	d17c      	bne.n	800652c <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <HAL_UART_Transmit+0x26>
 8006438:	88fb      	ldrh	r3, [r7, #6]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e075      	b.n	800652e <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2221      	movs	r2, #33	; 0x21
 800644e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006452:	f7fb fe83 	bl	800215c <HAL_GetTick>
 8006456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	88fa      	ldrh	r2, [r7, #6]
 800645c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	88fa      	ldrh	r2, [r7, #6]
 8006464:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006470:	d108      	bne.n	8006484 <HAL_UART_Transmit+0x6c>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d104      	bne.n	8006484 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	e003      	b.n	800648c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006488:	2300      	movs	r3, #0
 800648a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800648c:	e031      	b.n	80064f2 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2200      	movs	r2, #0
 8006496:	2180      	movs	r1, #128	; 0x80
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 fc95 	bl	8006dc8 <UART_WaitOnFlagUntilTimeout>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e03e      	b.n	800652e <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10b      	bne.n	80064ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	881a      	ldrh	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064c2:	b292      	uxth	r2, r2
 80064c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	3302      	adds	r3, #2
 80064ca:	61bb      	str	r3, [r7, #24]
 80064cc:	e008      	b.n	80064e0 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	781a      	ldrb	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	b292      	uxth	r2, r2
 80064d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	3301      	adds	r3, #1
 80064de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	3b01      	subs	r3, #1
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1c7      	bne.n	800648e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2200      	movs	r2, #0
 8006506:	2140      	movs	r1, #64	; 0x40
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 fc5d 	bl	8006dc8 <UART_WaitOnFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d005      	beq.n	8006520 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2220      	movs	r2, #32
 8006518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e006      	b.n	800652e <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2220      	movs	r2, #32
 8006524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	e000      	b.n	800652e <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800652c:	2302      	movs	r3, #2
  }
}
 800652e:	4618      	mov	r0, r3
 8006530:	3720      	adds	r7, #32
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
	...

08006538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800653c:	b08c      	sub	sp, #48	; 0x30
 800653e:	af00      	add	r7, sp, #0
 8006540:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	431a      	orrs	r2, r3
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	431a      	orrs	r2, r3
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	4313      	orrs	r3, r2
 800655e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	4baa      	ldr	r3, [pc, #680]	; (8006810 <UART_SetConfig+0x2d8>)
 8006568:	4013      	ands	r3, r2
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	6812      	ldr	r2, [r2, #0]
 800656e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006570:	430b      	orrs	r3, r1
 8006572:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a9f      	ldr	r2, [pc, #636]	; (8006814 <UART_SetConfig+0x2dc>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d004      	beq.n	80065a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065a0:	4313      	orrs	r3, r2
 80065a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80065ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	6812      	ldr	r2, [r2, #0]
 80065b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065b8:	430b      	orrs	r3, r1
 80065ba:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c2:	f023 010f 	bic.w	r1, r3, #15
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a90      	ldr	r2, [pc, #576]	; (8006818 <UART_SetConfig+0x2e0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d125      	bne.n	8006628 <UART_SetConfig+0xf0>
 80065dc:	4b8f      	ldr	r3, [pc, #572]	; (800681c <UART_SetConfig+0x2e4>)
 80065de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e2:	f003 0303 	and.w	r3, r3, #3
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d81a      	bhi.n	8006620 <UART_SetConfig+0xe8>
 80065ea:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <UART_SetConfig+0xb8>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	08006601 	.word	0x08006601
 80065f4:	08006611 	.word	0x08006611
 80065f8:	08006609 	.word	0x08006609
 80065fc:	08006619 	.word	0x08006619
 8006600:	2301      	movs	r3, #1
 8006602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006606:	e116      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006608:	2302      	movs	r3, #2
 800660a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800660e:	e112      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006610:	2304      	movs	r3, #4
 8006612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006616:	e10e      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006618:	2308      	movs	r3, #8
 800661a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661e:	e10a      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006620:	2310      	movs	r3, #16
 8006622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006626:	e106      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a7c      	ldr	r2, [pc, #496]	; (8006820 <UART_SetConfig+0x2e8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d138      	bne.n	80066a4 <UART_SetConfig+0x16c>
 8006632:	4b7a      	ldr	r3, [pc, #488]	; (800681c <UART_SetConfig+0x2e4>)
 8006634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006638:	f003 030c 	and.w	r3, r3, #12
 800663c:	2b0c      	cmp	r3, #12
 800663e:	d82d      	bhi.n	800669c <UART_SetConfig+0x164>
 8006640:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <UART_SetConfig+0x110>)
 8006642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006646:	bf00      	nop
 8006648:	0800667d 	.word	0x0800667d
 800664c:	0800669d 	.word	0x0800669d
 8006650:	0800669d 	.word	0x0800669d
 8006654:	0800669d 	.word	0x0800669d
 8006658:	0800668d 	.word	0x0800668d
 800665c:	0800669d 	.word	0x0800669d
 8006660:	0800669d 	.word	0x0800669d
 8006664:	0800669d 	.word	0x0800669d
 8006668:	08006685 	.word	0x08006685
 800666c:	0800669d 	.word	0x0800669d
 8006670:	0800669d 	.word	0x0800669d
 8006674:	0800669d 	.word	0x0800669d
 8006678:	08006695 	.word	0x08006695
 800667c:	2300      	movs	r3, #0
 800667e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006682:	e0d8      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006684:	2302      	movs	r3, #2
 8006686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800668a:	e0d4      	b.n	8006836 <UART_SetConfig+0x2fe>
 800668c:	2304      	movs	r3, #4
 800668e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006692:	e0d0      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006694:	2308      	movs	r3, #8
 8006696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800669a:	e0cc      	b.n	8006836 <UART_SetConfig+0x2fe>
 800669c:	2310      	movs	r3, #16
 800669e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066a2:	e0c8      	b.n	8006836 <UART_SetConfig+0x2fe>
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a5e      	ldr	r2, [pc, #376]	; (8006824 <UART_SetConfig+0x2ec>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d125      	bne.n	80066fa <UART_SetConfig+0x1c2>
 80066ae:	4b5b      	ldr	r3, [pc, #364]	; (800681c <UART_SetConfig+0x2e4>)
 80066b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066b8:	2b30      	cmp	r3, #48	; 0x30
 80066ba:	d016      	beq.n	80066ea <UART_SetConfig+0x1b2>
 80066bc:	2b30      	cmp	r3, #48	; 0x30
 80066be:	d818      	bhi.n	80066f2 <UART_SetConfig+0x1ba>
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	d00a      	beq.n	80066da <UART_SetConfig+0x1a2>
 80066c4:	2b20      	cmp	r3, #32
 80066c6:	d814      	bhi.n	80066f2 <UART_SetConfig+0x1ba>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <UART_SetConfig+0x19a>
 80066cc:	2b10      	cmp	r3, #16
 80066ce:	d008      	beq.n	80066e2 <UART_SetConfig+0x1aa>
 80066d0:	e00f      	b.n	80066f2 <UART_SetConfig+0x1ba>
 80066d2:	2300      	movs	r3, #0
 80066d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066d8:	e0ad      	b.n	8006836 <UART_SetConfig+0x2fe>
 80066da:	2302      	movs	r3, #2
 80066dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066e0:	e0a9      	b.n	8006836 <UART_SetConfig+0x2fe>
 80066e2:	2304      	movs	r3, #4
 80066e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066e8:	e0a5      	b.n	8006836 <UART_SetConfig+0x2fe>
 80066ea:	2308      	movs	r3, #8
 80066ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f0:	e0a1      	b.n	8006836 <UART_SetConfig+0x2fe>
 80066f2:	2310      	movs	r3, #16
 80066f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f8:	e09d      	b.n	8006836 <UART_SetConfig+0x2fe>
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a4a      	ldr	r2, [pc, #296]	; (8006828 <UART_SetConfig+0x2f0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d125      	bne.n	8006750 <UART_SetConfig+0x218>
 8006704:	4b45      	ldr	r3, [pc, #276]	; (800681c <UART_SetConfig+0x2e4>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800670e:	2bc0      	cmp	r3, #192	; 0xc0
 8006710:	d016      	beq.n	8006740 <UART_SetConfig+0x208>
 8006712:	2bc0      	cmp	r3, #192	; 0xc0
 8006714:	d818      	bhi.n	8006748 <UART_SetConfig+0x210>
 8006716:	2b80      	cmp	r3, #128	; 0x80
 8006718:	d00a      	beq.n	8006730 <UART_SetConfig+0x1f8>
 800671a:	2b80      	cmp	r3, #128	; 0x80
 800671c:	d814      	bhi.n	8006748 <UART_SetConfig+0x210>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <UART_SetConfig+0x1f0>
 8006722:	2b40      	cmp	r3, #64	; 0x40
 8006724:	d008      	beq.n	8006738 <UART_SetConfig+0x200>
 8006726:	e00f      	b.n	8006748 <UART_SetConfig+0x210>
 8006728:	2300      	movs	r3, #0
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800672e:	e082      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006730:	2302      	movs	r3, #2
 8006732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006736:	e07e      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006738:	2304      	movs	r3, #4
 800673a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800673e:	e07a      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006740:	2308      	movs	r3, #8
 8006742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006746:	e076      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006748:	2310      	movs	r3, #16
 800674a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800674e:	e072      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a35      	ldr	r2, [pc, #212]	; (800682c <UART_SetConfig+0x2f4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d12a      	bne.n	80067b0 <UART_SetConfig+0x278>
 800675a:	4b30      	ldr	r3, [pc, #192]	; (800681c <UART_SetConfig+0x2e4>)
 800675c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006768:	d01a      	beq.n	80067a0 <UART_SetConfig+0x268>
 800676a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800676e:	d81b      	bhi.n	80067a8 <UART_SetConfig+0x270>
 8006770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006774:	d00c      	beq.n	8006790 <UART_SetConfig+0x258>
 8006776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800677a:	d815      	bhi.n	80067a8 <UART_SetConfig+0x270>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <UART_SetConfig+0x250>
 8006780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006784:	d008      	beq.n	8006798 <UART_SetConfig+0x260>
 8006786:	e00f      	b.n	80067a8 <UART_SetConfig+0x270>
 8006788:	2300      	movs	r3, #0
 800678a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800678e:	e052      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006790:	2302      	movs	r3, #2
 8006792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006796:	e04e      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006798:	2304      	movs	r3, #4
 800679a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800679e:	e04a      	b.n	8006836 <UART_SetConfig+0x2fe>
 80067a0:	2308      	movs	r3, #8
 80067a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067a6:	e046      	b.n	8006836 <UART_SetConfig+0x2fe>
 80067a8:	2310      	movs	r3, #16
 80067aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ae:	e042      	b.n	8006836 <UART_SetConfig+0x2fe>
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a17      	ldr	r2, [pc, #92]	; (8006814 <UART_SetConfig+0x2dc>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d13a      	bne.n	8006830 <UART_SetConfig+0x2f8>
 80067ba:	4b18      	ldr	r3, [pc, #96]	; (800681c <UART_SetConfig+0x2e4>)
 80067bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067c8:	d01a      	beq.n	8006800 <UART_SetConfig+0x2c8>
 80067ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067ce:	d81b      	bhi.n	8006808 <UART_SetConfig+0x2d0>
 80067d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d4:	d00c      	beq.n	80067f0 <UART_SetConfig+0x2b8>
 80067d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067da:	d815      	bhi.n	8006808 <UART_SetConfig+0x2d0>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <UART_SetConfig+0x2b0>
 80067e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e4:	d008      	beq.n	80067f8 <UART_SetConfig+0x2c0>
 80067e6:	e00f      	b.n	8006808 <UART_SetConfig+0x2d0>
 80067e8:	2300      	movs	r3, #0
 80067ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ee:	e022      	b.n	8006836 <UART_SetConfig+0x2fe>
 80067f0:	2302      	movs	r3, #2
 80067f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067f6:	e01e      	b.n	8006836 <UART_SetConfig+0x2fe>
 80067f8:	2304      	movs	r3, #4
 80067fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067fe:	e01a      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006800:	2308      	movs	r3, #8
 8006802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006806:	e016      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006808:	2310      	movs	r3, #16
 800680a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800680e:	e012      	b.n	8006836 <UART_SetConfig+0x2fe>
 8006810:	cfff69f3 	.word	0xcfff69f3
 8006814:	40008000 	.word	0x40008000
 8006818:	40013800 	.word	0x40013800
 800681c:	40021000 	.word	0x40021000
 8006820:	40004400 	.word	0x40004400
 8006824:	40004800 	.word	0x40004800
 8006828:	40004c00 	.word	0x40004c00
 800682c:	40005000 	.word	0x40005000
 8006830:	2310      	movs	r3, #16
 8006832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4aae      	ldr	r2, [pc, #696]	; (8006af4 <UART_SetConfig+0x5bc>)
 800683c:	4293      	cmp	r3, r2
 800683e:	f040 8097 	bne.w	8006970 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006846:	2b08      	cmp	r3, #8
 8006848:	d823      	bhi.n	8006892 <UART_SetConfig+0x35a>
 800684a:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <UART_SetConfig+0x318>)
 800684c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006850:	08006875 	.word	0x08006875
 8006854:	08006893 	.word	0x08006893
 8006858:	0800687d 	.word	0x0800687d
 800685c:	08006893 	.word	0x08006893
 8006860:	08006883 	.word	0x08006883
 8006864:	08006893 	.word	0x08006893
 8006868:	08006893 	.word	0x08006893
 800686c:	08006893 	.word	0x08006893
 8006870:	0800688b 	.word	0x0800688b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006874:	f7fd fbce 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 8006878:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800687a:	e010      	b.n	800689e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800687c:	4b9e      	ldr	r3, [pc, #632]	; (8006af8 <UART_SetConfig+0x5c0>)
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006880:	e00d      	b.n	800689e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006882:	f7fd fb2f 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8006886:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006888:	e009      	b.n	800689e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800688e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006890:	e005      	b.n	800689e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800689c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 8130 	beq.w	8006b06 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	4a94      	ldr	r2, [pc, #592]	; (8006afc <UART_SetConfig+0x5c4>)
 80068ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068b0:	461a      	mov	r2, r3
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80068b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	4613      	mov	r3, r2
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	4413      	add	r3, r2
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d305      	bcc.n	80068d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d903      	bls.n	80068de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068dc:	e113      	b.n	8006b06 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	2200      	movs	r2, #0
 80068e2:	60bb      	str	r3, [r7, #8]
 80068e4:	60fa      	str	r2, [r7, #12]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	4a84      	ldr	r2, [pc, #528]	; (8006afc <UART_SetConfig+0x5c4>)
 80068ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2200      	movs	r2, #0
 80068f4:	603b      	str	r3, [r7, #0]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006900:	f7fa f96a 	bl	8000bd8 <__aeabi_uldivmod>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4610      	mov	r0, r2
 800690a:	4619      	mov	r1, r3
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	f04f 0300 	mov.w	r3, #0
 8006914:	020b      	lsls	r3, r1, #8
 8006916:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800691a:	0202      	lsls	r2, r0, #8
 800691c:	6979      	ldr	r1, [r7, #20]
 800691e:	6849      	ldr	r1, [r1, #4]
 8006920:	0849      	lsrs	r1, r1, #1
 8006922:	2000      	movs	r0, #0
 8006924:	460c      	mov	r4, r1
 8006926:	4605      	mov	r5, r0
 8006928:	eb12 0804 	adds.w	r8, r2, r4
 800692c:	eb43 0905 	adc.w	r9, r3, r5
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	469a      	mov	sl, r3
 8006938:	4693      	mov	fp, r2
 800693a:	4652      	mov	r2, sl
 800693c:	465b      	mov	r3, fp
 800693e:	4640      	mov	r0, r8
 8006940:	4649      	mov	r1, r9
 8006942:	f7fa f949 	bl	8000bd8 <__aeabi_uldivmod>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4613      	mov	r3, r2
 800694c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006954:	d308      	bcc.n	8006968 <UART_SetConfig+0x430>
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800695c:	d204      	bcs.n	8006968 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6a3a      	ldr	r2, [r7, #32]
 8006964:	60da      	str	r2, [r3, #12]
 8006966:	e0ce      	b.n	8006b06 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800696e:	e0ca      	b.n	8006b06 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006978:	d166      	bne.n	8006a48 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800697a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800697e:	2b08      	cmp	r3, #8
 8006980:	d827      	bhi.n	80069d2 <UART_SetConfig+0x49a>
 8006982:	a201      	add	r2, pc, #4	; (adr r2, 8006988 <UART_SetConfig+0x450>)
 8006984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006988:	080069ad 	.word	0x080069ad
 800698c:	080069b5 	.word	0x080069b5
 8006990:	080069bd 	.word	0x080069bd
 8006994:	080069d3 	.word	0x080069d3
 8006998:	080069c3 	.word	0x080069c3
 800699c:	080069d3 	.word	0x080069d3
 80069a0:	080069d3 	.word	0x080069d3
 80069a4:	080069d3 	.word	0x080069d3
 80069a8:	080069cb 	.word	0x080069cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069ac:	f7fd fb32 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 80069b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069b2:	e014      	b.n	80069de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069b4:	f7fd fb44 	bl	8004040 <HAL_RCC_GetPCLK2Freq>
 80069b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069ba:	e010      	b.n	80069de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069bc:	4b4e      	ldr	r3, [pc, #312]	; (8006af8 <UART_SetConfig+0x5c0>)
 80069be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069c0:	e00d      	b.n	80069de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069c2:	f7fd fa8f 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 80069c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069c8:	e009      	b.n	80069de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069d0:	e005      	b.n	80069de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80069dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 8090 	beq.w	8006b06 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	4a44      	ldr	r2, [pc, #272]	; (8006afc <UART_SetConfig+0x5c4>)
 80069ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069f0:	461a      	mov	r2, r3
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80069f8:	005a      	lsls	r2, r3, #1
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	085b      	lsrs	r3, r3, #1
 8006a00:	441a      	add	r2, r3
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	2b0f      	cmp	r3, #15
 8006a10:	d916      	bls.n	8006a40 <UART_SetConfig+0x508>
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a18:	d212      	bcs.n	8006a40 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f023 030f 	bic.w	r3, r3, #15
 8006a22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	8bfb      	ldrh	r3, [r7, #30]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	8bfa      	ldrh	r2, [r7, #30]
 8006a3c:	60da      	str	r2, [r3, #12]
 8006a3e:	e062      	b.n	8006b06 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a46:	e05e      	b.n	8006b06 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d828      	bhi.n	8006aa2 <UART_SetConfig+0x56a>
 8006a50:	a201      	add	r2, pc, #4	; (adr r2, 8006a58 <UART_SetConfig+0x520>)
 8006a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a56:	bf00      	nop
 8006a58:	08006a7d 	.word	0x08006a7d
 8006a5c:	08006a85 	.word	0x08006a85
 8006a60:	08006a8d 	.word	0x08006a8d
 8006a64:	08006aa3 	.word	0x08006aa3
 8006a68:	08006a93 	.word	0x08006a93
 8006a6c:	08006aa3 	.word	0x08006aa3
 8006a70:	08006aa3 	.word	0x08006aa3
 8006a74:	08006aa3 	.word	0x08006aa3
 8006a78:	08006a9b 	.word	0x08006a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a7c:	f7fd faca 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 8006a80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a82:	e014      	b.n	8006aae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a84:	f7fd fadc 	bl	8004040 <HAL_RCC_GetPCLK2Freq>
 8006a88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a8a:	e010      	b.n	8006aae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a8c:	4b1a      	ldr	r3, [pc, #104]	; (8006af8 <UART_SetConfig+0x5c0>)
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a90:	e00d      	b.n	8006aae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a92:	f7fd fa27 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8006a96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a98:	e009      	b.n	8006aae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006aa0:	e005      	b.n	8006aae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006aac:	bf00      	nop
    }

    if (pclk != 0U)
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d028      	beq.n	8006b06 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	4a10      	ldr	r2, [pc, #64]	; (8006afc <UART_SetConfig+0x5c4>)
 8006aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	441a      	add	r2, r3
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	2b0f      	cmp	r3, #15
 8006adc:	d910      	bls.n	8006b00 <UART_SetConfig+0x5c8>
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae4:	d20c      	bcs.n	8006b00 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60da      	str	r2, [r3, #12]
 8006af0:	e009      	b.n	8006b06 <UART_SetConfig+0x5ce>
 8006af2:	bf00      	nop
 8006af4:	40008000 	.word	0x40008000
 8006af8:	00f42400 	.word	0x00f42400
 8006afc:	08009c38 	.word	0x08009c38
      }
      else
      {
        ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006b22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3730      	adds	r7, #48	; 0x30
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3c:	f003 0308 	and.w	r3, r3, #8
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00a      	beq.n	8006b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00a      	beq.n	8006b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc4:	f003 0310 	and.w	r3, r3, #16
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00a      	beq.n	8006be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01a      	beq.n	8006c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c2e:	d10a      	bne.n	8006c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	605a      	str	r2, [r3, #4]
  }
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b098      	sub	sp, #96	; 0x60
 8006c78:	af02      	add	r7, sp, #8
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c84:	f7fb fa6a 	bl	800215c <HAL_GetTick>
 8006c88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0308 	and.w	r3, r3, #8
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	d12f      	bne.n	8006cf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f88e 	bl	8006dc8 <UART_WaitOnFlagUntilTimeout>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d022      	beq.n	8006cf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	e853 3f00 	ldrex	r3, [r3]
 8006cbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8006cd2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cd8:	e841 2300 	strex	r3, r2, [r1]
 8006cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e6      	bne.n	8006cb2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e063      	b.n	8006dc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0304 	and.w	r3, r3, #4
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d149      	bne.n	8006d9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f857 	bl	8006dc8 <UART_WaitOnFlagUntilTimeout>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d03c      	beq.n	8006d9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d46:	e841 2300 	strex	r3, r2, [r1]
 8006d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1e6      	bne.n	8006d20 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3308      	adds	r3, #8
 8006d58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f023 0301 	bic.w	r3, r3, #1
 8006d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3308      	adds	r3, #8
 8006d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d72:	61fa      	str	r2, [r7, #28]
 8006d74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	69b9      	ldr	r1, [r7, #24]
 8006d78:	69fa      	ldr	r2, [r7, #28]
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e5      	bne.n	8006d52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e012      	b.n	8006dc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3758      	adds	r7, #88	; 0x58
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	603b      	str	r3, [r7, #0]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd8:	e049      	b.n	8006e6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006de0:	d045      	beq.n	8006e6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de2:	f7fb f9bb 	bl	800215c <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d302      	bcc.n	8006df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e048      	b.n	8006e8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d031      	beq.n	8006e6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d110      	bne.n	8006e3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2208      	movs	r2, #8
 8006e1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f838 	bl	8006e96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2208      	movs	r2, #8
 8006e2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e029      	b.n	8006e8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e48:	d111      	bne.n	8006e6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 f81e 	bl	8006e96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e00f      	b.n	8006e8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69da      	ldr	r2, [r3, #28]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	4013      	ands	r3, r2
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	bf0c      	ite	eq
 8006e7e:	2301      	moveq	r3, #1
 8006e80:	2300      	movne	r3, #0
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	461a      	mov	r2, r3
 8006e86:	79fb      	ldrb	r3, [r7, #7]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d0a6      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b095      	sub	sp, #84	; 0x54
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ebe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ec2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e6      	bne.n	8006e9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ee6:	f023 0301 	bic.w	r3, r3, #1
 8006eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ef4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e3      	bne.n	8006ed0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d118      	bne.n	8006f42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f023 0310 	bic.w	r3, r3, #16
 8006f24:	647b      	str	r3, [r7, #68]	; 0x44
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f2e:	61bb      	str	r3, [r7, #24]
 8006f30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	6979      	ldr	r1, [r7, #20]
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e6      	bne.n	8006f10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006f56:	bf00      	nop
 8006f58:	3754      	adds	r7, #84	; 0x54
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d101      	bne.n	8006f78 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e027      	b.n	8006fc8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2224      	movs	r2, #36	; 0x24
 8006f84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0201 	bic.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006fa6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e02d      	b.n	8007048 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2224      	movs	r2, #36	; 0x24
 8006ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 0201 	bic.w	r2, r2, #1
 8007012:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	430a      	orrs	r2, r1
 8007026:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f84f 	bl	80070cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2220      	movs	r2, #32
 800703a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007060:	2b01      	cmp	r3, #1
 8007062:	d101      	bne.n	8007068 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007064:	2302      	movs	r3, #2
 8007066:	e02d      	b.n	80070c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2224      	movs	r2, #36	; 0x24
 8007074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0201 	bic.w	r2, r2, #1
 800708e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f811 	bl	80070cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2220      	movs	r2, #32
 80070b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d108      	bne.n	80070ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070ec:	e031      	b.n	8007152 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070ee:	2308      	movs	r3, #8
 80070f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070f2:	2308      	movs	r3, #8
 80070f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	0e5b      	lsrs	r3, r3, #25
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	0f5b      	lsrs	r3, r3, #29
 800710e:	b2db      	uxtb	r3, r3
 8007110:	f003 0307 	and.w	r3, r3, #7
 8007114:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	7b3a      	ldrb	r2, [r7, #12]
 800711a:	4911      	ldr	r1, [pc, #68]	; (8007160 <UARTEx_SetNbDataToProcess+0x94>)
 800711c:	5c8a      	ldrb	r2, [r1, r2]
 800711e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007122:	7b3a      	ldrb	r2, [r7, #12]
 8007124:	490f      	ldr	r1, [pc, #60]	; (8007164 <UARTEx_SetNbDataToProcess+0x98>)
 8007126:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007128:	fb93 f3f2 	sdiv	r3, r3, r2
 800712c:	b29a      	uxth	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	7b7a      	ldrb	r2, [r7, #13]
 8007138:	4909      	ldr	r1, [pc, #36]	; (8007160 <UARTEx_SetNbDataToProcess+0x94>)
 800713a:	5c8a      	ldrb	r2, [r1, r2]
 800713c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007140:	7b7a      	ldrb	r2, [r7, #13]
 8007142:	4908      	ldr	r1, [pc, #32]	; (8007164 <UARTEx_SetNbDataToProcess+0x98>)
 8007144:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007146:	fb93 f3f2 	sdiv	r3, r3, r2
 800714a:	b29a      	uxth	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007152:	bf00      	nop
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	08009c50 	.word	0x08009c50
 8007164:	08009c58 	.word	0x08009c58

08007168 <__cvt>:
 8007168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800716c:	ec55 4b10 	vmov	r4, r5, d0
 8007170:	2d00      	cmp	r5, #0
 8007172:	460e      	mov	r6, r1
 8007174:	4619      	mov	r1, r3
 8007176:	462b      	mov	r3, r5
 8007178:	bfbb      	ittet	lt
 800717a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800717e:	461d      	movlt	r5, r3
 8007180:	2300      	movge	r3, #0
 8007182:	232d      	movlt	r3, #45	; 0x2d
 8007184:	700b      	strb	r3, [r1, #0]
 8007186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007188:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800718c:	4691      	mov	r9, r2
 800718e:	f023 0820 	bic.w	r8, r3, #32
 8007192:	bfbc      	itt	lt
 8007194:	4622      	movlt	r2, r4
 8007196:	4614      	movlt	r4, r2
 8007198:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800719c:	d005      	beq.n	80071aa <__cvt+0x42>
 800719e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071a2:	d100      	bne.n	80071a6 <__cvt+0x3e>
 80071a4:	3601      	adds	r6, #1
 80071a6:	2102      	movs	r1, #2
 80071a8:	e000      	b.n	80071ac <__cvt+0x44>
 80071aa:	2103      	movs	r1, #3
 80071ac:	ab03      	add	r3, sp, #12
 80071ae:	9301      	str	r3, [sp, #4]
 80071b0:	ab02      	add	r3, sp, #8
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	ec45 4b10 	vmov	d0, r4, r5
 80071b8:	4653      	mov	r3, sl
 80071ba:	4632      	mov	r2, r6
 80071bc:	f000 fe18 	bl	8007df0 <_dtoa_r>
 80071c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80071c4:	4607      	mov	r7, r0
 80071c6:	d102      	bne.n	80071ce <__cvt+0x66>
 80071c8:	f019 0f01 	tst.w	r9, #1
 80071cc:	d022      	beq.n	8007214 <__cvt+0xac>
 80071ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071d2:	eb07 0906 	add.w	r9, r7, r6
 80071d6:	d110      	bne.n	80071fa <__cvt+0x92>
 80071d8:	783b      	ldrb	r3, [r7, #0]
 80071da:	2b30      	cmp	r3, #48	; 0x30
 80071dc:	d10a      	bne.n	80071f4 <__cvt+0x8c>
 80071de:	2200      	movs	r2, #0
 80071e0:	2300      	movs	r3, #0
 80071e2:	4620      	mov	r0, r4
 80071e4:	4629      	mov	r1, r5
 80071e6:	f7f9 fc87 	bl	8000af8 <__aeabi_dcmpeq>
 80071ea:	b918      	cbnz	r0, 80071f4 <__cvt+0x8c>
 80071ec:	f1c6 0601 	rsb	r6, r6, #1
 80071f0:	f8ca 6000 	str.w	r6, [sl]
 80071f4:	f8da 3000 	ldr.w	r3, [sl]
 80071f8:	4499      	add	r9, r3
 80071fa:	2200      	movs	r2, #0
 80071fc:	2300      	movs	r3, #0
 80071fe:	4620      	mov	r0, r4
 8007200:	4629      	mov	r1, r5
 8007202:	f7f9 fc79 	bl	8000af8 <__aeabi_dcmpeq>
 8007206:	b108      	cbz	r0, 800720c <__cvt+0xa4>
 8007208:	f8cd 900c 	str.w	r9, [sp, #12]
 800720c:	2230      	movs	r2, #48	; 0x30
 800720e:	9b03      	ldr	r3, [sp, #12]
 8007210:	454b      	cmp	r3, r9
 8007212:	d307      	bcc.n	8007224 <__cvt+0xbc>
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007218:	1bdb      	subs	r3, r3, r7
 800721a:	4638      	mov	r0, r7
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	b004      	add	sp, #16
 8007220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007224:	1c59      	adds	r1, r3, #1
 8007226:	9103      	str	r1, [sp, #12]
 8007228:	701a      	strb	r2, [r3, #0]
 800722a:	e7f0      	b.n	800720e <__cvt+0xa6>

0800722c <__exponent>:
 800722c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800722e:	4603      	mov	r3, r0
 8007230:	2900      	cmp	r1, #0
 8007232:	bfb8      	it	lt
 8007234:	4249      	neglt	r1, r1
 8007236:	f803 2b02 	strb.w	r2, [r3], #2
 800723a:	bfb4      	ite	lt
 800723c:	222d      	movlt	r2, #45	; 0x2d
 800723e:	222b      	movge	r2, #43	; 0x2b
 8007240:	2909      	cmp	r1, #9
 8007242:	7042      	strb	r2, [r0, #1]
 8007244:	dd2a      	ble.n	800729c <__exponent+0x70>
 8007246:	f10d 0207 	add.w	r2, sp, #7
 800724a:	4617      	mov	r7, r2
 800724c:	260a      	movs	r6, #10
 800724e:	4694      	mov	ip, r2
 8007250:	fb91 f5f6 	sdiv	r5, r1, r6
 8007254:	fb06 1415 	mls	r4, r6, r5, r1
 8007258:	3430      	adds	r4, #48	; 0x30
 800725a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800725e:	460c      	mov	r4, r1
 8007260:	2c63      	cmp	r4, #99	; 0x63
 8007262:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007266:	4629      	mov	r1, r5
 8007268:	dcf1      	bgt.n	800724e <__exponent+0x22>
 800726a:	3130      	adds	r1, #48	; 0x30
 800726c:	f1ac 0402 	sub.w	r4, ip, #2
 8007270:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007274:	1c41      	adds	r1, r0, #1
 8007276:	4622      	mov	r2, r4
 8007278:	42ba      	cmp	r2, r7
 800727a:	d30a      	bcc.n	8007292 <__exponent+0x66>
 800727c:	f10d 0209 	add.w	r2, sp, #9
 8007280:	eba2 020c 	sub.w	r2, r2, ip
 8007284:	42bc      	cmp	r4, r7
 8007286:	bf88      	it	hi
 8007288:	2200      	movhi	r2, #0
 800728a:	4413      	add	r3, r2
 800728c:	1a18      	subs	r0, r3, r0
 800728e:	b003      	add	sp, #12
 8007290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007292:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007296:	f801 5f01 	strb.w	r5, [r1, #1]!
 800729a:	e7ed      	b.n	8007278 <__exponent+0x4c>
 800729c:	2330      	movs	r3, #48	; 0x30
 800729e:	3130      	adds	r1, #48	; 0x30
 80072a0:	7083      	strb	r3, [r0, #2]
 80072a2:	70c1      	strb	r1, [r0, #3]
 80072a4:	1d03      	adds	r3, r0, #4
 80072a6:	e7f1      	b.n	800728c <__exponent+0x60>

080072a8 <_printf_float>:
 80072a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ac:	ed2d 8b02 	vpush	{d8}
 80072b0:	b08d      	sub	sp, #52	; 0x34
 80072b2:	460c      	mov	r4, r1
 80072b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80072b8:	4616      	mov	r6, r2
 80072ba:	461f      	mov	r7, r3
 80072bc:	4605      	mov	r5, r0
 80072be:	f000 fcdf 	bl	8007c80 <_localeconv_r>
 80072c2:	f8d0 a000 	ldr.w	sl, [r0]
 80072c6:	4650      	mov	r0, sl
 80072c8:	f7f8 ffea 	bl	80002a0 <strlen>
 80072cc:	2300      	movs	r3, #0
 80072ce:	930a      	str	r3, [sp, #40]	; 0x28
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	f8d8 3000 	ldr.w	r3, [r8]
 80072d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80072dc:	3307      	adds	r3, #7
 80072de:	f023 0307 	bic.w	r3, r3, #7
 80072e2:	f103 0208 	add.w	r2, r3, #8
 80072e6:	f8c8 2000 	str.w	r2, [r8]
 80072ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072f2:	9307      	str	r3, [sp, #28]
 80072f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80072f8:	ee08 0a10 	vmov	s16, r0
 80072fc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007300:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007304:	4b9e      	ldr	r3, [pc, #632]	; (8007580 <_printf_float+0x2d8>)
 8007306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800730a:	f7f9 fc27 	bl	8000b5c <__aeabi_dcmpun>
 800730e:	bb88      	cbnz	r0, 8007374 <_printf_float+0xcc>
 8007310:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007314:	4b9a      	ldr	r3, [pc, #616]	; (8007580 <_printf_float+0x2d8>)
 8007316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800731a:	f7f9 fc01 	bl	8000b20 <__aeabi_dcmple>
 800731e:	bb48      	cbnz	r0, 8007374 <_printf_float+0xcc>
 8007320:	2200      	movs	r2, #0
 8007322:	2300      	movs	r3, #0
 8007324:	4640      	mov	r0, r8
 8007326:	4649      	mov	r1, r9
 8007328:	f7f9 fbf0 	bl	8000b0c <__aeabi_dcmplt>
 800732c:	b110      	cbz	r0, 8007334 <_printf_float+0x8c>
 800732e:	232d      	movs	r3, #45	; 0x2d
 8007330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007334:	4a93      	ldr	r2, [pc, #588]	; (8007584 <_printf_float+0x2dc>)
 8007336:	4b94      	ldr	r3, [pc, #592]	; (8007588 <_printf_float+0x2e0>)
 8007338:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800733c:	bf94      	ite	ls
 800733e:	4690      	movls	r8, r2
 8007340:	4698      	movhi	r8, r3
 8007342:	2303      	movs	r3, #3
 8007344:	6123      	str	r3, [r4, #16]
 8007346:	9b05      	ldr	r3, [sp, #20]
 8007348:	f023 0304 	bic.w	r3, r3, #4
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	f04f 0900 	mov.w	r9, #0
 8007352:	9700      	str	r7, [sp, #0]
 8007354:	4633      	mov	r3, r6
 8007356:	aa0b      	add	r2, sp, #44	; 0x2c
 8007358:	4621      	mov	r1, r4
 800735a:	4628      	mov	r0, r5
 800735c:	f000 f9da 	bl	8007714 <_printf_common>
 8007360:	3001      	adds	r0, #1
 8007362:	f040 8090 	bne.w	8007486 <_printf_float+0x1de>
 8007366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800736a:	b00d      	add	sp, #52	; 0x34
 800736c:	ecbd 8b02 	vpop	{d8}
 8007370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007374:	4642      	mov	r2, r8
 8007376:	464b      	mov	r3, r9
 8007378:	4640      	mov	r0, r8
 800737a:	4649      	mov	r1, r9
 800737c:	f7f9 fbee 	bl	8000b5c <__aeabi_dcmpun>
 8007380:	b140      	cbz	r0, 8007394 <_printf_float+0xec>
 8007382:	464b      	mov	r3, r9
 8007384:	2b00      	cmp	r3, #0
 8007386:	bfbc      	itt	lt
 8007388:	232d      	movlt	r3, #45	; 0x2d
 800738a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800738e:	4a7f      	ldr	r2, [pc, #508]	; (800758c <_printf_float+0x2e4>)
 8007390:	4b7f      	ldr	r3, [pc, #508]	; (8007590 <_printf_float+0x2e8>)
 8007392:	e7d1      	b.n	8007338 <_printf_float+0x90>
 8007394:	6863      	ldr	r3, [r4, #4]
 8007396:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800739a:	9206      	str	r2, [sp, #24]
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	d13f      	bne.n	8007420 <_printf_float+0x178>
 80073a0:	2306      	movs	r3, #6
 80073a2:	6063      	str	r3, [r4, #4]
 80073a4:	9b05      	ldr	r3, [sp, #20]
 80073a6:	6861      	ldr	r1, [r4, #4]
 80073a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80073ac:	2300      	movs	r3, #0
 80073ae:	9303      	str	r3, [sp, #12]
 80073b0:	ab0a      	add	r3, sp, #40	; 0x28
 80073b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80073b6:	ab09      	add	r3, sp, #36	; 0x24
 80073b8:	ec49 8b10 	vmov	d0, r8, r9
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	6022      	str	r2, [r4, #0]
 80073c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80073c4:	4628      	mov	r0, r5
 80073c6:	f7ff fecf 	bl	8007168 <__cvt>
 80073ca:	9b06      	ldr	r3, [sp, #24]
 80073cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073ce:	2b47      	cmp	r3, #71	; 0x47
 80073d0:	4680      	mov	r8, r0
 80073d2:	d108      	bne.n	80073e6 <_printf_float+0x13e>
 80073d4:	1cc8      	adds	r0, r1, #3
 80073d6:	db02      	blt.n	80073de <_printf_float+0x136>
 80073d8:	6863      	ldr	r3, [r4, #4]
 80073da:	4299      	cmp	r1, r3
 80073dc:	dd41      	ble.n	8007462 <_printf_float+0x1ba>
 80073de:	f1ab 0302 	sub.w	r3, fp, #2
 80073e2:	fa5f fb83 	uxtb.w	fp, r3
 80073e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073ea:	d820      	bhi.n	800742e <_printf_float+0x186>
 80073ec:	3901      	subs	r1, #1
 80073ee:	465a      	mov	r2, fp
 80073f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80073f4:	9109      	str	r1, [sp, #36]	; 0x24
 80073f6:	f7ff ff19 	bl	800722c <__exponent>
 80073fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073fc:	1813      	adds	r3, r2, r0
 80073fe:	2a01      	cmp	r2, #1
 8007400:	4681      	mov	r9, r0
 8007402:	6123      	str	r3, [r4, #16]
 8007404:	dc02      	bgt.n	800740c <_printf_float+0x164>
 8007406:	6822      	ldr	r2, [r4, #0]
 8007408:	07d2      	lsls	r2, r2, #31
 800740a:	d501      	bpl.n	8007410 <_printf_float+0x168>
 800740c:	3301      	adds	r3, #1
 800740e:	6123      	str	r3, [r4, #16]
 8007410:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007414:	2b00      	cmp	r3, #0
 8007416:	d09c      	beq.n	8007352 <_printf_float+0xaa>
 8007418:	232d      	movs	r3, #45	; 0x2d
 800741a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800741e:	e798      	b.n	8007352 <_printf_float+0xaa>
 8007420:	9a06      	ldr	r2, [sp, #24]
 8007422:	2a47      	cmp	r2, #71	; 0x47
 8007424:	d1be      	bne.n	80073a4 <_printf_float+0xfc>
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1bc      	bne.n	80073a4 <_printf_float+0xfc>
 800742a:	2301      	movs	r3, #1
 800742c:	e7b9      	b.n	80073a2 <_printf_float+0xfa>
 800742e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007432:	d118      	bne.n	8007466 <_printf_float+0x1be>
 8007434:	2900      	cmp	r1, #0
 8007436:	6863      	ldr	r3, [r4, #4]
 8007438:	dd0b      	ble.n	8007452 <_printf_float+0x1aa>
 800743a:	6121      	str	r1, [r4, #16]
 800743c:	b913      	cbnz	r3, 8007444 <_printf_float+0x19c>
 800743e:	6822      	ldr	r2, [r4, #0]
 8007440:	07d0      	lsls	r0, r2, #31
 8007442:	d502      	bpl.n	800744a <_printf_float+0x1a2>
 8007444:	3301      	adds	r3, #1
 8007446:	440b      	add	r3, r1
 8007448:	6123      	str	r3, [r4, #16]
 800744a:	65a1      	str	r1, [r4, #88]	; 0x58
 800744c:	f04f 0900 	mov.w	r9, #0
 8007450:	e7de      	b.n	8007410 <_printf_float+0x168>
 8007452:	b913      	cbnz	r3, 800745a <_printf_float+0x1b2>
 8007454:	6822      	ldr	r2, [r4, #0]
 8007456:	07d2      	lsls	r2, r2, #31
 8007458:	d501      	bpl.n	800745e <_printf_float+0x1b6>
 800745a:	3302      	adds	r3, #2
 800745c:	e7f4      	b.n	8007448 <_printf_float+0x1a0>
 800745e:	2301      	movs	r3, #1
 8007460:	e7f2      	b.n	8007448 <_printf_float+0x1a0>
 8007462:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007468:	4299      	cmp	r1, r3
 800746a:	db05      	blt.n	8007478 <_printf_float+0x1d0>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	6121      	str	r1, [r4, #16]
 8007470:	07d8      	lsls	r0, r3, #31
 8007472:	d5ea      	bpl.n	800744a <_printf_float+0x1a2>
 8007474:	1c4b      	adds	r3, r1, #1
 8007476:	e7e7      	b.n	8007448 <_printf_float+0x1a0>
 8007478:	2900      	cmp	r1, #0
 800747a:	bfd4      	ite	le
 800747c:	f1c1 0202 	rsble	r2, r1, #2
 8007480:	2201      	movgt	r2, #1
 8007482:	4413      	add	r3, r2
 8007484:	e7e0      	b.n	8007448 <_printf_float+0x1a0>
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	055a      	lsls	r2, r3, #21
 800748a:	d407      	bmi.n	800749c <_printf_float+0x1f4>
 800748c:	6923      	ldr	r3, [r4, #16]
 800748e:	4642      	mov	r2, r8
 8007490:	4631      	mov	r1, r6
 8007492:	4628      	mov	r0, r5
 8007494:	47b8      	blx	r7
 8007496:	3001      	adds	r0, #1
 8007498:	d12c      	bne.n	80074f4 <_printf_float+0x24c>
 800749a:	e764      	b.n	8007366 <_printf_float+0xbe>
 800749c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074a0:	f240 80e0 	bls.w	8007664 <_printf_float+0x3bc>
 80074a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074a8:	2200      	movs	r2, #0
 80074aa:	2300      	movs	r3, #0
 80074ac:	f7f9 fb24 	bl	8000af8 <__aeabi_dcmpeq>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d034      	beq.n	800751e <_printf_float+0x276>
 80074b4:	4a37      	ldr	r2, [pc, #220]	; (8007594 <_printf_float+0x2ec>)
 80074b6:	2301      	movs	r3, #1
 80074b8:	4631      	mov	r1, r6
 80074ba:	4628      	mov	r0, r5
 80074bc:	47b8      	blx	r7
 80074be:	3001      	adds	r0, #1
 80074c0:	f43f af51 	beq.w	8007366 <_printf_float+0xbe>
 80074c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074c8:	429a      	cmp	r2, r3
 80074ca:	db02      	blt.n	80074d2 <_printf_float+0x22a>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	07d8      	lsls	r0, r3, #31
 80074d0:	d510      	bpl.n	80074f4 <_printf_float+0x24c>
 80074d2:	ee18 3a10 	vmov	r3, s16
 80074d6:	4652      	mov	r2, sl
 80074d8:	4631      	mov	r1, r6
 80074da:	4628      	mov	r0, r5
 80074dc:	47b8      	blx	r7
 80074de:	3001      	adds	r0, #1
 80074e0:	f43f af41 	beq.w	8007366 <_printf_float+0xbe>
 80074e4:	f04f 0800 	mov.w	r8, #0
 80074e8:	f104 091a 	add.w	r9, r4, #26
 80074ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ee:	3b01      	subs	r3, #1
 80074f0:	4543      	cmp	r3, r8
 80074f2:	dc09      	bgt.n	8007508 <_printf_float+0x260>
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	079b      	lsls	r3, r3, #30
 80074f8:	f100 8107 	bmi.w	800770a <_printf_float+0x462>
 80074fc:	68e0      	ldr	r0, [r4, #12]
 80074fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007500:	4298      	cmp	r0, r3
 8007502:	bfb8      	it	lt
 8007504:	4618      	movlt	r0, r3
 8007506:	e730      	b.n	800736a <_printf_float+0xc2>
 8007508:	2301      	movs	r3, #1
 800750a:	464a      	mov	r2, r9
 800750c:	4631      	mov	r1, r6
 800750e:	4628      	mov	r0, r5
 8007510:	47b8      	blx	r7
 8007512:	3001      	adds	r0, #1
 8007514:	f43f af27 	beq.w	8007366 <_printf_float+0xbe>
 8007518:	f108 0801 	add.w	r8, r8, #1
 800751c:	e7e6      	b.n	80074ec <_printf_float+0x244>
 800751e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007520:	2b00      	cmp	r3, #0
 8007522:	dc39      	bgt.n	8007598 <_printf_float+0x2f0>
 8007524:	4a1b      	ldr	r2, [pc, #108]	; (8007594 <_printf_float+0x2ec>)
 8007526:	2301      	movs	r3, #1
 8007528:	4631      	mov	r1, r6
 800752a:	4628      	mov	r0, r5
 800752c:	47b8      	blx	r7
 800752e:	3001      	adds	r0, #1
 8007530:	f43f af19 	beq.w	8007366 <_printf_float+0xbe>
 8007534:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007538:	4313      	orrs	r3, r2
 800753a:	d102      	bne.n	8007542 <_printf_float+0x29a>
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	07d9      	lsls	r1, r3, #31
 8007540:	d5d8      	bpl.n	80074f4 <_printf_float+0x24c>
 8007542:	ee18 3a10 	vmov	r3, s16
 8007546:	4652      	mov	r2, sl
 8007548:	4631      	mov	r1, r6
 800754a:	4628      	mov	r0, r5
 800754c:	47b8      	blx	r7
 800754e:	3001      	adds	r0, #1
 8007550:	f43f af09 	beq.w	8007366 <_printf_float+0xbe>
 8007554:	f04f 0900 	mov.w	r9, #0
 8007558:	f104 0a1a 	add.w	sl, r4, #26
 800755c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755e:	425b      	negs	r3, r3
 8007560:	454b      	cmp	r3, r9
 8007562:	dc01      	bgt.n	8007568 <_printf_float+0x2c0>
 8007564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007566:	e792      	b.n	800748e <_printf_float+0x1e6>
 8007568:	2301      	movs	r3, #1
 800756a:	4652      	mov	r2, sl
 800756c:	4631      	mov	r1, r6
 800756e:	4628      	mov	r0, r5
 8007570:	47b8      	blx	r7
 8007572:	3001      	adds	r0, #1
 8007574:	f43f aef7 	beq.w	8007366 <_printf_float+0xbe>
 8007578:	f109 0901 	add.w	r9, r9, #1
 800757c:	e7ee      	b.n	800755c <_printf_float+0x2b4>
 800757e:	bf00      	nop
 8007580:	7fefffff 	.word	0x7fefffff
 8007584:	08009c60 	.word	0x08009c60
 8007588:	08009c64 	.word	0x08009c64
 800758c:	08009c68 	.word	0x08009c68
 8007590:	08009c6c 	.word	0x08009c6c
 8007594:	08009c70 	.word	0x08009c70
 8007598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800759a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800759c:	429a      	cmp	r2, r3
 800759e:	bfa8      	it	ge
 80075a0:	461a      	movge	r2, r3
 80075a2:	2a00      	cmp	r2, #0
 80075a4:	4691      	mov	r9, r2
 80075a6:	dc37      	bgt.n	8007618 <_printf_float+0x370>
 80075a8:	f04f 0b00 	mov.w	fp, #0
 80075ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075b0:	f104 021a 	add.w	r2, r4, #26
 80075b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075b6:	9305      	str	r3, [sp, #20]
 80075b8:	eba3 0309 	sub.w	r3, r3, r9
 80075bc:	455b      	cmp	r3, fp
 80075be:	dc33      	bgt.n	8007628 <_printf_float+0x380>
 80075c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075c4:	429a      	cmp	r2, r3
 80075c6:	db3b      	blt.n	8007640 <_printf_float+0x398>
 80075c8:	6823      	ldr	r3, [r4, #0]
 80075ca:	07da      	lsls	r2, r3, #31
 80075cc:	d438      	bmi.n	8007640 <_printf_float+0x398>
 80075ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80075d2:	eba2 0903 	sub.w	r9, r2, r3
 80075d6:	9b05      	ldr	r3, [sp, #20]
 80075d8:	1ad2      	subs	r2, r2, r3
 80075da:	4591      	cmp	r9, r2
 80075dc:	bfa8      	it	ge
 80075de:	4691      	movge	r9, r2
 80075e0:	f1b9 0f00 	cmp.w	r9, #0
 80075e4:	dc35      	bgt.n	8007652 <_printf_float+0x3aa>
 80075e6:	f04f 0800 	mov.w	r8, #0
 80075ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075ee:	f104 0a1a 	add.w	sl, r4, #26
 80075f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075f6:	1a9b      	subs	r3, r3, r2
 80075f8:	eba3 0309 	sub.w	r3, r3, r9
 80075fc:	4543      	cmp	r3, r8
 80075fe:	f77f af79 	ble.w	80074f4 <_printf_float+0x24c>
 8007602:	2301      	movs	r3, #1
 8007604:	4652      	mov	r2, sl
 8007606:	4631      	mov	r1, r6
 8007608:	4628      	mov	r0, r5
 800760a:	47b8      	blx	r7
 800760c:	3001      	adds	r0, #1
 800760e:	f43f aeaa 	beq.w	8007366 <_printf_float+0xbe>
 8007612:	f108 0801 	add.w	r8, r8, #1
 8007616:	e7ec      	b.n	80075f2 <_printf_float+0x34a>
 8007618:	4613      	mov	r3, r2
 800761a:	4631      	mov	r1, r6
 800761c:	4642      	mov	r2, r8
 800761e:	4628      	mov	r0, r5
 8007620:	47b8      	blx	r7
 8007622:	3001      	adds	r0, #1
 8007624:	d1c0      	bne.n	80075a8 <_printf_float+0x300>
 8007626:	e69e      	b.n	8007366 <_printf_float+0xbe>
 8007628:	2301      	movs	r3, #1
 800762a:	4631      	mov	r1, r6
 800762c:	4628      	mov	r0, r5
 800762e:	9205      	str	r2, [sp, #20]
 8007630:	47b8      	blx	r7
 8007632:	3001      	adds	r0, #1
 8007634:	f43f ae97 	beq.w	8007366 <_printf_float+0xbe>
 8007638:	9a05      	ldr	r2, [sp, #20]
 800763a:	f10b 0b01 	add.w	fp, fp, #1
 800763e:	e7b9      	b.n	80075b4 <_printf_float+0x30c>
 8007640:	ee18 3a10 	vmov	r3, s16
 8007644:	4652      	mov	r2, sl
 8007646:	4631      	mov	r1, r6
 8007648:	4628      	mov	r0, r5
 800764a:	47b8      	blx	r7
 800764c:	3001      	adds	r0, #1
 800764e:	d1be      	bne.n	80075ce <_printf_float+0x326>
 8007650:	e689      	b.n	8007366 <_printf_float+0xbe>
 8007652:	9a05      	ldr	r2, [sp, #20]
 8007654:	464b      	mov	r3, r9
 8007656:	4442      	add	r2, r8
 8007658:	4631      	mov	r1, r6
 800765a:	4628      	mov	r0, r5
 800765c:	47b8      	blx	r7
 800765e:	3001      	adds	r0, #1
 8007660:	d1c1      	bne.n	80075e6 <_printf_float+0x33e>
 8007662:	e680      	b.n	8007366 <_printf_float+0xbe>
 8007664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007666:	2a01      	cmp	r2, #1
 8007668:	dc01      	bgt.n	800766e <_printf_float+0x3c6>
 800766a:	07db      	lsls	r3, r3, #31
 800766c:	d53a      	bpl.n	80076e4 <_printf_float+0x43c>
 800766e:	2301      	movs	r3, #1
 8007670:	4642      	mov	r2, r8
 8007672:	4631      	mov	r1, r6
 8007674:	4628      	mov	r0, r5
 8007676:	47b8      	blx	r7
 8007678:	3001      	adds	r0, #1
 800767a:	f43f ae74 	beq.w	8007366 <_printf_float+0xbe>
 800767e:	ee18 3a10 	vmov	r3, s16
 8007682:	4652      	mov	r2, sl
 8007684:	4631      	mov	r1, r6
 8007686:	4628      	mov	r0, r5
 8007688:	47b8      	blx	r7
 800768a:	3001      	adds	r0, #1
 800768c:	f43f ae6b 	beq.w	8007366 <_printf_float+0xbe>
 8007690:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007694:	2200      	movs	r2, #0
 8007696:	2300      	movs	r3, #0
 8007698:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800769c:	f7f9 fa2c 	bl	8000af8 <__aeabi_dcmpeq>
 80076a0:	b9d8      	cbnz	r0, 80076da <_printf_float+0x432>
 80076a2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80076a6:	f108 0201 	add.w	r2, r8, #1
 80076aa:	4631      	mov	r1, r6
 80076ac:	4628      	mov	r0, r5
 80076ae:	47b8      	blx	r7
 80076b0:	3001      	adds	r0, #1
 80076b2:	d10e      	bne.n	80076d2 <_printf_float+0x42a>
 80076b4:	e657      	b.n	8007366 <_printf_float+0xbe>
 80076b6:	2301      	movs	r3, #1
 80076b8:	4652      	mov	r2, sl
 80076ba:	4631      	mov	r1, r6
 80076bc:	4628      	mov	r0, r5
 80076be:	47b8      	blx	r7
 80076c0:	3001      	adds	r0, #1
 80076c2:	f43f ae50 	beq.w	8007366 <_printf_float+0xbe>
 80076c6:	f108 0801 	add.w	r8, r8, #1
 80076ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076cc:	3b01      	subs	r3, #1
 80076ce:	4543      	cmp	r3, r8
 80076d0:	dcf1      	bgt.n	80076b6 <_printf_float+0x40e>
 80076d2:	464b      	mov	r3, r9
 80076d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80076d8:	e6da      	b.n	8007490 <_printf_float+0x1e8>
 80076da:	f04f 0800 	mov.w	r8, #0
 80076de:	f104 0a1a 	add.w	sl, r4, #26
 80076e2:	e7f2      	b.n	80076ca <_printf_float+0x422>
 80076e4:	2301      	movs	r3, #1
 80076e6:	4642      	mov	r2, r8
 80076e8:	e7df      	b.n	80076aa <_printf_float+0x402>
 80076ea:	2301      	movs	r3, #1
 80076ec:	464a      	mov	r2, r9
 80076ee:	4631      	mov	r1, r6
 80076f0:	4628      	mov	r0, r5
 80076f2:	47b8      	blx	r7
 80076f4:	3001      	adds	r0, #1
 80076f6:	f43f ae36 	beq.w	8007366 <_printf_float+0xbe>
 80076fa:	f108 0801 	add.w	r8, r8, #1
 80076fe:	68e3      	ldr	r3, [r4, #12]
 8007700:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007702:	1a5b      	subs	r3, r3, r1
 8007704:	4543      	cmp	r3, r8
 8007706:	dcf0      	bgt.n	80076ea <_printf_float+0x442>
 8007708:	e6f8      	b.n	80074fc <_printf_float+0x254>
 800770a:	f04f 0800 	mov.w	r8, #0
 800770e:	f104 0919 	add.w	r9, r4, #25
 8007712:	e7f4      	b.n	80076fe <_printf_float+0x456>

08007714 <_printf_common>:
 8007714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007718:	4616      	mov	r6, r2
 800771a:	4699      	mov	r9, r3
 800771c:	688a      	ldr	r2, [r1, #8]
 800771e:	690b      	ldr	r3, [r1, #16]
 8007720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007724:	4293      	cmp	r3, r2
 8007726:	bfb8      	it	lt
 8007728:	4613      	movlt	r3, r2
 800772a:	6033      	str	r3, [r6, #0]
 800772c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007730:	4607      	mov	r7, r0
 8007732:	460c      	mov	r4, r1
 8007734:	b10a      	cbz	r2, 800773a <_printf_common+0x26>
 8007736:	3301      	adds	r3, #1
 8007738:	6033      	str	r3, [r6, #0]
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	0699      	lsls	r1, r3, #26
 800773e:	bf42      	ittt	mi
 8007740:	6833      	ldrmi	r3, [r6, #0]
 8007742:	3302      	addmi	r3, #2
 8007744:	6033      	strmi	r3, [r6, #0]
 8007746:	6825      	ldr	r5, [r4, #0]
 8007748:	f015 0506 	ands.w	r5, r5, #6
 800774c:	d106      	bne.n	800775c <_printf_common+0x48>
 800774e:	f104 0a19 	add.w	sl, r4, #25
 8007752:	68e3      	ldr	r3, [r4, #12]
 8007754:	6832      	ldr	r2, [r6, #0]
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	42ab      	cmp	r3, r5
 800775a:	dc26      	bgt.n	80077aa <_printf_common+0x96>
 800775c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007760:	1e13      	subs	r3, r2, #0
 8007762:	6822      	ldr	r2, [r4, #0]
 8007764:	bf18      	it	ne
 8007766:	2301      	movne	r3, #1
 8007768:	0692      	lsls	r2, r2, #26
 800776a:	d42b      	bmi.n	80077c4 <_printf_common+0xb0>
 800776c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007770:	4649      	mov	r1, r9
 8007772:	4638      	mov	r0, r7
 8007774:	47c0      	blx	r8
 8007776:	3001      	adds	r0, #1
 8007778:	d01e      	beq.n	80077b8 <_printf_common+0xa4>
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	6922      	ldr	r2, [r4, #16]
 800777e:	f003 0306 	and.w	r3, r3, #6
 8007782:	2b04      	cmp	r3, #4
 8007784:	bf02      	ittt	eq
 8007786:	68e5      	ldreq	r5, [r4, #12]
 8007788:	6833      	ldreq	r3, [r6, #0]
 800778a:	1aed      	subeq	r5, r5, r3
 800778c:	68a3      	ldr	r3, [r4, #8]
 800778e:	bf0c      	ite	eq
 8007790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007794:	2500      	movne	r5, #0
 8007796:	4293      	cmp	r3, r2
 8007798:	bfc4      	itt	gt
 800779a:	1a9b      	subgt	r3, r3, r2
 800779c:	18ed      	addgt	r5, r5, r3
 800779e:	2600      	movs	r6, #0
 80077a0:	341a      	adds	r4, #26
 80077a2:	42b5      	cmp	r5, r6
 80077a4:	d11a      	bne.n	80077dc <_printf_common+0xc8>
 80077a6:	2000      	movs	r0, #0
 80077a8:	e008      	b.n	80077bc <_printf_common+0xa8>
 80077aa:	2301      	movs	r3, #1
 80077ac:	4652      	mov	r2, sl
 80077ae:	4649      	mov	r1, r9
 80077b0:	4638      	mov	r0, r7
 80077b2:	47c0      	blx	r8
 80077b4:	3001      	adds	r0, #1
 80077b6:	d103      	bne.n	80077c0 <_printf_common+0xac>
 80077b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c0:	3501      	adds	r5, #1
 80077c2:	e7c6      	b.n	8007752 <_printf_common+0x3e>
 80077c4:	18e1      	adds	r1, r4, r3
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	2030      	movs	r0, #48	; 0x30
 80077ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077ce:	4422      	add	r2, r4
 80077d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077d8:	3302      	adds	r3, #2
 80077da:	e7c7      	b.n	800776c <_printf_common+0x58>
 80077dc:	2301      	movs	r3, #1
 80077de:	4622      	mov	r2, r4
 80077e0:	4649      	mov	r1, r9
 80077e2:	4638      	mov	r0, r7
 80077e4:	47c0      	blx	r8
 80077e6:	3001      	adds	r0, #1
 80077e8:	d0e6      	beq.n	80077b8 <_printf_common+0xa4>
 80077ea:	3601      	adds	r6, #1
 80077ec:	e7d9      	b.n	80077a2 <_printf_common+0x8e>
	...

080077f0 <_printf_i>:
 80077f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077f4:	7e0f      	ldrb	r7, [r1, #24]
 80077f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077f8:	2f78      	cmp	r7, #120	; 0x78
 80077fa:	4691      	mov	r9, r2
 80077fc:	4680      	mov	r8, r0
 80077fe:	460c      	mov	r4, r1
 8007800:	469a      	mov	sl, r3
 8007802:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007806:	d807      	bhi.n	8007818 <_printf_i+0x28>
 8007808:	2f62      	cmp	r7, #98	; 0x62
 800780a:	d80a      	bhi.n	8007822 <_printf_i+0x32>
 800780c:	2f00      	cmp	r7, #0
 800780e:	f000 80d4 	beq.w	80079ba <_printf_i+0x1ca>
 8007812:	2f58      	cmp	r7, #88	; 0x58
 8007814:	f000 80c0 	beq.w	8007998 <_printf_i+0x1a8>
 8007818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800781c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007820:	e03a      	b.n	8007898 <_printf_i+0xa8>
 8007822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007826:	2b15      	cmp	r3, #21
 8007828:	d8f6      	bhi.n	8007818 <_printf_i+0x28>
 800782a:	a101      	add	r1, pc, #4	; (adr r1, 8007830 <_printf_i+0x40>)
 800782c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007830:	08007889 	.word	0x08007889
 8007834:	0800789d 	.word	0x0800789d
 8007838:	08007819 	.word	0x08007819
 800783c:	08007819 	.word	0x08007819
 8007840:	08007819 	.word	0x08007819
 8007844:	08007819 	.word	0x08007819
 8007848:	0800789d 	.word	0x0800789d
 800784c:	08007819 	.word	0x08007819
 8007850:	08007819 	.word	0x08007819
 8007854:	08007819 	.word	0x08007819
 8007858:	08007819 	.word	0x08007819
 800785c:	080079a1 	.word	0x080079a1
 8007860:	080078c9 	.word	0x080078c9
 8007864:	0800795b 	.word	0x0800795b
 8007868:	08007819 	.word	0x08007819
 800786c:	08007819 	.word	0x08007819
 8007870:	080079c3 	.word	0x080079c3
 8007874:	08007819 	.word	0x08007819
 8007878:	080078c9 	.word	0x080078c9
 800787c:	08007819 	.word	0x08007819
 8007880:	08007819 	.word	0x08007819
 8007884:	08007963 	.word	0x08007963
 8007888:	682b      	ldr	r3, [r5, #0]
 800788a:	1d1a      	adds	r2, r3, #4
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	602a      	str	r2, [r5, #0]
 8007890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007898:	2301      	movs	r3, #1
 800789a:	e09f      	b.n	80079dc <_printf_i+0x1ec>
 800789c:	6820      	ldr	r0, [r4, #0]
 800789e:	682b      	ldr	r3, [r5, #0]
 80078a0:	0607      	lsls	r7, r0, #24
 80078a2:	f103 0104 	add.w	r1, r3, #4
 80078a6:	6029      	str	r1, [r5, #0]
 80078a8:	d501      	bpl.n	80078ae <_printf_i+0xbe>
 80078aa:	681e      	ldr	r6, [r3, #0]
 80078ac:	e003      	b.n	80078b6 <_printf_i+0xc6>
 80078ae:	0646      	lsls	r6, r0, #25
 80078b0:	d5fb      	bpl.n	80078aa <_printf_i+0xba>
 80078b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80078b6:	2e00      	cmp	r6, #0
 80078b8:	da03      	bge.n	80078c2 <_printf_i+0xd2>
 80078ba:	232d      	movs	r3, #45	; 0x2d
 80078bc:	4276      	negs	r6, r6
 80078be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078c2:	485a      	ldr	r0, [pc, #360]	; (8007a2c <_printf_i+0x23c>)
 80078c4:	230a      	movs	r3, #10
 80078c6:	e012      	b.n	80078ee <_printf_i+0xfe>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	6820      	ldr	r0, [r4, #0]
 80078cc:	1d19      	adds	r1, r3, #4
 80078ce:	6029      	str	r1, [r5, #0]
 80078d0:	0605      	lsls	r5, r0, #24
 80078d2:	d501      	bpl.n	80078d8 <_printf_i+0xe8>
 80078d4:	681e      	ldr	r6, [r3, #0]
 80078d6:	e002      	b.n	80078de <_printf_i+0xee>
 80078d8:	0641      	lsls	r1, r0, #25
 80078da:	d5fb      	bpl.n	80078d4 <_printf_i+0xe4>
 80078dc:	881e      	ldrh	r6, [r3, #0]
 80078de:	4853      	ldr	r0, [pc, #332]	; (8007a2c <_printf_i+0x23c>)
 80078e0:	2f6f      	cmp	r7, #111	; 0x6f
 80078e2:	bf0c      	ite	eq
 80078e4:	2308      	moveq	r3, #8
 80078e6:	230a      	movne	r3, #10
 80078e8:	2100      	movs	r1, #0
 80078ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078ee:	6865      	ldr	r5, [r4, #4]
 80078f0:	60a5      	str	r5, [r4, #8]
 80078f2:	2d00      	cmp	r5, #0
 80078f4:	bfa2      	ittt	ge
 80078f6:	6821      	ldrge	r1, [r4, #0]
 80078f8:	f021 0104 	bicge.w	r1, r1, #4
 80078fc:	6021      	strge	r1, [r4, #0]
 80078fe:	b90e      	cbnz	r6, 8007904 <_printf_i+0x114>
 8007900:	2d00      	cmp	r5, #0
 8007902:	d04b      	beq.n	800799c <_printf_i+0x1ac>
 8007904:	4615      	mov	r5, r2
 8007906:	fbb6 f1f3 	udiv	r1, r6, r3
 800790a:	fb03 6711 	mls	r7, r3, r1, r6
 800790e:	5dc7      	ldrb	r7, [r0, r7]
 8007910:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007914:	4637      	mov	r7, r6
 8007916:	42bb      	cmp	r3, r7
 8007918:	460e      	mov	r6, r1
 800791a:	d9f4      	bls.n	8007906 <_printf_i+0x116>
 800791c:	2b08      	cmp	r3, #8
 800791e:	d10b      	bne.n	8007938 <_printf_i+0x148>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	07de      	lsls	r6, r3, #31
 8007924:	d508      	bpl.n	8007938 <_printf_i+0x148>
 8007926:	6923      	ldr	r3, [r4, #16]
 8007928:	6861      	ldr	r1, [r4, #4]
 800792a:	4299      	cmp	r1, r3
 800792c:	bfde      	ittt	le
 800792e:	2330      	movle	r3, #48	; 0x30
 8007930:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007934:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007938:	1b52      	subs	r2, r2, r5
 800793a:	6122      	str	r2, [r4, #16]
 800793c:	f8cd a000 	str.w	sl, [sp]
 8007940:	464b      	mov	r3, r9
 8007942:	aa03      	add	r2, sp, #12
 8007944:	4621      	mov	r1, r4
 8007946:	4640      	mov	r0, r8
 8007948:	f7ff fee4 	bl	8007714 <_printf_common>
 800794c:	3001      	adds	r0, #1
 800794e:	d14a      	bne.n	80079e6 <_printf_i+0x1f6>
 8007950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007954:	b004      	add	sp, #16
 8007956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	f043 0320 	orr.w	r3, r3, #32
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	4833      	ldr	r0, [pc, #204]	; (8007a30 <_printf_i+0x240>)
 8007964:	2778      	movs	r7, #120	; 0x78
 8007966:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	6829      	ldr	r1, [r5, #0]
 800796e:	061f      	lsls	r7, r3, #24
 8007970:	f851 6b04 	ldr.w	r6, [r1], #4
 8007974:	d402      	bmi.n	800797c <_printf_i+0x18c>
 8007976:	065f      	lsls	r7, r3, #25
 8007978:	bf48      	it	mi
 800797a:	b2b6      	uxthmi	r6, r6
 800797c:	07df      	lsls	r7, r3, #31
 800797e:	bf48      	it	mi
 8007980:	f043 0320 	orrmi.w	r3, r3, #32
 8007984:	6029      	str	r1, [r5, #0]
 8007986:	bf48      	it	mi
 8007988:	6023      	strmi	r3, [r4, #0]
 800798a:	b91e      	cbnz	r6, 8007994 <_printf_i+0x1a4>
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	f023 0320 	bic.w	r3, r3, #32
 8007992:	6023      	str	r3, [r4, #0]
 8007994:	2310      	movs	r3, #16
 8007996:	e7a7      	b.n	80078e8 <_printf_i+0xf8>
 8007998:	4824      	ldr	r0, [pc, #144]	; (8007a2c <_printf_i+0x23c>)
 800799a:	e7e4      	b.n	8007966 <_printf_i+0x176>
 800799c:	4615      	mov	r5, r2
 800799e:	e7bd      	b.n	800791c <_printf_i+0x12c>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	6826      	ldr	r6, [r4, #0]
 80079a4:	6961      	ldr	r1, [r4, #20]
 80079a6:	1d18      	adds	r0, r3, #4
 80079a8:	6028      	str	r0, [r5, #0]
 80079aa:	0635      	lsls	r5, r6, #24
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	d501      	bpl.n	80079b4 <_printf_i+0x1c4>
 80079b0:	6019      	str	r1, [r3, #0]
 80079b2:	e002      	b.n	80079ba <_printf_i+0x1ca>
 80079b4:	0670      	lsls	r0, r6, #25
 80079b6:	d5fb      	bpl.n	80079b0 <_printf_i+0x1c0>
 80079b8:	8019      	strh	r1, [r3, #0]
 80079ba:	2300      	movs	r3, #0
 80079bc:	6123      	str	r3, [r4, #16]
 80079be:	4615      	mov	r5, r2
 80079c0:	e7bc      	b.n	800793c <_printf_i+0x14c>
 80079c2:	682b      	ldr	r3, [r5, #0]
 80079c4:	1d1a      	adds	r2, r3, #4
 80079c6:	602a      	str	r2, [r5, #0]
 80079c8:	681d      	ldr	r5, [r3, #0]
 80079ca:	6862      	ldr	r2, [r4, #4]
 80079cc:	2100      	movs	r1, #0
 80079ce:	4628      	mov	r0, r5
 80079d0:	f7f8 fc16 	bl	8000200 <memchr>
 80079d4:	b108      	cbz	r0, 80079da <_printf_i+0x1ea>
 80079d6:	1b40      	subs	r0, r0, r5
 80079d8:	6060      	str	r0, [r4, #4]
 80079da:	6863      	ldr	r3, [r4, #4]
 80079dc:	6123      	str	r3, [r4, #16]
 80079de:	2300      	movs	r3, #0
 80079e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e4:	e7aa      	b.n	800793c <_printf_i+0x14c>
 80079e6:	6923      	ldr	r3, [r4, #16]
 80079e8:	462a      	mov	r2, r5
 80079ea:	4649      	mov	r1, r9
 80079ec:	4640      	mov	r0, r8
 80079ee:	47d0      	blx	sl
 80079f0:	3001      	adds	r0, #1
 80079f2:	d0ad      	beq.n	8007950 <_printf_i+0x160>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	079b      	lsls	r3, r3, #30
 80079f8:	d413      	bmi.n	8007a22 <_printf_i+0x232>
 80079fa:	68e0      	ldr	r0, [r4, #12]
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	4298      	cmp	r0, r3
 8007a00:	bfb8      	it	lt
 8007a02:	4618      	movlt	r0, r3
 8007a04:	e7a6      	b.n	8007954 <_printf_i+0x164>
 8007a06:	2301      	movs	r3, #1
 8007a08:	4632      	mov	r2, r6
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	47d0      	blx	sl
 8007a10:	3001      	adds	r0, #1
 8007a12:	d09d      	beq.n	8007950 <_printf_i+0x160>
 8007a14:	3501      	adds	r5, #1
 8007a16:	68e3      	ldr	r3, [r4, #12]
 8007a18:	9903      	ldr	r1, [sp, #12]
 8007a1a:	1a5b      	subs	r3, r3, r1
 8007a1c:	42ab      	cmp	r3, r5
 8007a1e:	dcf2      	bgt.n	8007a06 <_printf_i+0x216>
 8007a20:	e7eb      	b.n	80079fa <_printf_i+0x20a>
 8007a22:	2500      	movs	r5, #0
 8007a24:	f104 0619 	add.w	r6, r4, #25
 8007a28:	e7f5      	b.n	8007a16 <_printf_i+0x226>
 8007a2a:	bf00      	nop
 8007a2c:	08009c72 	.word	0x08009c72
 8007a30:	08009c83 	.word	0x08009c83

08007a34 <std>:
 8007a34:	2300      	movs	r3, #0
 8007a36:	b510      	push	{r4, lr}
 8007a38:	4604      	mov	r4, r0
 8007a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8007a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a42:	6083      	str	r3, [r0, #8]
 8007a44:	8181      	strh	r1, [r0, #12]
 8007a46:	6643      	str	r3, [r0, #100]	; 0x64
 8007a48:	81c2      	strh	r2, [r0, #14]
 8007a4a:	6183      	str	r3, [r0, #24]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	2208      	movs	r2, #8
 8007a50:	305c      	adds	r0, #92	; 0x5c
 8007a52:	f000 f90d 	bl	8007c70 <memset>
 8007a56:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <std+0x38>)
 8007a58:	6263      	str	r3, [r4, #36]	; 0x24
 8007a5a:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <std+0x3c>)
 8007a5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a5e:	4b05      	ldr	r3, [pc, #20]	; (8007a74 <std+0x40>)
 8007a60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a62:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <std+0x44>)
 8007a64:	6224      	str	r4, [r4, #32]
 8007a66:	6323      	str	r3, [r4, #48]	; 0x30
 8007a68:	bd10      	pop	{r4, pc}
 8007a6a:	bf00      	nop
 8007a6c:	08009619 	.word	0x08009619
 8007a70:	0800963b 	.word	0x0800963b
 8007a74:	08009673 	.word	0x08009673
 8007a78:	08009697 	.word	0x08009697

08007a7c <stdio_exit_handler>:
 8007a7c:	4a02      	ldr	r2, [pc, #8]	; (8007a88 <stdio_exit_handler+0xc>)
 8007a7e:	4903      	ldr	r1, [pc, #12]	; (8007a8c <stdio_exit_handler+0x10>)
 8007a80:	4803      	ldr	r0, [pc, #12]	; (8007a90 <stdio_exit_handler+0x14>)
 8007a82:	f000 b869 	b.w	8007b58 <_fwalk_sglue>
 8007a86:	bf00      	nop
 8007a88:	20000010 	.word	0x20000010
 8007a8c:	08008eb9 	.word	0x08008eb9
 8007a90:	2000001c 	.word	0x2000001c

08007a94 <cleanup_stdio>:
 8007a94:	6841      	ldr	r1, [r0, #4]
 8007a96:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <cleanup_stdio+0x34>)
 8007a98:	4299      	cmp	r1, r3
 8007a9a:	b510      	push	{r4, lr}
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	d001      	beq.n	8007aa4 <cleanup_stdio+0x10>
 8007aa0:	f001 fa0a 	bl	8008eb8 <_fflush_r>
 8007aa4:	68a1      	ldr	r1, [r4, #8]
 8007aa6:	4b09      	ldr	r3, [pc, #36]	; (8007acc <cleanup_stdio+0x38>)
 8007aa8:	4299      	cmp	r1, r3
 8007aaa:	d002      	beq.n	8007ab2 <cleanup_stdio+0x1e>
 8007aac:	4620      	mov	r0, r4
 8007aae:	f001 fa03 	bl	8008eb8 <_fflush_r>
 8007ab2:	68e1      	ldr	r1, [r4, #12]
 8007ab4:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <cleanup_stdio+0x3c>)
 8007ab6:	4299      	cmp	r1, r3
 8007ab8:	d004      	beq.n	8007ac4 <cleanup_stdio+0x30>
 8007aba:	4620      	mov	r0, r4
 8007abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ac0:	f001 b9fa 	b.w	8008eb8 <_fflush_r>
 8007ac4:	bd10      	pop	{r4, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20000474 	.word	0x20000474
 8007acc:	200004dc 	.word	0x200004dc
 8007ad0:	20000544 	.word	0x20000544

08007ad4 <global_stdio_init.part.0>:
 8007ad4:	b510      	push	{r4, lr}
 8007ad6:	4b0b      	ldr	r3, [pc, #44]	; (8007b04 <global_stdio_init.part.0+0x30>)
 8007ad8:	4c0b      	ldr	r4, [pc, #44]	; (8007b08 <global_stdio_init.part.0+0x34>)
 8007ada:	4a0c      	ldr	r2, [pc, #48]	; (8007b0c <global_stdio_init.part.0+0x38>)
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	4620      	mov	r0, r4
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2104      	movs	r1, #4
 8007ae4:	f7ff ffa6 	bl	8007a34 <std>
 8007ae8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007aec:	2201      	movs	r2, #1
 8007aee:	2109      	movs	r1, #9
 8007af0:	f7ff ffa0 	bl	8007a34 <std>
 8007af4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007af8:	2202      	movs	r2, #2
 8007afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007afe:	2112      	movs	r1, #18
 8007b00:	f7ff bf98 	b.w	8007a34 <std>
 8007b04:	200005ac 	.word	0x200005ac
 8007b08:	20000474 	.word	0x20000474
 8007b0c:	08007a7d 	.word	0x08007a7d

08007b10 <__sfp_lock_acquire>:
 8007b10:	4801      	ldr	r0, [pc, #4]	; (8007b18 <__sfp_lock_acquire+0x8>)
 8007b12:	f000 b8e3 	b.w	8007cdc <__retarget_lock_acquire_recursive>
 8007b16:	bf00      	nop
 8007b18:	200005b1 	.word	0x200005b1

08007b1c <__sfp_lock_release>:
 8007b1c:	4801      	ldr	r0, [pc, #4]	; (8007b24 <__sfp_lock_release+0x8>)
 8007b1e:	f000 b8de 	b.w	8007cde <__retarget_lock_release_recursive>
 8007b22:	bf00      	nop
 8007b24:	200005b1 	.word	0x200005b1

08007b28 <__sinit>:
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	f7ff fff0 	bl	8007b10 <__sfp_lock_acquire>
 8007b30:	6a23      	ldr	r3, [r4, #32]
 8007b32:	b11b      	cbz	r3, 8007b3c <__sinit+0x14>
 8007b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b38:	f7ff bff0 	b.w	8007b1c <__sfp_lock_release>
 8007b3c:	4b04      	ldr	r3, [pc, #16]	; (8007b50 <__sinit+0x28>)
 8007b3e:	6223      	str	r3, [r4, #32]
 8007b40:	4b04      	ldr	r3, [pc, #16]	; (8007b54 <__sinit+0x2c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1f5      	bne.n	8007b34 <__sinit+0xc>
 8007b48:	f7ff ffc4 	bl	8007ad4 <global_stdio_init.part.0>
 8007b4c:	e7f2      	b.n	8007b34 <__sinit+0xc>
 8007b4e:	bf00      	nop
 8007b50:	08007a95 	.word	0x08007a95
 8007b54:	200005ac 	.word	0x200005ac

08007b58 <_fwalk_sglue>:
 8007b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b5c:	4607      	mov	r7, r0
 8007b5e:	4688      	mov	r8, r1
 8007b60:	4614      	mov	r4, r2
 8007b62:	2600      	movs	r6, #0
 8007b64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b68:	f1b9 0901 	subs.w	r9, r9, #1
 8007b6c:	d505      	bpl.n	8007b7a <_fwalk_sglue+0x22>
 8007b6e:	6824      	ldr	r4, [r4, #0]
 8007b70:	2c00      	cmp	r4, #0
 8007b72:	d1f7      	bne.n	8007b64 <_fwalk_sglue+0xc>
 8007b74:	4630      	mov	r0, r6
 8007b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b7a:	89ab      	ldrh	r3, [r5, #12]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d907      	bls.n	8007b90 <_fwalk_sglue+0x38>
 8007b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b84:	3301      	adds	r3, #1
 8007b86:	d003      	beq.n	8007b90 <_fwalk_sglue+0x38>
 8007b88:	4629      	mov	r1, r5
 8007b8a:	4638      	mov	r0, r7
 8007b8c:	47c0      	blx	r8
 8007b8e:	4306      	orrs	r6, r0
 8007b90:	3568      	adds	r5, #104	; 0x68
 8007b92:	e7e9      	b.n	8007b68 <_fwalk_sglue+0x10>

08007b94 <iprintf>:
 8007b94:	b40f      	push	{r0, r1, r2, r3}
 8007b96:	b507      	push	{r0, r1, r2, lr}
 8007b98:	4906      	ldr	r1, [pc, #24]	; (8007bb4 <iprintf+0x20>)
 8007b9a:	ab04      	add	r3, sp, #16
 8007b9c:	6808      	ldr	r0, [r1, #0]
 8007b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ba2:	6881      	ldr	r1, [r0, #8]
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	f000 ff3f 	bl	8008a28 <_vfiprintf_r>
 8007baa:	b003      	add	sp, #12
 8007bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bb0:	b004      	add	sp, #16
 8007bb2:	4770      	bx	lr
 8007bb4:	20000068 	.word	0x20000068

08007bb8 <_puts_r>:
 8007bb8:	6a03      	ldr	r3, [r0, #32]
 8007bba:	b570      	push	{r4, r5, r6, lr}
 8007bbc:	6884      	ldr	r4, [r0, #8]
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	460e      	mov	r6, r1
 8007bc2:	b90b      	cbnz	r3, 8007bc8 <_puts_r+0x10>
 8007bc4:	f7ff ffb0 	bl	8007b28 <__sinit>
 8007bc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bca:	07db      	lsls	r3, r3, #31
 8007bcc:	d405      	bmi.n	8007bda <_puts_r+0x22>
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	0598      	lsls	r0, r3, #22
 8007bd2:	d402      	bmi.n	8007bda <_puts_r+0x22>
 8007bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bd6:	f000 f881 	bl	8007cdc <__retarget_lock_acquire_recursive>
 8007bda:	89a3      	ldrh	r3, [r4, #12]
 8007bdc:	0719      	lsls	r1, r3, #28
 8007bde:	d513      	bpl.n	8007c08 <_puts_r+0x50>
 8007be0:	6923      	ldr	r3, [r4, #16]
 8007be2:	b18b      	cbz	r3, 8007c08 <_puts_r+0x50>
 8007be4:	3e01      	subs	r6, #1
 8007be6:	68a3      	ldr	r3, [r4, #8]
 8007be8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bec:	3b01      	subs	r3, #1
 8007bee:	60a3      	str	r3, [r4, #8]
 8007bf0:	b9e9      	cbnz	r1, 8007c2e <_puts_r+0x76>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	da2e      	bge.n	8007c54 <_puts_r+0x9c>
 8007bf6:	4622      	mov	r2, r4
 8007bf8:	210a      	movs	r1, #10
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f001 fd4f 	bl	800969e <__swbuf_r>
 8007c00:	3001      	adds	r0, #1
 8007c02:	d007      	beq.n	8007c14 <_puts_r+0x5c>
 8007c04:	250a      	movs	r5, #10
 8007c06:	e007      	b.n	8007c18 <_puts_r+0x60>
 8007c08:	4621      	mov	r1, r4
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	f001 fd84 	bl	8009718 <__swsetup_r>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d0e7      	beq.n	8007be4 <_puts_r+0x2c>
 8007c14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007c18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c1a:	07da      	lsls	r2, r3, #31
 8007c1c:	d405      	bmi.n	8007c2a <_puts_r+0x72>
 8007c1e:	89a3      	ldrh	r3, [r4, #12]
 8007c20:	059b      	lsls	r3, r3, #22
 8007c22:	d402      	bmi.n	8007c2a <_puts_r+0x72>
 8007c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c26:	f000 f85a 	bl	8007cde <__retarget_lock_release_recursive>
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	bd70      	pop	{r4, r5, r6, pc}
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	da04      	bge.n	8007c3c <_puts_r+0x84>
 8007c32:	69a2      	ldr	r2, [r4, #24]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	dc06      	bgt.n	8007c46 <_puts_r+0x8e>
 8007c38:	290a      	cmp	r1, #10
 8007c3a:	d004      	beq.n	8007c46 <_puts_r+0x8e>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	6022      	str	r2, [r4, #0]
 8007c42:	7019      	strb	r1, [r3, #0]
 8007c44:	e7cf      	b.n	8007be6 <_puts_r+0x2e>
 8007c46:	4622      	mov	r2, r4
 8007c48:	4628      	mov	r0, r5
 8007c4a:	f001 fd28 	bl	800969e <__swbuf_r>
 8007c4e:	3001      	adds	r0, #1
 8007c50:	d1c9      	bne.n	8007be6 <_puts_r+0x2e>
 8007c52:	e7df      	b.n	8007c14 <_puts_r+0x5c>
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	250a      	movs	r5, #10
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	6022      	str	r2, [r4, #0]
 8007c5c:	701d      	strb	r5, [r3, #0]
 8007c5e:	e7db      	b.n	8007c18 <_puts_r+0x60>

08007c60 <puts>:
 8007c60:	4b02      	ldr	r3, [pc, #8]	; (8007c6c <puts+0xc>)
 8007c62:	4601      	mov	r1, r0
 8007c64:	6818      	ldr	r0, [r3, #0]
 8007c66:	f7ff bfa7 	b.w	8007bb8 <_puts_r>
 8007c6a:	bf00      	nop
 8007c6c:	20000068 	.word	0x20000068

08007c70 <memset>:
 8007c70:	4402      	add	r2, r0
 8007c72:	4603      	mov	r3, r0
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d100      	bne.n	8007c7a <memset+0xa>
 8007c78:	4770      	bx	lr
 8007c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c7e:	e7f9      	b.n	8007c74 <memset+0x4>

08007c80 <_localeconv_r>:
 8007c80:	4800      	ldr	r0, [pc, #0]	; (8007c84 <_localeconv_r+0x4>)
 8007c82:	4770      	bx	lr
 8007c84:	2000015c 	.word	0x2000015c

08007c88 <__errno>:
 8007c88:	4b01      	ldr	r3, [pc, #4]	; (8007c90 <__errno+0x8>)
 8007c8a:	6818      	ldr	r0, [r3, #0]
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	20000068 	.word	0x20000068

08007c94 <__libc_init_array>:
 8007c94:	b570      	push	{r4, r5, r6, lr}
 8007c96:	4d0d      	ldr	r5, [pc, #52]	; (8007ccc <__libc_init_array+0x38>)
 8007c98:	4c0d      	ldr	r4, [pc, #52]	; (8007cd0 <__libc_init_array+0x3c>)
 8007c9a:	1b64      	subs	r4, r4, r5
 8007c9c:	10a4      	asrs	r4, r4, #2
 8007c9e:	2600      	movs	r6, #0
 8007ca0:	42a6      	cmp	r6, r4
 8007ca2:	d109      	bne.n	8007cb8 <__libc_init_array+0x24>
 8007ca4:	4d0b      	ldr	r5, [pc, #44]	; (8007cd4 <__libc_init_array+0x40>)
 8007ca6:	4c0c      	ldr	r4, [pc, #48]	; (8007cd8 <__libc_init_array+0x44>)
 8007ca8:	f001 ff72 	bl	8009b90 <_init>
 8007cac:	1b64      	subs	r4, r4, r5
 8007cae:	10a4      	asrs	r4, r4, #2
 8007cb0:	2600      	movs	r6, #0
 8007cb2:	42a6      	cmp	r6, r4
 8007cb4:	d105      	bne.n	8007cc2 <__libc_init_array+0x2e>
 8007cb6:	bd70      	pop	{r4, r5, r6, pc}
 8007cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cbc:	4798      	blx	r3
 8007cbe:	3601      	adds	r6, #1
 8007cc0:	e7ee      	b.n	8007ca0 <__libc_init_array+0xc>
 8007cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc6:	4798      	blx	r3
 8007cc8:	3601      	adds	r6, #1
 8007cca:	e7f2      	b.n	8007cb2 <__libc_init_array+0x1e>
 8007ccc:	08009fdc 	.word	0x08009fdc
 8007cd0:	08009fdc 	.word	0x08009fdc
 8007cd4:	08009fdc 	.word	0x08009fdc
 8007cd8:	08009fe0 	.word	0x08009fe0

08007cdc <__retarget_lock_acquire_recursive>:
 8007cdc:	4770      	bx	lr

08007cde <__retarget_lock_release_recursive>:
 8007cde:	4770      	bx	lr

08007ce0 <quorem>:
 8007ce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce4:	6903      	ldr	r3, [r0, #16]
 8007ce6:	690c      	ldr	r4, [r1, #16]
 8007ce8:	42a3      	cmp	r3, r4
 8007cea:	4607      	mov	r7, r0
 8007cec:	db7e      	blt.n	8007dec <quorem+0x10c>
 8007cee:	3c01      	subs	r4, #1
 8007cf0:	f101 0814 	add.w	r8, r1, #20
 8007cf4:	f100 0514 	add.w	r5, r0, #20
 8007cf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d06:	3301      	adds	r3, #1
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d0e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d12:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d16:	d331      	bcc.n	8007d7c <quorem+0x9c>
 8007d18:	f04f 0e00 	mov.w	lr, #0
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	46ac      	mov	ip, r5
 8007d20:	46f2      	mov	sl, lr
 8007d22:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d26:	b293      	uxth	r3, r2
 8007d28:	fb06 e303 	mla	r3, r6, r3, lr
 8007d2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d30:	0c1a      	lsrs	r2, r3, #16
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	ebaa 0303 	sub.w	r3, sl, r3
 8007d38:	f8dc a000 	ldr.w	sl, [ip]
 8007d3c:	fa13 f38a 	uxtah	r3, r3, sl
 8007d40:	fb06 220e 	mla	r2, r6, lr, r2
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	9b00      	ldr	r3, [sp, #0]
 8007d48:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d4c:	b292      	uxth	r2, r2
 8007d4e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d56:	f8bd 3000 	ldrh.w	r3, [sp]
 8007d5a:	4581      	cmp	r9, r0
 8007d5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d60:	f84c 3b04 	str.w	r3, [ip], #4
 8007d64:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d68:	d2db      	bcs.n	8007d22 <quorem+0x42>
 8007d6a:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d6e:	b92b      	cbnz	r3, 8007d7c <quorem+0x9c>
 8007d70:	9b01      	ldr	r3, [sp, #4]
 8007d72:	3b04      	subs	r3, #4
 8007d74:	429d      	cmp	r5, r3
 8007d76:	461a      	mov	r2, r3
 8007d78:	d32c      	bcc.n	8007dd4 <quorem+0xf4>
 8007d7a:	613c      	str	r4, [r7, #16]
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	f001 fb4b 	bl	8009418 <__mcmp>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	db22      	blt.n	8007dcc <quorem+0xec>
 8007d86:	3601      	adds	r6, #1
 8007d88:	4629      	mov	r1, r5
 8007d8a:	2000      	movs	r0, #0
 8007d8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d90:	f8d1 c000 	ldr.w	ip, [r1]
 8007d94:	b293      	uxth	r3, r2
 8007d96:	1ac3      	subs	r3, r0, r3
 8007d98:	0c12      	lsrs	r2, r2, #16
 8007d9a:	fa13 f38c 	uxtah	r3, r3, ip
 8007d9e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007da2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dac:	45c1      	cmp	r9, r8
 8007dae:	f841 3b04 	str.w	r3, [r1], #4
 8007db2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007db6:	d2e9      	bcs.n	8007d8c <quorem+0xac>
 8007db8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dc0:	b922      	cbnz	r2, 8007dcc <quorem+0xec>
 8007dc2:	3b04      	subs	r3, #4
 8007dc4:	429d      	cmp	r5, r3
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	d30a      	bcc.n	8007de0 <quorem+0x100>
 8007dca:	613c      	str	r4, [r7, #16]
 8007dcc:	4630      	mov	r0, r6
 8007dce:	b003      	add	sp, #12
 8007dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd4:	6812      	ldr	r2, [r2, #0]
 8007dd6:	3b04      	subs	r3, #4
 8007dd8:	2a00      	cmp	r2, #0
 8007dda:	d1ce      	bne.n	8007d7a <quorem+0x9a>
 8007ddc:	3c01      	subs	r4, #1
 8007dde:	e7c9      	b.n	8007d74 <quorem+0x94>
 8007de0:	6812      	ldr	r2, [r2, #0]
 8007de2:	3b04      	subs	r3, #4
 8007de4:	2a00      	cmp	r2, #0
 8007de6:	d1f0      	bne.n	8007dca <quorem+0xea>
 8007de8:	3c01      	subs	r4, #1
 8007dea:	e7eb      	b.n	8007dc4 <quorem+0xe4>
 8007dec:	2000      	movs	r0, #0
 8007dee:	e7ee      	b.n	8007dce <quorem+0xee>

08007df0 <_dtoa_r>:
 8007df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df4:	ed2d 8b04 	vpush	{d8-d9}
 8007df8:	69c5      	ldr	r5, [r0, #28]
 8007dfa:	b093      	sub	sp, #76	; 0x4c
 8007dfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e00:	ec57 6b10 	vmov	r6, r7, d0
 8007e04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e08:	9107      	str	r1, [sp, #28]
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	920a      	str	r2, [sp, #40]	; 0x28
 8007e0e:	930d      	str	r3, [sp, #52]	; 0x34
 8007e10:	b975      	cbnz	r5, 8007e30 <_dtoa_r+0x40>
 8007e12:	2010      	movs	r0, #16
 8007e14:	f000 ff22 	bl	8008c5c <malloc>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	61e0      	str	r0, [r4, #28]
 8007e1c:	b920      	cbnz	r0, 8007e28 <_dtoa_r+0x38>
 8007e1e:	4bae      	ldr	r3, [pc, #696]	; (80080d8 <_dtoa_r+0x2e8>)
 8007e20:	21ef      	movs	r1, #239	; 0xef
 8007e22:	48ae      	ldr	r0, [pc, #696]	; (80080dc <_dtoa_r+0x2ec>)
 8007e24:	f001 fdb8 	bl	8009998 <__assert_func>
 8007e28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e2c:	6005      	str	r5, [r0, #0]
 8007e2e:	60c5      	str	r5, [r0, #12]
 8007e30:	69e3      	ldr	r3, [r4, #28]
 8007e32:	6819      	ldr	r1, [r3, #0]
 8007e34:	b151      	cbz	r1, 8007e4c <_dtoa_r+0x5c>
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	604a      	str	r2, [r1, #4]
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	4093      	lsls	r3, r2
 8007e3e:	608b      	str	r3, [r1, #8]
 8007e40:	4620      	mov	r0, r4
 8007e42:	f001 f8ad 	bl	8008fa0 <_Bfree>
 8007e46:	69e3      	ldr	r3, [r4, #28]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	1e3b      	subs	r3, r7, #0
 8007e4e:	bfbb      	ittet	lt
 8007e50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e54:	9303      	strlt	r3, [sp, #12]
 8007e56:	2300      	movge	r3, #0
 8007e58:	2201      	movlt	r2, #1
 8007e5a:	bfac      	ite	ge
 8007e5c:	f8c8 3000 	strge.w	r3, [r8]
 8007e60:	f8c8 2000 	strlt.w	r2, [r8]
 8007e64:	4b9e      	ldr	r3, [pc, #632]	; (80080e0 <_dtoa_r+0x2f0>)
 8007e66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007e6a:	ea33 0308 	bics.w	r3, r3, r8
 8007e6e:	d11b      	bne.n	8007ea8 <_dtoa_r+0xb8>
 8007e70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e72:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007e7c:	4333      	orrs	r3, r6
 8007e7e:	f000 8593 	beq.w	80089a8 <_dtoa_r+0xbb8>
 8007e82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e84:	b963      	cbnz	r3, 8007ea0 <_dtoa_r+0xb0>
 8007e86:	4b97      	ldr	r3, [pc, #604]	; (80080e4 <_dtoa_r+0x2f4>)
 8007e88:	e027      	b.n	8007eda <_dtoa_r+0xea>
 8007e8a:	4b97      	ldr	r3, [pc, #604]	; (80080e8 <_dtoa_r+0x2f8>)
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	3308      	adds	r3, #8
 8007e90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	9800      	ldr	r0, [sp, #0]
 8007e96:	b013      	add	sp, #76	; 0x4c
 8007e98:	ecbd 8b04 	vpop	{d8-d9}
 8007e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea0:	4b90      	ldr	r3, [pc, #576]	; (80080e4 <_dtoa_r+0x2f4>)
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	3303      	adds	r3, #3
 8007ea6:	e7f3      	b.n	8007e90 <_dtoa_r+0xa0>
 8007ea8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007eac:	2200      	movs	r2, #0
 8007eae:	ec51 0b17 	vmov	r0, r1, d7
 8007eb2:	eeb0 8a47 	vmov.f32	s16, s14
 8007eb6:	eef0 8a67 	vmov.f32	s17, s15
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f7f8 fe1c 	bl	8000af8 <__aeabi_dcmpeq>
 8007ec0:	4681      	mov	r9, r0
 8007ec2:	b160      	cbz	r0, 8007ede <_dtoa_r+0xee>
 8007ec4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 8568 	beq.w	80089a2 <_dtoa_r+0xbb2>
 8007ed2:	4b86      	ldr	r3, [pc, #536]	; (80080ec <_dtoa_r+0x2fc>)
 8007ed4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	e7da      	b.n	8007e94 <_dtoa_r+0xa4>
 8007ede:	aa10      	add	r2, sp, #64	; 0x40
 8007ee0:	a911      	add	r1, sp, #68	; 0x44
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ee8:	eef0 0a68 	vmov.f32	s1, s17
 8007eec:	f001 fb3a 	bl	8009564 <__d2b>
 8007ef0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007ef4:	4682      	mov	sl, r0
 8007ef6:	2d00      	cmp	r5, #0
 8007ef8:	d07f      	beq.n	8007ffa <_dtoa_r+0x20a>
 8007efa:	ee18 3a90 	vmov	r3, s17
 8007efe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007f06:	ec51 0b18 	vmov	r0, r1, d8
 8007f0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007f0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007f16:	4619      	mov	r1, r3
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4b75      	ldr	r3, [pc, #468]	; (80080f0 <_dtoa_r+0x300>)
 8007f1c:	f7f8 f9cc 	bl	80002b8 <__aeabi_dsub>
 8007f20:	a367      	add	r3, pc, #412	; (adr r3, 80080c0 <_dtoa_r+0x2d0>)
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f7f8 fb7f 	bl	8000628 <__aeabi_dmul>
 8007f2a:	a367      	add	r3, pc, #412	; (adr r3, 80080c8 <_dtoa_r+0x2d8>)
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	f7f8 f9c4 	bl	80002bc <__adddf3>
 8007f34:	4606      	mov	r6, r0
 8007f36:	4628      	mov	r0, r5
 8007f38:	460f      	mov	r7, r1
 8007f3a:	f7f8 fb0b 	bl	8000554 <__aeabi_i2d>
 8007f3e:	a364      	add	r3, pc, #400	; (adr r3, 80080d0 <_dtoa_r+0x2e0>)
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	f7f8 fb70 	bl	8000628 <__aeabi_dmul>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	4639      	mov	r1, r7
 8007f50:	f7f8 f9b4 	bl	80002bc <__adddf3>
 8007f54:	4606      	mov	r6, r0
 8007f56:	460f      	mov	r7, r1
 8007f58:	f7f8 fe16 	bl	8000b88 <__aeabi_d2iz>
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	4683      	mov	fp, r0
 8007f60:	2300      	movs	r3, #0
 8007f62:	4630      	mov	r0, r6
 8007f64:	4639      	mov	r1, r7
 8007f66:	f7f8 fdd1 	bl	8000b0c <__aeabi_dcmplt>
 8007f6a:	b148      	cbz	r0, 8007f80 <_dtoa_r+0x190>
 8007f6c:	4658      	mov	r0, fp
 8007f6e:	f7f8 faf1 	bl	8000554 <__aeabi_i2d>
 8007f72:	4632      	mov	r2, r6
 8007f74:	463b      	mov	r3, r7
 8007f76:	f7f8 fdbf 	bl	8000af8 <__aeabi_dcmpeq>
 8007f7a:	b908      	cbnz	r0, 8007f80 <_dtoa_r+0x190>
 8007f7c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007f80:	f1bb 0f16 	cmp.w	fp, #22
 8007f84:	d857      	bhi.n	8008036 <_dtoa_r+0x246>
 8007f86:	4b5b      	ldr	r3, [pc, #364]	; (80080f4 <_dtoa_r+0x304>)
 8007f88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	ec51 0b18 	vmov	r0, r1, d8
 8007f94:	f7f8 fdba 	bl	8000b0c <__aeabi_dcmplt>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d04e      	beq.n	800803a <_dtoa_r+0x24a>
 8007f9c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	930c      	str	r3, [sp, #48]	; 0x30
 8007fa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fa6:	1b5b      	subs	r3, r3, r5
 8007fa8:	1e5a      	subs	r2, r3, #1
 8007faa:	bf45      	ittet	mi
 8007fac:	f1c3 0301 	rsbmi	r3, r3, #1
 8007fb0:	9305      	strmi	r3, [sp, #20]
 8007fb2:	2300      	movpl	r3, #0
 8007fb4:	2300      	movmi	r3, #0
 8007fb6:	9206      	str	r2, [sp, #24]
 8007fb8:	bf54      	ite	pl
 8007fba:	9305      	strpl	r3, [sp, #20]
 8007fbc:	9306      	strmi	r3, [sp, #24]
 8007fbe:	f1bb 0f00 	cmp.w	fp, #0
 8007fc2:	db3c      	blt.n	800803e <_dtoa_r+0x24e>
 8007fc4:	9b06      	ldr	r3, [sp, #24]
 8007fc6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007fca:	445b      	add	r3, fp
 8007fcc:	9306      	str	r3, [sp, #24]
 8007fce:	2300      	movs	r3, #0
 8007fd0:	9308      	str	r3, [sp, #32]
 8007fd2:	9b07      	ldr	r3, [sp, #28]
 8007fd4:	2b09      	cmp	r3, #9
 8007fd6:	d868      	bhi.n	80080aa <_dtoa_r+0x2ba>
 8007fd8:	2b05      	cmp	r3, #5
 8007fda:	bfc4      	itt	gt
 8007fdc:	3b04      	subgt	r3, #4
 8007fde:	9307      	strgt	r3, [sp, #28]
 8007fe0:	9b07      	ldr	r3, [sp, #28]
 8007fe2:	f1a3 0302 	sub.w	r3, r3, #2
 8007fe6:	bfcc      	ite	gt
 8007fe8:	2500      	movgt	r5, #0
 8007fea:	2501      	movle	r5, #1
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	f200 8085 	bhi.w	80080fc <_dtoa_r+0x30c>
 8007ff2:	e8df f003 	tbb	[pc, r3]
 8007ff6:	3b2e      	.short	0x3b2e
 8007ff8:	5839      	.short	0x5839
 8007ffa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ffe:	441d      	add	r5, r3
 8008000:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008004:	2b20      	cmp	r3, #32
 8008006:	bfc1      	itttt	gt
 8008008:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800800c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008010:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008014:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008018:	bfd6      	itet	le
 800801a:	f1c3 0320 	rsble	r3, r3, #32
 800801e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008022:	fa06 f003 	lslle.w	r0, r6, r3
 8008026:	f7f8 fa85 	bl	8000534 <__aeabi_ui2d>
 800802a:	2201      	movs	r2, #1
 800802c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008030:	3d01      	subs	r5, #1
 8008032:	920e      	str	r2, [sp, #56]	; 0x38
 8008034:	e76f      	b.n	8007f16 <_dtoa_r+0x126>
 8008036:	2301      	movs	r3, #1
 8008038:	e7b3      	b.n	8007fa2 <_dtoa_r+0x1b2>
 800803a:	900c      	str	r0, [sp, #48]	; 0x30
 800803c:	e7b2      	b.n	8007fa4 <_dtoa_r+0x1b4>
 800803e:	9b05      	ldr	r3, [sp, #20]
 8008040:	eba3 030b 	sub.w	r3, r3, fp
 8008044:	9305      	str	r3, [sp, #20]
 8008046:	f1cb 0300 	rsb	r3, fp, #0
 800804a:	9308      	str	r3, [sp, #32]
 800804c:	2300      	movs	r3, #0
 800804e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008050:	e7bf      	b.n	8007fd2 <_dtoa_r+0x1e2>
 8008052:	2300      	movs	r3, #0
 8008054:	9309      	str	r3, [sp, #36]	; 0x24
 8008056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008058:	2b00      	cmp	r3, #0
 800805a:	dc52      	bgt.n	8008102 <_dtoa_r+0x312>
 800805c:	2301      	movs	r3, #1
 800805e:	9301      	str	r3, [sp, #4]
 8008060:	9304      	str	r3, [sp, #16]
 8008062:	461a      	mov	r2, r3
 8008064:	920a      	str	r2, [sp, #40]	; 0x28
 8008066:	e00b      	b.n	8008080 <_dtoa_r+0x290>
 8008068:	2301      	movs	r3, #1
 800806a:	e7f3      	b.n	8008054 <_dtoa_r+0x264>
 800806c:	2300      	movs	r3, #0
 800806e:	9309      	str	r3, [sp, #36]	; 0x24
 8008070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008072:	445b      	add	r3, fp
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	3301      	adds	r3, #1
 8008078:	2b01      	cmp	r3, #1
 800807a:	9304      	str	r3, [sp, #16]
 800807c:	bfb8      	it	lt
 800807e:	2301      	movlt	r3, #1
 8008080:	69e0      	ldr	r0, [r4, #28]
 8008082:	2100      	movs	r1, #0
 8008084:	2204      	movs	r2, #4
 8008086:	f102 0614 	add.w	r6, r2, #20
 800808a:	429e      	cmp	r6, r3
 800808c:	d93d      	bls.n	800810a <_dtoa_r+0x31a>
 800808e:	6041      	str	r1, [r0, #4]
 8008090:	4620      	mov	r0, r4
 8008092:	f000 ff45 	bl	8008f20 <_Balloc>
 8008096:	9000      	str	r0, [sp, #0]
 8008098:	2800      	cmp	r0, #0
 800809a:	d139      	bne.n	8008110 <_dtoa_r+0x320>
 800809c:	4b16      	ldr	r3, [pc, #88]	; (80080f8 <_dtoa_r+0x308>)
 800809e:	4602      	mov	r2, r0
 80080a0:	f240 11af 	movw	r1, #431	; 0x1af
 80080a4:	e6bd      	b.n	8007e22 <_dtoa_r+0x32>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e7e1      	b.n	800806e <_dtoa_r+0x27e>
 80080aa:	2501      	movs	r5, #1
 80080ac:	2300      	movs	r3, #0
 80080ae:	9307      	str	r3, [sp, #28]
 80080b0:	9509      	str	r5, [sp, #36]	; 0x24
 80080b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080b6:	9301      	str	r3, [sp, #4]
 80080b8:	9304      	str	r3, [sp, #16]
 80080ba:	2200      	movs	r2, #0
 80080bc:	2312      	movs	r3, #18
 80080be:	e7d1      	b.n	8008064 <_dtoa_r+0x274>
 80080c0:	636f4361 	.word	0x636f4361
 80080c4:	3fd287a7 	.word	0x3fd287a7
 80080c8:	8b60c8b3 	.word	0x8b60c8b3
 80080cc:	3fc68a28 	.word	0x3fc68a28
 80080d0:	509f79fb 	.word	0x509f79fb
 80080d4:	3fd34413 	.word	0x3fd34413
 80080d8:	08009ca1 	.word	0x08009ca1
 80080dc:	08009cb8 	.word	0x08009cb8
 80080e0:	7ff00000 	.word	0x7ff00000
 80080e4:	08009c9d 	.word	0x08009c9d
 80080e8:	08009c94 	.word	0x08009c94
 80080ec:	08009c71 	.word	0x08009c71
 80080f0:	3ff80000 	.word	0x3ff80000
 80080f4:	08009db8 	.word	0x08009db8
 80080f8:	08009d10 	.word	0x08009d10
 80080fc:	2301      	movs	r3, #1
 80080fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008100:	e7d7      	b.n	80080b2 <_dtoa_r+0x2c2>
 8008102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	9304      	str	r3, [sp, #16]
 8008108:	e7ba      	b.n	8008080 <_dtoa_r+0x290>
 800810a:	3101      	adds	r1, #1
 800810c:	0052      	lsls	r2, r2, #1
 800810e:	e7ba      	b.n	8008086 <_dtoa_r+0x296>
 8008110:	69e3      	ldr	r3, [r4, #28]
 8008112:	9a00      	ldr	r2, [sp, #0]
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	9b04      	ldr	r3, [sp, #16]
 8008118:	2b0e      	cmp	r3, #14
 800811a:	f200 80a8 	bhi.w	800826e <_dtoa_r+0x47e>
 800811e:	2d00      	cmp	r5, #0
 8008120:	f000 80a5 	beq.w	800826e <_dtoa_r+0x47e>
 8008124:	f1bb 0f00 	cmp.w	fp, #0
 8008128:	dd38      	ble.n	800819c <_dtoa_r+0x3ac>
 800812a:	4bc0      	ldr	r3, [pc, #768]	; (800842c <_dtoa_r+0x63c>)
 800812c:	f00b 020f 	and.w	r2, fp, #15
 8008130:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008134:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008138:	e9d3 6700 	ldrd	r6, r7, [r3]
 800813c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008140:	d019      	beq.n	8008176 <_dtoa_r+0x386>
 8008142:	4bbb      	ldr	r3, [pc, #748]	; (8008430 <_dtoa_r+0x640>)
 8008144:	ec51 0b18 	vmov	r0, r1, d8
 8008148:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800814c:	f7f8 fb96 	bl	800087c <__aeabi_ddiv>
 8008150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008154:	f008 080f 	and.w	r8, r8, #15
 8008158:	2503      	movs	r5, #3
 800815a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008430 <_dtoa_r+0x640>
 800815e:	f1b8 0f00 	cmp.w	r8, #0
 8008162:	d10a      	bne.n	800817a <_dtoa_r+0x38a>
 8008164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008168:	4632      	mov	r2, r6
 800816a:	463b      	mov	r3, r7
 800816c:	f7f8 fb86 	bl	800087c <__aeabi_ddiv>
 8008170:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008174:	e02b      	b.n	80081ce <_dtoa_r+0x3de>
 8008176:	2502      	movs	r5, #2
 8008178:	e7ef      	b.n	800815a <_dtoa_r+0x36a>
 800817a:	f018 0f01 	tst.w	r8, #1
 800817e:	d008      	beq.n	8008192 <_dtoa_r+0x3a2>
 8008180:	4630      	mov	r0, r6
 8008182:	4639      	mov	r1, r7
 8008184:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008188:	f7f8 fa4e 	bl	8000628 <__aeabi_dmul>
 800818c:	3501      	adds	r5, #1
 800818e:	4606      	mov	r6, r0
 8008190:	460f      	mov	r7, r1
 8008192:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008196:	f109 0908 	add.w	r9, r9, #8
 800819a:	e7e0      	b.n	800815e <_dtoa_r+0x36e>
 800819c:	f000 809f 	beq.w	80082de <_dtoa_r+0x4ee>
 80081a0:	f1cb 0600 	rsb	r6, fp, #0
 80081a4:	4ba1      	ldr	r3, [pc, #644]	; (800842c <_dtoa_r+0x63c>)
 80081a6:	4fa2      	ldr	r7, [pc, #648]	; (8008430 <_dtoa_r+0x640>)
 80081a8:	f006 020f 	and.w	r2, r6, #15
 80081ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	ec51 0b18 	vmov	r0, r1, d8
 80081b8:	f7f8 fa36 	bl	8000628 <__aeabi_dmul>
 80081bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081c0:	1136      	asrs	r6, r6, #4
 80081c2:	2300      	movs	r3, #0
 80081c4:	2502      	movs	r5, #2
 80081c6:	2e00      	cmp	r6, #0
 80081c8:	d17e      	bne.n	80082c8 <_dtoa_r+0x4d8>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1d0      	bne.n	8008170 <_dtoa_r+0x380>
 80081ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 8084 	beq.w	80082e2 <_dtoa_r+0x4f2>
 80081da:	4b96      	ldr	r3, [pc, #600]	; (8008434 <_dtoa_r+0x644>)
 80081dc:	2200      	movs	r2, #0
 80081de:	4640      	mov	r0, r8
 80081e0:	4649      	mov	r1, r9
 80081e2:	f7f8 fc93 	bl	8000b0c <__aeabi_dcmplt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d07b      	beq.n	80082e2 <_dtoa_r+0x4f2>
 80081ea:	9b04      	ldr	r3, [sp, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d078      	beq.n	80082e2 <_dtoa_r+0x4f2>
 80081f0:	9b01      	ldr	r3, [sp, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	dd39      	ble.n	800826a <_dtoa_r+0x47a>
 80081f6:	4b90      	ldr	r3, [pc, #576]	; (8008438 <_dtoa_r+0x648>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	4640      	mov	r0, r8
 80081fc:	4649      	mov	r1, r9
 80081fe:	f7f8 fa13 	bl	8000628 <__aeabi_dmul>
 8008202:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008206:	9e01      	ldr	r6, [sp, #4]
 8008208:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800820c:	3501      	adds	r5, #1
 800820e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008212:	4628      	mov	r0, r5
 8008214:	f7f8 f99e 	bl	8000554 <__aeabi_i2d>
 8008218:	4642      	mov	r2, r8
 800821a:	464b      	mov	r3, r9
 800821c:	f7f8 fa04 	bl	8000628 <__aeabi_dmul>
 8008220:	4b86      	ldr	r3, [pc, #536]	; (800843c <_dtoa_r+0x64c>)
 8008222:	2200      	movs	r2, #0
 8008224:	f7f8 f84a 	bl	80002bc <__adddf3>
 8008228:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800822c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008230:	9303      	str	r3, [sp, #12]
 8008232:	2e00      	cmp	r6, #0
 8008234:	d158      	bne.n	80082e8 <_dtoa_r+0x4f8>
 8008236:	4b82      	ldr	r3, [pc, #520]	; (8008440 <_dtoa_r+0x650>)
 8008238:	2200      	movs	r2, #0
 800823a:	4640      	mov	r0, r8
 800823c:	4649      	mov	r1, r9
 800823e:	f7f8 f83b 	bl	80002b8 <__aeabi_dsub>
 8008242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008246:	4680      	mov	r8, r0
 8008248:	4689      	mov	r9, r1
 800824a:	f7f8 fc7d 	bl	8000b48 <__aeabi_dcmpgt>
 800824e:	2800      	cmp	r0, #0
 8008250:	f040 8296 	bne.w	8008780 <_dtoa_r+0x990>
 8008254:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008258:	4640      	mov	r0, r8
 800825a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800825e:	4649      	mov	r1, r9
 8008260:	f7f8 fc54 	bl	8000b0c <__aeabi_dcmplt>
 8008264:	2800      	cmp	r0, #0
 8008266:	f040 8289 	bne.w	800877c <_dtoa_r+0x98c>
 800826a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800826e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008270:	2b00      	cmp	r3, #0
 8008272:	f2c0 814e 	blt.w	8008512 <_dtoa_r+0x722>
 8008276:	f1bb 0f0e 	cmp.w	fp, #14
 800827a:	f300 814a 	bgt.w	8008512 <_dtoa_r+0x722>
 800827e:	4b6b      	ldr	r3, [pc, #428]	; (800842c <_dtoa_r+0x63c>)
 8008280:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008284:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800828a:	2b00      	cmp	r3, #0
 800828c:	f280 80dc 	bge.w	8008448 <_dtoa_r+0x658>
 8008290:	9b04      	ldr	r3, [sp, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	f300 80d8 	bgt.w	8008448 <_dtoa_r+0x658>
 8008298:	f040 826f 	bne.w	800877a <_dtoa_r+0x98a>
 800829c:	4b68      	ldr	r3, [pc, #416]	; (8008440 <_dtoa_r+0x650>)
 800829e:	2200      	movs	r2, #0
 80082a0:	4640      	mov	r0, r8
 80082a2:	4649      	mov	r1, r9
 80082a4:	f7f8 f9c0 	bl	8000628 <__aeabi_dmul>
 80082a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ac:	f7f8 fc42 	bl	8000b34 <__aeabi_dcmpge>
 80082b0:	9e04      	ldr	r6, [sp, #16]
 80082b2:	4637      	mov	r7, r6
 80082b4:	2800      	cmp	r0, #0
 80082b6:	f040 8245 	bne.w	8008744 <_dtoa_r+0x954>
 80082ba:	9d00      	ldr	r5, [sp, #0]
 80082bc:	2331      	movs	r3, #49	; 0x31
 80082be:	f805 3b01 	strb.w	r3, [r5], #1
 80082c2:	f10b 0b01 	add.w	fp, fp, #1
 80082c6:	e241      	b.n	800874c <_dtoa_r+0x95c>
 80082c8:	07f2      	lsls	r2, r6, #31
 80082ca:	d505      	bpl.n	80082d8 <_dtoa_r+0x4e8>
 80082cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082d0:	f7f8 f9aa 	bl	8000628 <__aeabi_dmul>
 80082d4:	3501      	adds	r5, #1
 80082d6:	2301      	movs	r3, #1
 80082d8:	1076      	asrs	r6, r6, #1
 80082da:	3708      	adds	r7, #8
 80082dc:	e773      	b.n	80081c6 <_dtoa_r+0x3d6>
 80082de:	2502      	movs	r5, #2
 80082e0:	e775      	b.n	80081ce <_dtoa_r+0x3de>
 80082e2:	9e04      	ldr	r6, [sp, #16]
 80082e4:	465f      	mov	r7, fp
 80082e6:	e792      	b.n	800820e <_dtoa_r+0x41e>
 80082e8:	9900      	ldr	r1, [sp, #0]
 80082ea:	4b50      	ldr	r3, [pc, #320]	; (800842c <_dtoa_r+0x63c>)
 80082ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082f0:	4431      	add	r1, r6
 80082f2:	9102      	str	r1, [sp, #8]
 80082f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082f6:	eeb0 9a47 	vmov.f32	s18, s14
 80082fa:	eef0 9a67 	vmov.f32	s19, s15
 80082fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008302:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008306:	2900      	cmp	r1, #0
 8008308:	d044      	beq.n	8008394 <_dtoa_r+0x5a4>
 800830a:	494e      	ldr	r1, [pc, #312]	; (8008444 <_dtoa_r+0x654>)
 800830c:	2000      	movs	r0, #0
 800830e:	f7f8 fab5 	bl	800087c <__aeabi_ddiv>
 8008312:	ec53 2b19 	vmov	r2, r3, d9
 8008316:	f7f7 ffcf 	bl	80002b8 <__aeabi_dsub>
 800831a:	9d00      	ldr	r5, [sp, #0]
 800831c:	ec41 0b19 	vmov	d9, r0, r1
 8008320:	4649      	mov	r1, r9
 8008322:	4640      	mov	r0, r8
 8008324:	f7f8 fc30 	bl	8000b88 <__aeabi_d2iz>
 8008328:	4606      	mov	r6, r0
 800832a:	f7f8 f913 	bl	8000554 <__aeabi_i2d>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4640      	mov	r0, r8
 8008334:	4649      	mov	r1, r9
 8008336:	f7f7 ffbf 	bl	80002b8 <__aeabi_dsub>
 800833a:	3630      	adds	r6, #48	; 0x30
 800833c:	f805 6b01 	strb.w	r6, [r5], #1
 8008340:	ec53 2b19 	vmov	r2, r3, d9
 8008344:	4680      	mov	r8, r0
 8008346:	4689      	mov	r9, r1
 8008348:	f7f8 fbe0 	bl	8000b0c <__aeabi_dcmplt>
 800834c:	2800      	cmp	r0, #0
 800834e:	d164      	bne.n	800841a <_dtoa_r+0x62a>
 8008350:	4642      	mov	r2, r8
 8008352:	464b      	mov	r3, r9
 8008354:	4937      	ldr	r1, [pc, #220]	; (8008434 <_dtoa_r+0x644>)
 8008356:	2000      	movs	r0, #0
 8008358:	f7f7 ffae 	bl	80002b8 <__aeabi_dsub>
 800835c:	ec53 2b19 	vmov	r2, r3, d9
 8008360:	f7f8 fbd4 	bl	8000b0c <__aeabi_dcmplt>
 8008364:	2800      	cmp	r0, #0
 8008366:	f040 80b6 	bne.w	80084d6 <_dtoa_r+0x6e6>
 800836a:	9b02      	ldr	r3, [sp, #8]
 800836c:	429d      	cmp	r5, r3
 800836e:	f43f af7c 	beq.w	800826a <_dtoa_r+0x47a>
 8008372:	4b31      	ldr	r3, [pc, #196]	; (8008438 <_dtoa_r+0x648>)
 8008374:	ec51 0b19 	vmov	r0, r1, d9
 8008378:	2200      	movs	r2, #0
 800837a:	f7f8 f955 	bl	8000628 <__aeabi_dmul>
 800837e:	4b2e      	ldr	r3, [pc, #184]	; (8008438 <_dtoa_r+0x648>)
 8008380:	ec41 0b19 	vmov	d9, r0, r1
 8008384:	2200      	movs	r2, #0
 8008386:	4640      	mov	r0, r8
 8008388:	4649      	mov	r1, r9
 800838a:	f7f8 f94d 	bl	8000628 <__aeabi_dmul>
 800838e:	4680      	mov	r8, r0
 8008390:	4689      	mov	r9, r1
 8008392:	e7c5      	b.n	8008320 <_dtoa_r+0x530>
 8008394:	ec51 0b17 	vmov	r0, r1, d7
 8008398:	f7f8 f946 	bl	8000628 <__aeabi_dmul>
 800839c:	9b02      	ldr	r3, [sp, #8]
 800839e:	9d00      	ldr	r5, [sp, #0]
 80083a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80083a2:	ec41 0b19 	vmov	d9, r0, r1
 80083a6:	4649      	mov	r1, r9
 80083a8:	4640      	mov	r0, r8
 80083aa:	f7f8 fbed 	bl	8000b88 <__aeabi_d2iz>
 80083ae:	4606      	mov	r6, r0
 80083b0:	f7f8 f8d0 	bl	8000554 <__aeabi_i2d>
 80083b4:	3630      	adds	r6, #48	; 0x30
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4640      	mov	r0, r8
 80083bc:	4649      	mov	r1, r9
 80083be:	f7f7 ff7b 	bl	80002b8 <__aeabi_dsub>
 80083c2:	f805 6b01 	strb.w	r6, [r5], #1
 80083c6:	9b02      	ldr	r3, [sp, #8]
 80083c8:	429d      	cmp	r5, r3
 80083ca:	4680      	mov	r8, r0
 80083cc:	4689      	mov	r9, r1
 80083ce:	f04f 0200 	mov.w	r2, #0
 80083d2:	d124      	bne.n	800841e <_dtoa_r+0x62e>
 80083d4:	4b1b      	ldr	r3, [pc, #108]	; (8008444 <_dtoa_r+0x654>)
 80083d6:	ec51 0b19 	vmov	r0, r1, d9
 80083da:	f7f7 ff6f 	bl	80002bc <__adddf3>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4640      	mov	r0, r8
 80083e4:	4649      	mov	r1, r9
 80083e6:	f7f8 fbaf 	bl	8000b48 <__aeabi_dcmpgt>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d173      	bne.n	80084d6 <_dtoa_r+0x6e6>
 80083ee:	ec53 2b19 	vmov	r2, r3, d9
 80083f2:	4914      	ldr	r1, [pc, #80]	; (8008444 <_dtoa_r+0x654>)
 80083f4:	2000      	movs	r0, #0
 80083f6:	f7f7 ff5f 	bl	80002b8 <__aeabi_dsub>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4640      	mov	r0, r8
 8008400:	4649      	mov	r1, r9
 8008402:	f7f8 fb83 	bl	8000b0c <__aeabi_dcmplt>
 8008406:	2800      	cmp	r0, #0
 8008408:	f43f af2f 	beq.w	800826a <_dtoa_r+0x47a>
 800840c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800840e:	1e6b      	subs	r3, r5, #1
 8008410:	930f      	str	r3, [sp, #60]	; 0x3c
 8008412:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008416:	2b30      	cmp	r3, #48	; 0x30
 8008418:	d0f8      	beq.n	800840c <_dtoa_r+0x61c>
 800841a:	46bb      	mov	fp, r7
 800841c:	e04a      	b.n	80084b4 <_dtoa_r+0x6c4>
 800841e:	4b06      	ldr	r3, [pc, #24]	; (8008438 <_dtoa_r+0x648>)
 8008420:	f7f8 f902 	bl	8000628 <__aeabi_dmul>
 8008424:	4680      	mov	r8, r0
 8008426:	4689      	mov	r9, r1
 8008428:	e7bd      	b.n	80083a6 <_dtoa_r+0x5b6>
 800842a:	bf00      	nop
 800842c:	08009db8 	.word	0x08009db8
 8008430:	08009d90 	.word	0x08009d90
 8008434:	3ff00000 	.word	0x3ff00000
 8008438:	40240000 	.word	0x40240000
 800843c:	401c0000 	.word	0x401c0000
 8008440:	40140000 	.word	0x40140000
 8008444:	3fe00000 	.word	0x3fe00000
 8008448:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800844c:	9d00      	ldr	r5, [sp, #0]
 800844e:	4642      	mov	r2, r8
 8008450:	464b      	mov	r3, r9
 8008452:	4630      	mov	r0, r6
 8008454:	4639      	mov	r1, r7
 8008456:	f7f8 fa11 	bl	800087c <__aeabi_ddiv>
 800845a:	f7f8 fb95 	bl	8000b88 <__aeabi_d2iz>
 800845e:	9001      	str	r0, [sp, #4]
 8008460:	f7f8 f878 	bl	8000554 <__aeabi_i2d>
 8008464:	4642      	mov	r2, r8
 8008466:	464b      	mov	r3, r9
 8008468:	f7f8 f8de 	bl	8000628 <__aeabi_dmul>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	4630      	mov	r0, r6
 8008472:	4639      	mov	r1, r7
 8008474:	f7f7 ff20 	bl	80002b8 <__aeabi_dsub>
 8008478:	9e01      	ldr	r6, [sp, #4]
 800847a:	9f04      	ldr	r7, [sp, #16]
 800847c:	3630      	adds	r6, #48	; 0x30
 800847e:	f805 6b01 	strb.w	r6, [r5], #1
 8008482:	9e00      	ldr	r6, [sp, #0]
 8008484:	1bae      	subs	r6, r5, r6
 8008486:	42b7      	cmp	r7, r6
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	d134      	bne.n	80084f8 <_dtoa_r+0x708>
 800848e:	f7f7 ff15 	bl	80002bc <__adddf3>
 8008492:	4642      	mov	r2, r8
 8008494:	464b      	mov	r3, r9
 8008496:	4606      	mov	r6, r0
 8008498:	460f      	mov	r7, r1
 800849a:	f7f8 fb55 	bl	8000b48 <__aeabi_dcmpgt>
 800849e:	b9c8      	cbnz	r0, 80084d4 <_dtoa_r+0x6e4>
 80084a0:	4642      	mov	r2, r8
 80084a2:	464b      	mov	r3, r9
 80084a4:	4630      	mov	r0, r6
 80084a6:	4639      	mov	r1, r7
 80084a8:	f7f8 fb26 	bl	8000af8 <__aeabi_dcmpeq>
 80084ac:	b110      	cbz	r0, 80084b4 <_dtoa_r+0x6c4>
 80084ae:	9b01      	ldr	r3, [sp, #4]
 80084b0:	07db      	lsls	r3, r3, #31
 80084b2:	d40f      	bmi.n	80084d4 <_dtoa_r+0x6e4>
 80084b4:	4651      	mov	r1, sl
 80084b6:	4620      	mov	r0, r4
 80084b8:	f000 fd72 	bl	8008fa0 <_Bfree>
 80084bc:	2300      	movs	r3, #0
 80084be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084c0:	702b      	strb	r3, [r5, #0]
 80084c2:	f10b 0301 	add.w	r3, fp, #1
 80084c6:	6013      	str	r3, [r2, #0]
 80084c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f43f ace2 	beq.w	8007e94 <_dtoa_r+0xa4>
 80084d0:	601d      	str	r5, [r3, #0]
 80084d2:	e4df      	b.n	8007e94 <_dtoa_r+0xa4>
 80084d4:	465f      	mov	r7, fp
 80084d6:	462b      	mov	r3, r5
 80084d8:	461d      	mov	r5, r3
 80084da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084de:	2a39      	cmp	r2, #57	; 0x39
 80084e0:	d106      	bne.n	80084f0 <_dtoa_r+0x700>
 80084e2:	9a00      	ldr	r2, [sp, #0]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d1f7      	bne.n	80084d8 <_dtoa_r+0x6e8>
 80084e8:	9900      	ldr	r1, [sp, #0]
 80084ea:	2230      	movs	r2, #48	; 0x30
 80084ec:	3701      	adds	r7, #1
 80084ee:	700a      	strb	r2, [r1, #0]
 80084f0:	781a      	ldrb	r2, [r3, #0]
 80084f2:	3201      	adds	r2, #1
 80084f4:	701a      	strb	r2, [r3, #0]
 80084f6:	e790      	b.n	800841a <_dtoa_r+0x62a>
 80084f8:	4ba3      	ldr	r3, [pc, #652]	; (8008788 <_dtoa_r+0x998>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	f7f8 f894 	bl	8000628 <__aeabi_dmul>
 8008500:	2200      	movs	r2, #0
 8008502:	2300      	movs	r3, #0
 8008504:	4606      	mov	r6, r0
 8008506:	460f      	mov	r7, r1
 8008508:	f7f8 faf6 	bl	8000af8 <__aeabi_dcmpeq>
 800850c:	2800      	cmp	r0, #0
 800850e:	d09e      	beq.n	800844e <_dtoa_r+0x65e>
 8008510:	e7d0      	b.n	80084b4 <_dtoa_r+0x6c4>
 8008512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008514:	2a00      	cmp	r2, #0
 8008516:	f000 80ca 	beq.w	80086ae <_dtoa_r+0x8be>
 800851a:	9a07      	ldr	r2, [sp, #28]
 800851c:	2a01      	cmp	r2, #1
 800851e:	f300 80ad 	bgt.w	800867c <_dtoa_r+0x88c>
 8008522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008524:	2a00      	cmp	r2, #0
 8008526:	f000 80a5 	beq.w	8008674 <_dtoa_r+0x884>
 800852a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800852e:	9e08      	ldr	r6, [sp, #32]
 8008530:	9d05      	ldr	r5, [sp, #20]
 8008532:	9a05      	ldr	r2, [sp, #20]
 8008534:	441a      	add	r2, r3
 8008536:	9205      	str	r2, [sp, #20]
 8008538:	9a06      	ldr	r2, [sp, #24]
 800853a:	2101      	movs	r1, #1
 800853c:	441a      	add	r2, r3
 800853e:	4620      	mov	r0, r4
 8008540:	9206      	str	r2, [sp, #24]
 8008542:	f000 fde3 	bl	800910c <__i2b>
 8008546:	4607      	mov	r7, r0
 8008548:	b165      	cbz	r5, 8008564 <_dtoa_r+0x774>
 800854a:	9b06      	ldr	r3, [sp, #24]
 800854c:	2b00      	cmp	r3, #0
 800854e:	dd09      	ble.n	8008564 <_dtoa_r+0x774>
 8008550:	42ab      	cmp	r3, r5
 8008552:	9a05      	ldr	r2, [sp, #20]
 8008554:	bfa8      	it	ge
 8008556:	462b      	movge	r3, r5
 8008558:	1ad2      	subs	r2, r2, r3
 800855a:	9205      	str	r2, [sp, #20]
 800855c:	9a06      	ldr	r2, [sp, #24]
 800855e:	1aed      	subs	r5, r5, r3
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	9306      	str	r3, [sp, #24]
 8008564:	9b08      	ldr	r3, [sp, #32]
 8008566:	b1f3      	cbz	r3, 80085a6 <_dtoa_r+0x7b6>
 8008568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 80a3 	beq.w	80086b6 <_dtoa_r+0x8c6>
 8008570:	2e00      	cmp	r6, #0
 8008572:	dd10      	ble.n	8008596 <_dtoa_r+0x7a6>
 8008574:	4639      	mov	r1, r7
 8008576:	4632      	mov	r2, r6
 8008578:	4620      	mov	r0, r4
 800857a:	f000 fe87 	bl	800928c <__pow5mult>
 800857e:	4652      	mov	r2, sl
 8008580:	4601      	mov	r1, r0
 8008582:	4607      	mov	r7, r0
 8008584:	4620      	mov	r0, r4
 8008586:	f000 fdd7 	bl	8009138 <__multiply>
 800858a:	4651      	mov	r1, sl
 800858c:	4680      	mov	r8, r0
 800858e:	4620      	mov	r0, r4
 8008590:	f000 fd06 	bl	8008fa0 <_Bfree>
 8008594:	46c2      	mov	sl, r8
 8008596:	9b08      	ldr	r3, [sp, #32]
 8008598:	1b9a      	subs	r2, r3, r6
 800859a:	d004      	beq.n	80085a6 <_dtoa_r+0x7b6>
 800859c:	4651      	mov	r1, sl
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 fe74 	bl	800928c <__pow5mult>
 80085a4:	4682      	mov	sl, r0
 80085a6:	2101      	movs	r1, #1
 80085a8:	4620      	mov	r0, r4
 80085aa:	f000 fdaf 	bl	800910c <__i2b>
 80085ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	4606      	mov	r6, r0
 80085b4:	f340 8081 	ble.w	80086ba <_dtoa_r+0x8ca>
 80085b8:	461a      	mov	r2, r3
 80085ba:	4601      	mov	r1, r0
 80085bc:	4620      	mov	r0, r4
 80085be:	f000 fe65 	bl	800928c <__pow5mult>
 80085c2:	9b07      	ldr	r3, [sp, #28]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	4606      	mov	r6, r0
 80085c8:	dd7a      	ble.n	80086c0 <_dtoa_r+0x8d0>
 80085ca:	f04f 0800 	mov.w	r8, #0
 80085ce:	6933      	ldr	r3, [r6, #16]
 80085d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80085d4:	6918      	ldr	r0, [r3, #16]
 80085d6:	f000 fd4b 	bl	8009070 <__hi0bits>
 80085da:	f1c0 0020 	rsb	r0, r0, #32
 80085de:	9b06      	ldr	r3, [sp, #24]
 80085e0:	4418      	add	r0, r3
 80085e2:	f010 001f 	ands.w	r0, r0, #31
 80085e6:	f000 8094 	beq.w	8008712 <_dtoa_r+0x922>
 80085ea:	f1c0 0320 	rsb	r3, r0, #32
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	f340 8085 	ble.w	80086fe <_dtoa_r+0x90e>
 80085f4:	9b05      	ldr	r3, [sp, #20]
 80085f6:	f1c0 001c 	rsb	r0, r0, #28
 80085fa:	4403      	add	r3, r0
 80085fc:	9305      	str	r3, [sp, #20]
 80085fe:	9b06      	ldr	r3, [sp, #24]
 8008600:	4403      	add	r3, r0
 8008602:	4405      	add	r5, r0
 8008604:	9306      	str	r3, [sp, #24]
 8008606:	9b05      	ldr	r3, [sp, #20]
 8008608:	2b00      	cmp	r3, #0
 800860a:	dd05      	ble.n	8008618 <_dtoa_r+0x828>
 800860c:	4651      	mov	r1, sl
 800860e:	461a      	mov	r2, r3
 8008610:	4620      	mov	r0, r4
 8008612:	f000 fe95 	bl	8009340 <__lshift>
 8008616:	4682      	mov	sl, r0
 8008618:	9b06      	ldr	r3, [sp, #24]
 800861a:	2b00      	cmp	r3, #0
 800861c:	dd05      	ble.n	800862a <_dtoa_r+0x83a>
 800861e:	4631      	mov	r1, r6
 8008620:	461a      	mov	r2, r3
 8008622:	4620      	mov	r0, r4
 8008624:	f000 fe8c 	bl	8009340 <__lshift>
 8008628:	4606      	mov	r6, r0
 800862a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800862c:	2b00      	cmp	r3, #0
 800862e:	d072      	beq.n	8008716 <_dtoa_r+0x926>
 8008630:	4631      	mov	r1, r6
 8008632:	4650      	mov	r0, sl
 8008634:	f000 fef0 	bl	8009418 <__mcmp>
 8008638:	2800      	cmp	r0, #0
 800863a:	da6c      	bge.n	8008716 <_dtoa_r+0x926>
 800863c:	2300      	movs	r3, #0
 800863e:	4651      	mov	r1, sl
 8008640:	220a      	movs	r2, #10
 8008642:	4620      	mov	r0, r4
 8008644:	f000 fcce 	bl	8008fe4 <__multadd>
 8008648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800864a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800864e:	4682      	mov	sl, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 81b0 	beq.w	80089b6 <_dtoa_r+0xbc6>
 8008656:	2300      	movs	r3, #0
 8008658:	4639      	mov	r1, r7
 800865a:	220a      	movs	r2, #10
 800865c:	4620      	mov	r0, r4
 800865e:	f000 fcc1 	bl	8008fe4 <__multadd>
 8008662:	9b01      	ldr	r3, [sp, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	4607      	mov	r7, r0
 8008668:	f300 8096 	bgt.w	8008798 <_dtoa_r+0x9a8>
 800866c:	9b07      	ldr	r3, [sp, #28]
 800866e:	2b02      	cmp	r3, #2
 8008670:	dc59      	bgt.n	8008726 <_dtoa_r+0x936>
 8008672:	e091      	b.n	8008798 <_dtoa_r+0x9a8>
 8008674:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008676:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800867a:	e758      	b.n	800852e <_dtoa_r+0x73e>
 800867c:	9b04      	ldr	r3, [sp, #16]
 800867e:	1e5e      	subs	r6, r3, #1
 8008680:	9b08      	ldr	r3, [sp, #32]
 8008682:	42b3      	cmp	r3, r6
 8008684:	bfbf      	itttt	lt
 8008686:	9b08      	ldrlt	r3, [sp, #32]
 8008688:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800868a:	9608      	strlt	r6, [sp, #32]
 800868c:	1af3      	sublt	r3, r6, r3
 800868e:	bfb4      	ite	lt
 8008690:	18d2      	addlt	r2, r2, r3
 8008692:	1b9e      	subge	r6, r3, r6
 8008694:	9b04      	ldr	r3, [sp, #16]
 8008696:	bfbc      	itt	lt
 8008698:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800869a:	2600      	movlt	r6, #0
 800869c:	2b00      	cmp	r3, #0
 800869e:	bfb7      	itett	lt
 80086a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80086a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80086a8:	1a9d      	sublt	r5, r3, r2
 80086aa:	2300      	movlt	r3, #0
 80086ac:	e741      	b.n	8008532 <_dtoa_r+0x742>
 80086ae:	9e08      	ldr	r6, [sp, #32]
 80086b0:	9d05      	ldr	r5, [sp, #20]
 80086b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80086b4:	e748      	b.n	8008548 <_dtoa_r+0x758>
 80086b6:	9a08      	ldr	r2, [sp, #32]
 80086b8:	e770      	b.n	800859c <_dtoa_r+0x7ac>
 80086ba:	9b07      	ldr	r3, [sp, #28]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	dc19      	bgt.n	80086f4 <_dtoa_r+0x904>
 80086c0:	9b02      	ldr	r3, [sp, #8]
 80086c2:	b9bb      	cbnz	r3, 80086f4 <_dtoa_r+0x904>
 80086c4:	9b03      	ldr	r3, [sp, #12]
 80086c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086ca:	b99b      	cbnz	r3, 80086f4 <_dtoa_r+0x904>
 80086cc:	9b03      	ldr	r3, [sp, #12]
 80086ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086d2:	0d1b      	lsrs	r3, r3, #20
 80086d4:	051b      	lsls	r3, r3, #20
 80086d6:	b183      	cbz	r3, 80086fa <_dtoa_r+0x90a>
 80086d8:	9b05      	ldr	r3, [sp, #20]
 80086da:	3301      	adds	r3, #1
 80086dc:	9305      	str	r3, [sp, #20]
 80086de:	9b06      	ldr	r3, [sp, #24]
 80086e0:	3301      	adds	r3, #1
 80086e2:	9306      	str	r3, [sp, #24]
 80086e4:	f04f 0801 	mov.w	r8, #1
 80086e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f47f af6f 	bne.w	80085ce <_dtoa_r+0x7de>
 80086f0:	2001      	movs	r0, #1
 80086f2:	e774      	b.n	80085de <_dtoa_r+0x7ee>
 80086f4:	f04f 0800 	mov.w	r8, #0
 80086f8:	e7f6      	b.n	80086e8 <_dtoa_r+0x8f8>
 80086fa:	4698      	mov	r8, r3
 80086fc:	e7f4      	b.n	80086e8 <_dtoa_r+0x8f8>
 80086fe:	d082      	beq.n	8008606 <_dtoa_r+0x816>
 8008700:	9a05      	ldr	r2, [sp, #20]
 8008702:	331c      	adds	r3, #28
 8008704:	441a      	add	r2, r3
 8008706:	9205      	str	r2, [sp, #20]
 8008708:	9a06      	ldr	r2, [sp, #24]
 800870a:	441a      	add	r2, r3
 800870c:	441d      	add	r5, r3
 800870e:	9206      	str	r2, [sp, #24]
 8008710:	e779      	b.n	8008606 <_dtoa_r+0x816>
 8008712:	4603      	mov	r3, r0
 8008714:	e7f4      	b.n	8008700 <_dtoa_r+0x910>
 8008716:	9b04      	ldr	r3, [sp, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	dc37      	bgt.n	800878c <_dtoa_r+0x99c>
 800871c:	9b07      	ldr	r3, [sp, #28]
 800871e:	2b02      	cmp	r3, #2
 8008720:	dd34      	ble.n	800878c <_dtoa_r+0x99c>
 8008722:	9b04      	ldr	r3, [sp, #16]
 8008724:	9301      	str	r3, [sp, #4]
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	b963      	cbnz	r3, 8008744 <_dtoa_r+0x954>
 800872a:	4631      	mov	r1, r6
 800872c:	2205      	movs	r2, #5
 800872e:	4620      	mov	r0, r4
 8008730:	f000 fc58 	bl	8008fe4 <__multadd>
 8008734:	4601      	mov	r1, r0
 8008736:	4606      	mov	r6, r0
 8008738:	4650      	mov	r0, sl
 800873a:	f000 fe6d 	bl	8009418 <__mcmp>
 800873e:	2800      	cmp	r0, #0
 8008740:	f73f adbb 	bgt.w	80082ba <_dtoa_r+0x4ca>
 8008744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008746:	9d00      	ldr	r5, [sp, #0]
 8008748:	ea6f 0b03 	mvn.w	fp, r3
 800874c:	f04f 0800 	mov.w	r8, #0
 8008750:	4631      	mov	r1, r6
 8008752:	4620      	mov	r0, r4
 8008754:	f000 fc24 	bl	8008fa0 <_Bfree>
 8008758:	2f00      	cmp	r7, #0
 800875a:	f43f aeab 	beq.w	80084b4 <_dtoa_r+0x6c4>
 800875e:	f1b8 0f00 	cmp.w	r8, #0
 8008762:	d005      	beq.n	8008770 <_dtoa_r+0x980>
 8008764:	45b8      	cmp	r8, r7
 8008766:	d003      	beq.n	8008770 <_dtoa_r+0x980>
 8008768:	4641      	mov	r1, r8
 800876a:	4620      	mov	r0, r4
 800876c:	f000 fc18 	bl	8008fa0 <_Bfree>
 8008770:	4639      	mov	r1, r7
 8008772:	4620      	mov	r0, r4
 8008774:	f000 fc14 	bl	8008fa0 <_Bfree>
 8008778:	e69c      	b.n	80084b4 <_dtoa_r+0x6c4>
 800877a:	2600      	movs	r6, #0
 800877c:	4637      	mov	r7, r6
 800877e:	e7e1      	b.n	8008744 <_dtoa_r+0x954>
 8008780:	46bb      	mov	fp, r7
 8008782:	4637      	mov	r7, r6
 8008784:	e599      	b.n	80082ba <_dtoa_r+0x4ca>
 8008786:	bf00      	nop
 8008788:	40240000 	.word	0x40240000
 800878c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800878e:	2b00      	cmp	r3, #0
 8008790:	f000 80c8 	beq.w	8008924 <_dtoa_r+0xb34>
 8008794:	9b04      	ldr	r3, [sp, #16]
 8008796:	9301      	str	r3, [sp, #4]
 8008798:	2d00      	cmp	r5, #0
 800879a:	dd05      	ble.n	80087a8 <_dtoa_r+0x9b8>
 800879c:	4639      	mov	r1, r7
 800879e:	462a      	mov	r2, r5
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fdcd 	bl	8009340 <__lshift>
 80087a6:	4607      	mov	r7, r0
 80087a8:	f1b8 0f00 	cmp.w	r8, #0
 80087ac:	d05b      	beq.n	8008866 <_dtoa_r+0xa76>
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	4620      	mov	r0, r4
 80087b2:	f000 fbb5 	bl	8008f20 <_Balloc>
 80087b6:	4605      	mov	r5, r0
 80087b8:	b928      	cbnz	r0, 80087c6 <_dtoa_r+0x9d6>
 80087ba:	4b83      	ldr	r3, [pc, #524]	; (80089c8 <_dtoa_r+0xbd8>)
 80087bc:	4602      	mov	r2, r0
 80087be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80087c2:	f7ff bb2e 	b.w	8007e22 <_dtoa_r+0x32>
 80087c6:	693a      	ldr	r2, [r7, #16]
 80087c8:	3202      	adds	r2, #2
 80087ca:	0092      	lsls	r2, r2, #2
 80087cc:	f107 010c 	add.w	r1, r7, #12
 80087d0:	300c      	adds	r0, #12
 80087d2:	f001 f8d3 	bl	800997c <memcpy>
 80087d6:	2201      	movs	r2, #1
 80087d8:	4629      	mov	r1, r5
 80087da:	4620      	mov	r0, r4
 80087dc:	f000 fdb0 	bl	8009340 <__lshift>
 80087e0:	9b00      	ldr	r3, [sp, #0]
 80087e2:	3301      	adds	r3, #1
 80087e4:	9304      	str	r3, [sp, #16]
 80087e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ea:	4413      	add	r3, r2
 80087ec:	9308      	str	r3, [sp, #32]
 80087ee:	9b02      	ldr	r3, [sp, #8]
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	46b8      	mov	r8, r7
 80087f6:	9306      	str	r3, [sp, #24]
 80087f8:	4607      	mov	r7, r0
 80087fa:	9b04      	ldr	r3, [sp, #16]
 80087fc:	4631      	mov	r1, r6
 80087fe:	3b01      	subs	r3, #1
 8008800:	4650      	mov	r0, sl
 8008802:	9301      	str	r3, [sp, #4]
 8008804:	f7ff fa6c 	bl	8007ce0 <quorem>
 8008808:	4641      	mov	r1, r8
 800880a:	9002      	str	r0, [sp, #8]
 800880c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008810:	4650      	mov	r0, sl
 8008812:	f000 fe01 	bl	8009418 <__mcmp>
 8008816:	463a      	mov	r2, r7
 8008818:	9005      	str	r0, [sp, #20]
 800881a:	4631      	mov	r1, r6
 800881c:	4620      	mov	r0, r4
 800881e:	f000 fe17 	bl	8009450 <__mdiff>
 8008822:	68c2      	ldr	r2, [r0, #12]
 8008824:	4605      	mov	r5, r0
 8008826:	bb02      	cbnz	r2, 800886a <_dtoa_r+0xa7a>
 8008828:	4601      	mov	r1, r0
 800882a:	4650      	mov	r0, sl
 800882c:	f000 fdf4 	bl	8009418 <__mcmp>
 8008830:	4602      	mov	r2, r0
 8008832:	4629      	mov	r1, r5
 8008834:	4620      	mov	r0, r4
 8008836:	9209      	str	r2, [sp, #36]	; 0x24
 8008838:	f000 fbb2 	bl	8008fa0 <_Bfree>
 800883c:	9b07      	ldr	r3, [sp, #28]
 800883e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008840:	9d04      	ldr	r5, [sp, #16]
 8008842:	ea43 0102 	orr.w	r1, r3, r2
 8008846:	9b06      	ldr	r3, [sp, #24]
 8008848:	4319      	orrs	r1, r3
 800884a:	d110      	bne.n	800886e <_dtoa_r+0xa7e>
 800884c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008850:	d029      	beq.n	80088a6 <_dtoa_r+0xab6>
 8008852:	9b05      	ldr	r3, [sp, #20]
 8008854:	2b00      	cmp	r3, #0
 8008856:	dd02      	ble.n	800885e <_dtoa_r+0xa6e>
 8008858:	9b02      	ldr	r3, [sp, #8]
 800885a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800885e:	9b01      	ldr	r3, [sp, #4]
 8008860:	f883 9000 	strb.w	r9, [r3]
 8008864:	e774      	b.n	8008750 <_dtoa_r+0x960>
 8008866:	4638      	mov	r0, r7
 8008868:	e7ba      	b.n	80087e0 <_dtoa_r+0x9f0>
 800886a:	2201      	movs	r2, #1
 800886c:	e7e1      	b.n	8008832 <_dtoa_r+0xa42>
 800886e:	9b05      	ldr	r3, [sp, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	db04      	blt.n	800887e <_dtoa_r+0xa8e>
 8008874:	9907      	ldr	r1, [sp, #28]
 8008876:	430b      	orrs	r3, r1
 8008878:	9906      	ldr	r1, [sp, #24]
 800887a:	430b      	orrs	r3, r1
 800887c:	d120      	bne.n	80088c0 <_dtoa_r+0xad0>
 800887e:	2a00      	cmp	r2, #0
 8008880:	dded      	ble.n	800885e <_dtoa_r+0xa6e>
 8008882:	4651      	mov	r1, sl
 8008884:	2201      	movs	r2, #1
 8008886:	4620      	mov	r0, r4
 8008888:	f000 fd5a 	bl	8009340 <__lshift>
 800888c:	4631      	mov	r1, r6
 800888e:	4682      	mov	sl, r0
 8008890:	f000 fdc2 	bl	8009418 <__mcmp>
 8008894:	2800      	cmp	r0, #0
 8008896:	dc03      	bgt.n	80088a0 <_dtoa_r+0xab0>
 8008898:	d1e1      	bne.n	800885e <_dtoa_r+0xa6e>
 800889a:	f019 0f01 	tst.w	r9, #1
 800889e:	d0de      	beq.n	800885e <_dtoa_r+0xa6e>
 80088a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80088a4:	d1d8      	bne.n	8008858 <_dtoa_r+0xa68>
 80088a6:	9a01      	ldr	r2, [sp, #4]
 80088a8:	2339      	movs	r3, #57	; 0x39
 80088aa:	7013      	strb	r3, [r2, #0]
 80088ac:	462b      	mov	r3, r5
 80088ae:	461d      	mov	r5, r3
 80088b0:	3b01      	subs	r3, #1
 80088b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088b6:	2a39      	cmp	r2, #57	; 0x39
 80088b8:	d06c      	beq.n	8008994 <_dtoa_r+0xba4>
 80088ba:	3201      	adds	r2, #1
 80088bc:	701a      	strb	r2, [r3, #0]
 80088be:	e747      	b.n	8008750 <_dtoa_r+0x960>
 80088c0:	2a00      	cmp	r2, #0
 80088c2:	dd07      	ble.n	80088d4 <_dtoa_r+0xae4>
 80088c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80088c8:	d0ed      	beq.n	80088a6 <_dtoa_r+0xab6>
 80088ca:	9a01      	ldr	r2, [sp, #4]
 80088cc:	f109 0301 	add.w	r3, r9, #1
 80088d0:	7013      	strb	r3, [r2, #0]
 80088d2:	e73d      	b.n	8008750 <_dtoa_r+0x960>
 80088d4:	9b04      	ldr	r3, [sp, #16]
 80088d6:	9a08      	ldr	r2, [sp, #32]
 80088d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80088dc:	4293      	cmp	r3, r2
 80088de:	d043      	beq.n	8008968 <_dtoa_r+0xb78>
 80088e0:	4651      	mov	r1, sl
 80088e2:	2300      	movs	r3, #0
 80088e4:	220a      	movs	r2, #10
 80088e6:	4620      	mov	r0, r4
 80088e8:	f000 fb7c 	bl	8008fe4 <__multadd>
 80088ec:	45b8      	cmp	r8, r7
 80088ee:	4682      	mov	sl, r0
 80088f0:	f04f 0300 	mov.w	r3, #0
 80088f4:	f04f 020a 	mov.w	r2, #10
 80088f8:	4641      	mov	r1, r8
 80088fa:	4620      	mov	r0, r4
 80088fc:	d107      	bne.n	800890e <_dtoa_r+0xb1e>
 80088fe:	f000 fb71 	bl	8008fe4 <__multadd>
 8008902:	4680      	mov	r8, r0
 8008904:	4607      	mov	r7, r0
 8008906:	9b04      	ldr	r3, [sp, #16]
 8008908:	3301      	adds	r3, #1
 800890a:	9304      	str	r3, [sp, #16]
 800890c:	e775      	b.n	80087fa <_dtoa_r+0xa0a>
 800890e:	f000 fb69 	bl	8008fe4 <__multadd>
 8008912:	4639      	mov	r1, r7
 8008914:	4680      	mov	r8, r0
 8008916:	2300      	movs	r3, #0
 8008918:	220a      	movs	r2, #10
 800891a:	4620      	mov	r0, r4
 800891c:	f000 fb62 	bl	8008fe4 <__multadd>
 8008920:	4607      	mov	r7, r0
 8008922:	e7f0      	b.n	8008906 <_dtoa_r+0xb16>
 8008924:	9b04      	ldr	r3, [sp, #16]
 8008926:	9301      	str	r3, [sp, #4]
 8008928:	9d00      	ldr	r5, [sp, #0]
 800892a:	4631      	mov	r1, r6
 800892c:	4650      	mov	r0, sl
 800892e:	f7ff f9d7 	bl	8007ce0 <quorem>
 8008932:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008936:	9b00      	ldr	r3, [sp, #0]
 8008938:	f805 9b01 	strb.w	r9, [r5], #1
 800893c:	1aea      	subs	r2, r5, r3
 800893e:	9b01      	ldr	r3, [sp, #4]
 8008940:	4293      	cmp	r3, r2
 8008942:	dd07      	ble.n	8008954 <_dtoa_r+0xb64>
 8008944:	4651      	mov	r1, sl
 8008946:	2300      	movs	r3, #0
 8008948:	220a      	movs	r2, #10
 800894a:	4620      	mov	r0, r4
 800894c:	f000 fb4a 	bl	8008fe4 <__multadd>
 8008950:	4682      	mov	sl, r0
 8008952:	e7ea      	b.n	800892a <_dtoa_r+0xb3a>
 8008954:	9b01      	ldr	r3, [sp, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	bfc8      	it	gt
 800895a:	461d      	movgt	r5, r3
 800895c:	9b00      	ldr	r3, [sp, #0]
 800895e:	bfd8      	it	le
 8008960:	2501      	movle	r5, #1
 8008962:	441d      	add	r5, r3
 8008964:	f04f 0800 	mov.w	r8, #0
 8008968:	4651      	mov	r1, sl
 800896a:	2201      	movs	r2, #1
 800896c:	4620      	mov	r0, r4
 800896e:	f000 fce7 	bl	8009340 <__lshift>
 8008972:	4631      	mov	r1, r6
 8008974:	4682      	mov	sl, r0
 8008976:	f000 fd4f 	bl	8009418 <__mcmp>
 800897a:	2800      	cmp	r0, #0
 800897c:	dc96      	bgt.n	80088ac <_dtoa_r+0xabc>
 800897e:	d102      	bne.n	8008986 <_dtoa_r+0xb96>
 8008980:	f019 0f01 	tst.w	r9, #1
 8008984:	d192      	bne.n	80088ac <_dtoa_r+0xabc>
 8008986:	462b      	mov	r3, r5
 8008988:	461d      	mov	r5, r3
 800898a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800898e:	2a30      	cmp	r2, #48	; 0x30
 8008990:	d0fa      	beq.n	8008988 <_dtoa_r+0xb98>
 8008992:	e6dd      	b.n	8008750 <_dtoa_r+0x960>
 8008994:	9a00      	ldr	r2, [sp, #0]
 8008996:	429a      	cmp	r2, r3
 8008998:	d189      	bne.n	80088ae <_dtoa_r+0xabe>
 800899a:	f10b 0b01 	add.w	fp, fp, #1
 800899e:	2331      	movs	r3, #49	; 0x31
 80089a0:	e796      	b.n	80088d0 <_dtoa_r+0xae0>
 80089a2:	4b0a      	ldr	r3, [pc, #40]	; (80089cc <_dtoa_r+0xbdc>)
 80089a4:	f7ff ba99 	b.w	8007eda <_dtoa_r+0xea>
 80089a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f47f aa6d 	bne.w	8007e8a <_dtoa_r+0x9a>
 80089b0:	4b07      	ldr	r3, [pc, #28]	; (80089d0 <_dtoa_r+0xbe0>)
 80089b2:	f7ff ba92 	b.w	8007eda <_dtoa_r+0xea>
 80089b6:	9b01      	ldr	r3, [sp, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	dcb5      	bgt.n	8008928 <_dtoa_r+0xb38>
 80089bc:	9b07      	ldr	r3, [sp, #28]
 80089be:	2b02      	cmp	r3, #2
 80089c0:	f73f aeb1 	bgt.w	8008726 <_dtoa_r+0x936>
 80089c4:	e7b0      	b.n	8008928 <_dtoa_r+0xb38>
 80089c6:	bf00      	nop
 80089c8:	08009d10 	.word	0x08009d10
 80089cc:	08009c70 	.word	0x08009c70
 80089d0:	08009c94 	.word	0x08009c94

080089d4 <__sfputc_r>:
 80089d4:	6893      	ldr	r3, [r2, #8]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	2b00      	cmp	r3, #0
 80089da:	b410      	push	{r4}
 80089dc:	6093      	str	r3, [r2, #8]
 80089de:	da08      	bge.n	80089f2 <__sfputc_r+0x1e>
 80089e0:	6994      	ldr	r4, [r2, #24]
 80089e2:	42a3      	cmp	r3, r4
 80089e4:	db01      	blt.n	80089ea <__sfputc_r+0x16>
 80089e6:	290a      	cmp	r1, #10
 80089e8:	d103      	bne.n	80089f2 <__sfputc_r+0x1e>
 80089ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089ee:	f000 be56 	b.w	800969e <__swbuf_r>
 80089f2:	6813      	ldr	r3, [r2, #0]
 80089f4:	1c58      	adds	r0, r3, #1
 80089f6:	6010      	str	r0, [r2, #0]
 80089f8:	7019      	strb	r1, [r3, #0]
 80089fa:	4608      	mov	r0, r1
 80089fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <__sfputs_r>:
 8008a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a04:	4606      	mov	r6, r0
 8008a06:	460f      	mov	r7, r1
 8008a08:	4614      	mov	r4, r2
 8008a0a:	18d5      	adds	r5, r2, r3
 8008a0c:	42ac      	cmp	r4, r5
 8008a0e:	d101      	bne.n	8008a14 <__sfputs_r+0x12>
 8008a10:	2000      	movs	r0, #0
 8008a12:	e007      	b.n	8008a24 <__sfputs_r+0x22>
 8008a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a18:	463a      	mov	r2, r7
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f7ff ffda 	bl	80089d4 <__sfputc_r>
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	d1f3      	bne.n	8008a0c <__sfputs_r+0xa>
 8008a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a28 <_vfiprintf_r>:
 8008a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2c:	460d      	mov	r5, r1
 8008a2e:	b09d      	sub	sp, #116	; 0x74
 8008a30:	4614      	mov	r4, r2
 8008a32:	4698      	mov	r8, r3
 8008a34:	4606      	mov	r6, r0
 8008a36:	b118      	cbz	r0, 8008a40 <_vfiprintf_r+0x18>
 8008a38:	6a03      	ldr	r3, [r0, #32]
 8008a3a:	b90b      	cbnz	r3, 8008a40 <_vfiprintf_r+0x18>
 8008a3c:	f7ff f874 	bl	8007b28 <__sinit>
 8008a40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a42:	07d9      	lsls	r1, r3, #31
 8008a44:	d405      	bmi.n	8008a52 <_vfiprintf_r+0x2a>
 8008a46:	89ab      	ldrh	r3, [r5, #12]
 8008a48:	059a      	lsls	r2, r3, #22
 8008a4a:	d402      	bmi.n	8008a52 <_vfiprintf_r+0x2a>
 8008a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a4e:	f7ff f945 	bl	8007cdc <__retarget_lock_acquire_recursive>
 8008a52:	89ab      	ldrh	r3, [r5, #12]
 8008a54:	071b      	lsls	r3, r3, #28
 8008a56:	d501      	bpl.n	8008a5c <_vfiprintf_r+0x34>
 8008a58:	692b      	ldr	r3, [r5, #16]
 8008a5a:	b99b      	cbnz	r3, 8008a84 <_vfiprintf_r+0x5c>
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	4630      	mov	r0, r6
 8008a60:	f000 fe5a 	bl	8009718 <__swsetup_r>
 8008a64:	b170      	cbz	r0, 8008a84 <_vfiprintf_r+0x5c>
 8008a66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a68:	07dc      	lsls	r4, r3, #31
 8008a6a:	d504      	bpl.n	8008a76 <_vfiprintf_r+0x4e>
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a70:	b01d      	add	sp, #116	; 0x74
 8008a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a76:	89ab      	ldrh	r3, [r5, #12]
 8008a78:	0598      	lsls	r0, r3, #22
 8008a7a:	d4f7      	bmi.n	8008a6c <_vfiprintf_r+0x44>
 8008a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a7e:	f7ff f92e 	bl	8007cde <__retarget_lock_release_recursive>
 8008a82:	e7f3      	b.n	8008a6c <_vfiprintf_r+0x44>
 8008a84:	2300      	movs	r3, #0
 8008a86:	9309      	str	r3, [sp, #36]	; 0x24
 8008a88:	2320      	movs	r3, #32
 8008a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a92:	2330      	movs	r3, #48	; 0x30
 8008a94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008c48 <_vfiprintf_r+0x220>
 8008a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a9c:	f04f 0901 	mov.w	r9, #1
 8008aa0:	4623      	mov	r3, r4
 8008aa2:	469a      	mov	sl, r3
 8008aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aa8:	b10a      	cbz	r2, 8008aae <_vfiprintf_r+0x86>
 8008aaa:	2a25      	cmp	r2, #37	; 0x25
 8008aac:	d1f9      	bne.n	8008aa2 <_vfiprintf_r+0x7a>
 8008aae:	ebba 0b04 	subs.w	fp, sl, r4
 8008ab2:	d00b      	beq.n	8008acc <_vfiprintf_r+0xa4>
 8008ab4:	465b      	mov	r3, fp
 8008ab6:	4622      	mov	r2, r4
 8008ab8:	4629      	mov	r1, r5
 8008aba:	4630      	mov	r0, r6
 8008abc:	f7ff ffa1 	bl	8008a02 <__sfputs_r>
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	f000 80a9 	beq.w	8008c18 <_vfiprintf_r+0x1f0>
 8008ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ac8:	445a      	add	r2, fp
 8008aca:	9209      	str	r2, [sp, #36]	; 0x24
 8008acc:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 80a1 	beq.w	8008c18 <_vfiprintf_r+0x1f0>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ae0:	f10a 0a01 	add.w	sl, sl, #1
 8008ae4:	9304      	str	r3, [sp, #16]
 8008ae6:	9307      	str	r3, [sp, #28]
 8008ae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008aec:	931a      	str	r3, [sp, #104]	; 0x68
 8008aee:	4654      	mov	r4, sl
 8008af0:	2205      	movs	r2, #5
 8008af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af6:	4854      	ldr	r0, [pc, #336]	; (8008c48 <_vfiprintf_r+0x220>)
 8008af8:	f7f7 fb82 	bl	8000200 <memchr>
 8008afc:	9a04      	ldr	r2, [sp, #16]
 8008afe:	b9d8      	cbnz	r0, 8008b38 <_vfiprintf_r+0x110>
 8008b00:	06d1      	lsls	r1, r2, #27
 8008b02:	bf44      	itt	mi
 8008b04:	2320      	movmi	r3, #32
 8008b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b0a:	0713      	lsls	r3, r2, #28
 8008b0c:	bf44      	itt	mi
 8008b0e:	232b      	movmi	r3, #43	; 0x2b
 8008b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b14:	f89a 3000 	ldrb.w	r3, [sl]
 8008b18:	2b2a      	cmp	r3, #42	; 0x2a
 8008b1a:	d015      	beq.n	8008b48 <_vfiprintf_r+0x120>
 8008b1c:	9a07      	ldr	r2, [sp, #28]
 8008b1e:	4654      	mov	r4, sl
 8008b20:	2000      	movs	r0, #0
 8008b22:	f04f 0c0a 	mov.w	ip, #10
 8008b26:	4621      	mov	r1, r4
 8008b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b2c:	3b30      	subs	r3, #48	; 0x30
 8008b2e:	2b09      	cmp	r3, #9
 8008b30:	d94d      	bls.n	8008bce <_vfiprintf_r+0x1a6>
 8008b32:	b1b0      	cbz	r0, 8008b62 <_vfiprintf_r+0x13a>
 8008b34:	9207      	str	r2, [sp, #28]
 8008b36:	e014      	b.n	8008b62 <_vfiprintf_r+0x13a>
 8008b38:	eba0 0308 	sub.w	r3, r0, r8
 8008b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b40:	4313      	orrs	r3, r2
 8008b42:	9304      	str	r3, [sp, #16]
 8008b44:	46a2      	mov	sl, r4
 8008b46:	e7d2      	b.n	8008aee <_vfiprintf_r+0xc6>
 8008b48:	9b03      	ldr	r3, [sp, #12]
 8008b4a:	1d19      	adds	r1, r3, #4
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	9103      	str	r1, [sp, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	bfbb      	ittet	lt
 8008b54:	425b      	neglt	r3, r3
 8008b56:	f042 0202 	orrlt.w	r2, r2, #2
 8008b5a:	9307      	strge	r3, [sp, #28]
 8008b5c:	9307      	strlt	r3, [sp, #28]
 8008b5e:	bfb8      	it	lt
 8008b60:	9204      	strlt	r2, [sp, #16]
 8008b62:	7823      	ldrb	r3, [r4, #0]
 8008b64:	2b2e      	cmp	r3, #46	; 0x2e
 8008b66:	d10c      	bne.n	8008b82 <_vfiprintf_r+0x15a>
 8008b68:	7863      	ldrb	r3, [r4, #1]
 8008b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b6c:	d134      	bne.n	8008bd8 <_vfiprintf_r+0x1b0>
 8008b6e:	9b03      	ldr	r3, [sp, #12]
 8008b70:	1d1a      	adds	r2, r3, #4
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	9203      	str	r2, [sp, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bfb8      	it	lt
 8008b7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b7e:	3402      	adds	r4, #2
 8008b80:	9305      	str	r3, [sp, #20]
 8008b82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008c58 <_vfiprintf_r+0x230>
 8008b86:	7821      	ldrb	r1, [r4, #0]
 8008b88:	2203      	movs	r2, #3
 8008b8a:	4650      	mov	r0, sl
 8008b8c:	f7f7 fb38 	bl	8000200 <memchr>
 8008b90:	b138      	cbz	r0, 8008ba2 <_vfiprintf_r+0x17a>
 8008b92:	9b04      	ldr	r3, [sp, #16]
 8008b94:	eba0 000a 	sub.w	r0, r0, sl
 8008b98:	2240      	movs	r2, #64	; 0x40
 8008b9a:	4082      	lsls	r2, r0
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	3401      	adds	r4, #1
 8008ba0:	9304      	str	r3, [sp, #16]
 8008ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba6:	4829      	ldr	r0, [pc, #164]	; (8008c4c <_vfiprintf_r+0x224>)
 8008ba8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bac:	2206      	movs	r2, #6
 8008bae:	f7f7 fb27 	bl	8000200 <memchr>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d03f      	beq.n	8008c36 <_vfiprintf_r+0x20e>
 8008bb6:	4b26      	ldr	r3, [pc, #152]	; (8008c50 <_vfiprintf_r+0x228>)
 8008bb8:	bb1b      	cbnz	r3, 8008c02 <_vfiprintf_r+0x1da>
 8008bba:	9b03      	ldr	r3, [sp, #12]
 8008bbc:	3307      	adds	r3, #7
 8008bbe:	f023 0307 	bic.w	r3, r3, #7
 8008bc2:	3308      	adds	r3, #8
 8008bc4:	9303      	str	r3, [sp, #12]
 8008bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc8:	443b      	add	r3, r7
 8008bca:	9309      	str	r3, [sp, #36]	; 0x24
 8008bcc:	e768      	b.n	8008aa0 <_vfiprintf_r+0x78>
 8008bce:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	2001      	movs	r0, #1
 8008bd6:	e7a6      	b.n	8008b26 <_vfiprintf_r+0xfe>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	3401      	adds	r4, #1
 8008bdc:	9305      	str	r3, [sp, #20]
 8008bde:	4619      	mov	r1, r3
 8008be0:	f04f 0c0a 	mov.w	ip, #10
 8008be4:	4620      	mov	r0, r4
 8008be6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bea:	3a30      	subs	r2, #48	; 0x30
 8008bec:	2a09      	cmp	r2, #9
 8008bee:	d903      	bls.n	8008bf8 <_vfiprintf_r+0x1d0>
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d0c6      	beq.n	8008b82 <_vfiprintf_r+0x15a>
 8008bf4:	9105      	str	r1, [sp, #20]
 8008bf6:	e7c4      	b.n	8008b82 <_vfiprintf_r+0x15a>
 8008bf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e7f0      	b.n	8008be4 <_vfiprintf_r+0x1bc>
 8008c02:	ab03      	add	r3, sp, #12
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	462a      	mov	r2, r5
 8008c08:	4b12      	ldr	r3, [pc, #72]	; (8008c54 <_vfiprintf_r+0x22c>)
 8008c0a:	a904      	add	r1, sp, #16
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f7fe fb4b 	bl	80072a8 <_printf_float>
 8008c12:	4607      	mov	r7, r0
 8008c14:	1c78      	adds	r0, r7, #1
 8008c16:	d1d6      	bne.n	8008bc6 <_vfiprintf_r+0x19e>
 8008c18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c1a:	07d9      	lsls	r1, r3, #31
 8008c1c:	d405      	bmi.n	8008c2a <_vfiprintf_r+0x202>
 8008c1e:	89ab      	ldrh	r3, [r5, #12]
 8008c20:	059a      	lsls	r2, r3, #22
 8008c22:	d402      	bmi.n	8008c2a <_vfiprintf_r+0x202>
 8008c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c26:	f7ff f85a 	bl	8007cde <__retarget_lock_release_recursive>
 8008c2a:	89ab      	ldrh	r3, [r5, #12]
 8008c2c:	065b      	lsls	r3, r3, #25
 8008c2e:	f53f af1d 	bmi.w	8008a6c <_vfiprintf_r+0x44>
 8008c32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c34:	e71c      	b.n	8008a70 <_vfiprintf_r+0x48>
 8008c36:	ab03      	add	r3, sp, #12
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	462a      	mov	r2, r5
 8008c3c:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <_vfiprintf_r+0x22c>)
 8008c3e:	a904      	add	r1, sp, #16
 8008c40:	4630      	mov	r0, r6
 8008c42:	f7fe fdd5 	bl	80077f0 <_printf_i>
 8008c46:	e7e4      	b.n	8008c12 <_vfiprintf_r+0x1ea>
 8008c48:	08009d21 	.word	0x08009d21
 8008c4c:	08009d2b 	.word	0x08009d2b
 8008c50:	080072a9 	.word	0x080072a9
 8008c54:	08008a03 	.word	0x08008a03
 8008c58:	08009d27 	.word	0x08009d27

08008c5c <malloc>:
 8008c5c:	4b02      	ldr	r3, [pc, #8]	; (8008c68 <malloc+0xc>)
 8008c5e:	4601      	mov	r1, r0
 8008c60:	6818      	ldr	r0, [r3, #0]
 8008c62:	f000 b823 	b.w	8008cac <_malloc_r>
 8008c66:	bf00      	nop
 8008c68:	20000068 	.word	0x20000068

08008c6c <sbrk_aligned>:
 8008c6c:	b570      	push	{r4, r5, r6, lr}
 8008c6e:	4e0e      	ldr	r6, [pc, #56]	; (8008ca8 <sbrk_aligned+0x3c>)
 8008c70:	460c      	mov	r4, r1
 8008c72:	6831      	ldr	r1, [r6, #0]
 8008c74:	4605      	mov	r5, r0
 8008c76:	b911      	cbnz	r1, 8008c7e <sbrk_aligned+0x12>
 8008c78:	f000 fe5e 	bl	8009938 <_sbrk_r>
 8008c7c:	6030      	str	r0, [r6, #0]
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4628      	mov	r0, r5
 8008c82:	f000 fe59 	bl	8009938 <_sbrk_r>
 8008c86:	1c43      	adds	r3, r0, #1
 8008c88:	d00a      	beq.n	8008ca0 <sbrk_aligned+0x34>
 8008c8a:	1cc4      	adds	r4, r0, #3
 8008c8c:	f024 0403 	bic.w	r4, r4, #3
 8008c90:	42a0      	cmp	r0, r4
 8008c92:	d007      	beq.n	8008ca4 <sbrk_aligned+0x38>
 8008c94:	1a21      	subs	r1, r4, r0
 8008c96:	4628      	mov	r0, r5
 8008c98:	f000 fe4e 	bl	8009938 <_sbrk_r>
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	d101      	bne.n	8008ca4 <sbrk_aligned+0x38>
 8008ca0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	bd70      	pop	{r4, r5, r6, pc}
 8008ca8:	200005b8 	.word	0x200005b8

08008cac <_malloc_r>:
 8008cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb0:	1ccd      	adds	r5, r1, #3
 8008cb2:	f025 0503 	bic.w	r5, r5, #3
 8008cb6:	3508      	adds	r5, #8
 8008cb8:	2d0c      	cmp	r5, #12
 8008cba:	bf38      	it	cc
 8008cbc:	250c      	movcc	r5, #12
 8008cbe:	2d00      	cmp	r5, #0
 8008cc0:	4607      	mov	r7, r0
 8008cc2:	db01      	blt.n	8008cc8 <_malloc_r+0x1c>
 8008cc4:	42a9      	cmp	r1, r5
 8008cc6:	d905      	bls.n	8008cd4 <_malloc_r+0x28>
 8008cc8:	230c      	movs	r3, #12
 8008cca:	603b      	str	r3, [r7, #0]
 8008ccc:	2600      	movs	r6, #0
 8008cce:	4630      	mov	r0, r6
 8008cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008da8 <_malloc_r+0xfc>
 8008cd8:	f000 f916 	bl	8008f08 <__malloc_lock>
 8008cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8008ce0:	461c      	mov	r4, r3
 8008ce2:	bb5c      	cbnz	r4, 8008d3c <_malloc_r+0x90>
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	f7ff ffc0 	bl	8008c6c <sbrk_aligned>
 8008cec:	1c43      	adds	r3, r0, #1
 8008cee:	4604      	mov	r4, r0
 8008cf0:	d155      	bne.n	8008d9e <_malloc_r+0xf2>
 8008cf2:	f8d8 4000 	ldr.w	r4, [r8]
 8008cf6:	4626      	mov	r6, r4
 8008cf8:	2e00      	cmp	r6, #0
 8008cfa:	d145      	bne.n	8008d88 <_malloc_r+0xdc>
 8008cfc:	2c00      	cmp	r4, #0
 8008cfe:	d048      	beq.n	8008d92 <_malloc_r+0xe6>
 8008d00:	6823      	ldr	r3, [r4, #0]
 8008d02:	4631      	mov	r1, r6
 8008d04:	4638      	mov	r0, r7
 8008d06:	eb04 0903 	add.w	r9, r4, r3
 8008d0a:	f000 fe15 	bl	8009938 <_sbrk_r>
 8008d0e:	4581      	cmp	r9, r0
 8008d10:	d13f      	bne.n	8008d92 <_malloc_r+0xe6>
 8008d12:	6821      	ldr	r1, [r4, #0]
 8008d14:	1a6d      	subs	r5, r5, r1
 8008d16:	4629      	mov	r1, r5
 8008d18:	4638      	mov	r0, r7
 8008d1a:	f7ff ffa7 	bl	8008c6c <sbrk_aligned>
 8008d1e:	3001      	adds	r0, #1
 8008d20:	d037      	beq.n	8008d92 <_malloc_r+0xe6>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	442b      	add	r3, r5
 8008d26:	6023      	str	r3, [r4, #0]
 8008d28:	f8d8 3000 	ldr.w	r3, [r8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d038      	beq.n	8008da2 <_malloc_r+0xf6>
 8008d30:	685a      	ldr	r2, [r3, #4]
 8008d32:	42a2      	cmp	r2, r4
 8008d34:	d12b      	bne.n	8008d8e <_malloc_r+0xe2>
 8008d36:	2200      	movs	r2, #0
 8008d38:	605a      	str	r2, [r3, #4]
 8008d3a:	e00f      	b.n	8008d5c <_malloc_r+0xb0>
 8008d3c:	6822      	ldr	r2, [r4, #0]
 8008d3e:	1b52      	subs	r2, r2, r5
 8008d40:	d41f      	bmi.n	8008d82 <_malloc_r+0xd6>
 8008d42:	2a0b      	cmp	r2, #11
 8008d44:	d917      	bls.n	8008d76 <_malloc_r+0xca>
 8008d46:	1961      	adds	r1, r4, r5
 8008d48:	42a3      	cmp	r3, r4
 8008d4a:	6025      	str	r5, [r4, #0]
 8008d4c:	bf18      	it	ne
 8008d4e:	6059      	strne	r1, [r3, #4]
 8008d50:	6863      	ldr	r3, [r4, #4]
 8008d52:	bf08      	it	eq
 8008d54:	f8c8 1000 	streq.w	r1, [r8]
 8008d58:	5162      	str	r2, [r4, r5]
 8008d5a:	604b      	str	r3, [r1, #4]
 8008d5c:	4638      	mov	r0, r7
 8008d5e:	f104 060b 	add.w	r6, r4, #11
 8008d62:	f000 f8d7 	bl	8008f14 <__malloc_unlock>
 8008d66:	f026 0607 	bic.w	r6, r6, #7
 8008d6a:	1d23      	adds	r3, r4, #4
 8008d6c:	1af2      	subs	r2, r6, r3
 8008d6e:	d0ae      	beq.n	8008cce <_malloc_r+0x22>
 8008d70:	1b9b      	subs	r3, r3, r6
 8008d72:	50a3      	str	r3, [r4, r2]
 8008d74:	e7ab      	b.n	8008cce <_malloc_r+0x22>
 8008d76:	42a3      	cmp	r3, r4
 8008d78:	6862      	ldr	r2, [r4, #4]
 8008d7a:	d1dd      	bne.n	8008d38 <_malloc_r+0x8c>
 8008d7c:	f8c8 2000 	str.w	r2, [r8]
 8008d80:	e7ec      	b.n	8008d5c <_malloc_r+0xb0>
 8008d82:	4623      	mov	r3, r4
 8008d84:	6864      	ldr	r4, [r4, #4]
 8008d86:	e7ac      	b.n	8008ce2 <_malloc_r+0x36>
 8008d88:	4634      	mov	r4, r6
 8008d8a:	6876      	ldr	r6, [r6, #4]
 8008d8c:	e7b4      	b.n	8008cf8 <_malloc_r+0x4c>
 8008d8e:	4613      	mov	r3, r2
 8008d90:	e7cc      	b.n	8008d2c <_malloc_r+0x80>
 8008d92:	230c      	movs	r3, #12
 8008d94:	603b      	str	r3, [r7, #0]
 8008d96:	4638      	mov	r0, r7
 8008d98:	f000 f8bc 	bl	8008f14 <__malloc_unlock>
 8008d9c:	e797      	b.n	8008cce <_malloc_r+0x22>
 8008d9e:	6025      	str	r5, [r4, #0]
 8008da0:	e7dc      	b.n	8008d5c <_malloc_r+0xb0>
 8008da2:	605b      	str	r3, [r3, #4]
 8008da4:	deff      	udf	#255	; 0xff
 8008da6:	bf00      	nop
 8008da8:	200005b4 	.word	0x200005b4

08008dac <__sflush_r>:
 8008dac:	898a      	ldrh	r2, [r1, #12]
 8008dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db2:	4605      	mov	r5, r0
 8008db4:	0710      	lsls	r0, r2, #28
 8008db6:	460c      	mov	r4, r1
 8008db8:	d458      	bmi.n	8008e6c <__sflush_r+0xc0>
 8008dba:	684b      	ldr	r3, [r1, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	dc05      	bgt.n	8008dcc <__sflush_r+0x20>
 8008dc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	dc02      	bgt.n	8008dcc <__sflush_r+0x20>
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dce:	2e00      	cmp	r6, #0
 8008dd0:	d0f9      	beq.n	8008dc6 <__sflush_r+0x1a>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008dd8:	682f      	ldr	r7, [r5, #0]
 8008dda:	6a21      	ldr	r1, [r4, #32]
 8008ddc:	602b      	str	r3, [r5, #0]
 8008dde:	d032      	beq.n	8008e46 <__sflush_r+0x9a>
 8008de0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	075a      	lsls	r2, r3, #29
 8008de6:	d505      	bpl.n	8008df4 <__sflush_r+0x48>
 8008de8:	6863      	ldr	r3, [r4, #4]
 8008dea:	1ac0      	subs	r0, r0, r3
 8008dec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dee:	b10b      	cbz	r3, 8008df4 <__sflush_r+0x48>
 8008df0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008df2:	1ac0      	subs	r0, r0, r3
 8008df4:	2300      	movs	r3, #0
 8008df6:	4602      	mov	r2, r0
 8008df8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dfa:	6a21      	ldr	r1, [r4, #32]
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	47b0      	blx	r6
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	d106      	bne.n	8008e14 <__sflush_r+0x68>
 8008e06:	6829      	ldr	r1, [r5, #0]
 8008e08:	291d      	cmp	r1, #29
 8008e0a:	d82b      	bhi.n	8008e64 <__sflush_r+0xb8>
 8008e0c:	4a29      	ldr	r2, [pc, #164]	; (8008eb4 <__sflush_r+0x108>)
 8008e0e:	410a      	asrs	r2, r1
 8008e10:	07d6      	lsls	r6, r2, #31
 8008e12:	d427      	bmi.n	8008e64 <__sflush_r+0xb8>
 8008e14:	2200      	movs	r2, #0
 8008e16:	6062      	str	r2, [r4, #4]
 8008e18:	04d9      	lsls	r1, r3, #19
 8008e1a:	6922      	ldr	r2, [r4, #16]
 8008e1c:	6022      	str	r2, [r4, #0]
 8008e1e:	d504      	bpl.n	8008e2a <__sflush_r+0x7e>
 8008e20:	1c42      	adds	r2, r0, #1
 8008e22:	d101      	bne.n	8008e28 <__sflush_r+0x7c>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	b903      	cbnz	r3, 8008e2a <__sflush_r+0x7e>
 8008e28:	6560      	str	r0, [r4, #84]	; 0x54
 8008e2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e2c:	602f      	str	r7, [r5, #0]
 8008e2e:	2900      	cmp	r1, #0
 8008e30:	d0c9      	beq.n	8008dc6 <__sflush_r+0x1a>
 8008e32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e36:	4299      	cmp	r1, r3
 8008e38:	d002      	beq.n	8008e40 <__sflush_r+0x94>
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	f000 fde0 	bl	8009a00 <_free_r>
 8008e40:	2000      	movs	r0, #0
 8008e42:	6360      	str	r0, [r4, #52]	; 0x34
 8008e44:	e7c0      	b.n	8008dc8 <__sflush_r+0x1c>
 8008e46:	2301      	movs	r3, #1
 8008e48:	4628      	mov	r0, r5
 8008e4a:	47b0      	blx	r6
 8008e4c:	1c41      	adds	r1, r0, #1
 8008e4e:	d1c8      	bne.n	8008de2 <__sflush_r+0x36>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d0c5      	beq.n	8008de2 <__sflush_r+0x36>
 8008e56:	2b1d      	cmp	r3, #29
 8008e58:	d001      	beq.n	8008e5e <__sflush_r+0xb2>
 8008e5a:	2b16      	cmp	r3, #22
 8008e5c:	d101      	bne.n	8008e62 <__sflush_r+0xb6>
 8008e5e:	602f      	str	r7, [r5, #0]
 8008e60:	e7b1      	b.n	8008dc6 <__sflush_r+0x1a>
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e68:	81a3      	strh	r3, [r4, #12]
 8008e6a:	e7ad      	b.n	8008dc8 <__sflush_r+0x1c>
 8008e6c:	690f      	ldr	r7, [r1, #16]
 8008e6e:	2f00      	cmp	r7, #0
 8008e70:	d0a9      	beq.n	8008dc6 <__sflush_r+0x1a>
 8008e72:	0793      	lsls	r3, r2, #30
 8008e74:	680e      	ldr	r6, [r1, #0]
 8008e76:	bf08      	it	eq
 8008e78:	694b      	ldreq	r3, [r1, #20]
 8008e7a:	600f      	str	r7, [r1, #0]
 8008e7c:	bf18      	it	ne
 8008e7e:	2300      	movne	r3, #0
 8008e80:	eba6 0807 	sub.w	r8, r6, r7
 8008e84:	608b      	str	r3, [r1, #8]
 8008e86:	f1b8 0f00 	cmp.w	r8, #0
 8008e8a:	dd9c      	ble.n	8008dc6 <__sflush_r+0x1a>
 8008e8c:	6a21      	ldr	r1, [r4, #32]
 8008e8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e90:	4643      	mov	r3, r8
 8008e92:	463a      	mov	r2, r7
 8008e94:	4628      	mov	r0, r5
 8008e96:	47b0      	blx	r6
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	dc06      	bgt.n	8008eaa <__sflush_r+0xfe>
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ea2:	81a3      	strh	r3, [r4, #12]
 8008ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ea8:	e78e      	b.n	8008dc8 <__sflush_r+0x1c>
 8008eaa:	4407      	add	r7, r0
 8008eac:	eba8 0800 	sub.w	r8, r8, r0
 8008eb0:	e7e9      	b.n	8008e86 <__sflush_r+0xda>
 8008eb2:	bf00      	nop
 8008eb4:	dfbffffe 	.word	0xdfbffffe

08008eb8 <_fflush_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	690b      	ldr	r3, [r1, #16]
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	b913      	cbnz	r3, 8008ec8 <_fflush_r+0x10>
 8008ec2:	2500      	movs	r5, #0
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	b118      	cbz	r0, 8008ed2 <_fflush_r+0x1a>
 8008eca:	6a03      	ldr	r3, [r0, #32]
 8008ecc:	b90b      	cbnz	r3, 8008ed2 <_fflush_r+0x1a>
 8008ece:	f7fe fe2b 	bl	8007b28 <__sinit>
 8008ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d0f3      	beq.n	8008ec2 <_fflush_r+0xa>
 8008eda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008edc:	07d0      	lsls	r0, r2, #31
 8008ede:	d404      	bmi.n	8008eea <_fflush_r+0x32>
 8008ee0:	0599      	lsls	r1, r3, #22
 8008ee2:	d402      	bmi.n	8008eea <_fflush_r+0x32>
 8008ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ee6:	f7fe fef9 	bl	8007cdc <__retarget_lock_acquire_recursive>
 8008eea:	4628      	mov	r0, r5
 8008eec:	4621      	mov	r1, r4
 8008eee:	f7ff ff5d 	bl	8008dac <__sflush_r>
 8008ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ef4:	07da      	lsls	r2, r3, #31
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	d4e4      	bmi.n	8008ec4 <_fflush_r+0xc>
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	059b      	lsls	r3, r3, #22
 8008efe:	d4e1      	bmi.n	8008ec4 <_fflush_r+0xc>
 8008f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f02:	f7fe feec 	bl	8007cde <__retarget_lock_release_recursive>
 8008f06:	e7dd      	b.n	8008ec4 <_fflush_r+0xc>

08008f08 <__malloc_lock>:
 8008f08:	4801      	ldr	r0, [pc, #4]	; (8008f10 <__malloc_lock+0x8>)
 8008f0a:	f7fe bee7 	b.w	8007cdc <__retarget_lock_acquire_recursive>
 8008f0e:	bf00      	nop
 8008f10:	200005b0 	.word	0x200005b0

08008f14 <__malloc_unlock>:
 8008f14:	4801      	ldr	r0, [pc, #4]	; (8008f1c <__malloc_unlock+0x8>)
 8008f16:	f7fe bee2 	b.w	8007cde <__retarget_lock_release_recursive>
 8008f1a:	bf00      	nop
 8008f1c:	200005b0 	.word	0x200005b0

08008f20 <_Balloc>:
 8008f20:	b570      	push	{r4, r5, r6, lr}
 8008f22:	69c6      	ldr	r6, [r0, #28]
 8008f24:	4604      	mov	r4, r0
 8008f26:	460d      	mov	r5, r1
 8008f28:	b976      	cbnz	r6, 8008f48 <_Balloc+0x28>
 8008f2a:	2010      	movs	r0, #16
 8008f2c:	f7ff fe96 	bl	8008c5c <malloc>
 8008f30:	4602      	mov	r2, r0
 8008f32:	61e0      	str	r0, [r4, #28]
 8008f34:	b920      	cbnz	r0, 8008f40 <_Balloc+0x20>
 8008f36:	4b18      	ldr	r3, [pc, #96]	; (8008f98 <_Balloc+0x78>)
 8008f38:	4818      	ldr	r0, [pc, #96]	; (8008f9c <_Balloc+0x7c>)
 8008f3a:	216b      	movs	r1, #107	; 0x6b
 8008f3c:	f000 fd2c 	bl	8009998 <__assert_func>
 8008f40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f44:	6006      	str	r6, [r0, #0]
 8008f46:	60c6      	str	r6, [r0, #12]
 8008f48:	69e6      	ldr	r6, [r4, #28]
 8008f4a:	68f3      	ldr	r3, [r6, #12]
 8008f4c:	b183      	cbz	r3, 8008f70 <_Balloc+0x50>
 8008f4e:	69e3      	ldr	r3, [r4, #28]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f56:	b9b8      	cbnz	r0, 8008f88 <_Balloc+0x68>
 8008f58:	2101      	movs	r1, #1
 8008f5a:	fa01 f605 	lsl.w	r6, r1, r5
 8008f5e:	1d72      	adds	r2, r6, #5
 8008f60:	0092      	lsls	r2, r2, #2
 8008f62:	4620      	mov	r0, r4
 8008f64:	f000 fd36 	bl	80099d4 <_calloc_r>
 8008f68:	b160      	cbz	r0, 8008f84 <_Balloc+0x64>
 8008f6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f6e:	e00e      	b.n	8008f8e <_Balloc+0x6e>
 8008f70:	2221      	movs	r2, #33	; 0x21
 8008f72:	2104      	movs	r1, #4
 8008f74:	4620      	mov	r0, r4
 8008f76:	f000 fd2d 	bl	80099d4 <_calloc_r>
 8008f7a:	69e3      	ldr	r3, [r4, #28]
 8008f7c:	60f0      	str	r0, [r6, #12]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e4      	bne.n	8008f4e <_Balloc+0x2e>
 8008f84:	2000      	movs	r0, #0
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
 8008f88:	6802      	ldr	r2, [r0, #0]
 8008f8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f94:	e7f7      	b.n	8008f86 <_Balloc+0x66>
 8008f96:	bf00      	nop
 8008f98:	08009ca1 	.word	0x08009ca1
 8008f9c:	08009d32 	.word	0x08009d32

08008fa0 <_Bfree>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	69c6      	ldr	r6, [r0, #28]
 8008fa4:	4605      	mov	r5, r0
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	b976      	cbnz	r6, 8008fc8 <_Bfree+0x28>
 8008faa:	2010      	movs	r0, #16
 8008fac:	f7ff fe56 	bl	8008c5c <malloc>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	61e8      	str	r0, [r5, #28]
 8008fb4:	b920      	cbnz	r0, 8008fc0 <_Bfree+0x20>
 8008fb6:	4b09      	ldr	r3, [pc, #36]	; (8008fdc <_Bfree+0x3c>)
 8008fb8:	4809      	ldr	r0, [pc, #36]	; (8008fe0 <_Bfree+0x40>)
 8008fba:	218f      	movs	r1, #143	; 0x8f
 8008fbc:	f000 fcec 	bl	8009998 <__assert_func>
 8008fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fc4:	6006      	str	r6, [r0, #0]
 8008fc6:	60c6      	str	r6, [r0, #12]
 8008fc8:	b13c      	cbz	r4, 8008fda <_Bfree+0x3a>
 8008fca:	69eb      	ldr	r3, [r5, #28]
 8008fcc:	6862      	ldr	r2, [r4, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fd4:	6021      	str	r1, [r4, #0]
 8008fd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fda:	bd70      	pop	{r4, r5, r6, pc}
 8008fdc:	08009ca1 	.word	0x08009ca1
 8008fe0:	08009d32 	.word	0x08009d32

08008fe4 <__multadd>:
 8008fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe8:	690d      	ldr	r5, [r1, #16]
 8008fea:	4607      	mov	r7, r0
 8008fec:	460c      	mov	r4, r1
 8008fee:	461e      	mov	r6, r3
 8008ff0:	f101 0c14 	add.w	ip, r1, #20
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	f8dc 3000 	ldr.w	r3, [ip]
 8008ffa:	b299      	uxth	r1, r3
 8008ffc:	fb02 6101 	mla	r1, r2, r1, r6
 8009000:	0c1e      	lsrs	r6, r3, #16
 8009002:	0c0b      	lsrs	r3, r1, #16
 8009004:	fb02 3306 	mla	r3, r2, r6, r3
 8009008:	b289      	uxth	r1, r1
 800900a:	3001      	adds	r0, #1
 800900c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009010:	4285      	cmp	r5, r0
 8009012:	f84c 1b04 	str.w	r1, [ip], #4
 8009016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800901a:	dcec      	bgt.n	8008ff6 <__multadd+0x12>
 800901c:	b30e      	cbz	r6, 8009062 <__multadd+0x7e>
 800901e:	68a3      	ldr	r3, [r4, #8]
 8009020:	42ab      	cmp	r3, r5
 8009022:	dc19      	bgt.n	8009058 <__multadd+0x74>
 8009024:	6861      	ldr	r1, [r4, #4]
 8009026:	4638      	mov	r0, r7
 8009028:	3101      	adds	r1, #1
 800902a:	f7ff ff79 	bl	8008f20 <_Balloc>
 800902e:	4680      	mov	r8, r0
 8009030:	b928      	cbnz	r0, 800903e <__multadd+0x5a>
 8009032:	4602      	mov	r2, r0
 8009034:	4b0c      	ldr	r3, [pc, #48]	; (8009068 <__multadd+0x84>)
 8009036:	480d      	ldr	r0, [pc, #52]	; (800906c <__multadd+0x88>)
 8009038:	21ba      	movs	r1, #186	; 0xba
 800903a:	f000 fcad 	bl	8009998 <__assert_func>
 800903e:	6922      	ldr	r2, [r4, #16]
 8009040:	3202      	adds	r2, #2
 8009042:	f104 010c 	add.w	r1, r4, #12
 8009046:	0092      	lsls	r2, r2, #2
 8009048:	300c      	adds	r0, #12
 800904a:	f000 fc97 	bl	800997c <memcpy>
 800904e:	4621      	mov	r1, r4
 8009050:	4638      	mov	r0, r7
 8009052:	f7ff ffa5 	bl	8008fa0 <_Bfree>
 8009056:	4644      	mov	r4, r8
 8009058:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800905c:	3501      	adds	r5, #1
 800905e:	615e      	str	r6, [r3, #20]
 8009060:	6125      	str	r5, [r4, #16]
 8009062:	4620      	mov	r0, r4
 8009064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009068:	08009d10 	.word	0x08009d10
 800906c:	08009d32 	.word	0x08009d32

08009070 <__hi0bits>:
 8009070:	0c03      	lsrs	r3, r0, #16
 8009072:	041b      	lsls	r3, r3, #16
 8009074:	b9d3      	cbnz	r3, 80090ac <__hi0bits+0x3c>
 8009076:	0400      	lsls	r0, r0, #16
 8009078:	2310      	movs	r3, #16
 800907a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800907e:	bf04      	itt	eq
 8009080:	0200      	lsleq	r0, r0, #8
 8009082:	3308      	addeq	r3, #8
 8009084:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009088:	bf04      	itt	eq
 800908a:	0100      	lsleq	r0, r0, #4
 800908c:	3304      	addeq	r3, #4
 800908e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009092:	bf04      	itt	eq
 8009094:	0080      	lsleq	r0, r0, #2
 8009096:	3302      	addeq	r3, #2
 8009098:	2800      	cmp	r0, #0
 800909a:	db05      	blt.n	80090a8 <__hi0bits+0x38>
 800909c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80090a0:	f103 0301 	add.w	r3, r3, #1
 80090a4:	bf08      	it	eq
 80090a6:	2320      	moveq	r3, #32
 80090a8:	4618      	mov	r0, r3
 80090aa:	4770      	bx	lr
 80090ac:	2300      	movs	r3, #0
 80090ae:	e7e4      	b.n	800907a <__hi0bits+0xa>

080090b0 <__lo0bits>:
 80090b0:	6803      	ldr	r3, [r0, #0]
 80090b2:	f013 0207 	ands.w	r2, r3, #7
 80090b6:	d00c      	beq.n	80090d2 <__lo0bits+0x22>
 80090b8:	07d9      	lsls	r1, r3, #31
 80090ba:	d422      	bmi.n	8009102 <__lo0bits+0x52>
 80090bc:	079a      	lsls	r2, r3, #30
 80090be:	bf49      	itett	mi
 80090c0:	085b      	lsrmi	r3, r3, #1
 80090c2:	089b      	lsrpl	r3, r3, #2
 80090c4:	6003      	strmi	r3, [r0, #0]
 80090c6:	2201      	movmi	r2, #1
 80090c8:	bf5c      	itt	pl
 80090ca:	6003      	strpl	r3, [r0, #0]
 80090cc:	2202      	movpl	r2, #2
 80090ce:	4610      	mov	r0, r2
 80090d0:	4770      	bx	lr
 80090d2:	b299      	uxth	r1, r3
 80090d4:	b909      	cbnz	r1, 80090da <__lo0bits+0x2a>
 80090d6:	0c1b      	lsrs	r3, r3, #16
 80090d8:	2210      	movs	r2, #16
 80090da:	b2d9      	uxtb	r1, r3
 80090dc:	b909      	cbnz	r1, 80090e2 <__lo0bits+0x32>
 80090de:	3208      	adds	r2, #8
 80090e0:	0a1b      	lsrs	r3, r3, #8
 80090e2:	0719      	lsls	r1, r3, #28
 80090e4:	bf04      	itt	eq
 80090e6:	091b      	lsreq	r3, r3, #4
 80090e8:	3204      	addeq	r2, #4
 80090ea:	0799      	lsls	r1, r3, #30
 80090ec:	bf04      	itt	eq
 80090ee:	089b      	lsreq	r3, r3, #2
 80090f0:	3202      	addeq	r2, #2
 80090f2:	07d9      	lsls	r1, r3, #31
 80090f4:	d403      	bmi.n	80090fe <__lo0bits+0x4e>
 80090f6:	085b      	lsrs	r3, r3, #1
 80090f8:	f102 0201 	add.w	r2, r2, #1
 80090fc:	d003      	beq.n	8009106 <__lo0bits+0x56>
 80090fe:	6003      	str	r3, [r0, #0]
 8009100:	e7e5      	b.n	80090ce <__lo0bits+0x1e>
 8009102:	2200      	movs	r2, #0
 8009104:	e7e3      	b.n	80090ce <__lo0bits+0x1e>
 8009106:	2220      	movs	r2, #32
 8009108:	e7e1      	b.n	80090ce <__lo0bits+0x1e>
	...

0800910c <__i2b>:
 800910c:	b510      	push	{r4, lr}
 800910e:	460c      	mov	r4, r1
 8009110:	2101      	movs	r1, #1
 8009112:	f7ff ff05 	bl	8008f20 <_Balloc>
 8009116:	4602      	mov	r2, r0
 8009118:	b928      	cbnz	r0, 8009126 <__i2b+0x1a>
 800911a:	4b05      	ldr	r3, [pc, #20]	; (8009130 <__i2b+0x24>)
 800911c:	4805      	ldr	r0, [pc, #20]	; (8009134 <__i2b+0x28>)
 800911e:	f240 1145 	movw	r1, #325	; 0x145
 8009122:	f000 fc39 	bl	8009998 <__assert_func>
 8009126:	2301      	movs	r3, #1
 8009128:	6144      	str	r4, [r0, #20]
 800912a:	6103      	str	r3, [r0, #16]
 800912c:	bd10      	pop	{r4, pc}
 800912e:	bf00      	nop
 8009130:	08009d10 	.word	0x08009d10
 8009134:	08009d32 	.word	0x08009d32

08009138 <__multiply>:
 8009138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913c:	4691      	mov	r9, r2
 800913e:	690a      	ldr	r2, [r1, #16]
 8009140:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009144:	429a      	cmp	r2, r3
 8009146:	bfb8      	it	lt
 8009148:	460b      	movlt	r3, r1
 800914a:	460c      	mov	r4, r1
 800914c:	bfbc      	itt	lt
 800914e:	464c      	movlt	r4, r9
 8009150:	4699      	movlt	r9, r3
 8009152:	6927      	ldr	r7, [r4, #16]
 8009154:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009158:	68a3      	ldr	r3, [r4, #8]
 800915a:	6861      	ldr	r1, [r4, #4]
 800915c:	eb07 060a 	add.w	r6, r7, sl
 8009160:	42b3      	cmp	r3, r6
 8009162:	b085      	sub	sp, #20
 8009164:	bfb8      	it	lt
 8009166:	3101      	addlt	r1, #1
 8009168:	f7ff feda 	bl	8008f20 <_Balloc>
 800916c:	b930      	cbnz	r0, 800917c <__multiply+0x44>
 800916e:	4602      	mov	r2, r0
 8009170:	4b44      	ldr	r3, [pc, #272]	; (8009284 <__multiply+0x14c>)
 8009172:	4845      	ldr	r0, [pc, #276]	; (8009288 <__multiply+0x150>)
 8009174:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009178:	f000 fc0e 	bl	8009998 <__assert_func>
 800917c:	f100 0514 	add.w	r5, r0, #20
 8009180:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009184:	462b      	mov	r3, r5
 8009186:	2200      	movs	r2, #0
 8009188:	4543      	cmp	r3, r8
 800918a:	d321      	bcc.n	80091d0 <__multiply+0x98>
 800918c:	f104 0314 	add.w	r3, r4, #20
 8009190:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009194:	f109 0314 	add.w	r3, r9, #20
 8009198:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800919c:	9202      	str	r2, [sp, #8]
 800919e:	1b3a      	subs	r2, r7, r4
 80091a0:	3a15      	subs	r2, #21
 80091a2:	f022 0203 	bic.w	r2, r2, #3
 80091a6:	3204      	adds	r2, #4
 80091a8:	f104 0115 	add.w	r1, r4, #21
 80091ac:	428f      	cmp	r7, r1
 80091ae:	bf38      	it	cc
 80091b0:	2204      	movcc	r2, #4
 80091b2:	9201      	str	r2, [sp, #4]
 80091b4:	9a02      	ldr	r2, [sp, #8]
 80091b6:	9303      	str	r3, [sp, #12]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d80c      	bhi.n	80091d6 <__multiply+0x9e>
 80091bc:	2e00      	cmp	r6, #0
 80091be:	dd03      	ble.n	80091c8 <__multiply+0x90>
 80091c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d05b      	beq.n	8009280 <__multiply+0x148>
 80091c8:	6106      	str	r6, [r0, #16]
 80091ca:	b005      	add	sp, #20
 80091cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d0:	f843 2b04 	str.w	r2, [r3], #4
 80091d4:	e7d8      	b.n	8009188 <__multiply+0x50>
 80091d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80091da:	f1ba 0f00 	cmp.w	sl, #0
 80091de:	d024      	beq.n	800922a <__multiply+0xf2>
 80091e0:	f104 0e14 	add.w	lr, r4, #20
 80091e4:	46a9      	mov	r9, r5
 80091e6:	f04f 0c00 	mov.w	ip, #0
 80091ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091ee:	f8d9 1000 	ldr.w	r1, [r9]
 80091f2:	fa1f fb82 	uxth.w	fp, r2
 80091f6:	b289      	uxth	r1, r1
 80091f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80091fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009200:	f8d9 2000 	ldr.w	r2, [r9]
 8009204:	4461      	add	r1, ip
 8009206:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800920a:	fb0a c20b 	mla	r2, sl, fp, ip
 800920e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009212:	b289      	uxth	r1, r1
 8009214:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009218:	4577      	cmp	r7, lr
 800921a:	f849 1b04 	str.w	r1, [r9], #4
 800921e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009222:	d8e2      	bhi.n	80091ea <__multiply+0xb2>
 8009224:	9a01      	ldr	r2, [sp, #4]
 8009226:	f845 c002 	str.w	ip, [r5, r2]
 800922a:	9a03      	ldr	r2, [sp, #12]
 800922c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009230:	3304      	adds	r3, #4
 8009232:	f1b9 0f00 	cmp.w	r9, #0
 8009236:	d021      	beq.n	800927c <__multiply+0x144>
 8009238:	6829      	ldr	r1, [r5, #0]
 800923a:	f104 0c14 	add.w	ip, r4, #20
 800923e:	46ae      	mov	lr, r5
 8009240:	f04f 0a00 	mov.w	sl, #0
 8009244:	f8bc b000 	ldrh.w	fp, [ip]
 8009248:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800924c:	fb09 220b 	mla	r2, r9, fp, r2
 8009250:	4452      	add	r2, sl
 8009252:	b289      	uxth	r1, r1
 8009254:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009258:	f84e 1b04 	str.w	r1, [lr], #4
 800925c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009260:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009264:	f8be 1000 	ldrh.w	r1, [lr]
 8009268:	fb09 110a 	mla	r1, r9, sl, r1
 800926c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009270:	4567      	cmp	r7, ip
 8009272:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009276:	d8e5      	bhi.n	8009244 <__multiply+0x10c>
 8009278:	9a01      	ldr	r2, [sp, #4]
 800927a:	50a9      	str	r1, [r5, r2]
 800927c:	3504      	adds	r5, #4
 800927e:	e799      	b.n	80091b4 <__multiply+0x7c>
 8009280:	3e01      	subs	r6, #1
 8009282:	e79b      	b.n	80091bc <__multiply+0x84>
 8009284:	08009d10 	.word	0x08009d10
 8009288:	08009d32 	.word	0x08009d32

0800928c <__pow5mult>:
 800928c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009290:	4615      	mov	r5, r2
 8009292:	f012 0203 	ands.w	r2, r2, #3
 8009296:	4606      	mov	r6, r0
 8009298:	460f      	mov	r7, r1
 800929a:	d007      	beq.n	80092ac <__pow5mult+0x20>
 800929c:	4c25      	ldr	r4, [pc, #148]	; (8009334 <__pow5mult+0xa8>)
 800929e:	3a01      	subs	r2, #1
 80092a0:	2300      	movs	r3, #0
 80092a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092a6:	f7ff fe9d 	bl	8008fe4 <__multadd>
 80092aa:	4607      	mov	r7, r0
 80092ac:	10ad      	asrs	r5, r5, #2
 80092ae:	d03d      	beq.n	800932c <__pow5mult+0xa0>
 80092b0:	69f4      	ldr	r4, [r6, #28]
 80092b2:	b97c      	cbnz	r4, 80092d4 <__pow5mult+0x48>
 80092b4:	2010      	movs	r0, #16
 80092b6:	f7ff fcd1 	bl	8008c5c <malloc>
 80092ba:	4602      	mov	r2, r0
 80092bc:	61f0      	str	r0, [r6, #28]
 80092be:	b928      	cbnz	r0, 80092cc <__pow5mult+0x40>
 80092c0:	4b1d      	ldr	r3, [pc, #116]	; (8009338 <__pow5mult+0xac>)
 80092c2:	481e      	ldr	r0, [pc, #120]	; (800933c <__pow5mult+0xb0>)
 80092c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80092c8:	f000 fb66 	bl	8009998 <__assert_func>
 80092cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092d0:	6004      	str	r4, [r0, #0]
 80092d2:	60c4      	str	r4, [r0, #12]
 80092d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80092d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092dc:	b94c      	cbnz	r4, 80092f2 <__pow5mult+0x66>
 80092de:	f240 2171 	movw	r1, #625	; 0x271
 80092e2:	4630      	mov	r0, r6
 80092e4:	f7ff ff12 	bl	800910c <__i2b>
 80092e8:	2300      	movs	r3, #0
 80092ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80092ee:	4604      	mov	r4, r0
 80092f0:	6003      	str	r3, [r0, #0]
 80092f2:	f04f 0900 	mov.w	r9, #0
 80092f6:	07eb      	lsls	r3, r5, #31
 80092f8:	d50a      	bpl.n	8009310 <__pow5mult+0x84>
 80092fa:	4639      	mov	r1, r7
 80092fc:	4622      	mov	r2, r4
 80092fe:	4630      	mov	r0, r6
 8009300:	f7ff ff1a 	bl	8009138 <__multiply>
 8009304:	4639      	mov	r1, r7
 8009306:	4680      	mov	r8, r0
 8009308:	4630      	mov	r0, r6
 800930a:	f7ff fe49 	bl	8008fa0 <_Bfree>
 800930e:	4647      	mov	r7, r8
 8009310:	106d      	asrs	r5, r5, #1
 8009312:	d00b      	beq.n	800932c <__pow5mult+0xa0>
 8009314:	6820      	ldr	r0, [r4, #0]
 8009316:	b938      	cbnz	r0, 8009328 <__pow5mult+0x9c>
 8009318:	4622      	mov	r2, r4
 800931a:	4621      	mov	r1, r4
 800931c:	4630      	mov	r0, r6
 800931e:	f7ff ff0b 	bl	8009138 <__multiply>
 8009322:	6020      	str	r0, [r4, #0]
 8009324:	f8c0 9000 	str.w	r9, [r0]
 8009328:	4604      	mov	r4, r0
 800932a:	e7e4      	b.n	80092f6 <__pow5mult+0x6a>
 800932c:	4638      	mov	r0, r7
 800932e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009332:	bf00      	nop
 8009334:	08009e80 	.word	0x08009e80
 8009338:	08009ca1 	.word	0x08009ca1
 800933c:	08009d32 	.word	0x08009d32

08009340 <__lshift>:
 8009340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009344:	460c      	mov	r4, r1
 8009346:	6849      	ldr	r1, [r1, #4]
 8009348:	6923      	ldr	r3, [r4, #16]
 800934a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800934e:	68a3      	ldr	r3, [r4, #8]
 8009350:	4607      	mov	r7, r0
 8009352:	4691      	mov	r9, r2
 8009354:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009358:	f108 0601 	add.w	r6, r8, #1
 800935c:	42b3      	cmp	r3, r6
 800935e:	db0b      	blt.n	8009378 <__lshift+0x38>
 8009360:	4638      	mov	r0, r7
 8009362:	f7ff fddd 	bl	8008f20 <_Balloc>
 8009366:	4605      	mov	r5, r0
 8009368:	b948      	cbnz	r0, 800937e <__lshift+0x3e>
 800936a:	4602      	mov	r2, r0
 800936c:	4b28      	ldr	r3, [pc, #160]	; (8009410 <__lshift+0xd0>)
 800936e:	4829      	ldr	r0, [pc, #164]	; (8009414 <__lshift+0xd4>)
 8009370:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009374:	f000 fb10 	bl	8009998 <__assert_func>
 8009378:	3101      	adds	r1, #1
 800937a:	005b      	lsls	r3, r3, #1
 800937c:	e7ee      	b.n	800935c <__lshift+0x1c>
 800937e:	2300      	movs	r3, #0
 8009380:	f100 0114 	add.w	r1, r0, #20
 8009384:	f100 0210 	add.w	r2, r0, #16
 8009388:	4618      	mov	r0, r3
 800938a:	4553      	cmp	r3, sl
 800938c:	db33      	blt.n	80093f6 <__lshift+0xb6>
 800938e:	6920      	ldr	r0, [r4, #16]
 8009390:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009394:	f104 0314 	add.w	r3, r4, #20
 8009398:	f019 091f 	ands.w	r9, r9, #31
 800939c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093a4:	d02b      	beq.n	80093fe <__lshift+0xbe>
 80093a6:	f1c9 0e20 	rsb	lr, r9, #32
 80093aa:	468a      	mov	sl, r1
 80093ac:	2200      	movs	r2, #0
 80093ae:	6818      	ldr	r0, [r3, #0]
 80093b0:	fa00 f009 	lsl.w	r0, r0, r9
 80093b4:	4310      	orrs	r0, r2
 80093b6:	f84a 0b04 	str.w	r0, [sl], #4
 80093ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80093be:	459c      	cmp	ip, r3
 80093c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80093c4:	d8f3      	bhi.n	80093ae <__lshift+0x6e>
 80093c6:	ebac 0304 	sub.w	r3, ip, r4
 80093ca:	3b15      	subs	r3, #21
 80093cc:	f023 0303 	bic.w	r3, r3, #3
 80093d0:	3304      	adds	r3, #4
 80093d2:	f104 0015 	add.w	r0, r4, #21
 80093d6:	4584      	cmp	ip, r0
 80093d8:	bf38      	it	cc
 80093da:	2304      	movcc	r3, #4
 80093dc:	50ca      	str	r2, [r1, r3]
 80093de:	b10a      	cbz	r2, 80093e4 <__lshift+0xa4>
 80093e0:	f108 0602 	add.w	r6, r8, #2
 80093e4:	3e01      	subs	r6, #1
 80093e6:	4638      	mov	r0, r7
 80093e8:	612e      	str	r6, [r5, #16]
 80093ea:	4621      	mov	r1, r4
 80093ec:	f7ff fdd8 	bl	8008fa0 <_Bfree>
 80093f0:	4628      	mov	r0, r5
 80093f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80093fa:	3301      	adds	r3, #1
 80093fc:	e7c5      	b.n	800938a <__lshift+0x4a>
 80093fe:	3904      	subs	r1, #4
 8009400:	f853 2b04 	ldr.w	r2, [r3], #4
 8009404:	f841 2f04 	str.w	r2, [r1, #4]!
 8009408:	459c      	cmp	ip, r3
 800940a:	d8f9      	bhi.n	8009400 <__lshift+0xc0>
 800940c:	e7ea      	b.n	80093e4 <__lshift+0xa4>
 800940e:	bf00      	nop
 8009410:	08009d10 	.word	0x08009d10
 8009414:	08009d32 	.word	0x08009d32

08009418 <__mcmp>:
 8009418:	b530      	push	{r4, r5, lr}
 800941a:	6902      	ldr	r2, [r0, #16]
 800941c:	690c      	ldr	r4, [r1, #16]
 800941e:	1b12      	subs	r2, r2, r4
 8009420:	d10e      	bne.n	8009440 <__mcmp+0x28>
 8009422:	f100 0314 	add.w	r3, r0, #20
 8009426:	3114      	adds	r1, #20
 8009428:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800942c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009430:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009434:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009438:	42a5      	cmp	r5, r4
 800943a:	d003      	beq.n	8009444 <__mcmp+0x2c>
 800943c:	d305      	bcc.n	800944a <__mcmp+0x32>
 800943e:	2201      	movs	r2, #1
 8009440:	4610      	mov	r0, r2
 8009442:	bd30      	pop	{r4, r5, pc}
 8009444:	4283      	cmp	r3, r0
 8009446:	d3f3      	bcc.n	8009430 <__mcmp+0x18>
 8009448:	e7fa      	b.n	8009440 <__mcmp+0x28>
 800944a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800944e:	e7f7      	b.n	8009440 <__mcmp+0x28>

08009450 <__mdiff>:
 8009450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	460c      	mov	r4, r1
 8009456:	4606      	mov	r6, r0
 8009458:	4611      	mov	r1, r2
 800945a:	4620      	mov	r0, r4
 800945c:	4690      	mov	r8, r2
 800945e:	f7ff ffdb 	bl	8009418 <__mcmp>
 8009462:	1e05      	subs	r5, r0, #0
 8009464:	d110      	bne.n	8009488 <__mdiff+0x38>
 8009466:	4629      	mov	r1, r5
 8009468:	4630      	mov	r0, r6
 800946a:	f7ff fd59 	bl	8008f20 <_Balloc>
 800946e:	b930      	cbnz	r0, 800947e <__mdiff+0x2e>
 8009470:	4b3a      	ldr	r3, [pc, #232]	; (800955c <__mdiff+0x10c>)
 8009472:	4602      	mov	r2, r0
 8009474:	f240 2137 	movw	r1, #567	; 0x237
 8009478:	4839      	ldr	r0, [pc, #228]	; (8009560 <__mdiff+0x110>)
 800947a:	f000 fa8d 	bl	8009998 <__assert_func>
 800947e:	2301      	movs	r3, #1
 8009480:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009484:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009488:	bfa4      	itt	ge
 800948a:	4643      	movge	r3, r8
 800948c:	46a0      	movge	r8, r4
 800948e:	4630      	mov	r0, r6
 8009490:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009494:	bfa6      	itte	ge
 8009496:	461c      	movge	r4, r3
 8009498:	2500      	movge	r5, #0
 800949a:	2501      	movlt	r5, #1
 800949c:	f7ff fd40 	bl	8008f20 <_Balloc>
 80094a0:	b920      	cbnz	r0, 80094ac <__mdiff+0x5c>
 80094a2:	4b2e      	ldr	r3, [pc, #184]	; (800955c <__mdiff+0x10c>)
 80094a4:	4602      	mov	r2, r0
 80094a6:	f240 2145 	movw	r1, #581	; 0x245
 80094aa:	e7e5      	b.n	8009478 <__mdiff+0x28>
 80094ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80094b0:	6926      	ldr	r6, [r4, #16]
 80094b2:	60c5      	str	r5, [r0, #12]
 80094b4:	f104 0914 	add.w	r9, r4, #20
 80094b8:	f108 0514 	add.w	r5, r8, #20
 80094bc:	f100 0e14 	add.w	lr, r0, #20
 80094c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80094c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80094c8:	f108 0210 	add.w	r2, r8, #16
 80094cc:	46f2      	mov	sl, lr
 80094ce:	2100      	movs	r1, #0
 80094d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80094d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094d8:	fa11 f88b 	uxtah	r8, r1, fp
 80094dc:	b299      	uxth	r1, r3
 80094de:	0c1b      	lsrs	r3, r3, #16
 80094e0:	eba8 0801 	sub.w	r8, r8, r1
 80094e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094e8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094ec:	fa1f f888 	uxth.w	r8, r8
 80094f0:	1419      	asrs	r1, r3, #16
 80094f2:	454e      	cmp	r6, r9
 80094f4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094f8:	f84a 3b04 	str.w	r3, [sl], #4
 80094fc:	d8e8      	bhi.n	80094d0 <__mdiff+0x80>
 80094fe:	1b33      	subs	r3, r6, r4
 8009500:	3b15      	subs	r3, #21
 8009502:	f023 0303 	bic.w	r3, r3, #3
 8009506:	3304      	adds	r3, #4
 8009508:	3415      	adds	r4, #21
 800950a:	42a6      	cmp	r6, r4
 800950c:	bf38      	it	cc
 800950e:	2304      	movcc	r3, #4
 8009510:	441d      	add	r5, r3
 8009512:	4473      	add	r3, lr
 8009514:	469e      	mov	lr, r3
 8009516:	462e      	mov	r6, r5
 8009518:	4566      	cmp	r6, ip
 800951a:	d30e      	bcc.n	800953a <__mdiff+0xea>
 800951c:	f10c 0203 	add.w	r2, ip, #3
 8009520:	1b52      	subs	r2, r2, r5
 8009522:	f022 0203 	bic.w	r2, r2, #3
 8009526:	3d03      	subs	r5, #3
 8009528:	45ac      	cmp	ip, r5
 800952a:	bf38      	it	cc
 800952c:	2200      	movcc	r2, #0
 800952e:	4413      	add	r3, r2
 8009530:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009534:	b17a      	cbz	r2, 8009556 <__mdiff+0x106>
 8009536:	6107      	str	r7, [r0, #16]
 8009538:	e7a4      	b.n	8009484 <__mdiff+0x34>
 800953a:	f856 8b04 	ldr.w	r8, [r6], #4
 800953e:	fa11 f288 	uxtah	r2, r1, r8
 8009542:	1414      	asrs	r4, r2, #16
 8009544:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009548:	b292      	uxth	r2, r2
 800954a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800954e:	f84e 2b04 	str.w	r2, [lr], #4
 8009552:	1421      	asrs	r1, r4, #16
 8009554:	e7e0      	b.n	8009518 <__mdiff+0xc8>
 8009556:	3f01      	subs	r7, #1
 8009558:	e7ea      	b.n	8009530 <__mdiff+0xe0>
 800955a:	bf00      	nop
 800955c:	08009d10 	.word	0x08009d10
 8009560:	08009d32 	.word	0x08009d32

08009564 <__d2b>:
 8009564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009568:	460f      	mov	r7, r1
 800956a:	2101      	movs	r1, #1
 800956c:	ec59 8b10 	vmov	r8, r9, d0
 8009570:	4616      	mov	r6, r2
 8009572:	f7ff fcd5 	bl	8008f20 <_Balloc>
 8009576:	4604      	mov	r4, r0
 8009578:	b930      	cbnz	r0, 8009588 <__d2b+0x24>
 800957a:	4602      	mov	r2, r0
 800957c:	4b24      	ldr	r3, [pc, #144]	; (8009610 <__d2b+0xac>)
 800957e:	4825      	ldr	r0, [pc, #148]	; (8009614 <__d2b+0xb0>)
 8009580:	f240 310f 	movw	r1, #783	; 0x30f
 8009584:	f000 fa08 	bl	8009998 <__assert_func>
 8009588:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800958c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009590:	bb2d      	cbnz	r5, 80095de <__d2b+0x7a>
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	f1b8 0300 	subs.w	r3, r8, #0
 8009598:	d026      	beq.n	80095e8 <__d2b+0x84>
 800959a:	4668      	mov	r0, sp
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	f7ff fd87 	bl	80090b0 <__lo0bits>
 80095a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095a6:	b1e8      	cbz	r0, 80095e4 <__d2b+0x80>
 80095a8:	f1c0 0320 	rsb	r3, r0, #32
 80095ac:	fa02 f303 	lsl.w	r3, r2, r3
 80095b0:	430b      	orrs	r3, r1
 80095b2:	40c2      	lsrs	r2, r0
 80095b4:	6163      	str	r3, [r4, #20]
 80095b6:	9201      	str	r2, [sp, #4]
 80095b8:	9b01      	ldr	r3, [sp, #4]
 80095ba:	61a3      	str	r3, [r4, #24]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	bf14      	ite	ne
 80095c0:	2202      	movne	r2, #2
 80095c2:	2201      	moveq	r2, #1
 80095c4:	6122      	str	r2, [r4, #16]
 80095c6:	b1bd      	cbz	r5, 80095f8 <__d2b+0x94>
 80095c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80095cc:	4405      	add	r5, r0
 80095ce:	603d      	str	r5, [r7, #0]
 80095d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095d4:	6030      	str	r0, [r6, #0]
 80095d6:	4620      	mov	r0, r4
 80095d8:	b003      	add	sp, #12
 80095da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095e2:	e7d6      	b.n	8009592 <__d2b+0x2e>
 80095e4:	6161      	str	r1, [r4, #20]
 80095e6:	e7e7      	b.n	80095b8 <__d2b+0x54>
 80095e8:	a801      	add	r0, sp, #4
 80095ea:	f7ff fd61 	bl	80090b0 <__lo0bits>
 80095ee:	9b01      	ldr	r3, [sp, #4]
 80095f0:	6163      	str	r3, [r4, #20]
 80095f2:	3020      	adds	r0, #32
 80095f4:	2201      	movs	r2, #1
 80095f6:	e7e5      	b.n	80095c4 <__d2b+0x60>
 80095f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009600:	6038      	str	r0, [r7, #0]
 8009602:	6918      	ldr	r0, [r3, #16]
 8009604:	f7ff fd34 	bl	8009070 <__hi0bits>
 8009608:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800960c:	e7e2      	b.n	80095d4 <__d2b+0x70>
 800960e:	bf00      	nop
 8009610:	08009d10 	.word	0x08009d10
 8009614:	08009d32 	.word	0x08009d32

08009618 <__sread>:
 8009618:	b510      	push	{r4, lr}
 800961a:	460c      	mov	r4, r1
 800961c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009620:	f000 f978 	bl	8009914 <_read_r>
 8009624:	2800      	cmp	r0, #0
 8009626:	bfab      	itete	ge
 8009628:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800962a:	89a3      	ldrhlt	r3, [r4, #12]
 800962c:	181b      	addge	r3, r3, r0
 800962e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009632:	bfac      	ite	ge
 8009634:	6563      	strge	r3, [r4, #84]	; 0x54
 8009636:	81a3      	strhlt	r3, [r4, #12]
 8009638:	bd10      	pop	{r4, pc}

0800963a <__swrite>:
 800963a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800963e:	461f      	mov	r7, r3
 8009640:	898b      	ldrh	r3, [r1, #12]
 8009642:	05db      	lsls	r3, r3, #23
 8009644:	4605      	mov	r5, r0
 8009646:	460c      	mov	r4, r1
 8009648:	4616      	mov	r6, r2
 800964a:	d505      	bpl.n	8009658 <__swrite+0x1e>
 800964c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009650:	2302      	movs	r3, #2
 8009652:	2200      	movs	r2, #0
 8009654:	f000 f94c 	bl	80098f0 <_lseek_r>
 8009658:	89a3      	ldrh	r3, [r4, #12]
 800965a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800965e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009662:	81a3      	strh	r3, [r4, #12]
 8009664:	4632      	mov	r2, r6
 8009666:	463b      	mov	r3, r7
 8009668:	4628      	mov	r0, r5
 800966a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800966e:	f000 b973 	b.w	8009958 <_write_r>

08009672 <__sseek>:
 8009672:	b510      	push	{r4, lr}
 8009674:	460c      	mov	r4, r1
 8009676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800967a:	f000 f939 	bl	80098f0 <_lseek_r>
 800967e:	1c43      	adds	r3, r0, #1
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	bf15      	itete	ne
 8009684:	6560      	strne	r0, [r4, #84]	; 0x54
 8009686:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800968a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800968e:	81a3      	strheq	r3, [r4, #12]
 8009690:	bf18      	it	ne
 8009692:	81a3      	strhne	r3, [r4, #12]
 8009694:	bd10      	pop	{r4, pc}

08009696 <__sclose>:
 8009696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800969a:	f000 b8f7 	b.w	800988c <_close_r>

0800969e <__swbuf_r>:
 800969e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a0:	460e      	mov	r6, r1
 80096a2:	4614      	mov	r4, r2
 80096a4:	4605      	mov	r5, r0
 80096a6:	b118      	cbz	r0, 80096b0 <__swbuf_r+0x12>
 80096a8:	6a03      	ldr	r3, [r0, #32]
 80096aa:	b90b      	cbnz	r3, 80096b0 <__swbuf_r+0x12>
 80096ac:	f7fe fa3c 	bl	8007b28 <__sinit>
 80096b0:	69a3      	ldr	r3, [r4, #24]
 80096b2:	60a3      	str	r3, [r4, #8]
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	071a      	lsls	r2, r3, #28
 80096b8:	d525      	bpl.n	8009706 <__swbuf_r+0x68>
 80096ba:	6923      	ldr	r3, [r4, #16]
 80096bc:	b31b      	cbz	r3, 8009706 <__swbuf_r+0x68>
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	6922      	ldr	r2, [r4, #16]
 80096c2:	1a98      	subs	r0, r3, r2
 80096c4:	6963      	ldr	r3, [r4, #20]
 80096c6:	b2f6      	uxtb	r6, r6
 80096c8:	4283      	cmp	r3, r0
 80096ca:	4637      	mov	r7, r6
 80096cc:	dc04      	bgt.n	80096d8 <__swbuf_r+0x3a>
 80096ce:	4621      	mov	r1, r4
 80096d0:	4628      	mov	r0, r5
 80096d2:	f7ff fbf1 	bl	8008eb8 <_fflush_r>
 80096d6:	b9e0      	cbnz	r0, 8009712 <__swbuf_r+0x74>
 80096d8:	68a3      	ldr	r3, [r4, #8]
 80096da:	3b01      	subs	r3, #1
 80096dc:	60a3      	str	r3, [r4, #8]
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	6022      	str	r2, [r4, #0]
 80096e4:	701e      	strb	r6, [r3, #0]
 80096e6:	6962      	ldr	r2, [r4, #20]
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d004      	beq.n	80096f8 <__swbuf_r+0x5a>
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	07db      	lsls	r3, r3, #31
 80096f2:	d506      	bpl.n	8009702 <__swbuf_r+0x64>
 80096f4:	2e0a      	cmp	r6, #10
 80096f6:	d104      	bne.n	8009702 <__swbuf_r+0x64>
 80096f8:	4621      	mov	r1, r4
 80096fa:	4628      	mov	r0, r5
 80096fc:	f7ff fbdc 	bl	8008eb8 <_fflush_r>
 8009700:	b938      	cbnz	r0, 8009712 <__swbuf_r+0x74>
 8009702:	4638      	mov	r0, r7
 8009704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009706:	4621      	mov	r1, r4
 8009708:	4628      	mov	r0, r5
 800970a:	f000 f805 	bl	8009718 <__swsetup_r>
 800970e:	2800      	cmp	r0, #0
 8009710:	d0d5      	beq.n	80096be <__swbuf_r+0x20>
 8009712:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009716:	e7f4      	b.n	8009702 <__swbuf_r+0x64>

08009718 <__swsetup_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4b2a      	ldr	r3, [pc, #168]	; (80097c4 <__swsetup_r+0xac>)
 800971c:	4605      	mov	r5, r0
 800971e:	6818      	ldr	r0, [r3, #0]
 8009720:	460c      	mov	r4, r1
 8009722:	b118      	cbz	r0, 800972c <__swsetup_r+0x14>
 8009724:	6a03      	ldr	r3, [r0, #32]
 8009726:	b90b      	cbnz	r3, 800972c <__swsetup_r+0x14>
 8009728:	f7fe f9fe 	bl	8007b28 <__sinit>
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009732:	0718      	lsls	r0, r3, #28
 8009734:	d422      	bmi.n	800977c <__swsetup_r+0x64>
 8009736:	06d9      	lsls	r1, r3, #27
 8009738:	d407      	bmi.n	800974a <__swsetup_r+0x32>
 800973a:	2309      	movs	r3, #9
 800973c:	602b      	str	r3, [r5, #0]
 800973e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009748:	e034      	b.n	80097b4 <__swsetup_r+0x9c>
 800974a:	0758      	lsls	r0, r3, #29
 800974c:	d512      	bpl.n	8009774 <__swsetup_r+0x5c>
 800974e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009750:	b141      	cbz	r1, 8009764 <__swsetup_r+0x4c>
 8009752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009756:	4299      	cmp	r1, r3
 8009758:	d002      	beq.n	8009760 <__swsetup_r+0x48>
 800975a:	4628      	mov	r0, r5
 800975c:	f000 f950 	bl	8009a00 <_free_r>
 8009760:	2300      	movs	r3, #0
 8009762:	6363      	str	r3, [r4, #52]	; 0x34
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800976a:	81a3      	strh	r3, [r4, #12]
 800976c:	2300      	movs	r3, #0
 800976e:	6063      	str	r3, [r4, #4]
 8009770:	6923      	ldr	r3, [r4, #16]
 8009772:	6023      	str	r3, [r4, #0]
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	f043 0308 	orr.w	r3, r3, #8
 800977a:	81a3      	strh	r3, [r4, #12]
 800977c:	6923      	ldr	r3, [r4, #16]
 800977e:	b94b      	cbnz	r3, 8009794 <__swsetup_r+0x7c>
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800978a:	d003      	beq.n	8009794 <__swsetup_r+0x7c>
 800978c:	4621      	mov	r1, r4
 800978e:	4628      	mov	r0, r5
 8009790:	f000 f840 	bl	8009814 <__smakebuf_r>
 8009794:	89a0      	ldrh	r0, [r4, #12]
 8009796:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800979a:	f010 0301 	ands.w	r3, r0, #1
 800979e:	d00a      	beq.n	80097b6 <__swsetup_r+0x9e>
 80097a0:	2300      	movs	r3, #0
 80097a2:	60a3      	str	r3, [r4, #8]
 80097a4:	6963      	ldr	r3, [r4, #20]
 80097a6:	425b      	negs	r3, r3
 80097a8:	61a3      	str	r3, [r4, #24]
 80097aa:	6923      	ldr	r3, [r4, #16]
 80097ac:	b943      	cbnz	r3, 80097c0 <__swsetup_r+0xa8>
 80097ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097b2:	d1c4      	bne.n	800973e <__swsetup_r+0x26>
 80097b4:	bd38      	pop	{r3, r4, r5, pc}
 80097b6:	0781      	lsls	r1, r0, #30
 80097b8:	bf58      	it	pl
 80097ba:	6963      	ldrpl	r3, [r4, #20]
 80097bc:	60a3      	str	r3, [r4, #8]
 80097be:	e7f4      	b.n	80097aa <__swsetup_r+0x92>
 80097c0:	2000      	movs	r0, #0
 80097c2:	e7f7      	b.n	80097b4 <__swsetup_r+0x9c>
 80097c4:	20000068 	.word	0x20000068

080097c8 <__swhatbuf_r>:
 80097c8:	b570      	push	{r4, r5, r6, lr}
 80097ca:	460c      	mov	r4, r1
 80097cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d0:	2900      	cmp	r1, #0
 80097d2:	b096      	sub	sp, #88	; 0x58
 80097d4:	4615      	mov	r5, r2
 80097d6:	461e      	mov	r6, r3
 80097d8:	da0d      	bge.n	80097f6 <__swhatbuf_r+0x2e>
 80097da:	89a3      	ldrh	r3, [r4, #12]
 80097dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80097e0:	f04f 0100 	mov.w	r1, #0
 80097e4:	bf0c      	ite	eq
 80097e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80097ea:	2340      	movne	r3, #64	; 0x40
 80097ec:	2000      	movs	r0, #0
 80097ee:	6031      	str	r1, [r6, #0]
 80097f0:	602b      	str	r3, [r5, #0]
 80097f2:	b016      	add	sp, #88	; 0x58
 80097f4:	bd70      	pop	{r4, r5, r6, pc}
 80097f6:	466a      	mov	r2, sp
 80097f8:	f000 f858 	bl	80098ac <_fstat_r>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	dbec      	blt.n	80097da <__swhatbuf_r+0x12>
 8009800:	9901      	ldr	r1, [sp, #4]
 8009802:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009806:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800980a:	4259      	negs	r1, r3
 800980c:	4159      	adcs	r1, r3
 800980e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009812:	e7eb      	b.n	80097ec <__swhatbuf_r+0x24>

08009814 <__smakebuf_r>:
 8009814:	898b      	ldrh	r3, [r1, #12]
 8009816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009818:	079d      	lsls	r5, r3, #30
 800981a:	4606      	mov	r6, r0
 800981c:	460c      	mov	r4, r1
 800981e:	d507      	bpl.n	8009830 <__smakebuf_r+0x1c>
 8009820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	6123      	str	r3, [r4, #16]
 8009828:	2301      	movs	r3, #1
 800982a:	6163      	str	r3, [r4, #20]
 800982c:	b002      	add	sp, #8
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	ab01      	add	r3, sp, #4
 8009832:	466a      	mov	r2, sp
 8009834:	f7ff ffc8 	bl	80097c8 <__swhatbuf_r>
 8009838:	9900      	ldr	r1, [sp, #0]
 800983a:	4605      	mov	r5, r0
 800983c:	4630      	mov	r0, r6
 800983e:	f7ff fa35 	bl	8008cac <_malloc_r>
 8009842:	b948      	cbnz	r0, 8009858 <__smakebuf_r+0x44>
 8009844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009848:	059a      	lsls	r2, r3, #22
 800984a:	d4ef      	bmi.n	800982c <__smakebuf_r+0x18>
 800984c:	f023 0303 	bic.w	r3, r3, #3
 8009850:	f043 0302 	orr.w	r3, r3, #2
 8009854:	81a3      	strh	r3, [r4, #12]
 8009856:	e7e3      	b.n	8009820 <__smakebuf_r+0xc>
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	6020      	str	r0, [r4, #0]
 800985c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009860:	81a3      	strh	r3, [r4, #12]
 8009862:	9b00      	ldr	r3, [sp, #0]
 8009864:	6163      	str	r3, [r4, #20]
 8009866:	9b01      	ldr	r3, [sp, #4]
 8009868:	6120      	str	r0, [r4, #16]
 800986a:	b15b      	cbz	r3, 8009884 <__smakebuf_r+0x70>
 800986c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009870:	4630      	mov	r0, r6
 8009872:	f000 f82d 	bl	80098d0 <_isatty_r>
 8009876:	b128      	cbz	r0, 8009884 <__smakebuf_r+0x70>
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	f023 0303 	bic.w	r3, r3, #3
 800987e:	f043 0301 	orr.w	r3, r3, #1
 8009882:	81a3      	strh	r3, [r4, #12]
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	431d      	orrs	r5, r3
 8009888:	81a5      	strh	r5, [r4, #12]
 800988a:	e7cf      	b.n	800982c <__smakebuf_r+0x18>

0800988c <_close_r>:
 800988c:	b538      	push	{r3, r4, r5, lr}
 800988e:	4d06      	ldr	r5, [pc, #24]	; (80098a8 <_close_r+0x1c>)
 8009890:	2300      	movs	r3, #0
 8009892:	4604      	mov	r4, r0
 8009894:	4608      	mov	r0, r1
 8009896:	602b      	str	r3, [r5, #0]
 8009898:	f7f8 fb51 	bl	8001f3e <_close>
 800989c:	1c43      	adds	r3, r0, #1
 800989e:	d102      	bne.n	80098a6 <_close_r+0x1a>
 80098a0:	682b      	ldr	r3, [r5, #0]
 80098a2:	b103      	cbz	r3, 80098a6 <_close_r+0x1a>
 80098a4:	6023      	str	r3, [r4, #0]
 80098a6:	bd38      	pop	{r3, r4, r5, pc}
 80098a8:	200005bc 	.word	0x200005bc

080098ac <_fstat_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	4d07      	ldr	r5, [pc, #28]	; (80098cc <_fstat_r+0x20>)
 80098b0:	2300      	movs	r3, #0
 80098b2:	4604      	mov	r4, r0
 80098b4:	4608      	mov	r0, r1
 80098b6:	4611      	mov	r1, r2
 80098b8:	602b      	str	r3, [r5, #0]
 80098ba:	f7f8 fb4c 	bl	8001f56 <_fstat>
 80098be:	1c43      	adds	r3, r0, #1
 80098c0:	d102      	bne.n	80098c8 <_fstat_r+0x1c>
 80098c2:	682b      	ldr	r3, [r5, #0]
 80098c4:	b103      	cbz	r3, 80098c8 <_fstat_r+0x1c>
 80098c6:	6023      	str	r3, [r4, #0]
 80098c8:	bd38      	pop	{r3, r4, r5, pc}
 80098ca:	bf00      	nop
 80098cc:	200005bc 	.word	0x200005bc

080098d0 <_isatty_r>:
 80098d0:	b538      	push	{r3, r4, r5, lr}
 80098d2:	4d06      	ldr	r5, [pc, #24]	; (80098ec <_isatty_r+0x1c>)
 80098d4:	2300      	movs	r3, #0
 80098d6:	4604      	mov	r4, r0
 80098d8:	4608      	mov	r0, r1
 80098da:	602b      	str	r3, [r5, #0]
 80098dc:	f7f8 fb4b 	bl	8001f76 <_isatty>
 80098e0:	1c43      	adds	r3, r0, #1
 80098e2:	d102      	bne.n	80098ea <_isatty_r+0x1a>
 80098e4:	682b      	ldr	r3, [r5, #0]
 80098e6:	b103      	cbz	r3, 80098ea <_isatty_r+0x1a>
 80098e8:	6023      	str	r3, [r4, #0]
 80098ea:	bd38      	pop	{r3, r4, r5, pc}
 80098ec:	200005bc 	.word	0x200005bc

080098f0 <_lseek_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	4d07      	ldr	r5, [pc, #28]	; (8009910 <_lseek_r+0x20>)
 80098f4:	4604      	mov	r4, r0
 80098f6:	4608      	mov	r0, r1
 80098f8:	4611      	mov	r1, r2
 80098fa:	2200      	movs	r2, #0
 80098fc:	602a      	str	r2, [r5, #0]
 80098fe:	461a      	mov	r2, r3
 8009900:	f7f8 fb44 	bl	8001f8c <_lseek>
 8009904:	1c43      	adds	r3, r0, #1
 8009906:	d102      	bne.n	800990e <_lseek_r+0x1e>
 8009908:	682b      	ldr	r3, [r5, #0]
 800990a:	b103      	cbz	r3, 800990e <_lseek_r+0x1e>
 800990c:	6023      	str	r3, [r4, #0]
 800990e:	bd38      	pop	{r3, r4, r5, pc}
 8009910:	200005bc 	.word	0x200005bc

08009914 <_read_r>:
 8009914:	b538      	push	{r3, r4, r5, lr}
 8009916:	4d07      	ldr	r5, [pc, #28]	; (8009934 <_read_r+0x20>)
 8009918:	4604      	mov	r4, r0
 800991a:	4608      	mov	r0, r1
 800991c:	4611      	mov	r1, r2
 800991e:	2200      	movs	r2, #0
 8009920:	602a      	str	r2, [r5, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	f7f8 fad2 	bl	8001ecc <_read>
 8009928:	1c43      	adds	r3, r0, #1
 800992a:	d102      	bne.n	8009932 <_read_r+0x1e>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	b103      	cbz	r3, 8009932 <_read_r+0x1e>
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	bd38      	pop	{r3, r4, r5, pc}
 8009934:	200005bc 	.word	0x200005bc

08009938 <_sbrk_r>:
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	4d06      	ldr	r5, [pc, #24]	; (8009954 <_sbrk_r+0x1c>)
 800993c:	2300      	movs	r3, #0
 800993e:	4604      	mov	r4, r0
 8009940:	4608      	mov	r0, r1
 8009942:	602b      	str	r3, [r5, #0]
 8009944:	f7f8 fb30 	bl	8001fa8 <_sbrk>
 8009948:	1c43      	adds	r3, r0, #1
 800994a:	d102      	bne.n	8009952 <_sbrk_r+0x1a>
 800994c:	682b      	ldr	r3, [r5, #0]
 800994e:	b103      	cbz	r3, 8009952 <_sbrk_r+0x1a>
 8009950:	6023      	str	r3, [r4, #0]
 8009952:	bd38      	pop	{r3, r4, r5, pc}
 8009954:	200005bc 	.word	0x200005bc

08009958 <_write_r>:
 8009958:	b538      	push	{r3, r4, r5, lr}
 800995a:	4d07      	ldr	r5, [pc, #28]	; (8009978 <_write_r+0x20>)
 800995c:	4604      	mov	r4, r0
 800995e:	4608      	mov	r0, r1
 8009960:	4611      	mov	r1, r2
 8009962:	2200      	movs	r2, #0
 8009964:	602a      	str	r2, [r5, #0]
 8009966:	461a      	mov	r2, r3
 8009968:	f7f8 facd 	bl	8001f06 <_write>
 800996c:	1c43      	adds	r3, r0, #1
 800996e:	d102      	bne.n	8009976 <_write_r+0x1e>
 8009970:	682b      	ldr	r3, [r5, #0]
 8009972:	b103      	cbz	r3, 8009976 <_write_r+0x1e>
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	bd38      	pop	{r3, r4, r5, pc}
 8009978:	200005bc 	.word	0x200005bc

0800997c <memcpy>:
 800997c:	440a      	add	r2, r1
 800997e:	4291      	cmp	r1, r2
 8009980:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009984:	d100      	bne.n	8009988 <memcpy+0xc>
 8009986:	4770      	bx	lr
 8009988:	b510      	push	{r4, lr}
 800998a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800998e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009992:	4291      	cmp	r1, r2
 8009994:	d1f9      	bne.n	800998a <memcpy+0xe>
 8009996:	bd10      	pop	{r4, pc}

08009998 <__assert_func>:
 8009998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800999a:	4614      	mov	r4, r2
 800999c:	461a      	mov	r2, r3
 800999e:	4b09      	ldr	r3, [pc, #36]	; (80099c4 <__assert_func+0x2c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4605      	mov	r5, r0
 80099a4:	68d8      	ldr	r0, [r3, #12]
 80099a6:	b14c      	cbz	r4, 80099bc <__assert_func+0x24>
 80099a8:	4b07      	ldr	r3, [pc, #28]	; (80099c8 <__assert_func+0x30>)
 80099aa:	9100      	str	r1, [sp, #0]
 80099ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099b0:	4906      	ldr	r1, [pc, #24]	; (80099cc <__assert_func+0x34>)
 80099b2:	462b      	mov	r3, r5
 80099b4:	f000 f882 	bl	8009abc <fiprintf>
 80099b8:	f000 f89f 	bl	8009afa <abort>
 80099bc:	4b04      	ldr	r3, [pc, #16]	; (80099d0 <__assert_func+0x38>)
 80099be:	461c      	mov	r4, r3
 80099c0:	e7f3      	b.n	80099aa <__assert_func+0x12>
 80099c2:	bf00      	nop
 80099c4:	20000068 	.word	0x20000068
 80099c8:	08009f97 	.word	0x08009f97
 80099cc:	08009fa4 	.word	0x08009fa4
 80099d0:	08009fd2 	.word	0x08009fd2

080099d4 <_calloc_r>:
 80099d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099d6:	fba1 2402 	umull	r2, r4, r1, r2
 80099da:	b94c      	cbnz	r4, 80099f0 <_calloc_r+0x1c>
 80099dc:	4611      	mov	r1, r2
 80099de:	9201      	str	r2, [sp, #4]
 80099e0:	f7ff f964 	bl	8008cac <_malloc_r>
 80099e4:	9a01      	ldr	r2, [sp, #4]
 80099e6:	4605      	mov	r5, r0
 80099e8:	b930      	cbnz	r0, 80099f8 <_calloc_r+0x24>
 80099ea:	4628      	mov	r0, r5
 80099ec:	b003      	add	sp, #12
 80099ee:	bd30      	pop	{r4, r5, pc}
 80099f0:	220c      	movs	r2, #12
 80099f2:	6002      	str	r2, [r0, #0]
 80099f4:	2500      	movs	r5, #0
 80099f6:	e7f8      	b.n	80099ea <_calloc_r+0x16>
 80099f8:	4621      	mov	r1, r4
 80099fa:	f7fe f939 	bl	8007c70 <memset>
 80099fe:	e7f4      	b.n	80099ea <_calloc_r+0x16>

08009a00 <_free_r>:
 8009a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a02:	2900      	cmp	r1, #0
 8009a04:	d044      	beq.n	8009a90 <_free_r+0x90>
 8009a06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a0a:	9001      	str	r0, [sp, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f1a1 0404 	sub.w	r4, r1, #4
 8009a12:	bfb8      	it	lt
 8009a14:	18e4      	addlt	r4, r4, r3
 8009a16:	f7ff fa77 	bl	8008f08 <__malloc_lock>
 8009a1a:	4a1e      	ldr	r2, [pc, #120]	; (8009a94 <_free_r+0x94>)
 8009a1c:	9801      	ldr	r0, [sp, #4]
 8009a1e:	6813      	ldr	r3, [r2, #0]
 8009a20:	b933      	cbnz	r3, 8009a30 <_free_r+0x30>
 8009a22:	6063      	str	r3, [r4, #4]
 8009a24:	6014      	str	r4, [r2, #0]
 8009a26:	b003      	add	sp, #12
 8009a28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a2c:	f7ff ba72 	b.w	8008f14 <__malloc_unlock>
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	d908      	bls.n	8009a46 <_free_r+0x46>
 8009a34:	6825      	ldr	r5, [r4, #0]
 8009a36:	1961      	adds	r1, r4, r5
 8009a38:	428b      	cmp	r3, r1
 8009a3a:	bf01      	itttt	eq
 8009a3c:	6819      	ldreq	r1, [r3, #0]
 8009a3e:	685b      	ldreq	r3, [r3, #4]
 8009a40:	1949      	addeq	r1, r1, r5
 8009a42:	6021      	streq	r1, [r4, #0]
 8009a44:	e7ed      	b.n	8009a22 <_free_r+0x22>
 8009a46:	461a      	mov	r2, r3
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	b10b      	cbz	r3, 8009a50 <_free_r+0x50>
 8009a4c:	42a3      	cmp	r3, r4
 8009a4e:	d9fa      	bls.n	8009a46 <_free_r+0x46>
 8009a50:	6811      	ldr	r1, [r2, #0]
 8009a52:	1855      	adds	r5, r2, r1
 8009a54:	42a5      	cmp	r5, r4
 8009a56:	d10b      	bne.n	8009a70 <_free_r+0x70>
 8009a58:	6824      	ldr	r4, [r4, #0]
 8009a5a:	4421      	add	r1, r4
 8009a5c:	1854      	adds	r4, r2, r1
 8009a5e:	42a3      	cmp	r3, r4
 8009a60:	6011      	str	r1, [r2, #0]
 8009a62:	d1e0      	bne.n	8009a26 <_free_r+0x26>
 8009a64:	681c      	ldr	r4, [r3, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	6053      	str	r3, [r2, #4]
 8009a6a:	440c      	add	r4, r1
 8009a6c:	6014      	str	r4, [r2, #0]
 8009a6e:	e7da      	b.n	8009a26 <_free_r+0x26>
 8009a70:	d902      	bls.n	8009a78 <_free_r+0x78>
 8009a72:	230c      	movs	r3, #12
 8009a74:	6003      	str	r3, [r0, #0]
 8009a76:	e7d6      	b.n	8009a26 <_free_r+0x26>
 8009a78:	6825      	ldr	r5, [r4, #0]
 8009a7a:	1961      	adds	r1, r4, r5
 8009a7c:	428b      	cmp	r3, r1
 8009a7e:	bf04      	itt	eq
 8009a80:	6819      	ldreq	r1, [r3, #0]
 8009a82:	685b      	ldreq	r3, [r3, #4]
 8009a84:	6063      	str	r3, [r4, #4]
 8009a86:	bf04      	itt	eq
 8009a88:	1949      	addeq	r1, r1, r5
 8009a8a:	6021      	streq	r1, [r4, #0]
 8009a8c:	6054      	str	r4, [r2, #4]
 8009a8e:	e7ca      	b.n	8009a26 <_free_r+0x26>
 8009a90:	b003      	add	sp, #12
 8009a92:	bd30      	pop	{r4, r5, pc}
 8009a94:	200005b4 	.word	0x200005b4

08009a98 <__ascii_mbtowc>:
 8009a98:	b082      	sub	sp, #8
 8009a9a:	b901      	cbnz	r1, 8009a9e <__ascii_mbtowc+0x6>
 8009a9c:	a901      	add	r1, sp, #4
 8009a9e:	b142      	cbz	r2, 8009ab2 <__ascii_mbtowc+0x1a>
 8009aa0:	b14b      	cbz	r3, 8009ab6 <__ascii_mbtowc+0x1e>
 8009aa2:	7813      	ldrb	r3, [r2, #0]
 8009aa4:	600b      	str	r3, [r1, #0]
 8009aa6:	7812      	ldrb	r2, [r2, #0]
 8009aa8:	1e10      	subs	r0, r2, #0
 8009aaa:	bf18      	it	ne
 8009aac:	2001      	movne	r0, #1
 8009aae:	b002      	add	sp, #8
 8009ab0:	4770      	bx	lr
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	e7fb      	b.n	8009aae <__ascii_mbtowc+0x16>
 8009ab6:	f06f 0001 	mvn.w	r0, #1
 8009aba:	e7f8      	b.n	8009aae <__ascii_mbtowc+0x16>

08009abc <fiprintf>:
 8009abc:	b40e      	push	{r1, r2, r3}
 8009abe:	b503      	push	{r0, r1, lr}
 8009ac0:	4601      	mov	r1, r0
 8009ac2:	ab03      	add	r3, sp, #12
 8009ac4:	4805      	ldr	r0, [pc, #20]	; (8009adc <fiprintf+0x20>)
 8009ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aca:	6800      	ldr	r0, [r0, #0]
 8009acc:	9301      	str	r3, [sp, #4]
 8009ace:	f7fe ffab 	bl	8008a28 <_vfiprintf_r>
 8009ad2:	b002      	add	sp, #8
 8009ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ad8:	b003      	add	sp, #12
 8009ada:	4770      	bx	lr
 8009adc:	20000068 	.word	0x20000068

08009ae0 <__ascii_wctomb>:
 8009ae0:	b149      	cbz	r1, 8009af6 <__ascii_wctomb+0x16>
 8009ae2:	2aff      	cmp	r2, #255	; 0xff
 8009ae4:	bf85      	ittet	hi
 8009ae6:	238a      	movhi	r3, #138	; 0x8a
 8009ae8:	6003      	strhi	r3, [r0, #0]
 8009aea:	700a      	strbls	r2, [r1, #0]
 8009aec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009af0:	bf98      	it	ls
 8009af2:	2001      	movls	r0, #1
 8009af4:	4770      	bx	lr
 8009af6:	4608      	mov	r0, r1
 8009af8:	4770      	bx	lr

08009afa <abort>:
 8009afa:	b508      	push	{r3, lr}
 8009afc:	2006      	movs	r0, #6
 8009afe:	f000 f82b 	bl	8009b58 <raise>
 8009b02:	2001      	movs	r0, #1
 8009b04:	f7f8 f9d8 	bl	8001eb8 <_exit>

08009b08 <_raise_r>:
 8009b08:	291f      	cmp	r1, #31
 8009b0a:	b538      	push	{r3, r4, r5, lr}
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	460d      	mov	r5, r1
 8009b10:	d904      	bls.n	8009b1c <_raise_r+0x14>
 8009b12:	2316      	movs	r3, #22
 8009b14:	6003      	str	r3, [r0, #0]
 8009b16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b1a:	bd38      	pop	{r3, r4, r5, pc}
 8009b1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009b1e:	b112      	cbz	r2, 8009b26 <_raise_r+0x1e>
 8009b20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b24:	b94b      	cbnz	r3, 8009b3a <_raise_r+0x32>
 8009b26:	4620      	mov	r0, r4
 8009b28:	f000 f830 	bl	8009b8c <_getpid_r>
 8009b2c:	462a      	mov	r2, r5
 8009b2e:	4601      	mov	r1, r0
 8009b30:	4620      	mov	r0, r4
 8009b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b36:	f000 b817 	b.w	8009b68 <_kill_r>
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d00a      	beq.n	8009b54 <_raise_r+0x4c>
 8009b3e:	1c59      	adds	r1, r3, #1
 8009b40:	d103      	bne.n	8009b4a <_raise_r+0x42>
 8009b42:	2316      	movs	r3, #22
 8009b44:	6003      	str	r3, [r0, #0]
 8009b46:	2001      	movs	r0, #1
 8009b48:	e7e7      	b.n	8009b1a <_raise_r+0x12>
 8009b4a:	2400      	movs	r4, #0
 8009b4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b50:	4628      	mov	r0, r5
 8009b52:	4798      	blx	r3
 8009b54:	2000      	movs	r0, #0
 8009b56:	e7e0      	b.n	8009b1a <_raise_r+0x12>

08009b58 <raise>:
 8009b58:	4b02      	ldr	r3, [pc, #8]	; (8009b64 <raise+0xc>)
 8009b5a:	4601      	mov	r1, r0
 8009b5c:	6818      	ldr	r0, [r3, #0]
 8009b5e:	f7ff bfd3 	b.w	8009b08 <_raise_r>
 8009b62:	bf00      	nop
 8009b64:	20000068 	.word	0x20000068

08009b68 <_kill_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4d07      	ldr	r5, [pc, #28]	; (8009b88 <_kill_r+0x20>)
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	4604      	mov	r4, r0
 8009b70:	4608      	mov	r0, r1
 8009b72:	4611      	mov	r1, r2
 8009b74:	602b      	str	r3, [r5, #0]
 8009b76:	f7f8 f98f 	bl	8001e98 <_kill>
 8009b7a:	1c43      	adds	r3, r0, #1
 8009b7c:	d102      	bne.n	8009b84 <_kill_r+0x1c>
 8009b7e:	682b      	ldr	r3, [r5, #0]
 8009b80:	b103      	cbz	r3, 8009b84 <_kill_r+0x1c>
 8009b82:	6023      	str	r3, [r4, #0]
 8009b84:	bd38      	pop	{r3, r4, r5, pc}
 8009b86:	bf00      	nop
 8009b88:	200005bc 	.word	0x200005bc

08009b8c <_getpid_r>:
 8009b8c:	f7f8 b97c 	b.w	8001e88 <_getpid>

08009b90 <_init>:
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	bf00      	nop
 8009b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b96:	bc08      	pop	{r3}
 8009b98:	469e      	mov	lr, r3
 8009b9a:	4770      	bx	lr

08009b9c <_fini>:
 8009b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9e:	bf00      	nop
 8009ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba2:	bc08      	pop	{r3}
 8009ba4:	469e      	mov	lr, r3
 8009ba6:	4770      	bx	lr
