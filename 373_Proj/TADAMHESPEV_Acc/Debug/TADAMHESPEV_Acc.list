
TADAMHESPEV_Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008660  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08008820  08008820  00018820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c4c  08008c4c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008c4c  08008c4c  00018c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c54  08008c54  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c54  08008c54  00018c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c58  08008c58  00018c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  200001d8  08008e34  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  08008e34  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013435  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028f0  00000000  00000000  00033680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  00035f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c88  00000000  00000000  00036f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b86d  00000000  00000000  00037c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000151fd  00000000  00000000  0006348d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010493f  00000000  00000000  0007868a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053b4  00000000  00000000  0017cfcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00182380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008808 	.word	0x08008808

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	08008808 	.word	0x08008808

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <setupAccModule>:
#define OUT_Z_L_A 0x2C
#define OUT_Z_H_A 0x2D

extern I2C_HandleTypeDef hi2c1;

void setupAccModule(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
	uint8_t buf[10]= {ACC_IR_CTRL1, CTR1_SETUP};
 8000eda:	f249 7320 	movw	r3, #38688	; 0x9720
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	809a      	strh	r2, [r3, #4]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDR << 1, buf, 2, 1000);
 8000eea:	1d3a      	adds	r2, r7, #4
 8000eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	2132      	movs	r1, #50	; 0x32
 8000ef6:	4809      	ldr	r0, [pc, #36]	; (8000f1c <setupAccModule+0x48>)
 8000ef8:	f001 fb02 	bl	8002500 <HAL_I2C_Master_Transmit>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73fb      	strb	r3, [r7, #15]
	if(ret == 0){
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d103      	bne.n	8000f0e <setupAccModule+0x3a>
		printf("We gucci\n");
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <setupAccModule+0x4c>)
 8000f08:	f005 fce6 	bl	80068d8 <puts>
	}
	else{
		printf("we not gucci\n");
	}
}
 8000f0c:	e002      	b.n	8000f14 <setupAccModule+0x40>
		printf("we not gucci\n");
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <setupAccModule+0x50>)
 8000f10:	f005 fce2 	bl	80068d8 <puts>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000298 	.word	0x20000298
 8000f20:	08008820 	.word	0x08008820
 8000f24:	0800882c 	.word	0x0800882c

08000f28 <ReadAccData>:
	printf("Raw:\t%u\tAcc:\t%f\tBinary:\t",raw,acc);
	printBinary(accBin);
	printf("\n");
}

float ReadAccData(){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af02      	add	r7, sp, #8
		uint8_t buf[1]= {OUT_X_L_A | 1 << 7}; //Auto-Increment OUT_X_L_A
 8000f2e:	23a8      	movs	r3, #168	; 0xa8
 8000f30:	713b      	strb	r3, [r7, #4]
		uint8_t rbuf[2];
		float accVal = 0;
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]

		HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDR << 1, buf, 1, 1000);
 8000f38:	1d3a      	adds	r2, r7, #4
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	2132      	movs	r1, #50	; 0x32
 8000f44:	4829      	ldr	r0, [pc, #164]	; (8000fec <ReadAccData+0xc4>)
 8000f46:	f001 fadb 	bl	8002500 <HAL_I2C_Master_Transmit>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	72fb      	strb	r3, [r7, #11]
		//[TODO] - Have error checking for communication errors
		ret =  HAL_I2C_Master_Receive(&hi2c1, ACC_I2C_ADDR << 1, rbuf, 2, 1000);
 8000f4e:	463a      	mov	r2, r7
 8000f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2302      	movs	r3, #2
 8000f58:	2132      	movs	r1, #50	; 0x32
 8000f5a:	4824      	ldr	r0, [pc, #144]	; (8000fec <ReadAccData+0xc4>)
 8000f5c:	f001 fbe8 	bl	8002730 <HAL_I2C_Master_Receive>
 8000f60:	4603      	mov	r3, r0
 8000f62:	72fb      	strb	r3, [r7, #11]
		//[TODO] - Have error checking for communication errors

		uint16_t raw = (rbuf[1] << 8) | rbuf[0];	// 2's compliment, +-2g's
 8000f64:	787b      	ldrb	r3, [r7, #1]
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	783b      	ldrb	r3, [r7, #0]
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	813b      	strh	r3, [r7, #8]
		if(raw > 64100){
 8000f74:	893b      	ldrh	r3, [r7, #8]
 8000f76:	f64f 2264 	movw	r2, #64100	; 0xfa64
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d903      	bls.n	8000f86 <ReadAccData+0x5e>
			accVal = 0;
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e021      	b.n	8000fca <ReadAccData+0xa2>
		}
		else if(raw & 0x8000){ //if value is negative
 8000f86:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	da10      	bge.n	8000fb0 <ReadAccData+0x88>
			int16_t temp = -((raw ^ 0xFFFF) + 1);
 8000f8e:	893b      	ldrh	r3, [r7, #8]
 8000f90:	80fb      	strh	r3, [r7, #6]
			accVal = (temp / (float)(1 << 15))*2;
 8000f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f9e:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000ff0 <ReadAccData+0xc8>
 8000fa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000faa:	edc7 7a03 	vstr	s15, [r7, #12]
 8000fae:	e00c      	b.n	8000fca <ReadAccData+0xa2>
		}
		else{ //positive acceleration
			accVal = (raw / (float)((1 << 15) - 1))*2;
 8000fb0:	893b      	ldrh	r3, [r7, #8]
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fba:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000ff4 <ReadAccData+0xcc>
 8000fbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fc6:	edc7 7a03 	vstr	s15, [r7, #12]
		}
		printf("Accel:\t%f",accVal);
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f7ff fad4 	bl	8000578 <__aeabi_f2d>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <ReadAccData+0xd0>)
 8000fd6:	f005 fc19 	bl	800680c <iprintf>
		return accVal;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	ee07 3a90 	vmov	s15, r3
		//[TODO] - error check if binAcc = -1;

//		printf("%i\t%b\n",binAcc);

//		printf("%i\t%f\n",cnt++, accVal);
}
 8000fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000298 	.word	0x20000298
 8000ff0:	47000000 	.word	0x47000000
 8000ff4:	46fffe00 	.word	0x46fffe00
 8000ff8:	0800885c 	.word	0x0800885c

08000ffc <setupLEDS>:
uint8_t clearLEDs[NUM_MSG_BYTES];
uint8_t BLANK_LED[4] = {0xE0, 0x00, 0x00, 0x00};

extern SPI_HandleTypeDef hspi1;

void setupLEDS(){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
	float acc_inc = MAX_ACCEL/NUM_LEDS;
 8001002:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <setupLEDS+0xb8>)
 8001004:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < NUM_LEDS; ++i){
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e028      	b.n	800105e <setupLEDS+0x62>
		//setup LED_INDEX_THRESHOLD
		LED_INDEX_THRESHOLD[i] = i*acc_inc;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001016:	edd7 7a01 	vldr	s15, [r7, #4]
 800101a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101e:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <setupLEDS+0xbc>)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	edc3 7a00 	vstr	s15, [r3]

		//setup LED_COLOR_ARR
		if(i < NUM_GREEN){
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b04      	cmp	r3, #4
 800102e:	dc05      	bgt.n	800103c <setupLEDS+0x40>
			LED_COLOR_ARR[i] = 0; // 0 = green
 8001030:	4a22      	ldr	r2, [pc, #136]	; (80010bc <setupLEDS+0xc0>)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e00d      	b.n	8001058 <setupLEDS+0x5c>
		}
		else if(i < NUM_GREEN + NUM_YELLOW){
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b0c      	cmp	r3, #12
 8001040:	dc05      	bgt.n	800104e <setupLEDS+0x52>
			LED_COLOR_ARR[i] = 1; // 1 = yellow
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <setupLEDS+0xc0>)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	e004      	b.n	8001058 <setupLEDS+0x5c>
		}
		else{
			LED_COLOR_ARR[i] = 2; // 2 = red
 800104e:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <setupLEDS+0xc0>)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	2202      	movs	r2, #2
 8001056:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_LEDS; ++i){
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3301      	adds	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b10      	cmp	r3, #16
 8001062:	ddd3      	ble.n	800100c <setupLEDS+0x10>
		}
	}

	//initialize a blank LED strip array
	for(int j = 0; j < NUM_MSG_BYTES; ++j){
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	e01a      	b.n	80010a0 <setupLEDS+0xa4>
		if(j < 4){
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b03      	cmp	r3, #3
 800106e:	dc05      	bgt.n	800107c <setupLEDS+0x80>
			clearLEDs[j] = 0;
 8001070:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <setupLEDS+0xc4>)
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	4413      	add	r3, r2
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
 800107a:	e00e      	b.n	800109a <setupLEDS+0x9e>
		}
		else if(j < (NUM_MSG_BYTES - 1)){
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	2b47      	cmp	r3, #71	; 0x47
 8001080:	dc06      	bgt.n	8001090 <setupLEDS+0x94>
			memcpy(&clearLEDs[j],BLANK_LED,sizeof(BLANK_LED));
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <setupLEDS+0xc4>)
 8001086:	4413      	add	r3, r2
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <setupLEDS+0xc8>)
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e004      	b.n	800109a <setupLEDS+0x9e>
		}
		else{
			clearLEDs[j] = 0;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <setupLEDS+0xc4>)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	4413      	add	r3, r2
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < NUM_MSG_BYTES; ++j){
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	3301      	adds	r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	2b48      	cmp	r3, #72	; 0x48
 80010a4:	dde1      	ble.n	800106a <setupLEDS+0x6e>
		}
	}
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	3df0f0f1 	.word	0x3df0f0f1
 80010b8:	200001f4 	.word	0x200001f4
 80010bc:	20000238 	.word	0x20000238
 80010c0:	2000024c 	.word	0x2000024c
 80010c4:	20000000 	.word	0x20000000

080010c8 <makeLEDFrame>:
	if(ret != HAL_OK){
		//There is a problem
	}
}

void makeLEDFrame(uint8_t* frame, uint8_t gr_yel_red){
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
	switch(gr_yel_red){
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d026      	beq.n	8001128 <makeLEDFrame+0x60>
 80010da:	2b02      	cmp	r3, #2
 80010dc:	dc34      	bgt.n	8001148 <makeLEDFrame+0x80>
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <makeLEDFrame+0x20>
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d010      	beq.n	8001108 <makeLEDFrame+0x40>
 80010e6:	e02f      	b.n	8001148 <makeLEDFrame+0x80>
		case 0:									// green
			*(frame) = LED_FRAME_START_BRIGHT;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	22e3      	movs	r2, #227	; 0xe3
 80010ec:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 255; 	//green
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3301      	adds	r3, #1
 80010f2:	22ff      	movs	r2, #255	; 0xff
 80010f4:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 0; 		//blue
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3302      	adds	r3, #2
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 0;		//red
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3303      	adds	r3, #3
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
			break;
 8001106:	e02f      	b.n	8001168 <makeLEDFrame+0xa0>
		case 1:					 				// yellow
			*(frame) = LED_FRAME_START_BRIGHT;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	22e3      	movs	r2, #227	; 0xe3
 800110c:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 255; 	//green
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3301      	adds	r3, #1
 8001112:	22ff      	movs	r2, #255	; 0xff
 8001114:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 0; 		//blue
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3302      	adds	r3, #2
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 255;		//red
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3303      	adds	r3, #3
 8001122:	22ff      	movs	r2, #255	; 0xff
 8001124:	701a      	strb	r2, [r3, #0]
			break;
 8001126:	e01f      	b.n	8001168 <makeLEDFrame+0xa0>
		case 2:					 				// red
			*(frame) = LED_FRAME_START_BRIGHT;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	22e3      	movs	r2, #227	; 0xe3
 800112c:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 		//green
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3301      	adds	r3, #1
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 0;	 	//blue
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3302      	adds	r3, #2
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 255;		//red
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3303      	adds	r3, #3
 8001142:	22ff      	movs	r2, #255	; 0xff
 8001144:	701a      	strb	r2, [r3, #0]
			break;
 8001146:	e00f      	b.n	8001168 <makeLEDFrame+0xa0>
		default:								// no brightness
			*(frame) = LED_FRAME_START_OFF;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	22e0      	movs	r2, #224	; 0xe0
 800114c:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 		//green
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3301      	adds	r3, #1
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 0; 		//blue
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3302      	adds	r3, #2
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 0;		//red
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3303      	adds	r3, #3
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
			break;
 8001166:	bf00      	nop
			//	[TODO] maybe try making them all off rather than having blue?
	}

}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <printLEDs>:

void printLEDs(float accVal){
 8001174:	b580      	push	{r7, lr}
 8001176:	b098      	sub	sp, #96	; 0x60
 8001178:	af00      	add	r7, sp, #0
 800117a:	ed87 0a01 	vstr	s0, [r7, #4]
	accVal = fabs(accVal);
 800117e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001182:	eef0 7ae7 	vabs.f32	s15, s15
 8001186:	edc7 7a01 	vstr	s15, [r7, #4]

	uint8_t led_msg[NUM_MSG_BYTES];

	//create start frame
	int i = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	65fb      	str	r3, [r7, #92]	; 0x5c
	for(; i < 4; ++i){
 800118e:	e008      	b.n	80011a2 <printLEDs+0x2e>
		led_msg[i] = 0;
 8001190:	f107 020c 	add.w	r2, r7, #12
 8001194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001196:	4413      	add	r3, r2
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
	for(; i < 4; ++i){
 800119c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800119e:	3301      	adds	r3, #1
 80011a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	ddf3      	ble.n	8001190 <printLEDs+0x1c>
	}

	//create LED frame
	for(int j = 0; j < NUM_LEDS; ++j){
 80011a8:	2300      	movs	r3, #0
 80011aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80011ac:	e029      	b.n	8001202 <printLEDs+0x8e>
		uint8_t led_frame[4];
		if(accVal > LED_INDEX_THRESHOLD[j]){
 80011ae:	4a24      	ldr	r2, [pc, #144]	; (8001240 <printLEDs+0xcc>)
 80011b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80011be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c6:	dd0a      	ble.n	80011de <printLEDs+0x6a>
			makeLEDFrame(led_frame,LED_COLOR_ARR[j]); //LED_COLOR_ARR[j] = 0,1,2
 80011c8:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <printLEDs+0xd0>)
 80011ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011cc:	4413      	add	r3, r2
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff76 	bl	80010c8 <makeLEDFrame>
 80011dc:	e005      	b.n	80011ea <printLEDs+0x76>
		}
		else{
			makeLEDFrame(led_frame,4); //no brightness
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	2104      	movs	r1, #4
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff6f 	bl	80010c8 <makeLEDFrame>
		}
		//add the frame to the rest of the message
		memcpy(&led_msg[i],led_frame,sizeof(led_frame));
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011f0:	4413      	add	r3, r2
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	601a      	str	r2, [r3, #0]
//		led_msg[i] = led_frame;
		i = i + 4;
 80011f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011f8:	3304      	adds	r3, #4
 80011fa:	65fb      	str	r3, [r7, #92]	; 0x5c
	for(int j = 0; j < NUM_LEDS; ++j){
 80011fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011fe:	3301      	adds	r3, #1
 8001200:	65bb      	str	r3, [r7, #88]	; 0x58
 8001202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001204:	2b10      	cmp	r3, #16
 8001206:	ddd2      	ble.n	80011ae <printLEDs+0x3a>
			//full pause
		}
	}

	//create the end frame
	for(; i < NUM_MSG_BYTES; ++i){
 8001208:	e008      	b.n	800121c <printLEDs+0xa8>
		led_msg[i] = 0;
 800120a:	f107 020c 	add.w	r2, r7, #12
 800120e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001210:	4413      	add	r3, r2
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
	for(; i < NUM_MSG_BYTES; ++i){
 8001216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001218:	3301      	adds	r3, #1
 800121a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800121c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800121e:	2b48      	cmp	r3, #72	; 0x48
 8001220:	ddf3      	ble.n	800120a <printLEDs+0x96>
	}

	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)led_msg, NUM_MSG_BYTES,1000);
 8001222:	f107 010c 	add.w	r1, r7, #12
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	2249      	movs	r2, #73	; 0x49
 800122c:	4806      	ldr	r0, [pc, #24]	; (8001248 <printLEDs+0xd4>)
 800122e:	f003 fc06 	bl	8004a3e <HAL_SPI_Transmit>
 8001232:	4603      	mov	r3, r0
 8001234:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if(ret != HAL_OK){
		//There is a problem
	}
}
 8001238:	bf00      	nop
 800123a:	3760      	adds	r7, #96	; 0x60
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200001f4 	.word	0x200001f4
 8001244:	20000238 	.word	0x20000238
 8001248:	20000380 	.word	0x20000380

0800124c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001252:	f000 fdb4 	bl	8001dbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001256:	f000 f818 	bl	800128a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125a:	f000 f925 	bl	80014a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800125e:	f000 f85b 	bl	8001318 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001262:	f000 f897 	bl	8001394 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8001266:	f000 f8e1 	bl	800142c <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  static int cnt = 0;
  setupAccModule();
 800126a:	f7ff fe33 	bl	8000ed4 <setupAccModule>
  setupLEDS();
 800126e:	f7ff fec5 	bl	8000ffc <setupLEDS>

  float acc = 0;
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
//  uint8_t dispBinAcc = binAccRead;
//  int diffTol = 5;

  while (1)
  {
	 acc = ReadAccData();
 8001278:	f7ff fe56 	bl	8000f28 <ReadAccData>
 800127c:	ed87 0a01 	vstr	s0, [r7, #4]
	 printLEDs(acc);
 8001280:	ed97 0a01 	vldr	s0, [r7, #4]
 8001284:	f7ff ff76 	bl	8001174 <printLEDs>
	 acc = ReadAccData();
 8001288:	e7f6      	b.n	8001278 <main+0x2c>

0800128a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b096      	sub	sp, #88	; 0x58
 800128e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2244      	movs	r2, #68	; 0x44
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f005 fb25 	bl	80068e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012b0:	f001 fe7e 	bl	8002fb0 <HAL_PWREx_ControlVoltageScaling>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012ba:	f000 fb2b 	bl	8001914 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012be:	2310      	movs	r3, #16
 80012c0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012c2:	2301      	movs	r3, #1
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012ca:	2360      	movs	r3, #96	; 0x60
 80012cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 ff1e 	bl	8003118 <HAL_RCC_OscConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80012e2:	f000 fb17 	bl	8001914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e6:	230f      	movs	r3, #15
 80012e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012fa:	463b      	mov	r3, r7
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 fb24 	bl	800394c <HAL_RCC_ClockConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0x84>
  {
    Error_Handler();
 800130a:	f000 fb03 	bl	8001914 <Error_Handler>
  }
}
 800130e:	bf00      	nop
 8001310:	3758      	adds	r7, #88	; 0x58
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <MX_I2C1_Init+0x74>)
 800131e:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <MX_I2C1_Init+0x78>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_I2C1_Init+0x74>)
 8001324:	f640 6214 	movw	r2, #3604	; 0xe14
 8001328:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_I2C1_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <MX_I2C1_Init+0x74>)
 8001332:	2201      	movs	r2, #1
 8001334:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_I2C1_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <MX_I2C1_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_I2C1_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001348:	4b10      	ldr	r3, [pc, #64]	; (800138c <MX_I2C1_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_I2C1_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <MX_I2C1_Init+0x74>)
 8001356:	f001 f837 	bl	80023c8 <HAL_I2C_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001360:	f000 fad8 	bl	8001914 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001364:	2100      	movs	r1, #0
 8001366:	4809      	ldr	r0, [pc, #36]	; (800138c <MX_I2C1_Init+0x74>)
 8001368:	f001 fd6a 	bl	8002e40 <HAL_I2CEx_ConfigAnalogFilter>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001372:	f000 facf 	bl	8001914 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001376:	2100      	movs	r1, #0
 8001378:	4804      	ldr	r0, [pc, #16]	; (800138c <MX_I2C1_Init+0x74>)
 800137a:	f001 fdac 	bl	8002ed6 <HAL_I2CEx_ConfigDigitalFilter>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001384:	f000 fac6 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000298 	.word	0x20000298
 8001390:	40005400 	.word	0x40005400

08001394 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <MX_LPUART1_UART_Init+0x90>)
 800139a:	4a23      	ldr	r2, [pc, #140]	; (8001428 <MX_LPUART1_UART_Init+0x94>)
 800139c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <MX_LPUART1_UART_Init+0x90>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_LPUART1_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <MX_LPUART1_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_LPUART1_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_LPUART1_UART_Init+0x90>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <MX_LPUART1_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <MX_LPUART1_UART_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_LPUART1_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_LPUART1_UART_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_LPUART1_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80013dc:	4811      	ldr	r0, [pc, #68]	; (8001424 <MX_LPUART1_UART_Init+0x90>)
 80013de:	f003 fe07 	bl	8004ff0 <HAL_UART_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80013e8:	f000 fa94 	bl	8001914 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ec:	2100      	movs	r1, #0
 80013ee:	480d      	ldr	r0, [pc, #52]	; (8001424 <MX_LPUART1_UART_Init+0x90>)
 80013f0:	f004 fc2c 	bl	8005c4c <HAL_UARTEx_SetTxFifoThreshold>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013fa:	f000 fa8b 	bl	8001914 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fe:	2100      	movs	r1, #0
 8001400:	4808      	ldr	r0, [pc, #32]	; (8001424 <MX_LPUART1_UART_Init+0x90>)
 8001402:	f004 fc61 	bl	8005cc8 <HAL_UARTEx_SetRxFifoThreshold>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800140c:	f000 fa82 	bl	8001914 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <MX_LPUART1_UART_Init+0x90>)
 8001412:	f004 fbe2 	bl	8005bda <HAL_UARTEx_DisableFifoMode>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800141c:	f000 fa7a 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200002ec 	.word	0x200002ec
 8001428:	40008000 	.word	0x40008000

0800142c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <MX_SPI1_Init+0x78>)
 8001434:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001438:	f44f 7282 	mov.w	r2, #260	; 0x104
 800143c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001446:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800144a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_SPI1_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_SPI1_Init+0x74>)
 800145a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001462:	2208      	movs	r2, #8
 8001464:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_SPI1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_SPI1_Init+0x74>)
 800147a:	2207      	movs	r2, #7
 800147c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_SPI1_Init+0x74>)
 8001486:	2208      	movs	r2, #8
 8001488:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_SPI1_Init+0x74>)
 800148c:	f003 fa34 	bl	80048f8 <HAL_SPI_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001496:	f000 fa3d 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000380 	.word	0x20000380
 80014a4:	40013000 	.word	0x40013000

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	; 0x38
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014be:	4bb2      	ldr	r3, [pc, #712]	; (8001788 <MX_GPIO_Init+0x2e0>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4ab1      	ldr	r2, [pc, #708]	; (8001788 <MX_GPIO_Init+0x2e0>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4baf      	ldr	r3, [pc, #700]	; (8001788 <MX_GPIO_Init+0x2e0>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	623b      	str	r3, [r7, #32]
 80014d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	4bac      	ldr	r3, [pc, #688]	; (8001788 <MX_GPIO_Init+0x2e0>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	4aab      	ldr	r2, [pc, #684]	; (8001788 <MX_GPIO_Init+0x2e0>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e2:	4ba9      	ldr	r3, [pc, #676]	; (8001788 <MX_GPIO_Init+0x2e0>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ee:	4ba6      	ldr	r3, [pc, #664]	; (8001788 <MX_GPIO_Init+0x2e0>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	4aa5      	ldr	r2, [pc, #660]	; (8001788 <MX_GPIO_Init+0x2e0>)
 80014f4:	f043 0320 	orr.w	r3, r3, #32
 80014f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fa:	4ba3      	ldr	r3, [pc, #652]	; (8001788 <MX_GPIO_Init+0x2e0>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001506:	4ba0      	ldr	r3, [pc, #640]	; (8001788 <MX_GPIO_Init+0x2e0>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a9f      	ldr	r2, [pc, #636]	; (8001788 <MX_GPIO_Init+0x2e0>)
 800150c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b9d      	ldr	r3, [pc, #628]	; (8001788 <MX_GPIO_Init+0x2e0>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b9a      	ldr	r3, [pc, #616]	; (8001788 <MX_GPIO_Init+0x2e0>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	4a99      	ldr	r2, [pc, #612]	; (8001788 <MX_GPIO_Init+0x2e0>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152a:	4b97      	ldr	r3, [pc, #604]	; (8001788 <MX_GPIO_Init+0x2e0>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	4b94      	ldr	r3, [pc, #592]	; (8001788 <MX_GPIO_Init+0x2e0>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	4a93      	ldr	r2, [pc, #588]	; (8001788 <MX_GPIO_Init+0x2e0>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001542:	4b91      	ldr	r3, [pc, #580]	; (8001788 <MX_GPIO_Init+0x2e0>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154e:	4b8e      	ldr	r3, [pc, #568]	; (8001788 <MX_GPIO_Init+0x2e0>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	4a8d      	ldr	r2, [pc, #564]	; (8001788 <MX_GPIO_Init+0x2e0>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155a:	4b8b      	ldr	r3, [pc, #556]	; (8001788 <MX_GPIO_Init+0x2e0>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001566:	4b88      	ldr	r3, [pc, #544]	; (8001788 <MX_GPIO_Init+0x2e0>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	4a87      	ldr	r2, [pc, #540]	; (8001788 <MX_GPIO_Init+0x2e0>)
 800156c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001572:	4b85      	ldr	r3, [pc, #532]	; (8001788 <MX_GPIO_Init+0x2e0>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800157e:	f001 fdbb 	bl	80030f8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	2178      	movs	r1, #120	; 0x78
 8001586:	4881      	ldr	r0, [pc, #516]	; (800178c <MX_GPIO_Init+0x2e4>)
 8001588:	f000 ff06 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800158c:	230c      	movs	r3, #12
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800159c:	230d      	movs	r3, #13
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	487a      	ldr	r0, [pc, #488]	; (8001790 <MX_GPIO_Init+0x2e8>)
 80015a8:	f000 fd64 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80015ac:	2307      	movs	r3, #7
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b0:	2312      	movs	r3, #18
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015bc:	2304      	movs	r3, #4
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	4873      	ldr	r0, [pc, #460]	; (8001794 <MX_GPIO_Init+0x2ec>)
 80015c8:	f000 fd54 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80015dc:	230d      	movs	r3, #13
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	486b      	ldr	r0, [pc, #428]	; (8001794 <MX_GPIO_Init+0x2ec>)
 80015e8:	f000 fd44 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015ec:	233f      	movs	r3, #63	; 0x3f
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015f0:	230b      	movs	r3, #11
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fc:	4619      	mov	r1, r3
 80015fe:	4866      	ldr	r0, [pc, #408]	; (8001798 <MX_GPIO_Init+0x2f0>)
 8001600:	f000 fd38 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001604:	2301      	movs	r3, #1
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001614:	2301      	movs	r3, #1
 8001616:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001622:	f000 fd27 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001626:	230a      	movs	r3, #10
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800162a:	230b      	movs	r3, #11
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163c:	f000 fd1a 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001640:	2301      	movs	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001650:	2302      	movs	r3, #2
 8001652:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001658:	4619      	mov	r1, r3
 800165a:	484c      	ldr	r0, [pc, #304]	; (800178c <MX_GPIO_Init+0x2e4>)
 800165c:	f000 fd0a 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001660:	2302      	movs	r3, #2
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001664:	230b      	movs	r3, #11
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	4619      	mov	r1, r3
 8001672:	4846      	ldr	r0, [pc, #280]	; (800178c <MX_GPIO_Init+0x2e4>)
 8001674:	f000 fcfe 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001678:	2304      	movs	r3, #4
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800167c:	2303      	movs	r3, #3
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001688:	4619      	mov	r1, r3
 800168a:	4840      	ldr	r0, [pc, #256]	; (800178c <MX_GPIO_Init+0x2e4>)
 800168c:	f000 fcf2 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001690:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016a2:	2301      	movs	r3, #1
 80016a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016aa:	4619      	mov	r1, r3
 80016ac:	4838      	ldr	r0, [pc, #224]	; (8001790 <MX_GPIO_Init+0x2e8>)
 80016ae:	f000 fce1 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80016c4:	2303      	movs	r3, #3
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	4830      	ldr	r0, [pc, #192]	; (8001790 <MX_GPIO_Init+0x2e8>)
 80016d0:	f000 fcd0 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016e6:	2301      	movs	r3, #1
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	4826      	ldr	r0, [pc, #152]	; (800178c <MX_GPIO_Init+0x2e4>)
 80016f2:	f000 fcbf 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80016f6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001708:	230d      	movs	r3, #13
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	481e      	ldr	r0, [pc, #120]	; (800178c <MX_GPIO_Init+0x2e4>)
 8001714:	f000 fcae 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001718:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800172a:	230e      	movs	r3, #14
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	4815      	ldr	r0, [pc, #84]	; (800178c <MX_GPIO_Init+0x2e4>)
 8001736:	f000 fc9d 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800173a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800174c:	2307      	movs	r3, #7
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	4619      	mov	r1, r3
 8001756:	4811      	ldr	r0, [pc, #68]	; (800179c <MX_GPIO_Init+0x2f4>)
 8001758:	f000 fc8c 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800175c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800176e:	2302      	movs	r3, #2
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <MX_GPIO_Init+0x2f4>)
 800177a:	f000 fc7b 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800177e:	2340      	movs	r3, #64	; 0x40
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	e00c      	b.n	80017a0 <MX_GPIO_Init+0x2f8>
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000
 800178c:	48000400 	.word	0x48000400
 8001790:	48001000 	.word	0x48001000
 8001794:	48001400 	.word	0x48001400
 8001798:	48000800 	.word	0x48000800
 800179c:	48000c00 	.word	0x48000c00
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80017aa:	230d      	movs	r3, #13
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b2:	4619      	mov	r1, r3
 80017b4:	484a      	ldr	r0, [pc, #296]	; (80018e0 <MX_GPIO_Init+0x438>)
 80017b6:	f000 fc5d 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ca:	2302      	movs	r3, #2
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d2:	4619      	mov	r1, r3
 80017d4:	4842      	ldr	r0, [pc, #264]	; (80018e0 <MX_GPIO_Init+0x438>)
 80017d6:	f000 fc4d 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80017da:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017ec:	230c      	movs	r3, #12
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f4:	4619      	mov	r1, r3
 80017f6:	483a      	ldr	r0, [pc, #232]	; (80018e0 <MX_GPIO_Init+0x438>)
 80017f8:	f000 fc3c 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80017fc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800180e:	230a      	movs	r3, #10
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181c:	f000 fc2a 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001826:	2300      	movs	r3, #0
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001838:	f000 fc1c 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800183c:	2301      	movs	r3, #1
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800184c:	2309      	movs	r3, #9
 800184e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	4823      	ldr	r0, [pc, #140]	; (80018e4 <MX_GPIO_Init+0x43c>)
 8001858:	f000 fc0c 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800185c:	2304      	movs	r3, #4
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800186c:	230c      	movs	r3, #12
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001874:	4619      	mov	r1, r3
 8001876:	481b      	ldr	r0, [pc, #108]	; (80018e4 <MX_GPIO_Init+0x43c>)
 8001878:	f000 fbfc 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800187c:	2378      	movs	r3, #120	; 0x78
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800188c:	2307      	movs	r3, #7
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001894:	4619      	mov	r1, r3
 8001896:	4813      	ldr	r0, [pc, #76]	; (80018e4 <MX_GPIO_Init+0x43c>)
 8001898:	f000 fbec 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800189c:	2378      	movs	r3, #120	; 0x78
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	480d      	ldr	r0, [pc, #52]	; (80018e8 <MX_GPIO_Init+0x440>)
 80018b4:	f000 fbde 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018b8:	2301      	movs	r3, #1
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018c8:	2302      	movs	r3, #2
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d0:	4619      	mov	r1, r3
 80018d2:	4806      	ldr	r0, [pc, #24]	; (80018ec <MX_GPIO_Init+0x444>)
 80018d4:	f000 fbce 	bl	8002074 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018d8:	bf00      	nop
 80018da:	3738      	adds	r7, #56	; 0x38
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	48000800 	.word	0x48000800
 80018e4:	48000c00 	.word	0x48000c00
 80018e8:	48000400 	.word	0x48000400
 80018ec:	48001000 	.word	0x48001000

080018f0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80018f8:	1d39      	adds	r1, r7, #4
 80018fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018fe:	2201      	movs	r2, #1
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <__io_putchar+0x20>)
 8001902:	f003 fbc5 	bl	8005090 <HAL_UART_Transmit>
  return ch;
 8001906:	687b      	ldr	r3, [r7, #4]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200002ec 	.word	0x200002ec

08001914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
}
 800191a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191c:	e7fe      	b.n	800191c <Error_Handler+0x8>
	...

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_MspInit+0x44>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_MspInit+0x44>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6613      	str	r3, [r2, #96]	; 0x60
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_MspInit+0x44>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_MspInit+0x44>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_MspInit+0x44>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6593      	str	r3, [r2, #88]	; 0x58
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_MspInit+0x44>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000

08001968 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b0ae      	sub	sp, #184	; 0xb8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	2294      	movs	r2, #148	; 0x94
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f004 ffad 	bl	80068e8 <memset>
  if(hi2c->Instance==I2C1)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a21      	ldr	r2, [pc, #132]	; (8001a18 <HAL_I2C_MspInit+0xb0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d13b      	bne.n	8001a10 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001998:	2340      	movs	r3, #64	; 0x40
 800199a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800199c:	2300      	movs	r3, #0
 800199e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 fa8f 	bl	8003ec8 <HAL_RCCEx_PeriphCLKConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019b0:	f7ff ffb0 	bl	8001914 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_I2C_MspInit+0xb4>)
 80019b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b8:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <HAL_I2C_MspInit+0xb4>)
 80019ba:	f043 0302 	orr.w	r3, r3, #2
 80019be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_I2C_MspInit+0xb4>)
 80019c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d4:	2312      	movs	r3, #18
 80019d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019e6:	2304      	movs	r3, #4
 80019e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019f0:	4619      	mov	r1, r3
 80019f2:	480b      	ldr	r0, [pc, #44]	; (8001a20 <HAL_I2C_MspInit+0xb8>)
 80019f4:	f000 fb3e 	bl	8002074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_I2C_MspInit+0xb4>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fc:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <HAL_I2C_MspInit+0xb4>)
 80019fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a02:	6593      	str	r3, [r2, #88]	; 0x58
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_I2C_MspInit+0xb4>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a10:	bf00      	nop
 8001a12:	37b8      	adds	r7, #184	; 0xb8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40005400 	.word	0x40005400
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	48000400 	.word	0x48000400

08001a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0ae      	sub	sp, #184	; 0xb8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	2294      	movs	r2, #148	; 0x94
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 ff4f 	bl	80068e8 <memset>
  if(huart->Instance==LPUART1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a22      	ldr	r2, [pc, #136]	; (8001ad8 <HAL_UART_MspInit+0xb4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d13d      	bne.n	8001ad0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a54:	2320      	movs	r3, #32
 8001a56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 fa31 	bl	8003ec8 <HAL_RCCEx_PeriphCLKConfig>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a6c:	f7ff ff52 	bl	8001914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <HAL_UART_MspInit+0xb8>)
 8001a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a74:	4a19      	ldr	r2, [pc, #100]	; (8001adc <HAL_UART_MspInit+0xb8>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <HAL_UART_MspInit+0xb8>)
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_UART_MspInit+0xb8>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8c:	4a13      	ldr	r2, [pc, #76]	; (8001adc <HAL_UART_MspInit+0xb8>)
 8001a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_UART_MspInit+0xb8>)
 8001a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001aa0:	f001 fb2a 	bl	80030f8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001aa4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001aa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001abe:	2308      	movs	r3, #8
 8001ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ac4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_UART_MspInit+0xbc>)
 8001acc:	f000 fad2 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001ad0:	bf00      	nop
 8001ad2:	37b8      	adds	r7, #184	; 0xb8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40008000 	.word	0x40008000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	48001800 	.word	0x48001800

08001ae4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <HAL_SPI_MspInit+0x7c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d128      	bne.n	8001b58 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_SPI_MspInit+0x80>)
 8001b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b0a:	4a16      	ldr	r2, [pc, #88]	; (8001b64 <HAL_SPI_MspInit+0x80>)
 8001b0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b10:	6613      	str	r3, [r2, #96]	; 0x60
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_SPI_MspInit+0x80>)
 8001b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_SPI_MspInit+0x80>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <HAL_SPI_MspInit+0x80>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_SPI_MspInit+0x80>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b36:	23f0      	movs	r3, #240	; 0xf0
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b46:	2305      	movs	r3, #5
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b54:	f000 fa8e 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b58:	bf00      	nop
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40013000 	.word	0x40013000
 8001b64:	40021000 	.word	0x40021000

08001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <NMI_Handler+0x4>

08001b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb4:	f000 f958 	bl	8001e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return 1;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <_kill>:

int _kill(int pid, int sig)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bd6:	f004 fe93 	bl	8006900 <__errno>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2216      	movs	r2, #22
 8001bde:	601a      	str	r2, [r3, #0]
  return -1;
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_exit>:

void _exit (int status)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ffe7 	bl	8001bcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bfe:	e7fe      	b.n	8001bfe <_exit+0x12>

08001c00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	e00a      	b.n	8001c28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c12:	f3af 8000 	nop.w
 8001c16:	4601      	mov	r1, r0
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60ba      	str	r2, [r7, #8]
 8001c1e:	b2ca      	uxtb	r2, r1
 8001c20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3301      	adds	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	dbf0      	blt.n	8001c12 <_read+0x12>
  }

  return len;
 8001c30:	687b      	ldr	r3, [r7, #4]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e009      	b.n	8001c60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	60ba      	str	r2, [r7, #8]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fe4b 	bl	80018f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbf1      	blt.n	8001c4c <_write+0x12>
  }
  return len;
 8001c68:	687b      	ldr	r3, [r7, #4]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_close>:

int _close(int file)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c9a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <_isatty>:

int _isatty(int file)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce4:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <_sbrk+0x5c>)
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <_sbrk+0x60>)
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <_sbrk+0x64>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <_sbrk+0x68>)
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d207      	bcs.n	8001d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d0c:	f004 fdf8 	bl	8006900 <__errno>
 8001d10:	4603      	mov	r3, r0
 8001d12:	220c      	movs	r2, #12
 8001d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d1a:	e009      	b.n	8001d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <_sbrk+0x64>)
 8001d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200a0000 	.word	0x200a0000
 8001d3c:	00000400 	.word	0x00000400
 8001d40:	200003e4 	.word	0x200003e4
 8001d44:	20000538 	.word	0x20000538

08001d48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <SystemInit+0x20>)
 8001d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <SystemInit+0x20>)
 8001d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d70:	f7ff ffea 	bl	8001d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d74:	480c      	ldr	r0, [pc, #48]	; (8001da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d76:	490d      	ldr	r1, [pc, #52]	; (8001dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d78:	4a0d      	ldr	r2, [pc, #52]	; (8001db0 <LoopForever+0xe>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d7c:	e002      	b.n	8001d84 <LoopCopyDataInit>

08001d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d82:	3304      	adds	r3, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d88:	d3f9      	bcc.n	8001d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d8c:	4c0a      	ldr	r4, [pc, #40]	; (8001db8 <LoopForever+0x16>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d90:	e001      	b.n	8001d96 <LoopFillZerobss>

08001d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d94:	3204      	adds	r2, #4

08001d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d9a:	f004 fdb7 	bl	800690c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d9e:	f7ff fa55 	bl	800124c <main>

08001da2 <LoopForever>:

LoopForever:
    b LoopForever
 8001da2:	e7fe      	b.n	8001da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001da4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dac:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001db0:	08008c5c 	.word	0x08008c5c
  ldr r2, =_sbss
 8001db4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001db8:	20000538 	.word	0x20000538

08001dbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC1_IRQHandler>

08001dbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f000 f91f 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f000 f80e 	bl	8001df0 <HAL_InitTick>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	71fb      	strb	r3, [r7, #7]
 8001dde:	e001      	b.n	8001de4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001de0:	f7ff fd9e 	bl	8001920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001de4:	79fb      	ldrb	r3, [r7, #7]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_InitTick+0x6c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d023      	beq.n	8001e4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_InitTick+0x70>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_InitTick+0x6c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f91d 	bl	800205a <HAL_SYSTICK_Config>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10f      	bne.n	8001e46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b0f      	cmp	r3, #15
 8001e2a:	d809      	bhi.n	8001e40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e34:	f000 f8f5 	bl	8002022 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e38:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <HAL_InitTick+0x74>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e007      	b.n	8001e50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
 8001e44:	e004      	b.n	8001e50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	e001      	b.n	8001e50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000000c 	.word	0x2000000c
 8001e60:	20000004 	.word	0x20000004
 8001e64:	20000008 	.word	0x20000008

08001e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x20>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_IncTick+0x24>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <HAL_IncTick+0x24>)
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	2000000c 	.word	0x2000000c
 8001e8c:	200003e8 	.word	0x200003e8

08001e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <HAL_GetTick+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	200003e8 	.word	0x200003e8

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fec:	f7ff ff8e 	bl	8001f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff47 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff5c 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff8e 	bl	8001f60 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5d 	bl	8001f0c <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ffb0 	bl	8001fc8 <SysTick_Config>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b480      	push	{r7}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002082:	e166      	b.n	8002352 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2101      	movs	r1, #1
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	4013      	ands	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8158 	beq.w	800234c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d005      	beq.n	80020b4 <HAL_GPIO_Init+0x40>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d130      	bne.n	8002116 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ea:	2201      	movs	r2, #1
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	f003 0201 	and.w	r2, r3, #1
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b03      	cmp	r3, #3
 8002120:	d017      	beq.n	8002152 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d123      	bne.n	80021a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	08da      	lsrs	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3208      	adds	r2, #8
 8002166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	08da      	lsrs	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3208      	adds	r2, #8
 80021a0:	6939      	ldr	r1, [r7, #16]
 80021a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2203      	movs	r2, #3
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4013      	ands	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0203 	and.w	r2, r3, #3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80b2 	beq.w	800234c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e8:	4b61      	ldr	r3, [pc, #388]	; (8002370 <HAL_GPIO_Init+0x2fc>)
 80021ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ec:	4a60      	ldr	r2, [pc, #384]	; (8002370 <HAL_GPIO_Init+0x2fc>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6613      	str	r3, [r2, #96]	; 0x60
 80021f4:	4b5e      	ldr	r3, [pc, #376]	; (8002370 <HAL_GPIO_Init+0x2fc>)
 80021f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002200:	4a5c      	ldr	r2, [pc, #368]	; (8002374 <HAL_GPIO_Init+0x300>)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	220f      	movs	r2, #15
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800222a:	d02b      	beq.n	8002284 <HAL_GPIO_Init+0x210>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a52      	ldr	r2, [pc, #328]	; (8002378 <HAL_GPIO_Init+0x304>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d025      	beq.n	8002280 <HAL_GPIO_Init+0x20c>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a51      	ldr	r2, [pc, #324]	; (800237c <HAL_GPIO_Init+0x308>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d01f      	beq.n	800227c <HAL_GPIO_Init+0x208>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a50      	ldr	r2, [pc, #320]	; (8002380 <HAL_GPIO_Init+0x30c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d019      	beq.n	8002278 <HAL_GPIO_Init+0x204>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a4f      	ldr	r2, [pc, #316]	; (8002384 <HAL_GPIO_Init+0x310>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <HAL_GPIO_Init+0x200>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a4e      	ldr	r2, [pc, #312]	; (8002388 <HAL_GPIO_Init+0x314>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00d      	beq.n	8002270 <HAL_GPIO_Init+0x1fc>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a4d      	ldr	r2, [pc, #308]	; (800238c <HAL_GPIO_Init+0x318>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d007      	beq.n	800226c <HAL_GPIO_Init+0x1f8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a4c      	ldr	r2, [pc, #304]	; (8002390 <HAL_GPIO_Init+0x31c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d101      	bne.n	8002268 <HAL_GPIO_Init+0x1f4>
 8002264:	2307      	movs	r3, #7
 8002266:	e00e      	b.n	8002286 <HAL_GPIO_Init+0x212>
 8002268:	2308      	movs	r3, #8
 800226a:	e00c      	b.n	8002286 <HAL_GPIO_Init+0x212>
 800226c:	2306      	movs	r3, #6
 800226e:	e00a      	b.n	8002286 <HAL_GPIO_Init+0x212>
 8002270:	2305      	movs	r3, #5
 8002272:	e008      	b.n	8002286 <HAL_GPIO_Init+0x212>
 8002274:	2304      	movs	r3, #4
 8002276:	e006      	b.n	8002286 <HAL_GPIO_Init+0x212>
 8002278:	2303      	movs	r3, #3
 800227a:	e004      	b.n	8002286 <HAL_GPIO_Init+0x212>
 800227c:	2302      	movs	r3, #2
 800227e:	e002      	b.n	8002286 <HAL_GPIO_Init+0x212>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_GPIO_Init+0x212>
 8002284:	2300      	movs	r3, #0
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	f002 0203 	and.w	r2, r2, #3
 800228c:	0092      	lsls	r2, r2, #2
 800228e:	4093      	lsls	r3, r2
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002296:	4937      	ldr	r1, [pc, #220]	; (8002374 <HAL_GPIO_Init+0x300>)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022a4:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_GPIO_Init+0x320>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022c8:	4a32      	ldr	r2, [pc, #200]	; (8002394 <HAL_GPIO_Init+0x320>)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022ce:	4b31      	ldr	r3, [pc, #196]	; (8002394 <HAL_GPIO_Init+0x320>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022f2:	4a28      	ldr	r2, [pc, #160]	; (8002394 <HAL_GPIO_Init+0x320>)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022f8:	4b26      	ldr	r3, [pc, #152]	; (8002394 <HAL_GPIO_Init+0x320>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800231c:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <HAL_GPIO_Init+0x320>)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002322:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <HAL_GPIO_Init+0x320>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002346:	4a13      	ldr	r2, [pc, #76]	; (8002394 <HAL_GPIO_Init+0x320>)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3301      	adds	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	f47f ae91 	bne.w	8002084 <HAL_GPIO_Init+0x10>
  }
}
 8002362:	bf00      	nop
 8002364:	bf00      	nop
 8002366:	371c      	adds	r7, #28
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	40021000 	.word	0x40021000
 8002374:	40010000 	.word	0x40010000
 8002378:	48000400 	.word	0x48000400
 800237c:	48000800 	.word	0x48000800
 8002380:	48000c00 	.word	0x48000c00
 8002384:	48001000 	.word	0x48001000
 8002388:	48001400 	.word	0x48001400
 800238c:	48001800 	.word	0x48001800
 8002390:	48001c00 	.word	0x48001c00
 8002394:	40010400 	.word	0x40010400

08002398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a8:	787b      	ldrb	r3, [r7, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e08d      	b.n	80024f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff faba 	bl	8001968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2224      	movs	r2, #36	; 0x24
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002418:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002428:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d107      	bne.n	8002442 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	e006      	b.n	8002450 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800244e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d108      	bne.n	800246a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	e007      	b.n	800247a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002478:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800248c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800249c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69d9      	ldr	r1, [r3, #28]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1a      	ldr	r2, [r3, #32]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	461a      	mov	r2, r3
 800250c:	460b      	mov	r3, r1
 800250e:	817b      	strh	r3, [r7, #10]
 8002510:	4613      	mov	r3, r2
 8002512:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b20      	cmp	r3, #32
 800251e:	f040 80fd 	bne.w	800271c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_I2C_Master_Transmit+0x30>
 800252c:	2302      	movs	r3, #2
 800252e:	e0f6      	b.n	800271e <HAL_I2C_Master_Transmit+0x21e>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002538:	f7ff fcaa 	bl	8001e90 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	2319      	movs	r3, #25
 8002544:	2201      	movs	r2, #1
 8002546:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 fa0a 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e0e1      	b.n	800271e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2221      	movs	r2, #33	; 0x21
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2210      	movs	r2, #16
 8002566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	893a      	ldrh	r2, [r7, #8]
 800257a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	2bff      	cmp	r3, #255	; 0xff
 800258a:	d906      	bls.n	800259a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	22ff      	movs	r2, #255	; 0xff
 8002590:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002592:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e007      	b.n	80025aa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80025a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025a8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d024      	beq.n	80025fc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3301      	adds	r3, #1
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	8979      	ldrh	r1, [r7, #10]
 80025ee:	4b4e      	ldr	r3, [pc, #312]	; (8002728 <HAL_I2C_Master_Transmit+0x228>)
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fbf1 	bl	8002ddc <I2C_TransferConfig>
 80025fa:	e066      	b.n	80026ca <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	b2da      	uxtb	r2, r3
 8002602:	8979      	ldrh	r1, [r7, #10]
 8002604:	4b48      	ldr	r3, [pc, #288]	; (8002728 <HAL_I2C_Master_Transmit+0x228>)
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fbe6 	bl	8002ddc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002610:	e05b      	b.n	80026ca <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	6a39      	ldr	r1, [r7, #32]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f9f3 	bl	8002a02 <I2C_WaitOnTXISFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e07b      	b.n	800271e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	781a      	ldrb	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d034      	beq.n	80026ca <HAL_I2C_Master_Transmit+0x1ca>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	2b00      	cmp	r3, #0
 8002666:	d130      	bne.n	80026ca <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	2200      	movs	r2, #0
 8002670:	2180      	movs	r1, #128	; 0x80
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f976 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e04d      	b.n	800271e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	2bff      	cmp	r3, #255	; 0xff
 800268a:	d90e      	bls.n	80026aa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	22ff      	movs	r2, #255	; 0xff
 8002690:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002696:	b2da      	uxtb	r2, r3
 8002698:	8979      	ldrh	r1, [r7, #10]
 800269a:	2300      	movs	r3, #0
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 fb9a 	bl	8002ddc <I2C_TransferConfig>
 80026a8:	e00f      	b.n	80026ca <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	8979      	ldrh	r1, [r7, #10]
 80026bc:	2300      	movs	r3, #0
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fb89 	bl	8002ddc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d19e      	bne.n	8002612 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	6a39      	ldr	r1, [r7, #32]
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f9d9 	bl	8002a90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e01a      	b.n	800271e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2220      	movs	r2, #32
 80026ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6859      	ldr	r1, [r3, #4]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_I2C_Master_Transmit+0x22c>)
 80026fc:	400b      	ands	r3, r1
 80026fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	e000      	b.n	800271e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800271c:	2302      	movs	r3, #2
  }
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	80002000 	.word	0x80002000
 800272c:	fe00e800 	.word	0xfe00e800

08002730 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	461a      	mov	r2, r3
 800273c:	460b      	mov	r3, r1
 800273e:	817b      	strh	r3, [r7, #10]
 8002740:	4613      	mov	r3, r2
 8002742:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b20      	cmp	r3, #32
 800274e:	f040 80db 	bne.w	8002908 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_I2C_Master_Receive+0x30>
 800275c:	2302      	movs	r3, #2
 800275e:	e0d4      	b.n	800290a <HAL_I2C_Master_Receive+0x1da>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002768:	f7ff fb92 	bl	8001e90 <HAL_GetTick>
 800276c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2319      	movs	r3, #25
 8002774:	2201      	movs	r2, #1
 8002776:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f8f2 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e0bf      	b.n	800290a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2222      	movs	r2, #34	; 0x22
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2210      	movs	r2, #16
 8002796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	893a      	ldrh	r2, [r7, #8]
 80027aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2bff      	cmp	r3, #255	; 0xff
 80027ba:	d90e      	bls.n	80027da <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	22ff      	movs	r2, #255	; 0xff
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	8979      	ldrh	r1, [r7, #10]
 80027ca:	4b52      	ldr	r3, [pc, #328]	; (8002914 <HAL_I2C_Master_Receive+0x1e4>)
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 fb02 	bl	8002ddc <I2C_TransferConfig>
 80027d8:	e06d      	b.n	80028b6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	8979      	ldrh	r1, [r7, #10]
 80027ec:	4b49      	ldr	r3, [pc, #292]	; (8002914 <HAL_I2C_Master_Receive+0x1e4>)
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 faf1 	bl	8002ddc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80027fa:	e05c      	b.n	80028b6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	6a39      	ldr	r1, [r7, #32]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f989 	bl	8002b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e07c      	b.n	800290a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d034      	beq.n	80028b6 <HAL_I2C_Master_Receive+0x186>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002850:	2b00      	cmp	r3, #0
 8002852:	d130      	bne.n	80028b6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	2200      	movs	r2, #0
 800285c:	2180      	movs	r1, #128	; 0x80
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f880 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e04d      	b.n	800290a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	2bff      	cmp	r3, #255	; 0xff
 8002876:	d90e      	bls.n	8002896 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	22ff      	movs	r2, #255	; 0xff
 800287c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002882:	b2da      	uxtb	r2, r3
 8002884:	8979      	ldrh	r1, [r7, #10]
 8002886:	2300      	movs	r3, #0
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 faa4 	bl	8002ddc <I2C_TransferConfig>
 8002894:	e00f      	b.n	80028b6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	8979      	ldrh	r1, [r7, #10]
 80028a8:	2300      	movs	r3, #0
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fa93 	bl	8002ddc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d19d      	bne.n	80027fc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	6a39      	ldr	r1, [r7, #32]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f8e3 	bl	8002a90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e01a      	b.n	800290a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2220      	movs	r2, #32
 80028da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <HAL_I2C_Master_Receive+0x1e8>)
 80028e8:	400b      	ands	r3, r1
 80028ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	80002400 	.word	0x80002400
 8002918:	fe00e800 	.word	0xfe00e800

0800291c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b02      	cmp	r3, #2
 8002930:	d103      	bne.n	800293a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2200      	movs	r2, #0
 8002938:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d007      	beq.n	8002958 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	619a      	str	r2, [r3, #24]
  }
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002974:	e031      	b.n	80029da <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800297c:	d02d      	beq.n	80029da <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297e:	f7ff fa87 	bl	8001e90 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d302      	bcc.n	8002994 <I2C_WaitOnFlagUntilTimeout+0x30>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d122      	bne.n	80029da <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4013      	ands	r3, r2
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d113      	bne.n	80029da <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f043 0220 	orr.w	r2, r3, #32
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00f      	b.n	80029fa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4013      	ands	r3, r2
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	bf0c      	ite	eq
 80029ea:	2301      	moveq	r3, #1
 80029ec:	2300      	movne	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d0be      	beq.n	8002976 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a0e:	e033      	b.n	8002a78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f901 	bl	8002c1c <I2C_IsErrorOccurred>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e031      	b.n	8002a88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a2a:	d025      	beq.n	8002a78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2c:	f7ff fa30 	bl	8001e90 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d302      	bcc.n	8002a42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d11a      	bne.n	8002a78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d013      	beq.n	8002a78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	f043 0220 	orr.w	r2, r3, #32
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e007      	b.n	8002a88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d1c4      	bne.n	8002a10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a9c:	e02f      	b.n	8002afe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f8ba 	bl	8002c1c <I2C_IsErrorOccurred>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e02d      	b.n	8002b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab2:	f7ff f9ed 	bl	8001e90 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d302      	bcc.n	8002ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d11a      	bne.n	8002afe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	d013      	beq.n	8002afe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f043 0220 	orr.w	r2, r3, #32
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e007      	b.n	8002b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d1c8      	bne.n	8002a9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b24:	e06b      	b.n	8002bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f876 	bl	8002c1c <I2C_IsErrorOccurred>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e069      	b.n	8002c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d138      	bne.n	8002bba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d105      	bne.n	8002b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e055      	b.n	8002c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d107      	bne.n	8002b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2210      	movs	r2, #16
 8002b76:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	645a      	str	r2, [r3, #68]	; 0x44
 8002b7e:	e002      	b.n	8002b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002b9a:	400b      	ands	r3, r1
 8002b9c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e029      	b.n	8002c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bba:	f7ff f969 	bl	8001e90 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d302      	bcc.n	8002bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d116      	bne.n	8002bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d00f      	beq.n	8002bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	f043 0220 	orr.w	r2, r3, #32
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e007      	b.n	8002c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d18c      	bne.n	8002b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	fe00e800 	.word	0xfe00e800

08002c1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	; 0x28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d068      	beq.n	8002d1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c50:	e049      	b.n	8002ce6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c58:	d045      	beq.n	8002ce6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c5a:	f7ff f919 	bl	8001e90 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <I2C_IsErrorOccurred+0x54>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d13a      	bne.n	8002ce6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c92:	d121      	bne.n	8002cd8 <I2C_IsErrorOccurred+0xbc>
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c9a:	d01d      	beq.n	8002cd8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c9c:	7cfb      	ldrb	r3, [r7, #19]
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d01a      	beq.n	8002cd8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cb0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002cb2:	f7ff f8ed 	bl	8001e90 <HAL_GetTick>
 8002cb6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cb8:	e00e      	b.n	8002cd8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cba:	f7ff f8e9 	bl	8001e90 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b19      	cmp	r3, #25
 8002cc6:	d907      	bls.n	8002cd8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	f043 0320 	orr.w	r3, r3, #32
 8002cce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002cd6:	e006      	b.n	8002ce6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b20      	cmp	r3, #32
 8002ce4:	d1e9      	bne.n	8002cba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f003 0320 	and.w	r3, r3, #32
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d003      	beq.n	8002cfc <I2C_IsErrorOccurred+0xe0>
 8002cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0aa      	beq.n	8002c52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d103      	bne.n	8002d0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	f043 0304 	orr.w	r3, r3, #4
 8002d12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00b      	beq.n	8002d44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	f043 0308 	orr.w	r3, r3, #8
 8002d54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	f043 0302 	orr.w	r3, r3, #2
 8002d76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01c      	beq.n	8002dca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff fdc3 	bl	800291c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <I2C_IsErrorOccurred+0x1bc>)
 8002da2:	400b      	ands	r3, r1
 8002da4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3728      	adds	r7, #40	; 0x28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	fe00e800 	.word	0xfe00e800

08002ddc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	817b      	strh	r3, [r7, #10]
 8002dea:	4613      	mov	r3, r2
 8002dec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dee:	897b      	ldrh	r3, [r7, #10]
 8002df0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002df4:	7a7b      	ldrb	r3, [r7, #9]
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dfc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	0d5b      	lsrs	r3, r3, #21
 8002e16:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <I2C_TransferConfig+0x60>)
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	ea02 0103 	and.w	r1, r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	03ff63ff 	.word	0x03ff63ff

08002e40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d138      	bne.n	8002ec8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e032      	b.n	8002eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2224      	movs	r2, #36	; 0x24
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6819      	ldr	r1, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e000      	b.n	8002eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
  }
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d139      	bne.n	8002f60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e033      	b.n	8002f62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2224      	movs	r2, #36	; 0x24
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e000      	b.n	8002f62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f60:	2302      	movs	r3, #2
  }
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f80:	d102      	bne.n	8002f88 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f86:	e00b      	b.n	8002fa0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002f88:	4b08      	ldr	r3, [pc, #32]	; (8002fac <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f96:	d102      	bne.n	8002f9e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f9c:	e000      	b.n	8002fa0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002f9e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40007000 	.word	0x40007000

08002fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d141      	bne.n	8003042 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fbe:	4b4b      	ldr	r3, [pc, #300]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fca:	d131      	bne.n	8003030 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fcc:	4b47      	ldr	r3, [pc, #284]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd2:	4a46      	ldr	r2, [pc, #280]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fdc:	4b43      	ldr	r3, [pc, #268]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fe4:	4a41      	ldr	r2, [pc, #260]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002fec:	4b40      	ldr	r3, [pc, #256]	; (80030f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2232      	movs	r2, #50	; 0x32
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	4a3f      	ldr	r2, [pc, #252]	; (80030f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	0c9b      	lsrs	r3, r3, #18
 8002ffe:	3301      	adds	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003002:	e002      	b.n	800300a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3b01      	subs	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800300a:	4b38      	ldr	r3, [pc, #224]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003016:	d102      	bne.n	800301e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f2      	bne.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800301e:	4b33      	ldr	r3, [pc, #204]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302a:	d158      	bne.n	80030de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e057      	b.n	80030e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003030:	4b2e      	ldr	r3, [pc, #184]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003036:	4a2d      	ldr	r2, [pc, #180]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800303c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003040:	e04d      	b.n	80030de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003048:	d141      	bne.n	80030ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800304a:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003056:	d131      	bne.n	80030bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003058:	4b24      	ldr	r3, [pc, #144]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800305e:	4a23      	ldr	r2, [pc, #140]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003068:	4b20      	ldr	r3, [pc, #128]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003070:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2232      	movs	r2, #50	; 0x32
 800307e:	fb02 f303 	mul.w	r3, r2, r3
 8003082:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003084:	fba2 2303 	umull	r2, r3, r2, r3
 8003088:	0c9b      	lsrs	r3, r3, #18
 800308a:	3301      	adds	r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800308e:	e002      	b.n	8003096 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	3b01      	subs	r3, #1
 8003094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a2:	d102      	bne.n	80030aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f2      	bne.n	8003090 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b6:	d112      	bne.n	80030de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e011      	b.n	80030e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030cc:	e007      	b.n	80030de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030ce:	4b07      	ldr	r3, [pc, #28]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030d6:	4a05      	ldr	r2, [pc, #20]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030dc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	40007000 	.word	0x40007000
 80030f0:	20000004 	.word	0x20000004
 80030f4:	431bde83 	.word	0x431bde83

080030f8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_PWREx_EnableVddIO2+0x1c>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003106:	6053      	str	r3, [r2, #4]
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40007000 	.word	0x40007000

08003118 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	f000 bc08 	b.w	800393c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800312c:	4b96      	ldr	r3, [pc, #600]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003136:	4b94      	ldr	r3, [pc, #592]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80e4 	beq.w	8003316 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <HAL_RCC_OscConfig+0x4c>
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	f040 808b 	bne.w	8003272 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2b01      	cmp	r3, #1
 8003160:	f040 8087 	bne.w	8003272 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003164:	4b88      	ldr	r3, [pc, #544]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_OscConfig+0x64>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e3df      	b.n	800393c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1a      	ldr	r2, [r3, #32]
 8003180:	4b81      	ldr	r3, [pc, #516]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b00      	cmp	r3, #0
 800318a:	d004      	beq.n	8003196 <HAL_RCC_OscConfig+0x7e>
 800318c:	4b7e      	ldr	r3, [pc, #504]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003194:	e005      	b.n	80031a2 <HAL_RCC_OscConfig+0x8a>
 8003196:	4b7c      	ldr	r3, [pc, #496]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 8003198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d223      	bcs.n	80031ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fdcc 	bl	8003d48 <RCC_SetFlashLatencyFromMSIRange>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e3c0      	b.n	800393c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ba:	4b73      	ldr	r3, [pc, #460]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a72      	ldr	r2, [pc, #456]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80031c0:	f043 0308 	orr.w	r3, r3, #8
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b70      	ldr	r3, [pc, #448]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	496d      	ldr	r1, [pc, #436]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d8:	4b6b      	ldr	r3, [pc, #428]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	4968      	ldr	r1, [pc, #416]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]
 80031ec:	e025      	b.n	800323a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ee:	4b66      	ldr	r3, [pc, #408]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a65      	ldr	r2, [pc, #404]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80031f4:	f043 0308 	orr.w	r3, r3, #8
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	4b63      	ldr	r3, [pc, #396]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4960      	ldr	r1, [pc, #384]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800320c:	4b5e      	ldr	r3, [pc, #376]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	495b      	ldr	r1, [pc, #364]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fd8c 	bl	8003d48 <RCC_SetFlashLatencyFromMSIRange>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e380      	b.n	800393c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800323a:	f000 fcc1 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 800323e:	4602      	mov	r2, r0
 8003240:	4b51      	ldr	r3, [pc, #324]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	4950      	ldr	r1, [pc, #320]	; (800338c <HAL_RCC_OscConfig+0x274>)
 800324c:	5ccb      	ldrb	r3, [r1, r3]
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	fa22 f303 	lsr.w	r3, r2, r3
 8003256:	4a4e      	ldr	r2, [pc, #312]	; (8003390 <HAL_RCC_OscConfig+0x278>)
 8003258:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800325a:	4b4e      	ldr	r3, [pc, #312]	; (8003394 <HAL_RCC_OscConfig+0x27c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe fdc6 	bl	8001df0 <HAL_InitTick>
 8003264:	4603      	mov	r3, r0
 8003266:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d052      	beq.n	8003314 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	e364      	b.n	800393c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d032      	beq.n	80032e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800327a:	4b43      	ldr	r3, [pc, #268]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a42      	ldr	r2, [pc, #264]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003286:	f7fe fe03 	bl	8001e90 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800328e:	f7fe fdff 	bl	8001e90 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e34d      	b.n	800393c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032a0:	4b39      	ldr	r3, [pc, #228]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032ac:	4b36      	ldr	r3, [pc, #216]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a35      	ldr	r2, [pc, #212]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80032b2:	f043 0308 	orr.w	r3, r3, #8
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	4b33      	ldr	r3, [pc, #204]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4930      	ldr	r1, [pc, #192]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ca:	4b2f      	ldr	r3, [pc, #188]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	492b      	ldr	r1, [pc, #172]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	604b      	str	r3, [r1, #4]
 80032de:	e01a      	b.n	8003316 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032e0:	4b29      	ldr	r3, [pc, #164]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a28      	ldr	r2, [pc, #160]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032ec:	f7fe fdd0 	bl	8001e90 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032f4:	f7fe fdcc 	bl	8001e90 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e31a      	b.n	800393c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x1dc>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003314:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d073      	beq.n	800340a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d005      	beq.n	8003334 <HAL_RCC_OscConfig+0x21c>
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d10e      	bne.n	800334c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b03      	cmp	r3, #3
 8003332:	d10b      	bne.n	800334c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d063      	beq.n	8003408 <HAL_RCC_OscConfig+0x2f0>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d15f      	bne.n	8003408 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e2f7      	b.n	800393c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003354:	d106      	bne.n	8003364 <HAL_RCC_OscConfig+0x24c>
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e025      	b.n	80033b0 <HAL_RCC_OscConfig+0x298>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800336c:	d114      	bne.n	8003398 <HAL_RCC_OscConfig+0x280>
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a05      	ldr	r2, [pc, #20]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 8003374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b03      	ldr	r3, [pc, #12]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a02      	ldr	r2, [pc, #8]	; (8003388 <HAL_RCC_OscConfig+0x270>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e013      	b.n	80033b0 <HAL_RCC_OscConfig+0x298>
 8003388:	40021000 	.word	0x40021000
 800338c:	08008868 	.word	0x08008868
 8003390:	20000004 	.word	0x20000004
 8003394:	20000008 	.word	0x20000008
 8003398:	4ba0      	ldr	r3, [pc, #640]	; (800361c <HAL_RCC_OscConfig+0x504>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a9f      	ldr	r2, [pc, #636]	; (800361c <HAL_RCC_OscConfig+0x504>)
 800339e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	4b9d      	ldr	r3, [pc, #628]	; (800361c <HAL_RCC_OscConfig+0x504>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a9c      	ldr	r2, [pc, #624]	; (800361c <HAL_RCC_OscConfig+0x504>)
 80033aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d013      	beq.n	80033e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe fd6a 	bl	8001e90 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c0:	f7fe fd66 	bl	8001e90 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	; 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e2b4      	b.n	800393c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d2:	4b92      	ldr	r3, [pc, #584]	; (800361c <HAL_RCC_OscConfig+0x504>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x2a8>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe fd56 	bl	8001e90 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe fd52 	bl	8001e90 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	; 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e2a0      	b.n	800393c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033fa:	4b88      	ldr	r3, [pc, #544]	; (800361c <HAL_RCC_OscConfig+0x504>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x2d0>
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d060      	beq.n	80034d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d005      	beq.n	8003428 <HAL_RCC_OscConfig+0x310>
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b0c      	cmp	r3, #12
 8003420:	d119      	bne.n	8003456 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d116      	bne.n	8003456 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003428:	4b7c      	ldr	r3, [pc, #496]	; (800361c <HAL_RCC_OscConfig+0x504>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_OscConfig+0x328>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e27d      	b.n	800393c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003440:	4b76      	ldr	r3, [pc, #472]	; (800361c <HAL_RCC_OscConfig+0x504>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	061b      	lsls	r3, r3, #24
 800344e:	4973      	ldr	r1, [pc, #460]	; (800361c <HAL_RCC_OscConfig+0x504>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003454:	e040      	b.n	80034d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d023      	beq.n	80034a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800345e:	4b6f      	ldr	r3, [pc, #444]	; (800361c <HAL_RCC_OscConfig+0x504>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6e      	ldr	r2, [pc, #440]	; (800361c <HAL_RCC_OscConfig+0x504>)
 8003464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7fe fd11 	bl	8001e90 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003472:	f7fe fd0d 	bl	8001e90 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e25b      	b.n	800393c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003484:	4b65      	ldr	r3, [pc, #404]	; (800361c <HAL_RCC_OscConfig+0x504>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	4b62      	ldr	r3, [pc, #392]	; (800361c <HAL_RCC_OscConfig+0x504>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	495f      	ldr	r1, [pc, #380]	; (800361c <HAL_RCC_OscConfig+0x504>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
 80034a4:	e018      	b.n	80034d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a6:	4b5d      	ldr	r3, [pc, #372]	; (800361c <HAL_RCC_OscConfig+0x504>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a5c      	ldr	r2, [pc, #368]	; (800361c <HAL_RCC_OscConfig+0x504>)
 80034ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fe fced 	bl	8001e90 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ba:	f7fe fce9 	bl	8001e90 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e237      	b.n	800393c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034cc:	4b53      	ldr	r3, [pc, #332]	; (800361c <HAL_RCC_OscConfig+0x504>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f0      	bne.n	80034ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d03c      	beq.n	800355e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01c      	beq.n	8003526 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ec:	4b4b      	ldr	r3, [pc, #300]	; (800361c <HAL_RCC_OscConfig+0x504>)
 80034ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f2:	4a4a      	ldr	r2, [pc, #296]	; (800361c <HAL_RCC_OscConfig+0x504>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fe fcc8 	bl	8001e90 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003504:	f7fe fcc4 	bl	8001e90 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e212      	b.n	800393c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003516:	4b41      	ldr	r3, [pc, #260]	; (800361c <HAL_RCC_OscConfig+0x504>)
 8003518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ef      	beq.n	8003504 <HAL_RCC_OscConfig+0x3ec>
 8003524:	e01b      	b.n	800355e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003526:	4b3d      	ldr	r3, [pc, #244]	; (800361c <HAL_RCC_OscConfig+0x504>)
 8003528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800352c:	4a3b      	ldr	r2, [pc, #236]	; (800361c <HAL_RCC_OscConfig+0x504>)
 800352e:	f023 0301 	bic.w	r3, r3, #1
 8003532:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003536:	f7fe fcab 	bl	8001e90 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353e:	f7fe fca7 	bl	8001e90 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e1f5      	b.n	800393c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003550:	4b32      	ldr	r3, [pc, #200]	; (800361c <HAL_RCC_OscConfig+0x504>)
 8003552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1ef      	bne.n	800353e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80a6 	beq.w	80036b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356c:	2300      	movs	r3, #0
 800356e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003570:	4b2a      	ldr	r3, [pc, #168]	; (800361c <HAL_RCC_OscConfig+0x504>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10d      	bne.n	8003598 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357c:	4b27      	ldr	r3, [pc, #156]	; (800361c <HAL_RCC_OscConfig+0x504>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	4a26      	ldr	r2, [pc, #152]	; (800361c <HAL_RCC_OscConfig+0x504>)
 8003582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003586:	6593      	str	r3, [r2, #88]	; 0x58
 8003588:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_RCC_OscConfig+0x504>)
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003594:	2301      	movs	r3, #1
 8003596:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003598:	4b21      	ldr	r3, [pc, #132]	; (8003620 <HAL_RCC_OscConfig+0x508>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d118      	bne.n	80035d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035a4:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <HAL_RCC_OscConfig+0x508>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <HAL_RCC_OscConfig+0x508>)
 80035aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b0:	f7fe fc6e 	bl	8001e90 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b8:	f7fe fc6a 	bl	8001e90 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e1b8      	b.n	800393c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <HAL_RCC_OscConfig+0x508>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d108      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4d8>
 80035de:	4b0f      	ldr	r3, [pc, #60]	; (800361c <HAL_RCC_OscConfig+0x504>)
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e4:	4a0d      	ldr	r2, [pc, #52]	; (800361c <HAL_RCC_OscConfig+0x504>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035ee:	e029      	b.n	8003644 <HAL_RCC_OscConfig+0x52c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b05      	cmp	r3, #5
 80035f6:	d115      	bne.n	8003624 <HAL_RCC_OscConfig+0x50c>
 80035f8:	4b08      	ldr	r3, [pc, #32]	; (800361c <HAL_RCC_OscConfig+0x504>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	4a07      	ldr	r2, [pc, #28]	; (800361c <HAL_RCC_OscConfig+0x504>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <HAL_RCC_OscConfig+0x504>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	4a03      	ldr	r2, [pc, #12]	; (800361c <HAL_RCC_OscConfig+0x504>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003618:	e014      	b.n	8003644 <HAL_RCC_OscConfig+0x52c>
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	40007000 	.word	0x40007000
 8003624:	4b9d      	ldr	r3, [pc, #628]	; (800389c <HAL_RCC_OscConfig+0x784>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	4a9c      	ldr	r2, [pc, #624]	; (800389c <HAL_RCC_OscConfig+0x784>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003634:	4b99      	ldr	r3, [pc, #612]	; (800389c <HAL_RCC_OscConfig+0x784>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	4a98      	ldr	r2, [pc, #608]	; (800389c <HAL_RCC_OscConfig+0x784>)
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d016      	beq.n	800367a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fe fc20 	bl	8001e90 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003652:	e00a      	b.n	800366a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003654:	f7fe fc1c 	bl	8001e90 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e168      	b.n	800393c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800366a:	4b8c      	ldr	r3, [pc, #560]	; (800389c <HAL_RCC_OscConfig+0x784>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0ed      	beq.n	8003654 <HAL_RCC_OscConfig+0x53c>
 8003678:	e015      	b.n	80036a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367a:	f7fe fc09 	bl	8001e90 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fe fc05 	bl	8001e90 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e151      	b.n	800393c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003698:	4b80      	ldr	r3, [pc, #512]	; (800389c <HAL_RCC_OscConfig+0x784>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1ed      	bne.n	8003682 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a6:	7ffb      	ldrb	r3, [r7, #31]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ac:	4b7b      	ldr	r3, [pc, #492]	; (800389c <HAL_RCC_OscConfig+0x784>)
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	4a7a      	ldr	r2, [pc, #488]	; (800389c <HAL_RCC_OscConfig+0x784>)
 80036b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d03c      	beq.n	800373e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01c      	beq.n	8003706 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036cc:	4b73      	ldr	r3, [pc, #460]	; (800389c <HAL_RCC_OscConfig+0x784>)
 80036ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036d2:	4a72      	ldr	r2, [pc, #456]	; (800389c <HAL_RCC_OscConfig+0x784>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036dc:	f7fe fbd8 	bl	8001e90 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036e4:	f7fe fbd4 	bl	8001e90 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e122      	b.n	800393c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036f6:	4b69      	ldr	r3, [pc, #420]	; (800389c <HAL_RCC_OscConfig+0x784>)
 80036f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ef      	beq.n	80036e4 <HAL_RCC_OscConfig+0x5cc>
 8003704:	e01b      	b.n	800373e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003706:	4b65      	ldr	r3, [pc, #404]	; (800389c <HAL_RCC_OscConfig+0x784>)
 8003708:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800370c:	4a63      	ldr	r2, [pc, #396]	; (800389c <HAL_RCC_OscConfig+0x784>)
 800370e:	f023 0301 	bic.w	r3, r3, #1
 8003712:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003716:	f7fe fbbb 	bl	8001e90 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800371e:	f7fe fbb7 	bl	8001e90 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e105      	b.n	800393c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003730:	4b5a      	ldr	r3, [pc, #360]	; (800389c <HAL_RCC_OscConfig+0x784>)
 8003732:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1ef      	bne.n	800371e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80f9 	beq.w	800393a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	2b02      	cmp	r3, #2
 800374e:	f040 80cf 	bne.w	80038f0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003752:	4b52      	ldr	r3, [pc, #328]	; (800389c <HAL_RCC_OscConfig+0x784>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f003 0203 	and.w	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	429a      	cmp	r2, r3
 8003764:	d12c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	3b01      	subs	r3, #1
 8003772:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d123      	bne.n	80037c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003782:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d11b      	bne.n	80037c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d113      	bne.n	80037c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	3b01      	subs	r3, #1
 80037a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d109      	bne.n	80037c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	3b01      	subs	r3, #1
 80037ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037bc:	429a      	cmp	r2, r3
 80037be:	d071      	beq.n	80038a4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	2b0c      	cmp	r3, #12
 80037c4:	d068      	beq.n	8003898 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037c6:	4b35      	ldr	r3, [pc, #212]	; (800389c <HAL_RCC_OscConfig+0x784>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d105      	bne.n	80037de <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037d2:	4b32      	ldr	r3, [pc, #200]	; (800389c <HAL_RCC_OscConfig+0x784>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e0ac      	b.n	800393c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037e2:	4b2e      	ldr	r3, [pc, #184]	; (800389c <HAL_RCC_OscConfig+0x784>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a2d      	ldr	r2, [pc, #180]	; (800389c <HAL_RCC_OscConfig+0x784>)
 80037e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037ee:	f7fe fb4f 	bl	8001e90 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f6:	f7fe fb4b 	bl	8001e90 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e099      	b.n	800393c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003808:	4b24      	ldr	r3, [pc, #144]	; (800389c <HAL_RCC_OscConfig+0x784>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f0      	bne.n	80037f6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003814:	4b21      	ldr	r3, [pc, #132]	; (800389c <HAL_RCC_OscConfig+0x784>)
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	4b21      	ldr	r3, [pc, #132]	; (80038a0 <HAL_RCC_OscConfig+0x788>)
 800381a:	4013      	ands	r3, r2
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003824:	3a01      	subs	r2, #1
 8003826:	0112      	lsls	r2, r2, #4
 8003828:	4311      	orrs	r1, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800382e:	0212      	lsls	r2, r2, #8
 8003830:	4311      	orrs	r1, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003836:	0852      	lsrs	r2, r2, #1
 8003838:	3a01      	subs	r2, #1
 800383a:	0552      	lsls	r2, r2, #21
 800383c:	4311      	orrs	r1, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003842:	0852      	lsrs	r2, r2, #1
 8003844:	3a01      	subs	r2, #1
 8003846:	0652      	lsls	r2, r2, #25
 8003848:	4311      	orrs	r1, r2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800384e:	06d2      	lsls	r2, r2, #27
 8003850:	430a      	orrs	r2, r1
 8003852:	4912      	ldr	r1, [pc, #72]	; (800389c <HAL_RCC_OscConfig+0x784>)
 8003854:	4313      	orrs	r3, r2
 8003856:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003858:	4b10      	ldr	r3, [pc, #64]	; (800389c <HAL_RCC_OscConfig+0x784>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0f      	ldr	r2, [pc, #60]	; (800389c <HAL_RCC_OscConfig+0x784>)
 800385e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003862:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003864:	4b0d      	ldr	r3, [pc, #52]	; (800389c <HAL_RCC_OscConfig+0x784>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4a0c      	ldr	r2, [pc, #48]	; (800389c <HAL_RCC_OscConfig+0x784>)
 800386a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800386e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003870:	f7fe fb0e 	bl	8001e90 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fe fb0a 	bl	8001e90 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e058      	b.n	800393c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388a:	4b04      	ldr	r3, [pc, #16]	; (800389c <HAL_RCC_OscConfig+0x784>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003896:	e050      	b.n	800393a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e04f      	b.n	800393c <HAL_RCC_OscConfig+0x824>
 800389c:	40021000 	.word	0x40021000
 80038a0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a4:	4b27      	ldr	r3, [pc, #156]	; (8003944 <HAL_RCC_OscConfig+0x82c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d144      	bne.n	800393a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038b0:	4b24      	ldr	r3, [pc, #144]	; (8003944 <HAL_RCC_OscConfig+0x82c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a23      	ldr	r2, [pc, #140]	; (8003944 <HAL_RCC_OscConfig+0x82c>)
 80038b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038bc:	4b21      	ldr	r3, [pc, #132]	; (8003944 <HAL_RCC_OscConfig+0x82c>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4a20      	ldr	r2, [pc, #128]	; (8003944 <HAL_RCC_OscConfig+0x82c>)
 80038c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038c8:	f7fe fae2 	bl	8001e90 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fe fade 	bl	8001e90 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e02c      	b.n	800393c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e2:	4b18      	ldr	r3, [pc, #96]	; (8003944 <HAL_RCC_OscConfig+0x82c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x7b8>
 80038ee:	e024      	b.n	800393a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	2b0c      	cmp	r3, #12
 80038f4:	d01f      	beq.n	8003936 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f6:	4b13      	ldr	r3, [pc, #76]	; (8003944 <HAL_RCC_OscConfig+0x82c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a12      	ldr	r2, [pc, #72]	; (8003944 <HAL_RCC_OscConfig+0x82c>)
 80038fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7fe fac5 	bl	8001e90 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390a:	f7fe fac1 	bl	8001e90 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e00f      	b.n	800393c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_RCC_OscConfig+0x82c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f0      	bne.n	800390a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_RCC_OscConfig+0x82c>)
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	4905      	ldr	r1, [pc, #20]	; (8003944 <HAL_RCC_OscConfig+0x82c>)
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_RCC_OscConfig+0x830>)
 8003930:	4013      	ands	r3, r2
 8003932:	60cb      	str	r3, [r1, #12]
 8003934:	e001      	b.n	800393a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000
 8003948:	feeefffc 	.word	0xfeeefffc

0800394c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e11d      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003964:	4b90      	ldr	r3, [pc, #576]	; (8003ba8 <HAL_RCC_ClockConfig+0x25c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d910      	bls.n	8003994 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b8d      	ldr	r3, [pc, #564]	; (8003ba8 <HAL_RCC_ClockConfig+0x25c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 020f 	bic.w	r2, r3, #15
 800397a:	498b      	ldr	r1, [pc, #556]	; (8003ba8 <HAL_RCC_ClockConfig+0x25c>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b89      	ldr	r3, [pc, #548]	; (8003ba8 <HAL_RCC_ClockConfig+0x25c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e105      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d010      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	4b81      	ldr	r3, [pc, #516]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d908      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b0:	4b7e      	ldr	r3, [pc, #504]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	497b      	ldr	r1, [pc, #492]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d079      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d11e      	bne.n	8003a14 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d6:	4b75      	ldr	r3, [pc, #468]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0dc      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80039e6:	f000 fa09 	bl	8003dfc <RCC_GetSysClockFreqFromPLLSource>
 80039ea:	4603      	mov	r3, r0
 80039ec:	4a70      	ldr	r2, [pc, #448]	; (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d946      	bls.n	8003a80 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80039f2:	4b6e      	ldr	r3, [pc, #440]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d140      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039fe:	4b6b      	ldr	r3, [pc, #428]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a06:	4a69      	ldr	r2, [pc, #420]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e035      	b.n	8003a80 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d107      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a1c:	4b63      	ldr	r3, [pc, #396]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d115      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0b9      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d107      	bne.n	8003a44 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a34:	4b5d      	ldr	r3, [pc, #372]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0ad      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a44:	4b59      	ldr	r3, [pc, #356]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0a5      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003a54:	f000 f8b4 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	4a55      	ldr	r2, [pc, #340]	; (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d90f      	bls.n	8003a80 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a60:	4b52      	ldr	r3, [pc, #328]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d109      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a6c:	4b4f      	ldr	r3, [pc, #316]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a74:	4a4d      	ldr	r2, [pc, #308]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a7a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a80:	4b4a      	ldr	r3, [pc, #296]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 0203 	bic.w	r2, r3, #3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4947      	ldr	r1, [pc, #284]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a92:	f7fe f9fd 	bl	8001e90 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a9a:	f7fe f9f9 	bl	8001e90 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e077      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab0:	4b3e      	ldr	r3, [pc, #248]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 020c 	and.w	r2, r3, #12
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d1eb      	bne.n	8003a9a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b80      	cmp	r3, #128	; 0x80
 8003ac6:	d105      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ac8:	4b38      	ldr	r3, [pc, #224]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4a37      	ldr	r2, [pc, #220]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ad2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d010      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	4b31      	ldr	r3, [pc, #196]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d208      	bcs.n	8003b02 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af0:	4b2e      	ldr	r3, [pc, #184]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	492b      	ldr	r1, [pc, #172]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b02:	4b29      	ldr	r3, [pc, #164]	; (8003ba8 <HAL_RCC_ClockConfig+0x25c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d210      	bcs.n	8003b32 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b10:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <HAL_RCC_ClockConfig+0x25c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 020f 	bic.w	r2, r3, #15
 8003b18:	4923      	ldr	r1, [pc, #140]	; (8003ba8 <HAL_RCC_ClockConfig+0x25c>)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b20:	4b21      	ldr	r3, [pc, #132]	; (8003ba8 <HAL_RCC_ClockConfig+0x25c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e036      	b.n	8003ba0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d008      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	4918      	ldr	r1, [pc, #96]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d009      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5c:	4b13      	ldr	r3, [pc, #76]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4910      	ldr	r1, [pc, #64]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b70:	f000 f826 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	091b      	lsrs	r3, r3, #4
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	490c      	ldr	r1, [pc, #48]	; (8003bb4 <HAL_RCC_ClockConfig+0x268>)
 8003b82:	5ccb      	ldrb	r3, [r1, r3]
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8c:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <HAL_RCC_ClockConfig+0x26c>)
 8003b8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b90:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <HAL_RCC_ClockConfig+0x270>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fe f92b 	bl	8001df0 <HAL_InitTick>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40022000 	.word	0x40022000
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	04c4b400 	.word	0x04c4b400
 8003bb4:	08008868 	.word	0x08008868
 8003bb8:	20000004 	.word	0x20000004
 8003bbc:	20000008 	.word	0x20000008

08003bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b089      	sub	sp, #36	; 0x24
 8003bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bce:	4b3e      	ldr	r3, [pc, #248]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd8:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	d121      	bne.n	8003c32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d11e      	bne.n	8003c32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bf4:	4b34      	ldr	r3, [pc, #208]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d107      	bne.n	8003c10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c00:	4b31      	ldr	r3, [pc, #196]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	e005      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c10:	4b2d      	ldr	r3, [pc, #180]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c1c:	4a2b      	ldr	r2, [pc, #172]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10d      	bne.n	8003c48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d102      	bne.n	8003c3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c38:	4b25      	ldr	r3, [pc, #148]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c3a:	61bb      	str	r3, [r7, #24]
 8003c3c:	e004      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d101      	bne.n	8003c48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c44:	4b23      	ldr	r3, [pc, #140]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	2b0c      	cmp	r3, #12
 8003c4c:	d134      	bne.n	8003cb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c4e:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d003      	beq.n	8003c66 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d003      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0xac>
 8003c64:	e005      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c66:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c68:	617b      	str	r3, [r7, #20]
      break;
 8003c6a:	e005      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c6c:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c6e:	617b      	str	r3, [r7, #20]
      break;
 8003c70:	e002      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	617b      	str	r3, [r7, #20]
      break;
 8003c76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	091b      	lsrs	r3, r3, #4
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	3301      	adds	r3, #1
 8003c84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	fb03 f202 	mul.w	r2, r3, r2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	0e5b      	lsrs	r3, r3, #25
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	3301      	adds	r3, #1
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003cb8:	69bb      	ldr	r3, [r7, #24]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3724      	adds	r7, #36	; 0x24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	08008880 	.word	0x08008880
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	007a1200 	.word	0x007a1200

08003cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_RCC_GetHCLKFreq+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000004 	.word	0x20000004

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cf4:	f7ff fff0 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4904      	ldr	r1, [pc, #16]	; (8003d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	08008878 	.word	0x08008878

08003d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d20:	f7ff ffda 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	0adb      	lsrs	r3, r3, #11
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4904      	ldr	r1, [pc, #16]	; (8003d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000
 8003d44:	08008878 	.word	0x08008878

08003d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d50:	2300      	movs	r3, #0
 8003d52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d60:	f7ff f906 	bl	8002f70 <HAL_PWREx_GetVoltageRange>
 8003d64:	6178      	str	r0, [r7, #20]
 8003d66:	e014      	b.n	8003d92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d68:	4b22      	ldr	r3, [pc, #136]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	4a21      	ldr	r2, [pc, #132]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d72:	6593      	str	r3, [r2, #88]	; 0x58
 8003d74:	4b1f      	ldr	r3, [pc, #124]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d80:	f7ff f8f6 	bl	8002f70 <HAL_PWREx_GetVoltageRange>
 8003d84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d86:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	4a1a      	ldr	r2, [pc, #104]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d98:	d10b      	bne.n	8003db2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b80      	cmp	r3, #128	; 0x80
 8003d9e:	d913      	bls.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2ba0      	cmp	r3, #160	; 0xa0
 8003da4:	d902      	bls.n	8003dac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003da6:	2302      	movs	r3, #2
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	e00d      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dac:	2301      	movs	r3, #1
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	e00a      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b7f      	cmp	r3, #127	; 0x7f
 8003db6:	d902      	bls.n	8003dbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003db8:	2302      	movs	r3, #2
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	e004      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b70      	cmp	r3, #112	; 0x70
 8003dc2:	d101      	bne.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f023 020f 	bic.w	r2, r3, #15
 8003dd0:	4909      	ldr	r1, [pc, #36]	; (8003df8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003dd8:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d001      	beq.n	8003dea <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40022000 	.word	0x40022000

08003dfc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e02:	4b2d      	ldr	r3, [pc, #180]	; (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d00b      	beq.n	8003e2a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d825      	bhi.n	8003e64 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d008      	beq.n	8003e30 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d11f      	bne.n	8003e64 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003e24:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e26:	613b      	str	r3, [r7, #16]
    break;
 8003e28:	e01f      	b.n	8003e6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003e2a:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003e2c:	613b      	str	r3, [r7, #16]
    break;
 8003e2e:	e01c      	b.n	8003e6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e30:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d107      	bne.n	8003e4c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e3c:	4b1e      	ldr	r3, [pc, #120]	; (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	e005      	b.n	8003e58 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003e58:	4a1a      	ldr	r2, [pc, #104]	; (8003ec4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e60:	613b      	str	r3, [r7, #16]
    break;
 8003e62:	e002      	b.n	8003e6a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	613b      	str	r3, [r7, #16]
    break;
 8003e68:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e6a:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	3301      	adds	r3, #1
 8003e76:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e78:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	fb03 f202 	mul.w	r2, r3, r2
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e90:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	0e5b      	lsrs	r3, r3, #25
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003eaa:	683b      	ldr	r3, [r7, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	00f42400 	.word	0x00f42400
 8003ec0:	007a1200 	.word	0x007a1200
 8003ec4:	08008880 	.word	0x08008880

08003ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d040      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee8:	2b80      	cmp	r3, #128	; 0x80
 8003eea:	d02a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003eec:	2b80      	cmp	r3, #128	; 0x80
 8003eee:	d825      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ef0:	2b60      	cmp	r3, #96	; 0x60
 8003ef2:	d026      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ef4:	2b60      	cmp	r3, #96	; 0x60
 8003ef6:	d821      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	d006      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d81d      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d009      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	d010      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003f08:	e018      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f0a:	4b89      	ldr	r3, [pc, #548]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4a88      	ldr	r2, [pc, #544]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f14:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f16:	e015      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fb02 	bl	8004528 <RCCEx_PLLSAI1_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f28:	e00c      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3320      	adds	r3, #32
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fbed 	bl	8004710 <RCCEx_PLLSAI2_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f3a:	e003      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	74fb      	strb	r3, [r7, #19]
      break;
 8003f40:	e000      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10b      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f4a:	4b79      	ldr	r3, [pc, #484]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f50:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f58:	4975      	ldr	r1, [pc, #468]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f60:	e001      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f62:	7cfb      	ldrb	r3, [r7, #19]
 8003f64:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d047      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7a:	d030      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f80:	d82a      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f86:	d02a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8c:	d824      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f92:	d008      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f98:	d81e      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa2:	d010      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003fa4:	e018      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fa6:	4b62      	ldr	r3, [pc, #392]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	4a61      	ldr	r2, [pc, #388]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fb2:	e015      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fab4 	bl	8004528 <RCCEx_PLLSAI1_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fc4:	e00c      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3320      	adds	r3, #32
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fb9f 	bl	8004710 <RCCEx_PLLSAI2_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fd6:	e003      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	74fb      	strb	r3, [r7, #19]
      break;
 8003fdc:	e000      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10b      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fe6:	4b52      	ldr	r3, [pc, #328]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	494e      	ldr	r1, [pc, #312]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ffc:	e001      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffe:	7cfb      	ldrb	r3, [r7, #19]
 8004000:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 809f 	beq.w	800414e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004010:	2300      	movs	r3, #0
 8004012:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004014:	4b46      	ldr	r3, [pc, #280]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004024:	2300      	movs	r3, #0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	4b41      	ldr	r3, [pc, #260]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402e:	4a40      	ldr	r2, [pc, #256]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004034:	6593      	str	r3, [r2, #88]	; 0x58
 8004036:	4b3e      	ldr	r3, [pc, #248]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004042:	2301      	movs	r3, #1
 8004044:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004046:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a3a      	ldr	r2, [pc, #232]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800404c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004050:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004052:	f7fd ff1d 	bl	8001e90 <HAL_GetTick>
 8004056:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004058:	e009      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405a:	f7fd ff19 	bl	8001e90 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d902      	bls.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	74fb      	strb	r3, [r7, #19]
        break;
 800406c:	e005      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800406e:	4b31      	ldr	r3, [pc, #196]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0ef      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800407a:	7cfb      	ldrb	r3, [r7, #19]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d15b      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004080:	4b2b      	ldr	r3, [pc, #172]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01f      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	429a      	cmp	r2, r3
 800409c:	d019      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800409e:	4b24      	ldr	r3, [pc, #144]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040aa:	4b21      	ldr	r3, [pc, #132]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b0:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040ba:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c0:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040ca:	4a19      	ldr	r2, [pc, #100]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d016      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fd fed8 	bl	8001e90 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e2:	e00b      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e4:	f7fd fed4 	bl	8001e90 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d902      	bls.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	74fb      	strb	r3, [r7, #19]
            break;
 80040fa:	e006      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fc:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0ec      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800410a:	7cfb      	ldrb	r3, [r7, #19]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10c      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004120:	4903      	ldr	r1, [pc, #12]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004128:	e008      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800412a:	7cfb      	ldrb	r3, [r7, #19]
 800412c:	74bb      	strb	r3, [r7, #18]
 800412e:	e005      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004130:	40021000 	.word	0x40021000
 8004134:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800413c:	7c7b      	ldrb	r3, [r7, #17]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d105      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004142:	4ba0      	ldr	r3, [pc, #640]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	4a9f      	ldr	r2, [pc, #636]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800414c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800415a:	4b9a      	ldr	r3, [pc, #616]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f023 0203 	bic.w	r2, r3, #3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004168:	4996      	ldr	r1, [pc, #600]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800417c:	4b91      	ldr	r3, [pc, #580]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f023 020c 	bic.w	r2, r3, #12
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	498e      	ldr	r1, [pc, #568]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800419e:	4b89      	ldr	r3, [pc, #548]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ac:	4985      	ldr	r1, [pc, #532]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041c0:	4b80      	ldr	r3, [pc, #512]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ce:	497d      	ldr	r1, [pc, #500]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041e2:	4b78      	ldr	r3, [pc, #480]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f0:	4974      	ldr	r1, [pc, #464]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004204:	4b6f      	ldr	r3, [pc, #444]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004212:	496c      	ldr	r1, [pc, #432]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004226:	4b67      	ldr	r3, [pc, #412]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004234:	4963      	ldr	r1, [pc, #396]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004248:	4b5e      	ldr	r3, [pc, #376]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004256:	495b      	ldr	r1, [pc, #364]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800426a:	4b56      	ldr	r3, [pc, #344]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	4952      	ldr	r1, [pc, #328]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800428c:	4b4d      	ldr	r3, [pc, #308]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	494a      	ldr	r1, [pc, #296]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042ae:	4b45      	ldr	r3, [pc, #276]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	4941      	ldr	r1, [pc, #260]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042d0:	4b3c      	ldr	r3, [pc, #240]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042d6:	f023 0203 	bic.w	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042de:	4939      	ldr	r1, [pc, #228]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d028      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042f2:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004300:	4930      	ldr	r1, [pc, #192]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004310:	d106      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004312:	4b2c      	ldr	r3, [pc, #176]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	4a2b      	ldr	r2, [pc, #172]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800431c:	60d3      	str	r3, [r2, #12]
 800431e:	e011      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004328:	d10c      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3304      	adds	r3, #4
 800432e:	2101      	movs	r1, #1
 8004330:	4618      	mov	r0, r3
 8004332:	f000 f8f9 	bl	8004528 <RCCEx_PLLSAI1_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800433a:	7cfb      	ldrb	r3, [r7, #19]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d04d      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004358:	d108      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800435a:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800435c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004360:	4a18      	ldr	r2, [pc, #96]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004366:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800436a:	e012      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800436c:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800436e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004372:	4a14      	ldr	r2, [pc, #80]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004378:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800438a:	490e      	ldr	r1, [pc, #56]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800439a:	d106      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800439c:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4a08      	ldr	r2, [pc, #32]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043a6:	60d3      	str	r3, [r2, #12]
 80043a8:	e020      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b2:	d109      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043b4:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a02      	ldr	r2, [pc, #8]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043be:	60d3      	str	r3, [r2, #12]
 80043c0:	e014      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x524>
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043d0:	d10c      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	2101      	movs	r1, #1
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 f8a5 	bl	8004528 <RCCEx_PLLSAI1_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043e2:	7cfb      	ldrb	r3, [r7, #19]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d028      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043f8:	4b4a      	ldr	r3, [pc, #296]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004406:	4947      	ldr	r1, [pc, #284]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004416:	d106      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004418:	4b42      	ldr	r3, [pc, #264]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4a41      	ldr	r2, [pc, #260]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800441e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004422:	60d3      	str	r3, [r2, #12]
 8004424:	e011      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800442e:	d10c      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	2101      	movs	r1, #1
 8004436:	4618      	mov	r0, r3
 8004438:	f000 f876 	bl	8004528 <RCCEx_PLLSAI1_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d01e      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004456:	4b33      	ldr	r3, [pc, #204]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004466:	492f      	ldr	r1, [pc, #188]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004478:	d10c      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3304      	adds	r3, #4
 800447e:	2102      	movs	r1, #2
 8004480:	4618      	mov	r0, r3
 8004482:	f000 f851 	bl	8004528 <RCCEx_PLLSAI1_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800448a:	7cfb      	ldrb	r3, [r7, #19]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004490:	7cfb      	ldrb	r3, [r7, #19]
 8004492:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00b      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044a0:	4b20      	ldr	r3, [pc, #128]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044a6:	f023 0204 	bic.w	r2, r3, #4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b0:	491c      	ldr	r1, [pc, #112]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00b      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044c4:	4b17      	ldr	r3, [pc, #92]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ca:	f023 0218 	bic.w	r2, r3, #24
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	4913      	ldr	r1, [pc, #76]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d017      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80044e8:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f8:	490a      	ldr	r1, [pc, #40]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800450a:	d105      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a04      	ldr	r2, [pc, #16]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004516:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004518:	7cbb      	ldrb	r3, [r7, #18]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000

08004528 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004536:	4b72      	ldr	r3, [pc, #456]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00e      	beq.n	8004560 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004542:	4b6f      	ldr	r3, [pc, #444]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0203 	and.w	r2, r3, #3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d103      	bne.n	800455a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
       ||
 8004556:	2b00      	cmp	r3, #0
 8004558:	d142      	bne.n	80045e0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	73fb      	strb	r3, [r7, #15]
 800455e:	e03f      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b03      	cmp	r3, #3
 8004566:	d018      	beq.n	800459a <RCCEx_PLLSAI1_Config+0x72>
 8004568:	2b03      	cmp	r3, #3
 800456a:	d825      	bhi.n	80045b8 <RCCEx_PLLSAI1_Config+0x90>
 800456c:	2b01      	cmp	r3, #1
 800456e:	d002      	beq.n	8004576 <RCCEx_PLLSAI1_Config+0x4e>
 8004570:	2b02      	cmp	r3, #2
 8004572:	d009      	beq.n	8004588 <RCCEx_PLLSAI1_Config+0x60>
 8004574:	e020      	b.n	80045b8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004576:	4b62      	ldr	r3, [pc, #392]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d11d      	bne.n	80045be <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004586:	e01a      	b.n	80045be <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004588:	4b5d      	ldr	r3, [pc, #372]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004590:	2b00      	cmp	r3, #0
 8004592:	d116      	bne.n	80045c2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004598:	e013      	b.n	80045c2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800459a:	4b59      	ldr	r3, [pc, #356]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10f      	bne.n	80045c6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045a6:	4b56      	ldr	r3, [pc, #344]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045b6:	e006      	b.n	80045c6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
      break;
 80045bc:	e004      	b.n	80045c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045be:	bf00      	nop
 80045c0:	e002      	b.n	80045c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045c2:	bf00      	nop
 80045c4:	e000      	b.n	80045c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d108      	bne.n	80045e0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80045ce:	4b4c      	ldr	r3, [pc, #304]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f023 0203 	bic.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4949      	ldr	r1, [pc, #292]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f040 8086 	bne.w	80046f4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045e8:	4b45      	ldr	r3, [pc, #276]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a44      	ldr	r2, [pc, #272]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f4:	f7fd fc4c 	bl	8001e90 <HAL_GetTick>
 80045f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045fa:	e009      	b.n	8004610 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045fc:	f7fd fc48 	bl	8001e90 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d902      	bls.n	8004610 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	73fb      	strb	r3, [r7, #15]
        break;
 800460e:	e005      	b.n	800461c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004610:	4b3b      	ldr	r3, [pc, #236]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1ef      	bne.n	80045fc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d168      	bne.n	80046f4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d113      	bne.n	8004650 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004628:	4b35      	ldr	r3, [pc, #212]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	4b35      	ldr	r3, [pc, #212]	; (8004704 <RCCEx_PLLSAI1_Config+0x1dc>)
 800462e:	4013      	ands	r3, r2
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6892      	ldr	r2, [r2, #8]
 8004634:	0211      	lsls	r1, r2, #8
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	68d2      	ldr	r2, [r2, #12]
 800463a:	06d2      	lsls	r2, r2, #27
 800463c:	4311      	orrs	r1, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6852      	ldr	r2, [r2, #4]
 8004642:	3a01      	subs	r2, #1
 8004644:	0112      	lsls	r2, r2, #4
 8004646:	430a      	orrs	r2, r1
 8004648:	492d      	ldr	r1, [pc, #180]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 800464a:	4313      	orrs	r3, r2
 800464c:	610b      	str	r3, [r1, #16]
 800464e:	e02d      	b.n	80046ac <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d115      	bne.n	8004682 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004656:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	4b2b      	ldr	r3, [pc, #172]	; (8004708 <RCCEx_PLLSAI1_Config+0x1e0>)
 800465c:	4013      	ands	r3, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6892      	ldr	r2, [r2, #8]
 8004662:	0211      	lsls	r1, r2, #8
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6912      	ldr	r2, [r2, #16]
 8004668:	0852      	lsrs	r2, r2, #1
 800466a:	3a01      	subs	r2, #1
 800466c:	0552      	lsls	r2, r2, #21
 800466e:	4311      	orrs	r1, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6852      	ldr	r2, [r2, #4]
 8004674:	3a01      	subs	r2, #1
 8004676:	0112      	lsls	r2, r2, #4
 8004678:	430a      	orrs	r2, r1
 800467a:	4921      	ldr	r1, [pc, #132]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 800467c:	4313      	orrs	r3, r2
 800467e:	610b      	str	r3, [r1, #16]
 8004680:	e014      	b.n	80046ac <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004682:	4b1f      	ldr	r3, [pc, #124]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	4b21      	ldr	r3, [pc, #132]	; (800470c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004688:	4013      	ands	r3, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6892      	ldr	r2, [r2, #8]
 800468e:	0211      	lsls	r1, r2, #8
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6952      	ldr	r2, [r2, #20]
 8004694:	0852      	lsrs	r2, r2, #1
 8004696:	3a01      	subs	r2, #1
 8004698:	0652      	lsls	r2, r2, #25
 800469a:	4311      	orrs	r1, r2
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6852      	ldr	r2, [r2, #4]
 80046a0:	3a01      	subs	r2, #1
 80046a2:	0112      	lsls	r2, r2, #4
 80046a4:	430a      	orrs	r2, r1
 80046a6:	4916      	ldr	r1, [pc, #88]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046ac:	4b14      	ldr	r3, [pc, #80]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a13      	ldr	r2, [pc, #76]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b8:	f7fd fbea 	bl	8001e90 <HAL_GetTick>
 80046bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046be:	e009      	b.n	80046d4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046c0:	f7fd fbe6 	bl	8001e90 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d902      	bls.n	80046d4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	73fb      	strb	r3, [r7, #15]
          break;
 80046d2:	e005      	b.n	80046e0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046d4:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ef      	beq.n	80046c0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046e6:	4b06      	ldr	r3, [pc, #24]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	4904      	ldr	r1, [pc, #16]	; (8004700 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000
 8004704:	07ff800f 	.word	0x07ff800f
 8004708:	ff9f800f 	.word	0xff9f800f
 800470c:	f9ff800f 	.word	0xf9ff800f

08004710 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800471e:	4b72      	ldr	r3, [pc, #456]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00e      	beq.n	8004748 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800472a:	4b6f      	ldr	r3, [pc, #444]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f003 0203 	and.w	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d103      	bne.n	8004742 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
       ||
 800473e:	2b00      	cmp	r3, #0
 8004740:	d142      	bne.n	80047c8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	73fb      	strb	r3, [r7, #15]
 8004746:	e03f      	b.n	80047c8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d018      	beq.n	8004782 <RCCEx_PLLSAI2_Config+0x72>
 8004750:	2b03      	cmp	r3, #3
 8004752:	d825      	bhi.n	80047a0 <RCCEx_PLLSAI2_Config+0x90>
 8004754:	2b01      	cmp	r3, #1
 8004756:	d002      	beq.n	800475e <RCCEx_PLLSAI2_Config+0x4e>
 8004758:	2b02      	cmp	r3, #2
 800475a:	d009      	beq.n	8004770 <RCCEx_PLLSAI2_Config+0x60>
 800475c:	e020      	b.n	80047a0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800475e:	4b62      	ldr	r3, [pc, #392]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d11d      	bne.n	80047a6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800476e:	e01a      	b.n	80047a6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004770:	4b5d      	ldr	r3, [pc, #372]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	2b00      	cmp	r3, #0
 800477a:	d116      	bne.n	80047aa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004780:	e013      	b.n	80047aa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004782:	4b59      	ldr	r3, [pc, #356]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800478e:	4b56      	ldr	r3, [pc, #344]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800479e:	e006      	b.n	80047ae <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
      break;
 80047a4:	e004      	b.n	80047b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80047a6:	bf00      	nop
 80047a8:	e002      	b.n	80047b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80047aa:	bf00      	nop
 80047ac:	e000      	b.n	80047b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80047ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d108      	bne.n	80047c8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80047b6:	4b4c      	ldr	r3, [pc, #304]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f023 0203 	bic.w	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4949      	ldr	r1, [pc, #292]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f040 8086 	bne.w	80048dc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047d0:	4b45      	ldr	r3, [pc, #276]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a44      	ldr	r2, [pc, #272]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047dc:	f7fd fb58 	bl	8001e90 <HAL_GetTick>
 80047e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047e2:	e009      	b.n	80047f8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047e4:	f7fd fb54 	bl	8001e90 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d902      	bls.n	80047f8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	73fb      	strb	r3, [r7, #15]
        break;
 80047f6:	e005      	b.n	8004804 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047f8:	4b3b      	ldr	r3, [pc, #236]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1ef      	bne.n	80047e4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d168      	bne.n	80048dc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d113      	bne.n	8004838 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004810:	4b35      	ldr	r3, [pc, #212]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	4b35      	ldr	r3, [pc, #212]	; (80048ec <RCCEx_PLLSAI2_Config+0x1dc>)
 8004816:	4013      	ands	r3, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6892      	ldr	r2, [r2, #8]
 800481c:	0211      	lsls	r1, r2, #8
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68d2      	ldr	r2, [r2, #12]
 8004822:	06d2      	lsls	r2, r2, #27
 8004824:	4311      	orrs	r1, r2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6852      	ldr	r2, [r2, #4]
 800482a:	3a01      	subs	r2, #1
 800482c:	0112      	lsls	r2, r2, #4
 800482e:	430a      	orrs	r2, r1
 8004830:	492d      	ldr	r1, [pc, #180]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004832:	4313      	orrs	r3, r2
 8004834:	614b      	str	r3, [r1, #20]
 8004836:	e02d      	b.n	8004894 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d115      	bne.n	800486a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800483e:	4b2a      	ldr	r3, [pc, #168]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004840:	695a      	ldr	r2, [r3, #20]
 8004842:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004844:	4013      	ands	r3, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6892      	ldr	r2, [r2, #8]
 800484a:	0211      	lsls	r1, r2, #8
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6912      	ldr	r2, [r2, #16]
 8004850:	0852      	lsrs	r2, r2, #1
 8004852:	3a01      	subs	r2, #1
 8004854:	0552      	lsls	r2, r2, #21
 8004856:	4311      	orrs	r1, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6852      	ldr	r2, [r2, #4]
 800485c:	3a01      	subs	r2, #1
 800485e:	0112      	lsls	r2, r2, #4
 8004860:	430a      	orrs	r2, r1
 8004862:	4921      	ldr	r1, [pc, #132]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004864:	4313      	orrs	r3, r2
 8004866:	614b      	str	r3, [r1, #20]
 8004868:	e014      	b.n	8004894 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800486a:	4b1f      	ldr	r3, [pc, #124]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	4b21      	ldr	r3, [pc, #132]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004870:	4013      	ands	r3, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6892      	ldr	r2, [r2, #8]
 8004876:	0211      	lsls	r1, r2, #8
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6952      	ldr	r2, [r2, #20]
 800487c:	0852      	lsrs	r2, r2, #1
 800487e:	3a01      	subs	r2, #1
 8004880:	0652      	lsls	r2, r2, #25
 8004882:	4311      	orrs	r1, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6852      	ldr	r2, [r2, #4]
 8004888:	3a01      	subs	r2, #1
 800488a:	0112      	lsls	r2, r2, #4
 800488c:	430a      	orrs	r2, r1
 800488e:	4916      	ldr	r1, [pc, #88]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004890:	4313      	orrs	r3, r2
 8004892:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004894:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a13      	ldr	r2, [pc, #76]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800489a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a0:	f7fd faf6 	bl	8001e90 <HAL_GetTick>
 80048a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048a6:	e009      	b.n	80048bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048a8:	f7fd faf2 	bl	8001e90 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d902      	bls.n	80048bc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	73fb      	strb	r3, [r7, #15]
          break;
 80048ba:	e005      	b.n	80048c8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0ef      	beq.n	80048a8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048ce:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	4904      	ldr	r1, [pc, #16]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40021000 	.word	0x40021000
 80048ec:	07ff800f 	.word	0x07ff800f
 80048f0:	ff9f800f 	.word	0xff9f800f
 80048f4:	f9ff800f 	.word	0xf9ff800f

080048f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e095      	b.n	8004a36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	2b00      	cmp	r3, #0
 8004910:	d108      	bne.n	8004924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800491a:	d009      	beq.n	8004930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	61da      	str	r2, [r3, #28]
 8004922:	e005      	b.n	8004930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fd f8ca 	bl	8001ae4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004966:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004970:	d902      	bls.n	8004978 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	e002      	b.n	800497e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800497c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004986:	d007      	beq.n	8004998 <HAL_SPI_Init+0xa0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004990:	d002      	beq.n	8004998 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	ea42 0103 	orr.w	r1, r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	0c1b      	lsrs	r3, r3, #16
 80049f4:	f003 0204 	and.w	r2, r3, #4
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a14:	ea42 0103 	orr.w	r1, r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b088      	sub	sp, #32
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_SPI_Transmit+0x22>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e15f      	b.n	8004d20 <HAL_SPI_Transmit+0x2e2>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a68:	f7fd fa12 	bl	8001e90 <HAL_GetTick>
 8004a6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d002      	beq.n	8004a84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a82:	e148      	b.n	8004d16 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <HAL_SPI_Transmit+0x52>
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a94:	e13f      	b.n	8004d16 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2203      	movs	r2, #3
 8004a9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	88fa      	ldrh	r2, [r7, #6]
 8004aae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	88fa      	ldrh	r2, [r7, #6]
 8004ab4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae0:	d10f      	bne.n	8004b02 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d007      	beq.n	8004b20 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b28:	d94f      	bls.n	8004bca <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_SPI_Transmit+0xfa>
 8004b32:	8afb      	ldrh	r3, [r7, #22]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d142      	bne.n	8004bbe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	881a      	ldrh	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	1c9a      	adds	r2, r3, #2
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b5c:	e02f      	b.n	8004bbe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d112      	bne.n	8004b92 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	881a      	ldrh	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	1c9a      	adds	r2, r3, #2
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b90:	e015      	b.n	8004bbe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b92:	f7fd f97d 	bl	8001e90 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d803      	bhi.n	8004baa <HAL_SPI_Transmit+0x16c>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba8:	d102      	bne.n	8004bb0 <HAL_SPI_Transmit+0x172>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d106      	bne.n	8004bbe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004bbc:	e0ab      	b.n	8004d16 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1ca      	bne.n	8004b5e <HAL_SPI_Transmit+0x120>
 8004bc8:	e080      	b.n	8004ccc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_SPI_Transmit+0x19a>
 8004bd2:	8afb      	ldrh	r3, [r7, #22]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d174      	bne.n	8004cc2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d912      	bls.n	8004c08 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	881a      	ldrh	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	1c9a      	adds	r2, r3, #2
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b02      	subs	r3, #2
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c06:	e05c      	b.n	8004cc2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	7812      	ldrb	r2, [r2, #0]
 8004c14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004c2e:	e048      	b.n	8004cc2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d12b      	bne.n	8004c96 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d912      	bls.n	8004c6e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	881a      	ldrh	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	1c9a      	adds	r2, r3, #2
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b02      	subs	r3, #2
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c6c:	e029      	b.n	8004cc2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	7812      	ldrb	r2, [r2, #0]
 8004c7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c94:	e015      	b.n	8004cc2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c96:	f7fd f8fb 	bl	8001e90 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d803      	bhi.n	8004cae <HAL_SPI_Transmit+0x270>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cac:	d102      	bne.n	8004cb4 <HAL_SPI_Transmit+0x276>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d106      	bne.n	8004cc2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004cc0:	e029      	b.n	8004d16 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1b1      	bne.n	8004c30 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	6839      	ldr	r1, [r7, #0]
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 f947 	bl	8004f64 <SPI_EndRxTxTransaction>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	77fb      	strb	r3, [r7, #31]
 8004d0c:	e003      	b.n	8004d16 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	4613      	mov	r3, r2
 8004d36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d38:	f7fd f8aa 	bl	8001e90 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	4413      	add	r3, r2
 8004d46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d48:	f7fd f8a2 	bl	8001e90 <HAL_GetTick>
 8004d4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d4e:	4b39      	ldr	r3, [pc, #228]	; (8004e34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	015b      	lsls	r3, r3, #5
 8004d54:	0d1b      	lsrs	r3, r3, #20
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	fb02 f303 	mul.w	r3, r2, r3
 8004d5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d5e:	e054      	b.n	8004e0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d66:	d050      	beq.n	8004e0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d68:	f7fd f892 	bl	8001e90 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d902      	bls.n	8004d7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d13d      	bne.n	8004dfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d96:	d111      	bne.n	8004dbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da0:	d004      	beq.n	8004dac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004daa:	d107      	bne.n	8004dbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc4:	d10f      	bne.n	8004de6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004de4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e017      	b.n	8004e2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4013      	ands	r3, r2
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	bf0c      	ite	eq
 8004e1a:	2301      	moveq	r3, #1
 8004e1c:	2300      	movne	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d19b      	bne.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000004 	.word	0x20000004

08004e38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	; 0x28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e4a:	f7fd f821 	bl	8001e90 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	4413      	add	r3, r2
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004e5a:	f7fd f819 	bl	8001e90 <HAL_GetTick>
 8004e5e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	330c      	adds	r3, #12
 8004e66:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e68:	4b3d      	ldr	r3, [pc, #244]	; (8004f60 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	00da      	lsls	r2, r3, #3
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	0d1b      	lsrs	r3, r3, #20
 8004e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e80:	e060      	b.n	8004f44 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e88:	d107      	bne.n	8004e9a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d104      	bne.n	8004e9a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea0:	d050      	beq.n	8004f44 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ea2:	f7fc fff5 	bl	8001e90 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d902      	bls.n	8004eb8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d13d      	bne.n	8004f34 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ec6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed0:	d111      	bne.n	8004ef6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eda:	d004      	beq.n	8004ee6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee4:	d107      	bne.n	8004ef6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efe:	d10f      	bne.n	8004f20 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e010      	b.n	8004f56 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d196      	bne.n	8004e82 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3728      	adds	r7, #40	; 0x28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20000004 	.word	0x20000004

08004f64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f7ff ff5b 	bl	8004e38 <SPI_WaitFifoStateUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8c:	f043 0220 	orr.w	r2, r3, #32
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e027      	b.n	8004fe8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2180      	movs	r1, #128	; 0x80
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f7ff fec0 	bl	8004d28 <SPI_WaitFlagStateUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d007      	beq.n	8004fbe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb2:	f043 0220 	orr.w	r2, r3, #32
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e014      	b.n	8004fe8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f7ff ff34 	bl	8004e38 <SPI_WaitFifoStateUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d007      	beq.n	8004fe6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fda:	f043 0220 	orr.w	r2, r3, #32
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e000      	b.n	8004fe8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e042      	b.n	8005088 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7fc fd05 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2224      	movs	r2, #36	; 0x24
 800501e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0201 	bic.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fbb4 	bl	80057a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f8b5 	bl	80051b0 <UART_SetConfig>
 8005046:	4603      	mov	r3, r0
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e01b      	b.n	8005088 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800505e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800506e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fc33 	bl	80058ec <UART_CheckIdleState>
 8005086:	4603      	mov	r3, r0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08a      	sub	sp, #40	; 0x28
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d17c      	bne.n	80051a4 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_UART_Transmit+0x26>
 80050b0:	88fb      	ldrh	r3, [r7, #6]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e075      	b.n	80051a6 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2221      	movs	r2, #33	; 0x21
 80050c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ca:	f7fc fee1 	bl	8001e90 <HAL_GetTick>
 80050ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	88fa      	ldrh	r2, [r7, #6]
 80050d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	88fa      	ldrh	r2, [r7, #6]
 80050dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e8:	d108      	bne.n	80050fc <HAL_UART_Transmit+0x6c>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d104      	bne.n	80050fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	e003      	b.n	8005104 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005100:	2300      	movs	r3, #0
 8005102:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005104:	e031      	b.n	800516a <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2200      	movs	r2, #0
 800510e:	2180      	movs	r1, #128	; 0x80
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 fc95 	bl	8005a40 <UART_WaitOnFlagUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e03e      	b.n	80051a6 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10b      	bne.n	8005146 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	881a      	ldrh	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800513a:	b292      	uxth	r2, r2
 800513c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	3302      	adds	r3, #2
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	e008      	b.n	8005158 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	781a      	ldrb	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	b292      	uxth	r2, r2
 8005150:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3301      	adds	r3, #1
 8005156:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1c7      	bne.n	8005106 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2200      	movs	r2, #0
 800517e:	2140      	movs	r1, #64	; 0x40
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 fc5d 	bl	8005a40 <UART_WaitOnFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e006      	b.n	80051a6 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	e000      	b.n	80051a6 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80051a4:	2302      	movs	r3, #2
  }
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3720      	adds	r7, #32
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051b4:	b08c      	sub	sp, #48	; 0x30
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	431a      	orrs	r2, r3
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4baa      	ldr	r3, [pc, #680]	; (8005488 <UART_SetConfig+0x2d8>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051e8:	430b      	orrs	r3, r1
 80051ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a9f      	ldr	r2, [pc, #636]	; (800548c <UART_SetConfig+0x2dc>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005218:	4313      	orrs	r3, r2
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005226:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005230:	430b      	orrs	r3, r1
 8005232:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	f023 010f 	bic.w	r1, r3, #15
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a90      	ldr	r2, [pc, #576]	; (8005490 <UART_SetConfig+0x2e0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d125      	bne.n	80052a0 <UART_SetConfig+0xf0>
 8005254:	4b8f      	ldr	r3, [pc, #572]	; (8005494 <UART_SetConfig+0x2e4>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b03      	cmp	r3, #3
 8005260:	d81a      	bhi.n	8005298 <UART_SetConfig+0xe8>
 8005262:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <UART_SetConfig+0xb8>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	08005279 	.word	0x08005279
 800526c:	08005289 	.word	0x08005289
 8005270:	08005281 	.word	0x08005281
 8005274:	08005291 	.word	0x08005291
 8005278:	2301      	movs	r3, #1
 800527a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800527e:	e116      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005280:	2302      	movs	r3, #2
 8005282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005286:	e112      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005288:	2304      	movs	r3, #4
 800528a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800528e:	e10e      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005290:	2308      	movs	r3, #8
 8005292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005296:	e10a      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005298:	2310      	movs	r3, #16
 800529a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800529e:	e106      	b.n	80054ae <UART_SetConfig+0x2fe>
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a7c      	ldr	r2, [pc, #496]	; (8005498 <UART_SetConfig+0x2e8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d138      	bne.n	800531c <UART_SetConfig+0x16c>
 80052aa:	4b7a      	ldr	r3, [pc, #488]	; (8005494 <UART_SetConfig+0x2e4>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b0:	f003 030c 	and.w	r3, r3, #12
 80052b4:	2b0c      	cmp	r3, #12
 80052b6:	d82d      	bhi.n	8005314 <UART_SetConfig+0x164>
 80052b8:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <UART_SetConfig+0x110>)
 80052ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052be:	bf00      	nop
 80052c0:	080052f5 	.word	0x080052f5
 80052c4:	08005315 	.word	0x08005315
 80052c8:	08005315 	.word	0x08005315
 80052cc:	08005315 	.word	0x08005315
 80052d0:	08005305 	.word	0x08005305
 80052d4:	08005315 	.word	0x08005315
 80052d8:	08005315 	.word	0x08005315
 80052dc:	08005315 	.word	0x08005315
 80052e0:	080052fd 	.word	0x080052fd
 80052e4:	08005315 	.word	0x08005315
 80052e8:	08005315 	.word	0x08005315
 80052ec:	08005315 	.word	0x08005315
 80052f0:	0800530d 	.word	0x0800530d
 80052f4:	2300      	movs	r3, #0
 80052f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052fa:	e0d8      	b.n	80054ae <UART_SetConfig+0x2fe>
 80052fc:	2302      	movs	r3, #2
 80052fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005302:	e0d4      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005304:	2304      	movs	r3, #4
 8005306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800530a:	e0d0      	b.n	80054ae <UART_SetConfig+0x2fe>
 800530c:	2308      	movs	r3, #8
 800530e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005312:	e0cc      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005314:	2310      	movs	r3, #16
 8005316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800531a:	e0c8      	b.n	80054ae <UART_SetConfig+0x2fe>
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a5e      	ldr	r2, [pc, #376]	; (800549c <UART_SetConfig+0x2ec>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d125      	bne.n	8005372 <UART_SetConfig+0x1c2>
 8005326:	4b5b      	ldr	r3, [pc, #364]	; (8005494 <UART_SetConfig+0x2e4>)
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005330:	2b30      	cmp	r3, #48	; 0x30
 8005332:	d016      	beq.n	8005362 <UART_SetConfig+0x1b2>
 8005334:	2b30      	cmp	r3, #48	; 0x30
 8005336:	d818      	bhi.n	800536a <UART_SetConfig+0x1ba>
 8005338:	2b20      	cmp	r3, #32
 800533a:	d00a      	beq.n	8005352 <UART_SetConfig+0x1a2>
 800533c:	2b20      	cmp	r3, #32
 800533e:	d814      	bhi.n	800536a <UART_SetConfig+0x1ba>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <UART_SetConfig+0x19a>
 8005344:	2b10      	cmp	r3, #16
 8005346:	d008      	beq.n	800535a <UART_SetConfig+0x1aa>
 8005348:	e00f      	b.n	800536a <UART_SetConfig+0x1ba>
 800534a:	2300      	movs	r3, #0
 800534c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005350:	e0ad      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005352:	2302      	movs	r3, #2
 8005354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005358:	e0a9      	b.n	80054ae <UART_SetConfig+0x2fe>
 800535a:	2304      	movs	r3, #4
 800535c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005360:	e0a5      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005362:	2308      	movs	r3, #8
 8005364:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005368:	e0a1      	b.n	80054ae <UART_SetConfig+0x2fe>
 800536a:	2310      	movs	r3, #16
 800536c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005370:	e09d      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a4a      	ldr	r2, [pc, #296]	; (80054a0 <UART_SetConfig+0x2f0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d125      	bne.n	80053c8 <UART_SetConfig+0x218>
 800537c:	4b45      	ldr	r3, [pc, #276]	; (8005494 <UART_SetConfig+0x2e4>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005382:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005386:	2bc0      	cmp	r3, #192	; 0xc0
 8005388:	d016      	beq.n	80053b8 <UART_SetConfig+0x208>
 800538a:	2bc0      	cmp	r3, #192	; 0xc0
 800538c:	d818      	bhi.n	80053c0 <UART_SetConfig+0x210>
 800538e:	2b80      	cmp	r3, #128	; 0x80
 8005390:	d00a      	beq.n	80053a8 <UART_SetConfig+0x1f8>
 8005392:	2b80      	cmp	r3, #128	; 0x80
 8005394:	d814      	bhi.n	80053c0 <UART_SetConfig+0x210>
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <UART_SetConfig+0x1f0>
 800539a:	2b40      	cmp	r3, #64	; 0x40
 800539c:	d008      	beq.n	80053b0 <UART_SetConfig+0x200>
 800539e:	e00f      	b.n	80053c0 <UART_SetConfig+0x210>
 80053a0:	2300      	movs	r3, #0
 80053a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053a6:	e082      	b.n	80054ae <UART_SetConfig+0x2fe>
 80053a8:	2302      	movs	r3, #2
 80053aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ae:	e07e      	b.n	80054ae <UART_SetConfig+0x2fe>
 80053b0:	2304      	movs	r3, #4
 80053b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053b6:	e07a      	b.n	80054ae <UART_SetConfig+0x2fe>
 80053b8:	2308      	movs	r3, #8
 80053ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053be:	e076      	b.n	80054ae <UART_SetConfig+0x2fe>
 80053c0:	2310      	movs	r3, #16
 80053c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053c6:	e072      	b.n	80054ae <UART_SetConfig+0x2fe>
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a35      	ldr	r2, [pc, #212]	; (80054a4 <UART_SetConfig+0x2f4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d12a      	bne.n	8005428 <UART_SetConfig+0x278>
 80053d2:	4b30      	ldr	r3, [pc, #192]	; (8005494 <UART_SetConfig+0x2e4>)
 80053d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053e0:	d01a      	beq.n	8005418 <UART_SetConfig+0x268>
 80053e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053e6:	d81b      	bhi.n	8005420 <UART_SetConfig+0x270>
 80053e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ec:	d00c      	beq.n	8005408 <UART_SetConfig+0x258>
 80053ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f2:	d815      	bhi.n	8005420 <UART_SetConfig+0x270>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <UART_SetConfig+0x250>
 80053f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053fc:	d008      	beq.n	8005410 <UART_SetConfig+0x260>
 80053fe:	e00f      	b.n	8005420 <UART_SetConfig+0x270>
 8005400:	2300      	movs	r3, #0
 8005402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005406:	e052      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005408:	2302      	movs	r3, #2
 800540a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800540e:	e04e      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005410:	2304      	movs	r3, #4
 8005412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005416:	e04a      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005418:	2308      	movs	r3, #8
 800541a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800541e:	e046      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005420:	2310      	movs	r3, #16
 8005422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005426:	e042      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a17      	ldr	r2, [pc, #92]	; (800548c <UART_SetConfig+0x2dc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d13a      	bne.n	80054a8 <UART_SetConfig+0x2f8>
 8005432:	4b18      	ldr	r3, [pc, #96]	; (8005494 <UART_SetConfig+0x2e4>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005438:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800543c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005440:	d01a      	beq.n	8005478 <UART_SetConfig+0x2c8>
 8005442:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005446:	d81b      	bhi.n	8005480 <UART_SetConfig+0x2d0>
 8005448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544c:	d00c      	beq.n	8005468 <UART_SetConfig+0x2b8>
 800544e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005452:	d815      	bhi.n	8005480 <UART_SetConfig+0x2d0>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <UART_SetConfig+0x2b0>
 8005458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545c:	d008      	beq.n	8005470 <UART_SetConfig+0x2c0>
 800545e:	e00f      	b.n	8005480 <UART_SetConfig+0x2d0>
 8005460:	2300      	movs	r3, #0
 8005462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005466:	e022      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005468:	2302      	movs	r3, #2
 800546a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800546e:	e01e      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005470:	2304      	movs	r3, #4
 8005472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005476:	e01a      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005478:	2308      	movs	r3, #8
 800547a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800547e:	e016      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005480:	2310      	movs	r3, #16
 8005482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005486:	e012      	b.n	80054ae <UART_SetConfig+0x2fe>
 8005488:	cfff69f3 	.word	0xcfff69f3
 800548c:	40008000 	.word	0x40008000
 8005490:	40013800 	.word	0x40013800
 8005494:	40021000 	.word	0x40021000
 8005498:	40004400 	.word	0x40004400
 800549c:	40004800 	.word	0x40004800
 80054a0:	40004c00 	.word	0x40004c00
 80054a4:	40005000 	.word	0x40005000
 80054a8:	2310      	movs	r3, #16
 80054aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4aae      	ldr	r2, [pc, #696]	; (800576c <UART_SetConfig+0x5bc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	f040 8097 	bne.w	80055e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d823      	bhi.n	800550a <UART_SetConfig+0x35a>
 80054c2:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <UART_SetConfig+0x318>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	080054ed 	.word	0x080054ed
 80054cc:	0800550b 	.word	0x0800550b
 80054d0:	080054f5 	.word	0x080054f5
 80054d4:	0800550b 	.word	0x0800550b
 80054d8:	080054fb 	.word	0x080054fb
 80054dc:	0800550b 	.word	0x0800550b
 80054e0:	0800550b 	.word	0x0800550b
 80054e4:	0800550b 	.word	0x0800550b
 80054e8:	08005503 	.word	0x08005503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ec:	f7fe fc00 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 80054f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054f2:	e010      	b.n	8005516 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f4:	4b9e      	ldr	r3, [pc, #632]	; (8005770 <UART_SetConfig+0x5c0>)
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054f8:	e00d      	b.n	8005516 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054fa:	f7fe fb61 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 80054fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005500:	e009      	b.n	8005516 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005508:	e005      	b.n	8005516 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005514:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 8130 	beq.w	800577e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	4a94      	ldr	r2, [pc, #592]	; (8005774 <UART_SetConfig+0x5c4>)
 8005524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005528:	461a      	mov	r2, r3
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005530:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	4413      	add	r3, r2
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	429a      	cmp	r2, r3
 8005540:	d305      	bcc.n	800554e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	429a      	cmp	r2, r3
 800554c:	d903      	bls.n	8005556 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005554:	e113      	b.n	800577e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	2200      	movs	r2, #0
 800555a:	60bb      	str	r3, [r7, #8]
 800555c:	60fa      	str	r2, [r7, #12]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	4a84      	ldr	r2, [pc, #528]	; (8005774 <UART_SetConfig+0x5c4>)
 8005564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005568:	b29b      	uxth	r3, r3
 800556a:	2200      	movs	r2, #0
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005574:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005578:	f7fb fb2e 	bl	8000bd8 <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4610      	mov	r0, r2
 8005582:	4619      	mov	r1, r3
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	020b      	lsls	r3, r1, #8
 800558e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005592:	0202      	lsls	r2, r0, #8
 8005594:	6979      	ldr	r1, [r7, #20]
 8005596:	6849      	ldr	r1, [r1, #4]
 8005598:	0849      	lsrs	r1, r1, #1
 800559a:	2000      	movs	r0, #0
 800559c:	460c      	mov	r4, r1
 800559e:	4605      	mov	r5, r0
 80055a0:	eb12 0804 	adds.w	r8, r2, r4
 80055a4:	eb43 0905 	adc.w	r9, r3, r5
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	469a      	mov	sl, r3
 80055b0:	4693      	mov	fp, r2
 80055b2:	4652      	mov	r2, sl
 80055b4:	465b      	mov	r3, fp
 80055b6:	4640      	mov	r0, r8
 80055b8:	4649      	mov	r1, r9
 80055ba:	f7fb fb0d 	bl	8000bd8 <__aeabi_uldivmod>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	4613      	mov	r3, r2
 80055c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055cc:	d308      	bcc.n	80055e0 <UART_SetConfig+0x430>
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055d4:	d204      	bcs.n	80055e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6a3a      	ldr	r2, [r7, #32]
 80055dc:	60da      	str	r2, [r3, #12]
 80055de:	e0ce      	b.n	800577e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80055e6:	e0ca      	b.n	800577e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f0:	d166      	bne.n	80056c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80055f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d827      	bhi.n	800564a <UART_SetConfig+0x49a>
 80055fa:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <UART_SetConfig+0x450>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005625 	.word	0x08005625
 8005604:	0800562d 	.word	0x0800562d
 8005608:	08005635 	.word	0x08005635
 800560c:	0800564b 	.word	0x0800564b
 8005610:	0800563b 	.word	0x0800563b
 8005614:	0800564b 	.word	0x0800564b
 8005618:	0800564b 	.word	0x0800564b
 800561c:	0800564b 	.word	0x0800564b
 8005620:	08005643 	.word	0x08005643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005624:	f7fe fb64 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8005628:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800562a:	e014      	b.n	8005656 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800562c:	f7fe fb76 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 8005630:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005632:	e010      	b.n	8005656 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005634:	4b4e      	ldr	r3, [pc, #312]	; (8005770 <UART_SetConfig+0x5c0>)
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005638:	e00d      	b.n	8005656 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800563a:	f7fe fac1 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 800563e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005640:	e009      	b.n	8005656 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005648:	e005      	b.n	8005656 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005654:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 8090 	beq.w	800577e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	4a44      	ldr	r2, [pc, #272]	; (8005774 <UART_SetConfig+0x5c4>)
 8005664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005668:	461a      	mov	r2, r3
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005670:	005a      	lsls	r2, r3, #1
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	085b      	lsrs	r3, r3, #1
 8005678:	441a      	add	r2, r3
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005682:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	2b0f      	cmp	r3, #15
 8005688:	d916      	bls.n	80056b8 <UART_SetConfig+0x508>
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005690:	d212      	bcs.n	80056b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	b29b      	uxth	r3, r3
 8005696:	f023 030f 	bic.w	r3, r3, #15
 800569a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	085b      	lsrs	r3, r3, #1
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	8bfb      	ldrh	r3, [r7, #30]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	8bfa      	ldrh	r2, [r7, #30]
 80056b4:	60da      	str	r2, [r3, #12]
 80056b6:	e062      	b.n	800577e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80056be:	e05e      	b.n	800577e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d828      	bhi.n	800571a <UART_SetConfig+0x56a>
 80056c8:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <UART_SetConfig+0x520>)
 80056ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ce:	bf00      	nop
 80056d0:	080056f5 	.word	0x080056f5
 80056d4:	080056fd 	.word	0x080056fd
 80056d8:	08005705 	.word	0x08005705
 80056dc:	0800571b 	.word	0x0800571b
 80056e0:	0800570b 	.word	0x0800570b
 80056e4:	0800571b 	.word	0x0800571b
 80056e8:	0800571b 	.word	0x0800571b
 80056ec:	0800571b 	.word	0x0800571b
 80056f0:	08005713 	.word	0x08005713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f4:	f7fe fafc 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 80056f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056fa:	e014      	b.n	8005726 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056fc:	f7fe fb0e 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 8005700:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005702:	e010      	b.n	8005726 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005704:	4b1a      	ldr	r3, [pc, #104]	; (8005770 <UART_SetConfig+0x5c0>)
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005708:	e00d      	b.n	8005726 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570a:	f7fe fa59 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 800570e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005710:	e009      	b.n	8005726 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005718:	e005      	b.n	8005726 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005724:	bf00      	nop
    }

    if (pclk != 0U)
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	2b00      	cmp	r3, #0
 800572a:	d028      	beq.n	800577e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	4a10      	ldr	r2, [pc, #64]	; (8005774 <UART_SetConfig+0x5c4>)
 8005732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005736:	461a      	mov	r2, r3
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	fbb3 f2f2 	udiv	r2, r3, r2
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	085b      	lsrs	r3, r3, #1
 8005744:	441a      	add	r2, r3
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	fbb2 f3f3 	udiv	r3, r2, r3
 800574e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	2b0f      	cmp	r3, #15
 8005754:	d910      	bls.n	8005778 <UART_SetConfig+0x5c8>
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575c:	d20c      	bcs.n	8005778 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	b29a      	uxth	r2, r3
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60da      	str	r2, [r3, #12]
 8005768:	e009      	b.n	800577e <UART_SetConfig+0x5ce>
 800576a:	bf00      	nop
 800576c:	40008000 	.word	0x40008000
 8005770:	00f42400 	.word	0x00f42400
 8005774:	080088b0 	.word	0x080088b0
      }
      else
      {
        ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2201      	movs	r2, #1
 8005782:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2201      	movs	r2, #1
 800578a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2200      	movs	r2, #0
 8005792:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2200      	movs	r2, #0
 8005798:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800579a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3730      	adds	r7, #48	; 0x30
 80057a2:	46bd      	mov	sp, r7
 80057a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080057a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	f003 0308 	and.w	r3, r3, #8
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01a      	beq.n	80058be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a6:	d10a      	bne.n	80058be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	605a      	str	r2, [r3, #4]
  }
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b098      	sub	sp, #96	; 0x60
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058fc:	f7fc fac8 	bl	8001e90 <HAL_GetTick>
 8005900:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b08      	cmp	r3, #8
 800590e:	d12f      	bne.n	8005970 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005918:	2200      	movs	r2, #0
 800591a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f88e 	bl	8005a40 <UART_WaitOnFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d022      	beq.n	8005970 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800593e:	653b      	str	r3, [r7, #80]	; 0x50
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005948:	647b      	str	r3, [r7, #68]	; 0x44
 800594a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800594e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e6      	bne.n	800592a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2220      	movs	r2, #32
 8005960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e063      	b.n	8005a38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b04      	cmp	r3, #4
 800597c:	d149      	bne.n	8005a12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800597e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005986:	2200      	movs	r2, #0
 8005988:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f857 	bl	8005a40 <UART_WaitOnFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d03c      	beq.n	8005a12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	623b      	str	r3, [r7, #32]
   return(result);
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b6:	633b      	str	r3, [r7, #48]	; 0x30
 80059b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e6      	bne.n	8005998 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3308      	adds	r3, #8
 80059d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3308      	adds	r3, #8
 80059e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ea:	61fa      	str	r2, [r7, #28]
 80059ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	69b9      	ldr	r1, [r7, #24]
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	617b      	str	r3, [r7, #20]
   return(result);
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e5      	bne.n	80059ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e012      	b.n	8005a38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3758      	adds	r7, #88	; 0x58
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a50:	e049      	b.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a58:	d045      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a5a:	f7fc fa19 	bl	8001e90 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d302      	bcc.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e048      	b.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d031      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d110      	bne.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2208      	movs	r2, #8
 8005a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f838 	bl	8005b0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e029      	b.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac0:	d111      	bne.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 f81e 	bl	8005b0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e00f      	b.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4013      	ands	r3, r2
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	bf0c      	ite	eq
 8005af6:	2301      	moveq	r3, #1
 8005af8:	2300      	movne	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	79fb      	ldrb	r3, [r7, #7]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d0a6      	beq.n	8005a52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b095      	sub	sp, #84	; 0x54
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b34:	643b      	str	r3, [r7, #64]	; 0x40
 8005b36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e6      	bne.n	8005b16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	e853 3f00 	ldrex	r3, [r3]
 8005b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b5e:	f023 0301 	bic.w	r3, r3, #1
 8005b62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3308      	adds	r3, #8
 8005b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e3      	bne.n	8005b48 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d118      	bne.n	8005bba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f023 0310 	bic.w	r3, r3, #16
 8005b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba6:	61bb      	str	r3, [r7, #24]
 8005ba8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6979      	ldr	r1, [r7, #20]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e6      	bne.n	8005b88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005bce:	bf00      	nop
 8005bd0:	3754      	adds	r7, #84	; 0x54
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e027      	b.n	8005c40 <HAL_UARTEx_DisableFifoMode+0x66>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2224      	movs	r2, #36	; 0x24
 8005bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0201 	bic.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e02d      	b.n	8005cc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2224      	movs	r2, #36	; 0x24
 8005c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f84f 	bl	8005d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e02d      	b.n	8005d3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2224      	movs	r2, #36	; 0x24
 8005cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0201 	bic.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f811 	bl	8005d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d108      	bne.n	8005d66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d64:	e031      	b.n	8005dca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d66:	2308      	movs	r3, #8
 8005d68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	0e5b      	lsrs	r3, r3, #25
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	0f5b      	lsrs	r3, r3, #29
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	f003 0307 	and.w	r3, r3, #7
 8005d8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d8e:	7bbb      	ldrb	r3, [r7, #14]
 8005d90:	7b3a      	ldrb	r2, [r7, #12]
 8005d92:	4911      	ldr	r1, [pc, #68]	; (8005dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8005d94:	5c8a      	ldrb	r2, [r1, r2]
 8005d96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d9a:	7b3a      	ldrb	r2, [r7, #12]
 8005d9c:	490f      	ldr	r1, [pc, #60]	; (8005ddc <UARTEx_SetNbDataToProcess+0x98>)
 8005d9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	7b7a      	ldrb	r2, [r7, #13]
 8005db0:	4909      	ldr	r1, [pc, #36]	; (8005dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8005db2:	5c8a      	ldrb	r2, [r1, r2]
 8005db4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005db8:	7b7a      	ldrb	r2, [r7, #13]
 8005dba:	4908      	ldr	r1, [pc, #32]	; (8005ddc <UARTEx_SetNbDataToProcess+0x98>)
 8005dbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005dca:	bf00      	nop
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	080088c8 	.word	0x080088c8
 8005ddc:	080088d0 	.word	0x080088d0

08005de0 <__cvt>:
 8005de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de4:	ec55 4b10 	vmov	r4, r5, d0
 8005de8:	2d00      	cmp	r5, #0
 8005dea:	460e      	mov	r6, r1
 8005dec:	4619      	mov	r1, r3
 8005dee:	462b      	mov	r3, r5
 8005df0:	bfbb      	ittet	lt
 8005df2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005df6:	461d      	movlt	r5, r3
 8005df8:	2300      	movge	r3, #0
 8005dfa:	232d      	movlt	r3, #45	; 0x2d
 8005dfc:	700b      	strb	r3, [r1, #0]
 8005dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e04:	4691      	mov	r9, r2
 8005e06:	f023 0820 	bic.w	r8, r3, #32
 8005e0a:	bfbc      	itt	lt
 8005e0c:	4622      	movlt	r2, r4
 8005e0e:	4614      	movlt	r4, r2
 8005e10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e14:	d005      	beq.n	8005e22 <__cvt+0x42>
 8005e16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e1a:	d100      	bne.n	8005e1e <__cvt+0x3e>
 8005e1c:	3601      	adds	r6, #1
 8005e1e:	2102      	movs	r1, #2
 8005e20:	e000      	b.n	8005e24 <__cvt+0x44>
 8005e22:	2103      	movs	r1, #3
 8005e24:	ab03      	add	r3, sp, #12
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	ab02      	add	r3, sp, #8
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	ec45 4b10 	vmov	d0, r4, r5
 8005e30:	4653      	mov	r3, sl
 8005e32:	4632      	mov	r2, r6
 8005e34:	f000 fe18 	bl	8006a68 <_dtoa_r>
 8005e38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e3c:	4607      	mov	r7, r0
 8005e3e:	d102      	bne.n	8005e46 <__cvt+0x66>
 8005e40:	f019 0f01 	tst.w	r9, #1
 8005e44:	d022      	beq.n	8005e8c <__cvt+0xac>
 8005e46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e4a:	eb07 0906 	add.w	r9, r7, r6
 8005e4e:	d110      	bne.n	8005e72 <__cvt+0x92>
 8005e50:	783b      	ldrb	r3, [r7, #0]
 8005e52:	2b30      	cmp	r3, #48	; 0x30
 8005e54:	d10a      	bne.n	8005e6c <__cvt+0x8c>
 8005e56:	2200      	movs	r2, #0
 8005e58:	2300      	movs	r3, #0
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	f7fa fe4b 	bl	8000af8 <__aeabi_dcmpeq>
 8005e62:	b918      	cbnz	r0, 8005e6c <__cvt+0x8c>
 8005e64:	f1c6 0601 	rsb	r6, r6, #1
 8005e68:	f8ca 6000 	str.w	r6, [sl]
 8005e6c:	f8da 3000 	ldr.w	r3, [sl]
 8005e70:	4499      	add	r9, r3
 8005e72:	2200      	movs	r2, #0
 8005e74:	2300      	movs	r3, #0
 8005e76:	4620      	mov	r0, r4
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f7fa fe3d 	bl	8000af8 <__aeabi_dcmpeq>
 8005e7e:	b108      	cbz	r0, 8005e84 <__cvt+0xa4>
 8005e80:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e84:	2230      	movs	r2, #48	; 0x30
 8005e86:	9b03      	ldr	r3, [sp, #12]
 8005e88:	454b      	cmp	r3, r9
 8005e8a:	d307      	bcc.n	8005e9c <__cvt+0xbc>
 8005e8c:	9b03      	ldr	r3, [sp, #12]
 8005e8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e90:	1bdb      	subs	r3, r3, r7
 8005e92:	4638      	mov	r0, r7
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	b004      	add	sp, #16
 8005e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9c:	1c59      	adds	r1, r3, #1
 8005e9e:	9103      	str	r1, [sp, #12]
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	e7f0      	b.n	8005e86 <__cvt+0xa6>

08005ea4 <__exponent>:
 8005ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2900      	cmp	r1, #0
 8005eaa:	bfb8      	it	lt
 8005eac:	4249      	neglt	r1, r1
 8005eae:	f803 2b02 	strb.w	r2, [r3], #2
 8005eb2:	bfb4      	ite	lt
 8005eb4:	222d      	movlt	r2, #45	; 0x2d
 8005eb6:	222b      	movge	r2, #43	; 0x2b
 8005eb8:	2909      	cmp	r1, #9
 8005eba:	7042      	strb	r2, [r0, #1]
 8005ebc:	dd2a      	ble.n	8005f14 <__exponent+0x70>
 8005ebe:	f10d 0207 	add.w	r2, sp, #7
 8005ec2:	4617      	mov	r7, r2
 8005ec4:	260a      	movs	r6, #10
 8005ec6:	4694      	mov	ip, r2
 8005ec8:	fb91 f5f6 	sdiv	r5, r1, r6
 8005ecc:	fb06 1415 	mls	r4, r6, r5, r1
 8005ed0:	3430      	adds	r4, #48	; 0x30
 8005ed2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	2c63      	cmp	r4, #99	; 0x63
 8005eda:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005ede:	4629      	mov	r1, r5
 8005ee0:	dcf1      	bgt.n	8005ec6 <__exponent+0x22>
 8005ee2:	3130      	adds	r1, #48	; 0x30
 8005ee4:	f1ac 0402 	sub.w	r4, ip, #2
 8005ee8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005eec:	1c41      	adds	r1, r0, #1
 8005eee:	4622      	mov	r2, r4
 8005ef0:	42ba      	cmp	r2, r7
 8005ef2:	d30a      	bcc.n	8005f0a <__exponent+0x66>
 8005ef4:	f10d 0209 	add.w	r2, sp, #9
 8005ef8:	eba2 020c 	sub.w	r2, r2, ip
 8005efc:	42bc      	cmp	r4, r7
 8005efe:	bf88      	it	hi
 8005f00:	2200      	movhi	r2, #0
 8005f02:	4413      	add	r3, r2
 8005f04:	1a18      	subs	r0, r3, r0
 8005f06:	b003      	add	sp, #12
 8005f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f0a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005f0e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005f12:	e7ed      	b.n	8005ef0 <__exponent+0x4c>
 8005f14:	2330      	movs	r3, #48	; 0x30
 8005f16:	3130      	adds	r1, #48	; 0x30
 8005f18:	7083      	strb	r3, [r0, #2]
 8005f1a:	70c1      	strb	r1, [r0, #3]
 8005f1c:	1d03      	adds	r3, r0, #4
 8005f1e:	e7f1      	b.n	8005f04 <__exponent+0x60>

08005f20 <_printf_float>:
 8005f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f24:	ed2d 8b02 	vpush	{d8}
 8005f28:	b08d      	sub	sp, #52	; 0x34
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f30:	4616      	mov	r6, r2
 8005f32:	461f      	mov	r7, r3
 8005f34:	4605      	mov	r5, r0
 8005f36:	f000 fcdf 	bl	80068f8 <_localeconv_r>
 8005f3a:	f8d0 a000 	ldr.w	sl, [r0]
 8005f3e:	4650      	mov	r0, sl
 8005f40:	f7fa f9ae 	bl	80002a0 <strlen>
 8005f44:	2300      	movs	r3, #0
 8005f46:	930a      	str	r3, [sp, #40]	; 0x28
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	9305      	str	r3, [sp, #20]
 8005f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f54:	3307      	adds	r3, #7
 8005f56:	f023 0307 	bic.w	r3, r3, #7
 8005f5a:	f103 0208 	add.w	r2, r3, #8
 8005f5e:	f8c8 2000 	str.w	r2, [r8]
 8005f62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f6a:	9307      	str	r3, [sp, #28]
 8005f6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f70:	ee08 0a10 	vmov	s16, r0
 8005f74:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005f78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f7c:	4b9e      	ldr	r3, [pc, #632]	; (80061f8 <_printf_float+0x2d8>)
 8005f7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f82:	f7fa fdeb 	bl	8000b5c <__aeabi_dcmpun>
 8005f86:	bb88      	cbnz	r0, 8005fec <_printf_float+0xcc>
 8005f88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f8c:	4b9a      	ldr	r3, [pc, #616]	; (80061f8 <_printf_float+0x2d8>)
 8005f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f92:	f7fa fdc5 	bl	8000b20 <__aeabi_dcmple>
 8005f96:	bb48      	cbnz	r0, 8005fec <_printf_float+0xcc>
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	4640      	mov	r0, r8
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	f7fa fdb4 	bl	8000b0c <__aeabi_dcmplt>
 8005fa4:	b110      	cbz	r0, 8005fac <_printf_float+0x8c>
 8005fa6:	232d      	movs	r3, #45	; 0x2d
 8005fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fac:	4a93      	ldr	r2, [pc, #588]	; (80061fc <_printf_float+0x2dc>)
 8005fae:	4b94      	ldr	r3, [pc, #592]	; (8006200 <_printf_float+0x2e0>)
 8005fb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005fb4:	bf94      	ite	ls
 8005fb6:	4690      	movls	r8, r2
 8005fb8:	4698      	movhi	r8, r3
 8005fba:	2303      	movs	r3, #3
 8005fbc:	6123      	str	r3, [r4, #16]
 8005fbe:	9b05      	ldr	r3, [sp, #20]
 8005fc0:	f023 0304 	bic.w	r3, r3, #4
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	f04f 0900 	mov.w	r9, #0
 8005fca:	9700      	str	r7, [sp, #0]
 8005fcc:	4633      	mov	r3, r6
 8005fce:	aa0b      	add	r2, sp, #44	; 0x2c
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f000 f9da 	bl	800638c <_printf_common>
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f040 8090 	bne.w	80060fe <_printf_float+0x1de>
 8005fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fe2:	b00d      	add	sp, #52	; 0x34
 8005fe4:	ecbd 8b02 	vpop	{d8}
 8005fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fec:	4642      	mov	r2, r8
 8005fee:	464b      	mov	r3, r9
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	f7fa fdb2 	bl	8000b5c <__aeabi_dcmpun>
 8005ff8:	b140      	cbz	r0, 800600c <_printf_float+0xec>
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bfbc      	itt	lt
 8006000:	232d      	movlt	r3, #45	; 0x2d
 8006002:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006006:	4a7f      	ldr	r2, [pc, #508]	; (8006204 <_printf_float+0x2e4>)
 8006008:	4b7f      	ldr	r3, [pc, #508]	; (8006208 <_printf_float+0x2e8>)
 800600a:	e7d1      	b.n	8005fb0 <_printf_float+0x90>
 800600c:	6863      	ldr	r3, [r4, #4]
 800600e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006012:	9206      	str	r2, [sp, #24]
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	d13f      	bne.n	8006098 <_printf_float+0x178>
 8006018:	2306      	movs	r3, #6
 800601a:	6063      	str	r3, [r4, #4]
 800601c:	9b05      	ldr	r3, [sp, #20]
 800601e:	6861      	ldr	r1, [r4, #4]
 8006020:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006024:	2300      	movs	r3, #0
 8006026:	9303      	str	r3, [sp, #12]
 8006028:	ab0a      	add	r3, sp, #40	; 0x28
 800602a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800602e:	ab09      	add	r3, sp, #36	; 0x24
 8006030:	ec49 8b10 	vmov	d0, r8, r9
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	6022      	str	r2, [r4, #0]
 8006038:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800603c:	4628      	mov	r0, r5
 800603e:	f7ff fecf 	bl	8005de0 <__cvt>
 8006042:	9b06      	ldr	r3, [sp, #24]
 8006044:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006046:	2b47      	cmp	r3, #71	; 0x47
 8006048:	4680      	mov	r8, r0
 800604a:	d108      	bne.n	800605e <_printf_float+0x13e>
 800604c:	1cc8      	adds	r0, r1, #3
 800604e:	db02      	blt.n	8006056 <_printf_float+0x136>
 8006050:	6863      	ldr	r3, [r4, #4]
 8006052:	4299      	cmp	r1, r3
 8006054:	dd41      	ble.n	80060da <_printf_float+0x1ba>
 8006056:	f1ab 0302 	sub.w	r3, fp, #2
 800605a:	fa5f fb83 	uxtb.w	fp, r3
 800605e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006062:	d820      	bhi.n	80060a6 <_printf_float+0x186>
 8006064:	3901      	subs	r1, #1
 8006066:	465a      	mov	r2, fp
 8006068:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800606c:	9109      	str	r1, [sp, #36]	; 0x24
 800606e:	f7ff ff19 	bl	8005ea4 <__exponent>
 8006072:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006074:	1813      	adds	r3, r2, r0
 8006076:	2a01      	cmp	r2, #1
 8006078:	4681      	mov	r9, r0
 800607a:	6123      	str	r3, [r4, #16]
 800607c:	dc02      	bgt.n	8006084 <_printf_float+0x164>
 800607e:	6822      	ldr	r2, [r4, #0]
 8006080:	07d2      	lsls	r2, r2, #31
 8006082:	d501      	bpl.n	8006088 <_printf_float+0x168>
 8006084:	3301      	adds	r3, #1
 8006086:	6123      	str	r3, [r4, #16]
 8006088:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800608c:	2b00      	cmp	r3, #0
 800608e:	d09c      	beq.n	8005fca <_printf_float+0xaa>
 8006090:	232d      	movs	r3, #45	; 0x2d
 8006092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006096:	e798      	b.n	8005fca <_printf_float+0xaa>
 8006098:	9a06      	ldr	r2, [sp, #24]
 800609a:	2a47      	cmp	r2, #71	; 0x47
 800609c:	d1be      	bne.n	800601c <_printf_float+0xfc>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1bc      	bne.n	800601c <_printf_float+0xfc>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e7b9      	b.n	800601a <_printf_float+0xfa>
 80060a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80060aa:	d118      	bne.n	80060de <_printf_float+0x1be>
 80060ac:	2900      	cmp	r1, #0
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	dd0b      	ble.n	80060ca <_printf_float+0x1aa>
 80060b2:	6121      	str	r1, [r4, #16]
 80060b4:	b913      	cbnz	r3, 80060bc <_printf_float+0x19c>
 80060b6:	6822      	ldr	r2, [r4, #0]
 80060b8:	07d0      	lsls	r0, r2, #31
 80060ba:	d502      	bpl.n	80060c2 <_printf_float+0x1a2>
 80060bc:	3301      	adds	r3, #1
 80060be:	440b      	add	r3, r1
 80060c0:	6123      	str	r3, [r4, #16]
 80060c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80060c4:	f04f 0900 	mov.w	r9, #0
 80060c8:	e7de      	b.n	8006088 <_printf_float+0x168>
 80060ca:	b913      	cbnz	r3, 80060d2 <_printf_float+0x1b2>
 80060cc:	6822      	ldr	r2, [r4, #0]
 80060ce:	07d2      	lsls	r2, r2, #31
 80060d0:	d501      	bpl.n	80060d6 <_printf_float+0x1b6>
 80060d2:	3302      	adds	r3, #2
 80060d4:	e7f4      	b.n	80060c0 <_printf_float+0x1a0>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e7f2      	b.n	80060c0 <_printf_float+0x1a0>
 80060da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80060de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060e0:	4299      	cmp	r1, r3
 80060e2:	db05      	blt.n	80060f0 <_printf_float+0x1d0>
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	6121      	str	r1, [r4, #16]
 80060e8:	07d8      	lsls	r0, r3, #31
 80060ea:	d5ea      	bpl.n	80060c2 <_printf_float+0x1a2>
 80060ec:	1c4b      	adds	r3, r1, #1
 80060ee:	e7e7      	b.n	80060c0 <_printf_float+0x1a0>
 80060f0:	2900      	cmp	r1, #0
 80060f2:	bfd4      	ite	le
 80060f4:	f1c1 0202 	rsble	r2, r1, #2
 80060f8:	2201      	movgt	r2, #1
 80060fa:	4413      	add	r3, r2
 80060fc:	e7e0      	b.n	80060c0 <_printf_float+0x1a0>
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	055a      	lsls	r2, r3, #21
 8006102:	d407      	bmi.n	8006114 <_printf_float+0x1f4>
 8006104:	6923      	ldr	r3, [r4, #16]
 8006106:	4642      	mov	r2, r8
 8006108:	4631      	mov	r1, r6
 800610a:	4628      	mov	r0, r5
 800610c:	47b8      	blx	r7
 800610e:	3001      	adds	r0, #1
 8006110:	d12c      	bne.n	800616c <_printf_float+0x24c>
 8006112:	e764      	b.n	8005fde <_printf_float+0xbe>
 8006114:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006118:	f240 80e0 	bls.w	80062dc <_printf_float+0x3bc>
 800611c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006120:	2200      	movs	r2, #0
 8006122:	2300      	movs	r3, #0
 8006124:	f7fa fce8 	bl	8000af8 <__aeabi_dcmpeq>
 8006128:	2800      	cmp	r0, #0
 800612a:	d034      	beq.n	8006196 <_printf_float+0x276>
 800612c:	4a37      	ldr	r2, [pc, #220]	; (800620c <_printf_float+0x2ec>)
 800612e:	2301      	movs	r3, #1
 8006130:	4631      	mov	r1, r6
 8006132:	4628      	mov	r0, r5
 8006134:	47b8      	blx	r7
 8006136:	3001      	adds	r0, #1
 8006138:	f43f af51 	beq.w	8005fde <_printf_float+0xbe>
 800613c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006140:	429a      	cmp	r2, r3
 8006142:	db02      	blt.n	800614a <_printf_float+0x22a>
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	07d8      	lsls	r0, r3, #31
 8006148:	d510      	bpl.n	800616c <_printf_float+0x24c>
 800614a:	ee18 3a10 	vmov	r3, s16
 800614e:	4652      	mov	r2, sl
 8006150:	4631      	mov	r1, r6
 8006152:	4628      	mov	r0, r5
 8006154:	47b8      	blx	r7
 8006156:	3001      	adds	r0, #1
 8006158:	f43f af41 	beq.w	8005fde <_printf_float+0xbe>
 800615c:	f04f 0800 	mov.w	r8, #0
 8006160:	f104 091a 	add.w	r9, r4, #26
 8006164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006166:	3b01      	subs	r3, #1
 8006168:	4543      	cmp	r3, r8
 800616a:	dc09      	bgt.n	8006180 <_printf_float+0x260>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	079b      	lsls	r3, r3, #30
 8006170:	f100 8107 	bmi.w	8006382 <_printf_float+0x462>
 8006174:	68e0      	ldr	r0, [r4, #12]
 8006176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006178:	4298      	cmp	r0, r3
 800617a:	bfb8      	it	lt
 800617c:	4618      	movlt	r0, r3
 800617e:	e730      	b.n	8005fe2 <_printf_float+0xc2>
 8006180:	2301      	movs	r3, #1
 8006182:	464a      	mov	r2, r9
 8006184:	4631      	mov	r1, r6
 8006186:	4628      	mov	r0, r5
 8006188:	47b8      	blx	r7
 800618a:	3001      	adds	r0, #1
 800618c:	f43f af27 	beq.w	8005fde <_printf_float+0xbe>
 8006190:	f108 0801 	add.w	r8, r8, #1
 8006194:	e7e6      	b.n	8006164 <_printf_float+0x244>
 8006196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006198:	2b00      	cmp	r3, #0
 800619a:	dc39      	bgt.n	8006210 <_printf_float+0x2f0>
 800619c:	4a1b      	ldr	r2, [pc, #108]	; (800620c <_printf_float+0x2ec>)
 800619e:	2301      	movs	r3, #1
 80061a0:	4631      	mov	r1, r6
 80061a2:	4628      	mov	r0, r5
 80061a4:	47b8      	blx	r7
 80061a6:	3001      	adds	r0, #1
 80061a8:	f43f af19 	beq.w	8005fde <_printf_float+0xbe>
 80061ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80061b0:	4313      	orrs	r3, r2
 80061b2:	d102      	bne.n	80061ba <_printf_float+0x29a>
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	07d9      	lsls	r1, r3, #31
 80061b8:	d5d8      	bpl.n	800616c <_printf_float+0x24c>
 80061ba:	ee18 3a10 	vmov	r3, s16
 80061be:	4652      	mov	r2, sl
 80061c0:	4631      	mov	r1, r6
 80061c2:	4628      	mov	r0, r5
 80061c4:	47b8      	blx	r7
 80061c6:	3001      	adds	r0, #1
 80061c8:	f43f af09 	beq.w	8005fde <_printf_float+0xbe>
 80061cc:	f04f 0900 	mov.w	r9, #0
 80061d0:	f104 0a1a 	add.w	sl, r4, #26
 80061d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d6:	425b      	negs	r3, r3
 80061d8:	454b      	cmp	r3, r9
 80061da:	dc01      	bgt.n	80061e0 <_printf_float+0x2c0>
 80061dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061de:	e792      	b.n	8006106 <_printf_float+0x1e6>
 80061e0:	2301      	movs	r3, #1
 80061e2:	4652      	mov	r2, sl
 80061e4:	4631      	mov	r1, r6
 80061e6:	4628      	mov	r0, r5
 80061e8:	47b8      	blx	r7
 80061ea:	3001      	adds	r0, #1
 80061ec:	f43f aef7 	beq.w	8005fde <_printf_float+0xbe>
 80061f0:	f109 0901 	add.w	r9, r9, #1
 80061f4:	e7ee      	b.n	80061d4 <_printf_float+0x2b4>
 80061f6:	bf00      	nop
 80061f8:	7fefffff 	.word	0x7fefffff
 80061fc:	080088d8 	.word	0x080088d8
 8006200:	080088dc 	.word	0x080088dc
 8006204:	080088e0 	.word	0x080088e0
 8006208:	080088e4 	.word	0x080088e4
 800620c:	080088e8 	.word	0x080088e8
 8006210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006212:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006214:	429a      	cmp	r2, r3
 8006216:	bfa8      	it	ge
 8006218:	461a      	movge	r2, r3
 800621a:	2a00      	cmp	r2, #0
 800621c:	4691      	mov	r9, r2
 800621e:	dc37      	bgt.n	8006290 <_printf_float+0x370>
 8006220:	f04f 0b00 	mov.w	fp, #0
 8006224:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006228:	f104 021a 	add.w	r2, r4, #26
 800622c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800622e:	9305      	str	r3, [sp, #20]
 8006230:	eba3 0309 	sub.w	r3, r3, r9
 8006234:	455b      	cmp	r3, fp
 8006236:	dc33      	bgt.n	80062a0 <_printf_float+0x380>
 8006238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800623c:	429a      	cmp	r2, r3
 800623e:	db3b      	blt.n	80062b8 <_printf_float+0x398>
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	07da      	lsls	r2, r3, #31
 8006244:	d438      	bmi.n	80062b8 <_printf_float+0x398>
 8006246:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800624a:	eba2 0903 	sub.w	r9, r2, r3
 800624e:	9b05      	ldr	r3, [sp, #20]
 8006250:	1ad2      	subs	r2, r2, r3
 8006252:	4591      	cmp	r9, r2
 8006254:	bfa8      	it	ge
 8006256:	4691      	movge	r9, r2
 8006258:	f1b9 0f00 	cmp.w	r9, #0
 800625c:	dc35      	bgt.n	80062ca <_printf_float+0x3aa>
 800625e:	f04f 0800 	mov.w	r8, #0
 8006262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006266:	f104 0a1a 	add.w	sl, r4, #26
 800626a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	eba3 0309 	sub.w	r3, r3, r9
 8006274:	4543      	cmp	r3, r8
 8006276:	f77f af79 	ble.w	800616c <_printf_float+0x24c>
 800627a:	2301      	movs	r3, #1
 800627c:	4652      	mov	r2, sl
 800627e:	4631      	mov	r1, r6
 8006280:	4628      	mov	r0, r5
 8006282:	47b8      	blx	r7
 8006284:	3001      	adds	r0, #1
 8006286:	f43f aeaa 	beq.w	8005fde <_printf_float+0xbe>
 800628a:	f108 0801 	add.w	r8, r8, #1
 800628e:	e7ec      	b.n	800626a <_printf_float+0x34a>
 8006290:	4613      	mov	r3, r2
 8006292:	4631      	mov	r1, r6
 8006294:	4642      	mov	r2, r8
 8006296:	4628      	mov	r0, r5
 8006298:	47b8      	blx	r7
 800629a:	3001      	adds	r0, #1
 800629c:	d1c0      	bne.n	8006220 <_printf_float+0x300>
 800629e:	e69e      	b.n	8005fde <_printf_float+0xbe>
 80062a0:	2301      	movs	r3, #1
 80062a2:	4631      	mov	r1, r6
 80062a4:	4628      	mov	r0, r5
 80062a6:	9205      	str	r2, [sp, #20]
 80062a8:	47b8      	blx	r7
 80062aa:	3001      	adds	r0, #1
 80062ac:	f43f ae97 	beq.w	8005fde <_printf_float+0xbe>
 80062b0:	9a05      	ldr	r2, [sp, #20]
 80062b2:	f10b 0b01 	add.w	fp, fp, #1
 80062b6:	e7b9      	b.n	800622c <_printf_float+0x30c>
 80062b8:	ee18 3a10 	vmov	r3, s16
 80062bc:	4652      	mov	r2, sl
 80062be:	4631      	mov	r1, r6
 80062c0:	4628      	mov	r0, r5
 80062c2:	47b8      	blx	r7
 80062c4:	3001      	adds	r0, #1
 80062c6:	d1be      	bne.n	8006246 <_printf_float+0x326>
 80062c8:	e689      	b.n	8005fde <_printf_float+0xbe>
 80062ca:	9a05      	ldr	r2, [sp, #20]
 80062cc:	464b      	mov	r3, r9
 80062ce:	4442      	add	r2, r8
 80062d0:	4631      	mov	r1, r6
 80062d2:	4628      	mov	r0, r5
 80062d4:	47b8      	blx	r7
 80062d6:	3001      	adds	r0, #1
 80062d8:	d1c1      	bne.n	800625e <_printf_float+0x33e>
 80062da:	e680      	b.n	8005fde <_printf_float+0xbe>
 80062dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062de:	2a01      	cmp	r2, #1
 80062e0:	dc01      	bgt.n	80062e6 <_printf_float+0x3c6>
 80062e2:	07db      	lsls	r3, r3, #31
 80062e4:	d53a      	bpl.n	800635c <_printf_float+0x43c>
 80062e6:	2301      	movs	r3, #1
 80062e8:	4642      	mov	r2, r8
 80062ea:	4631      	mov	r1, r6
 80062ec:	4628      	mov	r0, r5
 80062ee:	47b8      	blx	r7
 80062f0:	3001      	adds	r0, #1
 80062f2:	f43f ae74 	beq.w	8005fde <_printf_float+0xbe>
 80062f6:	ee18 3a10 	vmov	r3, s16
 80062fa:	4652      	mov	r2, sl
 80062fc:	4631      	mov	r1, r6
 80062fe:	4628      	mov	r0, r5
 8006300:	47b8      	blx	r7
 8006302:	3001      	adds	r0, #1
 8006304:	f43f ae6b 	beq.w	8005fde <_printf_float+0xbe>
 8006308:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800630c:	2200      	movs	r2, #0
 800630e:	2300      	movs	r3, #0
 8006310:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006314:	f7fa fbf0 	bl	8000af8 <__aeabi_dcmpeq>
 8006318:	b9d8      	cbnz	r0, 8006352 <_printf_float+0x432>
 800631a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800631e:	f108 0201 	add.w	r2, r8, #1
 8006322:	4631      	mov	r1, r6
 8006324:	4628      	mov	r0, r5
 8006326:	47b8      	blx	r7
 8006328:	3001      	adds	r0, #1
 800632a:	d10e      	bne.n	800634a <_printf_float+0x42a>
 800632c:	e657      	b.n	8005fde <_printf_float+0xbe>
 800632e:	2301      	movs	r3, #1
 8006330:	4652      	mov	r2, sl
 8006332:	4631      	mov	r1, r6
 8006334:	4628      	mov	r0, r5
 8006336:	47b8      	blx	r7
 8006338:	3001      	adds	r0, #1
 800633a:	f43f ae50 	beq.w	8005fde <_printf_float+0xbe>
 800633e:	f108 0801 	add.w	r8, r8, #1
 8006342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006344:	3b01      	subs	r3, #1
 8006346:	4543      	cmp	r3, r8
 8006348:	dcf1      	bgt.n	800632e <_printf_float+0x40e>
 800634a:	464b      	mov	r3, r9
 800634c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006350:	e6da      	b.n	8006108 <_printf_float+0x1e8>
 8006352:	f04f 0800 	mov.w	r8, #0
 8006356:	f104 0a1a 	add.w	sl, r4, #26
 800635a:	e7f2      	b.n	8006342 <_printf_float+0x422>
 800635c:	2301      	movs	r3, #1
 800635e:	4642      	mov	r2, r8
 8006360:	e7df      	b.n	8006322 <_printf_float+0x402>
 8006362:	2301      	movs	r3, #1
 8006364:	464a      	mov	r2, r9
 8006366:	4631      	mov	r1, r6
 8006368:	4628      	mov	r0, r5
 800636a:	47b8      	blx	r7
 800636c:	3001      	adds	r0, #1
 800636e:	f43f ae36 	beq.w	8005fde <_printf_float+0xbe>
 8006372:	f108 0801 	add.w	r8, r8, #1
 8006376:	68e3      	ldr	r3, [r4, #12]
 8006378:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800637a:	1a5b      	subs	r3, r3, r1
 800637c:	4543      	cmp	r3, r8
 800637e:	dcf0      	bgt.n	8006362 <_printf_float+0x442>
 8006380:	e6f8      	b.n	8006174 <_printf_float+0x254>
 8006382:	f04f 0800 	mov.w	r8, #0
 8006386:	f104 0919 	add.w	r9, r4, #25
 800638a:	e7f4      	b.n	8006376 <_printf_float+0x456>

0800638c <_printf_common>:
 800638c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006390:	4616      	mov	r6, r2
 8006392:	4699      	mov	r9, r3
 8006394:	688a      	ldr	r2, [r1, #8]
 8006396:	690b      	ldr	r3, [r1, #16]
 8006398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800639c:	4293      	cmp	r3, r2
 800639e:	bfb8      	it	lt
 80063a0:	4613      	movlt	r3, r2
 80063a2:	6033      	str	r3, [r6, #0]
 80063a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063a8:	4607      	mov	r7, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	b10a      	cbz	r2, 80063b2 <_printf_common+0x26>
 80063ae:	3301      	adds	r3, #1
 80063b0:	6033      	str	r3, [r6, #0]
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	0699      	lsls	r1, r3, #26
 80063b6:	bf42      	ittt	mi
 80063b8:	6833      	ldrmi	r3, [r6, #0]
 80063ba:	3302      	addmi	r3, #2
 80063bc:	6033      	strmi	r3, [r6, #0]
 80063be:	6825      	ldr	r5, [r4, #0]
 80063c0:	f015 0506 	ands.w	r5, r5, #6
 80063c4:	d106      	bne.n	80063d4 <_printf_common+0x48>
 80063c6:	f104 0a19 	add.w	sl, r4, #25
 80063ca:	68e3      	ldr	r3, [r4, #12]
 80063cc:	6832      	ldr	r2, [r6, #0]
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	42ab      	cmp	r3, r5
 80063d2:	dc26      	bgt.n	8006422 <_printf_common+0x96>
 80063d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063d8:	1e13      	subs	r3, r2, #0
 80063da:	6822      	ldr	r2, [r4, #0]
 80063dc:	bf18      	it	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	0692      	lsls	r2, r2, #26
 80063e2:	d42b      	bmi.n	800643c <_printf_common+0xb0>
 80063e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063e8:	4649      	mov	r1, r9
 80063ea:	4638      	mov	r0, r7
 80063ec:	47c0      	blx	r8
 80063ee:	3001      	adds	r0, #1
 80063f0:	d01e      	beq.n	8006430 <_printf_common+0xa4>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	6922      	ldr	r2, [r4, #16]
 80063f6:	f003 0306 	and.w	r3, r3, #6
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	bf02      	ittt	eq
 80063fe:	68e5      	ldreq	r5, [r4, #12]
 8006400:	6833      	ldreq	r3, [r6, #0]
 8006402:	1aed      	subeq	r5, r5, r3
 8006404:	68a3      	ldr	r3, [r4, #8]
 8006406:	bf0c      	ite	eq
 8006408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800640c:	2500      	movne	r5, #0
 800640e:	4293      	cmp	r3, r2
 8006410:	bfc4      	itt	gt
 8006412:	1a9b      	subgt	r3, r3, r2
 8006414:	18ed      	addgt	r5, r5, r3
 8006416:	2600      	movs	r6, #0
 8006418:	341a      	adds	r4, #26
 800641a:	42b5      	cmp	r5, r6
 800641c:	d11a      	bne.n	8006454 <_printf_common+0xc8>
 800641e:	2000      	movs	r0, #0
 8006420:	e008      	b.n	8006434 <_printf_common+0xa8>
 8006422:	2301      	movs	r3, #1
 8006424:	4652      	mov	r2, sl
 8006426:	4649      	mov	r1, r9
 8006428:	4638      	mov	r0, r7
 800642a:	47c0      	blx	r8
 800642c:	3001      	adds	r0, #1
 800642e:	d103      	bne.n	8006438 <_printf_common+0xac>
 8006430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006438:	3501      	adds	r5, #1
 800643a:	e7c6      	b.n	80063ca <_printf_common+0x3e>
 800643c:	18e1      	adds	r1, r4, r3
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	2030      	movs	r0, #48	; 0x30
 8006442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006446:	4422      	add	r2, r4
 8006448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800644c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006450:	3302      	adds	r3, #2
 8006452:	e7c7      	b.n	80063e4 <_printf_common+0x58>
 8006454:	2301      	movs	r3, #1
 8006456:	4622      	mov	r2, r4
 8006458:	4649      	mov	r1, r9
 800645a:	4638      	mov	r0, r7
 800645c:	47c0      	blx	r8
 800645e:	3001      	adds	r0, #1
 8006460:	d0e6      	beq.n	8006430 <_printf_common+0xa4>
 8006462:	3601      	adds	r6, #1
 8006464:	e7d9      	b.n	800641a <_printf_common+0x8e>
	...

08006468 <_printf_i>:
 8006468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800646c:	7e0f      	ldrb	r7, [r1, #24]
 800646e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006470:	2f78      	cmp	r7, #120	; 0x78
 8006472:	4691      	mov	r9, r2
 8006474:	4680      	mov	r8, r0
 8006476:	460c      	mov	r4, r1
 8006478:	469a      	mov	sl, r3
 800647a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800647e:	d807      	bhi.n	8006490 <_printf_i+0x28>
 8006480:	2f62      	cmp	r7, #98	; 0x62
 8006482:	d80a      	bhi.n	800649a <_printf_i+0x32>
 8006484:	2f00      	cmp	r7, #0
 8006486:	f000 80d4 	beq.w	8006632 <_printf_i+0x1ca>
 800648a:	2f58      	cmp	r7, #88	; 0x58
 800648c:	f000 80c0 	beq.w	8006610 <_printf_i+0x1a8>
 8006490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006498:	e03a      	b.n	8006510 <_printf_i+0xa8>
 800649a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800649e:	2b15      	cmp	r3, #21
 80064a0:	d8f6      	bhi.n	8006490 <_printf_i+0x28>
 80064a2:	a101      	add	r1, pc, #4	; (adr r1, 80064a8 <_printf_i+0x40>)
 80064a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064a8:	08006501 	.word	0x08006501
 80064ac:	08006515 	.word	0x08006515
 80064b0:	08006491 	.word	0x08006491
 80064b4:	08006491 	.word	0x08006491
 80064b8:	08006491 	.word	0x08006491
 80064bc:	08006491 	.word	0x08006491
 80064c0:	08006515 	.word	0x08006515
 80064c4:	08006491 	.word	0x08006491
 80064c8:	08006491 	.word	0x08006491
 80064cc:	08006491 	.word	0x08006491
 80064d0:	08006491 	.word	0x08006491
 80064d4:	08006619 	.word	0x08006619
 80064d8:	08006541 	.word	0x08006541
 80064dc:	080065d3 	.word	0x080065d3
 80064e0:	08006491 	.word	0x08006491
 80064e4:	08006491 	.word	0x08006491
 80064e8:	0800663b 	.word	0x0800663b
 80064ec:	08006491 	.word	0x08006491
 80064f0:	08006541 	.word	0x08006541
 80064f4:	08006491 	.word	0x08006491
 80064f8:	08006491 	.word	0x08006491
 80064fc:	080065db 	.word	0x080065db
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	1d1a      	adds	r2, r3, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	602a      	str	r2, [r5, #0]
 8006508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800650c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006510:	2301      	movs	r3, #1
 8006512:	e09f      	b.n	8006654 <_printf_i+0x1ec>
 8006514:	6820      	ldr	r0, [r4, #0]
 8006516:	682b      	ldr	r3, [r5, #0]
 8006518:	0607      	lsls	r7, r0, #24
 800651a:	f103 0104 	add.w	r1, r3, #4
 800651e:	6029      	str	r1, [r5, #0]
 8006520:	d501      	bpl.n	8006526 <_printf_i+0xbe>
 8006522:	681e      	ldr	r6, [r3, #0]
 8006524:	e003      	b.n	800652e <_printf_i+0xc6>
 8006526:	0646      	lsls	r6, r0, #25
 8006528:	d5fb      	bpl.n	8006522 <_printf_i+0xba>
 800652a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800652e:	2e00      	cmp	r6, #0
 8006530:	da03      	bge.n	800653a <_printf_i+0xd2>
 8006532:	232d      	movs	r3, #45	; 0x2d
 8006534:	4276      	negs	r6, r6
 8006536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800653a:	485a      	ldr	r0, [pc, #360]	; (80066a4 <_printf_i+0x23c>)
 800653c:	230a      	movs	r3, #10
 800653e:	e012      	b.n	8006566 <_printf_i+0xfe>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	6820      	ldr	r0, [r4, #0]
 8006544:	1d19      	adds	r1, r3, #4
 8006546:	6029      	str	r1, [r5, #0]
 8006548:	0605      	lsls	r5, r0, #24
 800654a:	d501      	bpl.n	8006550 <_printf_i+0xe8>
 800654c:	681e      	ldr	r6, [r3, #0]
 800654e:	e002      	b.n	8006556 <_printf_i+0xee>
 8006550:	0641      	lsls	r1, r0, #25
 8006552:	d5fb      	bpl.n	800654c <_printf_i+0xe4>
 8006554:	881e      	ldrh	r6, [r3, #0]
 8006556:	4853      	ldr	r0, [pc, #332]	; (80066a4 <_printf_i+0x23c>)
 8006558:	2f6f      	cmp	r7, #111	; 0x6f
 800655a:	bf0c      	ite	eq
 800655c:	2308      	moveq	r3, #8
 800655e:	230a      	movne	r3, #10
 8006560:	2100      	movs	r1, #0
 8006562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006566:	6865      	ldr	r5, [r4, #4]
 8006568:	60a5      	str	r5, [r4, #8]
 800656a:	2d00      	cmp	r5, #0
 800656c:	bfa2      	ittt	ge
 800656e:	6821      	ldrge	r1, [r4, #0]
 8006570:	f021 0104 	bicge.w	r1, r1, #4
 8006574:	6021      	strge	r1, [r4, #0]
 8006576:	b90e      	cbnz	r6, 800657c <_printf_i+0x114>
 8006578:	2d00      	cmp	r5, #0
 800657a:	d04b      	beq.n	8006614 <_printf_i+0x1ac>
 800657c:	4615      	mov	r5, r2
 800657e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006582:	fb03 6711 	mls	r7, r3, r1, r6
 8006586:	5dc7      	ldrb	r7, [r0, r7]
 8006588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800658c:	4637      	mov	r7, r6
 800658e:	42bb      	cmp	r3, r7
 8006590:	460e      	mov	r6, r1
 8006592:	d9f4      	bls.n	800657e <_printf_i+0x116>
 8006594:	2b08      	cmp	r3, #8
 8006596:	d10b      	bne.n	80065b0 <_printf_i+0x148>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	07de      	lsls	r6, r3, #31
 800659c:	d508      	bpl.n	80065b0 <_printf_i+0x148>
 800659e:	6923      	ldr	r3, [r4, #16]
 80065a0:	6861      	ldr	r1, [r4, #4]
 80065a2:	4299      	cmp	r1, r3
 80065a4:	bfde      	ittt	le
 80065a6:	2330      	movle	r3, #48	; 0x30
 80065a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80065b0:	1b52      	subs	r2, r2, r5
 80065b2:	6122      	str	r2, [r4, #16]
 80065b4:	f8cd a000 	str.w	sl, [sp]
 80065b8:	464b      	mov	r3, r9
 80065ba:	aa03      	add	r2, sp, #12
 80065bc:	4621      	mov	r1, r4
 80065be:	4640      	mov	r0, r8
 80065c0:	f7ff fee4 	bl	800638c <_printf_common>
 80065c4:	3001      	adds	r0, #1
 80065c6:	d14a      	bne.n	800665e <_printf_i+0x1f6>
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065cc:	b004      	add	sp, #16
 80065ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f043 0320 	orr.w	r3, r3, #32
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	4833      	ldr	r0, [pc, #204]	; (80066a8 <_printf_i+0x240>)
 80065dc:	2778      	movs	r7, #120	; 0x78
 80065de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	6829      	ldr	r1, [r5, #0]
 80065e6:	061f      	lsls	r7, r3, #24
 80065e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80065ec:	d402      	bmi.n	80065f4 <_printf_i+0x18c>
 80065ee:	065f      	lsls	r7, r3, #25
 80065f0:	bf48      	it	mi
 80065f2:	b2b6      	uxthmi	r6, r6
 80065f4:	07df      	lsls	r7, r3, #31
 80065f6:	bf48      	it	mi
 80065f8:	f043 0320 	orrmi.w	r3, r3, #32
 80065fc:	6029      	str	r1, [r5, #0]
 80065fe:	bf48      	it	mi
 8006600:	6023      	strmi	r3, [r4, #0]
 8006602:	b91e      	cbnz	r6, 800660c <_printf_i+0x1a4>
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	f023 0320 	bic.w	r3, r3, #32
 800660a:	6023      	str	r3, [r4, #0]
 800660c:	2310      	movs	r3, #16
 800660e:	e7a7      	b.n	8006560 <_printf_i+0xf8>
 8006610:	4824      	ldr	r0, [pc, #144]	; (80066a4 <_printf_i+0x23c>)
 8006612:	e7e4      	b.n	80065de <_printf_i+0x176>
 8006614:	4615      	mov	r5, r2
 8006616:	e7bd      	b.n	8006594 <_printf_i+0x12c>
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	6826      	ldr	r6, [r4, #0]
 800661c:	6961      	ldr	r1, [r4, #20]
 800661e:	1d18      	adds	r0, r3, #4
 8006620:	6028      	str	r0, [r5, #0]
 8006622:	0635      	lsls	r5, r6, #24
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	d501      	bpl.n	800662c <_printf_i+0x1c4>
 8006628:	6019      	str	r1, [r3, #0]
 800662a:	e002      	b.n	8006632 <_printf_i+0x1ca>
 800662c:	0670      	lsls	r0, r6, #25
 800662e:	d5fb      	bpl.n	8006628 <_printf_i+0x1c0>
 8006630:	8019      	strh	r1, [r3, #0]
 8006632:	2300      	movs	r3, #0
 8006634:	6123      	str	r3, [r4, #16]
 8006636:	4615      	mov	r5, r2
 8006638:	e7bc      	b.n	80065b4 <_printf_i+0x14c>
 800663a:	682b      	ldr	r3, [r5, #0]
 800663c:	1d1a      	adds	r2, r3, #4
 800663e:	602a      	str	r2, [r5, #0]
 8006640:	681d      	ldr	r5, [r3, #0]
 8006642:	6862      	ldr	r2, [r4, #4]
 8006644:	2100      	movs	r1, #0
 8006646:	4628      	mov	r0, r5
 8006648:	f7f9 fdda 	bl	8000200 <memchr>
 800664c:	b108      	cbz	r0, 8006652 <_printf_i+0x1ea>
 800664e:	1b40      	subs	r0, r0, r5
 8006650:	6060      	str	r0, [r4, #4]
 8006652:	6863      	ldr	r3, [r4, #4]
 8006654:	6123      	str	r3, [r4, #16]
 8006656:	2300      	movs	r3, #0
 8006658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800665c:	e7aa      	b.n	80065b4 <_printf_i+0x14c>
 800665e:	6923      	ldr	r3, [r4, #16]
 8006660:	462a      	mov	r2, r5
 8006662:	4649      	mov	r1, r9
 8006664:	4640      	mov	r0, r8
 8006666:	47d0      	blx	sl
 8006668:	3001      	adds	r0, #1
 800666a:	d0ad      	beq.n	80065c8 <_printf_i+0x160>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	079b      	lsls	r3, r3, #30
 8006670:	d413      	bmi.n	800669a <_printf_i+0x232>
 8006672:	68e0      	ldr	r0, [r4, #12]
 8006674:	9b03      	ldr	r3, [sp, #12]
 8006676:	4298      	cmp	r0, r3
 8006678:	bfb8      	it	lt
 800667a:	4618      	movlt	r0, r3
 800667c:	e7a6      	b.n	80065cc <_printf_i+0x164>
 800667e:	2301      	movs	r3, #1
 8006680:	4632      	mov	r2, r6
 8006682:	4649      	mov	r1, r9
 8006684:	4640      	mov	r0, r8
 8006686:	47d0      	blx	sl
 8006688:	3001      	adds	r0, #1
 800668a:	d09d      	beq.n	80065c8 <_printf_i+0x160>
 800668c:	3501      	adds	r5, #1
 800668e:	68e3      	ldr	r3, [r4, #12]
 8006690:	9903      	ldr	r1, [sp, #12]
 8006692:	1a5b      	subs	r3, r3, r1
 8006694:	42ab      	cmp	r3, r5
 8006696:	dcf2      	bgt.n	800667e <_printf_i+0x216>
 8006698:	e7eb      	b.n	8006672 <_printf_i+0x20a>
 800669a:	2500      	movs	r5, #0
 800669c:	f104 0619 	add.w	r6, r4, #25
 80066a0:	e7f5      	b.n	800668e <_printf_i+0x226>
 80066a2:	bf00      	nop
 80066a4:	080088ea 	.word	0x080088ea
 80066a8:	080088fb 	.word	0x080088fb

080066ac <std>:
 80066ac:	2300      	movs	r3, #0
 80066ae:	b510      	push	{r4, lr}
 80066b0:	4604      	mov	r4, r0
 80066b2:	e9c0 3300 	strd	r3, r3, [r0]
 80066b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066ba:	6083      	str	r3, [r0, #8]
 80066bc:	8181      	strh	r1, [r0, #12]
 80066be:	6643      	str	r3, [r0, #100]	; 0x64
 80066c0:	81c2      	strh	r2, [r0, #14]
 80066c2:	6183      	str	r3, [r0, #24]
 80066c4:	4619      	mov	r1, r3
 80066c6:	2208      	movs	r2, #8
 80066c8:	305c      	adds	r0, #92	; 0x5c
 80066ca:	f000 f90d 	bl	80068e8 <memset>
 80066ce:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <std+0x38>)
 80066d0:	6263      	str	r3, [r4, #36]	; 0x24
 80066d2:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <std+0x3c>)
 80066d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80066d6:	4b05      	ldr	r3, [pc, #20]	; (80066ec <std+0x40>)
 80066d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066da:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <std+0x44>)
 80066dc:	6224      	str	r4, [r4, #32]
 80066de:	6323      	str	r3, [r4, #48]	; 0x30
 80066e0:	bd10      	pop	{r4, pc}
 80066e2:	bf00      	nop
 80066e4:	08008291 	.word	0x08008291
 80066e8:	080082b3 	.word	0x080082b3
 80066ec:	080082eb 	.word	0x080082eb
 80066f0:	0800830f 	.word	0x0800830f

080066f4 <stdio_exit_handler>:
 80066f4:	4a02      	ldr	r2, [pc, #8]	; (8006700 <stdio_exit_handler+0xc>)
 80066f6:	4903      	ldr	r1, [pc, #12]	; (8006704 <stdio_exit_handler+0x10>)
 80066f8:	4803      	ldr	r0, [pc, #12]	; (8006708 <stdio_exit_handler+0x14>)
 80066fa:	f000 b869 	b.w	80067d0 <_fwalk_sglue>
 80066fe:	bf00      	nop
 8006700:	20000010 	.word	0x20000010
 8006704:	08007b31 	.word	0x08007b31
 8006708:	2000001c 	.word	0x2000001c

0800670c <cleanup_stdio>:
 800670c:	6841      	ldr	r1, [r0, #4]
 800670e:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <cleanup_stdio+0x34>)
 8006710:	4299      	cmp	r1, r3
 8006712:	b510      	push	{r4, lr}
 8006714:	4604      	mov	r4, r0
 8006716:	d001      	beq.n	800671c <cleanup_stdio+0x10>
 8006718:	f001 fa0a 	bl	8007b30 <_fflush_r>
 800671c:	68a1      	ldr	r1, [r4, #8]
 800671e:	4b09      	ldr	r3, [pc, #36]	; (8006744 <cleanup_stdio+0x38>)
 8006720:	4299      	cmp	r1, r3
 8006722:	d002      	beq.n	800672a <cleanup_stdio+0x1e>
 8006724:	4620      	mov	r0, r4
 8006726:	f001 fa03 	bl	8007b30 <_fflush_r>
 800672a:	68e1      	ldr	r1, [r4, #12]
 800672c:	4b06      	ldr	r3, [pc, #24]	; (8006748 <cleanup_stdio+0x3c>)
 800672e:	4299      	cmp	r1, r3
 8006730:	d004      	beq.n	800673c <cleanup_stdio+0x30>
 8006732:	4620      	mov	r0, r4
 8006734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006738:	f001 b9fa 	b.w	8007b30 <_fflush_r>
 800673c:	bd10      	pop	{r4, pc}
 800673e:	bf00      	nop
 8006740:	200003ec 	.word	0x200003ec
 8006744:	20000454 	.word	0x20000454
 8006748:	200004bc 	.word	0x200004bc

0800674c <global_stdio_init.part.0>:
 800674c:	b510      	push	{r4, lr}
 800674e:	4b0b      	ldr	r3, [pc, #44]	; (800677c <global_stdio_init.part.0+0x30>)
 8006750:	4c0b      	ldr	r4, [pc, #44]	; (8006780 <global_stdio_init.part.0+0x34>)
 8006752:	4a0c      	ldr	r2, [pc, #48]	; (8006784 <global_stdio_init.part.0+0x38>)
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	4620      	mov	r0, r4
 8006758:	2200      	movs	r2, #0
 800675a:	2104      	movs	r1, #4
 800675c:	f7ff ffa6 	bl	80066ac <std>
 8006760:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006764:	2201      	movs	r2, #1
 8006766:	2109      	movs	r1, #9
 8006768:	f7ff ffa0 	bl	80066ac <std>
 800676c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006770:	2202      	movs	r2, #2
 8006772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006776:	2112      	movs	r1, #18
 8006778:	f7ff bf98 	b.w	80066ac <std>
 800677c:	20000524 	.word	0x20000524
 8006780:	200003ec 	.word	0x200003ec
 8006784:	080066f5 	.word	0x080066f5

08006788 <__sfp_lock_acquire>:
 8006788:	4801      	ldr	r0, [pc, #4]	; (8006790 <__sfp_lock_acquire+0x8>)
 800678a:	f000 b8e3 	b.w	8006954 <__retarget_lock_acquire_recursive>
 800678e:	bf00      	nop
 8006790:	20000529 	.word	0x20000529

08006794 <__sfp_lock_release>:
 8006794:	4801      	ldr	r0, [pc, #4]	; (800679c <__sfp_lock_release+0x8>)
 8006796:	f000 b8de 	b.w	8006956 <__retarget_lock_release_recursive>
 800679a:	bf00      	nop
 800679c:	20000529 	.word	0x20000529

080067a0 <__sinit>:
 80067a0:	b510      	push	{r4, lr}
 80067a2:	4604      	mov	r4, r0
 80067a4:	f7ff fff0 	bl	8006788 <__sfp_lock_acquire>
 80067a8:	6a23      	ldr	r3, [r4, #32]
 80067aa:	b11b      	cbz	r3, 80067b4 <__sinit+0x14>
 80067ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067b0:	f7ff bff0 	b.w	8006794 <__sfp_lock_release>
 80067b4:	4b04      	ldr	r3, [pc, #16]	; (80067c8 <__sinit+0x28>)
 80067b6:	6223      	str	r3, [r4, #32]
 80067b8:	4b04      	ldr	r3, [pc, #16]	; (80067cc <__sinit+0x2c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1f5      	bne.n	80067ac <__sinit+0xc>
 80067c0:	f7ff ffc4 	bl	800674c <global_stdio_init.part.0>
 80067c4:	e7f2      	b.n	80067ac <__sinit+0xc>
 80067c6:	bf00      	nop
 80067c8:	0800670d 	.word	0x0800670d
 80067cc:	20000524 	.word	0x20000524

080067d0 <_fwalk_sglue>:
 80067d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067d4:	4607      	mov	r7, r0
 80067d6:	4688      	mov	r8, r1
 80067d8:	4614      	mov	r4, r2
 80067da:	2600      	movs	r6, #0
 80067dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067e0:	f1b9 0901 	subs.w	r9, r9, #1
 80067e4:	d505      	bpl.n	80067f2 <_fwalk_sglue+0x22>
 80067e6:	6824      	ldr	r4, [r4, #0]
 80067e8:	2c00      	cmp	r4, #0
 80067ea:	d1f7      	bne.n	80067dc <_fwalk_sglue+0xc>
 80067ec:	4630      	mov	r0, r6
 80067ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067f2:	89ab      	ldrh	r3, [r5, #12]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d907      	bls.n	8006808 <_fwalk_sglue+0x38>
 80067f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067fc:	3301      	adds	r3, #1
 80067fe:	d003      	beq.n	8006808 <_fwalk_sglue+0x38>
 8006800:	4629      	mov	r1, r5
 8006802:	4638      	mov	r0, r7
 8006804:	47c0      	blx	r8
 8006806:	4306      	orrs	r6, r0
 8006808:	3568      	adds	r5, #104	; 0x68
 800680a:	e7e9      	b.n	80067e0 <_fwalk_sglue+0x10>

0800680c <iprintf>:
 800680c:	b40f      	push	{r0, r1, r2, r3}
 800680e:	b507      	push	{r0, r1, r2, lr}
 8006810:	4906      	ldr	r1, [pc, #24]	; (800682c <iprintf+0x20>)
 8006812:	ab04      	add	r3, sp, #16
 8006814:	6808      	ldr	r0, [r1, #0]
 8006816:	f853 2b04 	ldr.w	r2, [r3], #4
 800681a:	6881      	ldr	r1, [r0, #8]
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	f000 ff3f 	bl	80076a0 <_vfiprintf_r>
 8006822:	b003      	add	sp, #12
 8006824:	f85d eb04 	ldr.w	lr, [sp], #4
 8006828:	b004      	add	sp, #16
 800682a:	4770      	bx	lr
 800682c:	20000068 	.word	0x20000068

08006830 <_puts_r>:
 8006830:	6a03      	ldr	r3, [r0, #32]
 8006832:	b570      	push	{r4, r5, r6, lr}
 8006834:	6884      	ldr	r4, [r0, #8]
 8006836:	4605      	mov	r5, r0
 8006838:	460e      	mov	r6, r1
 800683a:	b90b      	cbnz	r3, 8006840 <_puts_r+0x10>
 800683c:	f7ff ffb0 	bl	80067a0 <__sinit>
 8006840:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006842:	07db      	lsls	r3, r3, #31
 8006844:	d405      	bmi.n	8006852 <_puts_r+0x22>
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	0598      	lsls	r0, r3, #22
 800684a:	d402      	bmi.n	8006852 <_puts_r+0x22>
 800684c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800684e:	f000 f881 	bl	8006954 <__retarget_lock_acquire_recursive>
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	0719      	lsls	r1, r3, #28
 8006856:	d513      	bpl.n	8006880 <_puts_r+0x50>
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	b18b      	cbz	r3, 8006880 <_puts_r+0x50>
 800685c:	3e01      	subs	r6, #1
 800685e:	68a3      	ldr	r3, [r4, #8]
 8006860:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006864:	3b01      	subs	r3, #1
 8006866:	60a3      	str	r3, [r4, #8]
 8006868:	b9e9      	cbnz	r1, 80068a6 <_puts_r+0x76>
 800686a:	2b00      	cmp	r3, #0
 800686c:	da2e      	bge.n	80068cc <_puts_r+0x9c>
 800686e:	4622      	mov	r2, r4
 8006870:	210a      	movs	r1, #10
 8006872:	4628      	mov	r0, r5
 8006874:	f001 fd4f 	bl	8008316 <__swbuf_r>
 8006878:	3001      	adds	r0, #1
 800687a:	d007      	beq.n	800688c <_puts_r+0x5c>
 800687c:	250a      	movs	r5, #10
 800687e:	e007      	b.n	8006890 <_puts_r+0x60>
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	f001 fd84 	bl	8008390 <__swsetup_r>
 8006888:	2800      	cmp	r0, #0
 800688a:	d0e7      	beq.n	800685c <_puts_r+0x2c>
 800688c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006892:	07da      	lsls	r2, r3, #31
 8006894:	d405      	bmi.n	80068a2 <_puts_r+0x72>
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	059b      	lsls	r3, r3, #22
 800689a:	d402      	bmi.n	80068a2 <_puts_r+0x72>
 800689c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800689e:	f000 f85a 	bl	8006956 <__retarget_lock_release_recursive>
 80068a2:	4628      	mov	r0, r5
 80068a4:	bd70      	pop	{r4, r5, r6, pc}
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	da04      	bge.n	80068b4 <_puts_r+0x84>
 80068aa:	69a2      	ldr	r2, [r4, #24]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	dc06      	bgt.n	80068be <_puts_r+0x8e>
 80068b0:	290a      	cmp	r1, #10
 80068b2:	d004      	beq.n	80068be <_puts_r+0x8e>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	6022      	str	r2, [r4, #0]
 80068ba:	7019      	strb	r1, [r3, #0]
 80068bc:	e7cf      	b.n	800685e <_puts_r+0x2e>
 80068be:	4622      	mov	r2, r4
 80068c0:	4628      	mov	r0, r5
 80068c2:	f001 fd28 	bl	8008316 <__swbuf_r>
 80068c6:	3001      	adds	r0, #1
 80068c8:	d1c9      	bne.n	800685e <_puts_r+0x2e>
 80068ca:	e7df      	b.n	800688c <_puts_r+0x5c>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	250a      	movs	r5, #10
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	6022      	str	r2, [r4, #0]
 80068d4:	701d      	strb	r5, [r3, #0]
 80068d6:	e7db      	b.n	8006890 <_puts_r+0x60>

080068d8 <puts>:
 80068d8:	4b02      	ldr	r3, [pc, #8]	; (80068e4 <puts+0xc>)
 80068da:	4601      	mov	r1, r0
 80068dc:	6818      	ldr	r0, [r3, #0]
 80068de:	f7ff bfa7 	b.w	8006830 <_puts_r>
 80068e2:	bf00      	nop
 80068e4:	20000068 	.word	0x20000068

080068e8 <memset>:
 80068e8:	4402      	add	r2, r0
 80068ea:	4603      	mov	r3, r0
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d100      	bne.n	80068f2 <memset+0xa>
 80068f0:	4770      	bx	lr
 80068f2:	f803 1b01 	strb.w	r1, [r3], #1
 80068f6:	e7f9      	b.n	80068ec <memset+0x4>

080068f8 <_localeconv_r>:
 80068f8:	4800      	ldr	r0, [pc, #0]	; (80068fc <_localeconv_r+0x4>)
 80068fa:	4770      	bx	lr
 80068fc:	2000015c 	.word	0x2000015c

08006900 <__errno>:
 8006900:	4b01      	ldr	r3, [pc, #4]	; (8006908 <__errno+0x8>)
 8006902:	6818      	ldr	r0, [r3, #0]
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	20000068 	.word	0x20000068

0800690c <__libc_init_array>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	4d0d      	ldr	r5, [pc, #52]	; (8006944 <__libc_init_array+0x38>)
 8006910:	4c0d      	ldr	r4, [pc, #52]	; (8006948 <__libc_init_array+0x3c>)
 8006912:	1b64      	subs	r4, r4, r5
 8006914:	10a4      	asrs	r4, r4, #2
 8006916:	2600      	movs	r6, #0
 8006918:	42a6      	cmp	r6, r4
 800691a:	d109      	bne.n	8006930 <__libc_init_array+0x24>
 800691c:	4d0b      	ldr	r5, [pc, #44]	; (800694c <__libc_init_array+0x40>)
 800691e:	4c0c      	ldr	r4, [pc, #48]	; (8006950 <__libc_init_array+0x44>)
 8006920:	f001 ff72 	bl	8008808 <_init>
 8006924:	1b64      	subs	r4, r4, r5
 8006926:	10a4      	asrs	r4, r4, #2
 8006928:	2600      	movs	r6, #0
 800692a:	42a6      	cmp	r6, r4
 800692c:	d105      	bne.n	800693a <__libc_init_array+0x2e>
 800692e:	bd70      	pop	{r4, r5, r6, pc}
 8006930:	f855 3b04 	ldr.w	r3, [r5], #4
 8006934:	4798      	blx	r3
 8006936:	3601      	adds	r6, #1
 8006938:	e7ee      	b.n	8006918 <__libc_init_array+0xc>
 800693a:	f855 3b04 	ldr.w	r3, [r5], #4
 800693e:	4798      	blx	r3
 8006940:	3601      	adds	r6, #1
 8006942:	e7f2      	b.n	800692a <__libc_init_array+0x1e>
 8006944:	08008c54 	.word	0x08008c54
 8006948:	08008c54 	.word	0x08008c54
 800694c:	08008c54 	.word	0x08008c54
 8006950:	08008c58 	.word	0x08008c58

08006954 <__retarget_lock_acquire_recursive>:
 8006954:	4770      	bx	lr

08006956 <__retarget_lock_release_recursive>:
 8006956:	4770      	bx	lr

08006958 <quorem>:
 8006958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695c:	6903      	ldr	r3, [r0, #16]
 800695e:	690c      	ldr	r4, [r1, #16]
 8006960:	42a3      	cmp	r3, r4
 8006962:	4607      	mov	r7, r0
 8006964:	db7e      	blt.n	8006a64 <quorem+0x10c>
 8006966:	3c01      	subs	r4, #1
 8006968:	f101 0814 	add.w	r8, r1, #20
 800696c:	f100 0514 	add.w	r5, r0, #20
 8006970:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800697a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800697e:	3301      	adds	r3, #1
 8006980:	429a      	cmp	r2, r3
 8006982:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006986:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800698a:	fbb2 f6f3 	udiv	r6, r2, r3
 800698e:	d331      	bcc.n	80069f4 <quorem+0x9c>
 8006990:	f04f 0e00 	mov.w	lr, #0
 8006994:	4640      	mov	r0, r8
 8006996:	46ac      	mov	ip, r5
 8006998:	46f2      	mov	sl, lr
 800699a:	f850 2b04 	ldr.w	r2, [r0], #4
 800699e:	b293      	uxth	r3, r2
 80069a0:	fb06 e303 	mla	r3, r6, r3, lr
 80069a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80069a8:	0c1a      	lsrs	r2, r3, #16
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	ebaa 0303 	sub.w	r3, sl, r3
 80069b0:	f8dc a000 	ldr.w	sl, [ip]
 80069b4:	fa13 f38a 	uxtah	r3, r3, sl
 80069b8:	fb06 220e 	mla	r2, r6, lr, r2
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	9b00      	ldr	r3, [sp, #0]
 80069c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80069c4:	b292      	uxth	r2, r2
 80069c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80069ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80069d2:	4581      	cmp	r9, r0
 80069d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069d8:	f84c 3b04 	str.w	r3, [ip], #4
 80069dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80069e0:	d2db      	bcs.n	800699a <quorem+0x42>
 80069e2:	f855 300b 	ldr.w	r3, [r5, fp]
 80069e6:	b92b      	cbnz	r3, 80069f4 <quorem+0x9c>
 80069e8:	9b01      	ldr	r3, [sp, #4]
 80069ea:	3b04      	subs	r3, #4
 80069ec:	429d      	cmp	r5, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	d32c      	bcc.n	8006a4c <quorem+0xf4>
 80069f2:	613c      	str	r4, [r7, #16]
 80069f4:	4638      	mov	r0, r7
 80069f6:	f001 fb4b 	bl	8008090 <__mcmp>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	db22      	blt.n	8006a44 <quorem+0xec>
 80069fe:	3601      	adds	r6, #1
 8006a00:	4629      	mov	r1, r5
 8006a02:	2000      	movs	r0, #0
 8006a04:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a08:	f8d1 c000 	ldr.w	ip, [r1]
 8006a0c:	b293      	uxth	r3, r2
 8006a0e:	1ac3      	subs	r3, r0, r3
 8006a10:	0c12      	lsrs	r2, r2, #16
 8006a12:	fa13 f38c 	uxtah	r3, r3, ip
 8006a16:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006a1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a24:	45c1      	cmp	r9, r8
 8006a26:	f841 3b04 	str.w	r3, [r1], #4
 8006a2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a2e:	d2e9      	bcs.n	8006a04 <quorem+0xac>
 8006a30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a38:	b922      	cbnz	r2, 8006a44 <quorem+0xec>
 8006a3a:	3b04      	subs	r3, #4
 8006a3c:	429d      	cmp	r5, r3
 8006a3e:	461a      	mov	r2, r3
 8006a40:	d30a      	bcc.n	8006a58 <quorem+0x100>
 8006a42:	613c      	str	r4, [r7, #16]
 8006a44:	4630      	mov	r0, r6
 8006a46:	b003      	add	sp, #12
 8006a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4c:	6812      	ldr	r2, [r2, #0]
 8006a4e:	3b04      	subs	r3, #4
 8006a50:	2a00      	cmp	r2, #0
 8006a52:	d1ce      	bne.n	80069f2 <quorem+0x9a>
 8006a54:	3c01      	subs	r4, #1
 8006a56:	e7c9      	b.n	80069ec <quorem+0x94>
 8006a58:	6812      	ldr	r2, [r2, #0]
 8006a5a:	3b04      	subs	r3, #4
 8006a5c:	2a00      	cmp	r2, #0
 8006a5e:	d1f0      	bne.n	8006a42 <quorem+0xea>
 8006a60:	3c01      	subs	r4, #1
 8006a62:	e7eb      	b.n	8006a3c <quorem+0xe4>
 8006a64:	2000      	movs	r0, #0
 8006a66:	e7ee      	b.n	8006a46 <quorem+0xee>

08006a68 <_dtoa_r>:
 8006a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	ed2d 8b04 	vpush	{d8-d9}
 8006a70:	69c5      	ldr	r5, [r0, #28]
 8006a72:	b093      	sub	sp, #76	; 0x4c
 8006a74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a78:	ec57 6b10 	vmov	r6, r7, d0
 8006a7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a80:	9107      	str	r1, [sp, #28]
 8006a82:	4604      	mov	r4, r0
 8006a84:	920a      	str	r2, [sp, #40]	; 0x28
 8006a86:	930d      	str	r3, [sp, #52]	; 0x34
 8006a88:	b975      	cbnz	r5, 8006aa8 <_dtoa_r+0x40>
 8006a8a:	2010      	movs	r0, #16
 8006a8c:	f000 ff22 	bl	80078d4 <malloc>
 8006a90:	4602      	mov	r2, r0
 8006a92:	61e0      	str	r0, [r4, #28]
 8006a94:	b920      	cbnz	r0, 8006aa0 <_dtoa_r+0x38>
 8006a96:	4bae      	ldr	r3, [pc, #696]	; (8006d50 <_dtoa_r+0x2e8>)
 8006a98:	21ef      	movs	r1, #239	; 0xef
 8006a9a:	48ae      	ldr	r0, [pc, #696]	; (8006d54 <_dtoa_r+0x2ec>)
 8006a9c:	f001 fdb8 	bl	8008610 <__assert_func>
 8006aa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006aa4:	6005      	str	r5, [r0, #0]
 8006aa6:	60c5      	str	r5, [r0, #12]
 8006aa8:	69e3      	ldr	r3, [r4, #28]
 8006aaa:	6819      	ldr	r1, [r3, #0]
 8006aac:	b151      	cbz	r1, 8006ac4 <_dtoa_r+0x5c>
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	604a      	str	r2, [r1, #4]
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	4093      	lsls	r3, r2
 8006ab6:	608b      	str	r3, [r1, #8]
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f001 f8ad 	bl	8007c18 <_Bfree>
 8006abe:	69e3      	ldr	r3, [r4, #28]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	1e3b      	subs	r3, r7, #0
 8006ac6:	bfbb      	ittet	lt
 8006ac8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006acc:	9303      	strlt	r3, [sp, #12]
 8006ace:	2300      	movge	r3, #0
 8006ad0:	2201      	movlt	r2, #1
 8006ad2:	bfac      	ite	ge
 8006ad4:	f8c8 3000 	strge.w	r3, [r8]
 8006ad8:	f8c8 2000 	strlt.w	r2, [r8]
 8006adc:	4b9e      	ldr	r3, [pc, #632]	; (8006d58 <_dtoa_r+0x2f0>)
 8006ade:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006ae2:	ea33 0308 	bics.w	r3, r3, r8
 8006ae6:	d11b      	bne.n	8006b20 <_dtoa_r+0xb8>
 8006ae8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006aea:	f242 730f 	movw	r3, #9999	; 0x270f
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006af4:	4333      	orrs	r3, r6
 8006af6:	f000 8593 	beq.w	8007620 <_dtoa_r+0xbb8>
 8006afa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006afc:	b963      	cbnz	r3, 8006b18 <_dtoa_r+0xb0>
 8006afe:	4b97      	ldr	r3, [pc, #604]	; (8006d5c <_dtoa_r+0x2f4>)
 8006b00:	e027      	b.n	8006b52 <_dtoa_r+0xea>
 8006b02:	4b97      	ldr	r3, [pc, #604]	; (8006d60 <_dtoa_r+0x2f8>)
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	3308      	adds	r3, #8
 8006b08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	9800      	ldr	r0, [sp, #0]
 8006b0e:	b013      	add	sp, #76	; 0x4c
 8006b10:	ecbd 8b04 	vpop	{d8-d9}
 8006b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b18:	4b90      	ldr	r3, [pc, #576]	; (8006d5c <_dtoa_r+0x2f4>)
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	3303      	adds	r3, #3
 8006b1e:	e7f3      	b.n	8006b08 <_dtoa_r+0xa0>
 8006b20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b24:	2200      	movs	r2, #0
 8006b26:	ec51 0b17 	vmov	r0, r1, d7
 8006b2a:	eeb0 8a47 	vmov.f32	s16, s14
 8006b2e:	eef0 8a67 	vmov.f32	s17, s15
 8006b32:	2300      	movs	r3, #0
 8006b34:	f7f9 ffe0 	bl	8000af8 <__aeabi_dcmpeq>
 8006b38:	4681      	mov	r9, r0
 8006b3a:	b160      	cbz	r0, 8006b56 <_dtoa_r+0xee>
 8006b3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b3e:	2301      	movs	r3, #1
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8568 	beq.w	800761a <_dtoa_r+0xbb2>
 8006b4a:	4b86      	ldr	r3, [pc, #536]	; (8006d64 <_dtoa_r+0x2fc>)
 8006b4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	3b01      	subs	r3, #1
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	e7da      	b.n	8006b0c <_dtoa_r+0xa4>
 8006b56:	aa10      	add	r2, sp, #64	; 0x40
 8006b58:	a911      	add	r1, sp, #68	; 0x44
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	eeb0 0a48 	vmov.f32	s0, s16
 8006b60:	eef0 0a68 	vmov.f32	s1, s17
 8006b64:	f001 fb3a 	bl	80081dc <__d2b>
 8006b68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b6c:	4682      	mov	sl, r0
 8006b6e:	2d00      	cmp	r5, #0
 8006b70:	d07f      	beq.n	8006c72 <_dtoa_r+0x20a>
 8006b72:	ee18 3a90 	vmov	r3, s17
 8006b76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006b7e:	ec51 0b18 	vmov	r0, r1, d8
 8006b82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006b8e:	4619      	mov	r1, r3
 8006b90:	2200      	movs	r2, #0
 8006b92:	4b75      	ldr	r3, [pc, #468]	; (8006d68 <_dtoa_r+0x300>)
 8006b94:	f7f9 fb90 	bl	80002b8 <__aeabi_dsub>
 8006b98:	a367      	add	r3, pc, #412	; (adr r3, 8006d38 <_dtoa_r+0x2d0>)
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	f7f9 fd43 	bl	8000628 <__aeabi_dmul>
 8006ba2:	a367      	add	r3, pc, #412	; (adr r3, 8006d40 <_dtoa_r+0x2d8>)
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	f7f9 fb88 	bl	80002bc <__adddf3>
 8006bac:	4606      	mov	r6, r0
 8006bae:	4628      	mov	r0, r5
 8006bb0:	460f      	mov	r7, r1
 8006bb2:	f7f9 fccf 	bl	8000554 <__aeabi_i2d>
 8006bb6:	a364      	add	r3, pc, #400	; (adr r3, 8006d48 <_dtoa_r+0x2e0>)
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f7f9 fd34 	bl	8000628 <__aeabi_dmul>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	4639      	mov	r1, r7
 8006bc8:	f7f9 fb78 	bl	80002bc <__adddf3>
 8006bcc:	4606      	mov	r6, r0
 8006bce:	460f      	mov	r7, r1
 8006bd0:	f7f9 ffda 	bl	8000b88 <__aeabi_d2iz>
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4683      	mov	fp, r0
 8006bd8:	2300      	movs	r3, #0
 8006bda:	4630      	mov	r0, r6
 8006bdc:	4639      	mov	r1, r7
 8006bde:	f7f9 ff95 	bl	8000b0c <__aeabi_dcmplt>
 8006be2:	b148      	cbz	r0, 8006bf8 <_dtoa_r+0x190>
 8006be4:	4658      	mov	r0, fp
 8006be6:	f7f9 fcb5 	bl	8000554 <__aeabi_i2d>
 8006bea:	4632      	mov	r2, r6
 8006bec:	463b      	mov	r3, r7
 8006bee:	f7f9 ff83 	bl	8000af8 <__aeabi_dcmpeq>
 8006bf2:	b908      	cbnz	r0, 8006bf8 <_dtoa_r+0x190>
 8006bf4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006bf8:	f1bb 0f16 	cmp.w	fp, #22
 8006bfc:	d857      	bhi.n	8006cae <_dtoa_r+0x246>
 8006bfe:	4b5b      	ldr	r3, [pc, #364]	; (8006d6c <_dtoa_r+0x304>)
 8006c00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	ec51 0b18 	vmov	r0, r1, d8
 8006c0c:	f7f9 ff7e 	bl	8000b0c <__aeabi_dcmplt>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d04e      	beq.n	8006cb2 <_dtoa_r+0x24a>
 8006c14:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006c18:	2300      	movs	r3, #0
 8006c1a:	930c      	str	r3, [sp, #48]	; 0x30
 8006c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c1e:	1b5b      	subs	r3, r3, r5
 8006c20:	1e5a      	subs	r2, r3, #1
 8006c22:	bf45      	ittet	mi
 8006c24:	f1c3 0301 	rsbmi	r3, r3, #1
 8006c28:	9305      	strmi	r3, [sp, #20]
 8006c2a:	2300      	movpl	r3, #0
 8006c2c:	2300      	movmi	r3, #0
 8006c2e:	9206      	str	r2, [sp, #24]
 8006c30:	bf54      	ite	pl
 8006c32:	9305      	strpl	r3, [sp, #20]
 8006c34:	9306      	strmi	r3, [sp, #24]
 8006c36:	f1bb 0f00 	cmp.w	fp, #0
 8006c3a:	db3c      	blt.n	8006cb6 <_dtoa_r+0x24e>
 8006c3c:	9b06      	ldr	r3, [sp, #24]
 8006c3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006c42:	445b      	add	r3, fp
 8006c44:	9306      	str	r3, [sp, #24]
 8006c46:	2300      	movs	r3, #0
 8006c48:	9308      	str	r3, [sp, #32]
 8006c4a:	9b07      	ldr	r3, [sp, #28]
 8006c4c:	2b09      	cmp	r3, #9
 8006c4e:	d868      	bhi.n	8006d22 <_dtoa_r+0x2ba>
 8006c50:	2b05      	cmp	r3, #5
 8006c52:	bfc4      	itt	gt
 8006c54:	3b04      	subgt	r3, #4
 8006c56:	9307      	strgt	r3, [sp, #28]
 8006c58:	9b07      	ldr	r3, [sp, #28]
 8006c5a:	f1a3 0302 	sub.w	r3, r3, #2
 8006c5e:	bfcc      	ite	gt
 8006c60:	2500      	movgt	r5, #0
 8006c62:	2501      	movle	r5, #1
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	f200 8085 	bhi.w	8006d74 <_dtoa_r+0x30c>
 8006c6a:	e8df f003 	tbb	[pc, r3]
 8006c6e:	3b2e      	.short	0x3b2e
 8006c70:	5839      	.short	0x5839
 8006c72:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c76:	441d      	add	r5, r3
 8006c78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c7c:	2b20      	cmp	r3, #32
 8006c7e:	bfc1      	itttt	gt
 8006c80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c84:	fa08 f803 	lslgt.w	r8, r8, r3
 8006c88:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006c8c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006c90:	bfd6      	itet	le
 8006c92:	f1c3 0320 	rsble	r3, r3, #32
 8006c96:	ea48 0003 	orrgt.w	r0, r8, r3
 8006c9a:	fa06 f003 	lslle.w	r0, r6, r3
 8006c9e:	f7f9 fc49 	bl	8000534 <__aeabi_ui2d>
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006ca8:	3d01      	subs	r5, #1
 8006caa:	920e      	str	r2, [sp, #56]	; 0x38
 8006cac:	e76f      	b.n	8006b8e <_dtoa_r+0x126>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e7b3      	b.n	8006c1a <_dtoa_r+0x1b2>
 8006cb2:	900c      	str	r0, [sp, #48]	; 0x30
 8006cb4:	e7b2      	b.n	8006c1c <_dtoa_r+0x1b4>
 8006cb6:	9b05      	ldr	r3, [sp, #20]
 8006cb8:	eba3 030b 	sub.w	r3, r3, fp
 8006cbc:	9305      	str	r3, [sp, #20]
 8006cbe:	f1cb 0300 	rsb	r3, fp, #0
 8006cc2:	9308      	str	r3, [sp, #32]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cc8:	e7bf      	b.n	8006c4a <_dtoa_r+0x1e2>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8006cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	dc52      	bgt.n	8006d7a <_dtoa_r+0x312>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	9304      	str	r3, [sp, #16]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	920a      	str	r2, [sp, #40]	; 0x28
 8006cde:	e00b      	b.n	8006cf8 <_dtoa_r+0x290>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e7f3      	b.n	8006ccc <_dtoa_r+0x264>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cea:	445b      	add	r3, fp
 8006cec:	9301      	str	r3, [sp, #4]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	9304      	str	r3, [sp, #16]
 8006cf4:	bfb8      	it	lt
 8006cf6:	2301      	movlt	r3, #1
 8006cf8:	69e0      	ldr	r0, [r4, #28]
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	2204      	movs	r2, #4
 8006cfe:	f102 0614 	add.w	r6, r2, #20
 8006d02:	429e      	cmp	r6, r3
 8006d04:	d93d      	bls.n	8006d82 <_dtoa_r+0x31a>
 8006d06:	6041      	str	r1, [r0, #4]
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f000 ff45 	bl	8007b98 <_Balloc>
 8006d0e:	9000      	str	r0, [sp, #0]
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d139      	bne.n	8006d88 <_dtoa_r+0x320>
 8006d14:	4b16      	ldr	r3, [pc, #88]	; (8006d70 <_dtoa_r+0x308>)
 8006d16:	4602      	mov	r2, r0
 8006d18:	f240 11af 	movw	r1, #431	; 0x1af
 8006d1c:	e6bd      	b.n	8006a9a <_dtoa_r+0x32>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e7e1      	b.n	8006ce6 <_dtoa_r+0x27e>
 8006d22:	2501      	movs	r5, #1
 8006d24:	2300      	movs	r3, #0
 8006d26:	9307      	str	r3, [sp, #28]
 8006d28:	9509      	str	r5, [sp, #36]	; 0x24
 8006d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d2e:	9301      	str	r3, [sp, #4]
 8006d30:	9304      	str	r3, [sp, #16]
 8006d32:	2200      	movs	r2, #0
 8006d34:	2312      	movs	r3, #18
 8006d36:	e7d1      	b.n	8006cdc <_dtoa_r+0x274>
 8006d38:	636f4361 	.word	0x636f4361
 8006d3c:	3fd287a7 	.word	0x3fd287a7
 8006d40:	8b60c8b3 	.word	0x8b60c8b3
 8006d44:	3fc68a28 	.word	0x3fc68a28
 8006d48:	509f79fb 	.word	0x509f79fb
 8006d4c:	3fd34413 	.word	0x3fd34413
 8006d50:	08008919 	.word	0x08008919
 8006d54:	08008930 	.word	0x08008930
 8006d58:	7ff00000 	.word	0x7ff00000
 8006d5c:	08008915 	.word	0x08008915
 8006d60:	0800890c 	.word	0x0800890c
 8006d64:	080088e9 	.word	0x080088e9
 8006d68:	3ff80000 	.word	0x3ff80000
 8006d6c:	08008a30 	.word	0x08008a30
 8006d70:	08008988 	.word	0x08008988
 8006d74:	2301      	movs	r3, #1
 8006d76:	9309      	str	r3, [sp, #36]	; 0x24
 8006d78:	e7d7      	b.n	8006d2a <_dtoa_r+0x2c2>
 8006d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d7c:	9301      	str	r3, [sp, #4]
 8006d7e:	9304      	str	r3, [sp, #16]
 8006d80:	e7ba      	b.n	8006cf8 <_dtoa_r+0x290>
 8006d82:	3101      	adds	r1, #1
 8006d84:	0052      	lsls	r2, r2, #1
 8006d86:	e7ba      	b.n	8006cfe <_dtoa_r+0x296>
 8006d88:	69e3      	ldr	r3, [r4, #28]
 8006d8a:	9a00      	ldr	r2, [sp, #0]
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	9b04      	ldr	r3, [sp, #16]
 8006d90:	2b0e      	cmp	r3, #14
 8006d92:	f200 80a8 	bhi.w	8006ee6 <_dtoa_r+0x47e>
 8006d96:	2d00      	cmp	r5, #0
 8006d98:	f000 80a5 	beq.w	8006ee6 <_dtoa_r+0x47e>
 8006d9c:	f1bb 0f00 	cmp.w	fp, #0
 8006da0:	dd38      	ble.n	8006e14 <_dtoa_r+0x3ac>
 8006da2:	4bc0      	ldr	r3, [pc, #768]	; (80070a4 <_dtoa_r+0x63c>)
 8006da4:	f00b 020f 	and.w	r2, fp, #15
 8006da8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006db0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006db4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006db8:	d019      	beq.n	8006dee <_dtoa_r+0x386>
 8006dba:	4bbb      	ldr	r3, [pc, #748]	; (80070a8 <_dtoa_r+0x640>)
 8006dbc:	ec51 0b18 	vmov	r0, r1, d8
 8006dc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006dc4:	f7f9 fd5a 	bl	800087c <__aeabi_ddiv>
 8006dc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dcc:	f008 080f 	and.w	r8, r8, #15
 8006dd0:	2503      	movs	r5, #3
 8006dd2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80070a8 <_dtoa_r+0x640>
 8006dd6:	f1b8 0f00 	cmp.w	r8, #0
 8006dda:	d10a      	bne.n	8006df2 <_dtoa_r+0x38a>
 8006ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006de0:	4632      	mov	r2, r6
 8006de2:	463b      	mov	r3, r7
 8006de4:	f7f9 fd4a 	bl	800087c <__aeabi_ddiv>
 8006de8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dec:	e02b      	b.n	8006e46 <_dtoa_r+0x3de>
 8006dee:	2502      	movs	r5, #2
 8006df0:	e7ef      	b.n	8006dd2 <_dtoa_r+0x36a>
 8006df2:	f018 0f01 	tst.w	r8, #1
 8006df6:	d008      	beq.n	8006e0a <_dtoa_r+0x3a2>
 8006df8:	4630      	mov	r0, r6
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006e00:	f7f9 fc12 	bl	8000628 <__aeabi_dmul>
 8006e04:	3501      	adds	r5, #1
 8006e06:	4606      	mov	r6, r0
 8006e08:	460f      	mov	r7, r1
 8006e0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006e0e:	f109 0908 	add.w	r9, r9, #8
 8006e12:	e7e0      	b.n	8006dd6 <_dtoa_r+0x36e>
 8006e14:	f000 809f 	beq.w	8006f56 <_dtoa_r+0x4ee>
 8006e18:	f1cb 0600 	rsb	r6, fp, #0
 8006e1c:	4ba1      	ldr	r3, [pc, #644]	; (80070a4 <_dtoa_r+0x63c>)
 8006e1e:	4fa2      	ldr	r7, [pc, #648]	; (80070a8 <_dtoa_r+0x640>)
 8006e20:	f006 020f 	and.w	r2, r6, #15
 8006e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2c:	ec51 0b18 	vmov	r0, r1, d8
 8006e30:	f7f9 fbfa 	bl	8000628 <__aeabi_dmul>
 8006e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e38:	1136      	asrs	r6, r6, #4
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2502      	movs	r5, #2
 8006e3e:	2e00      	cmp	r6, #0
 8006e40:	d17e      	bne.n	8006f40 <_dtoa_r+0x4d8>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1d0      	bne.n	8006de8 <_dtoa_r+0x380>
 8006e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 8084 	beq.w	8006f5a <_dtoa_r+0x4f2>
 8006e52:	4b96      	ldr	r3, [pc, #600]	; (80070ac <_dtoa_r+0x644>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	4640      	mov	r0, r8
 8006e58:	4649      	mov	r1, r9
 8006e5a:	f7f9 fe57 	bl	8000b0c <__aeabi_dcmplt>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d07b      	beq.n	8006f5a <_dtoa_r+0x4f2>
 8006e62:	9b04      	ldr	r3, [sp, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d078      	beq.n	8006f5a <_dtoa_r+0x4f2>
 8006e68:	9b01      	ldr	r3, [sp, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	dd39      	ble.n	8006ee2 <_dtoa_r+0x47a>
 8006e6e:	4b90      	ldr	r3, [pc, #576]	; (80070b0 <_dtoa_r+0x648>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	4640      	mov	r0, r8
 8006e74:	4649      	mov	r1, r9
 8006e76:	f7f9 fbd7 	bl	8000628 <__aeabi_dmul>
 8006e7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e7e:	9e01      	ldr	r6, [sp, #4]
 8006e80:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006e84:	3501      	adds	r5, #1
 8006e86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f7f9 fb62 	bl	8000554 <__aeabi_i2d>
 8006e90:	4642      	mov	r2, r8
 8006e92:	464b      	mov	r3, r9
 8006e94:	f7f9 fbc8 	bl	8000628 <__aeabi_dmul>
 8006e98:	4b86      	ldr	r3, [pc, #536]	; (80070b4 <_dtoa_r+0x64c>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f7f9 fa0e 	bl	80002bc <__adddf3>
 8006ea0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ea8:	9303      	str	r3, [sp, #12]
 8006eaa:	2e00      	cmp	r6, #0
 8006eac:	d158      	bne.n	8006f60 <_dtoa_r+0x4f8>
 8006eae:	4b82      	ldr	r3, [pc, #520]	; (80070b8 <_dtoa_r+0x650>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	4640      	mov	r0, r8
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	f7f9 f9ff 	bl	80002b8 <__aeabi_dsub>
 8006eba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ebe:	4680      	mov	r8, r0
 8006ec0:	4689      	mov	r9, r1
 8006ec2:	f7f9 fe41 	bl	8000b48 <__aeabi_dcmpgt>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f040 8296 	bne.w	80073f8 <_dtoa_r+0x990>
 8006ecc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	f7f9 fe18 	bl	8000b0c <__aeabi_dcmplt>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	f040 8289 	bne.w	80073f4 <_dtoa_r+0x98c>
 8006ee2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006ee6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f2c0 814e 	blt.w	800718a <_dtoa_r+0x722>
 8006eee:	f1bb 0f0e 	cmp.w	fp, #14
 8006ef2:	f300 814a 	bgt.w	800718a <_dtoa_r+0x722>
 8006ef6:	4b6b      	ldr	r3, [pc, #428]	; (80070a4 <_dtoa_r+0x63c>)
 8006ef8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006efc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f280 80dc 	bge.w	80070c0 <_dtoa_r+0x658>
 8006f08:	9b04      	ldr	r3, [sp, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f300 80d8 	bgt.w	80070c0 <_dtoa_r+0x658>
 8006f10:	f040 826f 	bne.w	80073f2 <_dtoa_r+0x98a>
 8006f14:	4b68      	ldr	r3, [pc, #416]	; (80070b8 <_dtoa_r+0x650>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	4640      	mov	r0, r8
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	f7f9 fb84 	bl	8000628 <__aeabi_dmul>
 8006f20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f24:	f7f9 fe06 	bl	8000b34 <__aeabi_dcmpge>
 8006f28:	9e04      	ldr	r6, [sp, #16]
 8006f2a:	4637      	mov	r7, r6
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	f040 8245 	bne.w	80073bc <_dtoa_r+0x954>
 8006f32:	9d00      	ldr	r5, [sp, #0]
 8006f34:	2331      	movs	r3, #49	; 0x31
 8006f36:	f805 3b01 	strb.w	r3, [r5], #1
 8006f3a:	f10b 0b01 	add.w	fp, fp, #1
 8006f3e:	e241      	b.n	80073c4 <_dtoa_r+0x95c>
 8006f40:	07f2      	lsls	r2, r6, #31
 8006f42:	d505      	bpl.n	8006f50 <_dtoa_r+0x4e8>
 8006f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f48:	f7f9 fb6e 	bl	8000628 <__aeabi_dmul>
 8006f4c:	3501      	adds	r5, #1
 8006f4e:	2301      	movs	r3, #1
 8006f50:	1076      	asrs	r6, r6, #1
 8006f52:	3708      	adds	r7, #8
 8006f54:	e773      	b.n	8006e3e <_dtoa_r+0x3d6>
 8006f56:	2502      	movs	r5, #2
 8006f58:	e775      	b.n	8006e46 <_dtoa_r+0x3de>
 8006f5a:	9e04      	ldr	r6, [sp, #16]
 8006f5c:	465f      	mov	r7, fp
 8006f5e:	e792      	b.n	8006e86 <_dtoa_r+0x41e>
 8006f60:	9900      	ldr	r1, [sp, #0]
 8006f62:	4b50      	ldr	r3, [pc, #320]	; (80070a4 <_dtoa_r+0x63c>)
 8006f64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f68:	4431      	add	r1, r6
 8006f6a:	9102      	str	r1, [sp, #8]
 8006f6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f6e:	eeb0 9a47 	vmov.f32	s18, s14
 8006f72:	eef0 9a67 	vmov.f32	s19, s15
 8006f76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f7e:	2900      	cmp	r1, #0
 8006f80:	d044      	beq.n	800700c <_dtoa_r+0x5a4>
 8006f82:	494e      	ldr	r1, [pc, #312]	; (80070bc <_dtoa_r+0x654>)
 8006f84:	2000      	movs	r0, #0
 8006f86:	f7f9 fc79 	bl	800087c <__aeabi_ddiv>
 8006f8a:	ec53 2b19 	vmov	r2, r3, d9
 8006f8e:	f7f9 f993 	bl	80002b8 <__aeabi_dsub>
 8006f92:	9d00      	ldr	r5, [sp, #0]
 8006f94:	ec41 0b19 	vmov	d9, r0, r1
 8006f98:	4649      	mov	r1, r9
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	f7f9 fdf4 	bl	8000b88 <__aeabi_d2iz>
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	f7f9 fad7 	bl	8000554 <__aeabi_i2d>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4640      	mov	r0, r8
 8006fac:	4649      	mov	r1, r9
 8006fae:	f7f9 f983 	bl	80002b8 <__aeabi_dsub>
 8006fb2:	3630      	adds	r6, #48	; 0x30
 8006fb4:	f805 6b01 	strb.w	r6, [r5], #1
 8006fb8:	ec53 2b19 	vmov	r2, r3, d9
 8006fbc:	4680      	mov	r8, r0
 8006fbe:	4689      	mov	r9, r1
 8006fc0:	f7f9 fda4 	bl	8000b0c <__aeabi_dcmplt>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d164      	bne.n	8007092 <_dtoa_r+0x62a>
 8006fc8:	4642      	mov	r2, r8
 8006fca:	464b      	mov	r3, r9
 8006fcc:	4937      	ldr	r1, [pc, #220]	; (80070ac <_dtoa_r+0x644>)
 8006fce:	2000      	movs	r0, #0
 8006fd0:	f7f9 f972 	bl	80002b8 <__aeabi_dsub>
 8006fd4:	ec53 2b19 	vmov	r2, r3, d9
 8006fd8:	f7f9 fd98 	bl	8000b0c <__aeabi_dcmplt>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	f040 80b6 	bne.w	800714e <_dtoa_r+0x6e6>
 8006fe2:	9b02      	ldr	r3, [sp, #8]
 8006fe4:	429d      	cmp	r5, r3
 8006fe6:	f43f af7c 	beq.w	8006ee2 <_dtoa_r+0x47a>
 8006fea:	4b31      	ldr	r3, [pc, #196]	; (80070b0 <_dtoa_r+0x648>)
 8006fec:	ec51 0b19 	vmov	r0, r1, d9
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f7f9 fb19 	bl	8000628 <__aeabi_dmul>
 8006ff6:	4b2e      	ldr	r3, [pc, #184]	; (80070b0 <_dtoa_r+0x648>)
 8006ff8:	ec41 0b19 	vmov	d9, r0, r1
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	4640      	mov	r0, r8
 8007000:	4649      	mov	r1, r9
 8007002:	f7f9 fb11 	bl	8000628 <__aeabi_dmul>
 8007006:	4680      	mov	r8, r0
 8007008:	4689      	mov	r9, r1
 800700a:	e7c5      	b.n	8006f98 <_dtoa_r+0x530>
 800700c:	ec51 0b17 	vmov	r0, r1, d7
 8007010:	f7f9 fb0a 	bl	8000628 <__aeabi_dmul>
 8007014:	9b02      	ldr	r3, [sp, #8]
 8007016:	9d00      	ldr	r5, [sp, #0]
 8007018:	930f      	str	r3, [sp, #60]	; 0x3c
 800701a:	ec41 0b19 	vmov	d9, r0, r1
 800701e:	4649      	mov	r1, r9
 8007020:	4640      	mov	r0, r8
 8007022:	f7f9 fdb1 	bl	8000b88 <__aeabi_d2iz>
 8007026:	4606      	mov	r6, r0
 8007028:	f7f9 fa94 	bl	8000554 <__aeabi_i2d>
 800702c:	3630      	adds	r6, #48	; 0x30
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4640      	mov	r0, r8
 8007034:	4649      	mov	r1, r9
 8007036:	f7f9 f93f 	bl	80002b8 <__aeabi_dsub>
 800703a:	f805 6b01 	strb.w	r6, [r5], #1
 800703e:	9b02      	ldr	r3, [sp, #8]
 8007040:	429d      	cmp	r5, r3
 8007042:	4680      	mov	r8, r0
 8007044:	4689      	mov	r9, r1
 8007046:	f04f 0200 	mov.w	r2, #0
 800704a:	d124      	bne.n	8007096 <_dtoa_r+0x62e>
 800704c:	4b1b      	ldr	r3, [pc, #108]	; (80070bc <_dtoa_r+0x654>)
 800704e:	ec51 0b19 	vmov	r0, r1, d9
 8007052:	f7f9 f933 	bl	80002bc <__adddf3>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	4640      	mov	r0, r8
 800705c:	4649      	mov	r1, r9
 800705e:	f7f9 fd73 	bl	8000b48 <__aeabi_dcmpgt>
 8007062:	2800      	cmp	r0, #0
 8007064:	d173      	bne.n	800714e <_dtoa_r+0x6e6>
 8007066:	ec53 2b19 	vmov	r2, r3, d9
 800706a:	4914      	ldr	r1, [pc, #80]	; (80070bc <_dtoa_r+0x654>)
 800706c:	2000      	movs	r0, #0
 800706e:	f7f9 f923 	bl	80002b8 <__aeabi_dsub>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4640      	mov	r0, r8
 8007078:	4649      	mov	r1, r9
 800707a:	f7f9 fd47 	bl	8000b0c <__aeabi_dcmplt>
 800707e:	2800      	cmp	r0, #0
 8007080:	f43f af2f 	beq.w	8006ee2 <_dtoa_r+0x47a>
 8007084:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007086:	1e6b      	subs	r3, r5, #1
 8007088:	930f      	str	r3, [sp, #60]	; 0x3c
 800708a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800708e:	2b30      	cmp	r3, #48	; 0x30
 8007090:	d0f8      	beq.n	8007084 <_dtoa_r+0x61c>
 8007092:	46bb      	mov	fp, r7
 8007094:	e04a      	b.n	800712c <_dtoa_r+0x6c4>
 8007096:	4b06      	ldr	r3, [pc, #24]	; (80070b0 <_dtoa_r+0x648>)
 8007098:	f7f9 fac6 	bl	8000628 <__aeabi_dmul>
 800709c:	4680      	mov	r8, r0
 800709e:	4689      	mov	r9, r1
 80070a0:	e7bd      	b.n	800701e <_dtoa_r+0x5b6>
 80070a2:	bf00      	nop
 80070a4:	08008a30 	.word	0x08008a30
 80070a8:	08008a08 	.word	0x08008a08
 80070ac:	3ff00000 	.word	0x3ff00000
 80070b0:	40240000 	.word	0x40240000
 80070b4:	401c0000 	.word	0x401c0000
 80070b8:	40140000 	.word	0x40140000
 80070bc:	3fe00000 	.word	0x3fe00000
 80070c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80070c4:	9d00      	ldr	r5, [sp, #0]
 80070c6:	4642      	mov	r2, r8
 80070c8:	464b      	mov	r3, r9
 80070ca:	4630      	mov	r0, r6
 80070cc:	4639      	mov	r1, r7
 80070ce:	f7f9 fbd5 	bl	800087c <__aeabi_ddiv>
 80070d2:	f7f9 fd59 	bl	8000b88 <__aeabi_d2iz>
 80070d6:	9001      	str	r0, [sp, #4]
 80070d8:	f7f9 fa3c 	bl	8000554 <__aeabi_i2d>
 80070dc:	4642      	mov	r2, r8
 80070de:	464b      	mov	r3, r9
 80070e0:	f7f9 faa2 	bl	8000628 <__aeabi_dmul>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4630      	mov	r0, r6
 80070ea:	4639      	mov	r1, r7
 80070ec:	f7f9 f8e4 	bl	80002b8 <__aeabi_dsub>
 80070f0:	9e01      	ldr	r6, [sp, #4]
 80070f2:	9f04      	ldr	r7, [sp, #16]
 80070f4:	3630      	adds	r6, #48	; 0x30
 80070f6:	f805 6b01 	strb.w	r6, [r5], #1
 80070fa:	9e00      	ldr	r6, [sp, #0]
 80070fc:	1bae      	subs	r6, r5, r6
 80070fe:	42b7      	cmp	r7, r6
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
 8007104:	d134      	bne.n	8007170 <_dtoa_r+0x708>
 8007106:	f7f9 f8d9 	bl	80002bc <__adddf3>
 800710a:	4642      	mov	r2, r8
 800710c:	464b      	mov	r3, r9
 800710e:	4606      	mov	r6, r0
 8007110:	460f      	mov	r7, r1
 8007112:	f7f9 fd19 	bl	8000b48 <__aeabi_dcmpgt>
 8007116:	b9c8      	cbnz	r0, 800714c <_dtoa_r+0x6e4>
 8007118:	4642      	mov	r2, r8
 800711a:	464b      	mov	r3, r9
 800711c:	4630      	mov	r0, r6
 800711e:	4639      	mov	r1, r7
 8007120:	f7f9 fcea 	bl	8000af8 <__aeabi_dcmpeq>
 8007124:	b110      	cbz	r0, 800712c <_dtoa_r+0x6c4>
 8007126:	9b01      	ldr	r3, [sp, #4]
 8007128:	07db      	lsls	r3, r3, #31
 800712a:	d40f      	bmi.n	800714c <_dtoa_r+0x6e4>
 800712c:	4651      	mov	r1, sl
 800712e:	4620      	mov	r0, r4
 8007130:	f000 fd72 	bl	8007c18 <_Bfree>
 8007134:	2300      	movs	r3, #0
 8007136:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007138:	702b      	strb	r3, [r5, #0]
 800713a:	f10b 0301 	add.w	r3, fp, #1
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007142:	2b00      	cmp	r3, #0
 8007144:	f43f ace2 	beq.w	8006b0c <_dtoa_r+0xa4>
 8007148:	601d      	str	r5, [r3, #0]
 800714a:	e4df      	b.n	8006b0c <_dtoa_r+0xa4>
 800714c:	465f      	mov	r7, fp
 800714e:	462b      	mov	r3, r5
 8007150:	461d      	mov	r5, r3
 8007152:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007156:	2a39      	cmp	r2, #57	; 0x39
 8007158:	d106      	bne.n	8007168 <_dtoa_r+0x700>
 800715a:	9a00      	ldr	r2, [sp, #0]
 800715c:	429a      	cmp	r2, r3
 800715e:	d1f7      	bne.n	8007150 <_dtoa_r+0x6e8>
 8007160:	9900      	ldr	r1, [sp, #0]
 8007162:	2230      	movs	r2, #48	; 0x30
 8007164:	3701      	adds	r7, #1
 8007166:	700a      	strb	r2, [r1, #0]
 8007168:	781a      	ldrb	r2, [r3, #0]
 800716a:	3201      	adds	r2, #1
 800716c:	701a      	strb	r2, [r3, #0]
 800716e:	e790      	b.n	8007092 <_dtoa_r+0x62a>
 8007170:	4ba3      	ldr	r3, [pc, #652]	; (8007400 <_dtoa_r+0x998>)
 8007172:	2200      	movs	r2, #0
 8007174:	f7f9 fa58 	bl	8000628 <__aeabi_dmul>
 8007178:	2200      	movs	r2, #0
 800717a:	2300      	movs	r3, #0
 800717c:	4606      	mov	r6, r0
 800717e:	460f      	mov	r7, r1
 8007180:	f7f9 fcba 	bl	8000af8 <__aeabi_dcmpeq>
 8007184:	2800      	cmp	r0, #0
 8007186:	d09e      	beq.n	80070c6 <_dtoa_r+0x65e>
 8007188:	e7d0      	b.n	800712c <_dtoa_r+0x6c4>
 800718a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800718c:	2a00      	cmp	r2, #0
 800718e:	f000 80ca 	beq.w	8007326 <_dtoa_r+0x8be>
 8007192:	9a07      	ldr	r2, [sp, #28]
 8007194:	2a01      	cmp	r2, #1
 8007196:	f300 80ad 	bgt.w	80072f4 <_dtoa_r+0x88c>
 800719a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800719c:	2a00      	cmp	r2, #0
 800719e:	f000 80a5 	beq.w	80072ec <_dtoa_r+0x884>
 80071a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80071a6:	9e08      	ldr	r6, [sp, #32]
 80071a8:	9d05      	ldr	r5, [sp, #20]
 80071aa:	9a05      	ldr	r2, [sp, #20]
 80071ac:	441a      	add	r2, r3
 80071ae:	9205      	str	r2, [sp, #20]
 80071b0:	9a06      	ldr	r2, [sp, #24]
 80071b2:	2101      	movs	r1, #1
 80071b4:	441a      	add	r2, r3
 80071b6:	4620      	mov	r0, r4
 80071b8:	9206      	str	r2, [sp, #24]
 80071ba:	f000 fde3 	bl	8007d84 <__i2b>
 80071be:	4607      	mov	r7, r0
 80071c0:	b165      	cbz	r5, 80071dc <_dtoa_r+0x774>
 80071c2:	9b06      	ldr	r3, [sp, #24]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	dd09      	ble.n	80071dc <_dtoa_r+0x774>
 80071c8:	42ab      	cmp	r3, r5
 80071ca:	9a05      	ldr	r2, [sp, #20]
 80071cc:	bfa8      	it	ge
 80071ce:	462b      	movge	r3, r5
 80071d0:	1ad2      	subs	r2, r2, r3
 80071d2:	9205      	str	r2, [sp, #20]
 80071d4:	9a06      	ldr	r2, [sp, #24]
 80071d6:	1aed      	subs	r5, r5, r3
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	9306      	str	r3, [sp, #24]
 80071dc:	9b08      	ldr	r3, [sp, #32]
 80071de:	b1f3      	cbz	r3, 800721e <_dtoa_r+0x7b6>
 80071e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 80a3 	beq.w	800732e <_dtoa_r+0x8c6>
 80071e8:	2e00      	cmp	r6, #0
 80071ea:	dd10      	ble.n	800720e <_dtoa_r+0x7a6>
 80071ec:	4639      	mov	r1, r7
 80071ee:	4632      	mov	r2, r6
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 fe87 	bl	8007f04 <__pow5mult>
 80071f6:	4652      	mov	r2, sl
 80071f8:	4601      	mov	r1, r0
 80071fa:	4607      	mov	r7, r0
 80071fc:	4620      	mov	r0, r4
 80071fe:	f000 fdd7 	bl	8007db0 <__multiply>
 8007202:	4651      	mov	r1, sl
 8007204:	4680      	mov	r8, r0
 8007206:	4620      	mov	r0, r4
 8007208:	f000 fd06 	bl	8007c18 <_Bfree>
 800720c:	46c2      	mov	sl, r8
 800720e:	9b08      	ldr	r3, [sp, #32]
 8007210:	1b9a      	subs	r2, r3, r6
 8007212:	d004      	beq.n	800721e <_dtoa_r+0x7b6>
 8007214:	4651      	mov	r1, sl
 8007216:	4620      	mov	r0, r4
 8007218:	f000 fe74 	bl	8007f04 <__pow5mult>
 800721c:	4682      	mov	sl, r0
 800721e:	2101      	movs	r1, #1
 8007220:	4620      	mov	r0, r4
 8007222:	f000 fdaf 	bl	8007d84 <__i2b>
 8007226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007228:	2b00      	cmp	r3, #0
 800722a:	4606      	mov	r6, r0
 800722c:	f340 8081 	ble.w	8007332 <_dtoa_r+0x8ca>
 8007230:	461a      	mov	r2, r3
 8007232:	4601      	mov	r1, r0
 8007234:	4620      	mov	r0, r4
 8007236:	f000 fe65 	bl	8007f04 <__pow5mult>
 800723a:	9b07      	ldr	r3, [sp, #28]
 800723c:	2b01      	cmp	r3, #1
 800723e:	4606      	mov	r6, r0
 8007240:	dd7a      	ble.n	8007338 <_dtoa_r+0x8d0>
 8007242:	f04f 0800 	mov.w	r8, #0
 8007246:	6933      	ldr	r3, [r6, #16]
 8007248:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800724c:	6918      	ldr	r0, [r3, #16]
 800724e:	f000 fd4b 	bl	8007ce8 <__hi0bits>
 8007252:	f1c0 0020 	rsb	r0, r0, #32
 8007256:	9b06      	ldr	r3, [sp, #24]
 8007258:	4418      	add	r0, r3
 800725a:	f010 001f 	ands.w	r0, r0, #31
 800725e:	f000 8094 	beq.w	800738a <_dtoa_r+0x922>
 8007262:	f1c0 0320 	rsb	r3, r0, #32
 8007266:	2b04      	cmp	r3, #4
 8007268:	f340 8085 	ble.w	8007376 <_dtoa_r+0x90e>
 800726c:	9b05      	ldr	r3, [sp, #20]
 800726e:	f1c0 001c 	rsb	r0, r0, #28
 8007272:	4403      	add	r3, r0
 8007274:	9305      	str	r3, [sp, #20]
 8007276:	9b06      	ldr	r3, [sp, #24]
 8007278:	4403      	add	r3, r0
 800727a:	4405      	add	r5, r0
 800727c:	9306      	str	r3, [sp, #24]
 800727e:	9b05      	ldr	r3, [sp, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	dd05      	ble.n	8007290 <_dtoa_r+0x828>
 8007284:	4651      	mov	r1, sl
 8007286:	461a      	mov	r2, r3
 8007288:	4620      	mov	r0, r4
 800728a:	f000 fe95 	bl	8007fb8 <__lshift>
 800728e:	4682      	mov	sl, r0
 8007290:	9b06      	ldr	r3, [sp, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	dd05      	ble.n	80072a2 <_dtoa_r+0x83a>
 8007296:	4631      	mov	r1, r6
 8007298:	461a      	mov	r2, r3
 800729a:	4620      	mov	r0, r4
 800729c:	f000 fe8c 	bl	8007fb8 <__lshift>
 80072a0:	4606      	mov	r6, r0
 80072a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d072      	beq.n	800738e <_dtoa_r+0x926>
 80072a8:	4631      	mov	r1, r6
 80072aa:	4650      	mov	r0, sl
 80072ac:	f000 fef0 	bl	8008090 <__mcmp>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	da6c      	bge.n	800738e <_dtoa_r+0x926>
 80072b4:	2300      	movs	r3, #0
 80072b6:	4651      	mov	r1, sl
 80072b8:	220a      	movs	r2, #10
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 fcce 	bl	8007c5c <__multadd>
 80072c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80072c6:	4682      	mov	sl, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 81b0 	beq.w	800762e <_dtoa_r+0xbc6>
 80072ce:	2300      	movs	r3, #0
 80072d0:	4639      	mov	r1, r7
 80072d2:	220a      	movs	r2, #10
 80072d4:	4620      	mov	r0, r4
 80072d6:	f000 fcc1 	bl	8007c5c <__multadd>
 80072da:	9b01      	ldr	r3, [sp, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	4607      	mov	r7, r0
 80072e0:	f300 8096 	bgt.w	8007410 <_dtoa_r+0x9a8>
 80072e4:	9b07      	ldr	r3, [sp, #28]
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	dc59      	bgt.n	800739e <_dtoa_r+0x936>
 80072ea:	e091      	b.n	8007410 <_dtoa_r+0x9a8>
 80072ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072f2:	e758      	b.n	80071a6 <_dtoa_r+0x73e>
 80072f4:	9b04      	ldr	r3, [sp, #16]
 80072f6:	1e5e      	subs	r6, r3, #1
 80072f8:	9b08      	ldr	r3, [sp, #32]
 80072fa:	42b3      	cmp	r3, r6
 80072fc:	bfbf      	itttt	lt
 80072fe:	9b08      	ldrlt	r3, [sp, #32]
 8007300:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007302:	9608      	strlt	r6, [sp, #32]
 8007304:	1af3      	sublt	r3, r6, r3
 8007306:	bfb4      	ite	lt
 8007308:	18d2      	addlt	r2, r2, r3
 800730a:	1b9e      	subge	r6, r3, r6
 800730c:	9b04      	ldr	r3, [sp, #16]
 800730e:	bfbc      	itt	lt
 8007310:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007312:	2600      	movlt	r6, #0
 8007314:	2b00      	cmp	r3, #0
 8007316:	bfb7      	itett	lt
 8007318:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800731c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007320:	1a9d      	sublt	r5, r3, r2
 8007322:	2300      	movlt	r3, #0
 8007324:	e741      	b.n	80071aa <_dtoa_r+0x742>
 8007326:	9e08      	ldr	r6, [sp, #32]
 8007328:	9d05      	ldr	r5, [sp, #20]
 800732a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800732c:	e748      	b.n	80071c0 <_dtoa_r+0x758>
 800732e:	9a08      	ldr	r2, [sp, #32]
 8007330:	e770      	b.n	8007214 <_dtoa_r+0x7ac>
 8007332:	9b07      	ldr	r3, [sp, #28]
 8007334:	2b01      	cmp	r3, #1
 8007336:	dc19      	bgt.n	800736c <_dtoa_r+0x904>
 8007338:	9b02      	ldr	r3, [sp, #8]
 800733a:	b9bb      	cbnz	r3, 800736c <_dtoa_r+0x904>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007342:	b99b      	cbnz	r3, 800736c <_dtoa_r+0x904>
 8007344:	9b03      	ldr	r3, [sp, #12]
 8007346:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800734a:	0d1b      	lsrs	r3, r3, #20
 800734c:	051b      	lsls	r3, r3, #20
 800734e:	b183      	cbz	r3, 8007372 <_dtoa_r+0x90a>
 8007350:	9b05      	ldr	r3, [sp, #20]
 8007352:	3301      	adds	r3, #1
 8007354:	9305      	str	r3, [sp, #20]
 8007356:	9b06      	ldr	r3, [sp, #24]
 8007358:	3301      	adds	r3, #1
 800735a:	9306      	str	r3, [sp, #24]
 800735c:	f04f 0801 	mov.w	r8, #1
 8007360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007362:	2b00      	cmp	r3, #0
 8007364:	f47f af6f 	bne.w	8007246 <_dtoa_r+0x7de>
 8007368:	2001      	movs	r0, #1
 800736a:	e774      	b.n	8007256 <_dtoa_r+0x7ee>
 800736c:	f04f 0800 	mov.w	r8, #0
 8007370:	e7f6      	b.n	8007360 <_dtoa_r+0x8f8>
 8007372:	4698      	mov	r8, r3
 8007374:	e7f4      	b.n	8007360 <_dtoa_r+0x8f8>
 8007376:	d082      	beq.n	800727e <_dtoa_r+0x816>
 8007378:	9a05      	ldr	r2, [sp, #20]
 800737a:	331c      	adds	r3, #28
 800737c:	441a      	add	r2, r3
 800737e:	9205      	str	r2, [sp, #20]
 8007380:	9a06      	ldr	r2, [sp, #24]
 8007382:	441a      	add	r2, r3
 8007384:	441d      	add	r5, r3
 8007386:	9206      	str	r2, [sp, #24]
 8007388:	e779      	b.n	800727e <_dtoa_r+0x816>
 800738a:	4603      	mov	r3, r0
 800738c:	e7f4      	b.n	8007378 <_dtoa_r+0x910>
 800738e:	9b04      	ldr	r3, [sp, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	dc37      	bgt.n	8007404 <_dtoa_r+0x99c>
 8007394:	9b07      	ldr	r3, [sp, #28]
 8007396:	2b02      	cmp	r3, #2
 8007398:	dd34      	ble.n	8007404 <_dtoa_r+0x99c>
 800739a:	9b04      	ldr	r3, [sp, #16]
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	9b01      	ldr	r3, [sp, #4]
 80073a0:	b963      	cbnz	r3, 80073bc <_dtoa_r+0x954>
 80073a2:	4631      	mov	r1, r6
 80073a4:	2205      	movs	r2, #5
 80073a6:	4620      	mov	r0, r4
 80073a8:	f000 fc58 	bl	8007c5c <__multadd>
 80073ac:	4601      	mov	r1, r0
 80073ae:	4606      	mov	r6, r0
 80073b0:	4650      	mov	r0, sl
 80073b2:	f000 fe6d 	bl	8008090 <__mcmp>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	f73f adbb 	bgt.w	8006f32 <_dtoa_r+0x4ca>
 80073bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073be:	9d00      	ldr	r5, [sp, #0]
 80073c0:	ea6f 0b03 	mvn.w	fp, r3
 80073c4:	f04f 0800 	mov.w	r8, #0
 80073c8:	4631      	mov	r1, r6
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 fc24 	bl	8007c18 <_Bfree>
 80073d0:	2f00      	cmp	r7, #0
 80073d2:	f43f aeab 	beq.w	800712c <_dtoa_r+0x6c4>
 80073d6:	f1b8 0f00 	cmp.w	r8, #0
 80073da:	d005      	beq.n	80073e8 <_dtoa_r+0x980>
 80073dc:	45b8      	cmp	r8, r7
 80073de:	d003      	beq.n	80073e8 <_dtoa_r+0x980>
 80073e0:	4641      	mov	r1, r8
 80073e2:	4620      	mov	r0, r4
 80073e4:	f000 fc18 	bl	8007c18 <_Bfree>
 80073e8:	4639      	mov	r1, r7
 80073ea:	4620      	mov	r0, r4
 80073ec:	f000 fc14 	bl	8007c18 <_Bfree>
 80073f0:	e69c      	b.n	800712c <_dtoa_r+0x6c4>
 80073f2:	2600      	movs	r6, #0
 80073f4:	4637      	mov	r7, r6
 80073f6:	e7e1      	b.n	80073bc <_dtoa_r+0x954>
 80073f8:	46bb      	mov	fp, r7
 80073fa:	4637      	mov	r7, r6
 80073fc:	e599      	b.n	8006f32 <_dtoa_r+0x4ca>
 80073fe:	bf00      	nop
 8007400:	40240000 	.word	0x40240000
 8007404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 80c8 	beq.w	800759c <_dtoa_r+0xb34>
 800740c:	9b04      	ldr	r3, [sp, #16]
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	2d00      	cmp	r5, #0
 8007412:	dd05      	ble.n	8007420 <_dtoa_r+0x9b8>
 8007414:	4639      	mov	r1, r7
 8007416:	462a      	mov	r2, r5
 8007418:	4620      	mov	r0, r4
 800741a:	f000 fdcd 	bl	8007fb8 <__lshift>
 800741e:	4607      	mov	r7, r0
 8007420:	f1b8 0f00 	cmp.w	r8, #0
 8007424:	d05b      	beq.n	80074de <_dtoa_r+0xa76>
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	4620      	mov	r0, r4
 800742a:	f000 fbb5 	bl	8007b98 <_Balloc>
 800742e:	4605      	mov	r5, r0
 8007430:	b928      	cbnz	r0, 800743e <_dtoa_r+0x9d6>
 8007432:	4b83      	ldr	r3, [pc, #524]	; (8007640 <_dtoa_r+0xbd8>)
 8007434:	4602      	mov	r2, r0
 8007436:	f240 21ef 	movw	r1, #751	; 0x2ef
 800743a:	f7ff bb2e 	b.w	8006a9a <_dtoa_r+0x32>
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	3202      	adds	r2, #2
 8007442:	0092      	lsls	r2, r2, #2
 8007444:	f107 010c 	add.w	r1, r7, #12
 8007448:	300c      	adds	r0, #12
 800744a:	f001 f8d3 	bl	80085f4 <memcpy>
 800744e:	2201      	movs	r2, #1
 8007450:	4629      	mov	r1, r5
 8007452:	4620      	mov	r0, r4
 8007454:	f000 fdb0 	bl	8007fb8 <__lshift>
 8007458:	9b00      	ldr	r3, [sp, #0]
 800745a:	3301      	adds	r3, #1
 800745c:	9304      	str	r3, [sp, #16]
 800745e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007462:	4413      	add	r3, r2
 8007464:	9308      	str	r3, [sp, #32]
 8007466:	9b02      	ldr	r3, [sp, #8]
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	46b8      	mov	r8, r7
 800746e:	9306      	str	r3, [sp, #24]
 8007470:	4607      	mov	r7, r0
 8007472:	9b04      	ldr	r3, [sp, #16]
 8007474:	4631      	mov	r1, r6
 8007476:	3b01      	subs	r3, #1
 8007478:	4650      	mov	r0, sl
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	f7ff fa6c 	bl	8006958 <quorem>
 8007480:	4641      	mov	r1, r8
 8007482:	9002      	str	r0, [sp, #8]
 8007484:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007488:	4650      	mov	r0, sl
 800748a:	f000 fe01 	bl	8008090 <__mcmp>
 800748e:	463a      	mov	r2, r7
 8007490:	9005      	str	r0, [sp, #20]
 8007492:	4631      	mov	r1, r6
 8007494:	4620      	mov	r0, r4
 8007496:	f000 fe17 	bl	80080c8 <__mdiff>
 800749a:	68c2      	ldr	r2, [r0, #12]
 800749c:	4605      	mov	r5, r0
 800749e:	bb02      	cbnz	r2, 80074e2 <_dtoa_r+0xa7a>
 80074a0:	4601      	mov	r1, r0
 80074a2:	4650      	mov	r0, sl
 80074a4:	f000 fdf4 	bl	8008090 <__mcmp>
 80074a8:	4602      	mov	r2, r0
 80074aa:	4629      	mov	r1, r5
 80074ac:	4620      	mov	r0, r4
 80074ae:	9209      	str	r2, [sp, #36]	; 0x24
 80074b0:	f000 fbb2 	bl	8007c18 <_Bfree>
 80074b4:	9b07      	ldr	r3, [sp, #28]
 80074b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074b8:	9d04      	ldr	r5, [sp, #16]
 80074ba:	ea43 0102 	orr.w	r1, r3, r2
 80074be:	9b06      	ldr	r3, [sp, #24]
 80074c0:	4319      	orrs	r1, r3
 80074c2:	d110      	bne.n	80074e6 <_dtoa_r+0xa7e>
 80074c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074c8:	d029      	beq.n	800751e <_dtoa_r+0xab6>
 80074ca:	9b05      	ldr	r3, [sp, #20]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dd02      	ble.n	80074d6 <_dtoa_r+0xa6e>
 80074d0:	9b02      	ldr	r3, [sp, #8]
 80074d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80074d6:	9b01      	ldr	r3, [sp, #4]
 80074d8:	f883 9000 	strb.w	r9, [r3]
 80074dc:	e774      	b.n	80073c8 <_dtoa_r+0x960>
 80074de:	4638      	mov	r0, r7
 80074e0:	e7ba      	b.n	8007458 <_dtoa_r+0x9f0>
 80074e2:	2201      	movs	r2, #1
 80074e4:	e7e1      	b.n	80074aa <_dtoa_r+0xa42>
 80074e6:	9b05      	ldr	r3, [sp, #20]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	db04      	blt.n	80074f6 <_dtoa_r+0xa8e>
 80074ec:	9907      	ldr	r1, [sp, #28]
 80074ee:	430b      	orrs	r3, r1
 80074f0:	9906      	ldr	r1, [sp, #24]
 80074f2:	430b      	orrs	r3, r1
 80074f4:	d120      	bne.n	8007538 <_dtoa_r+0xad0>
 80074f6:	2a00      	cmp	r2, #0
 80074f8:	dded      	ble.n	80074d6 <_dtoa_r+0xa6e>
 80074fa:	4651      	mov	r1, sl
 80074fc:	2201      	movs	r2, #1
 80074fe:	4620      	mov	r0, r4
 8007500:	f000 fd5a 	bl	8007fb8 <__lshift>
 8007504:	4631      	mov	r1, r6
 8007506:	4682      	mov	sl, r0
 8007508:	f000 fdc2 	bl	8008090 <__mcmp>
 800750c:	2800      	cmp	r0, #0
 800750e:	dc03      	bgt.n	8007518 <_dtoa_r+0xab0>
 8007510:	d1e1      	bne.n	80074d6 <_dtoa_r+0xa6e>
 8007512:	f019 0f01 	tst.w	r9, #1
 8007516:	d0de      	beq.n	80074d6 <_dtoa_r+0xa6e>
 8007518:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800751c:	d1d8      	bne.n	80074d0 <_dtoa_r+0xa68>
 800751e:	9a01      	ldr	r2, [sp, #4]
 8007520:	2339      	movs	r3, #57	; 0x39
 8007522:	7013      	strb	r3, [r2, #0]
 8007524:	462b      	mov	r3, r5
 8007526:	461d      	mov	r5, r3
 8007528:	3b01      	subs	r3, #1
 800752a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800752e:	2a39      	cmp	r2, #57	; 0x39
 8007530:	d06c      	beq.n	800760c <_dtoa_r+0xba4>
 8007532:	3201      	adds	r2, #1
 8007534:	701a      	strb	r2, [r3, #0]
 8007536:	e747      	b.n	80073c8 <_dtoa_r+0x960>
 8007538:	2a00      	cmp	r2, #0
 800753a:	dd07      	ble.n	800754c <_dtoa_r+0xae4>
 800753c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007540:	d0ed      	beq.n	800751e <_dtoa_r+0xab6>
 8007542:	9a01      	ldr	r2, [sp, #4]
 8007544:	f109 0301 	add.w	r3, r9, #1
 8007548:	7013      	strb	r3, [r2, #0]
 800754a:	e73d      	b.n	80073c8 <_dtoa_r+0x960>
 800754c:	9b04      	ldr	r3, [sp, #16]
 800754e:	9a08      	ldr	r2, [sp, #32]
 8007550:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007554:	4293      	cmp	r3, r2
 8007556:	d043      	beq.n	80075e0 <_dtoa_r+0xb78>
 8007558:	4651      	mov	r1, sl
 800755a:	2300      	movs	r3, #0
 800755c:	220a      	movs	r2, #10
 800755e:	4620      	mov	r0, r4
 8007560:	f000 fb7c 	bl	8007c5c <__multadd>
 8007564:	45b8      	cmp	r8, r7
 8007566:	4682      	mov	sl, r0
 8007568:	f04f 0300 	mov.w	r3, #0
 800756c:	f04f 020a 	mov.w	r2, #10
 8007570:	4641      	mov	r1, r8
 8007572:	4620      	mov	r0, r4
 8007574:	d107      	bne.n	8007586 <_dtoa_r+0xb1e>
 8007576:	f000 fb71 	bl	8007c5c <__multadd>
 800757a:	4680      	mov	r8, r0
 800757c:	4607      	mov	r7, r0
 800757e:	9b04      	ldr	r3, [sp, #16]
 8007580:	3301      	adds	r3, #1
 8007582:	9304      	str	r3, [sp, #16]
 8007584:	e775      	b.n	8007472 <_dtoa_r+0xa0a>
 8007586:	f000 fb69 	bl	8007c5c <__multadd>
 800758a:	4639      	mov	r1, r7
 800758c:	4680      	mov	r8, r0
 800758e:	2300      	movs	r3, #0
 8007590:	220a      	movs	r2, #10
 8007592:	4620      	mov	r0, r4
 8007594:	f000 fb62 	bl	8007c5c <__multadd>
 8007598:	4607      	mov	r7, r0
 800759a:	e7f0      	b.n	800757e <_dtoa_r+0xb16>
 800759c:	9b04      	ldr	r3, [sp, #16]
 800759e:	9301      	str	r3, [sp, #4]
 80075a0:	9d00      	ldr	r5, [sp, #0]
 80075a2:	4631      	mov	r1, r6
 80075a4:	4650      	mov	r0, sl
 80075a6:	f7ff f9d7 	bl	8006958 <quorem>
 80075aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80075ae:	9b00      	ldr	r3, [sp, #0]
 80075b0:	f805 9b01 	strb.w	r9, [r5], #1
 80075b4:	1aea      	subs	r2, r5, r3
 80075b6:	9b01      	ldr	r3, [sp, #4]
 80075b8:	4293      	cmp	r3, r2
 80075ba:	dd07      	ble.n	80075cc <_dtoa_r+0xb64>
 80075bc:	4651      	mov	r1, sl
 80075be:	2300      	movs	r3, #0
 80075c0:	220a      	movs	r2, #10
 80075c2:	4620      	mov	r0, r4
 80075c4:	f000 fb4a 	bl	8007c5c <__multadd>
 80075c8:	4682      	mov	sl, r0
 80075ca:	e7ea      	b.n	80075a2 <_dtoa_r+0xb3a>
 80075cc:	9b01      	ldr	r3, [sp, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bfc8      	it	gt
 80075d2:	461d      	movgt	r5, r3
 80075d4:	9b00      	ldr	r3, [sp, #0]
 80075d6:	bfd8      	it	le
 80075d8:	2501      	movle	r5, #1
 80075da:	441d      	add	r5, r3
 80075dc:	f04f 0800 	mov.w	r8, #0
 80075e0:	4651      	mov	r1, sl
 80075e2:	2201      	movs	r2, #1
 80075e4:	4620      	mov	r0, r4
 80075e6:	f000 fce7 	bl	8007fb8 <__lshift>
 80075ea:	4631      	mov	r1, r6
 80075ec:	4682      	mov	sl, r0
 80075ee:	f000 fd4f 	bl	8008090 <__mcmp>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	dc96      	bgt.n	8007524 <_dtoa_r+0xabc>
 80075f6:	d102      	bne.n	80075fe <_dtoa_r+0xb96>
 80075f8:	f019 0f01 	tst.w	r9, #1
 80075fc:	d192      	bne.n	8007524 <_dtoa_r+0xabc>
 80075fe:	462b      	mov	r3, r5
 8007600:	461d      	mov	r5, r3
 8007602:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007606:	2a30      	cmp	r2, #48	; 0x30
 8007608:	d0fa      	beq.n	8007600 <_dtoa_r+0xb98>
 800760a:	e6dd      	b.n	80073c8 <_dtoa_r+0x960>
 800760c:	9a00      	ldr	r2, [sp, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d189      	bne.n	8007526 <_dtoa_r+0xabe>
 8007612:	f10b 0b01 	add.w	fp, fp, #1
 8007616:	2331      	movs	r3, #49	; 0x31
 8007618:	e796      	b.n	8007548 <_dtoa_r+0xae0>
 800761a:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <_dtoa_r+0xbdc>)
 800761c:	f7ff ba99 	b.w	8006b52 <_dtoa_r+0xea>
 8007620:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007622:	2b00      	cmp	r3, #0
 8007624:	f47f aa6d 	bne.w	8006b02 <_dtoa_r+0x9a>
 8007628:	4b07      	ldr	r3, [pc, #28]	; (8007648 <_dtoa_r+0xbe0>)
 800762a:	f7ff ba92 	b.w	8006b52 <_dtoa_r+0xea>
 800762e:	9b01      	ldr	r3, [sp, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	dcb5      	bgt.n	80075a0 <_dtoa_r+0xb38>
 8007634:	9b07      	ldr	r3, [sp, #28]
 8007636:	2b02      	cmp	r3, #2
 8007638:	f73f aeb1 	bgt.w	800739e <_dtoa_r+0x936>
 800763c:	e7b0      	b.n	80075a0 <_dtoa_r+0xb38>
 800763e:	bf00      	nop
 8007640:	08008988 	.word	0x08008988
 8007644:	080088e8 	.word	0x080088e8
 8007648:	0800890c 	.word	0x0800890c

0800764c <__sfputc_r>:
 800764c:	6893      	ldr	r3, [r2, #8]
 800764e:	3b01      	subs	r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	b410      	push	{r4}
 8007654:	6093      	str	r3, [r2, #8]
 8007656:	da08      	bge.n	800766a <__sfputc_r+0x1e>
 8007658:	6994      	ldr	r4, [r2, #24]
 800765a:	42a3      	cmp	r3, r4
 800765c:	db01      	blt.n	8007662 <__sfputc_r+0x16>
 800765e:	290a      	cmp	r1, #10
 8007660:	d103      	bne.n	800766a <__sfputc_r+0x1e>
 8007662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007666:	f000 be56 	b.w	8008316 <__swbuf_r>
 800766a:	6813      	ldr	r3, [r2, #0]
 800766c:	1c58      	adds	r0, r3, #1
 800766e:	6010      	str	r0, [r2, #0]
 8007670:	7019      	strb	r1, [r3, #0]
 8007672:	4608      	mov	r0, r1
 8007674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007678:	4770      	bx	lr

0800767a <__sfputs_r>:
 800767a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767c:	4606      	mov	r6, r0
 800767e:	460f      	mov	r7, r1
 8007680:	4614      	mov	r4, r2
 8007682:	18d5      	adds	r5, r2, r3
 8007684:	42ac      	cmp	r4, r5
 8007686:	d101      	bne.n	800768c <__sfputs_r+0x12>
 8007688:	2000      	movs	r0, #0
 800768a:	e007      	b.n	800769c <__sfputs_r+0x22>
 800768c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007690:	463a      	mov	r2, r7
 8007692:	4630      	mov	r0, r6
 8007694:	f7ff ffda 	bl	800764c <__sfputc_r>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d1f3      	bne.n	8007684 <__sfputs_r+0xa>
 800769c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076a0 <_vfiprintf_r>:
 80076a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a4:	460d      	mov	r5, r1
 80076a6:	b09d      	sub	sp, #116	; 0x74
 80076a8:	4614      	mov	r4, r2
 80076aa:	4698      	mov	r8, r3
 80076ac:	4606      	mov	r6, r0
 80076ae:	b118      	cbz	r0, 80076b8 <_vfiprintf_r+0x18>
 80076b0:	6a03      	ldr	r3, [r0, #32]
 80076b2:	b90b      	cbnz	r3, 80076b8 <_vfiprintf_r+0x18>
 80076b4:	f7ff f874 	bl	80067a0 <__sinit>
 80076b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ba:	07d9      	lsls	r1, r3, #31
 80076bc:	d405      	bmi.n	80076ca <_vfiprintf_r+0x2a>
 80076be:	89ab      	ldrh	r3, [r5, #12]
 80076c0:	059a      	lsls	r2, r3, #22
 80076c2:	d402      	bmi.n	80076ca <_vfiprintf_r+0x2a>
 80076c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076c6:	f7ff f945 	bl	8006954 <__retarget_lock_acquire_recursive>
 80076ca:	89ab      	ldrh	r3, [r5, #12]
 80076cc:	071b      	lsls	r3, r3, #28
 80076ce:	d501      	bpl.n	80076d4 <_vfiprintf_r+0x34>
 80076d0:	692b      	ldr	r3, [r5, #16]
 80076d2:	b99b      	cbnz	r3, 80076fc <_vfiprintf_r+0x5c>
 80076d4:	4629      	mov	r1, r5
 80076d6:	4630      	mov	r0, r6
 80076d8:	f000 fe5a 	bl	8008390 <__swsetup_r>
 80076dc:	b170      	cbz	r0, 80076fc <_vfiprintf_r+0x5c>
 80076de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076e0:	07dc      	lsls	r4, r3, #31
 80076e2:	d504      	bpl.n	80076ee <_vfiprintf_r+0x4e>
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076e8:	b01d      	add	sp, #116	; 0x74
 80076ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ee:	89ab      	ldrh	r3, [r5, #12]
 80076f0:	0598      	lsls	r0, r3, #22
 80076f2:	d4f7      	bmi.n	80076e4 <_vfiprintf_r+0x44>
 80076f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076f6:	f7ff f92e 	bl	8006956 <__retarget_lock_release_recursive>
 80076fa:	e7f3      	b.n	80076e4 <_vfiprintf_r+0x44>
 80076fc:	2300      	movs	r3, #0
 80076fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007700:	2320      	movs	r3, #32
 8007702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007706:	f8cd 800c 	str.w	r8, [sp, #12]
 800770a:	2330      	movs	r3, #48	; 0x30
 800770c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80078c0 <_vfiprintf_r+0x220>
 8007710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007714:	f04f 0901 	mov.w	r9, #1
 8007718:	4623      	mov	r3, r4
 800771a:	469a      	mov	sl, r3
 800771c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007720:	b10a      	cbz	r2, 8007726 <_vfiprintf_r+0x86>
 8007722:	2a25      	cmp	r2, #37	; 0x25
 8007724:	d1f9      	bne.n	800771a <_vfiprintf_r+0x7a>
 8007726:	ebba 0b04 	subs.w	fp, sl, r4
 800772a:	d00b      	beq.n	8007744 <_vfiprintf_r+0xa4>
 800772c:	465b      	mov	r3, fp
 800772e:	4622      	mov	r2, r4
 8007730:	4629      	mov	r1, r5
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff ffa1 	bl	800767a <__sfputs_r>
 8007738:	3001      	adds	r0, #1
 800773a:	f000 80a9 	beq.w	8007890 <_vfiprintf_r+0x1f0>
 800773e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007740:	445a      	add	r2, fp
 8007742:	9209      	str	r2, [sp, #36]	; 0x24
 8007744:	f89a 3000 	ldrb.w	r3, [sl]
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 80a1 	beq.w	8007890 <_vfiprintf_r+0x1f0>
 800774e:	2300      	movs	r3, #0
 8007750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007758:	f10a 0a01 	add.w	sl, sl, #1
 800775c:	9304      	str	r3, [sp, #16]
 800775e:	9307      	str	r3, [sp, #28]
 8007760:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007764:	931a      	str	r3, [sp, #104]	; 0x68
 8007766:	4654      	mov	r4, sl
 8007768:	2205      	movs	r2, #5
 800776a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800776e:	4854      	ldr	r0, [pc, #336]	; (80078c0 <_vfiprintf_r+0x220>)
 8007770:	f7f8 fd46 	bl	8000200 <memchr>
 8007774:	9a04      	ldr	r2, [sp, #16]
 8007776:	b9d8      	cbnz	r0, 80077b0 <_vfiprintf_r+0x110>
 8007778:	06d1      	lsls	r1, r2, #27
 800777a:	bf44      	itt	mi
 800777c:	2320      	movmi	r3, #32
 800777e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007782:	0713      	lsls	r3, r2, #28
 8007784:	bf44      	itt	mi
 8007786:	232b      	movmi	r3, #43	; 0x2b
 8007788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800778c:	f89a 3000 	ldrb.w	r3, [sl]
 8007790:	2b2a      	cmp	r3, #42	; 0x2a
 8007792:	d015      	beq.n	80077c0 <_vfiprintf_r+0x120>
 8007794:	9a07      	ldr	r2, [sp, #28]
 8007796:	4654      	mov	r4, sl
 8007798:	2000      	movs	r0, #0
 800779a:	f04f 0c0a 	mov.w	ip, #10
 800779e:	4621      	mov	r1, r4
 80077a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077a4:	3b30      	subs	r3, #48	; 0x30
 80077a6:	2b09      	cmp	r3, #9
 80077a8:	d94d      	bls.n	8007846 <_vfiprintf_r+0x1a6>
 80077aa:	b1b0      	cbz	r0, 80077da <_vfiprintf_r+0x13a>
 80077ac:	9207      	str	r2, [sp, #28]
 80077ae:	e014      	b.n	80077da <_vfiprintf_r+0x13a>
 80077b0:	eba0 0308 	sub.w	r3, r0, r8
 80077b4:	fa09 f303 	lsl.w	r3, r9, r3
 80077b8:	4313      	orrs	r3, r2
 80077ba:	9304      	str	r3, [sp, #16]
 80077bc:	46a2      	mov	sl, r4
 80077be:	e7d2      	b.n	8007766 <_vfiprintf_r+0xc6>
 80077c0:	9b03      	ldr	r3, [sp, #12]
 80077c2:	1d19      	adds	r1, r3, #4
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	9103      	str	r1, [sp, #12]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	bfbb      	ittet	lt
 80077cc:	425b      	neglt	r3, r3
 80077ce:	f042 0202 	orrlt.w	r2, r2, #2
 80077d2:	9307      	strge	r3, [sp, #28]
 80077d4:	9307      	strlt	r3, [sp, #28]
 80077d6:	bfb8      	it	lt
 80077d8:	9204      	strlt	r2, [sp, #16]
 80077da:	7823      	ldrb	r3, [r4, #0]
 80077dc:	2b2e      	cmp	r3, #46	; 0x2e
 80077de:	d10c      	bne.n	80077fa <_vfiprintf_r+0x15a>
 80077e0:	7863      	ldrb	r3, [r4, #1]
 80077e2:	2b2a      	cmp	r3, #42	; 0x2a
 80077e4:	d134      	bne.n	8007850 <_vfiprintf_r+0x1b0>
 80077e6:	9b03      	ldr	r3, [sp, #12]
 80077e8:	1d1a      	adds	r2, r3, #4
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	9203      	str	r2, [sp, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bfb8      	it	lt
 80077f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80077f6:	3402      	adds	r4, #2
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80078d0 <_vfiprintf_r+0x230>
 80077fe:	7821      	ldrb	r1, [r4, #0]
 8007800:	2203      	movs	r2, #3
 8007802:	4650      	mov	r0, sl
 8007804:	f7f8 fcfc 	bl	8000200 <memchr>
 8007808:	b138      	cbz	r0, 800781a <_vfiprintf_r+0x17a>
 800780a:	9b04      	ldr	r3, [sp, #16]
 800780c:	eba0 000a 	sub.w	r0, r0, sl
 8007810:	2240      	movs	r2, #64	; 0x40
 8007812:	4082      	lsls	r2, r0
 8007814:	4313      	orrs	r3, r2
 8007816:	3401      	adds	r4, #1
 8007818:	9304      	str	r3, [sp, #16]
 800781a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800781e:	4829      	ldr	r0, [pc, #164]	; (80078c4 <_vfiprintf_r+0x224>)
 8007820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007824:	2206      	movs	r2, #6
 8007826:	f7f8 fceb 	bl	8000200 <memchr>
 800782a:	2800      	cmp	r0, #0
 800782c:	d03f      	beq.n	80078ae <_vfiprintf_r+0x20e>
 800782e:	4b26      	ldr	r3, [pc, #152]	; (80078c8 <_vfiprintf_r+0x228>)
 8007830:	bb1b      	cbnz	r3, 800787a <_vfiprintf_r+0x1da>
 8007832:	9b03      	ldr	r3, [sp, #12]
 8007834:	3307      	adds	r3, #7
 8007836:	f023 0307 	bic.w	r3, r3, #7
 800783a:	3308      	adds	r3, #8
 800783c:	9303      	str	r3, [sp, #12]
 800783e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007840:	443b      	add	r3, r7
 8007842:	9309      	str	r3, [sp, #36]	; 0x24
 8007844:	e768      	b.n	8007718 <_vfiprintf_r+0x78>
 8007846:	fb0c 3202 	mla	r2, ip, r2, r3
 800784a:	460c      	mov	r4, r1
 800784c:	2001      	movs	r0, #1
 800784e:	e7a6      	b.n	800779e <_vfiprintf_r+0xfe>
 8007850:	2300      	movs	r3, #0
 8007852:	3401      	adds	r4, #1
 8007854:	9305      	str	r3, [sp, #20]
 8007856:	4619      	mov	r1, r3
 8007858:	f04f 0c0a 	mov.w	ip, #10
 800785c:	4620      	mov	r0, r4
 800785e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007862:	3a30      	subs	r2, #48	; 0x30
 8007864:	2a09      	cmp	r2, #9
 8007866:	d903      	bls.n	8007870 <_vfiprintf_r+0x1d0>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d0c6      	beq.n	80077fa <_vfiprintf_r+0x15a>
 800786c:	9105      	str	r1, [sp, #20]
 800786e:	e7c4      	b.n	80077fa <_vfiprintf_r+0x15a>
 8007870:	fb0c 2101 	mla	r1, ip, r1, r2
 8007874:	4604      	mov	r4, r0
 8007876:	2301      	movs	r3, #1
 8007878:	e7f0      	b.n	800785c <_vfiprintf_r+0x1bc>
 800787a:	ab03      	add	r3, sp, #12
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	462a      	mov	r2, r5
 8007880:	4b12      	ldr	r3, [pc, #72]	; (80078cc <_vfiprintf_r+0x22c>)
 8007882:	a904      	add	r1, sp, #16
 8007884:	4630      	mov	r0, r6
 8007886:	f7fe fb4b 	bl	8005f20 <_printf_float>
 800788a:	4607      	mov	r7, r0
 800788c:	1c78      	adds	r0, r7, #1
 800788e:	d1d6      	bne.n	800783e <_vfiprintf_r+0x19e>
 8007890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007892:	07d9      	lsls	r1, r3, #31
 8007894:	d405      	bmi.n	80078a2 <_vfiprintf_r+0x202>
 8007896:	89ab      	ldrh	r3, [r5, #12]
 8007898:	059a      	lsls	r2, r3, #22
 800789a:	d402      	bmi.n	80078a2 <_vfiprintf_r+0x202>
 800789c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800789e:	f7ff f85a 	bl	8006956 <__retarget_lock_release_recursive>
 80078a2:	89ab      	ldrh	r3, [r5, #12]
 80078a4:	065b      	lsls	r3, r3, #25
 80078a6:	f53f af1d 	bmi.w	80076e4 <_vfiprintf_r+0x44>
 80078aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078ac:	e71c      	b.n	80076e8 <_vfiprintf_r+0x48>
 80078ae:	ab03      	add	r3, sp, #12
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	462a      	mov	r2, r5
 80078b4:	4b05      	ldr	r3, [pc, #20]	; (80078cc <_vfiprintf_r+0x22c>)
 80078b6:	a904      	add	r1, sp, #16
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7fe fdd5 	bl	8006468 <_printf_i>
 80078be:	e7e4      	b.n	800788a <_vfiprintf_r+0x1ea>
 80078c0:	08008999 	.word	0x08008999
 80078c4:	080089a3 	.word	0x080089a3
 80078c8:	08005f21 	.word	0x08005f21
 80078cc:	0800767b 	.word	0x0800767b
 80078d0:	0800899f 	.word	0x0800899f

080078d4 <malloc>:
 80078d4:	4b02      	ldr	r3, [pc, #8]	; (80078e0 <malloc+0xc>)
 80078d6:	4601      	mov	r1, r0
 80078d8:	6818      	ldr	r0, [r3, #0]
 80078da:	f000 b823 	b.w	8007924 <_malloc_r>
 80078de:	bf00      	nop
 80078e0:	20000068 	.word	0x20000068

080078e4 <sbrk_aligned>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	4e0e      	ldr	r6, [pc, #56]	; (8007920 <sbrk_aligned+0x3c>)
 80078e8:	460c      	mov	r4, r1
 80078ea:	6831      	ldr	r1, [r6, #0]
 80078ec:	4605      	mov	r5, r0
 80078ee:	b911      	cbnz	r1, 80078f6 <sbrk_aligned+0x12>
 80078f0:	f000 fe5e 	bl	80085b0 <_sbrk_r>
 80078f4:	6030      	str	r0, [r6, #0]
 80078f6:	4621      	mov	r1, r4
 80078f8:	4628      	mov	r0, r5
 80078fa:	f000 fe59 	bl	80085b0 <_sbrk_r>
 80078fe:	1c43      	adds	r3, r0, #1
 8007900:	d00a      	beq.n	8007918 <sbrk_aligned+0x34>
 8007902:	1cc4      	adds	r4, r0, #3
 8007904:	f024 0403 	bic.w	r4, r4, #3
 8007908:	42a0      	cmp	r0, r4
 800790a:	d007      	beq.n	800791c <sbrk_aligned+0x38>
 800790c:	1a21      	subs	r1, r4, r0
 800790e:	4628      	mov	r0, r5
 8007910:	f000 fe4e 	bl	80085b0 <_sbrk_r>
 8007914:	3001      	adds	r0, #1
 8007916:	d101      	bne.n	800791c <sbrk_aligned+0x38>
 8007918:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800791c:	4620      	mov	r0, r4
 800791e:	bd70      	pop	{r4, r5, r6, pc}
 8007920:	20000530 	.word	0x20000530

08007924 <_malloc_r>:
 8007924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007928:	1ccd      	adds	r5, r1, #3
 800792a:	f025 0503 	bic.w	r5, r5, #3
 800792e:	3508      	adds	r5, #8
 8007930:	2d0c      	cmp	r5, #12
 8007932:	bf38      	it	cc
 8007934:	250c      	movcc	r5, #12
 8007936:	2d00      	cmp	r5, #0
 8007938:	4607      	mov	r7, r0
 800793a:	db01      	blt.n	8007940 <_malloc_r+0x1c>
 800793c:	42a9      	cmp	r1, r5
 800793e:	d905      	bls.n	800794c <_malloc_r+0x28>
 8007940:	230c      	movs	r3, #12
 8007942:	603b      	str	r3, [r7, #0]
 8007944:	2600      	movs	r6, #0
 8007946:	4630      	mov	r0, r6
 8007948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800794c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a20 <_malloc_r+0xfc>
 8007950:	f000 f916 	bl	8007b80 <__malloc_lock>
 8007954:	f8d8 3000 	ldr.w	r3, [r8]
 8007958:	461c      	mov	r4, r3
 800795a:	bb5c      	cbnz	r4, 80079b4 <_malloc_r+0x90>
 800795c:	4629      	mov	r1, r5
 800795e:	4638      	mov	r0, r7
 8007960:	f7ff ffc0 	bl	80078e4 <sbrk_aligned>
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	4604      	mov	r4, r0
 8007968:	d155      	bne.n	8007a16 <_malloc_r+0xf2>
 800796a:	f8d8 4000 	ldr.w	r4, [r8]
 800796e:	4626      	mov	r6, r4
 8007970:	2e00      	cmp	r6, #0
 8007972:	d145      	bne.n	8007a00 <_malloc_r+0xdc>
 8007974:	2c00      	cmp	r4, #0
 8007976:	d048      	beq.n	8007a0a <_malloc_r+0xe6>
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	4631      	mov	r1, r6
 800797c:	4638      	mov	r0, r7
 800797e:	eb04 0903 	add.w	r9, r4, r3
 8007982:	f000 fe15 	bl	80085b0 <_sbrk_r>
 8007986:	4581      	cmp	r9, r0
 8007988:	d13f      	bne.n	8007a0a <_malloc_r+0xe6>
 800798a:	6821      	ldr	r1, [r4, #0]
 800798c:	1a6d      	subs	r5, r5, r1
 800798e:	4629      	mov	r1, r5
 8007990:	4638      	mov	r0, r7
 8007992:	f7ff ffa7 	bl	80078e4 <sbrk_aligned>
 8007996:	3001      	adds	r0, #1
 8007998:	d037      	beq.n	8007a0a <_malloc_r+0xe6>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	442b      	add	r3, r5
 800799e:	6023      	str	r3, [r4, #0]
 80079a0:	f8d8 3000 	ldr.w	r3, [r8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d038      	beq.n	8007a1a <_malloc_r+0xf6>
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	42a2      	cmp	r2, r4
 80079ac:	d12b      	bne.n	8007a06 <_malloc_r+0xe2>
 80079ae:	2200      	movs	r2, #0
 80079b0:	605a      	str	r2, [r3, #4]
 80079b2:	e00f      	b.n	80079d4 <_malloc_r+0xb0>
 80079b4:	6822      	ldr	r2, [r4, #0]
 80079b6:	1b52      	subs	r2, r2, r5
 80079b8:	d41f      	bmi.n	80079fa <_malloc_r+0xd6>
 80079ba:	2a0b      	cmp	r2, #11
 80079bc:	d917      	bls.n	80079ee <_malloc_r+0xca>
 80079be:	1961      	adds	r1, r4, r5
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	6025      	str	r5, [r4, #0]
 80079c4:	bf18      	it	ne
 80079c6:	6059      	strne	r1, [r3, #4]
 80079c8:	6863      	ldr	r3, [r4, #4]
 80079ca:	bf08      	it	eq
 80079cc:	f8c8 1000 	streq.w	r1, [r8]
 80079d0:	5162      	str	r2, [r4, r5]
 80079d2:	604b      	str	r3, [r1, #4]
 80079d4:	4638      	mov	r0, r7
 80079d6:	f104 060b 	add.w	r6, r4, #11
 80079da:	f000 f8d7 	bl	8007b8c <__malloc_unlock>
 80079de:	f026 0607 	bic.w	r6, r6, #7
 80079e2:	1d23      	adds	r3, r4, #4
 80079e4:	1af2      	subs	r2, r6, r3
 80079e6:	d0ae      	beq.n	8007946 <_malloc_r+0x22>
 80079e8:	1b9b      	subs	r3, r3, r6
 80079ea:	50a3      	str	r3, [r4, r2]
 80079ec:	e7ab      	b.n	8007946 <_malloc_r+0x22>
 80079ee:	42a3      	cmp	r3, r4
 80079f0:	6862      	ldr	r2, [r4, #4]
 80079f2:	d1dd      	bne.n	80079b0 <_malloc_r+0x8c>
 80079f4:	f8c8 2000 	str.w	r2, [r8]
 80079f8:	e7ec      	b.n	80079d4 <_malloc_r+0xb0>
 80079fa:	4623      	mov	r3, r4
 80079fc:	6864      	ldr	r4, [r4, #4]
 80079fe:	e7ac      	b.n	800795a <_malloc_r+0x36>
 8007a00:	4634      	mov	r4, r6
 8007a02:	6876      	ldr	r6, [r6, #4]
 8007a04:	e7b4      	b.n	8007970 <_malloc_r+0x4c>
 8007a06:	4613      	mov	r3, r2
 8007a08:	e7cc      	b.n	80079a4 <_malloc_r+0x80>
 8007a0a:	230c      	movs	r3, #12
 8007a0c:	603b      	str	r3, [r7, #0]
 8007a0e:	4638      	mov	r0, r7
 8007a10:	f000 f8bc 	bl	8007b8c <__malloc_unlock>
 8007a14:	e797      	b.n	8007946 <_malloc_r+0x22>
 8007a16:	6025      	str	r5, [r4, #0]
 8007a18:	e7dc      	b.n	80079d4 <_malloc_r+0xb0>
 8007a1a:	605b      	str	r3, [r3, #4]
 8007a1c:	deff      	udf	#255	; 0xff
 8007a1e:	bf00      	nop
 8007a20:	2000052c 	.word	0x2000052c

08007a24 <__sflush_r>:
 8007a24:	898a      	ldrh	r2, [r1, #12]
 8007a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	0710      	lsls	r0, r2, #28
 8007a2e:	460c      	mov	r4, r1
 8007a30:	d458      	bmi.n	8007ae4 <__sflush_r+0xc0>
 8007a32:	684b      	ldr	r3, [r1, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dc05      	bgt.n	8007a44 <__sflush_r+0x20>
 8007a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	dc02      	bgt.n	8007a44 <__sflush_r+0x20>
 8007a3e:	2000      	movs	r0, #0
 8007a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a46:	2e00      	cmp	r6, #0
 8007a48:	d0f9      	beq.n	8007a3e <__sflush_r+0x1a>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a50:	682f      	ldr	r7, [r5, #0]
 8007a52:	6a21      	ldr	r1, [r4, #32]
 8007a54:	602b      	str	r3, [r5, #0]
 8007a56:	d032      	beq.n	8007abe <__sflush_r+0x9a>
 8007a58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a5a:	89a3      	ldrh	r3, [r4, #12]
 8007a5c:	075a      	lsls	r2, r3, #29
 8007a5e:	d505      	bpl.n	8007a6c <__sflush_r+0x48>
 8007a60:	6863      	ldr	r3, [r4, #4]
 8007a62:	1ac0      	subs	r0, r0, r3
 8007a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a66:	b10b      	cbz	r3, 8007a6c <__sflush_r+0x48>
 8007a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a6a:	1ac0      	subs	r0, r0, r3
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4602      	mov	r2, r0
 8007a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a72:	6a21      	ldr	r1, [r4, #32]
 8007a74:	4628      	mov	r0, r5
 8007a76:	47b0      	blx	r6
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	d106      	bne.n	8007a8c <__sflush_r+0x68>
 8007a7e:	6829      	ldr	r1, [r5, #0]
 8007a80:	291d      	cmp	r1, #29
 8007a82:	d82b      	bhi.n	8007adc <__sflush_r+0xb8>
 8007a84:	4a29      	ldr	r2, [pc, #164]	; (8007b2c <__sflush_r+0x108>)
 8007a86:	410a      	asrs	r2, r1
 8007a88:	07d6      	lsls	r6, r2, #31
 8007a8a:	d427      	bmi.n	8007adc <__sflush_r+0xb8>
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	6062      	str	r2, [r4, #4]
 8007a90:	04d9      	lsls	r1, r3, #19
 8007a92:	6922      	ldr	r2, [r4, #16]
 8007a94:	6022      	str	r2, [r4, #0]
 8007a96:	d504      	bpl.n	8007aa2 <__sflush_r+0x7e>
 8007a98:	1c42      	adds	r2, r0, #1
 8007a9a:	d101      	bne.n	8007aa0 <__sflush_r+0x7c>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	b903      	cbnz	r3, 8007aa2 <__sflush_r+0x7e>
 8007aa0:	6560      	str	r0, [r4, #84]	; 0x54
 8007aa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aa4:	602f      	str	r7, [r5, #0]
 8007aa6:	2900      	cmp	r1, #0
 8007aa8:	d0c9      	beq.n	8007a3e <__sflush_r+0x1a>
 8007aaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007aae:	4299      	cmp	r1, r3
 8007ab0:	d002      	beq.n	8007ab8 <__sflush_r+0x94>
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f000 fde0 	bl	8008678 <_free_r>
 8007ab8:	2000      	movs	r0, #0
 8007aba:	6360      	str	r0, [r4, #52]	; 0x34
 8007abc:	e7c0      	b.n	8007a40 <__sflush_r+0x1c>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	47b0      	blx	r6
 8007ac4:	1c41      	adds	r1, r0, #1
 8007ac6:	d1c8      	bne.n	8007a5a <__sflush_r+0x36>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0c5      	beq.n	8007a5a <__sflush_r+0x36>
 8007ace:	2b1d      	cmp	r3, #29
 8007ad0:	d001      	beq.n	8007ad6 <__sflush_r+0xb2>
 8007ad2:	2b16      	cmp	r3, #22
 8007ad4:	d101      	bne.n	8007ada <__sflush_r+0xb6>
 8007ad6:	602f      	str	r7, [r5, #0]
 8007ad8:	e7b1      	b.n	8007a3e <__sflush_r+0x1a>
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae0:	81a3      	strh	r3, [r4, #12]
 8007ae2:	e7ad      	b.n	8007a40 <__sflush_r+0x1c>
 8007ae4:	690f      	ldr	r7, [r1, #16]
 8007ae6:	2f00      	cmp	r7, #0
 8007ae8:	d0a9      	beq.n	8007a3e <__sflush_r+0x1a>
 8007aea:	0793      	lsls	r3, r2, #30
 8007aec:	680e      	ldr	r6, [r1, #0]
 8007aee:	bf08      	it	eq
 8007af0:	694b      	ldreq	r3, [r1, #20]
 8007af2:	600f      	str	r7, [r1, #0]
 8007af4:	bf18      	it	ne
 8007af6:	2300      	movne	r3, #0
 8007af8:	eba6 0807 	sub.w	r8, r6, r7
 8007afc:	608b      	str	r3, [r1, #8]
 8007afe:	f1b8 0f00 	cmp.w	r8, #0
 8007b02:	dd9c      	ble.n	8007a3e <__sflush_r+0x1a>
 8007b04:	6a21      	ldr	r1, [r4, #32]
 8007b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b08:	4643      	mov	r3, r8
 8007b0a:	463a      	mov	r2, r7
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	47b0      	blx	r6
 8007b10:	2800      	cmp	r0, #0
 8007b12:	dc06      	bgt.n	8007b22 <__sflush_r+0xfe>
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b1a:	81a3      	strh	r3, [r4, #12]
 8007b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b20:	e78e      	b.n	8007a40 <__sflush_r+0x1c>
 8007b22:	4407      	add	r7, r0
 8007b24:	eba8 0800 	sub.w	r8, r8, r0
 8007b28:	e7e9      	b.n	8007afe <__sflush_r+0xda>
 8007b2a:	bf00      	nop
 8007b2c:	dfbffffe 	.word	0xdfbffffe

08007b30 <_fflush_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	690b      	ldr	r3, [r1, #16]
 8007b34:	4605      	mov	r5, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	b913      	cbnz	r3, 8007b40 <_fflush_r+0x10>
 8007b3a:	2500      	movs	r5, #0
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	b118      	cbz	r0, 8007b4a <_fflush_r+0x1a>
 8007b42:	6a03      	ldr	r3, [r0, #32]
 8007b44:	b90b      	cbnz	r3, 8007b4a <_fflush_r+0x1a>
 8007b46:	f7fe fe2b 	bl	80067a0 <__sinit>
 8007b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0f3      	beq.n	8007b3a <_fflush_r+0xa>
 8007b52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b54:	07d0      	lsls	r0, r2, #31
 8007b56:	d404      	bmi.n	8007b62 <_fflush_r+0x32>
 8007b58:	0599      	lsls	r1, r3, #22
 8007b5a:	d402      	bmi.n	8007b62 <_fflush_r+0x32>
 8007b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b5e:	f7fe fef9 	bl	8006954 <__retarget_lock_acquire_recursive>
 8007b62:	4628      	mov	r0, r5
 8007b64:	4621      	mov	r1, r4
 8007b66:	f7ff ff5d 	bl	8007a24 <__sflush_r>
 8007b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b6c:	07da      	lsls	r2, r3, #31
 8007b6e:	4605      	mov	r5, r0
 8007b70:	d4e4      	bmi.n	8007b3c <_fflush_r+0xc>
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	059b      	lsls	r3, r3, #22
 8007b76:	d4e1      	bmi.n	8007b3c <_fflush_r+0xc>
 8007b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b7a:	f7fe feec 	bl	8006956 <__retarget_lock_release_recursive>
 8007b7e:	e7dd      	b.n	8007b3c <_fflush_r+0xc>

08007b80 <__malloc_lock>:
 8007b80:	4801      	ldr	r0, [pc, #4]	; (8007b88 <__malloc_lock+0x8>)
 8007b82:	f7fe bee7 	b.w	8006954 <__retarget_lock_acquire_recursive>
 8007b86:	bf00      	nop
 8007b88:	20000528 	.word	0x20000528

08007b8c <__malloc_unlock>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	; (8007b94 <__malloc_unlock+0x8>)
 8007b8e:	f7fe bee2 	b.w	8006956 <__retarget_lock_release_recursive>
 8007b92:	bf00      	nop
 8007b94:	20000528 	.word	0x20000528

08007b98 <_Balloc>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	69c6      	ldr	r6, [r0, #28]
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	460d      	mov	r5, r1
 8007ba0:	b976      	cbnz	r6, 8007bc0 <_Balloc+0x28>
 8007ba2:	2010      	movs	r0, #16
 8007ba4:	f7ff fe96 	bl	80078d4 <malloc>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	61e0      	str	r0, [r4, #28]
 8007bac:	b920      	cbnz	r0, 8007bb8 <_Balloc+0x20>
 8007bae:	4b18      	ldr	r3, [pc, #96]	; (8007c10 <_Balloc+0x78>)
 8007bb0:	4818      	ldr	r0, [pc, #96]	; (8007c14 <_Balloc+0x7c>)
 8007bb2:	216b      	movs	r1, #107	; 0x6b
 8007bb4:	f000 fd2c 	bl	8008610 <__assert_func>
 8007bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bbc:	6006      	str	r6, [r0, #0]
 8007bbe:	60c6      	str	r6, [r0, #12]
 8007bc0:	69e6      	ldr	r6, [r4, #28]
 8007bc2:	68f3      	ldr	r3, [r6, #12]
 8007bc4:	b183      	cbz	r3, 8007be8 <_Balloc+0x50>
 8007bc6:	69e3      	ldr	r3, [r4, #28]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bce:	b9b8      	cbnz	r0, 8007c00 <_Balloc+0x68>
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	fa01 f605 	lsl.w	r6, r1, r5
 8007bd6:	1d72      	adds	r2, r6, #5
 8007bd8:	0092      	lsls	r2, r2, #2
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f000 fd36 	bl	800864c <_calloc_r>
 8007be0:	b160      	cbz	r0, 8007bfc <_Balloc+0x64>
 8007be2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007be6:	e00e      	b.n	8007c06 <_Balloc+0x6e>
 8007be8:	2221      	movs	r2, #33	; 0x21
 8007bea:	2104      	movs	r1, #4
 8007bec:	4620      	mov	r0, r4
 8007bee:	f000 fd2d 	bl	800864c <_calloc_r>
 8007bf2:	69e3      	ldr	r3, [r4, #28]
 8007bf4:	60f0      	str	r0, [r6, #12]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1e4      	bne.n	8007bc6 <_Balloc+0x2e>
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	6802      	ldr	r2, [r0, #0]
 8007c02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c06:	2300      	movs	r3, #0
 8007c08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c0c:	e7f7      	b.n	8007bfe <_Balloc+0x66>
 8007c0e:	bf00      	nop
 8007c10:	08008919 	.word	0x08008919
 8007c14:	080089aa 	.word	0x080089aa

08007c18 <_Bfree>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	69c6      	ldr	r6, [r0, #28]
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	b976      	cbnz	r6, 8007c40 <_Bfree+0x28>
 8007c22:	2010      	movs	r0, #16
 8007c24:	f7ff fe56 	bl	80078d4 <malloc>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	61e8      	str	r0, [r5, #28]
 8007c2c:	b920      	cbnz	r0, 8007c38 <_Bfree+0x20>
 8007c2e:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <_Bfree+0x3c>)
 8007c30:	4809      	ldr	r0, [pc, #36]	; (8007c58 <_Bfree+0x40>)
 8007c32:	218f      	movs	r1, #143	; 0x8f
 8007c34:	f000 fcec 	bl	8008610 <__assert_func>
 8007c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c3c:	6006      	str	r6, [r0, #0]
 8007c3e:	60c6      	str	r6, [r0, #12]
 8007c40:	b13c      	cbz	r4, 8007c52 <_Bfree+0x3a>
 8007c42:	69eb      	ldr	r3, [r5, #28]
 8007c44:	6862      	ldr	r2, [r4, #4]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c4c:	6021      	str	r1, [r4, #0]
 8007c4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c52:	bd70      	pop	{r4, r5, r6, pc}
 8007c54:	08008919 	.word	0x08008919
 8007c58:	080089aa 	.word	0x080089aa

08007c5c <__multadd>:
 8007c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c60:	690d      	ldr	r5, [r1, #16]
 8007c62:	4607      	mov	r7, r0
 8007c64:	460c      	mov	r4, r1
 8007c66:	461e      	mov	r6, r3
 8007c68:	f101 0c14 	add.w	ip, r1, #20
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	f8dc 3000 	ldr.w	r3, [ip]
 8007c72:	b299      	uxth	r1, r3
 8007c74:	fb02 6101 	mla	r1, r2, r1, r6
 8007c78:	0c1e      	lsrs	r6, r3, #16
 8007c7a:	0c0b      	lsrs	r3, r1, #16
 8007c7c:	fb02 3306 	mla	r3, r2, r6, r3
 8007c80:	b289      	uxth	r1, r1
 8007c82:	3001      	adds	r0, #1
 8007c84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c88:	4285      	cmp	r5, r0
 8007c8a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c92:	dcec      	bgt.n	8007c6e <__multadd+0x12>
 8007c94:	b30e      	cbz	r6, 8007cda <__multadd+0x7e>
 8007c96:	68a3      	ldr	r3, [r4, #8]
 8007c98:	42ab      	cmp	r3, r5
 8007c9a:	dc19      	bgt.n	8007cd0 <__multadd+0x74>
 8007c9c:	6861      	ldr	r1, [r4, #4]
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	3101      	adds	r1, #1
 8007ca2:	f7ff ff79 	bl	8007b98 <_Balloc>
 8007ca6:	4680      	mov	r8, r0
 8007ca8:	b928      	cbnz	r0, 8007cb6 <__multadd+0x5a>
 8007caa:	4602      	mov	r2, r0
 8007cac:	4b0c      	ldr	r3, [pc, #48]	; (8007ce0 <__multadd+0x84>)
 8007cae:	480d      	ldr	r0, [pc, #52]	; (8007ce4 <__multadd+0x88>)
 8007cb0:	21ba      	movs	r1, #186	; 0xba
 8007cb2:	f000 fcad 	bl	8008610 <__assert_func>
 8007cb6:	6922      	ldr	r2, [r4, #16]
 8007cb8:	3202      	adds	r2, #2
 8007cba:	f104 010c 	add.w	r1, r4, #12
 8007cbe:	0092      	lsls	r2, r2, #2
 8007cc0:	300c      	adds	r0, #12
 8007cc2:	f000 fc97 	bl	80085f4 <memcpy>
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4638      	mov	r0, r7
 8007cca:	f7ff ffa5 	bl	8007c18 <_Bfree>
 8007cce:	4644      	mov	r4, r8
 8007cd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cd4:	3501      	adds	r5, #1
 8007cd6:	615e      	str	r6, [r3, #20]
 8007cd8:	6125      	str	r5, [r4, #16]
 8007cda:	4620      	mov	r0, r4
 8007cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ce0:	08008988 	.word	0x08008988
 8007ce4:	080089aa 	.word	0x080089aa

08007ce8 <__hi0bits>:
 8007ce8:	0c03      	lsrs	r3, r0, #16
 8007cea:	041b      	lsls	r3, r3, #16
 8007cec:	b9d3      	cbnz	r3, 8007d24 <__hi0bits+0x3c>
 8007cee:	0400      	lsls	r0, r0, #16
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007cf6:	bf04      	itt	eq
 8007cf8:	0200      	lsleq	r0, r0, #8
 8007cfa:	3308      	addeq	r3, #8
 8007cfc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d00:	bf04      	itt	eq
 8007d02:	0100      	lsleq	r0, r0, #4
 8007d04:	3304      	addeq	r3, #4
 8007d06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d0a:	bf04      	itt	eq
 8007d0c:	0080      	lsleq	r0, r0, #2
 8007d0e:	3302      	addeq	r3, #2
 8007d10:	2800      	cmp	r0, #0
 8007d12:	db05      	blt.n	8007d20 <__hi0bits+0x38>
 8007d14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d18:	f103 0301 	add.w	r3, r3, #1
 8007d1c:	bf08      	it	eq
 8007d1e:	2320      	moveq	r3, #32
 8007d20:	4618      	mov	r0, r3
 8007d22:	4770      	bx	lr
 8007d24:	2300      	movs	r3, #0
 8007d26:	e7e4      	b.n	8007cf2 <__hi0bits+0xa>

08007d28 <__lo0bits>:
 8007d28:	6803      	ldr	r3, [r0, #0]
 8007d2a:	f013 0207 	ands.w	r2, r3, #7
 8007d2e:	d00c      	beq.n	8007d4a <__lo0bits+0x22>
 8007d30:	07d9      	lsls	r1, r3, #31
 8007d32:	d422      	bmi.n	8007d7a <__lo0bits+0x52>
 8007d34:	079a      	lsls	r2, r3, #30
 8007d36:	bf49      	itett	mi
 8007d38:	085b      	lsrmi	r3, r3, #1
 8007d3a:	089b      	lsrpl	r3, r3, #2
 8007d3c:	6003      	strmi	r3, [r0, #0]
 8007d3e:	2201      	movmi	r2, #1
 8007d40:	bf5c      	itt	pl
 8007d42:	6003      	strpl	r3, [r0, #0]
 8007d44:	2202      	movpl	r2, #2
 8007d46:	4610      	mov	r0, r2
 8007d48:	4770      	bx	lr
 8007d4a:	b299      	uxth	r1, r3
 8007d4c:	b909      	cbnz	r1, 8007d52 <__lo0bits+0x2a>
 8007d4e:	0c1b      	lsrs	r3, r3, #16
 8007d50:	2210      	movs	r2, #16
 8007d52:	b2d9      	uxtb	r1, r3
 8007d54:	b909      	cbnz	r1, 8007d5a <__lo0bits+0x32>
 8007d56:	3208      	adds	r2, #8
 8007d58:	0a1b      	lsrs	r3, r3, #8
 8007d5a:	0719      	lsls	r1, r3, #28
 8007d5c:	bf04      	itt	eq
 8007d5e:	091b      	lsreq	r3, r3, #4
 8007d60:	3204      	addeq	r2, #4
 8007d62:	0799      	lsls	r1, r3, #30
 8007d64:	bf04      	itt	eq
 8007d66:	089b      	lsreq	r3, r3, #2
 8007d68:	3202      	addeq	r2, #2
 8007d6a:	07d9      	lsls	r1, r3, #31
 8007d6c:	d403      	bmi.n	8007d76 <__lo0bits+0x4e>
 8007d6e:	085b      	lsrs	r3, r3, #1
 8007d70:	f102 0201 	add.w	r2, r2, #1
 8007d74:	d003      	beq.n	8007d7e <__lo0bits+0x56>
 8007d76:	6003      	str	r3, [r0, #0]
 8007d78:	e7e5      	b.n	8007d46 <__lo0bits+0x1e>
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	e7e3      	b.n	8007d46 <__lo0bits+0x1e>
 8007d7e:	2220      	movs	r2, #32
 8007d80:	e7e1      	b.n	8007d46 <__lo0bits+0x1e>
	...

08007d84 <__i2b>:
 8007d84:	b510      	push	{r4, lr}
 8007d86:	460c      	mov	r4, r1
 8007d88:	2101      	movs	r1, #1
 8007d8a:	f7ff ff05 	bl	8007b98 <_Balloc>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	b928      	cbnz	r0, 8007d9e <__i2b+0x1a>
 8007d92:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <__i2b+0x24>)
 8007d94:	4805      	ldr	r0, [pc, #20]	; (8007dac <__i2b+0x28>)
 8007d96:	f240 1145 	movw	r1, #325	; 0x145
 8007d9a:	f000 fc39 	bl	8008610 <__assert_func>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	6144      	str	r4, [r0, #20]
 8007da2:	6103      	str	r3, [r0, #16]
 8007da4:	bd10      	pop	{r4, pc}
 8007da6:	bf00      	nop
 8007da8:	08008988 	.word	0x08008988
 8007dac:	080089aa 	.word	0x080089aa

08007db0 <__multiply>:
 8007db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db4:	4691      	mov	r9, r2
 8007db6:	690a      	ldr	r2, [r1, #16]
 8007db8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	bfb8      	it	lt
 8007dc0:	460b      	movlt	r3, r1
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	bfbc      	itt	lt
 8007dc6:	464c      	movlt	r4, r9
 8007dc8:	4699      	movlt	r9, r3
 8007dca:	6927      	ldr	r7, [r4, #16]
 8007dcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007dd0:	68a3      	ldr	r3, [r4, #8]
 8007dd2:	6861      	ldr	r1, [r4, #4]
 8007dd4:	eb07 060a 	add.w	r6, r7, sl
 8007dd8:	42b3      	cmp	r3, r6
 8007dda:	b085      	sub	sp, #20
 8007ddc:	bfb8      	it	lt
 8007dde:	3101      	addlt	r1, #1
 8007de0:	f7ff feda 	bl	8007b98 <_Balloc>
 8007de4:	b930      	cbnz	r0, 8007df4 <__multiply+0x44>
 8007de6:	4602      	mov	r2, r0
 8007de8:	4b44      	ldr	r3, [pc, #272]	; (8007efc <__multiply+0x14c>)
 8007dea:	4845      	ldr	r0, [pc, #276]	; (8007f00 <__multiply+0x150>)
 8007dec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007df0:	f000 fc0e 	bl	8008610 <__assert_func>
 8007df4:	f100 0514 	add.w	r5, r0, #20
 8007df8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007dfc:	462b      	mov	r3, r5
 8007dfe:	2200      	movs	r2, #0
 8007e00:	4543      	cmp	r3, r8
 8007e02:	d321      	bcc.n	8007e48 <__multiply+0x98>
 8007e04:	f104 0314 	add.w	r3, r4, #20
 8007e08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e0c:	f109 0314 	add.w	r3, r9, #20
 8007e10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007e14:	9202      	str	r2, [sp, #8]
 8007e16:	1b3a      	subs	r2, r7, r4
 8007e18:	3a15      	subs	r2, #21
 8007e1a:	f022 0203 	bic.w	r2, r2, #3
 8007e1e:	3204      	adds	r2, #4
 8007e20:	f104 0115 	add.w	r1, r4, #21
 8007e24:	428f      	cmp	r7, r1
 8007e26:	bf38      	it	cc
 8007e28:	2204      	movcc	r2, #4
 8007e2a:	9201      	str	r2, [sp, #4]
 8007e2c:	9a02      	ldr	r2, [sp, #8]
 8007e2e:	9303      	str	r3, [sp, #12]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d80c      	bhi.n	8007e4e <__multiply+0x9e>
 8007e34:	2e00      	cmp	r6, #0
 8007e36:	dd03      	ble.n	8007e40 <__multiply+0x90>
 8007e38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d05b      	beq.n	8007ef8 <__multiply+0x148>
 8007e40:	6106      	str	r6, [r0, #16]
 8007e42:	b005      	add	sp, #20
 8007e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e48:	f843 2b04 	str.w	r2, [r3], #4
 8007e4c:	e7d8      	b.n	8007e00 <__multiply+0x50>
 8007e4e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e52:	f1ba 0f00 	cmp.w	sl, #0
 8007e56:	d024      	beq.n	8007ea2 <__multiply+0xf2>
 8007e58:	f104 0e14 	add.w	lr, r4, #20
 8007e5c:	46a9      	mov	r9, r5
 8007e5e:	f04f 0c00 	mov.w	ip, #0
 8007e62:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007e66:	f8d9 1000 	ldr.w	r1, [r9]
 8007e6a:	fa1f fb82 	uxth.w	fp, r2
 8007e6e:	b289      	uxth	r1, r1
 8007e70:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007e78:	f8d9 2000 	ldr.w	r2, [r9]
 8007e7c:	4461      	add	r1, ip
 8007e7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e82:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e8a:	b289      	uxth	r1, r1
 8007e8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e90:	4577      	cmp	r7, lr
 8007e92:	f849 1b04 	str.w	r1, [r9], #4
 8007e96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e9a:	d8e2      	bhi.n	8007e62 <__multiply+0xb2>
 8007e9c:	9a01      	ldr	r2, [sp, #4]
 8007e9e:	f845 c002 	str.w	ip, [r5, r2]
 8007ea2:	9a03      	ldr	r2, [sp, #12]
 8007ea4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	f1b9 0f00 	cmp.w	r9, #0
 8007eae:	d021      	beq.n	8007ef4 <__multiply+0x144>
 8007eb0:	6829      	ldr	r1, [r5, #0]
 8007eb2:	f104 0c14 	add.w	ip, r4, #20
 8007eb6:	46ae      	mov	lr, r5
 8007eb8:	f04f 0a00 	mov.w	sl, #0
 8007ebc:	f8bc b000 	ldrh.w	fp, [ip]
 8007ec0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ec4:	fb09 220b 	mla	r2, r9, fp, r2
 8007ec8:	4452      	add	r2, sl
 8007eca:	b289      	uxth	r1, r1
 8007ecc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ed0:	f84e 1b04 	str.w	r1, [lr], #4
 8007ed4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ed8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007edc:	f8be 1000 	ldrh.w	r1, [lr]
 8007ee0:	fb09 110a 	mla	r1, r9, sl, r1
 8007ee4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007ee8:	4567      	cmp	r7, ip
 8007eea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007eee:	d8e5      	bhi.n	8007ebc <__multiply+0x10c>
 8007ef0:	9a01      	ldr	r2, [sp, #4]
 8007ef2:	50a9      	str	r1, [r5, r2]
 8007ef4:	3504      	adds	r5, #4
 8007ef6:	e799      	b.n	8007e2c <__multiply+0x7c>
 8007ef8:	3e01      	subs	r6, #1
 8007efa:	e79b      	b.n	8007e34 <__multiply+0x84>
 8007efc:	08008988 	.word	0x08008988
 8007f00:	080089aa 	.word	0x080089aa

08007f04 <__pow5mult>:
 8007f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f08:	4615      	mov	r5, r2
 8007f0a:	f012 0203 	ands.w	r2, r2, #3
 8007f0e:	4606      	mov	r6, r0
 8007f10:	460f      	mov	r7, r1
 8007f12:	d007      	beq.n	8007f24 <__pow5mult+0x20>
 8007f14:	4c25      	ldr	r4, [pc, #148]	; (8007fac <__pow5mult+0xa8>)
 8007f16:	3a01      	subs	r2, #1
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f1e:	f7ff fe9d 	bl	8007c5c <__multadd>
 8007f22:	4607      	mov	r7, r0
 8007f24:	10ad      	asrs	r5, r5, #2
 8007f26:	d03d      	beq.n	8007fa4 <__pow5mult+0xa0>
 8007f28:	69f4      	ldr	r4, [r6, #28]
 8007f2a:	b97c      	cbnz	r4, 8007f4c <__pow5mult+0x48>
 8007f2c:	2010      	movs	r0, #16
 8007f2e:	f7ff fcd1 	bl	80078d4 <malloc>
 8007f32:	4602      	mov	r2, r0
 8007f34:	61f0      	str	r0, [r6, #28]
 8007f36:	b928      	cbnz	r0, 8007f44 <__pow5mult+0x40>
 8007f38:	4b1d      	ldr	r3, [pc, #116]	; (8007fb0 <__pow5mult+0xac>)
 8007f3a:	481e      	ldr	r0, [pc, #120]	; (8007fb4 <__pow5mult+0xb0>)
 8007f3c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007f40:	f000 fb66 	bl	8008610 <__assert_func>
 8007f44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f48:	6004      	str	r4, [r0, #0]
 8007f4a:	60c4      	str	r4, [r0, #12]
 8007f4c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007f50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f54:	b94c      	cbnz	r4, 8007f6a <__pow5mult+0x66>
 8007f56:	f240 2171 	movw	r1, #625	; 0x271
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7ff ff12 	bl	8007d84 <__i2b>
 8007f60:	2300      	movs	r3, #0
 8007f62:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f66:	4604      	mov	r4, r0
 8007f68:	6003      	str	r3, [r0, #0]
 8007f6a:	f04f 0900 	mov.w	r9, #0
 8007f6e:	07eb      	lsls	r3, r5, #31
 8007f70:	d50a      	bpl.n	8007f88 <__pow5mult+0x84>
 8007f72:	4639      	mov	r1, r7
 8007f74:	4622      	mov	r2, r4
 8007f76:	4630      	mov	r0, r6
 8007f78:	f7ff ff1a 	bl	8007db0 <__multiply>
 8007f7c:	4639      	mov	r1, r7
 8007f7e:	4680      	mov	r8, r0
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7ff fe49 	bl	8007c18 <_Bfree>
 8007f86:	4647      	mov	r7, r8
 8007f88:	106d      	asrs	r5, r5, #1
 8007f8a:	d00b      	beq.n	8007fa4 <__pow5mult+0xa0>
 8007f8c:	6820      	ldr	r0, [r4, #0]
 8007f8e:	b938      	cbnz	r0, 8007fa0 <__pow5mult+0x9c>
 8007f90:	4622      	mov	r2, r4
 8007f92:	4621      	mov	r1, r4
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7ff ff0b 	bl	8007db0 <__multiply>
 8007f9a:	6020      	str	r0, [r4, #0]
 8007f9c:	f8c0 9000 	str.w	r9, [r0]
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	e7e4      	b.n	8007f6e <__pow5mult+0x6a>
 8007fa4:	4638      	mov	r0, r7
 8007fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007faa:	bf00      	nop
 8007fac:	08008af8 	.word	0x08008af8
 8007fb0:	08008919 	.word	0x08008919
 8007fb4:	080089aa 	.word	0x080089aa

08007fb8 <__lshift>:
 8007fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	6849      	ldr	r1, [r1, #4]
 8007fc0:	6923      	ldr	r3, [r4, #16]
 8007fc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007fc6:	68a3      	ldr	r3, [r4, #8]
 8007fc8:	4607      	mov	r7, r0
 8007fca:	4691      	mov	r9, r2
 8007fcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fd0:	f108 0601 	add.w	r6, r8, #1
 8007fd4:	42b3      	cmp	r3, r6
 8007fd6:	db0b      	blt.n	8007ff0 <__lshift+0x38>
 8007fd8:	4638      	mov	r0, r7
 8007fda:	f7ff fddd 	bl	8007b98 <_Balloc>
 8007fde:	4605      	mov	r5, r0
 8007fe0:	b948      	cbnz	r0, 8007ff6 <__lshift+0x3e>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	4b28      	ldr	r3, [pc, #160]	; (8008088 <__lshift+0xd0>)
 8007fe6:	4829      	ldr	r0, [pc, #164]	; (800808c <__lshift+0xd4>)
 8007fe8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007fec:	f000 fb10 	bl	8008610 <__assert_func>
 8007ff0:	3101      	adds	r1, #1
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	e7ee      	b.n	8007fd4 <__lshift+0x1c>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	f100 0114 	add.w	r1, r0, #20
 8007ffc:	f100 0210 	add.w	r2, r0, #16
 8008000:	4618      	mov	r0, r3
 8008002:	4553      	cmp	r3, sl
 8008004:	db33      	blt.n	800806e <__lshift+0xb6>
 8008006:	6920      	ldr	r0, [r4, #16]
 8008008:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800800c:	f104 0314 	add.w	r3, r4, #20
 8008010:	f019 091f 	ands.w	r9, r9, #31
 8008014:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008018:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800801c:	d02b      	beq.n	8008076 <__lshift+0xbe>
 800801e:	f1c9 0e20 	rsb	lr, r9, #32
 8008022:	468a      	mov	sl, r1
 8008024:	2200      	movs	r2, #0
 8008026:	6818      	ldr	r0, [r3, #0]
 8008028:	fa00 f009 	lsl.w	r0, r0, r9
 800802c:	4310      	orrs	r0, r2
 800802e:	f84a 0b04 	str.w	r0, [sl], #4
 8008032:	f853 2b04 	ldr.w	r2, [r3], #4
 8008036:	459c      	cmp	ip, r3
 8008038:	fa22 f20e 	lsr.w	r2, r2, lr
 800803c:	d8f3      	bhi.n	8008026 <__lshift+0x6e>
 800803e:	ebac 0304 	sub.w	r3, ip, r4
 8008042:	3b15      	subs	r3, #21
 8008044:	f023 0303 	bic.w	r3, r3, #3
 8008048:	3304      	adds	r3, #4
 800804a:	f104 0015 	add.w	r0, r4, #21
 800804e:	4584      	cmp	ip, r0
 8008050:	bf38      	it	cc
 8008052:	2304      	movcc	r3, #4
 8008054:	50ca      	str	r2, [r1, r3]
 8008056:	b10a      	cbz	r2, 800805c <__lshift+0xa4>
 8008058:	f108 0602 	add.w	r6, r8, #2
 800805c:	3e01      	subs	r6, #1
 800805e:	4638      	mov	r0, r7
 8008060:	612e      	str	r6, [r5, #16]
 8008062:	4621      	mov	r1, r4
 8008064:	f7ff fdd8 	bl	8007c18 <_Bfree>
 8008068:	4628      	mov	r0, r5
 800806a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008072:	3301      	adds	r3, #1
 8008074:	e7c5      	b.n	8008002 <__lshift+0x4a>
 8008076:	3904      	subs	r1, #4
 8008078:	f853 2b04 	ldr.w	r2, [r3], #4
 800807c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008080:	459c      	cmp	ip, r3
 8008082:	d8f9      	bhi.n	8008078 <__lshift+0xc0>
 8008084:	e7ea      	b.n	800805c <__lshift+0xa4>
 8008086:	bf00      	nop
 8008088:	08008988 	.word	0x08008988
 800808c:	080089aa 	.word	0x080089aa

08008090 <__mcmp>:
 8008090:	b530      	push	{r4, r5, lr}
 8008092:	6902      	ldr	r2, [r0, #16]
 8008094:	690c      	ldr	r4, [r1, #16]
 8008096:	1b12      	subs	r2, r2, r4
 8008098:	d10e      	bne.n	80080b8 <__mcmp+0x28>
 800809a:	f100 0314 	add.w	r3, r0, #20
 800809e:	3114      	adds	r1, #20
 80080a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80080a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80080a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80080ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80080b0:	42a5      	cmp	r5, r4
 80080b2:	d003      	beq.n	80080bc <__mcmp+0x2c>
 80080b4:	d305      	bcc.n	80080c2 <__mcmp+0x32>
 80080b6:	2201      	movs	r2, #1
 80080b8:	4610      	mov	r0, r2
 80080ba:	bd30      	pop	{r4, r5, pc}
 80080bc:	4283      	cmp	r3, r0
 80080be:	d3f3      	bcc.n	80080a8 <__mcmp+0x18>
 80080c0:	e7fa      	b.n	80080b8 <__mcmp+0x28>
 80080c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080c6:	e7f7      	b.n	80080b8 <__mcmp+0x28>

080080c8 <__mdiff>:
 80080c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	460c      	mov	r4, r1
 80080ce:	4606      	mov	r6, r0
 80080d0:	4611      	mov	r1, r2
 80080d2:	4620      	mov	r0, r4
 80080d4:	4690      	mov	r8, r2
 80080d6:	f7ff ffdb 	bl	8008090 <__mcmp>
 80080da:	1e05      	subs	r5, r0, #0
 80080dc:	d110      	bne.n	8008100 <__mdiff+0x38>
 80080de:	4629      	mov	r1, r5
 80080e0:	4630      	mov	r0, r6
 80080e2:	f7ff fd59 	bl	8007b98 <_Balloc>
 80080e6:	b930      	cbnz	r0, 80080f6 <__mdiff+0x2e>
 80080e8:	4b3a      	ldr	r3, [pc, #232]	; (80081d4 <__mdiff+0x10c>)
 80080ea:	4602      	mov	r2, r0
 80080ec:	f240 2137 	movw	r1, #567	; 0x237
 80080f0:	4839      	ldr	r0, [pc, #228]	; (80081d8 <__mdiff+0x110>)
 80080f2:	f000 fa8d 	bl	8008610 <__assert_func>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008100:	bfa4      	itt	ge
 8008102:	4643      	movge	r3, r8
 8008104:	46a0      	movge	r8, r4
 8008106:	4630      	mov	r0, r6
 8008108:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800810c:	bfa6      	itte	ge
 800810e:	461c      	movge	r4, r3
 8008110:	2500      	movge	r5, #0
 8008112:	2501      	movlt	r5, #1
 8008114:	f7ff fd40 	bl	8007b98 <_Balloc>
 8008118:	b920      	cbnz	r0, 8008124 <__mdiff+0x5c>
 800811a:	4b2e      	ldr	r3, [pc, #184]	; (80081d4 <__mdiff+0x10c>)
 800811c:	4602      	mov	r2, r0
 800811e:	f240 2145 	movw	r1, #581	; 0x245
 8008122:	e7e5      	b.n	80080f0 <__mdiff+0x28>
 8008124:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008128:	6926      	ldr	r6, [r4, #16]
 800812a:	60c5      	str	r5, [r0, #12]
 800812c:	f104 0914 	add.w	r9, r4, #20
 8008130:	f108 0514 	add.w	r5, r8, #20
 8008134:	f100 0e14 	add.w	lr, r0, #20
 8008138:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800813c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008140:	f108 0210 	add.w	r2, r8, #16
 8008144:	46f2      	mov	sl, lr
 8008146:	2100      	movs	r1, #0
 8008148:	f859 3b04 	ldr.w	r3, [r9], #4
 800814c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008150:	fa11 f88b 	uxtah	r8, r1, fp
 8008154:	b299      	uxth	r1, r3
 8008156:	0c1b      	lsrs	r3, r3, #16
 8008158:	eba8 0801 	sub.w	r8, r8, r1
 800815c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008160:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008164:	fa1f f888 	uxth.w	r8, r8
 8008168:	1419      	asrs	r1, r3, #16
 800816a:	454e      	cmp	r6, r9
 800816c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008170:	f84a 3b04 	str.w	r3, [sl], #4
 8008174:	d8e8      	bhi.n	8008148 <__mdiff+0x80>
 8008176:	1b33      	subs	r3, r6, r4
 8008178:	3b15      	subs	r3, #21
 800817a:	f023 0303 	bic.w	r3, r3, #3
 800817e:	3304      	adds	r3, #4
 8008180:	3415      	adds	r4, #21
 8008182:	42a6      	cmp	r6, r4
 8008184:	bf38      	it	cc
 8008186:	2304      	movcc	r3, #4
 8008188:	441d      	add	r5, r3
 800818a:	4473      	add	r3, lr
 800818c:	469e      	mov	lr, r3
 800818e:	462e      	mov	r6, r5
 8008190:	4566      	cmp	r6, ip
 8008192:	d30e      	bcc.n	80081b2 <__mdiff+0xea>
 8008194:	f10c 0203 	add.w	r2, ip, #3
 8008198:	1b52      	subs	r2, r2, r5
 800819a:	f022 0203 	bic.w	r2, r2, #3
 800819e:	3d03      	subs	r5, #3
 80081a0:	45ac      	cmp	ip, r5
 80081a2:	bf38      	it	cc
 80081a4:	2200      	movcc	r2, #0
 80081a6:	4413      	add	r3, r2
 80081a8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80081ac:	b17a      	cbz	r2, 80081ce <__mdiff+0x106>
 80081ae:	6107      	str	r7, [r0, #16]
 80081b0:	e7a4      	b.n	80080fc <__mdiff+0x34>
 80081b2:	f856 8b04 	ldr.w	r8, [r6], #4
 80081b6:	fa11 f288 	uxtah	r2, r1, r8
 80081ba:	1414      	asrs	r4, r2, #16
 80081bc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80081c0:	b292      	uxth	r2, r2
 80081c2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80081c6:	f84e 2b04 	str.w	r2, [lr], #4
 80081ca:	1421      	asrs	r1, r4, #16
 80081cc:	e7e0      	b.n	8008190 <__mdiff+0xc8>
 80081ce:	3f01      	subs	r7, #1
 80081d0:	e7ea      	b.n	80081a8 <__mdiff+0xe0>
 80081d2:	bf00      	nop
 80081d4:	08008988 	.word	0x08008988
 80081d8:	080089aa 	.word	0x080089aa

080081dc <__d2b>:
 80081dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081e0:	460f      	mov	r7, r1
 80081e2:	2101      	movs	r1, #1
 80081e4:	ec59 8b10 	vmov	r8, r9, d0
 80081e8:	4616      	mov	r6, r2
 80081ea:	f7ff fcd5 	bl	8007b98 <_Balloc>
 80081ee:	4604      	mov	r4, r0
 80081f0:	b930      	cbnz	r0, 8008200 <__d2b+0x24>
 80081f2:	4602      	mov	r2, r0
 80081f4:	4b24      	ldr	r3, [pc, #144]	; (8008288 <__d2b+0xac>)
 80081f6:	4825      	ldr	r0, [pc, #148]	; (800828c <__d2b+0xb0>)
 80081f8:	f240 310f 	movw	r1, #783	; 0x30f
 80081fc:	f000 fa08 	bl	8008610 <__assert_func>
 8008200:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008204:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008208:	bb2d      	cbnz	r5, 8008256 <__d2b+0x7a>
 800820a:	9301      	str	r3, [sp, #4]
 800820c:	f1b8 0300 	subs.w	r3, r8, #0
 8008210:	d026      	beq.n	8008260 <__d2b+0x84>
 8008212:	4668      	mov	r0, sp
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	f7ff fd87 	bl	8007d28 <__lo0bits>
 800821a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800821e:	b1e8      	cbz	r0, 800825c <__d2b+0x80>
 8008220:	f1c0 0320 	rsb	r3, r0, #32
 8008224:	fa02 f303 	lsl.w	r3, r2, r3
 8008228:	430b      	orrs	r3, r1
 800822a:	40c2      	lsrs	r2, r0
 800822c:	6163      	str	r3, [r4, #20]
 800822e:	9201      	str	r2, [sp, #4]
 8008230:	9b01      	ldr	r3, [sp, #4]
 8008232:	61a3      	str	r3, [r4, #24]
 8008234:	2b00      	cmp	r3, #0
 8008236:	bf14      	ite	ne
 8008238:	2202      	movne	r2, #2
 800823a:	2201      	moveq	r2, #1
 800823c:	6122      	str	r2, [r4, #16]
 800823e:	b1bd      	cbz	r5, 8008270 <__d2b+0x94>
 8008240:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008244:	4405      	add	r5, r0
 8008246:	603d      	str	r5, [r7, #0]
 8008248:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800824c:	6030      	str	r0, [r6, #0]
 800824e:	4620      	mov	r0, r4
 8008250:	b003      	add	sp, #12
 8008252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800825a:	e7d6      	b.n	800820a <__d2b+0x2e>
 800825c:	6161      	str	r1, [r4, #20]
 800825e:	e7e7      	b.n	8008230 <__d2b+0x54>
 8008260:	a801      	add	r0, sp, #4
 8008262:	f7ff fd61 	bl	8007d28 <__lo0bits>
 8008266:	9b01      	ldr	r3, [sp, #4]
 8008268:	6163      	str	r3, [r4, #20]
 800826a:	3020      	adds	r0, #32
 800826c:	2201      	movs	r2, #1
 800826e:	e7e5      	b.n	800823c <__d2b+0x60>
 8008270:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008274:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008278:	6038      	str	r0, [r7, #0]
 800827a:	6918      	ldr	r0, [r3, #16]
 800827c:	f7ff fd34 	bl	8007ce8 <__hi0bits>
 8008280:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008284:	e7e2      	b.n	800824c <__d2b+0x70>
 8008286:	bf00      	nop
 8008288:	08008988 	.word	0x08008988
 800828c:	080089aa 	.word	0x080089aa

08008290 <__sread>:
 8008290:	b510      	push	{r4, lr}
 8008292:	460c      	mov	r4, r1
 8008294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008298:	f000 f978 	bl	800858c <_read_r>
 800829c:	2800      	cmp	r0, #0
 800829e:	bfab      	itete	ge
 80082a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082a2:	89a3      	ldrhlt	r3, [r4, #12]
 80082a4:	181b      	addge	r3, r3, r0
 80082a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082aa:	bfac      	ite	ge
 80082ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80082ae:	81a3      	strhlt	r3, [r4, #12]
 80082b0:	bd10      	pop	{r4, pc}

080082b2 <__swrite>:
 80082b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b6:	461f      	mov	r7, r3
 80082b8:	898b      	ldrh	r3, [r1, #12]
 80082ba:	05db      	lsls	r3, r3, #23
 80082bc:	4605      	mov	r5, r0
 80082be:	460c      	mov	r4, r1
 80082c0:	4616      	mov	r6, r2
 80082c2:	d505      	bpl.n	80082d0 <__swrite+0x1e>
 80082c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c8:	2302      	movs	r3, #2
 80082ca:	2200      	movs	r2, #0
 80082cc:	f000 f94c 	bl	8008568 <_lseek_r>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	4632      	mov	r2, r6
 80082de:	463b      	mov	r3, r7
 80082e0:	4628      	mov	r0, r5
 80082e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082e6:	f000 b973 	b.w	80085d0 <_write_r>

080082ea <__sseek>:
 80082ea:	b510      	push	{r4, lr}
 80082ec:	460c      	mov	r4, r1
 80082ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f2:	f000 f939 	bl	8008568 <_lseek_r>
 80082f6:	1c43      	adds	r3, r0, #1
 80082f8:	89a3      	ldrh	r3, [r4, #12]
 80082fa:	bf15      	itete	ne
 80082fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80082fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008302:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008306:	81a3      	strheq	r3, [r4, #12]
 8008308:	bf18      	it	ne
 800830a:	81a3      	strhne	r3, [r4, #12]
 800830c:	bd10      	pop	{r4, pc}

0800830e <__sclose>:
 800830e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008312:	f000 b8f7 	b.w	8008504 <_close_r>

08008316 <__swbuf_r>:
 8008316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008318:	460e      	mov	r6, r1
 800831a:	4614      	mov	r4, r2
 800831c:	4605      	mov	r5, r0
 800831e:	b118      	cbz	r0, 8008328 <__swbuf_r+0x12>
 8008320:	6a03      	ldr	r3, [r0, #32]
 8008322:	b90b      	cbnz	r3, 8008328 <__swbuf_r+0x12>
 8008324:	f7fe fa3c 	bl	80067a0 <__sinit>
 8008328:	69a3      	ldr	r3, [r4, #24]
 800832a:	60a3      	str	r3, [r4, #8]
 800832c:	89a3      	ldrh	r3, [r4, #12]
 800832e:	071a      	lsls	r2, r3, #28
 8008330:	d525      	bpl.n	800837e <__swbuf_r+0x68>
 8008332:	6923      	ldr	r3, [r4, #16]
 8008334:	b31b      	cbz	r3, 800837e <__swbuf_r+0x68>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	6922      	ldr	r2, [r4, #16]
 800833a:	1a98      	subs	r0, r3, r2
 800833c:	6963      	ldr	r3, [r4, #20]
 800833e:	b2f6      	uxtb	r6, r6
 8008340:	4283      	cmp	r3, r0
 8008342:	4637      	mov	r7, r6
 8008344:	dc04      	bgt.n	8008350 <__swbuf_r+0x3a>
 8008346:	4621      	mov	r1, r4
 8008348:	4628      	mov	r0, r5
 800834a:	f7ff fbf1 	bl	8007b30 <_fflush_r>
 800834e:	b9e0      	cbnz	r0, 800838a <__swbuf_r+0x74>
 8008350:	68a3      	ldr	r3, [r4, #8]
 8008352:	3b01      	subs	r3, #1
 8008354:	60a3      	str	r3, [r4, #8]
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	6022      	str	r2, [r4, #0]
 800835c:	701e      	strb	r6, [r3, #0]
 800835e:	6962      	ldr	r2, [r4, #20]
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	429a      	cmp	r2, r3
 8008364:	d004      	beq.n	8008370 <__swbuf_r+0x5a>
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	07db      	lsls	r3, r3, #31
 800836a:	d506      	bpl.n	800837a <__swbuf_r+0x64>
 800836c:	2e0a      	cmp	r6, #10
 800836e:	d104      	bne.n	800837a <__swbuf_r+0x64>
 8008370:	4621      	mov	r1, r4
 8008372:	4628      	mov	r0, r5
 8008374:	f7ff fbdc 	bl	8007b30 <_fflush_r>
 8008378:	b938      	cbnz	r0, 800838a <__swbuf_r+0x74>
 800837a:	4638      	mov	r0, r7
 800837c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800837e:	4621      	mov	r1, r4
 8008380:	4628      	mov	r0, r5
 8008382:	f000 f805 	bl	8008390 <__swsetup_r>
 8008386:	2800      	cmp	r0, #0
 8008388:	d0d5      	beq.n	8008336 <__swbuf_r+0x20>
 800838a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800838e:	e7f4      	b.n	800837a <__swbuf_r+0x64>

08008390 <__swsetup_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4b2a      	ldr	r3, [pc, #168]	; (800843c <__swsetup_r+0xac>)
 8008394:	4605      	mov	r5, r0
 8008396:	6818      	ldr	r0, [r3, #0]
 8008398:	460c      	mov	r4, r1
 800839a:	b118      	cbz	r0, 80083a4 <__swsetup_r+0x14>
 800839c:	6a03      	ldr	r3, [r0, #32]
 800839e:	b90b      	cbnz	r3, 80083a4 <__swsetup_r+0x14>
 80083a0:	f7fe f9fe 	bl	80067a0 <__sinit>
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083aa:	0718      	lsls	r0, r3, #28
 80083ac:	d422      	bmi.n	80083f4 <__swsetup_r+0x64>
 80083ae:	06d9      	lsls	r1, r3, #27
 80083b0:	d407      	bmi.n	80083c2 <__swsetup_r+0x32>
 80083b2:	2309      	movs	r3, #9
 80083b4:	602b      	str	r3, [r5, #0]
 80083b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083ba:	81a3      	strh	r3, [r4, #12]
 80083bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083c0:	e034      	b.n	800842c <__swsetup_r+0x9c>
 80083c2:	0758      	lsls	r0, r3, #29
 80083c4:	d512      	bpl.n	80083ec <__swsetup_r+0x5c>
 80083c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083c8:	b141      	cbz	r1, 80083dc <__swsetup_r+0x4c>
 80083ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083ce:	4299      	cmp	r1, r3
 80083d0:	d002      	beq.n	80083d8 <__swsetup_r+0x48>
 80083d2:	4628      	mov	r0, r5
 80083d4:	f000 f950 	bl	8008678 <_free_r>
 80083d8:	2300      	movs	r3, #0
 80083da:	6363      	str	r3, [r4, #52]	; 0x34
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083e2:	81a3      	strh	r3, [r4, #12]
 80083e4:	2300      	movs	r3, #0
 80083e6:	6063      	str	r3, [r4, #4]
 80083e8:	6923      	ldr	r3, [r4, #16]
 80083ea:	6023      	str	r3, [r4, #0]
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	f043 0308 	orr.w	r3, r3, #8
 80083f2:	81a3      	strh	r3, [r4, #12]
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	b94b      	cbnz	r3, 800840c <__swsetup_r+0x7c>
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008402:	d003      	beq.n	800840c <__swsetup_r+0x7c>
 8008404:	4621      	mov	r1, r4
 8008406:	4628      	mov	r0, r5
 8008408:	f000 f840 	bl	800848c <__smakebuf_r>
 800840c:	89a0      	ldrh	r0, [r4, #12]
 800840e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008412:	f010 0301 	ands.w	r3, r0, #1
 8008416:	d00a      	beq.n	800842e <__swsetup_r+0x9e>
 8008418:	2300      	movs	r3, #0
 800841a:	60a3      	str	r3, [r4, #8]
 800841c:	6963      	ldr	r3, [r4, #20]
 800841e:	425b      	negs	r3, r3
 8008420:	61a3      	str	r3, [r4, #24]
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	b943      	cbnz	r3, 8008438 <__swsetup_r+0xa8>
 8008426:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800842a:	d1c4      	bne.n	80083b6 <__swsetup_r+0x26>
 800842c:	bd38      	pop	{r3, r4, r5, pc}
 800842e:	0781      	lsls	r1, r0, #30
 8008430:	bf58      	it	pl
 8008432:	6963      	ldrpl	r3, [r4, #20]
 8008434:	60a3      	str	r3, [r4, #8]
 8008436:	e7f4      	b.n	8008422 <__swsetup_r+0x92>
 8008438:	2000      	movs	r0, #0
 800843a:	e7f7      	b.n	800842c <__swsetup_r+0x9c>
 800843c:	20000068 	.word	0x20000068

08008440 <__swhatbuf_r>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	460c      	mov	r4, r1
 8008444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008448:	2900      	cmp	r1, #0
 800844a:	b096      	sub	sp, #88	; 0x58
 800844c:	4615      	mov	r5, r2
 800844e:	461e      	mov	r6, r3
 8008450:	da0d      	bge.n	800846e <__swhatbuf_r+0x2e>
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008458:	f04f 0100 	mov.w	r1, #0
 800845c:	bf0c      	ite	eq
 800845e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008462:	2340      	movne	r3, #64	; 0x40
 8008464:	2000      	movs	r0, #0
 8008466:	6031      	str	r1, [r6, #0]
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	b016      	add	sp, #88	; 0x58
 800846c:	bd70      	pop	{r4, r5, r6, pc}
 800846e:	466a      	mov	r2, sp
 8008470:	f000 f858 	bl	8008524 <_fstat_r>
 8008474:	2800      	cmp	r0, #0
 8008476:	dbec      	blt.n	8008452 <__swhatbuf_r+0x12>
 8008478:	9901      	ldr	r1, [sp, #4]
 800847a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800847e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008482:	4259      	negs	r1, r3
 8008484:	4159      	adcs	r1, r3
 8008486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800848a:	e7eb      	b.n	8008464 <__swhatbuf_r+0x24>

0800848c <__smakebuf_r>:
 800848c:	898b      	ldrh	r3, [r1, #12]
 800848e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008490:	079d      	lsls	r5, r3, #30
 8008492:	4606      	mov	r6, r0
 8008494:	460c      	mov	r4, r1
 8008496:	d507      	bpl.n	80084a8 <__smakebuf_r+0x1c>
 8008498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	6123      	str	r3, [r4, #16]
 80084a0:	2301      	movs	r3, #1
 80084a2:	6163      	str	r3, [r4, #20]
 80084a4:	b002      	add	sp, #8
 80084a6:	bd70      	pop	{r4, r5, r6, pc}
 80084a8:	ab01      	add	r3, sp, #4
 80084aa:	466a      	mov	r2, sp
 80084ac:	f7ff ffc8 	bl	8008440 <__swhatbuf_r>
 80084b0:	9900      	ldr	r1, [sp, #0]
 80084b2:	4605      	mov	r5, r0
 80084b4:	4630      	mov	r0, r6
 80084b6:	f7ff fa35 	bl	8007924 <_malloc_r>
 80084ba:	b948      	cbnz	r0, 80084d0 <__smakebuf_r+0x44>
 80084bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084c0:	059a      	lsls	r2, r3, #22
 80084c2:	d4ef      	bmi.n	80084a4 <__smakebuf_r+0x18>
 80084c4:	f023 0303 	bic.w	r3, r3, #3
 80084c8:	f043 0302 	orr.w	r3, r3, #2
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	e7e3      	b.n	8008498 <__smakebuf_r+0xc>
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	6020      	str	r0, [r4, #0]
 80084d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d8:	81a3      	strh	r3, [r4, #12]
 80084da:	9b00      	ldr	r3, [sp, #0]
 80084dc:	6163      	str	r3, [r4, #20]
 80084de:	9b01      	ldr	r3, [sp, #4]
 80084e0:	6120      	str	r0, [r4, #16]
 80084e2:	b15b      	cbz	r3, 80084fc <__smakebuf_r+0x70>
 80084e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084e8:	4630      	mov	r0, r6
 80084ea:	f000 f82d 	bl	8008548 <_isatty_r>
 80084ee:	b128      	cbz	r0, 80084fc <__smakebuf_r+0x70>
 80084f0:	89a3      	ldrh	r3, [r4, #12]
 80084f2:	f023 0303 	bic.w	r3, r3, #3
 80084f6:	f043 0301 	orr.w	r3, r3, #1
 80084fa:	81a3      	strh	r3, [r4, #12]
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	431d      	orrs	r5, r3
 8008500:	81a5      	strh	r5, [r4, #12]
 8008502:	e7cf      	b.n	80084a4 <__smakebuf_r+0x18>

08008504 <_close_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4d06      	ldr	r5, [pc, #24]	; (8008520 <_close_r+0x1c>)
 8008508:	2300      	movs	r3, #0
 800850a:	4604      	mov	r4, r0
 800850c:	4608      	mov	r0, r1
 800850e:	602b      	str	r3, [r5, #0]
 8008510:	f7f9 fbaf 	bl	8001c72 <_close>
 8008514:	1c43      	adds	r3, r0, #1
 8008516:	d102      	bne.n	800851e <_close_r+0x1a>
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	b103      	cbz	r3, 800851e <_close_r+0x1a>
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	bd38      	pop	{r3, r4, r5, pc}
 8008520:	20000534 	.word	0x20000534

08008524 <_fstat_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4d07      	ldr	r5, [pc, #28]	; (8008544 <_fstat_r+0x20>)
 8008528:	2300      	movs	r3, #0
 800852a:	4604      	mov	r4, r0
 800852c:	4608      	mov	r0, r1
 800852e:	4611      	mov	r1, r2
 8008530:	602b      	str	r3, [r5, #0]
 8008532:	f7f9 fbaa 	bl	8001c8a <_fstat>
 8008536:	1c43      	adds	r3, r0, #1
 8008538:	d102      	bne.n	8008540 <_fstat_r+0x1c>
 800853a:	682b      	ldr	r3, [r5, #0]
 800853c:	b103      	cbz	r3, 8008540 <_fstat_r+0x1c>
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	bd38      	pop	{r3, r4, r5, pc}
 8008542:	bf00      	nop
 8008544:	20000534 	.word	0x20000534

08008548 <_isatty_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	4d06      	ldr	r5, [pc, #24]	; (8008564 <_isatty_r+0x1c>)
 800854c:	2300      	movs	r3, #0
 800854e:	4604      	mov	r4, r0
 8008550:	4608      	mov	r0, r1
 8008552:	602b      	str	r3, [r5, #0]
 8008554:	f7f9 fba9 	bl	8001caa <_isatty>
 8008558:	1c43      	adds	r3, r0, #1
 800855a:	d102      	bne.n	8008562 <_isatty_r+0x1a>
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	b103      	cbz	r3, 8008562 <_isatty_r+0x1a>
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	bd38      	pop	{r3, r4, r5, pc}
 8008564:	20000534 	.word	0x20000534

08008568 <_lseek_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4d07      	ldr	r5, [pc, #28]	; (8008588 <_lseek_r+0x20>)
 800856c:	4604      	mov	r4, r0
 800856e:	4608      	mov	r0, r1
 8008570:	4611      	mov	r1, r2
 8008572:	2200      	movs	r2, #0
 8008574:	602a      	str	r2, [r5, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	f7f9 fba2 	bl	8001cc0 <_lseek>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d102      	bne.n	8008586 <_lseek_r+0x1e>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	b103      	cbz	r3, 8008586 <_lseek_r+0x1e>
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	20000534 	.word	0x20000534

0800858c <_read_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	4d07      	ldr	r5, [pc, #28]	; (80085ac <_read_r+0x20>)
 8008590:	4604      	mov	r4, r0
 8008592:	4608      	mov	r0, r1
 8008594:	4611      	mov	r1, r2
 8008596:	2200      	movs	r2, #0
 8008598:	602a      	str	r2, [r5, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	f7f9 fb30 	bl	8001c00 <_read>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	d102      	bne.n	80085aa <_read_r+0x1e>
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	b103      	cbz	r3, 80085aa <_read_r+0x1e>
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	bd38      	pop	{r3, r4, r5, pc}
 80085ac:	20000534 	.word	0x20000534

080085b0 <_sbrk_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4d06      	ldr	r5, [pc, #24]	; (80085cc <_sbrk_r+0x1c>)
 80085b4:	2300      	movs	r3, #0
 80085b6:	4604      	mov	r4, r0
 80085b8:	4608      	mov	r0, r1
 80085ba:	602b      	str	r3, [r5, #0]
 80085bc:	f7f9 fb8e 	bl	8001cdc <_sbrk>
 80085c0:	1c43      	adds	r3, r0, #1
 80085c2:	d102      	bne.n	80085ca <_sbrk_r+0x1a>
 80085c4:	682b      	ldr	r3, [r5, #0]
 80085c6:	b103      	cbz	r3, 80085ca <_sbrk_r+0x1a>
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	bd38      	pop	{r3, r4, r5, pc}
 80085cc:	20000534 	.word	0x20000534

080085d0 <_write_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d07      	ldr	r5, [pc, #28]	; (80085f0 <_write_r+0x20>)
 80085d4:	4604      	mov	r4, r0
 80085d6:	4608      	mov	r0, r1
 80085d8:	4611      	mov	r1, r2
 80085da:	2200      	movs	r2, #0
 80085dc:	602a      	str	r2, [r5, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	f7f9 fb2b 	bl	8001c3a <_write>
 80085e4:	1c43      	adds	r3, r0, #1
 80085e6:	d102      	bne.n	80085ee <_write_r+0x1e>
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	b103      	cbz	r3, 80085ee <_write_r+0x1e>
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	bd38      	pop	{r3, r4, r5, pc}
 80085f0:	20000534 	.word	0x20000534

080085f4 <memcpy>:
 80085f4:	440a      	add	r2, r1
 80085f6:	4291      	cmp	r1, r2
 80085f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80085fc:	d100      	bne.n	8008600 <memcpy+0xc>
 80085fe:	4770      	bx	lr
 8008600:	b510      	push	{r4, lr}
 8008602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800860a:	4291      	cmp	r1, r2
 800860c:	d1f9      	bne.n	8008602 <memcpy+0xe>
 800860e:	bd10      	pop	{r4, pc}

08008610 <__assert_func>:
 8008610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008612:	4614      	mov	r4, r2
 8008614:	461a      	mov	r2, r3
 8008616:	4b09      	ldr	r3, [pc, #36]	; (800863c <__assert_func+0x2c>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4605      	mov	r5, r0
 800861c:	68d8      	ldr	r0, [r3, #12]
 800861e:	b14c      	cbz	r4, 8008634 <__assert_func+0x24>
 8008620:	4b07      	ldr	r3, [pc, #28]	; (8008640 <__assert_func+0x30>)
 8008622:	9100      	str	r1, [sp, #0]
 8008624:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008628:	4906      	ldr	r1, [pc, #24]	; (8008644 <__assert_func+0x34>)
 800862a:	462b      	mov	r3, r5
 800862c:	f000 f882 	bl	8008734 <fiprintf>
 8008630:	f000 f89f 	bl	8008772 <abort>
 8008634:	4b04      	ldr	r3, [pc, #16]	; (8008648 <__assert_func+0x38>)
 8008636:	461c      	mov	r4, r3
 8008638:	e7f3      	b.n	8008622 <__assert_func+0x12>
 800863a:	bf00      	nop
 800863c:	20000068 	.word	0x20000068
 8008640:	08008c0f 	.word	0x08008c0f
 8008644:	08008c1c 	.word	0x08008c1c
 8008648:	08008c4a 	.word	0x08008c4a

0800864c <_calloc_r>:
 800864c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800864e:	fba1 2402 	umull	r2, r4, r1, r2
 8008652:	b94c      	cbnz	r4, 8008668 <_calloc_r+0x1c>
 8008654:	4611      	mov	r1, r2
 8008656:	9201      	str	r2, [sp, #4]
 8008658:	f7ff f964 	bl	8007924 <_malloc_r>
 800865c:	9a01      	ldr	r2, [sp, #4]
 800865e:	4605      	mov	r5, r0
 8008660:	b930      	cbnz	r0, 8008670 <_calloc_r+0x24>
 8008662:	4628      	mov	r0, r5
 8008664:	b003      	add	sp, #12
 8008666:	bd30      	pop	{r4, r5, pc}
 8008668:	220c      	movs	r2, #12
 800866a:	6002      	str	r2, [r0, #0]
 800866c:	2500      	movs	r5, #0
 800866e:	e7f8      	b.n	8008662 <_calloc_r+0x16>
 8008670:	4621      	mov	r1, r4
 8008672:	f7fe f939 	bl	80068e8 <memset>
 8008676:	e7f4      	b.n	8008662 <_calloc_r+0x16>

08008678 <_free_r>:
 8008678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800867a:	2900      	cmp	r1, #0
 800867c:	d044      	beq.n	8008708 <_free_r+0x90>
 800867e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008682:	9001      	str	r0, [sp, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	f1a1 0404 	sub.w	r4, r1, #4
 800868a:	bfb8      	it	lt
 800868c:	18e4      	addlt	r4, r4, r3
 800868e:	f7ff fa77 	bl	8007b80 <__malloc_lock>
 8008692:	4a1e      	ldr	r2, [pc, #120]	; (800870c <_free_r+0x94>)
 8008694:	9801      	ldr	r0, [sp, #4]
 8008696:	6813      	ldr	r3, [r2, #0]
 8008698:	b933      	cbnz	r3, 80086a8 <_free_r+0x30>
 800869a:	6063      	str	r3, [r4, #4]
 800869c:	6014      	str	r4, [r2, #0]
 800869e:	b003      	add	sp, #12
 80086a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086a4:	f7ff ba72 	b.w	8007b8c <__malloc_unlock>
 80086a8:	42a3      	cmp	r3, r4
 80086aa:	d908      	bls.n	80086be <_free_r+0x46>
 80086ac:	6825      	ldr	r5, [r4, #0]
 80086ae:	1961      	adds	r1, r4, r5
 80086b0:	428b      	cmp	r3, r1
 80086b2:	bf01      	itttt	eq
 80086b4:	6819      	ldreq	r1, [r3, #0]
 80086b6:	685b      	ldreq	r3, [r3, #4]
 80086b8:	1949      	addeq	r1, r1, r5
 80086ba:	6021      	streq	r1, [r4, #0]
 80086bc:	e7ed      	b.n	800869a <_free_r+0x22>
 80086be:	461a      	mov	r2, r3
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	b10b      	cbz	r3, 80086c8 <_free_r+0x50>
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	d9fa      	bls.n	80086be <_free_r+0x46>
 80086c8:	6811      	ldr	r1, [r2, #0]
 80086ca:	1855      	adds	r5, r2, r1
 80086cc:	42a5      	cmp	r5, r4
 80086ce:	d10b      	bne.n	80086e8 <_free_r+0x70>
 80086d0:	6824      	ldr	r4, [r4, #0]
 80086d2:	4421      	add	r1, r4
 80086d4:	1854      	adds	r4, r2, r1
 80086d6:	42a3      	cmp	r3, r4
 80086d8:	6011      	str	r1, [r2, #0]
 80086da:	d1e0      	bne.n	800869e <_free_r+0x26>
 80086dc:	681c      	ldr	r4, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	6053      	str	r3, [r2, #4]
 80086e2:	440c      	add	r4, r1
 80086e4:	6014      	str	r4, [r2, #0]
 80086e6:	e7da      	b.n	800869e <_free_r+0x26>
 80086e8:	d902      	bls.n	80086f0 <_free_r+0x78>
 80086ea:	230c      	movs	r3, #12
 80086ec:	6003      	str	r3, [r0, #0]
 80086ee:	e7d6      	b.n	800869e <_free_r+0x26>
 80086f0:	6825      	ldr	r5, [r4, #0]
 80086f2:	1961      	adds	r1, r4, r5
 80086f4:	428b      	cmp	r3, r1
 80086f6:	bf04      	itt	eq
 80086f8:	6819      	ldreq	r1, [r3, #0]
 80086fa:	685b      	ldreq	r3, [r3, #4]
 80086fc:	6063      	str	r3, [r4, #4]
 80086fe:	bf04      	itt	eq
 8008700:	1949      	addeq	r1, r1, r5
 8008702:	6021      	streq	r1, [r4, #0]
 8008704:	6054      	str	r4, [r2, #4]
 8008706:	e7ca      	b.n	800869e <_free_r+0x26>
 8008708:	b003      	add	sp, #12
 800870a:	bd30      	pop	{r4, r5, pc}
 800870c:	2000052c 	.word	0x2000052c

08008710 <__ascii_mbtowc>:
 8008710:	b082      	sub	sp, #8
 8008712:	b901      	cbnz	r1, 8008716 <__ascii_mbtowc+0x6>
 8008714:	a901      	add	r1, sp, #4
 8008716:	b142      	cbz	r2, 800872a <__ascii_mbtowc+0x1a>
 8008718:	b14b      	cbz	r3, 800872e <__ascii_mbtowc+0x1e>
 800871a:	7813      	ldrb	r3, [r2, #0]
 800871c:	600b      	str	r3, [r1, #0]
 800871e:	7812      	ldrb	r2, [r2, #0]
 8008720:	1e10      	subs	r0, r2, #0
 8008722:	bf18      	it	ne
 8008724:	2001      	movne	r0, #1
 8008726:	b002      	add	sp, #8
 8008728:	4770      	bx	lr
 800872a:	4610      	mov	r0, r2
 800872c:	e7fb      	b.n	8008726 <__ascii_mbtowc+0x16>
 800872e:	f06f 0001 	mvn.w	r0, #1
 8008732:	e7f8      	b.n	8008726 <__ascii_mbtowc+0x16>

08008734 <fiprintf>:
 8008734:	b40e      	push	{r1, r2, r3}
 8008736:	b503      	push	{r0, r1, lr}
 8008738:	4601      	mov	r1, r0
 800873a:	ab03      	add	r3, sp, #12
 800873c:	4805      	ldr	r0, [pc, #20]	; (8008754 <fiprintf+0x20>)
 800873e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008742:	6800      	ldr	r0, [r0, #0]
 8008744:	9301      	str	r3, [sp, #4]
 8008746:	f7fe ffab 	bl	80076a0 <_vfiprintf_r>
 800874a:	b002      	add	sp, #8
 800874c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008750:	b003      	add	sp, #12
 8008752:	4770      	bx	lr
 8008754:	20000068 	.word	0x20000068

08008758 <__ascii_wctomb>:
 8008758:	b149      	cbz	r1, 800876e <__ascii_wctomb+0x16>
 800875a:	2aff      	cmp	r2, #255	; 0xff
 800875c:	bf85      	ittet	hi
 800875e:	238a      	movhi	r3, #138	; 0x8a
 8008760:	6003      	strhi	r3, [r0, #0]
 8008762:	700a      	strbls	r2, [r1, #0]
 8008764:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008768:	bf98      	it	ls
 800876a:	2001      	movls	r0, #1
 800876c:	4770      	bx	lr
 800876e:	4608      	mov	r0, r1
 8008770:	4770      	bx	lr

08008772 <abort>:
 8008772:	b508      	push	{r3, lr}
 8008774:	2006      	movs	r0, #6
 8008776:	f000 f82b 	bl	80087d0 <raise>
 800877a:	2001      	movs	r0, #1
 800877c:	f7f9 fa36 	bl	8001bec <_exit>

08008780 <_raise_r>:
 8008780:	291f      	cmp	r1, #31
 8008782:	b538      	push	{r3, r4, r5, lr}
 8008784:	4604      	mov	r4, r0
 8008786:	460d      	mov	r5, r1
 8008788:	d904      	bls.n	8008794 <_raise_r+0x14>
 800878a:	2316      	movs	r3, #22
 800878c:	6003      	str	r3, [r0, #0]
 800878e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008792:	bd38      	pop	{r3, r4, r5, pc}
 8008794:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008796:	b112      	cbz	r2, 800879e <_raise_r+0x1e>
 8008798:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800879c:	b94b      	cbnz	r3, 80087b2 <_raise_r+0x32>
 800879e:	4620      	mov	r0, r4
 80087a0:	f000 f830 	bl	8008804 <_getpid_r>
 80087a4:	462a      	mov	r2, r5
 80087a6:	4601      	mov	r1, r0
 80087a8:	4620      	mov	r0, r4
 80087aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087ae:	f000 b817 	b.w	80087e0 <_kill_r>
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d00a      	beq.n	80087cc <_raise_r+0x4c>
 80087b6:	1c59      	adds	r1, r3, #1
 80087b8:	d103      	bne.n	80087c2 <_raise_r+0x42>
 80087ba:	2316      	movs	r3, #22
 80087bc:	6003      	str	r3, [r0, #0]
 80087be:	2001      	movs	r0, #1
 80087c0:	e7e7      	b.n	8008792 <_raise_r+0x12>
 80087c2:	2400      	movs	r4, #0
 80087c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087c8:	4628      	mov	r0, r5
 80087ca:	4798      	blx	r3
 80087cc:	2000      	movs	r0, #0
 80087ce:	e7e0      	b.n	8008792 <_raise_r+0x12>

080087d0 <raise>:
 80087d0:	4b02      	ldr	r3, [pc, #8]	; (80087dc <raise+0xc>)
 80087d2:	4601      	mov	r1, r0
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	f7ff bfd3 	b.w	8008780 <_raise_r>
 80087da:	bf00      	nop
 80087dc:	20000068 	.word	0x20000068

080087e0 <_kill_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4d07      	ldr	r5, [pc, #28]	; (8008800 <_kill_r+0x20>)
 80087e4:	2300      	movs	r3, #0
 80087e6:	4604      	mov	r4, r0
 80087e8:	4608      	mov	r0, r1
 80087ea:	4611      	mov	r1, r2
 80087ec:	602b      	str	r3, [r5, #0]
 80087ee:	f7f9 f9ed 	bl	8001bcc <_kill>
 80087f2:	1c43      	adds	r3, r0, #1
 80087f4:	d102      	bne.n	80087fc <_kill_r+0x1c>
 80087f6:	682b      	ldr	r3, [r5, #0]
 80087f8:	b103      	cbz	r3, 80087fc <_kill_r+0x1c>
 80087fa:	6023      	str	r3, [r4, #0]
 80087fc:	bd38      	pop	{r3, r4, r5, pc}
 80087fe:	bf00      	nop
 8008800:	20000534 	.word	0x20000534

08008804 <_getpid_r>:
 8008804:	f7f9 b9da 	b.w	8001bbc <_getpid>

08008808 <_init>:
 8008808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880a:	bf00      	nop
 800880c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800880e:	bc08      	pop	{r3}
 8008810:	469e      	mov	lr, r3
 8008812:	4770      	bx	lr

08008814 <_fini>:
 8008814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008816:	bf00      	nop
 8008818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881a:	bc08      	pop	{r3}
 800881c:	469e      	mov	lr, r3
 800881e:	4770      	bx	lr
