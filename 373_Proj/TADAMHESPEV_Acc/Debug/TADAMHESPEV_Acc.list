
TADAMHESPEV_Acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c58  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08007e18  08007e18  00017e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008224  08008224  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008224  08008224  00018224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800822c  0800822c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800822c  0800822c  0001822c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008230  08008230  00018230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001d4  08008408  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08008408  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010440  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021c9  00000000  00000000  00030687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da8  00000000  00000000  00032850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a95  00000000  00000000  000335f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a823  00000000  00000000  0003408d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011988  00000000  00000000  0005e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101c0e  00000000  00000000  00070238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004910  00000000  00000000  00171e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00176758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007e00 	.word	0x08007e00

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	08007e00 	.word	0x08007e00

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <setupAccModule>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//
void setupAccModule(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
	uint8_t buf[10]= {ACC_IR_CTRL1, CTR1_SETUP};
 8000eda:	f249 7320 	movw	r3, #38688	; 0x9720
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	809a      	strh	r2, [r3, #4]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDR << 1, buf, 2, 1000);
 8000eea:	1d3a      	adds	r2, r7, #4
 8000eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	2132      	movs	r1, #50	; 0x32
 8000ef6:	4809      	ldr	r0, [pc, #36]	; (8000f1c <setupAccModule+0x48>)
 8000ef8:	f001 f978 	bl	80021ec <HAL_I2C_Master_Transmit>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73fb      	strb	r3, [r7, #15]
	if(ret == 0){
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d103      	bne.n	8000f0e <setupAccModule+0x3a>
		printf("We gucci\n");
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <setupAccModule+0x4c>)
 8000f08:	f004 ffe0 	bl	8005ecc <puts>
	}
	else{
		printf("we not gucci\n");
	}
}
 8000f0c:	e002      	b.n	8000f14 <setupAccModule+0x40>
		printf("we not gucci\n");
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <setupAccModule+0x50>)
 8000f10:	f004 ffdc 	bl	8005ecc <puts>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200001f0 	.word	0x200001f0
 8000f20:	08007e18 	.word	0x08007e18
 8000f24:	08007e24 	.word	0x08007e24

08000f28 <ReadAccData>:

void ReadAccData(){
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af02      	add	r7, sp, #8
		uint8_t buf[1]= {OUT_X_L_A | 1 << 7}; //Auto-Increment OUT_X_L_A
 8000f2e:	23a8      	movs	r3, #168	; 0xa8
 8000f30:	733b      	strb	r3, [r7, #12]
		uint8_t rbuf[2];
		char axischars[3] = {'x', 'z', 'y'};
 8000f32:	4a34      	ldr	r2, [pc, #208]	; (8001004 <ReadAccData+0xdc>)
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	8019      	strh	r1, [r3, #0]
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	0c12      	lsrs	r2, r2, #16
 8000f40:	701a      	strb	r2, [r3, #0]
		static int cnt = 0;
		float accVal = 0;
 8000f42:	f04f 0300 	mov.w	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

		HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDR << 1, buf, 1, 1000);
 8000f48:	f107 020c 	add.w	r2, r7, #12
 8000f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2301      	movs	r3, #1
 8000f54:	2132      	movs	r1, #50	; 0x32
 8000f56:	482c      	ldr	r0, [pc, #176]	; (8001008 <ReadAccData+0xe0>)
 8000f58:	f001 f948 	bl	80021ec <HAL_I2C_Master_Transmit>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	74fb      	strb	r3, [r7, #19]
		//[TODO] - Have error checking for communication errors
		ret =  HAL_I2C_Master_Receive(&hi2c1, ACC_I2C_ADDR << 1, rbuf, 2, 1000);
 8000f60:	f107 0208 	add.w	r2, r7, #8
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	2132      	movs	r1, #50	; 0x32
 8000f6e:	4826      	ldr	r0, [pc, #152]	; (8001008 <ReadAccData+0xe0>)
 8000f70:	f001 fa54 	bl	800241c <HAL_I2C_Master_Receive>
 8000f74:	4603      	mov	r3, r0
 8000f76:	74fb      	strb	r3, [r7, #19]
		//[TODO] - Have error checking for communication errors
//		time_t currentTime;
//		time(&currentTime);

		uint16_t raw = (rbuf[1] << 8) | rbuf[0];	// 2's compliment, +-2g's
 8000f78:	7a7b      	ldrb	r3, [r7, #9]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	7a3b      	ldrb	r3, [r7, #8]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	823b      	strh	r3, [r7, #16]
		if(raw > 64100){
 8000f88:	8a3b      	ldrh	r3, [r7, #16]
 8000f8a:	f64f 2264 	movw	r2, #64100	; 0xfa64
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d903      	bls.n	8000f9a <ReadAccData+0x72>
			accVal = 0;
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	e021      	b.n	8000fde <ReadAccData+0xb6>
		}
		else if(raw & 0x8000){ //if value is negative
 8000f9a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da10      	bge.n	8000fc4 <ReadAccData+0x9c>
			int16_t temp = -((raw ^ 0xFFFF) + 1);
 8000fa2:	8a3b      	ldrh	r3, [r7, #16]
 8000fa4:	81fb      	strh	r3, [r7, #14]
			accVal = (temp / (float)(1 << 15))*2;
 8000fa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb2:	eddf 6a16 	vldr	s13, [pc, #88]	; 800100c <ReadAccData+0xe4>
 8000fb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fbe:	edc7 7a05 	vstr	s15, [r7, #20]
 8000fc2:	e00c      	b.n	8000fde <ReadAccData+0xb6>
		}
		else{ //positive acceleration
			accVal = (raw / (float)((1 << 15) - 1))*2;
 8000fc4:	8a3b      	ldrh	r3, [r7, #16]
 8000fc6:	ee07 3a90 	vmov	s15, r3
 8000fca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fce:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001010 <ReadAccData+0xe8>
 8000fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fda:	edc7 7a05 	vstr	s15, [r7, #20]
		}

		printf("%i\t%f\n",cnt++, accVal);
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <ReadAccData+0xec>)
 8000fe0:	681c      	ldr	r4, [r3, #0]
 8000fe2:	1c63      	adds	r3, r4, #1
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <ReadAccData+0xec>)
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	6978      	ldr	r0, [r7, #20]
 8000fea:	f7ff fac5 	bl	8000578 <__aeabi_f2d>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4621      	mov	r1, r4
 8000ff4:	4808      	ldr	r0, [pc, #32]	; (8001018 <ReadAccData+0xf0>)
 8000ff6:	f004 ff03 	bl	8005e00 <iprintf>
//		float axis = ( ((float)(rbuf[0]))/((1<<16) -1) )*4 ;
//		printf("data axis %c: %f\t raw: %u\n", axischars[0], axis, rbuf[0] );
//		printf("\n");
}
 8000ffa:	bf00      	nop
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	08007e3c 	.word	0x08007e3c
 8001008:	200001f0 	.word	0x200001f0
 800100c:	47000000 	.word	0x47000000
 8001010:	46fffe00 	.word	0x46fffe00
 8001014:	200002d8 	.word	0x200002d8
 8001018:	08007e34 	.word	0x08007e34

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001020:	f000 fd37 	bl	8001a92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001024:	f000 f80e 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001028:	f000 f8dc 	bl	80011e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800102c:	f000 f850 	bl	80010d0 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001030:	f000 f88c 	bl	800114c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setupAccModule();
 8001034:	f7ff ff4e 	bl	8000ed4 <setupAccModule>
  while (1)
  {
	 ReadAccData();
 8001038:	f7ff ff76 	bl	8000f28 <ReadAccData>
	 HAL_Delay(10);
 800103c:	200a      	movs	r0, #10
 800103e:	f000 fd9d 	bl	8001b7c <HAL_Delay>
	 ReadAccData();
 8001042:	e7f9      	b.n	8001038 <main+0x1c>

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b096      	sub	sp, #88	; 0x58
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	2244      	movs	r2, #68	; 0x44
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f004 ff42 	bl	8005edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001066:	f44f 7000 	mov.w	r0, #512	; 0x200
 800106a:	f001 fe17 	bl	8002c9c <HAL_PWREx_ControlVoltageScaling>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001074:	f000 fafa 	bl	800166c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001078:	2310      	movs	r3, #16
 800107a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800107c:	2301      	movs	r3, #1
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001084:	2360      	movs	r3, #96	; 0x60
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001088:	2300      	movs	r3, #0
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4618      	mov	r0, r3
 8001092:	f001 feb7 	bl	8002e04 <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800109c:	f000 fae6 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a0:	230f      	movs	r3, #15
 80010a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fabd 	bl	8003638 <HAL_RCC_ClockConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010c4:	f000 fad2 	bl	800166c <Error_Handler>
  }
}
 80010c8:	bf00      	nop
 80010ca:	3758      	adds	r7, #88	; 0x58
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_I2C1_Init+0x74>)
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <MX_I2C1_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_I2C1_Init+0x74>)
 80010dc:	f640 6214 	movw	r2, #3604	; 0xe14
 80010e0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_I2C1_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_I2C1_Init+0x74>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_I2C1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_I2C1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_I2C1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <MX_I2C1_Init+0x74>)
 800110e:	f000 ffd1 	bl	80020b4 <HAL_I2C_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001118:	f000 faa8 	bl	800166c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	4809      	ldr	r0, [pc, #36]	; (8001144 <MX_I2C1_Init+0x74>)
 8001120:	f001 fd04 	bl	8002b2c <HAL_I2CEx_ConfigAnalogFilter>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800112a:	f000 fa9f 	bl	800166c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800112e:	2100      	movs	r1, #0
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_I2C1_Init+0x74>)
 8001132:	f001 fd46 	bl	8002bc2 <HAL_I2CEx_ConfigDigitalFilter>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800113c:	f000 fa96 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200001f0 	.word	0x200001f0
 8001148:	40005400 	.word	0x40005400

0800114c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <MX_LPUART1_UART_Init+0x90>)
 8001152:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <MX_LPUART1_UART_Init+0x94>)
 8001154:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_LPUART1_UART_Init+0x90>)
 8001158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800115c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_LPUART1_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_LPUART1_UART_Init+0x90>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_LPUART1_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_LPUART1_UART_Init+0x90>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_LPUART1_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_LPUART1_UART_Init+0x90>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_LPUART1_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_LPUART1_UART_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_LPUART1_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001194:	4811      	ldr	r0, [pc, #68]	; (80011dc <MX_LPUART1_UART_Init+0x90>)
 8001196:	f003 fa25 	bl	80045e4 <HAL_UART_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80011a0:	f000 fa64 	bl	800166c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a4:	2100      	movs	r1, #0
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <MX_LPUART1_UART_Init+0x90>)
 80011a8:	f004 f84a 	bl	8005240 <HAL_UARTEx_SetTxFifoThreshold>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011b2:	f000 fa5b 	bl	800166c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b6:	2100      	movs	r1, #0
 80011b8:	4808      	ldr	r0, [pc, #32]	; (80011dc <MX_LPUART1_UART_Init+0x90>)
 80011ba:	f004 f87f 	bl	80052bc <HAL_UARTEx_SetRxFifoThreshold>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011c4:	f000 fa52 	bl	800166c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_LPUART1_UART_Init+0x90>)
 80011ca:	f004 f800 	bl	80051ce <HAL_UARTEx_DisableFifoMode>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011d4:	f000 fa4a 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000244 	.word	0x20000244
 80011e0:	40008000 	.word	0x40008000

080011e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08e      	sub	sp, #56	; 0x38
 80011e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fa:	4bb2      	ldr	r3, [pc, #712]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	4ab1      	ldr	r2, [pc, #708]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001206:	4baf      	ldr	r3, [pc, #700]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	4bac      	ldr	r3, [pc, #688]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4aab      	ldr	r2, [pc, #684]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4ba9      	ldr	r3, [pc, #676]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800122a:	4ba6      	ldr	r3, [pc, #664]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	4aa5      	ldr	r2, [pc, #660]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001230:	f043 0320 	orr.w	r3, r3, #32
 8001234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001236:	4ba3      	ldr	r3, [pc, #652]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001242:	4ba0      	ldr	r3, [pc, #640]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	4a9f      	ldr	r2, [pc, #636]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800124c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124e:	4b9d      	ldr	r3, [pc, #628]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	4b9a      	ldr	r3, [pc, #616]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	4a99      	ldr	r2, [pc, #612]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001266:	4b97      	ldr	r3, [pc, #604]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	4b94      	ldr	r3, [pc, #592]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	4a93      	ldr	r2, [pc, #588]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127e:	4b91      	ldr	r3, [pc, #580]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128a:	4b8e      	ldr	r3, [pc, #568]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	4a8d      	ldr	r2, [pc, #564]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001296:	4b8b      	ldr	r3, [pc, #556]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a2:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4a87      	ldr	r2, [pc, #540]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 80012a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b85      	ldr	r3, [pc, #532]	; (80014c4 <MX_GPIO_Init+0x2e0>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80012ba:	f001 fd93 	bl	8002de4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012be:	230c      	movs	r3, #12
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80012ce:	230d      	movs	r3, #13
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	4619      	mov	r1, r3
 80012d8:	487b      	ldr	r0, [pc, #492]	; (80014c8 <MX_GPIO_Init+0x2e4>)
 80012da:	f000 fd59 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80012de:	2307      	movs	r3, #7
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e2:	2312      	movs	r3, #18
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012ee:	2304      	movs	r3, #4
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	4874      	ldr	r0, [pc, #464]	; (80014cc <MX_GPIO_Init+0x2e8>)
 80012fa:	f000 fd49 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800130e:	230d      	movs	r3, #13
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	486c      	ldr	r0, [pc, #432]	; (80014cc <MX_GPIO_Init+0x2e8>)
 800131a:	f000 fd39 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800131e:	233f      	movs	r3, #63	; 0x3f
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001322:	230b      	movs	r3, #11
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132e:	4619      	mov	r1, r3
 8001330:	4867      	ldr	r0, [pc, #412]	; (80014d0 <MX_GPIO_Init+0x2ec>)
 8001332:	f000 fd2d 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001336:	2301      	movs	r3, #1
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001346:	2301      	movs	r3, #1
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	4619      	mov	r1, r3
 8001350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001354:	f000 fd1c 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001358:	230a      	movs	r3, #10
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800135c:	230b      	movs	r3, #11
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001368:	4619      	mov	r1, r3
 800136a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136e:	f000 fd0f 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001372:	23f0      	movs	r3, #240	; 0xf0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001382:	2305      	movs	r3, #5
 8001384:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f000 fcfe 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001394:	2301      	movs	r3, #1
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013a4:	2302      	movs	r3, #2
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ac:	4619      	mov	r1, r3
 80013ae:	4849      	ldr	r0, [pc, #292]	; (80014d4 <MX_GPIO_Init+0x2f0>)
 80013b0:	f000 fcee 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013b4:	2302      	movs	r3, #2
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013b8:	230b      	movs	r3, #11
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	4843      	ldr	r0, [pc, #268]	; (80014d4 <MX_GPIO_Init+0x2f0>)
 80013c8:	f000 fce2 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80013cc:	2344      	movs	r3, #68	; 0x44
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d0:	2303      	movs	r3, #3
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	4619      	mov	r1, r3
 80013de:	483d      	ldr	r0, [pc, #244]	; (80014d4 <MX_GPIO_Init+0x2f0>)
 80013e0:	f000 fcd6 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013e4:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013f6:	2301      	movs	r3, #1
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fe:	4619      	mov	r1, r3
 8001400:	4831      	ldr	r0, [pc, #196]	; (80014c8 <MX_GPIO_Init+0x2e4>)
 8001402:	f000 fcc5 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001406:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001418:	2303      	movs	r3, #3
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	4829      	ldr	r0, [pc, #164]	; (80014c8 <MX_GPIO_Init+0x2e4>)
 8001424:	f000 fcb4 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800143a:	2301      	movs	r3, #1
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001442:	4619      	mov	r1, r3
 8001444:	4823      	ldr	r0, [pc, #140]	; (80014d4 <MX_GPIO_Init+0x2f0>)
 8001446:	f000 fca3 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800144a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800145c:	230d      	movs	r3, #13
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	481b      	ldr	r0, [pc, #108]	; (80014d4 <MX_GPIO_Init+0x2f0>)
 8001468:	f000 fc92 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800146c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800147e:	230e      	movs	r3, #14
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	4812      	ldr	r0, [pc, #72]	; (80014d4 <MX_GPIO_Init+0x2f0>)
 800148a:	f000 fc81 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800148e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014a0:	2307      	movs	r3, #7
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a8:	4619      	mov	r1, r3
 80014aa:	480b      	ldr	r0, [pc, #44]	; (80014d8 <MX_GPIO_Init+0x2f4>)
 80014ac:	f000 fc70 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	e00c      	b.n	80014dc <MX_GPIO_Init+0x2f8>
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000
 80014c8:	48001000 	.word	0x48001000
 80014cc:	48001400 	.word	0x48001400
 80014d0:	48000800 	.word	0x48000800
 80014d4:	48000400 	.word	0x48000400
 80014d8:	48000c00 	.word	0x48000c00
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014de:	2302      	movs	r3, #2
 80014e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e6:	4619      	mov	r1, r3
 80014e8:	4853      	ldr	r0, [pc, #332]	; (8001638 <MX_GPIO_Init+0x454>)
 80014ea:	f000 fc51 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014ee:	2340      	movs	r3, #64	; 0x40
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80014fe:	230d      	movs	r3, #13
 8001500:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001506:	4619      	mov	r1, r3
 8001508:	484c      	ldr	r0, [pc, #304]	; (800163c <MX_GPIO_Init+0x458>)
 800150a:	f000 fc41 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800151e:	2302      	movs	r3, #2
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	4844      	ldr	r0, [pc, #272]	; (800163c <MX_GPIO_Init+0x458>)
 800152a:	f000 fc31 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800152e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001540:	230c      	movs	r3, #12
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	483c      	ldr	r0, [pc, #240]	; (800163c <MX_GPIO_Init+0x458>)
 800154c:	f000 fc20 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001550:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001562:	230a      	movs	r3, #10
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001570:	f000 fc0e 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158c:	f000 fc00 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001590:	2301      	movs	r3, #1
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80015a0:	2309      	movs	r3, #9
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a8:	4619      	mov	r1, r3
 80015aa:	4823      	ldr	r0, [pc, #140]	; (8001638 <MX_GPIO_Init+0x454>)
 80015ac:	f000 fbf0 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015b0:	2304      	movs	r3, #4
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015c0:	230c      	movs	r3, #12
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	481b      	ldr	r0, [pc, #108]	; (8001638 <MX_GPIO_Init+0x454>)
 80015cc:	f000 fbe0 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80015d0:	2378      	movs	r3, #120	; 0x78
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e0:	2307      	movs	r3, #7
 80015e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e8:	4619      	mov	r1, r3
 80015ea:	4813      	ldr	r0, [pc, #76]	; (8001638 <MX_GPIO_Init+0x454>)
 80015ec:	f000 fbd0 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80015f0:	2338      	movs	r3, #56	; 0x38
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001600:	2306      	movs	r3, #6
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	4619      	mov	r1, r3
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <MX_GPIO_Init+0x45c>)
 800160c:	f000 fbc0 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001610:	2301      	movs	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001620:	2302      	movs	r3, #2
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001628:	4619      	mov	r1, r3
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <MX_GPIO_Init+0x460>)
 800162c:	f000 fbb0 	bl	8001d90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001630:	bf00      	nop
 8001632:	3738      	adds	r7, #56	; 0x38
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	48000c00 	.word	0x48000c00
 800163c:	48000800 	.word	0x48000800
 8001640:	48000400 	.word	0x48000400
 8001644:	48001000 	.word	0x48001000

08001648 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001650:	1d39      	adds	r1, r7, #4
 8001652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001656:	2201      	movs	r2, #1
 8001658:	4803      	ldr	r0, [pc, #12]	; (8001668 <__io_putchar+0x20>)
 800165a:	f003 f813 	bl	8004684 <HAL_UART_Transmit>
  return ch;
 800165e:	687b      	ldr	r3, [r7, #4]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000244 	.word	0x20000244

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_MspInit+0x44>)
 8001680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_MspInit+0x44>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6613      	str	r3, [r2, #96]	; 0x60
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_MspInit+0x44>)
 800168c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_MspInit+0x44>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169a:	4a08      	ldr	r2, [pc, #32]	; (80016bc <HAL_MspInit+0x44>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	6593      	str	r3, [r2, #88]	; 0x58
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_MspInit+0x44>)
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b0ae      	sub	sp, #184	; 0xb8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	2294      	movs	r2, #148	; 0x94
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f004 fbfb 	bl	8005edc <memset>
  if(hi2c->Instance==I2C1)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a21      	ldr	r2, [pc, #132]	; (8001770 <HAL_I2C_MspInit+0xb0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d13b      	bne.n	8001768 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016f0:	2340      	movs	r3, #64	; 0x40
 80016f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 fa59 	bl	8003bb4 <HAL_RCCEx_PeriphCLKConfig>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001708:	f7ff ffb0 	bl	800166c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_I2C_MspInit+0xb4>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001710:	4a18      	ldr	r2, [pc, #96]	; (8001774 <HAL_I2C_MspInit+0xb4>)
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_I2C_MspInit+0xb4>)
 800171a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001724:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001728:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800172c:	2312      	movs	r3, #18
 800172e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800173e:	2304      	movs	r3, #4
 8001740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001748:	4619      	mov	r1, r3
 800174a:	480b      	ldr	r0, [pc, #44]	; (8001778 <HAL_I2C_MspInit+0xb8>)
 800174c:	f000 fb20 	bl	8001d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_I2C_MspInit+0xb4>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	4a07      	ldr	r2, [pc, #28]	; (8001774 <HAL_I2C_MspInit+0xb4>)
 8001756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800175a:	6593      	str	r3, [r2, #88]	; 0x58
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_I2C_MspInit+0xb4>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001768:	bf00      	nop
 800176a:	37b8      	adds	r7, #184	; 0xb8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40005400 	.word	0x40005400
 8001774:	40021000 	.word	0x40021000
 8001778:	48000400 	.word	0x48000400

0800177c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b0ae      	sub	sp, #184	; 0xb8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	2294      	movs	r2, #148	; 0x94
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f004 fb9d 	bl	8005edc <memset>
  if(huart->Instance==LPUART1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a22      	ldr	r2, [pc, #136]	; (8001830 <HAL_UART_MspInit+0xb4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d13d      	bne.n	8001828 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017ac:	2320      	movs	r3, #32
 80017ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	4618      	mov	r0, r3
 80017ba:	f002 f9fb 	bl	8003bb4 <HAL_RCCEx_PeriphCLKConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017c4:	f7ff ff52 	bl	800166c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <HAL_UART_MspInit+0xb8>)
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	4a19      	ldr	r2, [pc, #100]	; (8001834 <HAL_UART_MspInit+0xb8>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_UART_MspInit+0xb8>)
 80017d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_UART_MspInit+0xb8>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	4a13      	ldr	r2, [pc, #76]	; (8001834 <HAL_UART_MspInit+0xb8>)
 80017e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_UART_MspInit+0xb8>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80017f8:	f001 faf4 	bl	8002de4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80017fc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001816:	2308      	movs	r3, #8
 8001818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800181c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001820:	4619      	mov	r1, r3
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <HAL_UART_MspInit+0xbc>)
 8001824:	f000 fab4 	bl	8001d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	37b8      	adds	r7, #184	; 0xb8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40008000 	.word	0x40008000
 8001834:	40021000 	.word	0x40021000
 8001838:	48001800 	.word	0x48001800

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <NMI_Handler+0x4>

08001842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler+0x4>

0800184e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler+0x4>

0800185a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001888:	f000 f958 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return 1;
 8001894:	2301      	movs	r3, #1
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_kill>:

int _kill(int pid, int sig)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018aa:	f004 fb23 	bl	8005ef4 <__errno>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2216      	movs	r2, #22
 80018b2:	601a      	str	r2, [r3, #0]
  return -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_exit>:

void _exit (int status)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ffe7 	bl	80018a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018d2:	e7fe      	b.n	80018d2 <_exit+0x12>

080018d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e00a      	b.n	80018fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e6:	f3af 8000 	nop.w
 80018ea:	4601      	mov	r1, r0
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	60ba      	str	r2, [r7, #8]
 80018f2:	b2ca      	uxtb	r2, r1
 80018f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	dbf0      	blt.n	80018e6 <_read+0x12>
  }

  return len;
 8001904:	687b      	ldr	r3, [r7, #4]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	e009      	b.n	8001934 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	60ba      	str	r2, [r7, #8]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fe8d 	bl	8001648 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf1      	blt.n	8001920 <_write+0x12>
  }
  return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_close>:

int _close(int file)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196e:	605a      	str	r2, [r3, #4]
  return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_isatty>:

int _isatty(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b8:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <_sbrk+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <_sbrk+0x60>)
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <_sbrk+0x64>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <_sbrk+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d207      	bcs.n	80019f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e0:	f004 fa88 	bl	8005ef4 <__errno>
 80019e4:	4603      	mov	r3, r0
 80019e6:	220c      	movs	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200a0000 	.word	0x200a0000
 8001a10:	00000400 	.word	0x00000400
 8001a14:	200002dc 	.word	0x200002dc
 8001a18:	20000430 	.word	0x20000430

08001a1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <SystemInit+0x20>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <SystemInit+0x20>)
 8001a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a44:	f7ff ffea 	bl	8001a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a48:	480c      	ldr	r0, [pc, #48]	; (8001a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a4a:	490d      	ldr	r1, [pc, #52]	; (8001a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <LoopForever+0xe>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a50:	e002      	b.n	8001a58 <LoopCopyDataInit>

08001a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a56:	3304      	adds	r3, #4

08001a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a5c:	d3f9      	bcc.n	8001a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a60:	4c0a      	ldr	r4, [pc, #40]	; (8001a8c <LoopForever+0x16>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a64:	e001      	b.n	8001a6a <LoopFillZerobss>

08001a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a68:	3204      	adds	r2, #4

08001a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a6c:	d3fb      	bcc.n	8001a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a6e:	f004 fa47 	bl	8005f00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a72:	f7ff fad3 	bl	800101c <main>

08001a76 <LoopForever>:

LoopForever:
    b LoopForever
 8001a76:	e7fe      	b.n	8001a76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a78:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a80:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a84:	08008234 	.word	0x08008234
  ldr r2, =_sbss
 8001a88:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a8c:	20000430 	.word	0x20000430

08001a90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <ADC1_IRQHandler>

08001a92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 f943 	bl	8001d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 f80e 	bl	8001ac4 <HAL_InitTick>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	71fb      	strb	r3, [r7, #7]
 8001ab2:	e001      	b.n	8001ab8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ab4:	f7ff fde0 	bl	8001678 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_InitTick+0x6c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d023      	beq.n	8001b20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <HAL_InitTick+0x70>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <HAL_InitTick+0x6c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f941 	bl	8001d76 <HAL_SYSTICK_Config>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10f      	bne.n	8001b1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d809      	bhi.n	8001b14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b08:	f000 f919 	bl	8001d3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_InitTick+0x74>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e007      	b.n	8001b24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e004      	b.n	8001b24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	e001      	b.n	8001b24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	200002e0 	.word	0x200002e0

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	200002e0 	.word	0x200002e0

08001b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff ffee 	bl	8001b64 <HAL_GetTick>
 8001b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b94:	d005      	beq.n	8001ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_Delay+0x44>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ba2:	bf00      	nop
 8001ba4:	f7ff ffde 	bl	8001b64 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d8f7      	bhi.n	8001ba4 <HAL_Delay+0x28>
  {
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000008 	.word	0x20000008

08001bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be0:	4013      	ands	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf6:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	60d3      	str	r3, [r2, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <__NVIC_GetPriorityGrouping+0x18>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	f003 0307 	and.w	r3, r3, #7
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	; (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	; (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	; 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf4:	d301      	bcc.n	8001cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00f      	b.n	8001d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <SysTick_Config+0x40>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d02:	210f      	movs	r1, #15
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d08:	f7ff ff8e 	bl	8001c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <SysTick_Config+0x40>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <SysTick_Config+0x40>)
 8001d14:	2207      	movs	r2, #7
 8001d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	e000e010 	.word	0xe000e010

08001d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff47 	bl	8001bc4 <__NVIC_SetPriorityGrouping>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d50:	f7ff ff5c 	bl	8001c0c <__NVIC_GetPriorityGrouping>
 8001d54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7ff ff8e 	bl	8001c7c <NVIC_EncodePriority>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff5d 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffb0 	bl	8001ce4 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9e:	e166      	b.n	800206e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2101      	movs	r1, #1
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	4013      	ands	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8158 	beq.w	8002068 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d005      	beq.n	8001dd0 <HAL_GPIO_Init+0x40>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d130      	bne.n	8001e32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e06:	2201      	movs	r2, #1
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 0201 	and.w	r2, r3, #1
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d017      	beq.n	8001e6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	2203      	movs	r2, #3
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d123      	bne.n	8001ec2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	08da      	lsrs	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3208      	adds	r2, #8
 8001ebc:	6939      	ldr	r1, [r7, #16]
 8001ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0203 	and.w	r2, r3, #3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80b2 	beq.w	8002068 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f04:	4b61      	ldr	r3, [pc, #388]	; (800208c <HAL_GPIO_Init+0x2fc>)
 8001f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f08:	4a60      	ldr	r2, [pc, #384]	; (800208c <HAL_GPIO_Init+0x2fc>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001f10:	4b5e      	ldr	r3, [pc, #376]	; (800208c <HAL_GPIO_Init+0x2fc>)
 8001f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f1c:	4a5c      	ldr	r2, [pc, #368]	; (8002090 <HAL_GPIO_Init+0x300>)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	3302      	adds	r3, #2
 8001f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	220f      	movs	r2, #15
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f46:	d02b      	beq.n	8001fa0 <HAL_GPIO_Init+0x210>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a52      	ldr	r2, [pc, #328]	; (8002094 <HAL_GPIO_Init+0x304>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d025      	beq.n	8001f9c <HAL_GPIO_Init+0x20c>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a51      	ldr	r2, [pc, #324]	; (8002098 <HAL_GPIO_Init+0x308>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d01f      	beq.n	8001f98 <HAL_GPIO_Init+0x208>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a50      	ldr	r2, [pc, #320]	; (800209c <HAL_GPIO_Init+0x30c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d019      	beq.n	8001f94 <HAL_GPIO_Init+0x204>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a4f      	ldr	r2, [pc, #316]	; (80020a0 <HAL_GPIO_Init+0x310>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d013      	beq.n	8001f90 <HAL_GPIO_Init+0x200>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a4e      	ldr	r2, [pc, #312]	; (80020a4 <HAL_GPIO_Init+0x314>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00d      	beq.n	8001f8c <HAL_GPIO_Init+0x1fc>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a4d      	ldr	r2, [pc, #308]	; (80020a8 <HAL_GPIO_Init+0x318>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d007      	beq.n	8001f88 <HAL_GPIO_Init+0x1f8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a4c      	ldr	r2, [pc, #304]	; (80020ac <HAL_GPIO_Init+0x31c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d101      	bne.n	8001f84 <HAL_GPIO_Init+0x1f4>
 8001f80:	2307      	movs	r3, #7
 8001f82:	e00e      	b.n	8001fa2 <HAL_GPIO_Init+0x212>
 8001f84:	2308      	movs	r3, #8
 8001f86:	e00c      	b.n	8001fa2 <HAL_GPIO_Init+0x212>
 8001f88:	2306      	movs	r3, #6
 8001f8a:	e00a      	b.n	8001fa2 <HAL_GPIO_Init+0x212>
 8001f8c:	2305      	movs	r3, #5
 8001f8e:	e008      	b.n	8001fa2 <HAL_GPIO_Init+0x212>
 8001f90:	2304      	movs	r3, #4
 8001f92:	e006      	b.n	8001fa2 <HAL_GPIO_Init+0x212>
 8001f94:	2303      	movs	r3, #3
 8001f96:	e004      	b.n	8001fa2 <HAL_GPIO_Init+0x212>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e002      	b.n	8001fa2 <HAL_GPIO_Init+0x212>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_GPIO_Init+0x212>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	f002 0203 	and.w	r2, r2, #3
 8001fa8:	0092      	lsls	r2, r2, #2
 8001faa:	4093      	lsls	r3, r2
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fb2:	4937      	ldr	r1, [pc, #220]	; (8002090 <HAL_GPIO_Init+0x300>)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fc0:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <HAL_GPIO_Init+0x320>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fe4:	4a32      	ldr	r2, [pc, #200]	; (80020b0 <HAL_GPIO_Init+0x320>)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <HAL_GPIO_Init+0x320>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800200e:	4a28      	ldr	r2, [pc, #160]	; (80020b0 <HAL_GPIO_Init+0x320>)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002014:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <HAL_GPIO_Init+0x320>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	43db      	mvns	r3, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002038:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <HAL_GPIO_Init+0x320>)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <HAL_GPIO_Init+0x320>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002062:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <HAL_GPIO_Init+0x320>)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	3301      	adds	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f ae91 	bne.w	8001da0 <HAL_GPIO_Init+0x10>
  }
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	371c      	adds	r7, #28
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	40021000 	.word	0x40021000
 8002090:	40010000 	.word	0x40010000
 8002094:	48000400 	.word	0x48000400
 8002098:	48000800 	.word	0x48000800
 800209c:	48000c00 	.word	0x48000c00
 80020a0:	48001000 	.word	0x48001000
 80020a4:	48001400 	.word	0x48001400
 80020a8:	48001800 	.word	0x48001800
 80020ac:	48001c00 	.word	0x48001c00
 80020b0:	40010400 	.word	0x40010400

080020b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e08d      	b.n	80021e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff faf0 	bl	80016c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2224      	movs	r2, #36	; 0x24
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002104:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002114:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d107      	bne.n	800212e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	e006      	b.n	800213c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800213a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d108      	bne.n	8002156 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	e007      	b.n	8002166 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002164:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002178:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002188:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69d9      	ldr	r1, [r3, #28]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1a      	ldr	r2, [r3, #32]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	461a      	mov	r2, r3
 80021f8:	460b      	mov	r3, r1
 80021fa:	817b      	strh	r3, [r7, #10]
 80021fc:	4613      	mov	r3, r2
 80021fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b20      	cmp	r3, #32
 800220a:	f040 80fd 	bne.w	8002408 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_I2C_Master_Transmit+0x30>
 8002218:	2302      	movs	r3, #2
 800221a:	e0f6      	b.n	800240a <HAL_I2C_Master_Transmit+0x21e>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002224:	f7ff fc9e 	bl	8001b64 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2319      	movs	r3, #25
 8002230:	2201      	movs	r2, #1
 8002232:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 fa0a 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0e1      	b.n	800240a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2221      	movs	r2, #33	; 0x21
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2210      	movs	r2, #16
 8002252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	893a      	ldrh	r2, [r7, #8]
 8002266:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	2bff      	cmp	r3, #255	; 0xff
 8002276:	d906      	bls.n	8002286 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	22ff      	movs	r2, #255	; 0xff
 800227c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800227e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	e007      	b.n	8002296 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002290:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002294:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229a:	2b00      	cmp	r3, #0
 800229c:	d024      	beq.n	80022e8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	3301      	adds	r3, #1
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	8979      	ldrh	r1, [r7, #10]
 80022da:	4b4e      	ldr	r3, [pc, #312]	; (8002414 <HAL_I2C_Master_Transmit+0x228>)
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fbf1 	bl	8002ac8 <I2C_TransferConfig>
 80022e6:	e066      	b.n	80023b6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	8979      	ldrh	r1, [r7, #10]
 80022f0:	4b48      	ldr	r3, [pc, #288]	; (8002414 <HAL_I2C_Master_Transmit+0x228>)
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fbe6 	bl	8002ac8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80022fc:	e05b      	b.n	80023b6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	6a39      	ldr	r1, [r7, #32]
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 f9f3 	bl	80026ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e07b      	b.n	800240a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d034      	beq.n	80023b6 <HAL_I2C_Master_Transmit+0x1ca>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	2b00      	cmp	r3, #0
 8002352:	d130      	bne.n	80023b6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	2200      	movs	r2, #0
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f976 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e04d      	b.n	800240a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	2bff      	cmp	r3, #255	; 0xff
 8002376:	d90e      	bls.n	8002396 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	22ff      	movs	r2, #255	; 0xff
 800237c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	b2da      	uxtb	r2, r3
 8002384:	8979      	ldrh	r1, [r7, #10]
 8002386:	2300      	movs	r3, #0
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 fb9a 	bl	8002ac8 <I2C_TransferConfig>
 8002394:	e00f      	b.n	80023b6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	8979      	ldrh	r1, [r7, #10]
 80023a8:	2300      	movs	r3, #0
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fb89 	bl	8002ac8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d19e      	bne.n	80022fe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	6a39      	ldr	r1, [r7, #32]
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f9d9 	bl	800277c <I2C_WaitOnSTOPFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e01a      	b.n	800240a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2220      	movs	r2, #32
 80023da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <HAL_I2C_Master_Transmit+0x22c>)
 80023e8:	400b      	ands	r3, r1
 80023ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	e000      	b.n	800240a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002408:	2302      	movs	r3, #2
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	80002000 	.word	0x80002000
 8002418:	fe00e800 	.word	0xfe00e800

0800241c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	461a      	mov	r2, r3
 8002428:	460b      	mov	r3, r1
 800242a:	817b      	strh	r3, [r7, #10]
 800242c:	4613      	mov	r3, r2
 800242e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b20      	cmp	r3, #32
 800243a:	f040 80db 	bne.w	80025f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_I2C_Master_Receive+0x30>
 8002448:	2302      	movs	r3, #2
 800244a:	e0d4      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002454:	f7ff fb86 	bl	8001b64 <HAL_GetTick>
 8002458:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2319      	movs	r3, #25
 8002460:	2201      	movs	r2, #1
 8002462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f8f2 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0bf      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2222      	movs	r2, #34	; 0x22
 800247a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2210      	movs	r2, #16
 8002482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	893a      	ldrh	r2, [r7, #8]
 8002496:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2bff      	cmp	r3, #255	; 0xff
 80024a6:	d90e      	bls.n	80024c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	22ff      	movs	r2, #255	; 0xff
 80024ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	8979      	ldrh	r1, [r7, #10]
 80024b6:	4b52      	ldr	r3, [pc, #328]	; (8002600 <HAL_I2C_Master_Receive+0x1e4>)
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fb02 	bl	8002ac8 <I2C_TransferConfig>
 80024c4:	e06d      	b.n	80025a2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	8979      	ldrh	r1, [r7, #10]
 80024d8:	4b49      	ldr	r3, [pc, #292]	; (8002600 <HAL_I2C_Master_Receive+0x1e4>)
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 faf1 	bl	8002ac8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80024e6:	e05c      	b.n	80025a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	6a39      	ldr	r1, [r7, #32]
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f989 	bl	8002804 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e07c      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d034      	beq.n	80025a2 <HAL_I2C_Master_Receive+0x186>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	d130      	bne.n	80025a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	2200      	movs	r2, #0
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f880 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e04d      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	2bff      	cmp	r3, #255	; 0xff
 8002562:	d90e      	bls.n	8002582 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	22ff      	movs	r2, #255	; 0xff
 8002568:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256e:	b2da      	uxtb	r2, r3
 8002570:	8979      	ldrh	r1, [r7, #10]
 8002572:	2300      	movs	r3, #0
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 faa4 	bl	8002ac8 <I2C_TransferConfig>
 8002580:	e00f      	b.n	80025a2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002590:	b2da      	uxtb	r2, r3
 8002592:	8979      	ldrh	r1, [r7, #10]
 8002594:	2300      	movs	r3, #0
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fa93 	bl	8002ac8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d19d      	bne.n	80024e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	6a39      	ldr	r1, [r7, #32]
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f8e3 	bl	800277c <I2C_WaitOnSTOPFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e01a      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2220      	movs	r2, #32
 80025c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6859      	ldr	r1, [r3, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <HAL_I2C_Master_Receive+0x1e8>)
 80025d4:	400b      	ands	r3, r1
 80025d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e000      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80025f4:	2302      	movs	r3, #2
  }
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	80002400 	.word	0x80002400
 8002604:	fe00e800 	.word	0xfe00e800

08002608 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b02      	cmp	r3, #2
 800261c:	d103      	bne.n	8002626 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2200      	movs	r2, #0
 8002624:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d007      	beq.n	8002644 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	619a      	str	r2, [r3, #24]
  }
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002660:	e031      	b.n	80026c6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002668:	d02d      	beq.n	80026c6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266a:	f7ff fa7b 	bl	8001b64 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d302      	bcc.n	8002680 <I2C_WaitOnFlagUntilTimeout+0x30>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d122      	bne.n	80026c6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	4013      	ands	r3, r2
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	429a      	cmp	r2, r3
 800268e:	bf0c      	ite	eq
 8002690:	2301      	moveq	r3, #1
 8002692:	2300      	movne	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	429a      	cmp	r2, r3
 800269c:	d113      	bne.n	80026c6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f043 0220 	orr.w	r2, r3, #32
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699a      	ldr	r2, [r3, #24]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4013      	ands	r3, r2
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	bf0c      	ite	eq
 80026d6:	2301      	moveq	r3, #1
 80026d8:	2300      	movne	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d0be      	beq.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026fa:	e033      	b.n	8002764 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f901 	bl	8002908 <I2C_IsErrorOccurred>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e031      	b.n	8002774 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002716:	d025      	beq.n	8002764 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002718:	f7ff fa24 	bl	8001b64 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	429a      	cmp	r2, r3
 8002726:	d302      	bcc.n	800272e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d11a      	bne.n	8002764 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b02      	cmp	r3, #2
 800273a:	d013      	beq.n	8002764 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e007      	b.n	8002774 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b02      	cmp	r3, #2
 8002770:	d1c4      	bne.n	80026fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002788:	e02f      	b.n	80027ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f8ba 	bl	8002908 <I2C_IsErrorOccurred>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e02d      	b.n	80027fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279e:	f7ff f9e1 	bl	8001b64 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d302      	bcc.n	80027b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d11a      	bne.n	80027ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d013      	beq.n	80027ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f043 0220 	orr.w	r2, r3, #32
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e007      	b.n	80027fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d1c8      	bne.n	800278a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002810:	e06b      	b.n	80028ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f876 	bl	8002908 <I2C_IsErrorOccurred>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e069      	b.n	80028fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b20      	cmp	r3, #32
 8002832:	d138      	bne.n	80028a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	2b04      	cmp	r3, #4
 8002840:	d105      	bne.n	800284e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e055      	b.n	80028fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b10      	cmp	r3, #16
 800285a:	d107      	bne.n	800286c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2210      	movs	r2, #16
 8002862:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2204      	movs	r2, #4
 8002868:	645a      	str	r2, [r3, #68]	; 0x44
 800286a:	e002      	b.n	8002872 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2220      	movs	r2, #32
 8002878:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002886:	400b      	ands	r3, r1
 8002888:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e029      	b.n	80028fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a6:	f7ff f95d 	bl	8001b64 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d302      	bcc.n	80028bc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d116      	bne.n	80028ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d00f      	beq.n	80028ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f043 0220 	orr.w	r2, r3, #32
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e007      	b.n	80028fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d18c      	bne.n	8002812 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	fe00e800 	.word	0xfe00e800

08002908 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	; 0x28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	d068      	beq.n	8002a06 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2210      	movs	r2, #16
 800293a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800293c:	e049      	b.n	80029d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002944:	d045      	beq.n	80029d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002946:	f7ff f90d 	bl	8001b64 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	429a      	cmp	r2, r3
 8002954:	d302      	bcc.n	800295c <I2C_IsErrorOccurred+0x54>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d13a      	bne.n	80029d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002966:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800296e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800297a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800297e:	d121      	bne.n	80029c4 <I2C_IsErrorOccurred+0xbc>
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002986:	d01d      	beq.n	80029c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002988:	7cfb      	ldrb	r3, [r7, #19]
 800298a:	2b20      	cmp	r3, #32
 800298c:	d01a      	beq.n	80029c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800299c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800299e:	f7ff f8e1 	bl	8001b64 <HAL_GetTick>
 80029a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029a4:	e00e      	b.n	80029c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029a6:	f7ff f8dd 	bl	8001b64 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b19      	cmp	r3, #25
 80029b2:	d907      	bls.n	80029c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	f043 0320 	orr.w	r3, r3, #32
 80029ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80029c2:	e006      	b.n	80029d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d1e9      	bne.n	80029a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d003      	beq.n	80029e8 <I2C_IsErrorOccurred+0xe0>
 80029e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0aa      	beq.n	800293e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d103      	bne.n	80029f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2220      	movs	r2, #32
 80029f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00b      	beq.n	8002a30 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00b      	beq.n	8002a52 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	f043 0308 	orr.w	r3, r3, #8
 8002a40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00b      	beq.n	8002a74 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	f043 0302 	orr.w	r3, r3, #2
 8002a62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01c      	beq.n	8002ab6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7ff fdc3 	bl	8002608 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <I2C_IsErrorOccurred+0x1bc>)
 8002a8e:	400b      	ands	r3, r1
 8002a90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3728      	adds	r7, #40	; 0x28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	fe00e800 	.word	0xfe00e800

08002ac8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	817b      	strh	r3, [r7, #10]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ada:	897b      	ldrh	r3, [r7, #10]
 8002adc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ae0:	7a7b      	ldrb	r3, [r7, #9]
 8002ae2:	041b      	lsls	r3, r3, #16
 8002ae4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ae8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002af6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	0d5b      	lsrs	r3, r3, #21
 8002b02:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <I2C_TransferConfig+0x60>)
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	ea02 0103 	and.w	r1, r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	03ff63ff 	.word	0x03ff63ff

08002b2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d138      	bne.n	8002bb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e032      	b.n	8002bb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2224      	movs	r2, #36	; 0x24
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6819      	ldr	r1, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d139      	bne.n	8002c4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e033      	b.n	8002c4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2224      	movs	r2, #36	; 0x24
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e000      	b.n	8002c4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
  }
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c60:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6c:	d102      	bne.n	8002c74 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c72:	e00b      	b.n	8002c8c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c82:	d102      	bne.n	8002c8a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c88:	e000      	b.n	8002c8c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002c8a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40007000 	.word	0x40007000

08002c9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d141      	bne.n	8002d2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002caa:	4b4b      	ldr	r3, [pc, #300]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb6:	d131      	bne.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cb8:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cbe:	4a46      	ldr	r2, [pc, #280]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cc8:	4b43      	ldr	r3, [pc, #268]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cd0:	4a41      	ldr	r2, [pc, #260]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002cd8:	4b40      	ldr	r3, [pc, #256]	; (8002ddc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2232      	movs	r2, #50	; 0x32
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	4a3f      	ldr	r2, [pc, #252]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	0c9b      	lsrs	r3, r3, #18
 8002cea:	3301      	adds	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cee:	e002      	b.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf6:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d02:	d102      	bne.n	8002d0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f2      	bne.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d0a:	4b33      	ldr	r3, [pc, #204]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d16:	d158      	bne.n	8002dca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e057      	b.n	8002dcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d1c:	4b2e      	ldr	r3, [pc, #184]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d22:	4a2d      	ldr	r2, [pc, #180]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d2c:	e04d      	b.n	8002dca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d34:	d141      	bne.n	8002dba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d36:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d42:	d131      	bne.n	8002da8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d44:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d4a:	4a23      	ldr	r2, [pc, #140]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d54:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d5c:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2232      	movs	r2, #50	; 0x32
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	0c9b      	lsrs	r3, r3, #18
 8002d76:	3301      	adds	r3, #1
 8002d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d7a:	e002      	b.n	8002d82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8e:	d102      	bne.n	8002d96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f2      	bne.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da2:	d112      	bne.n	8002dca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e011      	b.n	8002dcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002db8:	e007      	b.n	8002dca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dba:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dc2:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	431bde83 	.word	0x431bde83

08002de4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df2:	6053      	str	r3, [r2, #4]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40007000 	.word	0x40007000

08002e04 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f000 bc08 	b.w	8003628 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e18:	4b96      	ldr	r3, [pc, #600]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e22:	4b94      	ldr	r3, [pc, #592]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80e4 	beq.w	8003002 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4c>
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	f040 808b 	bne.w	8002f5e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	f040 8087 	bne.w	8002f5e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e50:	4b88      	ldr	r3, [pc, #544]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_OscConfig+0x64>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e3df      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1a      	ldr	r2, [r3, #32]
 8002e6c:	4b81      	ldr	r3, [pc, #516]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <HAL_RCC_OscConfig+0x7e>
 8002e78:	4b7e      	ldr	r3, [pc, #504]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e80:	e005      	b.n	8002e8e <HAL_RCC_OscConfig+0x8a>
 8002e82:	4b7c      	ldr	r3, [pc, #496]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d223      	bcs.n	8002eda <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fdcc 	bl	8003a34 <RCC_SetFlashLatencyFromMSIRange>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e3c0      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea6:	4b73      	ldr	r3, [pc, #460]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a72      	ldr	r2, [pc, #456]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002eac:	f043 0308 	orr.w	r3, r3, #8
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b70      	ldr	r3, [pc, #448]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	496d      	ldr	r1, [pc, #436]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec4:	4b6b      	ldr	r3, [pc, #428]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	4968      	ldr	r1, [pc, #416]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
 8002ed8:	e025      	b.n	8002f26 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eda:	4b66      	ldr	r3, [pc, #408]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a65      	ldr	r2, [pc, #404]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b63      	ldr	r3, [pc, #396]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4960      	ldr	r1, [pc, #384]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef8:	4b5e      	ldr	r3, [pc, #376]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	495b      	ldr	r1, [pc, #364]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fd8c 	bl	8003a34 <RCC_SetFlashLatencyFromMSIRange>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e380      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f26:	f000 fcc1 	bl	80038ac <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b51      	ldr	r3, [pc, #324]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	4950      	ldr	r1, [pc, #320]	; (8003078 <HAL_RCC_OscConfig+0x274>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f42:	4a4e      	ldr	r2, [pc, #312]	; (800307c <HAL_RCC_OscConfig+0x278>)
 8002f44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f46:	4b4e      	ldr	r3, [pc, #312]	; (8003080 <HAL_RCC_OscConfig+0x27c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fdba 	bl	8001ac4 <HAL_InitTick>
 8002f50:	4603      	mov	r3, r0
 8002f52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d052      	beq.n	8003000 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	e364      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d032      	beq.n	8002fcc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f66:	4b43      	ldr	r3, [pc, #268]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a42      	ldr	r2, [pc, #264]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f72:	f7fe fdf7 	bl	8001b64 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f7a:	f7fe fdf3 	bl	8001b64 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e34d      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f8c:	4b39      	ldr	r3, [pc, #228]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f98:	4b36      	ldr	r3, [pc, #216]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a35      	ldr	r2, [pc, #212]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	f043 0308 	orr.w	r3, r3, #8
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	4b33      	ldr	r3, [pc, #204]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4930      	ldr	r1, [pc, #192]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fb6:	4b2f      	ldr	r3, [pc, #188]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	492b      	ldr	r1, [pc, #172]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
 8002fca:	e01a      	b.n	8003002 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fcc:	4b29      	ldr	r3, [pc, #164]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fdc4 	bl	8001b64 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fe0:	f7fe fdc0 	bl	8001b64 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e31a      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ff2:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x1dc>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d073      	beq.n	80030f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d005      	beq.n	8003020 <HAL_RCC_OscConfig+0x21c>
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b0c      	cmp	r3, #12
 8003018:	d10e      	bne.n	8003038 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d10b      	bne.n	8003038 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	4b14      	ldr	r3, [pc, #80]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d063      	beq.n	80030f4 <HAL_RCC_OscConfig+0x2f0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d15f      	bne.n	80030f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e2f7      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003040:	d106      	bne.n	8003050 <HAL_RCC_OscConfig+0x24c>
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e025      	b.n	800309c <HAL_RCC_OscConfig+0x298>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003058:	d114      	bne.n	8003084 <HAL_RCC_OscConfig+0x280>
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a05      	ldr	r2, [pc, #20]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8003060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b03      	ldr	r3, [pc, #12]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a02      	ldr	r2, [pc, #8]	; (8003074 <HAL_RCC_OscConfig+0x270>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e013      	b.n	800309c <HAL_RCC_OscConfig+0x298>
 8003074:	40021000 	.word	0x40021000
 8003078:	08007e40 	.word	0x08007e40
 800307c:	20000000 	.word	0x20000000
 8003080:	20000004 	.word	0x20000004
 8003084:	4ba0      	ldr	r3, [pc, #640]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a9f      	ldr	r2, [pc, #636]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 800308a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	4b9d      	ldr	r3, [pc, #628]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a9c      	ldr	r2, [pc, #624]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 8003096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fe fd5e 	bl	8001b64 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7fe fd5a 	bl	8001b64 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	; 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e2b4      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030be:	4b92      	ldr	r3, [pc, #584]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x2a8>
 80030ca:	e014      	b.n	80030f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe fd4a 	bl	8001b64 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d4:	f7fe fd46 	bl	8001b64 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	; 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e2a0      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030e6:	4b88      	ldr	r3, [pc, #544]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x2d0>
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d060      	beq.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d005      	beq.n	8003114 <HAL_RCC_OscConfig+0x310>
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d119      	bne.n	8003142 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d116      	bne.n	8003142 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003114:	4b7c      	ldr	r3, [pc, #496]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_OscConfig+0x328>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e27d      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312c:	4b76      	ldr	r3, [pc, #472]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	4973      	ldr	r1, [pc, #460]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003140:	e040      	b.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d023      	beq.n	8003192 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800314a:	4b6f      	ldr	r3, [pc, #444]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a6e      	ldr	r2, [pc, #440]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 8003150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fe fd05 	bl	8001b64 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315e:	f7fe fd01 	bl	8001b64 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e25b      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003170:	4b65      	ldr	r3, [pc, #404]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317c:	4b62      	ldr	r3, [pc, #392]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	495f      	ldr	r1, [pc, #380]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
 8003190:	e018      	b.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003192:	4b5d      	ldr	r3, [pc, #372]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a5c      	ldr	r2, [pc, #368]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 8003198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800319c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fe fce1 	bl	8001b64 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a6:	f7fe fcdd 	bl	8001b64 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e237      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b8:	4b53      	ldr	r3, [pc, #332]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f0      	bne.n	80031a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d03c      	beq.n	800324a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01c      	beq.n	8003212 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d8:	4b4b      	ldr	r3, [pc, #300]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 80031da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031de:	4a4a      	ldr	r2, [pc, #296]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe fcbc 	bl	8001b64 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fe fcb8 	bl	8001b64 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e212      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003202:	4b41      	ldr	r3, [pc, #260]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 8003204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ef      	beq.n	80031f0 <HAL_RCC_OscConfig+0x3ec>
 8003210:	e01b      	b.n	800324a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003212:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 8003214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003218:	4a3b      	ldr	r2, [pc, #236]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003222:	f7fe fc9f 	bl	8001b64 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800322a:	f7fe fc9b 	bl	8001b64 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e1f5      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800323c:	4b32      	ldr	r3, [pc, #200]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 800323e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ef      	bne.n	800322a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80a6 	beq.w	80033a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003258:	2300      	movs	r3, #0
 800325a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800325c:	4b2a      	ldr	r3, [pc, #168]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10d      	bne.n	8003284 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003268:	4b27      	ldr	r3, [pc, #156]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326c:	4a26      	ldr	r2, [pc, #152]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003272:	6593      	str	r3, [r2, #88]	; 0x58
 8003274:	4b24      	ldr	r3, [pc, #144]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003280:	2301      	movs	r3, #1
 8003282:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003284:	4b21      	ldr	r3, [pc, #132]	; (800330c <HAL_RCC_OscConfig+0x508>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d118      	bne.n	80032c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003290:	4b1e      	ldr	r3, [pc, #120]	; (800330c <HAL_RCC_OscConfig+0x508>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1d      	ldr	r2, [pc, #116]	; (800330c <HAL_RCC_OscConfig+0x508>)
 8003296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329c:	f7fe fc62 	bl	8001b64 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a4:	f7fe fc5e 	bl	8001b64 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e1b8      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <HAL_RCC_OscConfig+0x508>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d108      	bne.n	80032dc <HAL_RCC_OscConfig+0x4d8>
 80032ca:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	4a0d      	ldr	r2, [pc, #52]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032da:	e029      	b.n	8003330 <HAL_RCC_OscConfig+0x52c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b05      	cmp	r3, #5
 80032e2:	d115      	bne.n	8003310 <HAL_RCC_OscConfig+0x50c>
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	4a07      	ldr	r2, [pc, #28]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	4a03      	ldr	r2, [pc, #12]	; (8003308 <HAL_RCC_OscConfig+0x504>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003304:	e014      	b.n	8003330 <HAL_RCC_OscConfig+0x52c>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	40007000 	.word	0x40007000
 8003310:	4b9d      	ldr	r3, [pc, #628]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	4a9c      	ldr	r2, [pc, #624]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003320:	4b99      	ldr	r3, [pc, #612]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	4a98      	ldr	r2, [pc, #608]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d016      	beq.n	8003366 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe fc14 	bl	8001b64 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fe fc10 	bl	8001b64 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e168      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003356:	4b8c      	ldr	r3, [pc, #560]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ed      	beq.n	8003340 <HAL_RCC_OscConfig+0x53c>
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fe fbfd 	bl	8001b64 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fe fbf9 	bl	8001b64 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	; 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e151      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003384:	4b80      	ldr	r3, [pc, #512]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1ed      	bne.n	800336e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003392:	7ffb      	ldrb	r3, [r7, #31]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d105      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003398:	4b7b      	ldr	r3, [pc, #492]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	4a7a      	ldr	r2, [pc, #488]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 800339e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d03c      	beq.n	800342a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01c      	beq.n	80033f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033b8:	4b73      	ldr	r3, [pc, #460]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 80033ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033be:	4a72      	ldr	r2, [pc, #456]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fe fbcc 	bl	8001b64 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033d0:	f7fe fbc8 	bl	8001b64 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e122      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033e2:	4b69      	ldr	r3, [pc, #420]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 80033e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0ef      	beq.n	80033d0 <HAL_RCC_OscConfig+0x5cc>
 80033f0:	e01b      	b.n	800342a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033f2:	4b65      	ldr	r3, [pc, #404]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 80033f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033f8:	4a63      	ldr	r2, [pc, #396]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7fe fbaf 	bl	8001b64 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800340a:	f7fe fbab 	bl	8001b64 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e105      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800341c:	4b5a      	ldr	r3, [pc, #360]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 800341e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1ef      	bne.n	800340a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80f9 	beq.w	8003626 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	2b02      	cmp	r3, #2
 800343a:	f040 80cf 	bne.w	80035dc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800343e:	4b52      	ldr	r3, [pc, #328]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0203 	and.w	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	429a      	cmp	r2, r3
 8003450:	d12c      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	3b01      	subs	r3, #1
 800345e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d123      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d11b      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d113      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	085b      	lsrs	r3, r3, #1
 8003490:	3b01      	subs	r3, #1
 8003492:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d109      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	3b01      	subs	r3, #1
 80034a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d071      	beq.n	8003590 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d068      	beq.n	8003584 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034b2:	4b35      	ldr	r3, [pc, #212]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d105      	bne.n	80034ca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034be:	4b32      	ldr	r3, [pc, #200]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0ac      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034ce:	4b2e      	ldr	r3, [pc, #184]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2d      	ldr	r2, [pc, #180]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 80034d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034da:	f7fe fb43 	bl	8001b64 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e2:	f7fe fb3f 	bl	8001b64 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e099      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f4:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003500:	4b21      	ldr	r3, [pc, #132]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	4b21      	ldr	r3, [pc, #132]	; (800358c <HAL_RCC_OscConfig+0x788>)
 8003506:	4013      	ands	r3, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003510:	3a01      	subs	r2, #1
 8003512:	0112      	lsls	r2, r2, #4
 8003514:	4311      	orrs	r1, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800351a:	0212      	lsls	r2, r2, #8
 800351c:	4311      	orrs	r1, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003522:	0852      	lsrs	r2, r2, #1
 8003524:	3a01      	subs	r2, #1
 8003526:	0552      	lsls	r2, r2, #21
 8003528:	4311      	orrs	r1, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800352e:	0852      	lsrs	r2, r2, #1
 8003530:	3a01      	subs	r2, #1
 8003532:	0652      	lsls	r2, r2, #25
 8003534:	4311      	orrs	r1, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800353a:	06d2      	lsls	r2, r2, #27
 800353c:	430a      	orrs	r2, r1
 800353e:	4912      	ldr	r1, [pc, #72]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 8003540:	4313      	orrs	r3, r2
 8003542:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003544:	4b10      	ldr	r3, [pc, #64]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a0f      	ldr	r2, [pc, #60]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 800354a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003550:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a0c      	ldr	r2, [pc, #48]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 8003556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800355a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800355c:	f7fe fb02 	bl	8001b64 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003564:	f7fe fafe 	bl	8001b64 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e058      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003576:	4b04      	ldr	r3, [pc, #16]	; (8003588 <HAL_RCC_OscConfig+0x784>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003582:	e050      	b.n	8003626 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e04f      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
 8003588:	40021000 	.word	0x40021000
 800358c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003590:	4b27      	ldr	r3, [pc, #156]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d144      	bne.n	8003626 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800359c:	4b24      	ldr	r3, [pc, #144]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a23      	ldr	r2, [pc, #140]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80035a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035a8:	4b21      	ldr	r3, [pc, #132]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a20      	ldr	r2, [pc, #128]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80035ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035b4:	f7fe fad6 	bl	8001b64 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035bc:	f7fe fad2 	bl	8001b64 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e02c      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ce:	4b18      	ldr	r3, [pc, #96]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x7b8>
 80035da:	e024      	b.n	8003626 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d01f      	beq.n	8003622 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e2:	4b13      	ldr	r3, [pc, #76]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 80035e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ee:	f7fe fab9 	bl	8001b64 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fe fab5 	bl	8001b64 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e00f      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003608:	4b09      	ldr	r3, [pc, #36]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f0      	bne.n	80035f6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003614:	4b06      	ldr	r3, [pc, #24]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	4905      	ldr	r1, [pc, #20]	; (8003630 <HAL_RCC_OscConfig+0x82c>)
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_RCC_OscConfig+0x830>)
 800361c:	4013      	ands	r3, r2
 800361e:	60cb      	str	r3, [r1, #12]
 8003620:	e001      	b.n	8003626 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40021000 	.word	0x40021000
 8003634:	feeefffc 	.word	0xfeeefffc

08003638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e11d      	b.n	800388c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003650:	4b90      	ldr	r3, [pc, #576]	; (8003894 <HAL_RCC_ClockConfig+0x25c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d910      	bls.n	8003680 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b8d      	ldr	r3, [pc, #564]	; (8003894 <HAL_RCC_ClockConfig+0x25c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 020f 	bic.w	r2, r3, #15
 8003666:	498b      	ldr	r1, [pc, #556]	; (8003894 <HAL_RCC_ClockConfig+0x25c>)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b89      	ldr	r3, [pc, #548]	; (8003894 <HAL_RCC_ClockConfig+0x25c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e105      	b.n	800388c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d010      	beq.n	80036ae <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	4b81      	ldr	r3, [pc, #516]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003698:	429a      	cmp	r2, r3
 800369a:	d908      	bls.n	80036ae <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800369c:	4b7e      	ldr	r3, [pc, #504]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	497b      	ldr	r1, [pc, #492]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d079      	beq.n	80037ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d11e      	bne.n	8003700 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c2:	4b75      	ldr	r3, [pc, #468]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0dc      	b.n	800388c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80036d2:	f000 fa09 	bl	8003ae8 <RCC_GetSysClockFreqFromPLLSource>
 80036d6:	4603      	mov	r3, r0
 80036d8:	4a70      	ldr	r2, [pc, #448]	; (800389c <HAL_RCC_ClockConfig+0x264>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d946      	bls.n	800376c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036de:	4b6e      	ldr	r3, [pc, #440]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d140      	bne.n	800376c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036ea:	4b6b      	ldr	r3, [pc, #428]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036f2:	4a69      	ldr	r2, [pc, #420]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 80036f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e035      	b.n	800376c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d107      	bne.n	8003718 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003708:	4b63      	ldr	r3, [pc, #396]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d115      	bne.n	8003740 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0b9      	b.n	800388c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d107      	bne.n	8003730 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003720:	4b5d      	ldr	r3, [pc, #372]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d109      	bne.n	8003740 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0ad      	b.n	800388c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003730:	4b59      	ldr	r3, [pc, #356]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0a5      	b.n	800388c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003740:	f000 f8b4 	bl	80038ac <HAL_RCC_GetSysClockFreq>
 8003744:	4603      	mov	r3, r0
 8003746:	4a55      	ldr	r2, [pc, #340]	; (800389c <HAL_RCC_ClockConfig+0x264>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d90f      	bls.n	800376c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800374c:	4b52      	ldr	r3, [pc, #328]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003758:	4b4f      	ldr	r3, [pc, #316]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003760:	4a4d      	ldr	r2, [pc, #308]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 8003762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003766:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800376c:	4b4a      	ldr	r3, [pc, #296]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 0203 	bic.w	r2, r3, #3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	4947      	ldr	r1, [pc, #284]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800377e:	f7fe f9f1 	bl	8001b64 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003784:	e00a      	b.n	800379c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003786:	f7fe f9ed 	bl	8001b64 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e077      	b.n	800388c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379c:	4b3e      	ldr	r3, [pc, #248]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 020c 	and.w	r2, r3, #12
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d1eb      	bne.n	8003786 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b80      	cmp	r3, #128	; 0x80
 80037b2:	d105      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037b4:	4b38      	ldr	r3, [pc, #224]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4a37      	ldr	r2, [pc, #220]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 80037ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037be:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d010      	beq.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	4b31      	ldr	r3, [pc, #196]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037d8:	429a      	cmp	r2, r3
 80037da:	d208      	bcs.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037dc:	4b2e      	ldr	r3, [pc, #184]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	492b      	ldr	r1, [pc, #172]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037ee:	4b29      	ldr	r3, [pc, #164]	; (8003894 <HAL_RCC_ClockConfig+0x25c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d210      	bcs.n	800381e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fc:	4b25      	ldr	r3, [pc, #148]	; (8003894 <HAL_RCC_ClockConfig+0x25c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f023 020f 	bic.w	r2, r3, #15
 8003804:	4923      	ldr	r1, [pc, #140]	; (8003894 <HAL_RCC_ClockConfig+0x25c>)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380c:	4b21      	ldr	r3, [pc, #132]	; (8003894 <HAL_RCC_ClockConfig+0x25c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d001      	beq.n	800381e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e036      	b.n	800388c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800382a:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	4918      	ldr	r1, [pc, #96]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4910      	ldr	r1, [pc, #64]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 8003858:	4313      	orrs	r3, r2
 800385a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800385c:	f000 f826 	bl	80038ac <HAL_RCC_GetSysClockFreq>
 8003860:	4602      	mov	r2, r0
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <HAL_RCC_ClockConfig+0x260>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	490c      	ldr	r1, [pc, #48]	; (80038a0 <HAL_RCC_ClockConfig+0x268>)
 800386e:	5ccb      	ldrb	r3, [r1, r3]
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	fa22 f303 	lsr.w	r3, r2, r3
 8003878:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <HAL_RCC_ClockConfig+0x26c>)
 800387a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <HAL_RCC_ClockConfig+0x270>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe f91f 	bl	8001ac4 <HAL_InitTick>
 8003886:	4603      	mov	r3, r0
 8003888:	73fb      	strb	r3, [r7, #15]

  return status;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40022000 	.word	0x40022000
 8003898:	40021000 	.word	0x40021000
 800389c:	04c4b400 	.word	0x04c4b400
 80038a0:	08007e40 	.word	0x08007e40
 80038a4:	20000000 	.word	0x20000000
 80038a8:	20000004 	.word	0x20000004

080038ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	; 0x24
 80038b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ba:	4b3e      	ldr	r3, [pc, #248]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038c4:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0x34>
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	2b0c      	cmp	r3, #12
 80038d8:	d121      	bne.n	800391e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d11e      	bne.n	800391e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038e0:	4b34      	ldr	r3, [pc, #208]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d107      	bne.n	80038fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038ec:	4b31      	ldr	r3, [pc, #196]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	61fb      	str	r3, [r7, #28]
 80038fa:	e005      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038fc:	4b2d      	ldr	r3, [pc, #180]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003908:	4a2b      	ldr	r2, [pc, #172]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003910:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10d      	bne.n	8003934 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800391c:	e00a      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b04      	cmp	r3, #4
 8003922:	d102      	bne.n	800392a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003924:	4b25      	ldr	r3, [pc, #148]	; (80039bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003926:	61bb      	str	r3, [r7, #24]
 8003928:	e004      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d101      	bne.n	8003934 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003930:	4b23      	ldr	r3, [pc, #140]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003932:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	2b0c      	cmp	r3, #12
 8003938:	d134      	bne.n	80039a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800393a:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d003      	beq.n	8003952 <HAL_RCC_GetSysClockFreq+0xa6>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b03      	cmp	r3, #3
 800394e:	d003      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0xac>
 8003950:	e005      	b.n	800395e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003952:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003954:	617b      	str	r3, [r7, #20]
      break;
 8003956:	e005      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003958:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800395a:	617b      	str	r3, [r7, #20]
      break;
 800395c:	e002      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	617b      	str	r3, [r7, #20]
      break;
 8003962:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003964:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	3301      	adds	r3, #1
 8003970:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003972:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	0a1b      	lsrs	r3, r3, #8
 8003978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	fb03 f202 	mul.w	r2, r3, r2
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	fbb2 f3f3 	udiv	r3, r2, r3
 8003988:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	0e5b      	lsrs	r3, r3, #25
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	3301      	adds	r3, #1
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039a4:	69bb      	ldr	r3, [r7, #24]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3724      	adds	r7, #36	; 0x24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000
 80039b8:	08007e58 	.word	0x08007e58
 80039bc:	00f42400 	.word	0x00f42400
 80039c0:	007a1200 	.word	0x007a1200

080039c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	20000000 	.word	0x20000000

080039dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039e0:	f7ff fff0 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	0a1b      	lsrs	r3, r3, #8
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4904      	ldr	r1, [pc, #16]	; (8003a04 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	08007e50 	.word	0x08007e50

08003a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a0c:	f7ff ffda 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	0adb      	lsrs	r3, r3, #11
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	4904      	ldr	r1, [pc, #16]	; (8003a30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a1e:	5ccb      	ldrb	r3, [r1, r3]
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	08007e50 	.word	0x08007e50

08003a34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a40:	4b27      	ldr	r3, [pc, #156]	; (8003ae0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a4c:	f7ff f906 	bl	8002c5c <HAL_PWREx_GetVoltageRange>
 8003a50:	6178      	str	r0, [r7, #20]
 8003a52:	e014      	b.n	8003a7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a54:	4b22      	ldr	r3, [pc, #136]	; (8003ae0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a58:	4a21      	ldr	r2, [pc, #132]	; (8003ae0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a60:	4b1f      	ldr	r3, [pc, #124]	; (8003ae0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a6c:	f7ff f8f6 	bl	8002c5c <HAL_PWREx_GetVoltageRange>
 8003a70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a72:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a76:	4a1a      	ldr	r2, [pc, #104]	; (8003ae0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a84:	d10b      	bne.n	8003a9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b80      	cmp	r3, #128	; 0x80
 8003a8a:	d913      	bls.n	8003ab4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2ba0      	cmp	r3, #160	; 0xa0
 8003a90:	d902      	bls.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a92:	2302      	movs	r3, #2
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	e00d      	b.n	8003ab4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a98:	2301      	movs	r3, #1
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	e00a      	b.n	8003ab4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8003aa2:	d902      	bls.n	8003aaa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	e004      	b.n	8003ab4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b70      	cmp	r3, #112	; 0x70
 8003aae:	d101      	bne.n	8003ab4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 020f 	bic.w	r2, r3, #15
 8003abc:	4909      	ldr	r1, [pc, #36]	; (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ac4:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d001      	beq.n	8003ad6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40022000 	.word	0x40022000

08003ae8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aee:	4b2d      	ldr	r3, [pc, #180]	; (8003ba4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d00b      	beq.n	8003b16 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d825      	bhi.n	8003b50 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d008      	beq.n	8003b1c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d11f      	bne.n	8003b50 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003b10:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b12:	613b      	str	r3, [r7, #16]
    break;
 8003b14:	e01f      	b.n	8003b56 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003b16:	4b25      	ldr	r3, [pc, #148]	; (8003bac <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003b18:	613b      	str	r3, [r7, #16]
    break;
 8003b1a:	e01c      	b.n	8003b56 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b1c:	4b21      	ldr	r3, [pc, #132]	; (8003ba4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d107      	bne.n	8003b38 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b28:	4b1e      	ldr	r3, [pc, #120]	; (8003ba4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	e005      	b.n	8003b44 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b38:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003b44:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b4c:	613b      	str	r3, [r7, #16]
    break;
 8003b4e:	e002      	b.n	8003b56 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	613b      	str	r3, [r7, #16]
    break;
 8003b54:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b56:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	091b      	lsrs	r3, r3, #4
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	3301      	adds	r3, #1
 8003b62:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	fb03 f202 	mul.w	r2, r3, r2
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b7c:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	0e5b      	lsrs	r3, r3, #25
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	3301      	adds	r3, #1
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b94:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003b96:	683b      	ldr	r3, [r7, #0]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	00f42400 	.word	0x00f42400
 8003bac:	007a1200 	.word	0x007a1200
 8003bb0:	08007e58 	.word	0x08007e58

08003bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d040      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd4:	2b80      	cmp	r3, #128	; 0x80
 8003bd6:	d02a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bd8:	2b80      	cmp	r3, #128	; 0x80
 8003bda:	d825      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003bdc:	2b60      	cmp	r3, #96	; 0x60
 8003bde:	d026      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003be0:	2b60      	cmp	r3, #96	; 0x60
 8003be2:	d821      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d006      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d81d      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d010      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003bf4:	e018      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bf6:	4b89      	ldr	r3, [pc, #548]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4a88      	ldr	r2, [pc, #544]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c00:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c02:	e015      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fb02 	bl	8004214 <RCCEx_PLLSAI1_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c14:	e00c      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3320      	adds	r3, #32
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fbed 	bl	80043fc <RCCEx_PLLSAI2_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c26:	e003      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	74fb      	strb	r3, [r7, #19]
      break;
 8003c2c:	e000      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c30:	7cfb      	ldrb	r3, [r7, #19]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c36:	4b79      	ldr	r3, [pc, #484]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c3c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c44:	4975      	ldr	r1, [pc, #468]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003c4c:	e001      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4e:	7cfb      	ldrb	r3, [r7, #19]
 8003c50:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d047      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c66:	d030      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6c:	d82a      	bhi.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c72:	d02a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c78:	d824      	bhi.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c84:	d81e      	bhi.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8e:	d010      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c90:	e018      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c92:	4b62      	ldr	r3, [pc, #392]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	4a61      	ldr	r2, [pc, #388]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c9e:	e015      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fab4 	bl	8004214 <RCCEx_PLLSAI1_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cb0:	e00c      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3320      	adds	r3, #32
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fb9f 	bl	80043fc <RCCEx_PLLSAI2_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cc2:	e003      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	74fb      	strb	r3, [r7, #19]
      break;
 8003cc8:	e000      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ccc:	7cfb      	ldrb	r3, [r7, #19]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10b      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cd2:	4b52      	ldr	r3, [pc, #328]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	494e      	ldr	r1, [pc, #312]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ce8:	e001      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cea:	7cfb      	ldrb	r3, [r7, #19]
 8003cec:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 809f 	beq.w	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d00:	4b46      	ldr	r3, [pc, #280]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d10:	2300      	movs	r3, #0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d16:	4b41      	ldr	r3, [pc, #260]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	4a40      	ldr	r2, [pc, #256]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d20:	6593      	str	r3, [r2, #88]	; 0x58
 8003d22:	4b3e      	ldr	r3, [pc, #248]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d32:	4b3b      	ldr	r3, [pc, #236]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a3a      	ldr	r2, [pc, #232]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d3e:	f7fd ff11 	bl	8001b64 <HAL_GetTick>
 8003d42:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d44:	e009      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d46:	f7fd ff0d 	bl	8001b64 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d902      	bls.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	74fb      	strb	r3, [r7, #19]
        break;
 8003d58:	e005      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d5a:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0ef      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003d66:	7cfb      	ldrb	r3, [r7, #19]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d15b      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d76:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01f      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d019      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d8a:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d94:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d96:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9c:	4a1f      	ldr	r2, [pc, #124]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003da6:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dac:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003db6:	4a19      	ldr	r2, [pc, #100]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d016      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fd fecc 	bl	8001b64 <HAL_GetTick>
 8003dcc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dce:	e00b      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd0:	f7fd fec8 	bl	8001b64 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d902      	bls.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	74fb      	strb	r3, [r7, #19]
            break;
 8003de6:	e006      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de8:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0ec      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003df6:	7cfb      	ldrb	r3, [r7, #19]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10c      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dfc:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	4903      	ldr	r1, [pc, #12]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e14:	e008      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e16:	7cfb      	ldrb	r3, [r7, #19]
 8003e18:	74bb      	strb	r3, [r7, #18]
 8003e1a:	e005      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e24:	7cfb      	ldrb	r3, [r7, #19]
 8003e26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e28:	7c7b      	ldrb	r3, [r7, #17]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d105      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e2e:	4ba0      	ldr	r3, [pc, #640]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e32:	4a9f      	ldr	r2, [pc, #636]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e46:	4b9a      	ldr	r3, [pc, #616]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4c:	f023 0203 	bic.w	r2, r3, #3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e54:	4996      	ldr	r1, [pc, #600]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e68:	4b91      	ldr	r3, [pc, #580]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	f023 020c 	bic.w	r2, r3, #12
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	498e      	ldr	r1, [pc, #568]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e8a:	4b89      	ldr	r3, [pc, #548]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	4985      	ldr	r1, [pc, #532]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003eac:	4b80      	ldr	r3, [pc, #512]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eba:	497d      	ldr	r1, [pc, #500]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ece:	4b78      	ldr	r3, [pc, #480]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003edc:	4974      	ldr	r1, [pc, #464]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ef0:	4b6f      	ldr	r3, [pc, #444]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efe:	496c      	ldr	r1, [pc, #432]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f12:	4b67      	ldr	r3, [pc, #412]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f20:	4963      	ldr	r1, [pc, #396]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f34:	4b5e      	ldr	r3, [pc, #376]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f42:	495b      	ldr	r1, [pc, #364]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f56:	4b56      	ldr	r3, [pc, #344]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f64:	4952      	ldr	r1, [pc, #328]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f78:	4b4d      	ldr	r3, [pc, #308]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f86:	494a      	ldr	r1, [pc, #296]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f9a:	4b45      	ldr	r3, [pc, #276]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	4941      	ldr	r1, [pc, #260]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fbc:	4b3c      	ldr	r3, [pc, #240]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fc2:	f023 0203 	bic.w	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fca:	4939      	ldr	r1, [pc, #228]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d028      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fde:	4b34      	ldr	r3, [pc, #208]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fec:	4930      	ldr	r1, [pc, #192]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ffc:	d106      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ffe:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	4a2b      	ldr	r2, [pc, #172]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004008:	60d3      	str	r3, [r2, #12]
 800400a:	e011      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004010:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004014:	d10c      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3304      	adds	r3, #4
 800401a:	2101      	movs	r1, #1
 800401c:	4618      	mov	r0, r3
 800401e:	f000 f8f9 	bl	8004214 <RCCEx_PLLSAI1_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004026:	7cfb      	ldrb	r3, [r7, #19]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800402c:	7cfb      	ldrb	r3, [r7, #19]
 800402e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d04d      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004044:	d108      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004046:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004048:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800404c:	4a18      	ldr	r2, [pc, #96]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800404e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004052:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004056:	e012      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004058:	4b15      	ldr	r3, [pc, #84]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800405a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800405e:	4a14      	ldr	r2, [pc, #80]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004064:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004076:	490e      	ldr	r1, [pc, #56]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004086:	d106      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004088:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a08      	ldr	r2, [pc, #32]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800408e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004092:	60d3      	str	r3, [r2, #12]
 8004094:	e020      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800409a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800409e:	d109      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040a0:	4b03      	ldr	r3, [pc, #12]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	4a02      	ldr	r2, [pc, #8]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040aa:	60d3      	str	r3, [r2, #12]
 80040ac:	e014      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80040ae:	bf00      	nop
 80040b0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	2101      	movs	r1, #1
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 f8a5 	bl	8004214 <RCCEx_PLLSAI1_Config>
 80040ca:	4603      	mov	r3, r0
 80040cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d028      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040e4:	4b4a      	ldr	r3, [pc, #296]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040f2:	4947      	ldr	r1, [pc, #284]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004102:	d106      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004104:	4b42      	ldr	r3, [pc, #264]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4a41      	ldr	r2, [pc, #260]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800410a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800410e:	60d3      	str	r3, [r2, #12]
 8004110:	e011      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004116:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800411a:	d10c      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3304      	adds	r3, #4
 8004120:	2101      	movs	r1, #1
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f876 	bl	8004214 <RCCEx_PLLSAI1_Config>
 8004128:	4603      	mov	r3, r0
 800412a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004132:	7cfb      	ldrb	r3, [r7, #19]
 8004134:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d01e      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004142:	4b33      	ldr	r3, [pc, #204]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004148:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004152:	492f      	ldr	r1, [pc, #188]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004160:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004164:	d10c      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3304      	adds	r3, #4
 800416a:	2102      	movs	r1, #2
 800416c:	4618      	mov	r0, r3
 800416e:	f000 f851 	bl	8004214 <RCCEx_PLLSAI1_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004176:	7cfb      	ldrb	r3, [r7, #19]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800417c:	7cfb      	ldrb	r3, [r7, #19]
 800417e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00b      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800418c:	4b20      	ldr	r3, [pc, #128]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800418e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004192:	f023 0204 	bic.w	r2, r3, #4
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800419c:	491c      	ldr	r1, [pc, #112]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00b      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041b0:	4b17      	ldr	r3, [pc, #92]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041b6:	f023 0218 	bic.w	r2, r3, #24
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c0:	4913      	ldr	r1, [pc, #76]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d017      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80041d4:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e4:	490a      	ldr	r1, [pc, #40]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041f6:	d105      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a04      	ldr	r2, [pc, #16]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004202:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004204:	7cbb      	ldrb	r3, [r7, #18]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40021000 	.word	0x40021000

08004214 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004222:	4b72      	ldr	r3, [pc, #456]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00e      	beq.n	800424c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800422e:	4b6f      	ldr	r3, [pc, #444]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0203 	and.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d103      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
       ||
 8004242:	2b00      	cmp	r3, #0
 8004244:	d142      	bne.n	80042cc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	73fb      	strb	r3, [r7, #15]
 800424a:	e03f      	b.n	80042cc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b03      	cmp	r3, #3
 8004252:	d018      	beq.n	8004286 <RCCEx_PLLSAI1_Config+0x72>
 8004254:	2b03      	cmp	r3, #3
 8004256:	d825      	bhi.n	80042a4 <RCCEx_PLLSAI1_Config+0x90>
 8004258:	2b01      	cmp	r3, #1
 800425a:	d002      	beq.n	8004262 <RCCEx_PLLSAI1_Config+0x4e>
 800425c:	2b02      	cmp	r3, #2
 800425e:	d009      	beq.n	8004274 <RCCEx_PLLSAI1_Config+0x60>
 8004260:	e020      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004262:	4b62      	ldr	r3, [pc, #392]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d11d      	bne.n	80042aa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004272:	e01a      	b.n	80042aa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004274:	4b5d      	ldr	r3, [pc, #372]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	2b00      	cmp	r3, #0
 800427e:	d116      	bne.n	80042ae <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004284:	e013      	b.n	80042ae <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004286:	4b59      	ldr	r3, [pc, #356]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10f      	bne.n	80042b2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004292:	4b56      	ldr	r3, [pc, #344]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042a2:	e006      	b.n	80042b2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	73fb      	strb	r3, [r7, #15]
      break;
 80042a8:	e004      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80042aa:	bf00      	nop
 80042ac:	e002      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80042ae:	bf00      	nop
 80042b0:	e000      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80042b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d108      	bne.n	80042cc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80042ba:	4b4c      	ldr	r3, [pc, #304]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f023 0203 	bic.w	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4949      	ldr	r1, [pc, #292]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f040 8086 	bne.w	80043e0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042d4:	4b45      	ldr	r3, [pc, #276]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a44      	ldr	r2, [pc, #272]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80042da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e0:	f7fd fc40 	bl	8001b64 <HAL_GetTick>
 80042e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042e6:	e009      	b.n	80042fc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042e8:	f7fd fc3c 	bl	8001b64 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d902      	bls.n	80042fc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	73fb      	strb	r3, [r7, #15]
        break;
 80042fa:	e005      	b.n	8004308 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042fc:	4b3b      	ldr	r3, [pc, #236]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1ef      	bne.n	80042e8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d168      	bne.n	80043e0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d113      	bne.n	800433c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004314:	4b35      	ldr	r3, [pc, #212]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	4b35      	ldr	r3, [pc, #212]	; (80043f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800431a:	4013      	ands	r3, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6892      	ldr	r2, [r2, #8]
 8004320:	0211      	lsls	r1, r2, #8
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	68d2      	ldr	r2, [r2, #12]
 8004326:	06d2      	lsls	r2, r2, #27
 8004328:	4311      	orrs	r1, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6852      	ldr	r2, [r2, #4]
 800432e:	3a01      	subs	r2, #1
 8004330:	0112      	lsls	r2, r2, #4
 8004332:	430a      	orrs	r2, r1
 8004334:	492d      	ldr	r1, [pc, #180]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004336:	4313      	orrs	r3, r2
 8004338:	610b      	str	r3, [r1, #16]
 800433a:	e02d      	b.n	8004398 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d115      	bne.n	800436e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004342:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004348:	4013      	ands	r3, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6892      	ldr	r2, [r2, #8]
 800434e:	0211      	lsls	r1, r2, #8
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6912      	ldr	r2, [r2, #16]
 8004354:	0852      	lsrs	r2, r2, #1
 8004356:	3a01      	subs	r2, #1
 8004358:	0552      	lsls	r2, r2, #21
 800435a:	4311      	orrs	r1, r2
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6852      	ldr	r2, [r2, #4]
 8004360:	3a01      	subs	r2, #1
 8004362:	0112      	lsls	r2, r2, #4
 8004364:	430a      	orrs	r2, r1
 8004366:	4921      	ldr	r1, [pc, #132]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004368:	4313      	orrs	r3, r2
 800436a:	610b      	str	r3, [r1, #16]
 800436c:	e014      	b.n	8004398 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800436e:	4b1f      	ldr	r3, [pc, #124]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004374:	4013      	ands	r3, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6892      	ldr	r2, [r2, #8]
 800437a:	0211      	lsls	r1, r2, #8
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6952      	ldr	r2, [r2, #20]
 8004380:	0852      	lsrs	r2, r2, #1
 8004382:	3a01      	subs	r2, #1
 8004384:	0652      	lsls	r2, r2, #25
 8004386:	4311      	orrs	r1, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6852      	ldr	r2, [r2, #4]
 800438c:	3a01      	subs	r2, #1
 800438e:	0112      	lsls	r2, r2, #4
 8004390:	430a      	orrs	r2, r1
 8004392:	4916      	ldr	r1, [pc, #88]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8004394:	4313      	orrs	r3, r2
 8004396:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004398:	4b14      	ldr	r3, [pc, #80]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a13      	ldr	r2, [pc, #76]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 800439e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a4:	f7fd fbde 	bl	8001b64 <HAL_GetTick>
 80043a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043aa:	e009      	b.n	80043c0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043ac:	f7fd fbda 	bl	8001b64 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d902      	bls.n	80043c0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	73fb      	strb	r3, [r7, #15]
          break;
 80043be:	e005      	b.n	80043cc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0ef      	beq.n	80043ac <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	4904      	ldr	r1, [pc, #16]	; (80043ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40021000 	.word	0x40021000
 80043f0:	07ff800f 	.word	0x07ff800f
 80043f4:	ff9f800f 	.word	0xff9f800f
 80043f8:	f9ff800f 	.word	0xf9ff800f

080043fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800440a:	4b72      	ldr	r3, [pc, #456]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00e      	beq.n	8004434 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004416:	4b6f      	ldr	r3, [pc, #444]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f003 0203 	and.w	r2, r3, #3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d103      	bne.n	800442e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
       ||
 800442a:	2b00      	cmp	r3, #0
 800442c:	d142      	bne.n	80044b4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	73fb      	strb	r3, [r7, #15]
 8004432:	e03f      	b.n	80044b4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b03      	cmp	r3, #3
 800443a:	d018      	beq.n	800446e <RCCEx_PLLSAI2_Config+0x72>
 800443c:	2b03      	cmp	r3, #3
 800443e:	d825      	bhi.n	800448c <RCCEx_PLLSAI2_Config+0x90>
 8004440:	2b01      	cmp	r3, #1
 8004442:	d002      	beq.n	800444a <RCCEx_PLLSAI2_Config+0x4e>
 8004444:	2b02      	cmp	r3, #2
 8004446:	d009      	beq.n	800445c <RCCEx_PLLSAI2_Config+0x60>
 8004448:	e020      	b.n	800448c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800444a:	4b62      	ldr	r3, [pc, #392]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d11d      	bne.n	8004492 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800445a:	e01a      	b.n	8004492 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800445c:	4b5d      	ldr	r3, [pc, #372]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004464:	2b00      	cmp	r3, #0
 8004466:	d116      	bne.n	8004496 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800446c:	e013      	b.n	8004496 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800446e:	4b59      	ldr	r3, [pc, #356]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10f      	bne.n	800449a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800447a:	4b56      	ldr	r3, [pc, #344]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d109      	bne.n	800449a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800448a:	e006      	b.n	800449a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	73fb      	strb	r3, [r7, #15]
      break;
 8004490:	e004      	b.n	800449c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004492:	bf00      	nop
 8004494:	e002      	b.n	800449c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004496:	bf00      	nop
 8004498:	e000      	b.n	800449c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800449a:	bf00      	nop
    }

    if(status == HAL_OK)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d108      	bne.n	80044b4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80044a2:	4b4c      	ldr	r3, [pc, #304]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f023 0203 	bic.w	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4949      	ldr	r1, [pc, #292]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f040 8086 	bne.w	80045c8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044bc:	4b45      	ldr	r3, [pc, #276]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a44      	ldr	r2, [pc, #272]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c8:	f7fd fb4c 	bl	8001b64 <HAL_GetTick>
 80044cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044ce:	e009      	b.n	80044e4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044d0:	f7fd fb48 	bl	8001b64 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d902      	bls.n	80044e4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	73fb      	strb	r3, [r7, #15]
        break;
 80044e2:	e005      	b.n	80044f0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044e4:	4b3b      	ldr	r3, [pc, #236]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1ef      	bne.n	80044d0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d168      	bne.n	80045c8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d113      	bne.n	8004524 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044fc:	4b35      	ldr	r3, [pc, #212]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	4b35      	ldr	r3, [pc, #212]	; (80045d8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004502:	4013      	ands	r3, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6892      	ldr	r2, [r2, #8]
 8004508:	0211      	lsls	r1, r2, #8
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	68d2      	ldr	r2, [r2, #12]
 800450e:	06d2      	lsls	r2, r2, #27
 8004510:	4311      	orrs	r1, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6852      	ldr	r2, [r2, #4]
 8004516:	3a01      	subs	r2, #1
 8004518:	0112      	lsls	r2, r2, #4
 800451a:	430a      	orrs	r2, r1
 800451c:	492d      	ldr	r1, [pc, #180]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800451e:	4313      	orrs	r3, r2
 8004520:	614b      	str	r3, [r1, #20]
 8004522:	e02d      	b.n	8004580 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d115      	bne.n	8004556 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800452a:	4b2a      	ldr	r3, [pc, #168]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800452c:	695a      	ldr	r2, [r3, #20]
 800452e:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <RCCEx_PLLSAI2_Config+0x1e0>)
 8004530:	4013      	ands	r3, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6892      	ldr	r2, [r2, #8]
 8004536:	0211      	lsls	r1, r2, #8
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6912      	ldr	r2, [r2, #16]
 800453c:	0852      	lsrs	r2, r2, #1
 800453e:	3a01      	subs	r2, #1
 8004540:	0552      	lsls	r2, r2, #21
 8004542:	4311      	orrs	r1, r2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6852      	ldr	r2, [r2, #4]
 8004548:	3a01      	subs	r2, #1
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	430a      	orrs	r2, r1
 800454e:	4921      	ldr	r1, [pc, #132]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004550:	4313      	orrs	r3, r2
 8004552:	614b      	str	r3, [r1, #20]
 8004554:	e014      	b.n	8004580 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004556:	4b1f      	ldr	r3, [pc, #124]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004558:	695a      	ldr	r2, [r3, #20]
 800455a:	4b21      	ldr	r3, [pc, #132]	; (80045e0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800455c:	4013      	ands	r3, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6892      	ldr	r2, [r2, #8]
 8004562:	0211      	lsls	r1, r2, #8
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6952      	ldr	r2, [r2, #20]
 8004568:	0852      	lsrs	r2, r2, #1
 800456a:	3a01      	subs	r2, #1
 800456c:	0652      	lsls	r2, r2, #25
 800456e:	4311      	orrs	r1, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6852      	ldr	r2, [r2, #4]
 8004574:	3a01      	subs	r2, #1
 8004576:	0112      	lsls	r2, r2, #4
 8004578:	430a      	orrs	r2, r1
 800457a:	4916      	ldr	r1, [pc, #88]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800457c:	4313      	orrs	r3, r2
 800457e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004580:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a13      	ldr	r2, [pc, #76]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fd faea 	bl	8001b64 <HAL_GetTick>
 8004590:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004592:	e009      	b.n	80045a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004594:	f7fd fae6 	bl	8001b64 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d902      	bls.n	80045a8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	73fb      	strb	r3, [r7, #15]
          break;
 80045a6:	e005      	b.n	80045b4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045a8:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ef      	beq.n	8004594 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	4904      	ldr	r1, [pc, #16]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40021000 	.word	0x40021000
 80045d8:	07ff800f 	.word	0x07ff800f
 80045dc:	ff9f800f 	.word	0xff9f800f
 80045e0:	f9ff800f 	.word	0xf9ff800f

080045e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e042      	b.n	800467c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d106      	bne.n	800460e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7fd f8b7 	bl	800177c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2224      	movs	r2, #36	; 0x24
 8004612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0201 	bic.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fbb4 	bl	8004d9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f8b5 	bl	80047a4 <UART_SetConfig>
 800463a:	4603      	mov	r3, r0
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e01b      	b.n	800467c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fc33 	bl	8004ee0 <UART_CheckIdleState>
 800467a:	4603      	mov	r3, r0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469a:	2b20      	cmp	r3, #32
 800469c:	d17c      	bne.n	8004798 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_UART_Transmit+0x26>
 80046a4:	88fb      	ldrh	r3, [r7, #6]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e075      	b.n	800479a <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2221      	movs	r2, #33	; 0x21
 80046ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046be:	f7fd fa51 	bl	8001b64 <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	88fa      	ldrh	r2, [r7, #6]
 80046c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	88fa      	ldrh	r2, [r7, #6]
 80046d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046dc:	d108      	bne.n	80046f0 <HAL_UART_Transmit+0x6c>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d104      	bne.n	80046f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e003      	b.n	80046f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046f8:	e031      	b.n	800475e <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	2180      	movs	r1, #128	; 0x80
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fc95 	bl	8005034 <UART_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e03e      	b.n	800479a <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10b      	bne.n	800473a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	881a      	ldrh	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800472e:	b292      	uxth	r2, r2
 8004730:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	3302      	adds	r3, #2
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	e008      	b.n	800474c <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	b292      	uxth	r2, r2
 8004744:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3301      	adds	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1c7      	bne.n	80046fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2200      	movs	r2, #0
 8004772:	2140      	movs	r1, #64	; 0x40
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 fc5d 	bl	8005034 <UART_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e006      	b.n	800479a <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	e000      	b.n	800479a <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3720      	adds	r7, #32
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a8:	b08c      	sub	sp, #48	; 0x30
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	431a      	orrs	r2, r3
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4baa      	ldr	r3, [pc, #680]	; (8004a7c <UART_SetConfig+0x2d8>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047dc:	430b      	orrs	r3, r1
 80047de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a9f      	ldr	r2, [pc, #636]	; (8004a80 <UART_SetConfig+0x2dc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800480c:	4313      	orrs	r3, r2
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800481a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004824:	430b      	orrs	r3, r1
 8004826:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	f023 010f 	bic.w	r1, r3, #15
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a90      	ldr	r2, [pc, #576]	; (8004a84 <UART_SetConfig+0x2e0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d125      	bne.n	8004894 <UART_SetConfig+0xf0>
 8004848:	4b8f      	ldr	r3, [pc, #572]	; (8004a88 <UART_SetConfig+0x2e4>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b03      	cmp	r3, #3
 8004854:	d81a      	bhi.n	800488c <UART_SetConfig+0xe8>
 8004856:	a201      	add	r2, pc, #4	; (adr r2, 800485c <UART_SetConfig+0xb8>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	0800486d 	.word	0x0800486d
 8004860:	0800487d 	.word	0x0800487d
 8004864:	08004875 	.word	0x08004875
 8004868:	08004885 	.word	0x08004885
 800486c:	2301      	movs	r3, #1
 800486e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004872:	e116      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004874:	2302      	movs	r3, #2
 8004876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800487a:	e112      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 800487c:	2304      	movs	r3, #4
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004882:	e10e      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004884:	2308      	movs	r3, #8
 8004886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800488a:	e10a      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 800488c:	2310      	movs	r3, #16
 800488e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004892:	e106      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a7c      	ldr	r2, [pc, #496]	; (8004a8c <UART_SetConfig+0x2e8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d138      	bne.n	8004910 <UART_SetConfig+0x16c>
 800489e:	4b7a      	ldr	r3, [pc, #488]	; (8004a88 <UART_SetConfig+0x2e4>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	2b0c      	cmp	r3, #12
 80048aa:	d82d      	bhi.n	8004908 <UART_SetConfig+0x164>
 80048ac:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <UART_SetConfig+0x110>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	080048e9 	.word	0x080048e9
 80048b8:	08004909 	.word	0x08004909
 80048bc:	08004909 	.word	0x08004909
 80048c0:	08004909 	.word	0x08004909
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	08004909 	.word	0x08004909
 80048cc:	08004909 	.word	0x08004909
 80048d0:	08004909 	.word	0x08004909
 80048d4:	080048f1 	.word	0x080048f1
 80048d8:	08004909 	.word	0x08004909
 80048dc:	08004909 	.word	0x08004909
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004901 	.word	0x08004901
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ee:	e0d8      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 80048f0:	2302      	movs	r3, #2
 80048f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f6:	e0d4      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fe:	e0d0      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004900:	2308      	movs	r3, #8
 8004902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004906:	e0cc      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004908:	2310      	movs	r3, #16
 800490a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800490e:	e0c8      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a5e      	ldr	r2, [pc, #376]	; (8004a90 <UART_SetConfig+0x2ec>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d125      	bne.n	8004966 <UART_SetConfig+0x1c2>
 800491a:	4b5b      	ldr	r3, [pc, #364]	; (8004a88 <UART_SetConfig+0x2e4>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004924:	2b30      	cmp	r3, #48	; 0x30
 8004926:	d016      	beq.n	8004956 <UART_SetConfig+0x1b2>
 8004928:	2b30      	cmp	r3, #48	; 0x30
 800492a:	d818      	bhi.n	800495e <UART_SetConfig+0x1ba>
 800492c:	2b20      	cmp	r3, #32
 800492e:	d00a      	beq.n	8004946 <UART_SetConfig+0x1a2>
 8004930:	2b20      	cmp	r3, #32
 8004932:	d814      	bhi.n	800495e <UART_SetConfig+0x1ba>
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <UART_SetConfig+0x19a>
 8004938:	2b10      	cmp	r3, #16
 800493a:	d008      	beq.n	800494e <UART_SetConfig+0x1aa>
 800493c:	e00f      	b.n	800495e <UART_SetConfig+0x1ba>
 800493e:	2300      	movs	r3, #0
 8004940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004944:	e0ad      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004946:	2302      	movs	r3, #2
 8004948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494c:	e0a9      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 800494e:	2304      	movs	r3, #4
 8004950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004954:	e0a5      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004956:	2308      	movs	r3, #8
 8004958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800495c:	e0a1      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 800495e:	2310      	movs	r3, #16
 8004960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004964:	e09d      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a4a      	ldr	r2, [pc, #296]	; (8004a94 <UART_SetConfig+0x2f0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d125      	bne.n	80049bc <UART_SetConfig+0x218>
 8004970:	4b45      	ldr	r3, [pc, #276]	; (8004a88 <UART_SetConfig+0x2e4>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004976:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800497a:	2bc0      	cmp	r3, #192	; 0xc0
 800497c:	d016      	beq.n	80049ac <UART_SetConfig+0x208>
 800497e:	2bc0      	cmp	r3, #192	; 0xc0
 8004980:	d818      	bhi.n	80049b4 <UART_SetConfig+0x210>
 8004982:	2b80      	cmp	r3, #128	; 0x80
 8004984:	d00a      	beq.n	800499c <UART_SetConfig+0x1f8>
 8004986:	2b80      	cmp	r3, #128	; 0x80
 8004988:	d814      	bhi.n	80049b4 <UART_SetConfig+0x210>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <UART_SetConfig+0x1f0>
 800498e:	2b40      	cmp	r3, #64	; 0x40
 8004990:	d008      	beq.n	80049a4 <UART_SetConfig+0x200>
 8004992:	e00f      	b.n	80049b4 <UART_SetConfig+0x210>
 8004994:	2300      	movs	r3, #0
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800499a:	e082      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 800499c:	2302      	movs	r3, #2
 800499e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a2:	e07e      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 80049a4:	2304      	movs	r3, #4
 80049a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049aa:	e07a      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 80049ac:	2308      	movs	r3, #8
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b2:	e076      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 80049b4:	2310      	movs	r3, #16
 80049b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ba:	e072      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a35      	ldr	r2, [pc, #212]	; (8004a98 <UART_SetConfig+0x2f4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d12a      	bne.n	8004a1c <UART_SetConfig+0x278>
 80049c6:	4b30      	ldr	r3, [pc, #192]	; (8004a88 <UART_SetConfig+0x2e4>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d4:	d01a      	beq.n	8004a0c <UART_SetConfig+0x268>
 80049d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049da:	d81b      	bhi.n	8004a14 <UART_SetConfig+0x270>
 80049dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e0:	d00c      	beq.n	80049fc <UART_SetConfig+0x258>
 80049e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e6:	d815      	bhi.n	8004a14 <UART_SetConfig+0x270>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <UART_SetConfig+0x250>
 80049ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f0:	d008      	beq.n	8004a04 <UART_SetConfig+0x260>
 80049f2:	e00f      	b.n	8004a14 <UART_SetConfig+0x270>
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049fa:	e052      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 80049fc:	2302      	movs	r3, #2
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a02:	e04e      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a04:	2304      	movs	r3, #4
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a0a:	e04a      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a12:	e046      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a14:	2310      	movs	r3, #16
 8004a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a1a:	e042      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a17      	ldr	r2, [pc, #92]	; (8004a80 <UART_SetConfig+0x2dc>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d13a      	bne.n	8004a9c <UART_SetConfig+0x2f8>
 8004a26:	4b18      	ldr	r3, [pc, #96]	; (8004a88 <UART_SetConfig+0x2e4>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a34:	d01a      	beq.n	8004a6c <UART_SetConfig+0x2c8>
 8004a36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a3a:	d81b      	bhi.n	8004a74 <UART_SetConfig+0x2d0>
 8004a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a40:	d00c      	beq.n	8004a5c <UART_SetConfig+0x2b8>
 8004a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a46:	d815      	bhi.n	8004a74 <UART_SetConfig+0x2d0>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <UART_SetConfig+0x2b0>
 8004a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a50:	d008      	beq.n	8004a64 <UART_SetConfig+0x2c0>
 8004a52:	e00f      	b.n	8004a74 <UART_SetConfig+0x2d0>
 8004a54:	2300      	movs	r3, #0
 8004a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a5a:	e022      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a62:	e01e      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a64:	2304      	movs	r3, #4
 8004a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a6a:	e01a      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a6c:	2308      	movs	r3, #8
 8004a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a72:	e016      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a74:	2310      	movs	r3, #16
 8004a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a7a:	e012      	b.n	8004aa2 <UART_SetConfig+0x2fe>
 8004a7c:	cfff69f3 	.word	0xcfff69f3
 8004a80:	40008000 	.word	0x40008000
 8004a84:	40013800 	.word	0x40013800
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40004400 	.word	0x40004400
 8004a90:	40004800 	.word	0x40004800
 8004a94:	40004c00 	.word	0x40004c00
 8004a98:	40005000 	.word	0x40005000
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4aae      	ldr	r2, [pc, #696]	; (8004d60 <UART_SetConfig+0x5bc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	f040 8097 	bne.w	8004bdc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d823      	bhi.n	8004afe <UART_SetConfig+0x35a>
 8004ab6:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <UART_SetConfig+0x318>)
 8004ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abc:	08004ae1 	.word	0x08004ae1
 8004ac0:	08004aff 	.word	0x08004aff
 8004ac4:	08004ae9 	.word	0x08004ae9
 8004ac8:	08004aff 	.word	0x08004aff
 8004acc:	08004aef 	.word	0x08004aef
 8004ad0:	08004aff 	.word	0x08004aff
 8004ad4:	08004aff 	.word	0x08004aff
 8004ad8:	08004aff 	.word	0x08004aff
 8004adc:	08004af7 	.word	0x08004af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae0:	f7fe ff7c 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 8004ae4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ae6:	e010      	b.n	8004b0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae8:	4b9e      	ldr	r3, [pc, #632]	; (8004d64 <UART_SetConfig+0x5c0>)
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004aec:	e00d      	b.n	8004b0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aee:	f7fe fedd 	bl	80038ac <HAL_RCC_GetSysClockFreq>
 8004af2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004af4:	e009      	b.n	8004b0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004afc:	e005      	b.n	8004b0a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8130 	beq.w	8004d72 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	4a94      	ldr	r2, [pc, #592]	; (8004d68 <UART_SetConfig+0x5c4>)
 8004b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	4413      	add	r3, r2
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d305      	bcc.n	8004b42 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d903      	bls.n	8004b4a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b48:	e113      	b.n	8004d72 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	60bb      	str	r3, [r7, #8]
 8004b50:	60fa      	str	r2, [r7, #12]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	4a84      	ldr	r2, [pc, #528]	; (8004d68 <UART_SetConfig+0x5c4>)
 8004b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2200      	movs	r2, #0
 8004b60:	603b      	str	r3, [r7, #0]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b6c:	f7fc f834 	bl	8000bd8 <__aeabi_uldivmod>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4610      	mov	r0, r2
 8004b76:	4619      	mov	r1, r3
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	020b      	lsls	r3, r1, #8
 8004b82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b86:	0202      	lsls	r2, r0, #8
 8004b88:	6979      	ldr	r1, [r7, #20]
 8004b8a:	6849      	ldr	r1, [r1, #4]
 8004b8c:	0849      	lsrs	r1, r1, #1
 8004b8e:	2000      	movs	r0, #0
 8004b90:	460c      	mov	r4, r1
 8004b92:	4605      	mov	r5, r0
 8004b94:	eb12 0804 	adds.w	r8, r2, r4
 8004b98:	eb43 0905 	adc.w	r9, r3, r5
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	469a      	mov	sl, r3
 8004ba4:	4693      	mov	fp, r2
 8004ba6:	4652      	mov	r2, sl
 8004ba8:	465b      	mov	r3, fp
 8004baa:	4640      	mov	r0, r8
 8004bac:	4649      	mov	r1, r9
 8004bae:	f7fc f813 	bl	8000bd8 <__aeabi_uldivmod>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc0:	d308      	bcc.n	8004bd4 <UART_SetConfig+0x430>
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc8:	d204      	bcs.n	8004bd4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6a3a      	ldr	r2, [r7, #32]
 8004bd0:	60da      	str	r2, [r3, #12]
 8004bd2:	e0ce      	b.n	8004d72 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004bda:	e0ca      	b.n	8004d72 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be4:	d166      	bne.n	8004cb4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004be6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d827      	bhi.n	8004c3e <UART_SetConfig+0x49a>
 8004bee:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <UART_SetConfig+0x450>)
 8004bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf4:	08004c19 	.word	0x08004c19
 8004bf8:	08004c21 	.word	0x08004c21
 8004bfc:	08004c29 	.word	0x08004c29
 8004c00:	08004c3f 	.word	0x08004c3f
 8004c04:	08004c2f 	.word	0x08004c2f
 8004c08:	08004c3f 	.word	0x08004c3f
 8004c0c:	08004c3f 	.word	0x08004c3f
 8004c10:	08004c3f 	.word	0x08004c3f
 8004c14:	08004c37 	.word	0x08004c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c18:	f7fe fee0 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 8004c1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c1e:	e014      	b.n	8004c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c20:	f7fe fef2 	bl	8003a08 <HAL_RCC_GetPCLK2Freq>
 8004c24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c26:	e010      	b.n	8004c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c28:	4b4e      	ldr	r3, [pc, #312]	; (8004d64 <UART_SetConfig+0x5c0>)
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c2c:	e00d      	b.n	8004c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c2e:	f7fe fe3d 	bl	80038ac <HAL_RCC_GetSysClockFreq>
 8004c32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c34:	e009      	b.n	8004c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c3c:	e005      	b.n	8004c4a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8090 	beq.w	8004d72 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	4a44      	ldr	r2, [pc, #272]	; (8004d68 <UART_SetConfig+0x5c4>)
 8004c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c64:	005a      	lsls	r2, r3, #1
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	441a      	add	r2, r3
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c76:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	2b0f      	cmp	r3, #15
 8004c7c:	d916      	bls.n	8004cac <UART_SetConfig+0x508>
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c84:	d212      	bcs.n	8004cac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f023 030f 	bic.w	r3, r3, #15
 8004c8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	085b      	lsrs	r3, r3, #1
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	8bfb      	ldrh	r3, [r7, #30]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	8bfa      	ldrh	r2, [r7, #30]
 8004ca8:	60da      	str	r2, [r3, #12]
 8004caa:	e062      	b.n	8004d72 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cb2:	e05e      	b.n	8004d72 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d828      	bhi.n	8004d0e <UART_SetConfig+0x56a>
 8004cbc:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <UART_SetConfig+0x520>)
 8004cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc2:	bf00      	nop
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004cf1 	.word	0x08004cf1
 8004ccc:	08004cf9 	.word	0x08004cf9
 8004cd0:	08004d0f 	.word	0x08004d0f
 8004cd4:	08004cff 	.word	0x08004cff
 8004cd8:	08004d0f 	.word	0x08004d0f
 8004cdc:	08004d0f 	.word	0x08004d0f
 8004ce0:	08004d0f 	.word	0x08004d0f
 8004ce4:	08004d07 	.word	0x08004d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce8:	f7fe fe78 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 8004cec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cee:	e014      	b.n	8004d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf0:	f7fe fe8a 	bl	8003a08 <HAL_RCC_GetPCLK2Freq>
 8004cf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cf6:	e010      	b.n	8004d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf8:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <UART_SetConfig+0x5c0>)
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cfc:	e00d      	b.n	8004d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cfe:	f7fe fdd5 	bl	80038ac <HAL_RCC_GetSysClockFreq>
 8004d02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d04:	e009      	b.n	8004d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d0c:	e005      	b.n	8004d1a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d18:	bf00      	nop
    }

    if (pclk != 0U)
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d028      	beq.n	8004d72 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	4a10      	ldr	r2, [pc, #64]	; (8004d68 <UART_SetConfig+0x5c4>)
 8004d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	441a      	add	r2, r3
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d42:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	2b0f      	cmp	r3, #15
 8004d48:	d910      	bls.n	8004d6c <UART_SetConfig+0x5c8>
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d50:	d20c      	bcs.n	8004d6c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60da      	str	r2, [r3, #12]
 8004d5c:	e009      	b.n	8004d72 <UART_SetConfig+0x5ce>
 8004d5e:	bf00      	nop
 8004d60:	40008000 	.word	0x40008000
 8004d64:	00f42400 	.word	0x00f42400
 8004d68:	08007e88 	.word	0x08007e88
      }
      else
      {
        ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2200      	movs	r2, #0
 8004d86:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004d8e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3730      	adds	r7, #48	; 0x30
 8004d96:	46bd      	mov	sp, r7
 8004d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01a      	beq.n	8004eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9a:	d10a      	bne.n	8004eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b098      	sub	sp, #96	; 0x60
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef0:	f7fc fe38 	bl	8001b64 <HAL_GetTick>
 8004ef4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d12f      	bne.n	8004f64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f88e 	bl	8005034 <UART_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d022      	beq.n	8004f64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f32:	653b      	str	r3, [r7, #80]	; 0x50
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f3e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e6      	bne.n	8004f1e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e063      	b.n	800502c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d149      	bne.n	8005006 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f857 	bl	8005034 <UART_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d03c      	beq.n	8005006 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	623b      	str	r3, [r7, #32]
   return(result);
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004faa:	633b      	str	r3, [r7, #48]	; 0x30
 8004fac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e6      	bne.n	8004f8c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f023 0301 	bic.w	r3, r3, #1
 8004fd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3308      	adds	r3, #8
 8004fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fde:	61fa      	str	r2, [r7, #28]
 8004fe0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	69b9      	ldr	r1, [r7, #24]
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	617b      	str	r3, [r7, #20]
   return(result);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e5      	bne.n	8004fbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e012      	b.n	800502c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3758      	adds	r7, #88	; 0x58
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	4613      	mov	r3, r2
 8005042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005044:	e049      	b.n	80050da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800504c:	d045      	beq.n	80050da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504e:	f7fc fd89 	bl	8001b64 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	429a      	cmp	r2, r3
 800505c:	d302      	bcc.n	8005064 <UART_WaitOnFlagUntilTimeout+0x30>
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e048      	b.n	80050fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d031      	beq.n	80050da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b08      	cmp	r3, #8
 8005082:	d110      	bne.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2208      	movs	r2, #8
 800508a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f838 	bl	8005102 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2208      	movs	r2, #8
 8005096:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e029      	b.n	80050fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b4:	d111      	bne.n	80050da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f81e 	bl	8005102 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e00f      	b.n	80050fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4013      	ands	r3, r2
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	bf0c      	ite	eq
 80050ea:	2301      	moveq	r3, #1
 80050ec:	2300      	movne	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d0a6      	beq.n	8005046 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005102:	b480      	push	{r7}
 8005104:	b095      	sub	sp, #84	; 0x54
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005112:	e853 3f00 	ldrex	r3, [r3]
 8005116:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800511e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005128:	643b      	str	r3, [r7, #64]	; 0x40
 800512a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800512e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e6      	bne.n	800510a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3308      	adds	r3, #8
 8005142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	61fb      	str	r3, [r7, #28]
   return(result);
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005152:	f023 0301 	bic.w	r3, r3, #1
 8005156:	64bb      	str	r3, [r7, #72]	; 0x48
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3308      	adds	r3, #8
 800515e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005160:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005168:	e841 2300 	strex	r3, r2, [r1]
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e3      	bne.n	800513c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d118      	bne.n	80051ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	60bb      	str	r3, [r7, #8]
   return(result);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f023 0310 	bic.w	r3, r3, #16
 8005190:	647b      	str	r3, [r7, #68]	; 0x44
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6979      	ldr	r1, [r7, #20]
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	613b      	str	r3, [r7, #16]
   return(result);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e6      	bne.n	800517c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80051c2:	bf00      	nop
 80051c4:	3754      	adds	r7, #84	; 0x54
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80051e0:	2302      	movs	r3, #2
 80051e2:	e027      	b.n	8005234 <HAL_UARTEx_DisableFifoMode+0x66>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2224      	movs	r2, #36	; 0x24
 80051f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0201 	bic.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005212:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005254:	2302      	movs	r3, #2
 8005256:	e02d      	b.n	80052b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	; 0x24
 8005264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0201 	bic.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f84f 	bl	8005338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e02d      	b.n	8005330 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2224      	movs	r2, #36	; 0x24
 80052e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0201 	bic.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f811 	bl	8005338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005344:	2b00      	cmp	r3, #0
 8005346:	d108      	bne.n	800535a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005358:	e031      	b.n	80053be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800535a:	2308      	movs	r3, #8
 800535c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800535e:	2308      	movs	r3, #8
 8005360:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	0e5b      	lsrs	r3, r3, #25
 800536a:	b2db      	uxtb	r3, r3
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	0f5b      	lsrs	r3, r3, #29
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005382:	7bbb      	ldrb	r3, [r7, #14]
 8005384:	7b3a      	ldrb	r2, [r7, #12]
 8005386:	4911      	ldr	r1, [pc, #68]	; (80053cc <UARTEx_SetNbDataToProcess+0x94>)
 8005388:	5c8a      	ldrb	r2, [r1, r2]
 800538a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800538e:	7b3a      	ldrb	r2, [r7, #12]
 8005390:	490f      	ldr	r1, [pc, #60]	; (80053d0 <UARTEx_SetNbDataToProcess+0x98>)
 8005392:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005394:	fb93 f3f2 	sdiv	r3, r3, r2
 8005398:	b29a      	uxth	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	7b7a      	ldrb	r2, [r7, #13]
 80053a4:	4909      	ldr	r1, [pc, #36]	; (80053cc <UARTEx_SetNbDataToProcess+0x94>)
 80053a6:	5c8a      	ldrb	r2, [r1, r2]
 80053a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053ac:	7b7a      	ldrb	r2, [r7, #13]
 80053ae:	4908      	ldr	r1, [pc, #32]	; (80053d0 <UARTEx_SetNbDataToProcess+0x98>)
 80053b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	08007ea0 	.word	0x08007ea0
 80053d0:	08007ea8 	.word	0x08007ea8

080053d4 <__cvt>:
 80053d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053d8:	ec55 4b10 	vmov	r4, r5, d0
 80053dc:	2d00      	cmp	r5, #0
 80053de:	460e      	mov	r6, r1
 80053e0:	4619      	mov	r1, r3
 80053e2:	462b      	mov	r3, r5
 80053e4:	bfbb      	ittet	lt
 80053e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80053ea:	461d      	movlt	r5, r3
 80053ec:	2300      	movge	r3, #0
 80053ee:	232d      	movlt	r3, #45	; 0x2d
 80053f0:	700b      	strb	r3, [r1, #0]
 80053f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053f8:	4691      	mov	r9, r2
 80053fa:	f023 0820 	bic.w	r8, r3, #32
 80053fe:	bfbc      	itt	lt
 8005400:	4622      	movlt	r2, r4
 8005402:	4614      	movlt	r4, r2
 8005404:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005408:	d005      	beq.n	8005416 <__cvt+0x42>
 800540a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800540e:	d100      	bne.n	8005412 <__cvt+0x3e>
 8005410:	3601      	adds	r6, #1
 8005412:	2102      	movs	r1, #2
 8005414:	e000      	b.n	8005418 <__cvt+0x44>
 8005416:	2103      	movs	r1, #3
 8005418:	ab03      	add	r3, sp, #12
 800541a:	9301      	str	r3, [sp, #4]
 800541c:	ab02      	add	r3, sp, #8
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	ec45 4b10 	vmov	d0, r4, r5
 8005424:	4653      	mov	r3, sl
 8005426:	4632      	mov	r2, r6
 8005428:	f000 fe1a 	bl	8006060 <_dtoa_r>
 800542c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005430:	4607      	mov	r7, r0
 8005432:	d102      	bne.n	800543a <__cvt+0x66>
 8005434:	f019 0f01 	tst.w	r9, #1
 8005438:	d022      	beq.n	8005480 <__cvt+0xac>
 800543a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800543e:	eb07 0906 	add.w	r9, r7, r6
 8005442:	d110      	bne.n	8005466 <__cvt+0x92>
 8005444:	783b      	ldrb	r3, [r7, #0]
 8005446:	2b30      	cmp	r3, #48	; 0x30
 8005448:	d10a      	bne.n	8005460 <__cvt+0x8c>
 800544a:	2200      	movs	r2, #0
 800544c:	2300      	movs	r3, #0
 800544e:	4620      	mov	r0, r4
 8005450:	4629      	mov	r1, r5
 8005452:	f7fb fb51 	bl	8000af8 <__aeabi_dcmpeq>
 8005456:	b918      	cbnz	r0, 8005460 <__cvt+0x8c>
 8005458:	f1c6 0601 	rsb	r6, r6, #1
 800545c:	f8ca 6000 	str.w	r6, [sl]
 8005460:	f8da 3000 	ldr.w	r3, [sl]
 8005464:	4499      	add	r9, r3
 8005466:	2200      	movs	r2, #0
 8005468:	2300      	movs	r3, #0
 800546a:	4620      	mov	r0, r4
 800546c:	4629      	mov	r1, r5
 800546e:	f7fb fb43 	bl	8000af8 <__aeabi_dcmpeq>
 8005472:	b108      	cbz	r0, 8005478 <__cvt+0xa4>
 8005474:	f8cd 900c 	str.w	r9, [sp, #12]
 8005478:	2230      	movs	r2, #48	; 0x30
 800547a:	9b03      	ldr	r3, [sp, #12]
 800547c:	454b      	cmp	r3, r9
 800547e:	d307      	bcc.n	8005490 <__cvt+0xbc>
 8005480:	9b03      	ldr	r3, [sp, #12]
 8005482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005484:	1bdb      	subs	r3, r3, r7
 8005486:	4638      	mov	r0, r7
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	b004      	add	sp, #16
 800548c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005490:	1c59      	adds	r1, r3, #1
 8005492:	9103      	str	r1, [sp, #12]
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	e7f0      	b.n	800547a <__cvt+0xa6>

08005498 <__exponent>:
 8005498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800549a:	4603      	mov	r3, r0
 800549c:	2900      	cmp	r1, #0
 800549e:	bfb8      	it	lt
 80054a0:	4249      	neglt	r1, r1
 80054a2:	f803 2b02 	strb.w	r2, [r3], #2
 80054a6:	bfb4      	ite	lt
 80054a8:	222d      	movlt	r2, #45	; 0x2d
 80054aa:	222b      	movge	r2, #43	; 0x2b
 80054ac:	2909      	cmp	r1, #9
 80054ae:	7042      	strb	r2, [r0, #1]
 80054b0:	dd2a      	ble.n	8005508 <__exponent+0x70>
 80054b2:	f10d 0207 	add.w	r2, sp, #7
 80054b6:	4617      	mov	r7, r2
 80054b8:	260a      	movs	r6, #10
 80054ba:	4694      	mov	ip, r2
 80054bc:	fb91 f5f6 	sdiv	r5, r1, r6
 80054c0:	fb06 1415 	mls	r4, r6, r5, r1
 80054c4:	3430      	adds	r4, #48	; 0x30
 80054c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80054ca:	460c      	mov	r4, r1
 80054cc:	2c63      	cmp	r4, #99	; 0x63
 80054ce:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80054d2:	4629      	mov	r1, r5
 80054d4:	dcf1      	bgt.n	80054ba <__exponent+0x22>
 80054d6:	3130      	adds	r1, #48	; 0x30
 80054d8:	f1ac 0402 	sub.w	r4, ip, #2
 80054dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80054e0:	1c41      	adds	r1, r0, #1
 80054e2:	4622      	mov	r2, r4
 80054e4:	42ba      	cmp	r2, r7
 80054e6:	d30a      	bcc.n	80054fe <__exponent+0x66>
 80054e8:	f10d 0209 	add.w	r2, sp, #9
 80054ec:	eba2 020c 	sub.w	r2, r2, ip
 80054f0:	42bc      	cmp	r4, r7
 80054f2:	bf88      	it	hi
 80054f4:	2200      	movhi	r2, #0
 80054f6:	4413      	add	r3, r2
 80054f8:	1a18      	subs	r0, r3, r0
 80054fa:	b003      	add	sp, #12
 80054fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005502:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005506:	e7ed      	b.n	80054e4 <__exponent+0x4c>
 8005508:	2330      	movs	r3, #48	; 0x30
 800550a:	3130      	adds	r1, #48	; 0x30
 800550c:	7083      	strb	r3, [r0, #2]
 800550e:	70c1      	strb	r1, [r0, #3]
 8005510:	1d03      	adds	r3, r0, #4
 8005512:	e7f1      	b.n	80054f8 <__exponent+0x60>

08005514 <_printf_float>:
 8005514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005518:	ed2d 8b02 	vpush	{d8}
 800551c:	b08d      	sub	sp, #52	; 0x34
 800551e:	460c      	mov	r4, r1
 8005520:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005524:	4616      	mov	r6, r2
 8005526:	461f      	mov	r7, r3
 8005528:	4605      	mov	r5, r0
 800552a:	f000 fcdf 	bl	8005eec <_localeconv_r>
 800552e:	f8d0 a000 	ldr.w	sl, [r0]
 8005532:	4650      	mov	r0, sl
 8005534:	f7fa feb4 	bl	80002a0 <strlen>
 8005538:	2300      	movs	r3, #0
 800553a:	930a      	str	r3, [sp, #40]	; 0x28
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	9305      	str	r3, [sp, #20]
 8005540:	f8d8 3000 	ldr.w	r3, [r8]
 8005544:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005548:	3307      	adds	r3, #7
 800554a:	f023 0307 	bic.w	r3, r3, #7
 800554e:	f103 0208 	add.w	r2, r3, #8
 8005552:	f8c8 2000 	str.w	r2, [r8]
 8005556:	e9d3 8900 	ldrd	r8, r9, [r3]
 800555a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800555e:	9307      	str	r3, [sp, #28]
 8005560:	f8cd 8018 	str.w	r8, [sp, #24]
 8005564:	ee08 0a10 	vmov	s16, r0
 8005568:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800556c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005570:	4b9e      	ldr	r3, [pc, #632]	; (80057ec <_printf_float+0x2d8>)
 8005572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005576:	f7fb faf1 	bl	8000b5c <__aeabi_dcmpun>
 800557a:	bb88      	cbnz	r0, 80055e0 <_printf_float+0xcc>
 800557c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005580:	4b9a      	ldr	r3, [pc, #616]	; (80057ec <_printf_float+0x2d8>)
 8005582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005586:	f7fb facb 	bl	8000b20 <__aeabi_dcmple>
 800558a:	bb48      	cbnz	r0, 80055e0 <_printf_float+0xcc>
 800558c:	2200      	movs	r2, #0
 800558e:	2300      	movs	r3, #0
 8005590:	4640      	mov	r0, r8
 8005592:	4649      	mov	r1, r9
 8005594:	f7fb faba 	bl	8000b0c <__aeabi_dcmplt>
 8005598:	b110      	cbz	r0, 80055a0 <_printf_float+0x8c>
 800559a:	232d      	movs	r3, #45	; 0x2d
 800559c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a0:	4a93      	ldr	r2, [pc, #588]	; (80057f0 <_printf_float+0x2dc>)
 80055a2:	4b94      	ldr	r3, [pc, #592]	; (80057f4 <_printf_float+0x2e0>)
 80055a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055a8:	bf94      	ite	ls
 80055aa:	4690      	movls	r8, r2
 80055ac:	4698      	movhi	r8, r3
 80055ae:	2303      	movs	r3, #3
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	9b05      	ldr	r3, [sp, #20]
 80055b4:	f023 0304 	bic.w	r3, r3, #4
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	f04f 0900 	mov.w	r9, #0
 80055be:	9700      	str	r7, [sp, #0]
 80055c0:	4633      	mov	r3, r6
 80055c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80055c4:	4621      	mov	r1, r4
 80055c6:	4628      	mov	r0, r5
 80055c8:	f000 f9da 	bl	8005980 <_printf_common>
 80055cc:	3001      	adds	r0, #1
 80055ce:	f040 8090 	bne.w	80056f2 <_printf_float+0x1de>
 80055d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055d6:	b00d      	add	sp, #52	; 0x34
 80055d8:	ecbd 8b02 	vpop	{d8}
 80055dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e0:	4642      	mov	r2, r8
 80055e2:	464b      	mov	r3, r9
 80055e4:	4640      	mov	r0, r8
 80055e6:	4649      	mov	r1, r9
 80055e8:	f7fb fab8 	bl	8000b5c <__aeabi_dcmpun>
 80055ec:	b140      	cbz	r0, 8005600 <_printf_float+0xec>
 80055ee:	464b      	mov	r3, r9
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bfbc      	itt	lt
 80055f4:	232d      	movlt	r3, #45	; 0x2d
 80055f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80055fa:	4a7f      	ldr	r2, [pc, #508]	; (80057f8 <_printf_float+0x2e4>)
 80055fc:	4b7f      	ldr	r3, [pc, #508]	; (80057fc <_printf_float+0x2e8>)
 80055fe:	e7d1      	b.n	80055a4 <_printf_float+0x90>
 8005600:	6863      	ldr	r3, [r4, #4]
 8005602:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005606:	9206      	str	r2, [sp, #24]
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	d13f      	bne.n	800568c <_printf_float+0x178>
 800560c:	2306      	movs	r3, #6
 800560e:	6063      	str	r3, [r4, #4]
 8005610:	9b05      	ldr	r3, [sp, #20]
 8005612:	6861      	ldr	r1, [r4, #4]
 8005614:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005618:	2300      	movs	r3, #0
 800561a:	9303      	str	r3, [sp, #12]
 800561c:	ab0a      	add	r3, sp, #40	; 0x28
 800561e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005622:	ab09      	add	r3, sp, #36	; 0x24
 8005624:	ec49 8b10 	vmov	d0, r8, r9
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	6022      	str	r2, [r4, #0]
 800562c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005630:	4628      	mov	r0, r5
 8005632:	f7ff fecf 	bl	80053d4 <__cvt>
 8005636:	9b06      	ldr	r3, [sp, #24]
 8005638:	9909      	ldr	r1, [sp, #36]	; 0x24
 800563a:	2b47      	cmp	r3, #71	; 0x47
 800563c:	4680      	mov	r8, r0
 800563e:	d108      	bne.n	8005652 <_printf_float+0x13e>
 8005640:	1cc8      	adds	r0, r1, #3
 8005642:	db02      	blt.n	800564a <_printf_float+0x136>
 8005644:	6863      	ldr	r3, [r4, #4]
 8005646:	4299      	cmp	r1, r3
 8005648:	dd41      	ble.n	80056ce <_printf_float+0x1ba>
 800564a:	f1ab 0302 	sub.w	r3, fp, #2
 800564e:	fa5f fb83 	uxtb.w	fp, r3
 8005652:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005656:	d820      	bhi.n	800569a <_printf_float+0x186>
 8005658:	3901      	subs	r1, #1
 800565a:	465a      	mov	r2, fp
 800565c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005660:	9109      	str	r1, [sp, #36]	; 0x24
 8005662:	f7ff ff19 	bl	8005498 <__exponent>
 8005666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005668:	1813      	adds	r3, r2, r0
 800566a:	2a01      	cmp	r2, #1
 800566c:	4681      	mov	r9, r0
 800566e:	6123      	str	r3, [r4, #16]
 8005670:	dc02      	bgt.n	8005678 <_printf_float+0x164>
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	07d2      	lsls	r2, r2, #31
 8005676:	d501      	bpl.n	800567c <_printf_float+0x168>
 8005678:	3301      	adds	r3, #1
 800567a:	6123      	str	r3, [r4, #16]
 800567c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005680:	2b00      	cmp	r3, #0
 8005682:	d09c      	beq.n	80055be <_printf_float+0xaa>
 8005684:	232d      	movs	r3, #45	; 0x2d
 8005686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800568a:	e798      	b.n	80055be <_printf_float+0xaa>
 800568c:	9a06      	ldr	r2, [sp, #24]
 800568e:	2a47      	cmp	r2, #71	; 0x47
 8005690:	d1be      	bne.n	8005610 <_printf_float+0xfc>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1bc      	bne.n	8005610 <_printf_float+0xfc>
 8005696:	2301      	movs	r3, #1
 8005698:	e7b9      	b.n	800560e <_printf_float+0xfa>
 800569a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800569e:	d118      	bne.n	80056d2 <_printf_float+0x1be>
 80056a0:	2900      	cmp	r1, #0
 80056a2:	6863      	ldr	r3, [r4, #4]
 80056a4:	dd0b      	ble.n	80056be <_printf_float+0x1aa>
 80056a6:	6121      	str	r1, [r4, #16]
 80056a8:	b913      	cbnz	r3, 80056b0 <_printf_float+0x19c>
 80056aa:	6822      	ldr	r2, [r4, #0]
 80056ac:	07d0      	lsls	r0, r2, #31
 80056ae:	d502      	bpl.n	80056b6 <_printf_float+0x1a2>
 80056b0:	3301      	adds	r3, #1
 80056b2:	440b      	add	r3, r1
 80056b4:	6123      	str	r3, [r4, #16]
 80056b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80056b8:	f04f 0900 	mov.w	r9, #0
 80056bc:	e7de      	b.n	800567c <_printf_float+0x168>
 80056be:	b913      	cbnz	r3, 80056c6 <_printf_float+0x1b2>
 80056c0:	6822      	ldr	r2, [r4, #0]
 80056c2:	07d2      	lsls	r2, r2, #31
 80056c4:	d501      	bpl.n	80056ca <_printf_float+0x1b6>
 80056c6:	3302      	adds	r3, #2
 80056c8:	e7f4      	b.n	80056b4 <_printf_float+0x1a0>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e7f2      	b.n	80056b4 <_printf_float+0x1a0>
 80056ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80056d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d4:	4299      	cmp	r1, r3
 80056d6:	db05      	blt.n	80056e4 <_printf_float+0x1d0>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	6121      	str	r1, [r4, #16]
 80056dc:	07d8      	lsls	r0, r3, #31
 80056de:	d5ea      	bpl.n	80056b6 <_printf_float+0x1a2>
 80056e0:	1c4b      	adds	r3, r1, #1
 80056e2:	e7e7      	b.n	80056b4 <_printf_float+0x1a0>
 80056e4:	2900      	cmp	r1, #0
 80056e6:	bfd4      	ite	le
 80056e8:	f1c1 0202 	rsble	r2, r1, #2
 80056ec:	2201      	movgt	r2, #1
 80056ee:	4413      	add	r3, r2
 80056f0:	e7e0      	b.n	80056b4 <_printf_float+0x1a0>
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	055a      	lsls	r2, r3, #21
 80056f6:	d407      	bmi.n	8005708 <_printf_float+0x1f4>
 80056f8:	6923      	ldr	r3, [r4, #16]
 80056fa:	4642      	mov	r2, r8
 80056fc:	4631      	mov	r1, r6
 80056fe:	4628      	mov	r0, r5
 8005700:	47b8      	blx	r7
 8005702:	3001      	adds	r0, #1
 8005704:	d12c      	bne.n	8005760 <_printf_float+0x24c>
 8005706:	e764      	b.n	80055d2 <_printf_float+0xbe>
 8005708:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800570c:	f240 80e0 	bls.w	80058d0 <_printf_float+0x3bc>
 8005710:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005714:	2200      	movs	r2, #0
 8005716:	2300      	movs	r3, #0
 8005718:	f7fb f9ee 	bl	8000af8 <__aeabi_dcmpeq>
 800571c:	2800      	cmp	r0, #0
 800571e:	d034      	beq.n	800578a <_printf_float+0x276>
 8005720:	4a37      	ldr	r2, [pc, #220]	; (8005800 <_printf_float+0x2ec>)
 8005722:	2301      	movs	r3, #1
 8005724:	4631      	mov	r1, r6
 8005726:	4628      	mov	r0, r5
 8005728:	47b8      	blx	r7
 800572a:	3001      	adds	r0, #1
 800572c:	f43f af51 	beq.w	80055d2 <_printf_float+0xbe>
 8005730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005734:	429a      	cmp	r2, r3
 8005736:	db02      	blt.n	800573e <_printf_float+0x22a>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	07d8      	lsls	r0, r3, #31
 800573c:	d510      	bpl.n	8005760 <_printf_float+0x24c>
 800573e:	ee18 3a10 	vmov	r3, s16
 8005742:	4652      	mov	r2, sl
 8005744:	4631      	mov	r1, r6
 8005746:	4628      	mov	r0, r5
 8005748:	47b8      	blx	r7
 800574a:	3001      	adds	r0, #1
 800574c:	f43f af41 	beq.w	80055d2 <_printf_float+0xbe>
 8005750:	f04f 0800 	mov.w	r8, #0
 8005754:	f104 091a 	add.w	r9, r4, #26
 8005758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800575a:	3b01      	subs	r3, #1
 800575c:	4543      	cmp	r3, r8
 800575e:	dc09      	bgt.n	8005774 <_printf_float+0x260>
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	079b      	lsls	r3, r3, #30
 8005764:	f100 8107 	bmi.w	8005976 <_printf_float+0x462>
 8005768:	68e0      	ldr	r0, [r4, #12]
 800576a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800576c:	4298      	cmp	r0, r3
 800576e:	bfb8      	it	lt
 8005770:	4618      	movlt	r0, r3
 8005772:	e730      	b.n	80055d6 <_printf_float+0xc2>
 8005774:	2301      	movs	r3, #1
 8005776:	464a      	mov	r2, r9
 8005778:	4631      	mov	r1, r6
 800577a:	4628      	mov	r0, r5
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	f43f af27 	beq.w	80055d2 <_printf_float+0xbe>
 8005784:	f108 0801 	add.w	r8, r8, #1
 8005788:	e7e6      	b.n	8005758 <_printf_float+0x244>
 800578a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800578c:	2b00      	cmp	r3, #0
 800578e:	dc39      	bgt.n	8005804 <_printf_float+0x2f0>
 8005790:	4a1b      	ldr	r2, [pc, #108]	; (8005800 <_printf_float+0x2ec>)
 8005792:	2301      	movs	r3, #1
 8005794:	4631      	mov	r1, r6
 8005796:	4628      	mov	r0, r5
 8005798:	47b8      	blx	r7
 800579a:	3001      	adds	r0, #1
 800579c:	f43f af19 	beq.w	80055d2 <_printf_float+0xbe>
 80057a0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80057a4:	4313      	orrs	r3, r2
 80057a6:	d102      	bne.n	80057ae <_printf_float+0x29a>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	07d9      	lsls	r1, r3, #31
 80057ac:	d5d8      	bpl.n	8005760 <_printf_float+0x24c>
 80057ae:	ee18 3a10 	vmov	r3, s16
 80057b2:	4652      	mov	r2, sl
 80057b4:	4631      	mov	r1, r6
 80057b6:	4628      	mov	r0, r5
 80057b8:	47b8      	blx	r7
 80057ba:	3001      	adds	r0, #1
 80057bc:	f43f af09 	beq.w	80055d2 <_printf_float+0xbe>
 80057c0:	f04f 0900 	mov.w	r9, #0
 80057c4:	f104 0a1a 	add.w	sl, r4, #26
 80057c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ca:	425b      	negs	r3, r3
 80057cc:	454b      	cmp	r3, r9
 80057ce:	dc01      	bgt.n	80057d4 <_printf_float+0x2c0>
 80057d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057d2:	e792      	b.n	80056fa <_printf_float+0x1e6>
 80057d4:	2301      	movs	r3, #1
 80057d6:	4652      	mov	r2, sl
 80057d8:	4631      	mov	r1, r6
 80057da:	4628      	mov	r0, r5
 80057dc:	47b8      	blx	r7
 80057de:	3001      	adds	r0, #1
 80057e0:	f43f aef7 	beq.w	80055d2 <_printf_float+0xbe>
 80057e4:	f109 0901 	add.w	r9, r9, #1
 80057e8:	e7ee      	b.n	80057c8 <_printf_float+0x2b4>
 80057ea:	bf00      	nop
 80057ec:	7fefffff 	.word	0x7fefffff
 80057f0:	08007eb0 	.word	0x08007eb0
 80057f4:	08007eb4 	.word	0x08007eb4
 80057f8:	08007eb8 	.word	0x08007eb8
 80057fc:	08007ebc 	.word	0x08007ebc
 8005800:	08007ec0 	.word	0x08007ec0
 8005804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005806:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005808:	429a      	cmp	r2, r3
 800580a:	bfa8      	it	ge
 800580c:	461a      	movge	r2, r3
 800580e:	2a00      	cmp	r2, #0
 8005810:	4691      	mov	r9, r2
 8005812:	dc37      	bgt.n	8005884 <_printf_float+0x370>
 8005814:	f04f 0b00 	mov.w	fp, #0
 8005818:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800581c:	f104 021a 	add.w	r2, r4, #26
 8005820:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005822:	9305      	str	r3, [sp, #20]
 8005824:	eba3 0309 	sub.w	r3, r3, r9
 8005828:	455b      	cmp	r3, fp
 800582a:	dc33      	bgt.n	8005894 <_printf_float+0x380>
 800582c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005830:	429a      	cmp	r2, r3
 8005832:	db3b      	blt.n	80058ac <_printf_float+0x398>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	07da      	lsls	r2, r3, #31
 8005838:	d438      	bmi.n	80058ac <_printf_float+0x398>
 800583a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800583e:	eba2 0903 	sub.w	r9, r2, r3
 8005842:	9b05      	ldr	r3, [sp, #20]
 8005844:	1ad2      	subs	r2, r2, r3
 8005846:	4591      	cmp	r9, r2
 8005848:	bfa8      	it	ge
 800584a:	4691      	movge	r9, r2
 800584c:	f1b9 0f00 	cmp.w	r9, #0
 8005850:	dc35      	bgt.n	80058be <_printf_float+0x3aa>
 8005852:	f04f 0800 	mov.w	r8, #0
 8005856:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800585a:	f104 0a1a 	add.w	sl, r4, #26
 800585e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	eba3 0309 	sub.w	r3, r3, r9
 8005868:	4543      	cmp	r3, r8
 800586a:	f77f af79 	ble.w	8005760 <_printf_float+0x24c>
 800586e:	2301      	movs	r3, #1
 8005870:	4652      	mov	r2, sl
 8005872:	4631      	mov	r1, r6
 8005874:	4628      	mov	r0, r5
 8005876:	47b8      	blx	r7
 8005878:	3001      	adds	r0, #1
 800587a:	f43f aeaa 	beq.w	80055d2 <_printf_float+0xbe>
 800587e:	f108 0801 	add.w	r8, r8, #1
 8005882:	e7ec      	b.n	800585e <_printf_float+0x34a>
 8005884:	4613      	mov	r3, r2
 8005886:	4631      	mov	r1, r6
 8005888:	4642      	mov	r2, r8
 800588a:	4628      	mov	r0, r5
 800588c:	47b8      	blx	r7
 800588e:	3001      	adds	r0, #1
 8005890:	d1c0      	bne.n	8005814 <_printf_float+0x300>
 8005892:	e69e      	b.n	80055d2 <_printf_float+0xbe>
 8005894:	2301      	movs	r3, #1
 8005896:	4631      	mov	r1, r6
 8005898:	4628      	mov	r0, r5
 800589a:	9205      	str	r2, [sp, #20]
 800589c:	47b8      	blx	r7
 800589e:	3001      	adds	r0, #1
 80058a0:	f43f ae97 	beq.w	80055d2 <_printf_float+0xbe>
 80058a4:	9a05      	ldr	r2, [sp, #20]
 80058a6:	f10b 0b01 	add.w	fp, fp, #1
 80058aa:	e7b9      	b.n	8005820 <_printf_float+0x30c>
 80058ac:	ee18 3a10 	vmov	r3, s16
 80058b0:	4652      	mov	r2, sl
 80058b2:	4631      	mov	r1, r6
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b8      	blx	r7
 80058b8:	3001      	adds	r0, #1
 80058ba:	d1be      	bne.n	800583a <_printf_float+0x326>
 80058bc:	e689      	b.n	80055d2 <_printf_float+0xbe>
 80058be:	9a05      	ldr	r2, [sp, #20]
 80058c0:	464b      	mov	r3, r9
 80058c2:	4442      	add	r2, r8
 80058c4:	4631      	mov	r1, r6
 80058c6:	4628      	mov	r0, r5
 80058c8:	47b8      	blx	r7
 80058ca:	3001      	adds	r0, #1
 80058cc:	d1c1      	bne.n	8005852 <_printf_float+0x33e>
 80058ce:	e680      	b.n	80055d2 <_printf_float+0xbe>
 80058d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058d2:	2a01      	cmp	r2, #1
 80058d4:	dc01      	bgt.n	80058da <_printf_float+0x3c6>
 80058d6:	07db      	lsls	r3, r3, #31
 80058d8:	d53a      	bpl.n	8005950 <_printf_float+0x43c>
 80058da:	2301      	movs	r3, #1
 80058dc:	4642      	mov	r2, r8
 80058de:	4631      	mov	r1, r6
 80058e0:	4628      	mov	r0, r5
 80058e2:	47b8      	blx	r7
 80058e4:	3001      	adds	r0, #1
 80058e6:	f43f ae74 	beq.w	80055d2 <_printf_float+0xbe>
 80058ea:	ee18 3a10 	vmov	r3, s16
 80058ee:	4652      	mov	r2, sl
 80058f0:	4631      	mov	r1, r6
 80058f2:	4628      	mov	r0, r5
 80058f4:	47b8      	blx	r7
 80058f6:	3001      	adds	r0, #1
 80058f8:	f43f ae6b 	beq.w	80055d2 <_printf_float+0xbe>
 80058fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005900:	2200      	movs	r2, #0
 8005902:	2300      	movs	r3, #0
 8005904:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005908:	f7fb f8f6 	bl	8000af8 <__aeabi_dcmpeq>
 800590c:	b9d8      	cbnz	r0, 8005946 <_printf_float+0x432>
 800590e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005912:	f108 0201 	add.w	r2, r8, #1
 8005916:	4631      	mov	r1, r6
 8005918:	4628      	mov	r0, r5
 800591a:	47b8      	blx	r7
 800591c:	3001      	adds	r0, #1
 800591e:	d10e      	bne.n	800593e <_printf_float+0x42a>
 8005920:	e657      	b.n	80055d2 <_printf_float+0xbe>
 8005922:	2301      	movs	r3, #1
 8005924:	4652      	mov	r2, sl
 8005926:	4631      	mov	r1, r6
 8005928:	4628      	mov	r0, r5
 800592a:	47b8      	blx	r7
 800592c:	3001      	adds	r0, #1
 800592e:	f43f ae50 	beq.w	80055d2 <_printf_float+0xbe>
 8005932:	f108 0801 	add.w	r8, r8, #1
 8005936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005938:	3b01      	subs	r3, #1
 800593a:	4543      	cmp	r3, r8
 800593c:	dcf1      	bgt.n	8005922 <_printf_float+0x40e>
 800593e:	464b      	mov	r3, r9
 8005940:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005944:	e6da      	b.n	80056fc <_printf_float+0x1e8>
 8005946:	f04f 0800 	mov.w	r8, #0
 800594a:	f104 0a1a 	add.w	sl, r4, #26
 800594e:	e7f2      	b.n	8005936 <_printf_float+0x422>
 8005950:	2301      	movs	r3, #1
 8005952:	4642      	mov	r2, r8
 8005954:	e7df      	b.n	8005916 <_printf_float+0x402>
 8005956:	2301      	movs	r3, #1
 8005958:	464a      	mov	r2, r9
 800595a:	4631      	mov	r1, r6
 800595c:	4628      	mov	r0, r5
 800595e:	47b8      	blx	r7
 8005960:	3001      	adds	r0, #1
 8005962:	f43f ae36 	beq.w	80055d2 <_printf_float+0xbe>
 8005966:	f108 0801 	add.w	r8, r8, #1
 800596a:	68e3      	ldr	r3, [r4, #12]
 800596c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800596e:	1a5b      	subs	r3, r3, r1
 8005970:	4543      	cmp	r3, r8
 8005972:	dcf0      	bgt.n	8005956 <_printf_float+0x442>
 8005974:	e6f8      	b.n	8005768 <_printf_float+0x254>
 8005976:	f04f 0800 	mov.w	r8, #0
 800597a:	f104 0919 	add.w	r9, r4, #25
 800597e:	e7f4      	b.n	800596a <_printf_float+0x456>

08005980 <_printf_common>:
 8005980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005984:	4616      	mov	r6, r2
 8005986:	4699      	mov	r9, r3
 8005988:	688a      	ldr	r2, [r1, #8]
 800598a:	690b      	ldr	r3, [r1, #16]
 800598c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005990:	4293      	cmp	r3, r2
 8005992:	bfb8      	it	lt
 8005994:	4613      	movlt	r3, r2
 8005996:	6033      	str	r3, [r6, #0]
 8005998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800599c:	4607      	mov	r7, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	b10a      	cbz	r2, 80059a6 <_printf_common+0x26>
 80059a2:	3301      	adds	r3, #1
 80059a4:	6033      	str	r3, [r6, #0]
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	0699      	lsls	r1, r3, #26
 80059aa:	bf42      	ittt	mi
 80059ac:	6833      	ldrmi	r3, [r6, #0]
 80059ae:	3302      	addmi	r3, #2
 80059b0:	6033      	strmi	r3, [r6, #0]
 80059b2:	6825      	ldr	r5, [r4, #0]
 80059b4:	f015 0506 	ands.w	r5, r5, #6
 80059b8:	d106      	bne.n	80059c8 <_printf_common+0x48>
 80059ba:	f104 0a19 	add.w	sl, r4, #25
 80059be:	68e3      	ldr	r3, [r4, #12]
 80059c0:	6832      	ldr	r2, [r6, #0]
 80059c2:	1a9b      	subs	r3, r3, r2
 80059c4:	42ab      	cmp	r3, r5
 80059c6:	dc26      	bgt.n	8005a16 <_printf_common+0x96>
 80059c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059cc:	1e13      	subs	r3, r2, #0
 80059ce:	6822      	ldr	r2, [r4, #0]
 80059d0:	bf18      	it	ne
 80059d2:	2301      	movne	r3, #1
 80059d4:	0692      	lsls	r2, r2, #26
 80059d6:	d42b      	bmi.n	8005a30 <_printf_common+0xb0>
 80059d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059dc:	4649      	mov	r1, r9
 80059de:	4638      	mov	r0, r7
 80059e0:	47c0      	blx	r8
 80059e2:	3001      	adds	r0, #1
 80059e4:	d01e      	beq.n	8005a24 <_printf_common+0xa4>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	6922      	ldr	r2, [r4, #16]
 80059ea:	f003 0306 	and.w	r3, r3, #6
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	bf02      	ittt	eq
 80059f2:	68e5      	ldreq	r5, [r4, #12]
 80059f4:	6833      	ldreq	r3, [r6, #0]
 80059f6:	1aed      	subeq	r5, r5, r3
 80059f8:	68a3      	ldr	r3, [r4, #8]
 80059fa:	bf0c      	ite	eq
 80059fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a00:	2500      	movne	r5, #0
 8005a02:	4293      	cmp	r3, r2
 8005a04:	bfc4      	itt	gt
 8005a06:	1a9b      	subgt	r3, r3, r2
 8005a08:	18ed      	addgt	r5, r5, r3
 8005a0a:	2600      	movs	r6, #0
 8005a0c:	341a      	adds	r4, #26
 8005a0e:	42b5      	cmp	r5, r6
 8005a10:	d11a      	bne.n	8005a48 <_printf_common+0xc8>
 8005a12:	2000      	movs	r0, #0
 8005a14:	e008      	b.n	8005a28 <_printf_common+0xa8>
 8005a16:	2301      	movs	r3, #1
 8005a18:	4652      	mov	r2, sl
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	47c0      	blx	r8
 8005a20:	3001      	adds	r0, #1
 8005a22:	d103      	bne.n	8005a2c <_printf_common+0xac>
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2c:	3501      	adds	r5, #1
 8005a2e:	e7c6      	b.n	80059be <_printf_common+0x3e>
 8005a30:	18e1      	adds	r1, r4, r3
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	2030      	movs	r0, #48	; 0x30
 8005a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a3a:	4422      	add	r2, r4
 8005a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a44:	3302      	adds	r3, #2
 8005a46:	e7c7      	b.n	80059d8 <_printf_common+0x58>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	4638      	mov	r0, r7
 8005a50:	47c0      	blx	r8
 8005a52:	3001      	adds	r0, #1
 8005a54:	d0e6      	beq.n	8005a24 <_printf_common+0xa4>
 8005a56:	3601      	adds	r6, #1
 8005a58:	e7d9      	b.n	8005a0e <_printf_common+0x8e>
	...

08005a5c <_printf_i>:
 8005a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a60:	7e0f      	ldrb	r7, [r1, #24]
 8005a62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a64:	2f78      	cmp	r7, #120	; 0x78
 8005a66:	4691      	mov	r9, r2
 8005a68:	4680      	mov	r8, r0
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	469a      	mov	sl, r3
 8005a6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a72:	d807      	bhi.n	8005a84 <_printf_i+0x28>
 8005a74:	2f62      	cmp	r7, #98	; 0x62
 8005a76:	d80a      	bhi.n	8005a8e <_printf_i+0x32>
 8005a78:	2f00      	cmp	r7, #0
 8005a7a:	f000 80d4 	beq.w	8005c26 <_printf_i+0x1ca>
 8005a7e:	2f58      	cmp	r7, #88	; 0x58
 8005a80:	f000 80c0 	beq.w	8005c04 <_printf_i+0x1a8>
 8005a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a8c:	e03a      	b.n	8005b04 <_printf_i+0xa8>
 8005a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a92:	2b15      	cmp	r3, #21
 8005a94:	d8f6      	bhi.n	8005a84 <_printf_i+0x28>
 8005a96:	a101      	add	r1, pc, #4	; (adr r1, 8005a9c <_printf_i+0x40>)
 8005a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a9c:	08005af5 	.word	0x08005af5
 8005aa0:	08005b09 	.word	0x08005b09
 8005aa4:	08005a85 	.word	0x08005a85
 8005aa8:	08005a85 	.word	0x08005a85
 8005aac:	08005a85 	.word	0x08005a85
 8005ab0:	08005a85 	.word	0x08005a85
 8005ab4:	08005b09 	.word	0x08005b09
 8005ab8:	08005a85 	.word	0x08005a85
 8005abc:	08005a85 	.word	0x08005a85
 8005ac0:	08005a85 	.word	0x08005a85
 8005ac4:	08005a85 	.word	0x08005a85
 8005ac8:	08005c0d 	.word	0x08005c0d
 8005acc:	08005b35 	.word	0x08005b35
 8005ad0:	08005bc7 	.word	0x08005bc7
 8005ad4:	08005a85 	.word	0x08005a85
 8005ad8:	08005a85 	.word	0x08005a85
 8005adc:	08005c2f 	.word	0x08005c2f
 8005ae0:	08005a85 	.word	0x08005a85
 8005ae4:	08005b35 	.word	0x08005b35
 8005ae8:	08005a85 	.word	0x08005a85
 8005aec:	08005a85 	.word	0x08005a85
 8005af0:	08005bcf 	.word	0x08005bcf
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	1d1a      	adds	r2, r3, #4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	602a      	str	r2, [r5, #0]
 8005afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b04:	2301      	movs	r3, #1
 8005b06:	e09f      	b.n	8005c48 <_printf_i+0x1ec>
 8005b08:	6820      	ldr	r0, [r4, #0]
 8005b0a:	682b      	ldr	r3, [r5, #0]
 8005b0c:	0607      	lsls	r7, r0, #24
 8005b0e:	f103 0104 	add.w	r1, r3, #4
 8005b12:	6029      	str	r1, [r5, #0]
 8005b14:	d501      	bpl.n	8005b1a <_printf_i+0xbe>
 8005b16:	681e      	ldr	r6, [r3, #0]
 8005b18:	e003      	b.n	8005b22 <_printf_i+0xc6>
 8005b1a:	0646      	lsls	r6, r0, #25
 8005b1c:	d5fb      	bpl.n	8005b16 <_printf_i+0xba>
 8005b1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b22:	2e00      	cmp	r6, #0
 8005b24:	da03      	bge.n	8005b2e <_printf_i+0xd2>
 8005b26:	232d      	movs	r3, #45	; 0x2d
 8005b28:	4276      	negs	r6, r6
 8005b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b2e:	485a      	ldr	r0, [pc, #360]	; (8005c98 <_printf_i+0x23c>)
 8005b30:	230a      	movs	r3, #10
 8005b32:	e012      	b.n	8005b5a <_printf_i+0xfe>
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	6820      	ldr	r0, [r4, #0]
 8005b38:	1d19      	adds	r1, r3, #4
 8005b3a:	6029      	str	r1, [r5, #0]
 8005b3c:	0605      	lsls	r5, r0, #24
 8005b3e:	d501      	bpl.n	8005b44 <_printf_i+0xe8>
 8005b40:	681e      	ldr	r6, [r3, #0]
 8005b42:	e002      	b.n	8005b4a <_printf_i+0xee>
 8005b44:	0641      	lsls	r1, r0, #25
 8005b46:	d5fb      	bpl.n	8005b40 <_printf_i+0xe4>
 8005b48:	881e      	ldrh	r6, [r3, #0]
 8005b4a:	4853      	ldr	r0, [pc, #332]	; (8005c98 <_printf_i+0x23c>)
 8005b4c:	2f6f      	cmp	r7, #111	; 0x6f
 8005b4e:	bf0c      	ite	eq
 8005b50:	2308      	moveq	r3, #8
 8005b52:	230a      	movne	r3, #10
 8005b54:	2100      	movs	r1, #0
 8005b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b5a:	6865      	ldr	r5, [r4, #4]
 8005b5c:	60a5      	str	r5, [r4, #8]
 8005b5e:	2d00      	cmp	r5, #0
 8005b60:	bfa2      	ittt	ge
 8005b62:	6821      	ldrge	r1, [r4, #0]
 8005b64:	f021 0104 	bicge.w	r1, r1, #4
 8005b68:	6021      	strge	r1, [r4, #0]
 8005b6a:	b90e      	cbnz	r6, 8005b70 <_printf_i+0x114>
 8005b6c:	2d00      	cmp	r5, #0
 8005b6e:	d04b      	beq.n	8005c08 <_printf_i+0x1ac>
 8005b70:	4615      	mov	r5, r2
 8005b72:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b76:	fb03 6711 	mls	r7, r3, r1, r6
 8005b7a:	5dc7      	ldrb	r7, [r0, r7]
 8005b7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b80:	4637      	mov	r7, r6
 8005b82:	42bb      	cmp	r3, r7
 8005b84:	460e      	mov	r6, r1
 8005b86:	d9f4      	bls.n	8005b72 <_printf_i+0x116>
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d10b      	bne.n	8005ba4 <_printf_i+0x148>
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	07de      	lsls	r6, r3, #31
 8005b90:	d508      	bpl.n	8005ba4 <_printf_i+0x148>
 8005b92:	6923      	ldr	r3, [r4, #16]
 8005b94:	6861      	ldr	r1, [r4, #4]
 8005b96:	4299      	cmp	r1, r3
 8005b98:	bfde      	ittt	le
 8005b9a:	2330      	movle	r3, #48	; 0x30
 8005b9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ba0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ba4:	1b52      	subs	r2, r2, r5
 8005ba6:	6122      	str	r2, [r4, #16]
 8005ba8:	f8cd a000 	str.w	sl, [sp]
 8005bac:	464b      	mov	r3, r9
 8005bae:	aa03      	add	r2, sp, #12
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	f7ff fee4 	bl	8005980 <_printf_common>
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d14a      	bne.n	8005c52 <_printf_i+0x1f6>
 8005bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bc0:	b004      	add	sp, #16
 8005bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	f043 0320 	orr.w	r3, r3, #32
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	4833      	ldr	r0, [pc, #204]	; (8005c9c <_printf_i+0x240>)
 8005bd0:	2778      	movs	r7, #120	; 0x78
 8005bd2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	6829      	ldr	r1, [r5, #0]
 8005bda:	061f      	lsls	r7, r3, #24
 8005bdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005be0:	d402      	bmi.n	8005be8 <_printf_i+0x18c>
 8005be2:	065f      	lsls	r7, r3, #25
 8005be4:	bf48      	it	mi
 8005be6:	b2b6      	uxthmi	r6, r6
 8005be8:	07df      	lsls	r7, r3, #31
 8005bea:	bf48      	it	mi
 8005bec:	f043 0320 	orrmi.w	r3, r3, #32
 8005bf0:	6029      	str	r1, [r5, #0]
 8005bf2:	bf48      	it	mi
 8005bf4:	6023      	strmi	r3, [r4, #0]
 8005bf6:	b91e      	cbnz	r6, 8005c00 <_printf_i+0x1a4>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	f023 0320 	bic.w	r3, r3, #32
 8005bfe:	6023      	str	r3, [r4, #0]
 8005c00:	2310      	movs	r3, #16
 8005c02:	e7a7      	b.n	8005b54 <_printf_i+0xf8>
 8005c04:	4824      	ldr	r0, [pc, #144]	; (8005c98 <_printf_i+0x23c>)
 8005c06:	e7e4      	b.n	8005bd2 <_printf_i+0x176>
 8005c08:	4615      	mov	r5, r2
 8005c0a:	e7bd      	b.n	8005b88 <_printf_i+0x12c>
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	6826      	ldr	r6, [r4, #0]
 8005c10:	6961      	ldr	r1, [r4, #20]
 8005c12:	1d18      	adds	r0, r3, #4
 8005c14:	6028      	str	r0, [r5, #0]
 8005c16:	0635      	lsls	r5, r6, #24
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	d501      	bpl.n	8005c20 <_printf_i+0x1c4>
 8005c1c:	6019      	str	r1, [r3, #0]
 8005c1e:	e002      	b.n	8005c26 <_printf_i+0x1ca>
 8005c20:	0670      	lsls	r0, r6, #25
 8005c22:	d5fb      	bpl.n	8005c1c <_printf_i+0x1c0>
 8005c24:	8019      	strh	r1, [r3, #0]
 8005c26:	2300      	movs	r3, #0
 8005c28:	6123      	str	r3, [r4, #16]
 8005c2a:	4615      	mov	r5, r2
 8005c2c:	e7bc      	b.n	8005ba8 <_printf_i+0x14c>
 8005c2e:	682b      	ldr	r3, [r5, #0]
 8005c30:	1d1a      	adds	r2, r3, #4
 8005c32:	602a      	str	r2, [r5, #0]
 8005c34:	681d      	ldr	r5, [r3, #0]
 8005c36:	6862      	ldr	r2, [r4, #4]
 8005c38:	2100      	movs	r1, #0
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f7fa fae0 	bl	8000200 <memchr>
 8005c40:	b108      	cbz	r0, 8005c46 <_printf_i+0x1ea>
 8005c42:	1b40      	subs	r0, r0, r5
 8005c44:	6060      	str	r0, [r4, #4]
 8005c46:	6863      	ldr	r3, [r4, #4]
 8005c48:	6123      	str	r3, [r4, #16]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c50:	e7aa      	b.n	8005ba8 <_printf_i+0x14c>
 8005c52:	6923      	ldr	r3, [r4, #16]
 8005c54:	462a      	mov	r2, r5
 8005c56:	4649      	mov	r1, r9
 8005c58:	4640      	mov	r0, r8
 8005c5a:	47d0      	blx	sl
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d0ad      	beq.n	8005bbc <_printf_i+0x160>
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	079b      	lsls	r3, r3, #30
 8005c64:	d413      	bmi.n	8005c8e <_printf_i+0x232>
 8005c66:	68e0      	ldr	r0, [r4, #12]
 8005c68:	9b03      	ldr	r3, [sp, #12]
 8005c6a:	4298      	cmp	r0, r3
 8005c6c:	bfb8      	it	lt
 8005c6e:	4618      	movlt	r0, r3
 8005c70:	e7a6      	b.n	8005bc0 <_printf_i+0x164>
 8005c72:	2301      	movs	r3, #1
 8005c74:	4632      	mov	r2, r6
 8005c76:	4649      	mov	r1, r9
 8005c78:	4640      	mov	r0, r8
 8005c7a:	47d0      	blx	sl
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d09d      	beq.n	8005bbc <_printf_i+0x160>
 8005c80:	3501      	adds	r5, #1
 8005c82:	68e3      	ldr	r3, [r4, #12]
 8005c84:	9903      	ldr	r1, [sp, #12]
 8005c86:	1a5b      	subs	r3, r3, r1
 8005c88:	42ab      	cmp	r3, r5
 8005c8a:	dcf2      	bgt.n	8005c72 <_printf_i+0x216>
 8005c8c:	e7eb      	b.n	8005c66 <_printf_i+0x20a>
 8005c8e:	2500      	movs	r5, #0
 8005c90:	f104 0619 	add.w	r6, r4, #25
 8005c94:	e7f5      	b.n	8005c82 <_printf_i+0x226>
 8005c96:	bf00      	nop
 8005c98:	08007ec2 	.word	0x08007ec2
 8005c9c:	08007ed3 	.word	0x08007ed3

08005ca0 <std>:
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8005caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cae:	6083      	str	r3, [r0, #8]
 8005cb0:	8181      	strh	r1, [r0, #12]
 8005cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8005cb4:	81c2      	strh	r2, [r0, #14]
 8005cb6:	6183      	str	r3, [r0, #24]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	2208      	movs	r2, #8
 8005cbc:	305c      	adds	r0, #92	; 0x5c
 8005cbe:	f000 f90d 	bl	8005edc <memset>
 8005cc2:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <std+0x38>)
 8005cc4:	6263      	str	r3, [r4, #36]	; 0x24
 8005cc6:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <std+0x3c>)
 8005cc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cca:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <std+0x40>)
 8005ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cce:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <std+0x44>)
 8005cd0:	6224      	str	r4, [r4, #32]
 8005cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8005cd4:	bd10      	pop	{r4, pc}
 8005cd6:	bf00      	nop
 8005cd8:	08007889 	.word	0x08007889
 8005cdc:	080078ab 	.word	0x080078ab
 8005ce0:	080078e3 	.word	0x080078e3
 8005ce4:	08007907 	.word	0x08007907

08005ce8 <stdio_exit_handler>:
 8005ce8:	4a02      	ldr	r2, [pc, #8]	; (8005cf4 <stdio_exit_handler+0xc>)
 8005cea:	4903      	ldr	r1, [pc, #12]	; (8005cf8 <stdio_exit_handler+0x10>)
 8005cec:	4803      	ldr	r0, [pc, #12]	; (8005cfc <stdio_exit_handler+0x14>)
 8005cee:	f000 b869 	b.w	8005dc4 <_fwalk_sglue>
 8005cf2:	bf00      	nop
 8005cf4:	2000000c 	.word	0x2000000c
 8005cf8:	08007129 	.word	0x08007129
 8005cfc:	20000018 	.word	0x20000018

08005d00 <cleanup_stdio>:
 8005d00:	6841      	ldr	r1, [r0, #4]
 8005d02:	4b0c      	ldr	r3, [pc, #48]	; (8005d34 <cleanup_stdio+0x34>)
 8005d04:	4299      	cmp	r1, r3
 8005d06:	b510      	push	{r4, lr}
 8005d08:	4604      	mov	r4, r0
 8005d0a:	d001      	beq.n	8005d10 <cleanup_stdio+0x10>
 8005d0c:	f001 fa0c 	bl	8007128 <_fflush_r>
 8005d10:	68a1      	ldr	r1, [r4, #8]
 8005d12:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <cleanup_stdio+0x38>)
 8005d14:	4299      	cmp	r1, r3
 8005d16:	d002      	beq.n	8005d1e <cleanup_stdio+0x1e>
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f001 fa05 	bl	8007128 <_fflush_r>
 8005d1e:	68e1      	ldr	r1, [r4, #12]
 8005d20:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <cleanup_stdio+0x3c>)
 8005d22:	4299      	cmp	r1, r3
 8005d24:	d004      	beq.n	8005d30 <cleanup_stdio+0x30>
 8005d26:	4620      	mov	r0, r4
 8005d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d2c:	f001 b9fc 	b.w	8007128 <_fflush_r>
 8005d30:	bd10      	pop	{r4, pc}
 8005d32:	bf00      	nop
 8005d34:	200002e4 	.word	0x200002e4
 8005d38:	2000034c 	.word	0x2000034c
 8005d3c:	200003b4 	.word	0x200003b4

08005d40 <global_stdio_init.part.0>:
 8005d40:	b510      	push	{r4, lr}
 8005d42:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <global_stdio_init.part.0+0x30>)
 8005d44:	4c0b      	ldr	r4, [pc, #44]	; (8005d74 <global_stdio_init.part.0+0x34>)
 8005d46:	4a0c      	ldr	r2, [pc, #48]	; (8005d78 <global_stdio_init.part.0+0x38>)
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2104      	movs	r1, #4
 8005d50:	f7ff ffa6 	bl	8005ca0 <std>
 8005d54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005d58:	2201      	movs	r2, #1
 8005d5a:	2109      	movs	r1, #9
 8005d5c:	f7ff ffa0 	bl	8005ca0 <std>
 8005d60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005d64:	2202      	movs	r2, #2
 8005d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d6a:	2112      	movs	r1, #18
 8005d6c:	f7ff bf98 	b.w	8005ca0 <std>
 8005d70:	2000041c 	.word	0x2000041c
 8005d74:	200002e4 	.word	0x200002e4
 8005d78:	08005ce9 	.word	0x08005ce9

08005d7c <__sfp_lock_acquire>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	; (8005d84 <__sfp_lock_acquire+0x8>)
 8005d7e:	f000 b8e3 	b.w	8005f48 <__retarget_lock_acquire_recursive>
 8005d82:	bf00      	nop
 8005d84:	20000421 	.word	0x20000421

08005d88 <__sfp_lock_release>:
 8005d88:	4801      	ldr	r0, [pc, #4]	; (8005d90 <__sfp_lock_release+0x8>)
 8005d8a:	f000 b8de 	b.w	8005f4a <__retarget_lock_release_recursive>
 8005d8e:	bf00      	nop
 8005d90:	20000421 	.word	0x20000421

08005d94 <__sinit>:
 8005d94:	b510      	push	{r4, lr}
 8005d96:	4604      	mov	r4, r0
 8005d98:	f7ff fff0 	bl	8005d7c <__sfp_lock_acquire>
 8005d9c:	6a23      	ldr	r3, [r4, #32]
 8005d9e:	b11b      	cbz	r3, 8005da8 <__sinit+0x14>
 8005da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da4:	f7ff bff0 	b.w	8005d88 <__sfp_lock_release>
 8005da8:	4b04      	ldr	r3, [pc, #16]	; (8005dbc <__sinit+0x28>)
 8005daa:	6223      	str	r3, [r4, #32]
 8005dac:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <__sinit+0x2c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f5      	bne.n	8005da0 <__sinit+0xc>
 8005db4:	f7ff ffc4 	bl	8005d40 <global_stdio_init.part.0>
 8005db8:	e7f2      	b.n	8005da0 <__sinit+0xc>
 8005dba:	bf00      	nop
 8005dbc:	08005d01 	.word	0x08005d01
 8005dc0:	2000041c 	.word	0x2000041c

08005dc4 <_fwalk_sglue>:
 8005dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc8:	4607      	mov	r7, r0
 8005dca:	4688      	mov	r8, r1
 8005dcc:	4614      	mov	r4, r2
 8005dce:	2600      	movs	r6, #0
 8005dd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dd4:	f1b9 0901 	subs.w	r9, r9, #1
 8005dd8:	d505      	bpl.n	8005de6 <_fwalk_sglue+0x22>
 8005dda:	6824      	ldr	r4, [r4, #0]
 8005ddc:	2c00      	cmp	r4, #0
 8005dde:	d1f7      	bne.n	8005dd0 <_fwalk_sglue+0xc>
 8005de0:	4630      	mov	r0, r6
 8005de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de6:	89ab      	ldrh	r3, [r5, #12]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d907      	bls.n	8005dfc <_fwalk_sglue+0x38>
 8005dec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005df0:	3301      	adds	r3, #1
 8005df2:	d003      	beq.n	8005dfc <_fwalk_sglue+0x38>
 8005df4:	4629      	mov	r1, r5
 8005df6:	4638      	mov	r0, r7
 8005df8:	47c0      	blx	r8
 8005dfa:	4306      	orrs	r6, r0
 8005dfc:	3568      	adds	r5, #104	; 0x68
 8005dfe:	e7e9      	b.n	8005dd4 <_fwalk_sglue+0x10>

08005e00 <iprintf>:
 8005e00:	b40f      	push	{r0, r1, r2, r3}
 8005e02:	b507      	push	{r0, r1, r2, lr}
 8005e04:	4906      	ldr	r1, [pc, #24]	; (8005e20 <iprintf+0x20>)
 8005e06:	ab04      	add	r3, sp, #16
 8005e08:	6808      	ldr	r0, [r1, #0]
 8005e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e0e:	6881      	ldr	r1, [r0, #8]
 8005e10:	9301      	str	r3, [sp, #4]
 8005e12:	f000 ff41 	bl	8006c98 <_vfiprintf_r>
 8005e16:	b003      	add	sp, #12
 8005e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e1c:	b004      	add	sp, #16
 8005e1e:	4770      	bx	lr
 8005e20:	20000064 	.word	0x20000064

08005e24 <_puts_r>:
 8005e24:	6a03      	ldr	r3, [r0, #32]
 8005e26:	b570      	push	{r4, r5, r6, lr}
 8005e28:	6884      	ldr	r4, [r0, #8]
 8005e2a:	4605      	mov	r5, r0
 8005e2c:	460e      	mov	r6, r1
 8005e2e:	b90b      	cbnz	r3, 8005e34 <_puts_r+0x10>
 8005e30:	f7ff ffb0 	bl	8005d94 <__sinit>
 8005e34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e36:	07db      	lsls	r3, r3, #31
 8005e38:	d405      	bmi.n	8005e46 <_puts_r+0x22>
 8005e3a:	89a3      	ldrh	r3, [r4, #12]
 8005e3c:	0598      	lsls	r0, r3, #22
 8005e3e:	d402      	bmi.n	8005e46 <_puts_r+0x22>
 8005e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e42:	f000 f881 	bl	8005f48 <__retarget_lock_acquire_recursive>
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	0719      	lsls	r1, r3, #28
 8005e4a:	d513      	bpl.n	8005e74 <_puts_r+0x50>
 8005e4c:	6923      	ldr	r3, [r4, #16]
 8005e4e:	b18b      	cbz	r3, 8005e74 <_puts_r+0x50>
 8005e50:	3e01      	subs	r6, #1
 8005e52:	68a3      	ldr	r3, [r4, #8]
 8005e54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	60a3      	str	r3, [r4, #8]
 8005e5c:	b9e9      	cbnz	r1, 8005e9a <_puts_r+0x76>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	da2e      	bge.n	8005ec0 <_puts_r+0x9c>
 8005e62:	4622      	mov	r2, r4
 8005e64:	210a      	movs	r1, #10
 8005e66:	4628      	mov	r0, r5
 8005e68:	f001 fd51 	bl	800790e <__swbuf_r>
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d007      	beq.n	8005e80 <_puts_r+0x5c>
 8005e70:	250a      	movs	r5, #10
 8005e72:	e007      	b.n	8005e84 <_puts_r+0x60>
 8005e74:	4621      	mov	r1, r4
 8005e76:	4628      	mov	r0, r5
 8005e78:	f001 fd86 	bl	8007988 <__swsetup_r>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d0e7      	beq.n	8005e50 <_puts_r+0x2c>
 8005e80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e86:	07da      	lsls	r2, r3, #31
 8005e88:	d405      	bmi.n	8005e96 <_puts_r+0x72>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	059b      	lsls	r3, r3, #22
 8005e8e:	d402      	bmi.n	8005e96 <_puts_r+0x72>
 8005e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e92:	f000 f85a 	bl	8005f4a <__retarget_lock_release_recursive>
 8005e96:	4628      	mov	r0, r5
 8005e98:	bd70      	pop	{r4, r5, r6, pc}
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	da04      	bge.n	8005ea8 <_puts_r+0x84>
 8005e9e:	69a2      	ldr	r2, [r4, #24]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	dc06      	bgt.n	8005eb2 <_puts_r+0x8e>
 8005ea4:	290a      	cmp	r1, #10
 8005ea6:	d004      	beq.n	8005eb2 <_puts_r+0x8e>
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	6022      	str	r2, [r4, #0]
 8005eae:	7019      	strb	r1, [r3, #0]
 8005eb0:	e7cf      	b.n	8005e52 <_puts_r+0x2e>
 8005eb2:	4622      	mov	r2, r4
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f001 fd2a 	bl	800790e <__swbuf_r>
 8005eba:	3001      	adds	r0, #1
 8005ebc:	d1c9      	bne.n	8005e52 <_puts_r+0x2e>
 8005ebe:	e7df      	b.n	8005e80 <_puts_r+0x5c>
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	250a      	movs	r5, #10
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	6022      	str	r2, [r4, #0]
 8005ec8:	701d      	strb	r5, [r3, #0]
 8005eca:	e7db      	b.n	8005e84 <_puts_r+0x60>

08005ecc <puts>:
 8005ecc:	4b02      	ldr	r3, [pc, #8]	; (8005ed8 <puts+0xc>)
 8005ece:	4601      	mov	r1, r0
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	f7ff bfa7 	b.w	8005e24 <_puts_r>
 8005ed6:	bf00      	nop
 8005ed8:	20000064 	.word	0x20000064

08005edc <memset>:
 8005edc:	4402      	add	r2, r0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d100      	bne.n	8005ee6 <memset+0xa>
 8005ee4:	4770      	bx	lr
 8005ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eea:	e7f9      	b.n	8005ee0 <memset+0x4>

08005eec <_localeconv_r>:
 8005eec:	4800      	ldr	r0, [pc, #0]	; (8005ef0 <_localeconv_r+0x4>)
 8005eee:	4770      	bx	lr
 8005ef0:	20000158 	.word	0x20000158

08005ef4 <__errno>:
 8005ef4:	4b01      	ldr	r3, [pc, #4]	; (8005efc <__errno+0x8>)
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20000064 	.word	0x20000064

08005f00 <__libc_init_array>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	4d0d      	ldr	r5, [pc, #52]	; (8005f38 <__libc_init_array+0x38>)
 8005f04:	4c0d      	ldr	r4, [pc, #52]	; (8005f3c <__libc_init_array+0x3c>)
 8005f06:	1b64      	subs	r4, r4, r5
 8005f08:	10a4      	asrs	r4, r4, #2
 8005f0a:	2600      	movs	r6, #0
 8005f0c:	42a6      	cmp	r6, r4
 8005f0e:	d109      	bne.n	8005f24 <__libc_init_array+0x24>
 8005f10:	4d0b      	ldr	r5, [pc, #44]	; (8005f40 <__libc_init_array+0x40>)
 8005f12:	4c0c      	ldr	r4, [pc, #48]	; (8005f44 <__libc_init_array+0x44>)
 8005f14:	f001 ff74 	bl	8007e00 <_init>
 8005f18:	1b64      	subs	r4, r4, r5
 8005f1a:	10a4      	asrs	r4, r4, #2
 8005f1c:	2600      	movs	r6, #0
 8005f1e:	42a6      	cmp	r6, r4
 8005f20:	d105      	bne.n	8005f2e <__libc_init_array+0x2e>
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
 8005f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f28:	4798      	blx	r3
 8005f2a:	3601      	adds	r6, #1
 8005f2c:	e7ee      	b.n	8005f0c <__libc_init_array+0xc>
 8005f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f32:	4798      	blx	r3
 8005f34:	3601      	adds	r6, #1
 8005f36:	e7f2      	b.n	8005f1e <__libc_init_array+0x1e>
 8005f38:	0800822c 	.word	0x0800822c
 8005f3c:	0800822c 	.word	0x0800822c
 8005f40:	0800822c 	.word	0x0800822c
 8005f44:	08008230 	.word	0x08008230

08005f48 <__retarget_lock_acquire_recursive>:
 8005f48:	4770      	bx	lr

08005f4a <__retarget_lock_release_recursive>:
 8005f4a:	4770      	bx	lr

08005f4c <quorem>:
 8005f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f50:	6903      	ldr	r3, [r0, #16]
 8005f52:	690c      	ldr	r4, [r1, #16]
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	4607      	mov	r7, r0
 8005f58:	db7e      	blt.n	8006058 <quorem+0x10c>
 8005f5a:	3c01      	subs	r4, #1
 8005f5c:	f101 0814 	add.w	r8, r1, #20
 8005f60:	f100 0514 	add.w	r5, r0, #20
 8005f64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f72:	3301      	adds	r3, #1
 8005f74:	429a      	cmp	r2, r3
 8005f76:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f7e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f82:	d331      	bcc.n	8005fe8 <quorem+0x9c>
 8005f84:	f04f 0e00 	mov.w	lr, #0
 8005f88:	4640      	mov	r0, r8
 8005f8a:	46ac      	mov	ip, r5
 8005f8c:	46f2      	mov	sl, lr
 8005f8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f92:	b293      	uxth	r3, r2
 8005f94:	fb06 e303 	mla	r3, r6, r3, lr
 8005f98:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f9c:	0c1a      	lsrs	r2, r3, #16
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	ebaa 0303 	sub.w	r3, sl, r3
 8005fa4:	f8dc a000 	ldr.w	sl, [ip]
 8005fa8:	fa13 f38a 	uxtah	r3, r3, sl
 8005fac:	fb06 220e 	mla	r2, r6, lr, r2
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	9b00      	ldr	r3, [sp, #0]
 8005fb4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005fb8:	b292      	uxth	r2, r2
 8005fba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005fbe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fc2:	f8bd 3000 	ldrh.w	r3, [sp]
 8005fc6:	4581      	cmp	r9, r0
 8005fc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fcc:	f84c 3b04 	str.w	r3, [ip], #4
 8005fd0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005fd4:	d2db      	bcs.n	8005f8e <quorem+0x42>
 8005fd6:	f855 300b 	ldr.w	r3, [r5, fp]
 8005fda:	b92b      	cbnz	r3, 8005fe8 <quorem+0x9c>
 8005fdc:	9b01      	ldr	r3, [sp, #4]
 8005fde:	3b04      	subs	r3, #4
 8005fe0:	429d      	cmp	r5, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	d32c      	bcc.n	8006040 <quorem+0xf4>
 8005fe6:	613c      	str	r4, [r7, #16]
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f001 fb4d 	bl	8007688 <__mcmp>
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	db22      	blt.n	8006038 <quorem+0xec>
 8005ff2:	3601      	adds	r6, #1
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ffc:	f8d1 c000 	ldr.w	ip, [r1]
 8006000:	b293      	uxth	r3, r2
 8006002:	1ac3      	subs	r3, r0, r3
 8006004:	0c12      	lsrs	r2, r2, #16
 8006006:	fa13 f38c 	uxtah	r3, r3, ip
 800600a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800600e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006012:	b29b      	uxth	r3, r3
 8006014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006018:	45c1      	cmp	r9, r8
 800601a:	f841 3b04 	str.w	r3, [r1], #4
 800601e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006022:	d2e9      	bcs.n	8005ff8 <quorem+0xac>
 8006024:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006028:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800602c:	b922      	cbnz	r2, 8006038 <quorem+0xec>
 800602e:	3b04      	subs	r3, #4
 8006030:	429d      	cmp	r5, r3
 8006032:	461a      	mov	r2, r3
 8006034:	d30a      	bcc.n	800604c <quorem+0x100>
 8006036:	613c      	str	r4, [r7, #16]
 8006038:	4630      	mov	r0, r6
 800603a:	b003      	add	sp, #12
 800603c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	3b04      	subs	r3, #4
 8006044:	2a00      	cmp	r2, #0
 8006046:	d1ce      	bne.n	8005fe6 <quorem+0x9a>
 8006048:	3c01      	subs	r4, #1
 800604a:	e7c9      	b.n	8005fe0 <quorem+0x94>
 800604c:	6812      	ldr	r2, [r2, #0]
 800604e:	3b04      	subs	r3, #4
 8006050:	2a00      	cmp	r2, #0
 8006052:	d1f0      	bne.n	8006036 <quorem+0xea>
 8006054:	3c01      	subs	r4, #1
 8006056:	e7eb      	b.n	8006030 <quorem+0xe4>
 8006058:	2000      	movs	r0, #0
 800605a:	e7ee      	b.n	800603a <quorem+0xee>
 800605c:	0000      	movs	r0, r0
	...

08006060 <_dtoa_r>:
 8006060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006064:	ed2d 8b04 	vpush	{d8-d9}
 8006068:	69c5      	ldr	r5, [r0, #28]
 800606a:	b093      	sub	sp, #76	; 0x4c
 800606c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006070:	ec57 6b10 	vmov	r6, r7, d0
 8006074:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006078:	9107      	str	r1, [sp, #28]
 800607a:	4604      	mov	r4, r0
 800607c:	920a      	str	r2, [sp, #40]	; 0x28
 800607e:	930d      	str	r3, [sp, #52]	; 0x34
 8006080:	b975      	cbnz	r5, 80060a0 <_dtoa_r+0x40>
 8006082:	2010      	movs	r0, #16
 8006084:	f000 ff22 	bl	8006ecc <malloc>
 8006088:	4602      	mov	r2, r0
 800608a:	61e0      	str	r0, [r4, #28]
 800608c:	b920      	cbnz	r0, 8006098 <_dtoa_r+0x38>
 800608e:	4bae      	ldr	r3, [pc, #696]	; (8006348 <_dtoa_r+0x2e8>)
 8006090:	21ef      	movs	r1, #239	; 0xef
 8006092:	48ae      	ldr	r0, [pc, #696]	; (800634c <_dtoa_r+0x2ec>)
 8006094:	f001 fdb8 	bl	8007c08 <__assert_func>
 8006098:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800609c:	6005      	str	r5, [r0, #0]
 800609e:	60c5      	str	r5, [r0, #12]
 80060a0:	69e3      	ldr	r3, [r4, #28]
 80060a2:	6819      	ldr	r1, [r3, #0]
 80060a4:	b151      	cbz	r1, 80060bc <_dtoa_r+0x5c>
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	604a      	str	r2, [r1, #4]
 80060aa:	2301      	movs	r3, #1
 80060ac:	4093      	lsls	r3, r2
 80060ae:	608b      	str	r3, [r1, #8]
 80060b0:	4620      	mov	r0, r4
 80060b2:	f001 f8ad 	bl	8007210 <_Bfree>
 80060b6:	69e3      	ldr	r3, [r4, #28]
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	1e3b      	subs	r3, r7, #0
 80060be:	bfbb      	ittet	lt
 80060c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80060c4:	9303      	strlt	r3, [sp, #12]
 80060c6:	2300      	movge	r3, #0
 80060c8:	2201      	movlt	r2, #1
 80060ca:	bfac      	ite	ge
 80060cc:	f8c8 3000 	strge.w	r3, [r8]
 80060d0:	f8c8 2000 	strlt.w	r2, [r8]
 80060d4:	4b9e      	ldr	r3, [pc, #632]	; (8006350 <_dtoa_r+0x2f0>)
 80060d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80060da:	ea33 0308 	bics.w	r3, r3, r8
 80060de:	d11b      	bne.n	8006118 <_dtoa_r+0xb8>
 80060e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80060ec:	4333      	orrs	r3, r6
 80060ee:	f000 8593 	beq.w	8006c18 <_dtoa_r+0xbb8>
 80060f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060f4:	b963      	cbnz	r3, 8006110 <_dtoa_r+0xb0>
 80060f6:	4b97      	ldr	r3, [pc, #604]	; (8006354 <_dtoa_r+0x2f4>)
 80060f8:	e027      	b.n	800614a <_dtoa_r+0xea>
 80060fa:	4b97      	ldr	r3, [pc, #604]	; (8006358 <_dtoa_r+0x2f8>)
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	3308      	adds	r3, #8
 8006100:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	9800      	ldr	r0, [sp, #0]
 8006106:	b013      	add	sp, #76	; 0x4c
 8006108:	ecbd 8b04 	vpop	{d8-d9}
 800610c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006110:	4b90      	ldr	r3, [pc, #576]	; (8006354 <_dtoa_r+0x2f4>)
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	3303      	adds	r3, #3
 8006116:	e7f3      	b.n	8006100 <_dtoa_r+0xa0>
 8006118:	ed9d 7b02 	vldr	d7, [sp, #8]
 800611c:	2200      	movs	r2, #0
 800611e:	ec51 0b17 	vmov	r0, r1, d7
 8006122:	eeb0 8a47 	vmov.f32	s16, s14
 8006126:	eef0 8a67 	vmov.f32	s17, s15
 800612a:	2300      	movs	r3, #0
 800612c:	f7fa fce4 	bl	8000af8 <__aeabi_dcmpeq>
 8006130:	4681      	mov	r9, r0
 8006132:	b160      	cbz	r0, 800614e <_dtoa_r+0xee>
 8006134:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006136:	2301      	movs	r3, #1
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8568 	beq.w	8006c12 <_dtoa_r+0xbb2>
 8006142:	4b86      	ldr	r3, [pc, #536]	; (800635c <_dtoa_r+0x2fc>)
 8006144:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	3b01      	subs	r3, #1
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	e7da      	b.n	8006104 <_dtoa_r+0xa4>
 800614e:	aa10      	add	r2, sp, #64	; 0x40
 8006150:	a911      	add	r1, sp, #68	; 0x44
 8006152:	4620      	mov	r0, r4
 8006154:	eeb0 0a48 	vmov.f32	s0, s16
 8006158:	eef0 0a68 	vmov.f32	s1, s17
 800615c:	f001 fb3a 	bl	80077d4 <__d2b>
 8006160:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006164:	4682      	mov	sl, r0
 8006166:	2d00      	cmp	r5, #0
 8006168:	d07f      	beq.n	800626a <_dtoa_r+0x20a>
 800616a:	ee18 3a90 	vmov	r3, s17
 800616e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006172:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006176:	ec51 0b18 	vmov	r0, r1, d8
 800617a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800617e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006182:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006186:	4619      	mov	r1, r3
 8006188:	2200      	movs	r2, #0
 800618a:	4b75      	ldr	r3, [pc, #468]	; (8006360 <_dtoa_r+0x300>)
 800618c:	f7fa f894 	bl	80002b8 <__aeabi_dsub>
 8006190:	a367      	add	r3, pc, #412	; (adr r3, 8006330 <_dtoa_r+0x2d0>)
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f7fa fa47 	bl	8000628 <__aeabi_dmul>
 800619a:	a367      	add	r3, pc, #412	; (adr r3, 8006338 <_dtoa_r+0x2d8>)
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	f7fa f88c 	bl	80002bc <__adddf3>
 80061a4:	4606      	mov	r6, r0
 80061a6:	4628      	mov	r0, r5
 80061a8:	460f      	mov	r7, r1
 80061aa:	f7fa f9d3 	bl	8000554 <__aeabi_i2d>
 80061ae:	a364      	add	r3, pc, #400	; (adr r3, 8006340 <_dtoa_r+0x2e0>)
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	f7fa fa38 	bl	8000628 <__aeabi_dmul>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4630      	mov	r0, r6
 80061be:	4639      	mov	r1, r7
 80061c0:	f7fa f87c 	bl	80002bc <__adddf3>
 80061c4:	4606      	mov	r6, r0
 80061c6:	460f      	mov	r7, r1
 80061c8:	f7fa fcde 	bl	8000b88 <__aeabi_d2iz>
 80061cc:	2200      	movs	r2, #0
 80061ce:	4683      	mov	fp, r0
 80061d0:	2300      	movs	r3, #0
 80061d2:	4630      	mov	r0, r6
 80061d4:	4639      	mov	r1, r7
 80061d6:	f7fa fc99 	bl	8000b0c <__aeabi_dcmplt>
 80061da:	b148      	cbz	r0, 80061f0 <_dtoa_r+0x190>
 80061dc:	4658      	mov	r0, fp
 80061de:	f7fa f9b9 	bl	8000554 <__aeabi_i2d>
 80061e2:	4632      	mov	r2, r6
 80061e4:	463b      	mov	r3, r7
 80061e6:	f7fa fc87 	bl	8000af8 <__aeabi_dcmpeq>
 80061ea:	b908      	cbnz	r0, 80061f0 <_dtoa_r+0x190>
 80061ec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80061f0:	f1bb 0f16 	cmp.w	fp, #22
 80061f4:	d857      	bhi.n	80062a6 <_dtoa_r+0x246>
 80061f6:	4b5b      	ldr	r3, [pc, #364]	; (8006364 <_dtoa_r+0x304>)
 80061f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	ec51 0b18 	vmov	r0, r1, d8
 8006204:	f7fa fc82 	bl	8000b0c <__aeabi_dcmplt>
 8006208:	2800      	cmp	r0, #0
 800620a:	d04e      	beq.n	80062aa <_dtoa_r+0x24a>
 800620c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006210:	2300      	movs	r3, #0
 8006212:	930c      	str	r3, [sp, #48]	; 0x30
 8006214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006216:	1b5b      	subs	r3, r3, r5
 8006218:	1e5a      	subs	r2, r3, #1
 800621a:	bf45      	ittet	mi
 800621c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006220:	9305      	strmi	r3, [sp, #20]
 8006222:	2300      	movpl	r3, #0
 8006224:	2300      	movmi	r3, #0
 8006226:	9206      	str	r2, [sp, #24]
 8006228:	bf54      	ite	pl
 800622a:	9305      	strpl	r3, [sp, #20]
 800622c:	9306      	strmi	r3, [sp, #24]
 800622e:	f1bb 0f00 	cmp.w	fp, #0
 8006232:	db3c      	blt.n	80062ae <_dtoa_r+0x24e>
 8006234:	9b06      	ldr	r3, [sp, #24]
 8006236:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800623a:	445b      	add	r3, fp
 800623c:	9306      	str	r3, [sp, #24]
 800623e:	2300      	movs	r3, #0
 8006240:	9308      	str	r3, [sp, #32]
 8006242:	9b07      	ldr	r3, [sp, #28]
 8006244:	2b09      	cmp	r3, #9
 8006246:	d868      	bhi.n	800631a <_dtoa_r+0x2ba>
 8006248:	2b05      	cmp	r3, #5
 800624a:	bfc4      	itt	gt
 800624c:	3b04      	subgt	r3, #4
 800624e:	9307      	strgt	r3, [sp, #28]
 8006250:	9b07      	ldr	r3, [sp, #28]
 8006252:	f1a3 0302 	sub.w	r3, r3, #2
 8006256:	bfcc      	ite	gt
 8006258:	2500      	movgt	r5, #0
 800625a:	2501      	movle	r5, #1
 800625c:	2b03      	cmp	r3, #3
 800625e:	f200 8085 	bhi.w	800636c <_dtoa_r+0x30c>
 8006262:	e8df f003 	tbb	[pc, r3]
 8006266:	3b2e      	.short	0x3b2e
 8006268:	5839      	.short	0x5839
 800626a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800626e:	441d      	add	r5, r3
 8006270:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006274:	2b20      	cmp	r3, #32
 8006276:	bfc1      	itttt	gt
 8006278:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800627c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006280:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006284:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006288:	bfd6      	itet	le
 800628a:	f1c3 0320 	rsble	r3, r3, #32
 800628e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006292:	fa06 f003 	lslle.w	r0, r6, r3
 8006296:	f7fa f94d 	bl	8000534 <__aeabi_ui2d>
 800629a:	2201      	movs	r2, #1
 800629c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80062a0:	3d01      	subs	r5, #1
 80062a2:	920e      	str	r2, [sp, #56]	; 0x38
 80062a4:	e76f      	b.n	8006186 <_dtoa_r+0x126>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e7b3      	b.n	8006212 <_dtoa_r+0x1b2>
 80062aa:	900c      	str	r0, [sp, #48]	; 0x30
 80062ac:	e7b2      	b.n	8006214 <_dtoa_r+0x1b4>
 80062ae:	9b05      	ldr	r3, [sp, #20]
 80062b0:	eba3 030b 	sub.w	r3, r3, fp
 80062b4:	9305      	str	r3, [sp, #20]
 80062b6:	f1cb 0300 	rsb	r3, fp, #0
 80062ba:	9308      	str	r3, [sp, #32]
 80062bc:	2300      	movs	r3, #0
 80062be:	930b      	str	r3, [sp, #44]	; 0x2c
 80062c0:	e7bf      	b.n	8006242 <_dtoa_r+0x1e2>
 80062c2:	2300      	movs	r3, #0
 80062c4:	9309      	str	r3, [sp, #36]	; 0x24
 80062c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	dc52      	bgt.n	8006372 <_dtoa_r+0x312>
 80062cc:	2301      	movs	r3, #1
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	9304      	str	r3, [sp, #16]
 80062d2:	461a      	mov	r2, r3
 80062d4:	920a      	str	r2, [sp, #40]	; 0x28
 80062d6:	e00b      	b.n	80062f0 <_dtoa_r+0x290>
 80062d8:	2301      	movs	r3, #1
 80062da:	e7f3      	b.n	80062c4 <_dtoa_r+0x264>
 80062dc:	2300      	movs	r3, #0
 80062de:	9309      	str	r3, [sp, #36]	; 0x24
 80062e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e2:	445b      	add	r3, fp
 80062e4:	9301      	str	r3, [sp, #4]
 80062e6:	3301      	adds	r3, #1
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	9304      	str	r3, [sp, #16]
 80062ec:	bfb8      	it	lt
 80062ee:	2301      	movlt	r3, #1
 80062f0:	69e0      	ldr	r0, [r4, #28]
 80062f2:	2100      	movs	r1, #0
 80062f4:	2204      	movs	r2, #4
 80062f6:	f102 0614 	add.w	r6, r2, #20
 80062fa:	429e      	cmp	r6, r3
 80062fc:	d93d      	bls.n	800637a <_dtoa_r+0x31a>
 80062fe:	6041      	str	r1, [r0, #4]
 8006300:	4620      	mov	r0, r4
 8006302:	f000 ff45 	bl	8007190 <_Balloc>
 8006306:	9000      	str	r0, [sp, #0]
 8006308:	2800      	cmp	r0, #0
 800630a:	d139      	bne.n	8006380 <_dtoa_r+0x320>
 800630c:	4b16      	ldr	r3, [pc, #88]	; (8006368 <_dtoa_r+0x308>)
 800630e:	4602      	mov	r2, r0
 8006310:	f240 11af 	movw	r1, #431	; 0x1af
 8006314:	e6bd      	b.n	8006092 <_dtoa_r+0x32>
 8006316:	2301      	movs	r3, #1
 8006318:	e7e1      	b.n	80062de <_dtoa_r+0x27e>
 800631a:	2501      	movs	r5, #1
 800631c:	2300      	movs	r3, #0
 800631e:	9307      	str	r3, [sp, #28]
 8006320:	9509      	str	r5, [sp, #36]	; 0x24
 8006322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	9304      	str	r3, [sp, #16]
 800632a:	2200      	movs	r2, #0
 800632c:	2312      	movs	r3, #18
 800632e:	e7d1      	b.n	80062d4 <_dtoa_r+0x274>
 8006330:	636f4361 	.word	0x636f4361
 8006334:	3fd287a7 	.word	0x3fd287a7
 8006338:	8b60c8b3 	.word	0x8b60c8b3
 800633c:	3fc68a28 	.word	0x3fc68a28
 8006340:	509f79fb 	.word	0x509f79fb
 8006344:	3fd34413 	.word	0x3fd34413
 8006348:	08007ef1 	.word	0x08007ef1
 800634c:	08007f08 	.word	0x08007f08
 8006350:	7ff00000 	.word	0x7ff00000
 8006354:	08007eed 	.word	0x08007eed
 8006358:	08007ee4 	.word	0x08007ee4
 800635c:	08007ec1 	.word	0x08007ec1
 8006360:	3ff80000 	.word	0x3ff80000
 8006364:	08008008 	.word	0x08008008
 8006368:	08007f60 	.word	0x08007f60
 800636c:	2301      	movs	r3, #1
 800636e:	9309      	str	r3, [sp, #36]	; 0x24
 8006370:	e7d7      	b.n	8006322 <_dtoa_r+0x2c2>
 8006372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006374:	9301      	str	r3, [sp, #4]
 8006376:	9304      	str	r3, [sp, #16]
 8006378:	e7ba      	b.n	80062f0 <_dtoa_r+0x290>
 800637a:	3101      	adds	r1, #1
 800637c:	0052      	lsls	r2, r2, #1
 800637e:	e7ba      	b.n	80062f6 <_dtoa_r+0x296>
 8006380:	69e3      	ldr	r3, [r4, #28]
 8006382:	9a00      	ldr	r2, [sp, #0]
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	9b04      	ldr	r3, [sp, #16]
 8006388:	2b0e      	cmp	r3, #14
 800638a:	f200 80a8 	bhi.w	80064de <_dtoa_r+0x47e>
 800638e:	2d00      	cmp	r5, #0
 8006390:	f000 80a5 	beq.w	80064de <_dtoa_r+0x47e>
 8006394:	f1bb 0f00 	cmp.w	fp, #0
 8006398:	dd38      	ble.n	800640c <_dtoa_r+0x3ac>
 800639a:	4bc0      	ldr	r3, [pc, #768]	; (800669c <_dtoa_r+0x63c>)
 800639c:	f00b 020f 	and.w	r2, fp, #15
 80063a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80063a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80063ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 80063b0:	d019      	beq.n	80063e6 <_dtoa_r+0x386>
 80063b2:	4bbb      	ldr	r3, [pc, #748]	; (80066a0 <_dtoa_r+0x640>)
 80063b4:	ec51 0b18 	vmov	r0, r1, d8
 80063b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063bc:	f7fa fa5e 	bl	800087c <__aeabi_ddiv>
 80063c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063c4:	f008 080f 	and.w	r8, r8, #15
 80063c8:	2503      	movs	r5, #3
 80063ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80066a0 <_dtoa_r+0x640>
 80063ce:	f1b8 0f00 	cmp.w	r8, #0
 80063d2:	d10a      	bne.n	80063ea <_dtoa_r+0x38a>
 80063d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063d8:	4632      	mov	r2, r6
 80063da:	463b      	mov	r3, r7
 80063dc:	f7fa fa4e 	bl	800087c <__aeabi_ddiv>
 80063e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063e4:	e02b      	b.n	800643e <_dtoa_r+0x3de>
 80063e6:	2502      	movs	r5, #2
 80063e8:	e7ef      	b.n	80063ca <_dtoa_r+0x36a>
 80063ea:	f018 0f01 	tst.w	r8, #1
 80063ee:	d008      	beq.n	8006402 <_dtoa_r+0x3a2>
 80063f0:	4630      	mov	r0, r6
 80063f2:	4639      	mov	r1, r7
 80063f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80063f8:	f7fa f916 	bl	8000628 <__aeabi_dmul>
 80063fc:	3501      	adds	r5, #1
 80063fe:	4606      	mov	r6, r0
 8006400:	460f      	mov	r7, r1
 8006402:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006406:	f109 0908 	add.w	r9, r9, #8
 800640a:	e7e0      	b.n	80063ce <_dtoa_r+0x36e>
 800640c:	f000 809f 	beq.w	800654e <_dtoa_r+0x4ee>
 8006410:	f1cb 0600 	rsb	r6, fp, #0
 8006414:	4ba1      	ldr	r3, [pc, #644]	; (800669c <_dtoa_r+0x63c>)
 8006416:	4fa2      	ldr	r7, [pc, #648]	; (80066a0 <_dtoa_r+0x640>)
 8006418:	f006 020f 	and.w	r2, r6, #15
 800641c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	ec51 0b18 	vmov	r0, r1, d8
 8006428:	f7fa f8fe 	bl	8000628 <__aeabi_dmul>
 800642c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006430:	1136      	asrs	r6, r6, #4
 8006432:	2300      	movs	r3, #0
 8006434:	2502      	movs	r5, #2
 8006436:	2e00      	cmp	r6, #0
 8006438:	d17e      	bne.n	8006538 <_dtoa_r+0x4d8>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1d0      	bne.n	80063e0 <_dtoa_r+0x380>
 800643e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006440:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 8084 	beq.w	8006552 <_dtoa_r+0x4f2>
 800644a:	4b96      	ldr	r3, [pc, #600]	; (80066a4 <_dtoa_r+0x644>)
 800644c:	2200      	movs	r2, #0
 800644e:	4640      	mov	r0, r8
 8006450:	4649      	mov	r1, r9
 8006452:	f7fa fb5b 	bl	8000b0c <__aeabi_dcmplt>
 8006456:	2800      	cmp	r0, #0
 8006458:	d07b      	beq.n	8006552 <_dtoa_r+0x4f2>
 800645a:	9b04      	ldr	r3, [sp, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d078      	beq.n	8006552 <_dtoa_r+0x4f2>
 8006460:	9b01      	ldr	r3, [sp, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	dd39      	ble.n	80064da <_dtoa_r+0x47a>
 8006466:	4b90      	ldr	r3, [pc, #576]	; (80066a8 <_dtoa_r+0x648>)
 8006468:	2200      	movs	r2, #0
 800646a:	4640      	mov	r0, r8
 800646c:	4649      	mov	r1, r9
 800646e:	f7fa f8db 	bl	8000628 <__aeabi_dmul>
 8006472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006476:	9e01      	ldr	r6, [sp, #4]
 8006478:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800647c:	3501      	adds	r5, #1
 800647e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006482:	4628      	mov	r0, r5
 8006484:	f7fa f866 	bl	8000554 <__aeabi_i2d>
 8006488:	4642      	mov	r2, r8
 800648a:	464b      	mov	r3, r9
 800648c:	f7fa f8cc 	bl	8000628 <__aeabi_dmul>
 8006490:	4b86      	ldr	r3, [pc, #536]	; (80066ac <_dtoa_r+0x64c>)
 8006492:	2200      	movs	r2, #0
 8006494:	f7f9 ff12 	bl	80002bc <__adddf3>
 8006498:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800649c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a0:	9303      	str	r3, [sp, #12]
 80064a2:	2e00      	cmp	r6, #0
 80064a4:	d158      	bne.n	8006558 <_dtoa_r+0x4f8>
 80064a6:	4b82      	ldr	r3, [pc, #520]	; (80066b0 <_dtoa_r+0x650>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	4640      	mov	r0, r8
 80064ac:	4649      	mov	r1, r9
 80064ae:	f7f9 ff03 	bl	80002b8 <__aeabi_dsub>
 80064b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064b6:	4680      	mov	r8, r0
 80064b8:	4689      	mov	r9, r1
 80064ba:	f7fa fb45 	bl	8000b48 <__aeabi_dcmpgt>
 80064be:	2800      	cmp	r0, #0
 80064c0:	f040 8296 	bne.w	80069f0 <_dtoa_r+0x990>
 80064c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80064c8:	4640      	mov	r0, r8
 80064ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064ce:	4649      	mov	r1, r9
 80064d0:	f7fa fb1c 	bl	8000b0c <__aeabi_dcmplt>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	f040 8289 	bne.w	80069ec <_dtoa_r+0x98c>
 80064da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80064de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f2c0 814e 	blt.w	8006782 <_dtoa_r+0x722>
 80064e6:	f1bb 0f0e 	cmp.w	fp, #14
 80064ea:	f300 814a 	bgt.w	8006782 <_dtoa_r+0x722>
 80064ee:	4b6b      	ldr	r3, [pc, #428]	; (800669c <_dtoa_r+0x63c>)
 80064f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80064f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f280 80dc 	bge.w	80066b8 <_dtoa_r+0x658>
 8006500:	9b04      	ldr	r3, [sp, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f300 80d8 	bgt.w	80066b8 <_dtoa_r+0x658>
 8006508:	f040 826f 	bne.w	80069ea <_dtoa_r+0x98a>
 800650c:	4b68      	ldr	r3, [pc, #416]	; (80066b0 <_dtoa_r+0x650>)
 800650e:	2200      	movs	r2, #0
 8006510:	4640      	mov	r0, r8
 8006512:	4649      	mov	r1, r9
 8006514:	f7fa f888 	bl	8000628 <__aeabi_dmul>
 8006518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800651c:	f7fa fb0a 	bl	8000b34 <__aeabi_dcmpge>
 8006520:	9e04      	ldr	r6, [sp, #16]
 8006522:	4637      	mov	r7, r6
 8006524:	2800      	cmp	r0, #0
 8006526:	f040 8245 	bne.w	80069b4 <_dtoa_r+0x954>
 800652a:	9d00      	ldr	r5, [sp, #0]
 800652c:	2331      	movs	r3, #49	; 0x31
 800652e:	f805 3b01 	strb.w	r3, [r5], #1
 8006532:	f10b 0b01 	add.w	fp, fp, #1
 8006536:	e241      	b.n	80069bc <_dtoa_r+0x95c>
 8006538:	07f2      	lsls	r2, r6, #31
 800653a:	d505      	bpl.n	8006548 <_dtoa_r+0x4e8>
 800653c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006540:	f7fa f872 	bl	8000628 <__aeabi_dmul>
 8006544:	3501      	adds	r5, #1
 8006546:	2301      	movs	r3, #1
 8006548:	1076      	asrs	r6, r6, #1
 800654a:	3708      	adds	r7, #8
 800654c:	e773      	b.n	8006436 <_dtoa_r+0x3d6>
 800654e:	2502      	movs	r5, #2
 8006550:	e775      	b.n	800643e <_dtoa_r+0x3de>
 8006552:	9e04      	ldr	r6, [sp, #16]
 8006554:	465f      	mov	r7, fp
 8006556:	e792      	b.n	800647e <_dtoa_r+0x41e>
 8006558:	9900      	ldr	r1, [sp, #0]
 800655a:	4b50      	ldr	r3, [pc, #320]	; (800669c <_dtoa_r+0x63c>)
 800655c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006560:	4431      	add	r1, r6
 8006562:	9102      	str	r1, [sp, #8]
 8006564:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006566:	eeb0 9a47 	vmov.f32	s18, s14
 800656a:	eef0 9a67 	vmov.f32	s19, s15
 800656e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006572:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006576:	2900      	cmp	r1, #0
 8006578:	d044      	beq.n	8006604 <_dtoa_r+0x5a4>
 800657a:	494e      	ldr	r1, [pc, #312]	; (80066b4 <_dtoa_r+0x654>)
 800657c:	2000      	movs	r0, #0
 800657e:	f7fa f97d 	bl	800087c <__aeabi_ddiv>
 8006582:	ec53 2b19 	vmov	r2, r3, d9
 8006586:	f7f9 fe97 	bl	80002b8 <__aeabi_dsub>
 800658a:	9d00      	ldr	r5, [sp, #0]
 800658c:	ec41 0b19 	vmov	d9, r0, r1
 8006590:	4649      	mov	r1, r9
 8006592:	4640      	mov	r0, r8
 8006594:	f7fa faf8 	bl	8000b88 <__aeabi_d2iz>
 8006598:	4606      	mov	r6, r0
 800659a:	f7f9 ffdb 	bl	8000554 <__aeabi_i2d>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4640      	mov	r0, r8
 80065a4:	4649      	mov	r1, r9
 80065a6:	f7f9 fe87 	bl	80002b8 <__aeabi_dsub>
 80065aa:	3630      	adds	r6, #48	; 0x30
 80065ac:	f805 6b01 	strb.w	r6, [r5], #1
 80065b0:	ec53 2b19 	vmov	r2, r3, d9
 80065b4:	4680      	mov	r8, r0
 80065b6:	4689      	mov	r9, r1
 80065b8:	f7fa faa8 	bl	8000b0c <__aeabi_dcmplt>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d164      	bne.n	800668a <_dtoa_r+0x62a>
 80065c0:	4642      	mov	r2, r8
 80065c2:	464b      	mov	r3, r9
 80065c4:	4937      	ldr	r1, [pc, #220]	; (80066a4 <_dtoa_r+0x644>)
 80065c6:	2000      	movs	r0, #0
 80065c8:	f7f9 fe76 	bl	80002b8 <__aeabi_dsub>
 80065cc:	ec53 2b19 	vmov	r2, r3, d9
 80065d0:	f7fa fa9c 	bl	8000b0c <__aeabi_dcmplt>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f040 80b6 	bne.w	8006746 <_dtoa_r+0x6e6>
 80065da:	9b02      	ldr	r3, [sp, #8]
 80065dc:	429d      	cmp	r5, r3
 80065de:	f43f af7c 	beq.w	80064da <_dtoa_r+0x47a>
 80065e2:	4b31      	ldr	r3, [pc, #196]	; (80066a8 <_dtoa_r+0x648>)
 80065e4:	ec51 0b19 	vmov	r0, r1, d9
 80065e8:	2200      	movs	r2, #0
 80065ea:	f7fa f81d 	bl	8000628 <__aeabi_dmul>
 80065ee:	4b2e      	ldr	r3, [pc, #184]	; (80066a8 <_dtoa_r+0x648>)
 80065f0:	ec41 0b19 	vmov	d9, r0, r1
 80065f4:	2200      	movs	r2, #0
 80065f6:	4640      	mov	r0, r8
 80065f8:	4649      	mov	r1, r9
 80065fa:	f7fa f815 	bl	8000628 <__aeabi_dmul>
 80065fe:	4680      	mov	r8, r0
 8006600:	4689      	mov	r9, r1
 8006602:	e7c5      	b.n	8006590 <_dtoa_r+0x530>
 8006604:	ec51 0b17 	vmov	r0, r1, d7
 8006608:	f7fa f80e 	bl	8000628 <__aeabi_dmul>
 800660c:	9b02      	ldr	r3, [sp, #8]
 800660e:	9d00      	ldr	r5, [sp, #0]
 8006610:	930f      	str	r3, [sp, #60]	; 0x3c
 8006612:	ec41 0b19 	vmov	d9, r0, r1
 8006616:	4649      	mov	r1, r9
 8006618:	4640      	mov	r0, r8
 800661a:	f7fa fab5 	bl	8000b88 <__aeabi_d2iz>
 800661e:	4606      	mov	r6, r0
 8006620:	f7f9 ff98 	bl	8000554 <__aeabi_i2d>
 8006624:	3630      	adds	r6, #48	; 0x30
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4640      	mov	r0, r8
 800662c:	4649      	mov	r1, r9
 800662e:	f7f9 fe43 	bl	80002b8 <__aeabi_dsub>
 8006632:	f805 6b01 	strb.w	r6, [r5], #1
 8006636:	9b02      	ldr	r3, [sp, #8]
 8006638:	429d      	cmp	r5, r3
 800663a:	4680      	mov	r8, r0
 800663c:	4689      	mov	r9, r1
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	d124      	bne.n	800668e <_dtoa_r+0x62e>
 8006644:	4b1b      	ldr	r3, [pc, #108]	; (80066b4 <_dtoa_r+0x654>)
 8006646:	ec51 0b19 	vmov	r0, r1, d9
 800664a:	f7f9 fe37 	bl	80002bc <__adddf3>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	4640      	mov	r0, r8
 8006654:	4649      	mov	r1, r9
 8006656:	f7fa fa77 	bl	8000b48 <__aeabi_dcmpgt>
 800665a:	2800      	cmp	r0, #0
 800665c:	d173      	bne.n	8006746 <_dtoa_r+0x6e6>
 800665e:	ec53 2b19 	vmov	r2, r3, d9
 8006662:	4914      	ldr	r1, [pc, #80]	; (80066b4 <_dtoa_r+0x654>)
 8006664:	2000      	movs	r0, #0
 8006666:	f7f9 fe27 	bl	80002b8 <__aeabi_dsub>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	4640      	mov	r0, r8
 8006670:	4649      	mov	r1, r9
 8006672:	f7fa fa4b 	bl	8000b0c <__aeabi_dcmplt>
 8006676:	2800      	cmp	r0, #0
 8006678:	f43f af2f 	beq.w	80064da <_dtoa_r+0x47a>
 800667c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800667e:	1e6b      	subs	r3, r5, #1
 8006680:	930f      	str	r3, [sp, #60]	; 0x3c
 8006682:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006686:	2b30      	cmp	r3, #48	; 0x30
 8006688:	d0f8      	beq.n	800667c <_dtoa_r+0x61c>
 800668a:	46bb      	mov	fp, r7
 800668c:	e04a      	b.n	8006724 <_dtoa_r+0x6c4>
 800668e:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <_dtoa_r+0x648>)
 8006690:	f7f9 ffca 	bl	8000628 <__aeabi_dmul>
 8006694:	4680      	mov	r8, r0
 8006696:	4689      	mov	r9, r1
 8006698:	e7bd      	b.n	8006616 <_dtoa_r+0x5b6>
 800669a:	bf00      	nop
 800669c:	08008008 	.word	0x08008008
 80066a0:	08007fe0 	.word	0x08007fe0
 80066a4:	3ff00000 	.word	0x3ff00000
 80066a8:	40240000 	.word	0x40240000
 80066ac:	401c0000 	.word	0x401c0000
 80066b0:	40140000 	.word	0x40140000
 80066b4:	3fe00000 	.word	0x3fe00000
 80066b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066bc:	9d00      	ldr	r5, [sp, #0]
 80066be:	4642      	mov	r2, r8
 80066c0:	464b      	mov	r3, r9
 80066c2:	4630      	mov	r0, r6
 80066c4:	4639      	mov	r1, r7
 80066c6:	f7fa f8d9 	bl	800087c <__aeabi_ddiv>
 80066ca:	f7fa fa5d 	bl	8000b88 <__aeabi_d2iz>
 80066ce:	9001      	str	r0, [sp, #4]
 80066d0:	f7f9 ff40 	bl	8000554 <__aeabi_i2d>
 80066d4:	4642      	mov	r2, r8
 80066d6:	464b      	mov	r3, r9
 80066d8:	f7f9 ffa6 	bl	8000628 <__aeabi_dmul>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4630      	mov	r0, r6
 80066e2:	4639      	mov	r1, r7
 80066e4:	f7f9 fde8 	bl	80002b8 <__aeabi_dsub>
 80066e8:	9e01      	ldr	r6, [sp, #4]
 80066ea:	9f04      	ldr	r7, [sp, #16]
 80066ec:	3630      	adds	r6, #48	; 0x30
 80066ee:	f805 6b01 	strb.w	r6, [r5], #1
 80066f2:	9e00      	ldr	r6, [sp, #0]
 80066f4:	1bae      	subs	r6, r5, r6
 80066f6:	42b7      	cmp	r7, r6
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	d134      	bne.n	8006768 <_dtoa_r+0x708>
 80066fe:	f7f9 fddd 	bl	80002bc <__adddf3>
 8006702:	4642      	mov	r2, r8
 8006704:	464b      	mov	r3, r9
 8006706:	4606      	mov	r6, r0
 8006708:	460f      	mov	r7, r1
 800670a:	f7fa fa1d 	bl	8000b48 <__aeabi_dcmpgt>
 800670e:	b9c8      	cbnz	r0, 8006744 <_dtoa_r+0x6e4>
 8006710:	4642      	mov	r2, r8
 8006712:	464b      	mov	r3, r9
 8006714:	4630      	mov	r0, r6
 8006716:	4639      	mov	r1, r7
 8006718:	f7fa f9ee 	bl	8000af8 <__aeabi_dcmpeq>
 800671c:	b110      	cbz	r0, 8006724 <_dtoa_r+0x6c4>
 800671e:	9b01      	ldr	r3, [sp, #4]
 8006720:	07db      	lsls	r3, r3, #31
 8006722:	d40f      	bmi.n	8006744 <_dtoa_r+0x6e4>
 8006724:	4651      	mov	r1, sl
 8006726:	4620      	mov	r0, r4
 8006728:	f000 fd72 	bl	8007210 <_Bfree>
 800672c:	2300      	movs	r3, #0
 800672e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006730:	702b      	strb	r3, [r5, #0]
 8006732:	f10b 0301 	add.w	r3, fp, #1
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800673a:	2b00      	cmp	r3, #0
 800673c:	f43f ace2 	beq.w	8006104 <_dtoa_r+0xa4>
 8006740:	601d      	str	r5, [r3, #0]
 8006742:	e4df      	b.n	8006104 <_dtoa_r+0xa4>
 8006744:	465f      	mov	r7, fp
 8006746:	462b      	mov	r3, r5
 8006748:	461d      	mov	r5, r3
 800674a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800674e:	2a39      	cmp	r2, #57	; 0x39
 8006750:	d106      	bne.n	8006760 <_dtoa_r+0x700>
 8006752:	9a00      	ldr	r2, [sp, #0]
 8006754:	429a      	cmp	r2, r3
 8006756:	d1f7      	bne.n	8006748 <_dtoa_r+0x6e8>
 8006758:	9900      	ldr	r1, [sp, #0]
 800675a:	2230      	movs	r2, #48	; 0x30
 800675c:	3701      	adds	r7, #1
 800675e:	700a      	strb	r2, [r1, #0]
 8006760:	781a      	ldrb	r2, [r3, #0]
 8006762:	3201      	adds	r2, #1
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	e790      	b.n	800668a <_dtoa_r+0x62a>
 8006768:	4ba3      	ldr	r3, [pc, #652]	; (80069f8 <_dtoa_r+0x998>)
 800676a:	2200      	movs	r2, #0
 800676c:	f7f9 ff5c 	bl	8000628 <__aeabi_dmul>
 8006770:	2200      	movs	r2, #0
 8006772:	2300      	movs	r3, #0
 8006774:	4606      	mov	r6, r0
 8006776:	460f      	mov	r7, r1
 8006778:	f7fa f9be 	bl	8000af8 <__aeabi_dcmpeq>
 800677c:	2800      	cmp	r0, #0
 800677e:	d09e      	beq.n	80066be <_dtoa_r+0x65e>
 8006780:	e7d0      	b.n	8006724 <_dtoa_r+0x6c4>
 8006782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006784:	2a00      	cmp	r2, #0
 8006786:	f000 80ca 	beq.w	800691e <_dtoa_r+0x8be>
 800678a:	9a07      	ldr	r2, [sp, #28]
 800678c:	2a01      	cmp	r2, #1
 800678e:	f300 80ad 	bgt.w	80068ec <_dtoa_r+0x88c>
 8006792:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006794:	2a00      	cmp	r2, #0
 8006796:	f000 80a5 	beq.w	80068e4 <_dtoa_r+0x884>
 800679a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800679e:	9e08      	ldr	r6, [sp, #32]
 80067a0:	9d05      	ldr	r5, [sp, #20]
 80067a2:	9a05      	ldr	r2, [sp, #20]
 80067a4:	441a      	add	r2, r3
 80067a6:	9205      	str	r2, [sp, #20]
 80067a8:	9a06      	ldr	r2, [sp, #24]
 80067aa:	2101      	movs	r1, #1
 80067ac:	441a      	add	r2, r3
 80067ae:	4620      	mov	r0, r4
 80067b0:	9206      	str	r2, [sp, #24]
 80067b2:	f000 fde3 	bl	800737c <__i2b>
 80067b6:	4607      	mov	r7, r0
 80067b8:	b165      	cbz	r5, 80067d4 <_dtoa_r+0x774>
 80067ba:	9b06      	ldr	r3, [sp, #24]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	dd09      	ble.n	80067d4 <_dtoa_r+0x774>
 80067c0:	42ab      	cmp	r3, r5
 80067c2:	9a05      	ldr	r2, [sp, #20]
 80067c4:	bfa8      	it	ge
 80067c6:	462b      	movge	r3, r5
 80067c8:	1ad2      	subs	r2, r2, r3
 80067ca:	9205      	str	r2, [sp, #20]
 80067cc:	9a06      	ldr	r2, [sp, #24]
 80067ce:	1aed      	subs	r5, r5, r3
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	9306      	str	r3, [sp, #24]
 80067d4:	9b08      	ldr	r3, [sp, #32]
 80067d6:	b1f3      	cbz	r3, 8006816 <_dtoa_r+0x7b6>
 80067d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 80a3 	beq.w	8006926 <_dtoa_r+0x8c6>
 80067e0:	2e00      	cmp	r6, #0
 80067e2:	dd10      	ble.n	8006806 <_dtoa_r+0x7a6>
 80067e4:	4639      	mov	r1, r7
 80067e6:	4632      	mov	r2, r6
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 fe87 	bl	80074fc <__pow5mult>
 80067ee:	4652      	mov	r2, sl
 80067f0:	4601      	mov	r1, r0
 80067f2:	4607      	mov	r7, r0
 80067f4:	4620      	mov	r0, r4
 80067f6:	f000 fdd7 	bl	80073a8 <__multiply>
 80067fa:	4651      	mov	r1, sl
 80067fc:	4680      	mov	r8, r0
 80067fe:	4620      	mov	r0, r4
 8006800:	f000 fd06 	bl	8007210 <_Bfree>
 8006804:	46c2      	mov	sl, r8
 8006806:	9b08      	ldr	r3, [sp, #32]
 8006808:	1b9a      	subs	r2, r3, r6
 800680a:	d004      	beq.n	8006816 <_dtoa_r+0x7b6>
 800680c:	4651      	mov	r1, sl
 800680e:	4620      	mov	r0, r4
 8006810:	f000 fe74 	bl	80074fc <__pow5mult>
 8006814:	4682      	mov	sl, r0
 8006816:	2101      	movs	r1, #1
 8006818:	4620      	mov	r0, r4
 800681a:	f000 fdaf 	bl	800737c <__i2b>
 800681e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006820:	2b00      	cmp	r3, #0
 8006822:	4606      	mov	r6, r0
 8006824:	f340 8081 	ble.w	800692a <_dtoa_r+0x8ca>
 8006828:	461a      	mov	r2, r3
 800682a:	4601      	mov	r1, r0
 800682c:	4620      	mov	r0, r4
 800682e:	f000 fe65 	bl	80074fc <__pow5mult>
 8006832:	9b07      	ldr	r3, [sp, #28]
 8006834:	2b01      	cmp	r3, #1
 8006836:	4606      	mov	r6, r0
 8006838:	dd7a      	ble.n	8006930 <_dtoa_r+0x8d0>
 800683a:	f04f 0800 	mov.w	r8, #0
 800683e:	6933      	ldr	r3, [r6, #16]
 8006840:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006844:	6918      	ldr	r0, [r3, #16]
 8006846:	f000 fd4b 	bl	80072e0 <__hi0bits>
 800684a:	f1c0 0020 	rsb	r0, r0, #32
 800684e:	9b06      	ldr	r3, [sp, #24]
 8006850:	4418      	add	r0, r3
 8006852:	f010 001f 	ands.w	r0, r0, #31
 8006856:	f000 8094 	beq.w	8006982 <_dtoa_r+0x922>
 800685a:	f1c0 0320 	rsb	r3, r0, #32
 800685e:	2b04      	cmp	r3, #4
 8006860:	f340 8085 	ble.w	800696e <_dtoa_r+0x90e>
 8006864:	9b05      	ldr	r3, [sp, #20]
 8006866:	f1c0 001c 	rsb	r0, r0, #28
 800686a:	4403      	add	r3, r0
 800686c:	9305      	str	r3, [sp, #20]
 800686e:	9b06      	ldr	r3, [sp, #24]
 8006870:	4403      	add	r3, r0
 8006872:	4405      	add	r5, r0
 8006874:	9306      	str	r3, [sp, #24]
 8006876:	9b05      	ldr	r3, [sp, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	dd05      	ble.n	8006888 <_dtoa_r+0x828>
 800687c:	4651      	mov	r1, sl
 800687e:	461a      	mov	r2, r3
 8006880:	4620      	mov	r0, r4
 8006882:	f000 fe95 	bl	80075b0 <__lshift>
 8006886:	4682      	mov	sl, r0
 8006888:	9b06      	ldr	r3, [sp, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	dd05      	ble.n	800689a <_dtoa_r+0x83a>
 800688e:	4631      	mov	r1, r6
 8006890:	461a      	mov	r2, r3
 8006892:	4620      	mov	r0, r4
 8006894:	f000 fe8c 	bl	80075b0 <__lshift>
 8006898:	4606      	mov	r6, r0
 800689a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800689c:	2b00      	cmp	r3, #0
 800689e:	d072      	beq.n	8006986 <_dtoa_r+0x926>
 80068a0:	4631      	mov	r1, r6
 80068a2:	4650      	mov	r0, sl
 80068a4:	f000 fef0 	bl	8007688 <__mcmp>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	da6c      	bge.n	8006986 <_dtoa_r+0x926>
 80068ac:	2300      	movs	r3, #0
 80068ae:	4651      	mov	r1, sl
 80068b0:	220a      	movs	r2, #10
 80068b2:	4620      	mov	r0, r4
 80068b4:	f000 fcce 	bl	8007254 <__multadd>
 80068b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80068be:	4682      	mov	sl, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 81b0 	beq.w	8006c26 <_dtoa_r+0xbc6>
 80068c6:	2300      	movs	r3, #0
 80068c8:	4639      	mov	r1, r7
 80068ca:	220a      	movs	r2, #10
 80068cc:	4620      	mov	r0, r4
 80068ce:	f000 fcc1 	bl	8007254 <__multadd>
 80068d2:	9b01      	ldr	r3, [sp, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	4607      	mov	r7, r0
 80068d8:	f300 8096 	bgt.w	8006a08 <_dtoa_r+0x9a8>
 80068dc:	9b07      	ldr	r3, [sp, #28]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	dc59      	bgt.n	8006996 <_dtoa_r+0x936>
 80068e2:	e091      	b.n	8006a08 <_dtoa_r+0x9a8>
 80068e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068ea:	e758      	b.n	800679e <_dtoa_r+0x73e>
 80068ec:	9b04      	ldr	r3, [sp, #16]
 80068ee:	1e5e      	subs	r6, r3, #1
 80068f0:	9b08      	ldr	r3, [sp, #32]
 80068f2:	42b3      	cmp	r3, r6
 80068f4:	bfbf      	itttt	lt
 80068f6:	9b08      	ldrlt	r3, [sp, #32]
 80068f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80068fa:	9608      	strlt	r6, [sp, #32]
 80068fc:	1af3      	sublt	r3, r6, r3
 80068fe:	bfb4      	ite	lt
 8006900:	18d2      	addlt	r2, r2, r3
 8006902:	1b9e      	subge	r6, r3, r6
 8006904:	9b04      	ldr	r3, [sp, #16]
 8006906:	bfbc      	itt	lt
 8006908:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800690a:	2600      	movlt	r6, #0
 800690c:	2b00      	cmp	r3, #0
 800690e:	bfb7      	itett	lt
 8006910:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006914:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006918:	1a9d      	sublt	r5, r3, r2
 800691a:	2300      	movlt	r3, #0
 800691c:	e741      	b.n	80067a2 <_dtoa_r+0x742>
 800691e:	9e08      	ldr	r6, [sp, #32]
 8006920:	9d05      	ldr	r5, [sp, #20]
 8006922:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006924:	e748      	b.n	80067b8 <_dtoa_r+0x758>
 8006926:	9a08      	ldr	r2, [sp, #32]
 8006928:	e770      	b.n	800680c <_dtoa_r+0x7ac>
 800692a:	9b07      	ldr	r3, [sp, #28]
 800692c:	2b01      	cmp	r3, #1
 800692e:	dc19      	bgt.n	8006964 <_dtoa_r+0x904>
 8006930:	9b02      	ldr	r3, [sp, #8]
 8006932:	b9bb      	cbnz	r3, 8006964 <_dtoa_r+0x904>
 8006934:	9b03      	ldr	r3, [sp, #12]
 8006936:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800693a:	b99b      	cbnz	r3, 8006964 <_dtoa_r+0x904>
 800693c:	9b03      	ldr	r3, [sp, #12]
 800693e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006942:	0d1b      	lsrs	r3, r3, #20
 8006944:	051b      	lsls	r3, r3, #20
 8006946:	b183      	cbz	r3, 800696a <_dtoa_r+0x90a>
 8006948:	9b05      	ldr	r3, [sp, #20]
 800694a:	3301      	adds	r3, #1
 800694c:	9305      	str	r3, [sp, #20]
 800694e:	9b06      	ldr	r3, [sp, #24]
 8006950:	3301      	adds	r3, #1
 8006952:	9306      	str	r3, [sp, #24]
 8006954:	f04f 0801 	mov.w	r8, #1
 8006958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800695a:	2b00      	cmp	r3, #0
 800695c:	f47f af6f 	bne.w	800683e <_dtoa_r+0x7de>
 8006960:	2001      	movs	r0, #1
 8006962:	e774      	b.n	800684e <_dtoa_r+0x7ee>
 8006964:	f04f 0800 	mov.w	r8, #0
 8006968:	e7f6      	b.n	8006958 <_dtoa_r+0x8f8>
 800696a:	4698      	mov	r8, r3
 800696c:	e7f4      	b.n	8006958 <_dtoa_r+0x8f8>
 800696e:	d082      	beq.n	8006876 <_dtoa_r+0x816>
 8006970:	9a05      	ldr	r2, [sp, #20]
 8006972:	331c      	adds	r3, #28
 8006974:	441a      	add	r2, r3
 8006976:	9205      	str	r2, [sp, #20]
 8006978:	9a06      	ldr	r2, [sp, #24]
 800697a:	441a      	add	r2, r3
 800697c:	441d      	add	r5, r3
 800697e:	9206      	str	r2, [sp, #24]
 8006980:	e779      	b.n	8006876 <_dtoa_r+0x816>
 8006982:	4603      	mov	r3, r0
 8006984:	e7f4      	b.n	8006970 <_dtoa_r+0x910>
 8006986:	9b04      	ldr	r3, [sp, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	dc37      	bgt.n	80069fc <_dtoa_r+0x99c>
 800698c:	9b07      	ldr	r3, [sp, #28]
 800698e:	2b02      	cmp	r3, #2
 8006990:	dd34      	ble.n	80069fc <_dtoa_r+0x99c>
 8006992:	9b04      	ldr	r3, [sp, #16]
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	9b01      	ldr	r3, [sp, #4]
 8006998:	b963      	cbnz	r3, 80069b4 <_dtoa_r+0x954>
 800699a:	4631      	mov	r1, r6
 800699c:	2205      	movs	r2, #5
 800699e:	4620      	mov	r0, r4
 80069a0:	f000 fc58 	bl	8007254 <__multadd>
 80069a4:	4601      	mov	r1, r0
 80069a6:	4606      	mov	r6, r0
 80069a8:	4650      	mov	r0, sl
 80069aa:	f000 fe6d 	bl	8007688 <__mcmp>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	f73f adbb 	bgt.w	800652a <_dtoa_r+0x4ca>
 80069b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b6:	9d00      	ldr	r5, [sp, #0]
 80069b8:	ea6f 0b03 	mvn.w	fp, r3
 80069bc:	f04f 0800 	mov.w	r8, #0
 80069c0:	4631      	mov	r1, r6
 80069c2:	4620      	mov	r0, r4
 80069c4:	f000 fc24 	bl	8007210 <_Bfree>
 80069c8:	2f00      	cmp	r7, #0
 80069ca:	f43f aeab 	beq.w	8006724 <_dtoa_r+0x6c4>
 80069ce:	f1b8 0f00 	cmp.w	r8, #0
 80069d2:	d005      	beq.n	80069e0 <_dtoa_r+0x980>
 80069d4:	45b8      	cmp	r8, r7
 80069d6:	d003      	beq.n	80069e0 <_dtoa_r+0x980>
 80069d8:	4641      	mov	r1, r8
 80069da:	4620      	mov	r0, r4
 80069dc:	f000 fc18 	bl	8007210 <_Bfree>
 80069e0:	4639      	mov	r1, r7
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 fc14 	bl	8007210 <_Bfree>
 80069e8:	e69c      	b.n	8006724 <_dtoa_r+0x6c4>
 80069ea:	2600      	movs	r6, #0
 80069ec:	4637      	mov	r7, r6
 80069ee:	e7e1      	b.n	80069b4 <_dtoa_r+0x954>
 80069f0:	46bb      	mov	fp, r7
 80069f2:	4637      	mov	r7, r6
 80069f4:	e599      	b.n	800652a <_dtoa_r+0x4ca>
 80069f6:	bf00      	nop
 80069f8:	40240000 	.word	0x40240000
 80069fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 80c8 	beq.w	8006b94 <_dtoa_r+0xb34>
 8006a04:	9b04      	ldr	r3, [sp, #16]
 8006a06:	9301      	str	r3, [sp, #4]
 8006a08:	2d00      	cmp	r5, #0
 8006a0a:	dd05      	ble.n	8006a18 <_dtoa_r+0x9b8>
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	462a      	mov	r2, r5
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 fdcd 	bl	80075b0 <__lshift>
 8006a16:	4607      	mov	r7, r0
 8006a18:	f1b8 0f00 	cmp.w	r8, #0
 8006a1c:	d05b      	beq.n	8006ad6 <_dtoa_r+0xa76>
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	4620      	mov	r0, r4
 8006a22:	f000 fbb5 	bl	8007190 <_Balloc>
 8006a26:	4605      	mov	r5, r0
 8006a28:	b928      	cbnz	r0, 8006a36 <_dtoa_r+0x9d6>
 8006a2a:	4b83      	ldr	r3, [pc, #524]	; (8006c38 <_dtoa_r+0xbd8>)
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006a32:	f7ff bb2e 	b.w	8006092 <_dtoa_r+0x32>
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	3202      	adds	r2, #2
 8006a3a:	0092      	lsls	r2, r2, #2
 8006a3c:	f107 010c 	add.w	r1, r7, #12
 8006a40:	300c      	adds	r0, #12
 8006a42:	f001 f8d3 	bl	8007bec <memcpy>
 8006a46:	2201      	movs	r2, #1
 8006a48:	4629      	mov	r1, r5
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f000 fdb0 	bl	80075b0 <__lshift>
 8006a50:	9b00      	ldr	r3, [sp, #0]
 8006a52:	3301      	adds	r3, #1
 8006a54:	9304      	str	r3, [sp, #16]
 8006a56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	9308      	str	r3, [sp, #32]
 8006a5e:	9b02      	ldr	r3, [sp, #8]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	46b8      	mov	r8, r7
 8006a66:	9306      	str	r3, [sp, #24]
 8006a68:	4607      	mov	r7, r0
 8006a6a:	9b04      	ldr	r3, [sp, #16]
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	4650      	mov	r0, sl
 8006a72:	9301      	str	r3, [sp, #4]
 8006a74:	f7ff fa6a 	bl	8005f4c <quorem>
 8006a78:	4641      	mov	r1, r8
 8006a7a:	9002      	str	r0, [sp, #8]
 8006a7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a80:	4650      	mov	r0, sl
 8006a82:	f000 fe01 	bl	8007688 <__mcmp>
 8006a86:	463a      	mov	r2, r7
 8006a88:	9005      	str	r0, [sp, #20]
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f000 fe17 	bl	80076c0 <__mdiff>
 8006a92:	68c2      	ldr	r2, [r0, #12]
 8006a94:	4605      	mov	r5, r0
 8006a96:	bb02      	cbnz	r2, 8006ada <_dtoa_r+0xa7a>
 8006a98:	4601      	mov	r1, r0
 8006a9a:	4650      	mov	r0, sl
 8006a9c:	f000 fdf4 	bl	8007688 <__mcmp>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	9209      	str	r2, [sp, #36]	; 0x24
 8006aa8:	f000 fbb2 	bl	8007210 <_Bfree>
 8006aac:	9b07      	ldr	r3, [sp, #28]
 8006aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ab0:	9d04      	ldr	r5, [sp, #16]
 8006ab2:	ea43 0102 	orr.w	r1, r3, r2
 8006ab6:	9b06      	ldr	r3, [sp, #24]
 8006ab8:	4319      	orrs	r1, r3
 8006aba:	d110      	bne.n	8006ade <_dtoa_r+0xa7e>
 8006abc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ac0:	d029      	beq.n	8006b16 <_dtoa_r+0xab6>
 8006ac2:	9b05      	ldr	r3, [sp, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	dd02      	ble.n	8006ace <_dtoa_r+0xa6e>
 8006ac8:	9b02      	ldr	r3, [sp, #8]
 8006aca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	f883 9000 	strb.w	r9, [r3]
 8006ad4:	e774      	b.n	80069c0 <_dtoa_r+0x960>
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	e7ba      	b.n	8006a50 <_dtoa_r+0x9f0>
 8006ada:	2201      	movs	r2, #1
 8006adc:	e7e1      	b.n	8006aa2 <_dtoa_r+0xa42>
 8006ade:	9b05      	ldr	r3, [sp, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	db04      	blt.n	8006aee <_dtoa_r+0xa8e>
 8006ae4:	9907      	ldr	r1, [sp, #28]
 8006ae6:	430b      	orrs	r3, r1
 8006ae8:	9906      	ldr	r1, [sp, #24]
 8006aea:	430b      	orrs	r3, r1
 8006aec:	d120      	bne.n	8006b30 <_dtoa_r+0xad0>
 8006aee:	2a00      	cmp	r2, #0
 8006af0:	dded      	ble.n	8006ace <_dtoa_r+0xa6e>
 8006af2:	4651      	mov	r1, sl
 8006af4:	2201      	movs	r2, #1
 8006af6:	4620      	mov	r0, r4
 8006af8:	f000 fd5a 	bl	80075b0 <__lshift>
 8006afc:	4631      	mov	r1, r6
 8006afe:	4682      	mov	sl, r0
 8006b00:	f000 fdc2 	bl	8007688 <__mcmp>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	dc03      	bgt.n	8006b10 <_dtoa_r+0xab0>
 8006b08:	d1e1      	bne.n	8006ace <_dtoa_r+0xa6e>
 8006b0a:	f019 0f01 	tst.w	r9, #1
 8006b0e:	d0de      	beq.n	8006ace <_dtoa_r+0xa6e>
 8006b10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006b14:	d1d8      	bne.n	8006ac8 <_dtoa_r+0xa68>
 8006b16:	9a01      	ldr	r2, [sp, #4]
 8006b18:	2339      	movs	r3, #57	; 0x39
 8006b1a:	7013      	strb	r3, [r2, #0]
 8006b1c:	462b      	mov	r3, r5
 8006b1e:	461d      	mov	r5, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b26:	2a39      	cmp	r2, #57	; 0x39
 8006b28:	d06c      	beq.n	8006c04 <_dtoa_r+0xba4>
 8006b2a:	3201      	adds	r2, #1
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	e747      	b.n	80069c0 <_dtoa_r+0x960>
 8006b30:	2a00      	cmp	r2, #0
 8006b32:	dd07      	ble.n	8006b44 <_dtoa_r+0xae4>
 8006b34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006b38:	d0ed      	beq.n	8006b16 <_dtoa_r+0xab6>
 8006b3a:	9a01      	ldr	r2, [sp, #4]
 8006b3c:	f109 0301 	add.w	r3, r9, #1
 8006b40:	7013      	strb	r3, [r2, #0]
 8006b42:	e73d      	b.n	80069c0 <_dtoa_r+0x960>
 8006b44:	9b04      	ldr	r3, [sp, #16]
 8006b46:	9a08      	ldr	r2, [sp, #32]
 8006b48:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d043      	beq.n	8006bd8 <_dtoa_r+0xb78>
 8006b50:	4651      	mov	r1, sl
 8006b52:	2300      	movs	r3, #0
 8006b54:	220a      	movs	r2, #10
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 fb7c 	bl	8007254 <__multadd>
 8006b5c:	45b8      	cmp	r8, r7
 8006b5e:	4682      	mov	sl, r0
 8006b60:	f04f 0300 	mov.w	r3, #0
 8006b64:	f04f 020a 	mov.w	r2, #10
 8006b68:	4641      	mov	r1, r8
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	d107      	bne.n	8006b7e <_dtoa_r+0xb1e>
 8006b6e:	f000 fb71 	bl	8007254 <__multadd>
 8006b72:	4680      	mov	r8, r0
 8006b74:	4607      	mov	r7, r0
 8006b76:	9b04      	ldr	r3, [sp, #16]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	9304      	str	r3, [sp, #16]
 8006b7c:	e775      	b.n	8006a6a <_dtoa_r+0xa0a>
 8006b7e:	f000 fb69 	bl	8007254 <__multadd>
 8006b82:	4639      	mov	r1, r7
 8006b84:	4680      	mov	r8, r0
 8006b86:	2300      	movs	r3, #0
 8006b88:	220a      	movs	r2, #10
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f000 fb62 	bl	8007254 <__multadd>
 8006b90:	4607      	mov	r7, r0
 8006b92:	e7f0      	b.n	8006b76 <_dtoa_r+0xb16>
 8006b94:	9b04      	ldr	r3, [sp, #16]
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	9d00      	ldr	r5, [sp, #0]
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4650      	mov	r0, sl
 8006b9e:	f7ff f9d5 	bl	8005f4c <quorem>
 8006ba2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ba6:	9b00      	ldr	r3, [sp, #0]
 8006ba8:	f805 9b01 	strb.w	r9, [r5], #1
 8006bac:	1aea      	subs	r2, r5, r3
 8006bae:	9b01      	ldr	r3, [sp, #4]
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	dd07      	ble.n	8006bc4 <_dtoa_r+0xb64>
 8006bb4:	4651      	mov	r1, sl
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	220a      	movs	r2, #10
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 fb4a 	bl	8007254 <__multadd>
 8006bc0:	4682      	mov	sl, r0
 8006bc2:	e7ea      	b.n	8006b9a <_dtoa_r+0xb3a>
 8006bc4:	9b01      	ldr	r3, [sp, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bfc8      	it	gt
 8006bca:	461d      	movgt	r5, r3
 8006bcc:	9b00      	ldr	r3, [sp, #0]
 8006bce:	bfd8      	it	le
 8006bd0:	2501      	movle	r5, #1
 8006bd2:	441d      	add	r5, r3
 8006bd4:	f04f 0800 	mov.w	r8, #0
 8006bd8:	4651      	mov	r1, sl
 8006bda:	2201      	movs	r2, #1
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 fce7 	bl	80075b0 <__lshift>
 8006be2:	4631      	mov	r1, r6
 8006be4:	4682      	mov	sl, r0
 8006be6:	f000 fd4f 	bl	8007688 <__mcmp>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	dc96      	bgt.n	8006b1c <_dtoa_r+0xabc>
 8006bee:	d102      	bne.n	8006bf6 <_dtoa_r+0xb96>
 8006bf0:	f019 0f01 	tst.w	r9, #1
 8006bf4:	d192      	bne.n	8006b1c <_dtoa_r+0xabc>
 8006bf6:	462b      	mov	r3, r5
 8006bf8:	461d      	mov	r5, r3
 8006bfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bfe:	2a30      	cmp	r2, #48	; 0x30
 8006c00:	d0fa      	beq.n	8006bf8 <_dtoa_r+0xb98>
 8006c02:	e6dd      	b.n	80069c0 <_dtoa_r+0x960>
 8006c04:	9a00      	ldr	r2, [sp, #0]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d189      	bne.n	8006b1e <_dtoa_r+0xabe>
 8006c0a:	f10b 0b01 	add.w	fp, fp, #1
 8006c0e:	2331      	movs	r3, #49	; 0x31
 8006c10:	e796      	b.n	8006b40 <_dtoa_r+0xae0>
 8006c12:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <_dtoa_r+0xbdc>)
 8006c14:	f7ff ba99 	b.w	800614a <_dtoa_r+0xea>
 8006c18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f47f aa6d 	bne.w	80060fa <_dtoa_r+0x9a>
 8006c20:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <_dtoa_r+0xbe0>)
 8006c22:	f7ff ba92 	b.w	800614a <_dtoa_r+0xea>
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	dcb5      	bgt.n	8006b98 <_dtoa_r+0xb38>
 8006c2c:	9b07      	ldr	r3, [sp, #28]
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	f73f aeb1 	bgt.w	8006996 <_dtoa_r+0x936>
 8006c34:	e7b0      	b.n	8006b98 <_dtoa_r+0xb38>
 8006c36:	bf00      	nop
 8006c38:	08007f60 	.word	0x08007f60
 8006c3c:	08007ec0 	.word	0x08007ec0
 8006c40:	08007ee4 	.word	0x08007ee4

08006c44 <__sfputc_r>:
 8006c44:	6893      	ldr	r3, [r2, #8]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	b410      	push	{r4}
 8006c4c:	6093      	str	r3, [r2, #8]
 8006c4e:	da08      	bge.n	8006c62 <__sfputc_r+0x1e>
 8006c50:	6994      	ldr	r4, [r2, #24]
 8006c52:	42a3      	cmp	r3, r4
 8006c54:	db01      	blt.n	8006c5a <__sfputc_r+0x16>
 8006c56:	290a      	cmp	r1, #10
 8006c58:	d103      	bne.n	8006c62 <__sfputc_r+0x1e>
 8006c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c5e:	f000 be56 	b.w	800790e <__swbuf_r>
 8006c62:	6813      	ldr	r3, [r2, #0]
 8006c64:	1c58      	adds	r0, r3, #1
 8006c66:	6010      	str	r0, [r2, #0]
 8006c68:	7019      	strb	r1, [r3, #0]
 8006c6a:	4608      	mov	r0, r1
 8006c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <__sfputs_r>:
 8006c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c74:	4606      	mov	r6, r0
 8006c76:	460f      	mov	r7, r1
 8006c78:	4614      	mov	r4, r2
 8006c7a:	18d5      	adds	r5, r2, r3
 8006c7c:	42ac      	cmp	r4, r5
 8006c7e:	d101      	bne.n	8006c84 <__sfputs_r+0x12>
 8006c80:	2000      	movs	r0, #0
 8006c82:	e007      	b.n	8006c94 <__sfputs_r+0x22>
 8006c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c88:	463a      	mov	r2, r7
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f7ff ffda 	bl	8006c44 <__sfputc_r>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d1f3      	bne.n	8006c7c <__sfputs_r+0xa>
 8006c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c98 <_vfiprintf_r>:
 8006c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	460d      	mov	r5, r1
 8006c9e:	b09d      	sub	sp, #116	; 0x74
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	4698      	mov	r8, r3
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	b118      	cbz	r0, 8006cb0 <_vfiprintf_r+0x18>
 8006ca8:	6a03      	ldr	r3, [r0, #32]
 8006caa:	b90b      	cbnz	r3, 8006cb0 <_vfiprintf_r+0x18>
 8006cac:	f7ff f872 	bl	8005d94 <__sinit>
 8006cb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cb2:	07d9      	lsls	r1, r3, #31
 8006cb4:	d405      	bmi.n	8006cc2 <_vfiprintf_r+0x2a>
 8006cb6:	89ab      	ldrh	r3, [r5, #12]
 8006cb8:	059a      	lsls	r2, r3, #22
 8006cba:	d402      	bmi.n	8006cc2 <_vfiprintf_r+0x2a>
 8006cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cbe:	f7ff f943 	bl	8005f48 <__retarget_lock_acquire_recursive>
 8006cc2:	89ab      	ldrh	r3, [r5, #12]
 8006cc4:	071b      	lsls	r3, r3, #28
 8006cc6:	d501      	bpl.n	8006ccc <_vfiprintf_r+0x34>
 8006cc8:	692b      	ldr	r3, [r5, #16]
 8006cca:	b99b      	cbnz	r3, 8006cf4 <_vfiprintf_r+0x5c>
 8006ccc:	4629      	mov	r1, r5
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f000 fe5a 	bl	8007988 <__swsetup_r>
 8006cd4:	b170      	cbz	r0, 8006cf4 <_vfiprintf_r+0x5c>
 8006cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cd8:	07dc      	lsls	r4, r3, #31
 8006cda:	d504      	bpl.n	8006ce6 <_vfiprintf_r+0x4e>
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ce0:	b01d      	add	sp, #116	; 0x74
 8006ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	0598      	lsls	r0, r3, #22
 8006cea:	d4f7      	bmi.n	8006cdc <_vfiprintf_r+0x44>
 8006cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cee:	f7ff f92c 	bl	8005f4a <__retarget_lock_release_recursive>
 8006cf2:	e7f3      	b.n	8006cdc <_vfiprintf_r+0x44>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf8:	2320      	movs	r3, #32
 8006cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d02:	2330      	movs	r3, #48	; 0x30
 8006d04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006eb8 <_vfiprintf_r+0x220>
 8006d08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d0c:	f04f 0901 	mov.w	r9, #1
 8006d10:	4623      	mov	r3, r4
 8006d12:	469a      	mov	sl, r3
 8006d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d18:	b10a      	cbz	r2, 8006d1e <_vfiprintf_r+0x86>
 8006d1a:	2a25      	cmp	r2, #37	; 0x25
 8006d1c:	d1f9      	bne.n	8006d12 <_vfiprintf_r+0x7a>
 8006d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8006d22:	d00b      	beq.n	8006d3c <_vfiprintf_r+0xa4>
 8006d24:	465b      	mov	r3, fp
 8006d26:	4622      	mov	r2, r4
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f7ff ffa1 	bl	8006c72 <__sfputs_r>
 8006d30:	3001      	adds	r0, #1
 8006d32:	f000 80a9 	beq.w	8006e88 <_vfiprintf_r+0x1f0>
 8006d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d38:	445a      	add	r2, fp
 8006d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8006d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 80a1 	beq.w	8006e88 <_vfiprintf_r+0x1f0>
 8006d46:	2300      	movs	r3, #0
 8006d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d50:	f10a 0a01 	add.w	sl, sl, #1
 8006d54:	9304      	str	r3, [sp, #16]
 8006d56:	9307      	str	r3, [sp, #28]
 8006d58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d5c:	931a      	str	r3, [sp, #104]	; 0x68
 8006d5e:	4654      	mov	r4, sl
 8006d60:	2205      	movs	r2, #5
 8006d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d66:	4854      	ldr	r0, [pc, #336]	; (8006eb8 <_vfiprintf_r+0x220>)
 8006d68:	f7f9 fa4a 	bl	8000200 <memchr>
 8006d6c:	9a04      	ldr	r2, [sp, #16]
 8006d6e:	b9d8      	cbnz	r0, 8006da8 <_vfiprintf_r+0x110>
 8006d70:	06d1      	lsls	r1, r2, #27
 8006d72:	bf44      	itt	mi
 8006d74:	2320      	movmi	r3, #32
 8006d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d7a:	0713      	lsls	r3, r2, #28
 8006d7c:	bf44      	itt	mi
 8006d7e:	232b      	movmi	r3, #43	; 0x2b
 8006d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d84:	f89a 3000 	ldrb.w	r3, [sl]
 8006d88:	2b2a      	cmp	r3, #42	; 0x2a
 8006d8a:	d015      	beq.n	8006db8 <_vfiprintf_r+0x120>
 8006d8c:	9a07      	ldr	r2, [sp, #28]
 8006d8e:	4654      	mov	r4, sl
 8006d90:	2000      	movs	r0, #0
 8006d92:	f04f 0c0a 	mov.w	ip, #10
 8006d96:	4621      	mov	r1, r4
 8006d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d9c:	3b30      	subs	r3, #48	; 0x30
 8006d9e:	2b09      	cmp	r3, #9
 8006da0:	d94d      	bls.n	8006e3e <_vfiprintf_r+0x1a6>
 8006da2:	b1b0      	cbz	r0, 8006dd2 <_vfiprintf_r+0x13a>
 8006da4:	9207      	str	r2, [sp, #28]
 8006da6:	e014      	b.n	8006dd2 <_vfiprintf_r+0x13a>
 8006da8:	eba0 0308 	sub.w	r3, r0, r8
 8006dac:	fa09 f303 	lsl.w	r3, r9, r3
 8006db0:	4313      	orrs	r3, r2
 8006db2:	9304      	str	r3, [sp, #16]
 8006db4:	46a2      	mov	sl, r4
 8006db6:	e7d2      	b.n	8006d5e <_vfiprintf_r+0xc6>
 8006db8:	9b03      	ldr	r3, [sp, #12]
 8006dba:	1d19      	adds	r1, r3, #4
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	9103      	str	r1, [sp, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	bfbb      	ittet	lt
 8006dc4:	425b      	neglt	r3, r3
 8006dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8006dca:	9307      	strge	r3, [sp, #28]
 8006dcc:	9307      	strlt	r3, [sp, #28]
 8006dce:	bfb8      	it	lt
 8006dd0:	9204      	strlt	r2, [sp, #16]
 8006dd2:	7823      	ldrb	r3, [r4, #0]
 8006dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8006dd6:	d10c      	bne.n	8006df2 <_vfiprintf_r+0x15a>
 8006dd8:	7863      	ldrb	r3, [r4, #1]
 8006dda:	2b2a      	cmp	r3, #42	; 0x2a
 8006ddc:	d134      	bne.n	8006e48 <_vfiprintf_r+0x1b0>
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	1d1a      	adds	r2, r3, #4
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	9203      	str	r2, [sp, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	bfb8      	it	lt
 8006dea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006dee:	3402      	adds	r4, #2
 8006df0:	9305      	str	r3, [sp, #20]
 8006df2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006ec8 <_vfiprintf_r+0x230>
 8006df6:	7821      	ldrb	r1, [r4, #0]
 8006df8:	2203      	movs	r2, #3
 8006dfa:	4650      	mov	r0, sl
 8006dfc:	f7f9 fa00 	bl	8000200 <memchr>
 8006e00:	b138      	cbz	r0, 8006e12 <_vfiprintf_r+0x17a>
 8006e02:	9b04      	ldr	r3, [sp, #16]
 8006e04:	eba0 000a 	sub.w	r0, r0, sl
 8006e08:	2240      	movs	r2, #64	; 0x40
 8006e0a:	4082      	lsls	r2, r0
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	3401      	adds	r4, #1
 8006e10:	9304      	str	r3, [sp, #16]
 8006e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e16:	4829      	ldr	r0, [pc, #164]	; (8006ebc <_vfiprintf_r+0x224>)
 8006e18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e1c:	2206      	movs	r2, #6
 8006e1e:	f7f9 f9ef 	bl	8000200 <memchr>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	d03f      	beq.n	8006ea6 <_vfiprintf_r+0x20e>
 8006e26:	4b26      	ldr	r3, [pc, #152]	; (8006ec0 <_vfiprintf_r+0x228>)
 8006e28:	bb1b      	cbnz	r3, 8006e72 <_vfiprintf_r+0x1da>
 8006e2a:	9b03      	ldr	r3, [sp, #12]
 8006e2c:	3307      	adds	r3, #7
 8006e2e:	f023 0307 	bic.w	r3, r3, #7
 8006e32:	3308      	adds	r3, #8
 8006e34:	9303      	str	r3, [sp, #12]
 8006e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e38:	443b      	add	r3, r7
 8006e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e3c:	e768      	b.n	8006d10 <_vfiprintf_r+0x78>
 8006e3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e42:	460c      	mov	r4, r1
 8006e44:	2001      	movs	r0, #1
 8006e46:	e7a6      	b.n	8006d96 <_vfiprintf_r+0xfe>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	3401      	adds	r4, #1
 8006e4c:	9305      	str	r3, [sp, #20]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	f04f 0c0a 	mov.w	ip, #10
 8006e54:	4620      	mov	r0, r4
 8006e56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e5a:	3a30      	subs	r2, #48	; 0x30
 8006e5c:	2a09      	cmp	r2, #9
 8006e5e:	d903      	bls.n	8006e68 <_vfiprintf_r+0x1d0>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0c6      	beq.n	8006df2 <_vfiprintf_r+0x15a>
 8006e64:	9105      	str	r1, [sp, #20]
 8006e66:	e7c4      	b.n	8006df2 <_vfiprintf_r+0x15a>
 8006e68:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e7f0      	b.n	8006e54 <_vfiprintf_r+0x1bc>
 8006e72:	ab03      	add	r3, sp, #12
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	462a      	mov	r2, r5
 8006e78:	4b12      	ldr	r3, [pc, #72]	; (8006ec4 <_vfiprintf_r+0x22c>)
 8006e7a:	a904      	add	r1, sp, #16
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f7fe fb49 	bl	8005514 <_printf_float>
 8006e82:	4607      	mov	r7, r0
 8006e84:	1c78      	adds	r0, r7, #1
 8006e86:	d1d6      	bne.n	8006e36 <_vfiprintf_r+0x19e>
 8006e88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e8a:	07d9      	lsls	r1, r3, #31
 8006e8c:	d405      	bmi.n	8006e9a <_vfiprintf_r+0x202>
 8006e8e:	89ab      	ldrh	r3, [r5, #12]
 8006e90:	059a      	lsls	r2, r3, #22
 8006e92:	d402      	bmi.n	8006e9a <_vfiprintf_r+0x202>
 8006e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e96:	f7ff f858 	bl	8005f4a <__retarget_lock_release_recursive>
 8006e9a:	89ab      	ldrh	r3, [r5, #12]
 8006e9c:	065b      	lsls	r3, r3, #25
 8006e9e:	f53f af1d 	bmi.w	8006cdc <_vfiprintf_r+0x44>
 8006ea2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ea4:	e71c      	b.n	8006ce0 <_vfiprintf_r+0x48>
 8006ea6:	ab03      	add	r3, sp, #12
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	462a      	mov	r2, r5
 8006eac:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <_vfiprintf_r+0x22c>)
 8006eae:	a904      	add	r1, sp, #16
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f7fe fdd3 	bl	8005a5c <_printf_i>
 8006eb6:	e7e4      	b.n	8006e82 <_vfiprintf_r+0x1ea>
 8006eb8:	08007f71 	.word	0x08007f71
 8006ebc:	08007f7b 	.word	0x08007f7b
 8006ec0:	08005515 	.word	0x08005515
 8006ec4:	08006c73 	.word	0x08006c73
 8006ec8:	08007f77 	.word	0x08007f77

08006ecc <malloc>:
 8006ecc:	4b02      	ldr	r3, [pc, #8]	; (8006ed8 <malloc+0xc>)
 8006ece:	4601      	mov	r1, r0
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	f000 b823 	b.w	8006f1c <_malloc_r>
 8006ed6:	bf00      	nop
 8006ed8:	20000064 	.word	0x20000064

08006edc <sbrk_aligned>:
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	4e0e      	ldr	r6, [pc, #56]	; (8006f18 <sbrk_aligned+0x3c>)
 8006ee0:	460c      	mov	r4, r1
 8006ee2:	6831      	ldr	r1, [r6, #0]
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	b911      	cbnz	r1, 8006eee <sbrk_aligned+0x12>
 8006ee8:	f000 fe5e 	bl	8007ba8 <_sbrk_r>
 8006eec:	6030      	str	r0, [r6, #0]
 8006eee:	4621      	mov	r1, r4
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	f000 fe59 	bl	8007ba8 <_sbrk_r>
 8006ef6:	1c43      	adds	r3, r0, #1
 8006ef8:	d00a      	beq.n	8006f10 <sbrk_aligned+0x34>
 8006efa:	1cc4      	adds	r4, r0, #3
 8006efc:	f024 0403 	bic.w	r4, r4, #3
 8006f00:	42a0      	cmp	r0, r4
 8006f02:	d007      	beq.n	8006f14 <sbrk_aligned+0x38>
 8006f04:	1a21      	subs	r1, r4, r0
 8006f06:	4628      	mov	r0, r5
 8006f08:	f000 fe4e 	bl	8007ba8 <_sbrk_r>
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d101      	bne.n	8006f14 <sbrk_aligned+0x38>
 8006f10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006f14:	4620      	mov	r0, r4
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	20000428 	.word	0x20000428

08006f1c <_malloc_r>:
 8006f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f20:	1ccd      	adds	r5, r1, #3
 8006f22:	f025 0503 	bic.w	r5, r5, #3
 8006f26:	3508      	adds	r5, #8
 8006f28:	2d0c      	cmp	r5, #12
 8006f2a:	bf38      	it	cc
 8006f2c:	250c      	movcc	r5, #12
 8006f2e:	2d00      	cmp	r5, #0
 8006f30:	4607      	mov	r7, r0
 8006f32:	db01      	blt.n	8006f38 <_malloc_r+0x1c>
 8006f34:	42a9      	cmp	r1, r5
 8006f36:	d905      	bls.n	8006f44 <_malloc_r+0x28>
 8006f38:	230c      	movs	r3, #12
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	2600      	movs	r6, #0
 8006f3e:	4630      	mov	r0, r6
 8006f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007018 <_malloc_r+0xfc>
 8006f48:	f000 f916 	bl	8007178 <__malloc_lock>
 8006f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f50:	461c      	mov	r4, r3
 8006f52:	bb5c      	cbnz	r4, 8006fac <_malloc_r+0x90>
 8006f54:	4629      	mov	r1, r5
 8006f56:	4638      	mov	r0, r7
 8006f58:	f7ff ffc0 	bl	8006edc <sbrk_aligned>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	4604      	mov	r4, r0
 8006f60:	d155      	bne.n	800700e <_malloc_r+0xf2>
 8006f62:	f8d8 4000 	ldr.w	r4, [r8]
 8006f66:	4626      	mov	r6, r4
 8006f68:	2e00      	cmp	r6, #0
 8006f6a:	d145      	bne.n	8006ff8 <_malloc_r+0xdc>
 8006f6c:	2c00      	cmp	r4, #0
 8006f6e:	d048      	beq.n	8007002 <_malloc_r+0xe6>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	4631      	mov	r1, r6
 8006f74:	4638      	mov	r0, r7
 8006f76:	eb04 0903 	add.w	r9, r4, r3
 8006f7a:	f000 fe15 	bl	8007ba8 <_sbrk_r>
 8006f7e:	4581      	cmp	r9, r0
 8006f80:	d13f      	bne.n	8007002 <_malloc_r+0xe6>
 8006f82:	6821      	ldr	r1, [r4, #0]
 8006f84:	1a6d      	subs	r5, r5, r1
 8006f86:	4629      	mov	r1, r5
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f7ff ffa7 	bl	8006edc <sbrk_aligned>
 8006f8e:	3001      	adds	r0, #1
 8006f90:	d037      	beq.n	8007002 <_malloc_r+0xe6>
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	442b      	add	r3, r5
 8006f96:	6023      	str	r3, [r4, #0]
 8006f98:	f8d8 3000 	ldr.w	r3, [r8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d038      	beq.n	8007012 <_malloc_r+0xf6>
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	42a2      	cmp	r2, r4
 8006fa4:	d12b      	bne.n	8006ffe <_malloc_r+0xe2>
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	605a      	str	r2, [r3, #4]
 8006faa:	e00f      	b.n	8006fcc <_malloc_r+0xb0>
 8006fac:	6822      	ldr	r2, [r4, #0]
 8006fae:	1b52      	subs	r2, r2, r5
 8006fb0:	d41f      	bmi.n	8006ff2 <_malloc_r+0xd6>
 8006fb2:	2a0b      	cmp	r2, #11
 8006fb4:	d917      	bls.n	8006fe6 <_malloc_r+0xca>
 8006fb6:	1961      	adds	r1, r4, r5
 8006fb8:	42a3      	cmp	r3, r4
 8006fba:	6025      	str	r5, [r4, #0]
 8006fbc:	bf18      	it	ne
 8006fbe:	6059      	strne	r1, [r3, #4]
 8006fc0:	6863      	ldr	r3, [r4, #4]
 8006fc2:	bf08      	it	eq
 8006fc4:	f8c8 1000 	streq.w	r1, [r8]
 8006fc8:	5162      	str	r2, [r4, r5]
 8006fca:	604b      	str	r3, [r1, #4]
 8006fcc:	4638      	mov	r0, r7
 8006fce:	f104 060b 	add.w	r6, r4, #11
 8006fd2:	f000 f8d7 	bl	8007184 <__malloc_unlock>
 8006fd6:	f026 0607 	bic.w	r6, r6, #7
 8006fda:	1d23      	adds	r3, r4, #4
 8006fdc:	1af2      	subs	r2, r6, r3
 8006fde:	d0ae      	beq.n	8006f3e <_malloc_r+0x22>
 8006fe0:	1b9b      	subs	r3, r3, r6
 8006fe2:	50a3      	str	r3, [r4, r2]
 8006fe4:	e7ab      	b.n	8006f3e <_malloc_r+0x22>
 8006fe6:	42a3      	cmp	r3, r4
 8006fe8:	6862      	ldr	r2, [r4, #4]
 8006fea:	d1dd      	bne.n	8006fa8 <_malloc_r+0x8c>
 8006fec:	f8c8 2000 	str.w	r2, [r8]
 8006ff0:	e7ec      	b.n	8006fcc <_malloc_r+0xb0>
 8006ff2:	4623      	mov	r3, r4
 8006ff4:	6864      	ldr	r4, [r4, #4]
 8006ff6:	e7ac      	b.n	8006f52 <_malloc_r+0x36>
 8006ff8:	4634      	mov	r4, r6
 8006ffa:	6876      	ldr	r6, [r6, #4]
 8006ffc:	e7b4      	b.n	8006f68 <_malloc_r+0x4c>
 8006ffe:	4613      	mov	r3, r2
 8007000:	e7cc      	b.n	8006f9c <_malloc_r+0x80>
 8007002:	230c      	movs	r3, #12
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	4638      	mov	r0, r7
 8007008:	f000 f8bc 	bl	8007184 <__malloc_unlock>
 800700c:	e797      	b.n	8006f3e <_malloc_r+0x22>
 800700e:	6025      	str	r5, [r4, #0]
 8007010:	e7dc      	b.n	8006fcc <_malloc_r+0xb0>
 8007012:	605b      	str	r3, [r3, #4]
 8007014:	deff      	udf	#255	; 0xff
 8007016:	bf00      	nop
 8007018:	20000424 	.word	0x20000424

0800701c <__sflush_r>:
 800701c:	898a      	ldrh	r2, [r1, #12]
 800701e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007022:	4605      	mov	r5, r0
 8007024:	0710      	lsls	r0, r2, #28
 8007026:	460c      	mov	r4, r1
 8007028:	d458      	bmi.n	80070dc <__sflush_r+0xc0>
 800702a:	684b      	ldr	r3, [r1, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	dc05      	bgt.n	800703c <__sflush_r+0x20>
 8007030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007032:	2b00      	cmp	r3, #0
 8007034:	dc02      	bgt.n	800703c <__sflush_r+0x20>
 8007036:	2000      	movs	r0, #0
 8007038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800703c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800703e:	2e00      	cmp	r6, #0
 8007040:	d0f9      	beq.n	8007036 <__sflush_r+0x1a>
 8007042:	2300      	movs	r3, #0
 8007044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007048:	682f      	ldr	r7, [r5, #0]
 800704a:	6a21      	ldr	r1, [r4, #32]
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	d032      	beq.n	80070b6 <__sflush_r+0x9a>
 8007050:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	075a      	lsls	r2, r3, #29
 8007056:	d505      	bpl.n	8007064 <__sflush_r+0x48>
 8007058:	6863      	ldr	r3, [r4, #4]
 800705a:	1ac0      	subs	r0, r0, r3
 800705c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800705e:	b10b      	cbz	r3, 8007064 <__sflush_r+0x48>
 8007060:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007062:	1ac0      	subs	r0, r0, r3
 8007064:	2300      	movs	r3, #0
 8007066:	4602      	mov	r2, r0
 8007068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800706a:	6a21      	ldr	r1, [r4, #32]
 800706c:	4628      	mov	r0, r5
 800706e:	47b0      	blx	r6
 8007070:	1c43      	adds	r3, r0, #1
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	d106      	bne.n	8007084 <__sflush_r+0x68>
 8007076:	6829      	ldr	r1, [r5, #0]
 8007078:	291d      	cmp	r1, #29
 800707a:	d82b      	bhi.n	80070d4 <__sflush_r+0xb8>
 800707c:	4a29      	ldr	r2, [pc, #164]	; (8007124 <__sflush_r+0x108>)
 800707e:	410a      	asrs	r2, r1
 8007080:	07d6      	lsls	r6, r2, #31
 8007082:	d427      	bmi.n	80070d4 <__sflush_r+0xb8>
 8007084:	2200      	movs	r2, #0
 8007086:	6062      	str	r2, [r4, #4]
 8007088:	04d9      	lsls	r1, r3, #19
 800708a:	6922      	ldr	r2, [r4, #16]
 800708c:	6022      	str	r2, [r4, #0]
 800708e:	d504      	bpl.n	800709a <__sflush_r+0x7e>
 8007090:	1c42      	adds	r2, r0, #1
 8007092:	d101      	bne.n	8007098 <__sflush_r+0x7c>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	b903      	cbnz	r3, 800709a <__sflush_r+0x7e>
 8007098:	6560      	str	r0, [r4, #84]	; 0x54
 800709a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800709c:	602f      	str	r7, [r5, #0]
 800709e:	2900      	cmp	r1, #0
 80070a0:	d0c9      	beq.n	8007036 <__sflush_r+0x1a>
 80070a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070a6:	4299      	cmp	r1, r3
 80070a8:	d002      	beq.n	80070b0 <__sflush_r+0x94>
 80070aa:	4628      	mov	r0, r5
 80070ac:	f000 fde0 	bl	8007c70 <_free_r>
 80070b0:	2000      	movs	r0, #0
 80070b2:	6360      	str	r0, [r4, #52]	; 0x34
 80070b4:	e7c0      	b.n	8007038 <__sflush_r+0x1c>
 80070b6:	2301      	movs	r3, #1
 80070b8:	4628      	mov	r0, r5
 80070ba:	47b0      	blx	r6
 80070bc:	1c41      	adds	r1, r0, #1
 80070be:	d1c8      	bne.n	8007052 <__sflush_r+0x36>
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0c5      	beq.n	8007052 <__sflush_r+0x36>
 80070c6:	2b1d      	cmp	r3, #29
 80070c8:	d001      	beq.n	80070ce <__sflush_r+0xb2>
 80070ca:	2b16      	cmp	r3, #22
 80070cc:	d101      	bne.n	80070d2 <__sflush_r+0xb6>
 80070ce:	602f      	str	r7, [r5, #0]
 80070d0:	e7b1      	b.n	8007036 <__sflush_r+0x1a>
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	e7ad      	b.n	8007038 <__sflush_r+0x1c>
 80070dc:	690f      	ldr	r7, [r1, #16]
 80070de:	2f00      	cmp	r7, #0
 80070e0:	d0a9      	beq.n	8007036 <__sflush_r+0x1a>
 80070e2:	0793      	lsls	r3, r2, #30
 80070e4:	680e      	ldr	r6, [r1, #0]
 80070e6:	bf08      	it	eq
 80070e8:	694b      	ldreq	r3, [r1, #20]
 80070ea:	600f      	str	r7, [r1, #0]
 80070ec:	bf18      	it	ne
 80070ee:	2300      	movne	r3, #0
 80070f0:	eba6 0807 	sub.w	r8, r6, r7
 80070f4:	608b      	str	r3, [r1, #8]
 80070f6:	f1b8 0f00 	cmp.w	r8, #0
 80070fa:	dd9c      	ble.n	8007036 <__sflush_r+0x1a>
 80070fc:	6a21      	ldr	r1, [r4, #32]
 80070fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007100:	4643      	mov	r3, r8
 8007102:	463a      	mov	r2, r7
 8007104:	4628      	mov	r0, r5
 8007106:	47b0      	blx	r6
 8007108:	2800      	cmp	r0, #0
 800710a:	dc06      	bgt.n	800711a <__sflush_r+0xfe>
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007112:	81a3      	strh	r3, [r4, #12]
 8007114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007118:	e78e      	b.n	8007038 <__sflush_r+0x1c>
 800711a:	4407      	add	r7, r0
 800711c:	eba8 0800 	sub.w	r8, r8, r0
 8007120:	e7e9      	b.n	80070f6 <__sflush_r+0xda>
 8007122:	bf00      	nop
 8007124:	dfbffffe 	.word	0xdfbffffe

08007128 <_fflush_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	690b      	ldr	r3, [r1, #16]
 800712c:	4605      	mov	r5, r0
 800712e:	460c      	mov	r4, r1
 8007130:	b913      	cbnz	r3, 8007138 <_fflush_r+0x10>
 8007132:	2500      	movs	r5, #0
 8007134:	4628      	mov	r0, r5
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	b118      	cbz	r0, 8007142 <_fflush_r+0x1a>
 800713a:	6a03      	ldr	r3, [r0, #32]
 800713c:	b90b      	cbnz	r3, 8007142 <_fflush_r+0x1a>
 800713e:	f7fe fe29 	bl	8005d94 <__sinit>
 8007142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0f3      	beq.n	8007132 <_fflush_r+0xa>
 800714a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800714c:	07d0      	lsls	r0, r2, #31
 800714e:	d404      	bmi.n	800715a <_fflush_r+0x32>
 8007150:	0599      	lsls	r1, r3, #22
 8007152:	d402      	bmi.n	800715a <_fflush_r+0x32>
 8007154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007156:	f7fe fef7 	bl	8005f48 <__retarget_lock_acquire_recursive>
 800715a:	4628      	mov	r0, r5
 800715c:	4621      	mov	r1, r4
 800715e:	f7ff ff5d 	bl	800701c <__sflush_r>
 8007162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007164:	07da      	lsls	r2, r3, #31
 8007166:	4605      	mov	r5, r0
 8007168:	d4e4      	bmi.n	8007134 <_fflush_r+0xc>
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	059b      	lsls	r3, r3, #22
 800716e:	d4e1      	bmi.n	8007134 <_fflush_r+0xc>
 8007170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007172:	f7fe feea 	bl	8005f4a <__retarget_lock_release_recursive>
 8007176:	e7dd      	b.n	8007134 <_fflush_r+0xc>

08007178 <__malloc_lock>:
 8007178:	4801      	ldr	r0, [pc, #4]	; (8007180 <__malloc_lock+0x8>)
 800717a:	f7fe bee5 	b.w	8005f48 <__retarget_lock_acquire_recursive>
 800717e:	bf00      	nop
 8007180:	20000420 	.word	0x20000420

08007184 <__malloc_unlock>:
 8007184:	4801      	ldr	r0, [pc, #4]	; (800718c <__malloc_unlock+0x8>)
 8007186:	f7fe bee0 	b.w	8005f4a <__retarget_lock_release_recursive>
 800718a:	bf00      	nop
 800718c:	20000420 	.word	0x20000420

08007190 <_Balloc>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	69c6      	ldr	r6, [r0, #28]
 8007194:	4604      	mov	r4, r0
 8007196:	460d      	mov	r5, r1
 8007198:	b976      	cbnz	r6, 80071b8 <_Balloc+0x28>
 800719a:	2010      	movs	r0, #16
 800719c:	f7ff fe96 	bl	8006ecc <malloc>
 80071a0:	4602      	mov	r2, r0
 80071a2:	61e0      	str	r0, [r4, #28]
 80071a4:	b920      	cbnz	r0, 80071b0 <_Balloc+0x20>
 80071a6:	4b18      	ldr	r3, [pc, #96]	; (8007208 <_Balloc+0x78>)
 80071a8:	4818      	ldr	r0, [pc, #96]	; (800720c <_Balloc+0x7c>)
 80071aa:	216b      	movs	r1, #107	; 0x6b
 80071ac:	f000 fd2c 	bl	8007c08 <__assert_func>
 80071b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071b4:	6006      	str	r6, [r0, #0]
 80071b6:	60c6      	str	r6, [r0, #12]
 80071b8:	69e6      	ldr	r6, [r4, #28]
 80071ba:	68f3      	ldr	r3, [r6, #12]
 80071bc:	b183      	cbz	r3, 80071e0 <_Balloc+0x50>
 80071be:	69e3      	ldr	r3, [r4, #28]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071c6:	b9b8      	cbnz	r0, 80071f8 <_Balloc+0x68>
 80071c8:	2101      	movs	r1, #1
 80071ca:	fa01 f605 	lsl.w	r6, r1, r5
 80071ce:	1d72      	adds	r2, r6, #5
 80071d0:	0092      	lsls	r2, r2, #2
 80071d2:	4620      	mov	r0, r4
 80071d4:	f000 fd36 	bl	8007c44 <_calloc_r>
 80071d8:	b160      	cbz	r0, 80071f4 <_Balloc+0x64>
 80071da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071de:	e00e      	b.n	80071fe <_Balloc+0x6e>
 80071e0:	2221      	movs	r2, #33	; 0x21
 80071e2:	2104      	movs	r1, #4
 80071e4:	4620      	mov	r0, r4
 80071e6:	f000 fd2d 	bl	8007c44 <_calloc_r>
 80071ea:	69e3      	ldr	r3, [r4, #28]
 80071ec:	60f0      	str	r0, [r6, #12]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e4      	bne.n	80071be <_Balloc+0x2e>
 80071f4:	2000      	movs	r0, #0
 80071f6:	bd70      	pop	{r4, r5, r6, pc}
 80071f8:	6802      	ldr	r2, [r0, #0]
 80071fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071fe:	2300      	movs	r3, #0
 8007200:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007204:	e7f7      	b.n	80071f6 <_Balloc+0x66>
 8007206:	bf00      	nop
 8007208:	08007ef1 	.word	0x08007ef1
 800720c:	08007f82 	.word	0x08007f82

08007210 <_Bfree>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	69c6      	ldr	r6, [r0, #28]
 8007214:	4605      	mov	r5, r0
 8007216:	460c      	mov	r4, r1
 8007218:	b976      	cbnz	r6, 8007238 <_Bfree+0x28>
 800721a:	2010      	movs	r0, #16
 800721c:	f7ff fe56 	bl	8006ecc <malloc>
 8007220:	4602      	mov	r2, r0
 8007222:	61e8      	str	r0, [r5, #28]
 8007224:	b920      	cbnz	r0, 8007230 <_Bfree+0x20>
 8007226:	4b09      	ldr	r3, [pc, #36]	; (800724c <_Bfree+0x3c>)
 8007228:	4809      	ldr	r0, [pc, #36]	; (8007250 <_Bfree+0x40>)
 800722a:	218f      	movs	r1, #143	; 0x8f
 800722c:	f000 fcec 	bl	8007c08 <__assert_func>
 8007230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007234:	6006      	str	r6, [r0, #0]
 8007236:	60c6      	str	r6, [r0, #12]
 8007238:	b13c      	cbz	r4, 800724a <_Bfree+0x3a>
 800723a:	69eb      	ldr	r3, [r5, #28]
 800723c:	6862      	ldr	r2, [r4, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007244:	6021      	str	r1, [r4, #0]
 8007246:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800724a:	bd70      	pop	{r4, r5, r6, pc}
 800724c:	08007ef1 	.word	0x08007ef1
 8007250:	08007f82 	.word	0x08007f82

08007254 <__multadd>:
 8007254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007258:	690d      	ldr	r5, [r1, #16]
 800725a:	4607      	mov	r7, r0
 800725c:	460c      	mov	r4, r1
 800725e:	461e      	mov	r6, r3
 8007260:	f101 0c14 	add.w	ip, r1, #20
 8007264:	2000      	movs	r0, #0
 8007266:	f8dc 3000 	ldr.w	r3, [ip]
 800726a:	b299      	uxth	r1, r3
 800726c:	fb02 6101 	mla	r1, r2, r1, r6
 8007270:	0c1e      	lsrs	r6, r3, #16
 8007272:	0c0b      	lsrs	r3, r1, #16
 8007274:	fb02 3306 	mla	r3, r2, r6, r3
 8007278:	b289      	uxth	r1, r1
 800727a:	3001      	adds	r0, #1
 800727c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007280:	4285      	cmp	r5, r0
 8007282:	f84c 1b04 	str.w	r1, [ip], #4
 8007286:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800728a:	dcec      	bgt.n	8007266 <__multadd+0x12>
 800728c:	b30e      	cbz	r6, 80072d2 <__multadd+0x7e>
 800728e:	68a3      	ldr	r3, [r4, #8]
 8007290:	42ab      	cmp	r3, r5
 8007292:	dc19      	bgt.n	80072c8 <__multadd+0x74>
 8007294:	6861      	ldr	r1, [r4, #4]
 8007296:	4638      	mov	r0, r7
 8007298:	3101      	adds	r1, #1
 800729a:	f7ff ff79 	bl	8007190 <_Balloc>
 800729e:	4680      	mov	r8, r0
 80072a0:	b928      	cbnz	r0, 80072ae <__multadd+0x5a>
 80072a2:	4602      	mov	r2, r0
 80072a4:	4b0c      	ldr	r3, [pc, #48]	; (80072d8 <__multadd+0x84>)
 80072a6:	480d      	ldr	r0, [pc, #52]	; (80072dc <__multadd+0x88>)
 80072a8:	21ba      	movs	r1, #186	; 0xba
 80072aa:	f000 fcad 	bl	8007c08 <__assert_func>
 80072ae:	6922      	ldr	r2, [r4, #16]
 80072b0:	3202      	adds	r2, #2
 80072b2:	f104 010c 	add.w	r1, r4, #12
 80072b6:	0092      	lsls	r2, r2, #2
 80072b8:	300c      	adds	r0, #12
 80072ba:	f000 fc97 	bl	8007bec <memcpy>
 80072be:	4621      	mov	r1, r4
 80072c0:	4638      	mov	r0, r7
 80072c2:	f7ff ffa5 	bl	8007210 <_Bfree>
 80072c6:	4644      	mov	r4, r8
 80072c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072cc:	3501      	adds	r5, #1
 80072ce:	615e      	str	r6, [r3, #20]
 80072d0:	6125      	str	r5, [r4, #16]
 80072d2:	4620      	mov	r0, r4
 80072d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072d8:	08007f60 	.word	0x08007f60
 80072dc:	08007f82 	.word	0x08007f82

080072e0 <__hi0bits>:
 80072e0:	0c03      	lsrs	r3, r0, #16
 80072e2:	041b      	lsls	r3, r3, #16
 80072e4:	b9d3      	cbnz	r3, 800731c <__hi0bits+0x3c>
 80072e6:	0400      	lsls	r0, r0, #16
 80072e8:	2310      	movs	r3, #16
 80072ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80072ee:	bf04      	itt	eq
 80072f0:	0200      	lsleq	r0, r0, #8
 80072f2:	3308      	addeq	r3, #8
 80072f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80072f8:	bf04      	itt	eq
 80072fa:	0100      	lsleq	r0, r0, #4
 80072fc:	3304      	addeq	r3, #4
 80072fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007302:	bf04      	itt	eq
 8007304:	0080      	lsleq	r0, r0, #2
 8007306:	3302      	addeq	r3, #2
 8007308:	2800      	cmp	r0, #0
 800730a:	db05      	blt.n	8007318 <__hi0bits+0x38>
 800730c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007310:	f103 0301 	add.w	r3, r3, #1
 8007314:	bf08      	it	eq
 8007316:	2320      	moveq	r3, #32
 8007318:	4618      	mov	r0, r3
 800731a:	4770      	bx	lr
 800731c:	2300      	movs	r3, #0
 800731e:	e7e4      	b.n	80072ea <__hi0bits+0xa>

08007320 <__lo0bits>:
 8007320:	6803      	ldr	r3, [r0, #0]
 8007322:	f013 0207 	ands.w	r2, r3, #7
 8007326:	d00c      	beq.n	8007342 <__lo0bits+0x22>
 8007328:	07d9      	lsls	r1, r3, #31
 800732a:	d422      	bmi.n	8007372 <__lo0bits+0x52>
 800732c:	079a      	lsls	r2, r3, #30
 800732e:	bf49      	itett	mi
 8007330:	085b      	lsrmi	r3, r3, #1
 8007332:	089b      	lsrpl	r3, r3, #2
 8007334:	6003      	strmi	r3, [r0, #0]
 8007336:	2201      	movmi	r2, #1
 8007338:	bf5c      	itt	pl
 800733a:	6003      	strpl	r3, [r0, #0]
 800733c:	2202      	movpl	r2, #2
 800733e:	4610      	mov	r0, r2
 8007340:	4770      	bx	lr
 8007342:	b299      	uxth	r1, r3
 8007344:	b909      	cbnz	r1, 800734a <__lo0bits+0x2a>
 8007346:	0c1b      	lsrs	r3, r3, #16
 8007348:	2210      	movs	r2, #16
 800734a:	b2d9      	uxtb	r1, r3
 800734c:	b909      	cbnz	r1, 8007352 <__lo0bits+0x32>
 800734e:	3208      	adds	r2, #8
 8007350:	0a1b      	lsrs	r3, r3, #8
 8007352:	0719      	lsls	r1, r3, #28
 8007354:	bf04      	itt	eq
 8007356:	091b      	lsreq	r3, r3, #4
 8007358:	3204      	addeq	r2, #4
 800735a:	0799      	lsls	r1, r3, #30
 800735c:	bf04      	itt	eq
 800735e:	089b      	lsreq	r3, r3, #2
 8007360:	3202      	addeq	r2, #2
 8007362:	07d9      	lsls	r1, r3, #31
 8007364:	d403      	bmi.n	800736e <__lo0bits+0x4e>
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	f102 0201 	add.w	r2, r2, #1
 800736c:	d003      	beq.n	8007376 <__lo0bits+0x56>
 800736e:	6003      	str	r3, [r0, #0]
 8007370:	e7e5      	b.n	800733e <__lo0bits+0x1e>
 8007372:	2200      	movs	r2, #0
 8007374:	e7e3      	b.n	800733e <__lo0bits+0x1e>
 8007376:	2220      	movs	r2, #32
 8007378:	e7e1      	b.n	800733e <__lo0bits+0x1e>
	...

0800737c <__i2b>:
 800737c:	b510      	push	{r4, lr}
 800737e:	460c      	mov	r4, r1
 8007380:	2101      	movs	r1, #1
 8007382:	f7ff ff05 	bl	8007190 <_Balloc>
 8007386:	4602      	mov	r2, r0
 8007388:	b928      	cbnz	r0, 8007396 <__i2b+0x1a>
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <__i2b+0x24>)
 800738c:	4805      	ldr	r0, [pc, #20]	; (80073a4 <__i2b+0x28>)
 800738e:	f240 1145 	movw	r1, #325	; 0x145
 8007392:	f000 fc39 	bl	8007c08 <__assert_func>
 8007396:	2301      	movs	r3, #1
 8007398:	6144      	str	r4, [r0, #20]
 800739a:	6103      	str	r3, [r0, #16]
 800739c:	bd10      	pop	{r4, pc}
 800739e:	bf00      	nop
 80073a0:	08007f60 	.word	0x08007f60
 80073a4:	08007f82 	.word	0x08007f82

080073a8 <__multiply>:
 80073a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ac:	4691      	mov	r9, r2
 80073ae:	690a      	ldr	r2, [r1, #16]
 80073b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	bfb8      	it	lt
 80073b8:	460b      	movlt	r3, r1
 80073ba:	460c      	mov	r4, r1
 80073bc:	bfbc      	itt	lt
 80073be:	464c      	movlt	r4, r9
 80073c0:	4699      	movlt	r9, r3
 80073c2:	6927      	ldr	r7, [r4, #16]
 80073c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073c8:	68a3      	ldr	r3, [r4, #8]
 80073ca:	6861      	ldr	r1, [r4, #4]
 80073cc:	eb07 060a 	add.w	r6, r7, sl
 80073d0:	42b3      	cmp	r3, r6
 80073d2:	b085      	sub	sp, #20
 80073d4:	bfb8      	it	lt
 80073d6:	3101      	addlt	r1, #1
 80073d8:	f7ff feda 	bl	8007190 <_Balloc>
 80073dc:	b930      	cbnz	r0, 80073ec <__multiply+0x44>
 80073de:	4602      	mov	r2, r0
 80073e0:	4b44      	ldr	r3, [pc, #272]	; (80074f4 <__multiply+0x14c>)
 80073e2:	4845      	ldr	r0, [pc, #276]	; (80074f8 <__multiply+0x150>)
 80073e4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80073e8:	f000 fc0e 	bl	8007c08 <__assert_func>
 80073ec:	f100 0514 	add.w	r5, r0, #20
 80073f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073f4:	462b      	mov	r3, r5
 80073f6:	2200      	movs	r2, #0
 80073f8:	4543      	cmp	r3, r8
 80073fa:	d321      	bcc.n	8007440 <__multiply+0x98>
 80073fc:	f104 0314 	add.w	r3, r4, #20
 8007400:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007404:	f109 0314 	add.w	r3, r9, #20
 8007408:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800740c:	9202      	str	r2, [sp, #8]
 800740e:	1b3a      	subs	r2, r7, r4
 8007410:	3a15      	subs	r2, #21
 8007412:	f022 0203 	bic.w	r2, r2, #3
 8007416:	3204      	adds	r2, #4
 8007418:	f104 0115 	add.w	r1, r4, #21
 800741c:	428f      	cmp	r7, r1
 800741e:	bf38      	it	cc
 8007420:	2204      	movcc	r2, #4
 8007422:	9201      	str	r2, [sp, #4]
 8007424:	9a02      	ldr	r2, [sp, #8]
 8007426:	9303      	str	r3, [sp, #12]
 8007428:	429a      	cmp	r2, r3
 800742a:	d80c      	bhi.n	8007446 <__multiply+0x9e>
 800742c:	2e00      	cmp	r6, #0
 800742e:	dd03      	ble.n	8007438 <__multiply+0x90>
 8007430:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007434:	2b00      	cmp	r3, #0
 8007436:	d05b      	beq.n	80074f0 <__multiply+0x148>
 8007438:	6106      	str	r6, [r0, #16]
 800743a:	b005      	add	sp, #20
 800743c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007440:	f843 2b04 	str.w	r2, [r3], #4
 8007444:	e7d8      	b.n	80073f8 <__multiply+0x50>
 8007446:	f8b3 a000 	ldrh.w	sl, [r3]
 800744a:	f1ba 0f00 	cmp.w	sl, #0
 800744e:	d024      	beq.n	800749a <__multiply+0xf2>
 8007450:	f104 0e14 	add.w	lr, r4, #20
 8007454:	46a9      	mov	r9, r5
 8007456:	f04f 0c00 	mov.w	ip, #0
 800745a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800745e:	f8d9 1000 	ldr.w	r1, [r9]
 8007462:	fa1f fb82 	uxth.w	fp, r2
 8007466:	b289      	uxth	r1, r1
 8007468:	fb0a 110b 	mla	r1, sl, fp, r1
 800746c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007470:	f8d9 2000 	ldr.w	r2, [r9]
 8007474:	4461      	add	r1, ip
 8007476:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800747a:	fb0a c20b 	mla	r2, sl, fp, ip
 800747e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007482:	b289      	uxth	r1, r1
 8007484:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007488:	4577      	cmp	r7, lr
 800748a:	f849 1b04 	str.w	r1, [r9], #4
 800748e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007492:	d8e2      	bhi.n	800745a <__multiply+0xb2>
 8007494:	9a01      	ldr	r2, [sp, #4]
 8007496:	f845 c002 	str.w	ip, [r5, r2]
 800749a:	9a03      	ldr	r2, [sp, #12]
 800749c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074a0:	3304      	adds	r3, #4
 80074a2:	f1b9 0f00 	cmp.w	r9, #0
 80074a6:	d021      	beq.n	80074ec <__multiply+0x144>
 80074a8:	6829      	ldr	r1, [r5, #0]
 80074aa:	f104 0c14 	add.w	ip, r4, #20
 80074ae:	46ae      	mov	lr, r5
 80074b0:	f04f 0a00 	mov.w	sl, #0
 80074b4:	f8bc b000 	ldrh.w	fp, [ip]
 80074b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074bc:	fb09 220b 	mla	r2, r9, fp, r2
 80074c0:	4452      	add	r2, sl
 80074c2:	b289      	uxth	r1, r1
 80074c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074c8:	f84e 1b04 	str.w	r1, [lr], #4
 80074cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80074d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074d4:	f8be 1000 	ldrh.w	r1, [lr]
 80074d8:	fb09 110a 	mla	r1, r9, sl, r1
 80074dc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80074e0:	4567      	cmp	r7, ip
 80074e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074e6:	d8e5      	bhi.n	80074b4 <__multiply+0x10c>
 80074e8:	9a01      	ldr	r2, [sp, #4]
 80074ea:	50a9      	str	r1, [r5, r2]
 80074ec:	3504      	adds	r5, #4
 80074ee:	e799      	b.n	8007424 <__multiply+0x7c>
 80074f0:	3e01      	subs	r6, #1
 80074f2:	e79b      	b.n	800742c <__multiply+0x84>
 80074f4:	08007f60 	.word	0x08007f60
 80074f8:	08007f82 	.word	0x08007f82

080074fc <__pow5mult>:
 80074fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007500:	4615      	mov	r5, r2
 8007502:	f012 0203 	ands.w	r2, r2, #3
 8007506:	4606      	mov	r6, r0
 8007508:	460f      	mov	r7, r1
 800750a:	d007      	beq.n	800751c <__pow5mult+0x20>
 800750c:	4c25      	ldr	r4, [pc, #148]	; (80075a4 <__pow5mult+0xa8>)
 800750e:	3a01      	subs	r2, #1
 8007510:	2300      	movs	r3, #0
 8007512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007516:	f7ff fe9d 	bl	8007254 <__multadd>
 800751a:	4607      	mov	r7, r0
 800751c:	10ad      	asrs	r5, r5, #2
 800751e:	d03d      	beq.n	800759c <__pow5mult+0xa0>
 8007520:	69f4      	ldr	r4, [r6, #28]
 8007522:	b97c      	cbnz	r4, 8007544 <__pow5mult+0x48>
 8007524:	2010      	movs	r0, #16
 8007526:	f7ff fcd1 	bl	8006ecc <malloc>
 800752a:	4602      	mov	r2, r0
 800752c:	61f0      	str	r0, [r6, #28]
 800752e:	b928      	cbnz	r0, 800753c <__pow5mult+0x40>
 8007530:	4b1d      	ldr	r3, [pc, #116]	; (80075a8 <__pow5mult+0xac>)
 8007532:	481e      	ldr	r0, [pc, #120]	; (80075ac <__pow5mult+0xb0>)
 8007534:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007538:	f000 fb66 	bl	8007c08 <__assert_func>
 800753c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007540:	6004      	str	r4, [r0, #0]
 8007542:	60c4      	str	r4, [r0, #12]
 8007544:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800754c:	b94c      	cbnz	r4, 8007562 <__pow5mult+0x66>
 800754e:	f240 2171 	movw	r1, #625	; 0x271
 8007552:	4630      	mov	r0, r6
 8007554:	f7ff ff12 	bl	800737c <__i2b>
 8007558:	2300      	movs	r3, #0
 800755a:	f8c8 0008 	str.w	r0, [r8, #8]
 800755e:	4604      	mov	r4, r0
 8007560:	6003      	str	r3, [r0, #0]
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	07eb      	lsls	r3, r5, #31
 8007568:	d50a      	bpl.n	8007580 <__pow5mult+0x84>
 800756a:	4639      	mov	r1, r7
 800756c:	4622      	mov	r2, r4
 800756e:	4630      	mov	r0, r6
 8007570:	f7ff ff1a 	bl	80073a8 <__multiply>
 8007574:	4639      	mov	r1, r7
 8007576:	4680      	mov	r8, r0
 8007578:	4630      	mov	r0, r6
 800757a:	f7ff fe49 	bl	8007210 <_Bfree>
 800757e:	4647      	mov	r7, r8
 8007580:	106d      	asrs	r5, r5, #1
 8007582:	d00b      	beq.n	800759c <__pow5mult+0xa0>
 8007584:	6820      	ldr	r0, [r4, #0]
 8007586:	b938      	cbnz	r0, 8007598 <__pow5mult+0x9c>
 8007588:	4622      	mov	r2, r4
 800758a:	4621      	mov	r1, r4
 800758c:	4630      	mov	r0, r6
 800758e:	f7ff ff0b 	bl	80073a8 <__multiply>
 8007592:	6020      	str	r0, [r4, #0]
 8007594:	f8c0 9000 	str.w	r9, [r0]
 8007598:	4604      	mov	r4, r0
 800759a:	e7e4      	b.n	8007566 <__pow5mult+0x6a>
 800759c:	4638      	mov	r0, r7
 800759e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075a2:	bf00      	nop
 80075a4:	080080d0 	.word	0x080080d0
 80075a8:	08007ef1 	.word	0x08007ef1
 80075ac:	08007f82 	.word	0x08007f82

080075b0 <__lshift>:
 80075b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b4:	460c      	mov	r4, r1
 80075b6:	6849      	ldr	r1, [r1, #4]
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075be:	68a3      	ldr	r3, [r4, #8]
 80075c0:	4607      	mov	r7, r0
 80075c2:	4691      	mov	r9, r2
 80075c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075c8:	f108 0601 	add.w	r6, r8, #1
 80075cc:	42b3      	cmp	r3, r6
 80075ce:	db0b      	blt.n	80075e8 <__lshift+0x38>
 80075d0:	4638      	mov	r0, r7
 80075d2:	f7ff fddd 	bl	8007190 <_Balloc>
 80075d6:	4605      	mov	r5, r0
 80075d8:	b948      	cbnz	r0, 80075ee <__lshift+0x3e>
 80075da:	4602      	mov	r2, r0
 80075dc:	4b28      	ldr	r3, [pc, #160]	; (8007680 <__lshift+0xd0>)
 80075de:	4829      	ldr	r0, [pc, #164]	; (8007684 <__lshift+0xd4>)
 80075e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80075e4:	f000 fb10 	bl	8007c08 <__assert_func>
 80075e8:	3101      	adds	r1, #1
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	e7ee      	b.n	80075cc <__lshift+0x1c>
 80075ee:	2300      	movs	r3, #0
 80075f0:	f100 0114 	add.w	r1, r0, #20
 80075f4:	f100 0210 	add.w	r2, r0, #16
 80075f8:	4618      	mov	r0, r3
 80075fa:	4553      	cmp	r3, sl
 80075fc:	db33      	blt.n	8007666 <__lshift+0xb6>
 80075fe:	6920      	ldr	r0, [r4, #16]
 8007600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007604:	f104 0314 	add.w	r3, r4, #20
 8007608:	f019 091f 	ands.w	r9, r9, #31
 800760c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007610:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007614:	d02b      	beq.n	800766e <__lshift+0xbe>
 8007616:	f1c9 0e20 	rsb	lr, r9, #32
 800761a:	468a      	mov	sl, r1
 800761c:	2200      	movs	r2, #0
 800761e:	6818      	ldr	r0, [r3, #0]
 8007620:	fa00 f009 	lsl.w	r0, r0, r9
 8007624:	4310      	orrs	r0, r2
 8007626:	f84a 0b04 	str.w	r0, [sl], #4
 800762a:	f853 2b04 	ldr.w	r2, [r3], #4
 800762e:	459c      	cmp	ip, r3
 8007630:	fa22 f20e 	lsr.w	r2, r2, lr
 8007634:	d8f3      	bhi.n	800761e <__lshift+0x6e>
 8007636:	ebac 0304 	sub.w	r3, ip, r4
 800763a:	3b15      	subs	r3, #21
 800763c:	f023 0303 	bic.w	r3, r3, #3
 8007640:	3304      	adds	r3, #4
 8007642:	f104 0015 	add.w	r0, r4, #21
 8007646:	4584      	cmp	ip, r0
 8007648:	bf38      	it	cc
 800764a:	2304      	movcc	r3, #4
 800764c:	50ca      	str	r2, [r1, r3]
 800764e:	b10a      	cbz	r2, 8007654 <__lshift+0xa4>
 8007650:	f108 0602 	add.w	r6, r8, #2
 8007654:	3e01      	subs	r6, #1
 8007656:	4638      	mov	r0, r7
 8007658:	612e      	str	r6, [r5, #16]
 800765a:	4621      	mov	r1, r4
 800765c:	f7ff fdd8 	bl	8007210 <_Bfree>
 8007660:	4628      	mov	r0, r5
 8007662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007666:	f842 0f04 	str.w	r0, [r2, #4]!
 800766a:	3301      	adds	r3, #1
 800766c:	e7c5      	b.n	80075fa <__lshift+0x4a>
 800766e:	3904      	subs	r1, #4
 8007670:	f853 2b04 	ldr.w	r2, [r3], #4
 8007674:	f841 2f04 	str.w	r2, [r1, #4]!
 8007678:	459c      	cmp	ip, r3
 800767a:	d8f9      	bhi.n	8007670 <__lshift+0xc0>
 800767c:	e7ea      	b.n	8007654 <__lshift+0xa4>
 800767e:	bf00      	nop
 8007680:	08007f60 	.word	0x08007f60
 8007684:	08007f82 	.word	0x08007f82

08007688 <__mcmp>:
 8007688:	b530      	push	{r4, r5, lr}
 800768a:	6902      	ldr	r2, [r0, #16]
 800768c:	690c      	ldr	r4, [r1, #16]
 800768e:	1b12      	subs	r2, r2, r4
 8007690:	d10e      	bne.n	80076b0 <__mcmp+0x28>
 8007692:	f100 0314 	add.w	r3, r0, #20
 8007696:	3114      	adds	r1, #20
 8007698:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800769c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076a8:	42a5      	cmp	r5, r4
 80076aa:	d003      	beq.n	80076b4 <__mcmp+0x2c>
 80076ac:	d305      	bcc.n	80076ba <__mcmp+0x32>
 80076ae:	2201      	movs	r2, #1
 80076b0:	4610      	mov	r0, r2
 80076b2:	bd30      	pop	{r4, r5, pc}
 80076b4:	4283      	cmp	r3, r0
 80076b6:	d3f3      	bcc.n	80076a0 <__mcmp+0x18>
 80076b8:	e7fa      	b.n	80076b0 <__mcmp+0x28>
 80076ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076be:	e7f7      	b.n	80076b0 <__mcmp+0x28>

080076c0 <__mdiff>:
 80076c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	460c      	mov	r4, r1
 80076c6:	4606      	mov	r6, r0
 80076c8:	4611      	mov	r1, r2
 80076ca:	4620      	mov	r0, r4
 80076cc:	4690      	mov	r8, r2
 80076ce:	f7ff ffdb 	bl	8007688 <__mcmp>
 80076d2:	1e05      	subs	r5, r0, #0
 80076d4:	d110      	bne.n	80076f8 <__mdiff+0x38>
 80076d6:	4629      	mov	r1, r5
 80076d8:	4630      	mov	r0, r6
 80076da:	f7ff fd59 	bl	8007190 <_Balloc>
 80076de:	b930      	cbnz	r0, 80076ee <__mdiff+0x2e>
 80076e0:	4b3a      	ldr	r3, [pc, #232]	; (80077cc <__mdiff+0x10c>)
 80076e2:	4602      	mov	r2, r0
 80076e4:	f240 2137 	movw	r1, #567	; 0x237
 80076e8:	4839      	ldr	r0, [pc, #228]	; (80077d0 <__mdiff+0x110>)
 80076ea:	f000 fa8d 	bl	8007c08 <__assert_func>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f8:	bfa4      	itt	ge
 80076fa:	4643      	movge	r3, r8
 80076fc:	46a0      	movge	r8, r4
 80076fe:	4630      	mov	r0, r6
 8007700:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007704:	bfa6      	itte	ge
 8007706:	461c      	movge	r4, r3
 8007708:	2500      	movge	r5, #0
 800770a:	2501      	movlt	r5, #1
 800770c:	f7ff fd40 	bl	8007190 <_Balloc>
 8007710:	b920      	cbnz	r0, 800771c <__mdiff+0x5c>
 8007712:	4b2e      	ldr	r3, [pc, #184]	; (80077cc <__mdiff+0x10c>)
 8007714:	4602      	mov	r2, r0
 8007716:	f240 2145 	movw	r1, #581	; 0x245
 800771a:	e7e5      	b.n	80076e8 <__mdiff+0x28>
 800771c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007720:	6926      	ldr	r6, [r4, #16]
 8007722:	60c5      	str	r5, [r0, #12]
 8007724:	f104 0914 	add.w	r9, r4, #20
 8007728:	f108 0514 	add.w	r5, r8, #20
 800772c:	f100 0e14 	add.w	lr, r0, #20
 8007730:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007734:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007738:	f108 0210 	add.w	r2, r8, #16
 800773c:	46f2      	mov	sl, lr
 800773e:	2100      	movs	r1, #0
 8007740:	f859 3b04 	ldr.w	r3, [r9], #4
 8007744:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007748:	fa11 f88b 	uxtah	r8, r1, fp
 800774c:	b299      	uxth	r1, r3
 800774e:	0c1b      	lsrs	r3, r3, #16
 8007750:	eba8 0801 	sub.w	r8, r8, r1
 8007754:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007758:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800775c:	fa1f f888 	uxth.w	r8, r8
 8007760:	1419      	asrs	r1, r3, #16
 8007762:	454e      	cmp	r6, r9
 8007764:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007768:	f84a 3b04 	str.w	r3, [sl], #4
 800776c:	d8e8      	bhi.n	8007740 <__mdiff+0x80>
 800776e:	1b33      	subs	r3, r6, r4
 8007770:	3b15      	subs	r3, #21
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	3304      	adds	r3, #4
 8007778:	3415      	adds	r4, #21
 800777a:	42a6      	cmp	r6, r4
 800777c:	bf38      	it	cc
 800777e:	2304      	movcc	r3, #4
 8007780:	441d      	add	r5, r3
 8007782:	4473      	add	r3, lr
 8007784:	469e      	mov	lr, r3
 8007786:	462e      	mov	r6, r5
 8007788:	4566      	cmp	r6, ip
 800778a:	d30e      	bcc.n	80077aa <__mdiff+0xea>
 800778c:	f10c 0203 	add.w	r2, ip, #3
 8007790:	1b52      	subs	r2, r2, r5
 8007792:	f022 0203 	bic.w	r2, r2, #3
 8007796:	3d03      	subs	r5, #3
 8007798:	45ac      	cmp	ip, r5
 800779a:	bf38      	it	cc
 800779c:	2200      	movcc	r2, #0
 800779e:	4413      	add	r3, r2
 80077a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80077a4:	b17a      	cbz	r2, 80077c6 <__mdiff+0x106>
 80077a6:	6107      	str	r7, [r0, #16]
 80077a8:	e7a4      	b.n	80076f4 <__mdiff+0x34>
 80077aa:	f856 8b04 	ldr.w	r8, [r6], #4
 80077ae:	fa11 f288 	uxtah	r2, r1, r8
 80077b2:	1414      	asrs	r4, r2, #16
 80077b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077b8:	b292      	uxth	r2, r2
 80077ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80077be:	f84e 2b04 	str.w	r2, [lr], #4
 80077c2:	1421      	asrs	r1, r4, #16
 80077c4:	e7e0      	b.n	8007788 <__mdiff+0xc8>
 80077c6:	3f01      	subs	r7, #1
 80077c8:	e7ea      	b.n	80077a0 <__mdiff+0xe0>
 80077ca:	bf00      	nop
 80077cc:	08007f60 	.word	0x08007f60
 80077d0:	08007f82 	.word	0x08007f82

080077d4 <__d2b>:
 80077d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077d8:	460f      	mov	r7, r1
 80077da:	2101      	movs	r1, #1
 80077dc:	ec59 8b10 	vmov	r8, r9, d0
 80077e0:	4616      	mov	r6, r2
 80077e2:	f7ff fcd5 	bl	8007190 <_Balloc>
 80077e6:	4604      	mov	r4, r0
 80077e8:	b930      	cbnz	r0, 80077f8 <__d2b+0x24>
 80077ea:	4602      	mov	r2, r0
 80077ec:	4b24      	ldr	r3, [pc, #144]	; (8007880 <__d2b+0xac>)
 80077ee:	4825      	ldr	r0, [pc, #148]	; (8007884 <__d2b+0xb0>)
 80077f0:	f240 310f 	movw	r1, #783	; 0x30f
 80077f4:	f000 fa08 	bl	8007c08 <__assert_func>
 80077f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80077fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007800:	bb2d      	cbnz	r5, 800784e <__d2b+0x7a>
 8007802:	9301      	str	r3, [sp, #4]
 8007804:	f1b8 0300 	subs.w	r3, r8, #0
 8007808:	d026      	beq.n	8007858 <__d2b+0x84>
 800780a:	4668      	mov	r0, sp
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	f7ff fd87 	bl	8007320 <__lo0bits>
 8007812:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007816:	b1e8      	cbz	r0, 8007854 <__d2b+0x80>
 8007818:	f1c0 0320 	rsb	r3, r0, #32
 800781c:	fa02 f303 	lsl.w	r3, r2, r3
 8007820:	430b      	orrs	r3, r1
 8007822:	40c2      	lsrs	r2, r0
 8007824:	6163      	str	r3, [r4, #20]
 8007826:	9201      	str	r2, [sp, #4]
 8007828:	9b01      	ldr	r3, [sp, #4]
 800782a:	61a3      	str	r3, [r4, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	bf14      	ite	ne
 8007830:	2202      	movne	r2, #2
 8007832:	2201      	moveq	r2, #1
 8007834:	6122      	str	r2, [r4, #16]
 8007836:	b1bd      	cbz	r5, 8007868 <__d2b+0x94>
 8007838:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800783c:	4405      	add	r5, r0
 800783e:	603d      	str	r5, [r7, #0]
 8007840:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007844:	6030      	str	r0, [r6, #0]
 8007846:	4620      	mov	r0, r4
 8007848:	b003      	add	sp, #12
 800784a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800784e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007852:	e7d6      	b.n	8007802 <__d2b+0x2e>
 8007854:	6161      	str	r1, [r4, #20]
 8007856:	e7e7      	b.n	8007828 <__d2b+0x54>
 8007858:	a801      	add	r0, sp, #4
 800785a:	f7ff fd61 	bl	8007320 <__lo0bits>
 800785e:	9b01      	ldr	r3, [sp, #4]
 8007860:	6163      	str	r3, [r4, #20]
 8007862:	3020      	adds	r0, #32
 8007864:	2201      	movs	r2, #1
 8007866:	e7e5      	b.n	8007834 <__d2b+0x60>
 8007868:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800786c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007870:	6038      	str	r0, [r7, #0]
 8007872:	6918      	ldr	r0, [r3, #16]
 8007874:	f7ff fd34 	bl	80072e0 <__hi0bits>
 8007878:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800787c:	e7e2      	b.n	8007844 <__d2b+0x70>
 800787e:	bf00      	nop
 8007880:	08007f60 	.word	0x08007f60
 8007884:	08007f82 	.word	0x08007f82

08007888 <__sread>:
 8007888:	b510      	push	{r4, lr}
 800788a:	460c      	mov	r4, r1
 800788c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007890:	f000 f978 	bl	8007b84 <_read_r>
 8007894:	2800      	cmp	r0, #0
 8007896:	bfab      	itete	ge
 8007898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800789a:	89a3      	ldrhlt	r3, [r4, #12]
 800789c:	181b      	addge	r3, r3, r0
 800789e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078a2:	bfac      	ite	ge
 80078a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80078a6:	81a3      	strhlt	r3, [r4, #12]
 80078a8:	bd10      	pop	{r4, pc}

080078aa <__swrite>:
 80078aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ae:	461f      	mov	r7, r3
 80078b0:	898b      	ldrh	r3, [r1, #12]
 80078b2:	05db      	lsls	r3, r3, #23
 80078b4:	4605      	mov	r5, r0
 80078b6:	460c      	mov	r4, r1
 80078b8:	4616      	mov	r6, r2
 80078ba:	d505      	bpl.n	80078c8 <__swrite+0x1e>
 80078bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c0:	2302      	movs	r3, #2
 80078c2:	2200      	movs	r2, #0
 80078c4:	f000 f94c 	bl	8007b60 <_lseek_r>
 80078c8:	89a3      	ldrh	r3, [r4, #12]
 80078ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078d2:	81a3      	strh	r3, [r4, #12]
 80078d4:	4632      	mov	r2, r6
 80078d6:	463b      	mov	r3, r7
 80078d8:	4628      	mov	r0, r5
 80078da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078de:	f000 b973 	b.w	8007bc8 <_write_r>

080078e2 <__sseek>:
 80078e2:	b510      	push	{r4, lr}
 80078e4:	460c      	mov	r4, r1
 80078e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ea:	f000 f939 	bl	8007b60 <_lseek_r>
 80078ee:	1c43      	adds	r3, r0, #1
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	bf15      	itete	ne
 80078f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80078f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078fe:	81a3      	strheq	r3, [r4, #12]
 8007900:	bf18      	it	ne
 8007902:	81a3      	strhne	r3, [r4, #12]
 8007904:	bd10      	pop	{r4, pc}

08007906 <__sclose>:
 8007906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790a:	f000 b8f7 	b.w	8007afc <_close_r>

0800790e <__swbuf_r>:
 800790e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007910:	460e      	mov	r6, r1
 8007912:	4614      	mov	r4, r2
 8007914:	4605      	mov	r5, r0
 8007916:	b118      	cbz	r0, 8007920 <__swbuf_r+0x12>
 8007918:	6a03      	ldr	r3, [r0, #32]
 800791a:	b90b      	cbnz	r3, 8007920 <__swbuf_r+0x12>
 800791c:	f7fe fa3a 	bl	8005d94 <__sinit>
 8007920:	69a3      	ldr	r3, [r4, #24]
 8007922:	60a3      	str	r3, [r4, #8]
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	071a      	lsls	r2, r3, #28
 8007928:	d525      	bpl.n	8007976 <__swbuf_r+0x68>
 800792a:	6923      	ldr	r3, [r4, #16]
 800792c:	b31b      	cbz	r3, 8007976 <__swbuf_r+0x68>
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	6922      	ldr	r2, [r4, #16]
 8007932:	1a98      	subs	r0, r3, r2
 8007934:	6963      	ldr	r3, [r4, #20]
 8007936:	b2f6      	uxtb	r6, r6
 8007938:	4283      	cmp	r3, r0
 800793a:	4637      	mov	r7, r6
 800793c:	dc04      	bgt.n	8007948 <__swbuf_r+0x3a>
 800793e:	4621      	mov	r1, r4
 8007940:	4628      	mov	r0, r5
 8007942:	f7ff fbf1 	bl	8007128 <_fflush_r>
 8007946:	b9e0      	cbnz	r0, 8007982 <__swbuf_r+0x74>
 8007948:	68a3      	ldr	r3, [r4, #8]
 800794a:	3b01      	subs	r3, #1
 800794c:	60a3      	str	r3, [r4, #8]
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	6022      	str	r2, [r4, #0]
 8007954:	701e      	strb	r6, [r3, #0]
 8007956:	6962      	ldr	r2, [r4, #20]
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	429a      	cmp	r2, r3
 800795c:	d004      	beq.n	8007968 <__swbuf_r+0x5a>
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	07db      	lsls	r3, r3, #31
 8007962:	d506      	bpl.n	8007972 <__swbuf_r+0x64>
 8007964:	2e0a      	cmp	r6, #10
 8007966:	d104      	bne.n	8007972 <__swbuf_r+0x64>
 8007968:	4621      	mov	r1, r4
 800796a:	4628      	mov	r0, r5
 800796c:	f7ff fbdc 	bl	8007128 <_fflush_r>
 8007970:	b938      	cbnz	r0, 8007982 <__swbuf_r+0x74>
 8007972:	4638      	mov	r0, r7
 8007974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007976:	4621      	mov	r1, r4
 8007978:	4628      	mov	r0, r5
 800797a:	f000 f805 	bl	8007988 <__swsetup_r>
 800797e:	2800      	cmp	r0, #0
 8007980:	d0d5      	beq.n	800792e <__swbuf_r+0x20>
 8007982:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007986:	e7f4      	b.n	8007972 <__swbuf_r+0x64>

08007988 <__swsetup_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4b2a      	ldr	r3, [pc, #168]	; (8007a34 <__swsetup_r+0xac>)
 800798c:	4605      	mov	r5, r0
 800798e:	6818      	ldr	r0, [r3, #0]
 8007990:	460c      	mov	r4, r1
 8007992:	b118      	cbz	r0, 800799c <__swsetup_r+0x14>
 8007994:	6a03      	ldr	r3, [r0, #32]
 8007996:	b90b      	cbnz	r3, 800799c <__swsetup_r+0x14>
 8007998:	f7fe f9fc 	bl	8005d94 <__sinit>
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079a2:	0718      	lsls	r0, r3, #28
 80079a4:	d422      	bmi.n	80079ec <__swsetup_r+0x64>
 80079a6:	06d9      	lsls	r1, r3, #27
 80079a8:	d407      	bmi.n	80079ba <__swsetup_r+0x32>
 80079aa:	2309      	movs	r3, #9
 80079ac:	602b      	str	r3, [r5, #0]
 80079ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079b2:	81a3      	strh	r3, [r4, #12]
 80079b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079b8:	e034      	b.n	8007a24 <__swsetup_r+0x9c>
 80079ba:	0758      	lsls	r0, r3, #29
 80079bc:	d512      	bpl.n	80079e4 <__swsetup_r+0x5c>
 80079be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079c0:	b141      	cbz	r1, 80079d4 <__swsetup_r+0x4c>
 80079c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079c6:	4299      	cmp	r1, r3
 80079c8:	d002      	beq.n	80079d0 <__swsetup_r+0x48>
 80079ca:	4628      	mov	r0, r5
 80079cc:	f000 f950 	bl	8007c70 <_free_r>
 80079d0:	2300      	movs	r3, #0
 80079d2:	6363      	str	r3, [r4, #52]	; 0x34
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079da:	81a3      	strh	r3, [r4, #12]
 80079dc:	2300      	movs	r3, #0
 80079de:	6063      	str	r3, [r4, #4]
 80079e0:	6923      	ldr	r3, [r4, #16]
 80079e2:	6023      	str	r3, [r4, #0]
 80079e4:	89a3      	ldrh	r3, [r4, #12]
 80079e6:	f043 0308 	orr.w	r3, r3, #8
 80079ea:	81a3      	strh	r3, [r4, #12]
 80079ec:	6923      	ldr	r3, [r4, #16]
 80079ee:	b94b      	cbnz	r3, 8007a04 <__swsetup_r+0x7c>
 80079f0:	89a3      	ldrh	r3, [r4, #12]
 80079f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079fa:	d003      	beq.n	8007a04 <__swsetup_r+0x7c>
 80079fc:	4621      	mov	r1, r4
 80079fe:	4628      	mov	r0, r5
 8007a00:	f000 f840 	bl	8007a84 <__smakebuf_r>
 8007a04:	89a0      	ldrh	r0, [r4, #12]
 8007a06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a0a:	f010 0301 	ands.w	r3, r0, #1
 8007a0e:	d00a      	beq.n	8007a26 <__swsetup_r+0x9e>
 8007a10:	2300      	movs	r3, #0
 8007a12:	60a3      	str	r3, [r4, #8]
 8007a14:	6963      	ldr	r3, [r4, #20]
 8007a16:	425b      	negs	r3, r3
 8007a18:	61a3      	str	r3, [r4, #24]
 8007a1a:	6923      	ldr	r3, [r4, #16]
 8007a1c:	b943      	cbnz	r3, 8007a30 <__swsetup_r+0xa8>
 8007a1e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a22:	d1c4      	bne.n	80079ae <__swsetup_r+0x26>
 8007a24:	bd38      	pop	{r3, r4, r5, pc}
 8007a26:	0781      	lsls	r1, r0, #30
 8007a28:	bf58      	it	pl
 8007a2a:	6963      	ldrpl	r3, [r4, #20]
 8007a2c:	60a3      	str	r3, [r4, #8]
 8007a2e:	e7f4      	b.n	8007a1a <__swsetup_r+0x92>
 8007a30:	2000      	movs	r0, #0
 8007a32:	e7f7      	b.n	8007a24 <__swsetup_r+0x9c>
 8007a34:	20000064 	.word	0x20000064

08007a38 <__swhatbuf_r>:
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a40:	2900      	cmp	r1, #0
 8007a42:	b096      	sub	sp, #88	; 0x58
 8007a44:	4615      	mov	r5, r2
 8007a46:	461e      	mov	r6, r3
 8007a48:	da0d      	bge.n	8007a66 <__swhatbuf_r+0x2e>
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a50:	f04f 0100 	mov.w	r1, #0
 8007a54:	bf0c      	ite	eq
 8007a56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007a5a:	2340      	movne	r3, #64	; 0x40
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	6031      	str	r1, [r6, #0]
 8007a60:	602b      	str	r3, [r5, #0]
 8007a62:	b016      	add	sp, #88	; 0x58
 8007a64:	bd70      	pop	{r4, r5, r6, pc}
 8007a66:	466a      	mov	r2, sp
 8007a68:	f000 f858 	bl	8007b1c <_fstat_r>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	dbec      	blt.n	8007a4a <__swhatbuf_r+0x12>
 8007a70:	9901      	ldr	r1, [sp, #4]
 8007a72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007a76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007a7a:	4259      	negs	r1, r3
 8007a7c:	4159      	adcs	r1, r3
 8007a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a82:	e7eb      	b.n	8007a5c <__swhatbuf_r+0x24>

08007a84 <__smakebuf_r>:
 8007a84:	898b      	ldrh	r3, [r1, #12]
 8007a86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a88:	079d      	lsls	r5, r3, #30
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	d507      	bpl.n	8007aa0 <__smakebuf_r+0x1c>
 8007a90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	6123      	str	r3, [r4, #16]
 8007a98:	2301      	movs	r3, #1
 8007a9a:	6163      	str	r3, [r4, #20]
 8007a9c:	b002      	add	sp, #8
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}
 8007aa0:	ab01      	add	r3, sp, #4
 8007aa2:	466a      	mov	r2, sp
 8007aa4:	f7ff ffc8 	bl	8007a38 <__swhatbuf_r>
 8007aa8:	9900      	ldr	r1, [sp, #0]
 8007aaa:	4605      	mov	r5, r0
 8007aac:	4630      	mov	r0, r6
 8007aae:	f7ff fa35 	bl	8006f1c <_malloc_r>
 8007ab2:	b948      	cbnz	r0, 8007ac8 <__smakebuf_r+0x44>
 8007ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab8:	059a      	lsls	r2, r3, #22
 8007aba:	d4ef      	bmi.n	8007a9c <__smakebuf_r+0x18>
 8007abc:	f023 0303 	bic.w	r3, r3, #3
 8007ac0:	f043 0302 	orr.w	r3, r3, #2
 8007ac4:	81a3      	strh	r3, [r4, #12]
 8007ac6:	e7e3      	b.n	8007a90 <__smakebuf_r+0xc>
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	6020      	str	r0, [r4, #0]
 8007acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad0:	81a3      	strh	r3, [r4, #12]
 8007ad2:	9b00      	ldr	r3, [sp, #0]
 8007ad4:	6163      	str	r3, [r4, #20]
 8007ad6:	9b01      	ldr	r3, [sp, #4]
 8007ad8:	6120      	str	r0, [r4, #16]
 8007ada:	b15b      	cbz	r3, 8007af4 <__smakebuf_r+0x70>
 8007adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f000 f82d 	bl	8007b40 <_isatty_r>
 8007ae6:	b128      	cbz	r0, 8007af4 <__smakebuf_r+0x70>
 8007ae8:	89a3      	ldrh	r3, [r4, #12]
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	f043 0301 	orr.w	r3, r3, #1
 8007af2:	81a3      	strh	r3, [r4, #12]
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	431d      	orrs	r5, r3
 8007af8:	81a5      	strh	r5, [r4, #12]
 8007afa:	e7cf      	b.n	8007a9c <__smakebuf_r+0x18>

08007afc <_close_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4d06      	ldr	r5, [pc, #24]	; (8007b18 <_close_r+0x1c>)
 8007b00:	2300      	movs	r3, #0
 8007b02:	4604      	mov	r4, r0
 8007b04:	4608      	mov	r0, r1
 8007b06:	602b      	str	r3, [r5, #0]
 8007b08:	f7f9 ff1d 	bl	8001946 <_close>
 8007b0c:	1c43      	adds	r3, r0, #1
 8007b0e:	d102      	bne.n	8007b16 <_close_r+0x1a>
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	b103      	cbz	r3, 8007b16 <_close_r+0x1a>
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	bd38      	pop	{r3, r4, r5, pc}
 8007b18:	2000042c 	.word	0x2000042c

08007b1c <_fstat_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4d07      	ldr	r5, [pc, #28]	; (8007b3c <_fstat_r+0x20>)
 8007b20:	2300      	movs	r3, #0
 8007b22:	4604      	mov	r4, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	4611      	mov	r1, r2
 8007b28:	602b      	str	r3, [r5, #0]
 8007b2a:	f7f9 ff18 	bl	800195e <_fstat>
 8007b2e:	1c43      	adds	r3, r0, #1
 8007b30:	d102      	bne.n	8007b38 <_fstat_r+0x1c>
 8007b32:	682b      	ldr	r3, [r5, #0]
 8007b34:	b103      	cbz	r3, 8007b38 <_fstat_r+0x1c>
 8007b36:	6023      	str	r3, [r4, #0]
 8007b38:	bd38      	pop	{r3, r4, r5, pc}
 8007b3a:	bf00      	nop
 8007b3c:	2000042c 	.word	0x2000042c

08007b40 <_isatty_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4d06      	ldr	r5, [pc, #24]	; (8007b5c <_isatty_r+0x1c>)
 8007b44:	2300      	movs	r3, #0
 8007b46:	4604      	mov	r4, r0
 8007b48:	4608      	mov	r0, r1
 8007b4a:	602b      	str	r3, [r5, #0]
 8007b4c:	f7f9 ff17 	bl	800197e <_isatty>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	d102      	bne.n	8007b5a <_isatty_r+0x1a>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	b103      	cbz	r3, 8007b5a <_isatty_r+0x1a>
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	2000042c 	.word	0x2000042c

08007b60 <_lseek_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d07      	ldr	r5, [pc, #28]	; (8007b80 <_lseek_r+0x20>)
 8007b64:	4604      	mov	r4, r0
 8007b66:	4608      	mov	r0, r1
 8007b68:	4611      	mov	r1, r2
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	602a      	str	r2, [r5, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f7f9 ff10 	bl	8001994 <_lseek>
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	d102      	bne.n	8007b7e <_lseek_r+0x1e>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	b103      	cbz	r3, 8007b7e <_lseek_r+0x1e>
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	bd38      	pop	{r3, r4, r5, pc}
 8007b80:	2000042c 	.word	0x2000042c

08007b84 <_read_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4d07      	ldr	r5, [pc, #28]	; (8007ba4 <_read_r+0x20>)
 8007b88:	4604      	mov	r4, r0
 8007b8a:	4608      	mov	r0, r1
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	2200      	movs	r2, #0
 8007b90:	602a      	str	r2, [r5, #0]
 8007b92:	461a      	mov	r2, r3
 8007b94:	f7f9 fe9e 	bl	80018d4 <_read>
 8007b98:	1c43      	adds	r3, r0, #1
 8007b9a:	d102      	bne.n	8007ba2 <_read_r+0x1e>
 8007b9c:	682b      	ldr	r3, [r5, #0]
 8007b9e:	b103      	cbz	r3, 8007ba2 <_read_r+0x1e>
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	2000042c 	.word	0x2000042c

08007ba8 <_sbrk_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4d06      	ldr	r5, [pc, #24]	; (8007bc4 <_sbrk_r+0x1c>)
 8007bac:	2300      	movs	r3, #0
 8007bae:	4604      	mov	r4, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	602b      	str	r3, [r5, #0]
 8007bb4:	f7f9 fefc 	bl	80019b0 <_sbrk>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d102      	bne.n	8007bc2 <_sbrk_r+0x1a>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b103      	cbz	r3, 8007bc2 <_sbrk_r+0x1a>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	2000042c 	.word	0x2000042c

08007bc8 <_write_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4d07      	ldr	r5, [pc, #28]	; (8007be8 <_write_r+0x20>)
 8007bcc:	4604      	mov	r4, r0
 8007bce:	4608      	mov	r0, r1
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	602a      	str	r2, [r5, #0]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f7f9 fe99 	bl	800190e <_write>
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	d102      	bne.n	8007be6 <_write_r+0x1e>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	b103      	cbz	r3, 8007be6 <_write_r+0x1e>
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	2000042c 	.word	0x2000042c

08007bec <memcpy>:
 8007bec:	440a      	add	r2, r1
 8007bee:	4291      	cmp	r1, r2
 8007bf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007bf4:	d100      	bne.n	8007bf8 <memcpy+0xc>
 8007bf6:	4770      	bx	lr
 8007bf8:	b510      	push	{r4, lr}
 8007bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c02:	4291      	cmp	r1, r2
 8007c04:	d1f9      	bne.n	8007bfa <memcpy+0xe>
 8007c06:	bd10      	pop	{r4, pc}

08007c08 <__assert_func>:
 8007c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c0a:	4614      	mov	r4, r2
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <__assert_func+0x2c>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4605      	mov	r5, r0
 8007c14:	68d8      	ldr	r0, [r3, #12]
 8007c16:	b14c      	cbz	r4, 8007c2c <__assert_func+0x24>
 8007c18:	4b07      	ldr	r3, [pc, #28]	; (8007c38 <__assert_func+0x30>)
 8007c1a:	9100      	str	r1, [sp, #0]
 8007c1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c20:	4906      	ldr	r1, [pc, #24]	; (8007c3c <__assert_func+0x34>)
 8007c22:	462b      	mov	r3, r5
 8007c24:	f000 f882 	bl	8007d2c <fiprintf>
 8007c28:	f000 f89f 	bl	8007d6a <abort>
 8007c2c:	4b04      	ldr	r3, [pc, #16]	; (8007c40 <__assert_func+0x38>)
 8007c2e:	461c      	mov	r4, r3
 8007c30:	e7f3      	b.n	8007c1a <__assert_func+0x12>
 8007c32:	bf00      	nop
 8007c34:	20000064 	.word	0x20000064
 8007c38:	080081e7 	.word	0x080081e7
 8007c3c:	080081f4 	.word	0x080081f4
 8007c40:	08008222 	.word	0x08008222

08007c44 <_calloc_r>:
 8007c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c46:	fba1 2402 	umull	r2, r4, r1, r2
 8007c4a:	b94c      	cbnz	r4, 8007c60 <_calloc_r+0x1c>
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	9201      	str	r2, [sp, #4]
 8007c50:	f7ff f964 	bl	8006f1c <_malloc_r>
 8007c54:	9a01      	ldr	r2, [sp, #4]
 8007c56:	4605      	mov	r5, r0
 8007c58:	b930      	cbnz	r0, 8007c68 <_calloc_r+0x24>
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	b003      	add	sp, #12
 8007c5e:	bd30      	pop	{r4, r5, pc}
 8007c60:	220c      	movs	r2, #12
 8007c62:	6002      	str	r2, [r0, #0]
 8007c64:	2500      	movs	r5, #0
 8007c66:	e7f8      	b.n	8007c5a <_calloc_r+0x16>
 8007c68:	4621      	mov	r1, r4
 8007c6a:	f7fe f937 	bl	8005edc <memset>
 8007c6e:	e7f4      	b.n	8007c5a <_calloc_r+0x16>

08007c70 <_free_r>:
 8007c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c72:	2900      	cmp	r1, #0
 8007c74:	d044      	beq.n	8007d00 <_free_r+0x90>
 8007c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c7a:	9001      	str	r0, [sp, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f1a1 0404 	sub.w	r4, r1, #4
 8007c82:	bfb8      	it	lt
 8007c84:	18e4      	addlt	r4, r4, r3
 8007c86:	f7ff fa77 	bl	8007178 <__malloc_lock>
 8007c8a:	4a1e      	ldr	r2, [pc, #120]	; (8007d04 <_free_r+0x94>)
 8007c8c:	9801      	ldr	r0, [sp, #4]
 8007c8e:	6813      	ldr	r3, [r2, #0]
 8007c90:	b933      	cbnz	r3, 8007ca0 <_free_r+0x30>
 8007c92:	6063      	str	r3, [r4, #4]
 8007c94:	6014      	str	r4, [r2, #0]
 8007c96:	b003      	add	sp, #12
 8007c98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c9c:	f7ff ba72 	b.w	8007184 <__malloc_unlock>
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	d908      	bls.n	8007cb6 <_free_r+0x46>
 8007ca4:	6825      	ldr	r5, [r4, #0]
 8007ca6:	1961      	adds	r1, r4, r5
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	bf01      	itttt	eq
 8007cac:	6819      	ldreq	r1, [r3, #0]
 8007cae:	685b      	ldreq	r3, [r3, #4]
 8007cb0:	1949      	addeq	r1, r1, r5
 8007cb2:	6021      	streq	r1, [r4, #0]
 8007cb4:	e7ed      	b.n	8007c92 <_free_r+0x22>
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	b10b      	cbz	r3, 8007cc0 <_free_r+0x50>
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	d9fa      	bls.n	8007cb6 <_free_r+0x46>
 8007cc0:	6811      	ldr	r1, [r2, #0]
 8007cc2:	1855      	adds	r5, r2, r1
 8007cc4:	42a5      	cmp	r5, r4
 8007cc6:	d10b      	bne.n	8007ce0 <_free_r+0x70>
 8007cc8:	6824      	ldr	r4, [r4, #0]
 8007cca:	4421      	add	r1, r4
 8007ccc:	1854      	adds	r4, r2, r1
 8007cce:	42a3      	cmp	r3, r4
 8007cd0:	6011      	str	r1, [r2, #0]
 8007cd2:	d1e0      	bne.n	8007c96 <_free_r+0x26>
 8007cd4:	681c      	ldr	r4, [r3, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	6053      	str	r3, [r2, #4]
 8007cda:	440c      	add	r4, r1
 8007cdc:	6014      	str	r4, [r2, #0]
 8007cde:	e7da      	b.n	8007c96 <_free_r+0x26>
 8007ce0:	d902      	bls.n	8007ce8 <_free_r+0x78>
 8007ce2:	230c      	movs	r3, #12
 8007ce4:	6003      	str	r3, [r0, #0]
 8007ce6:	e7d6      	b.n	8007c96 <_free_r+0x26>
 8007ce8:	6825      	ldr	r5, [r4, #0]
 8007cea:	1961      	adds	r1, r4, r5
 8007cec:	428b      	cmp	r3, r1
 8007cee:	bf04      	itt	eq
 8007cf0:	6819      	ldreq	r1, [r3, #0]
 8007cf2:	685b      	ldreq	r3, [r3, #4]
 8007cf4:	6063      	str	r3, [r4, #4]
 8007cf6:	bf04      	itt	eq
 8007cf8:	1949      	addeq	r1, r1, r5
 8007cfa:	6021      	streq	r1, [r4, #0]
 8007cfc:	6054      	str	r4, [r2, #4]
 8007cfe:	e7ca      	b.n	8007c96 <_free_r+0x26>
 8007d00:	b003      	add	sp, #12
 8007d02:	bd30      	pop	{r4, r5, pc}
 8007d04:	20000424 	.word	0x20000424

08007d08 <__ascii_mbtowc>:
 8007d08:	b082      	sub	sp, #8
 8007d0a:	b901      	cbnz	r1, 8007d0e <__ascii_mbtowc+0x6>
 8007d0c:	a901      	add	r1, sp, #4
 8007d0e:	b142      	cbz	r2, 8007d22 <__ascii_mbtowc+0x1a>
 8007d10:	b14b      	cbz	r3, 8007d26 <__ascii_mbtowc+0x1e>
 8007d12:	7813      	ldrb	r3, [r2, #0]
 8007d14:	600b      	str	r3, [r1, #0]
 8007d16:	7812      	ldrb	r2, [r2, #0]
 8007d18:	1e10      	subs	r0, r2, #0
 8007d1a:	bf18      	it	ne
 8007d1c:	2001      	movne	r0, #1
 8007d1e:	b002      	add	sp, #8
 8007d20:	4770      	bx	lr
 8007d22:	4610      	mov	r0, r2
 8007d24:	e7fb      	b.n	8007d1e <__ascii_mbtowc+0x16>
 8007d26:	f06f 0001 	mvn.w	r0, #1
 8007d2a:	e7f8      	b.n	8007d1e <__ascii_mbtowc+0x16>

08007d2c <fiprintf>:
 8007d2c:	b40e      	push	{r1, r2, r3}
 8007d2e:	b503      	push	{r0, r1, lr}
 8007d30:	4601      	mov	r1, r0
 8007d32:	ab03      	add	r3, sp, #12
 8007d34:	4805      	ldr	r0, [pc, #20]	; (8007d4c <fiprintf+0x20>)
 8007d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d3a:	6800      	ldr	r0, [r0, #0]
 8007d3c:	9301      	str	r3, [sp, #4]
 8007d3e:	f7fe ffab 	bl	8006c98 <_vfiprintf_r>
 8007d42:	b002      	add	sp, #8
 8007d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d48:	b003      	add	sp, #12
 8007d4a:	4770      	bx	lr
 8007d4c:	20000064 	.word	0x20000064

08007d50 <__ascii_wctomb>:
 8007d50:	b149      	cbz	r1, 8007d66 <__ascii_wctomb+0x16>
 8007d52:	2aff      	cmp	r2, #255	; 0xff
 8007d54:	bf85      	ittet	hi
 8007d56:	238a      	movhi	r3, #138	; 0x8a
 8007d58:	6003      	strhi	r3, [r0, #0]
 8007d5a:	700a      	strbls	r2, [r1, #0]
 8007d5c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007d60:	bf98      	it	ls
 8007d62:	2001      	movls	r0, #1
 8007d64:	4770      	bx	lr
 8007d66:	4608      	mov	r0, r1
 8007d68:	4770      	bx	lr

08007d6a <abort>:
 8007d6a:	b508      	push	{r3, lr}
 8007d6c:	2006      	movs	r0, #6
 8007d6e:	f000 f82b 	bl	8007dc8 <raise>
 8007d72:	2001      	movs	r0, #1
 8007d74:	f7f9 fda4 	bl	80018c0 <_exit>

08007d78 <_raise_r>:
 8007d78:	291f      	cmp	r1, #31
 8007d7a:	b538      	push	{r3, r4, r5, lr}
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	460d      	mov	r5, r1
 8007d80:	d904      	bls.n	8007d8c <_raise_r+0x14>
 8007d82:	2316      	movs	r3, #22
 8007d84:	6003      	str	r3, [r0, #0]
 8007d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007d8e:	b112      	cbz	r2, 8007d96 <_raise_r+0x1e>
 8007d90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d94:	b94b      	cbnz	r3, 8007daa <_raise_r+0x32>
 8007d96:	4620      	mov	r0, r4
 8007d98:	f000 f830 	bl	8007dfc <_getpid_r>
 8007d9c:	462a      	mov	r2, r5
 8007d9e:	4601      	mov	r1, r0
 8007da0:	4620      	mov	r0, r4
 8007da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007da6:	f000 b817 	b.w	8007dd8 <_kill_r>
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d00a      	beq.n	8007dc4 <_raise_r+0x4c>
 8007dae:	1c59      	adds	r1, r3, #1
 8007db0:	d103      	bne.n	8007dba <_raise_r+0x42>
 8007db2:	2316      	movs	r3, #22
 8007db4:	6003      	str	r3, [r0, #0]
 8007db6:	2001      	movs	r0, #1
 8007db8:	e7e7      	b.n	8007d8a <_raise_r+0x12>
 8007dba:	2400      	movs	r4, #0
 8007dbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	4798      	blx	r3
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	e7e0      	b.n	8007d8a <_raise_r+0x12>

08007dc8 <raise>:
 8007dc8:	4b02      	ldr	r3, [pc, #8]	; (8007dd4 <raise+0xc>)
 8007dca:	4601      	mov	r1, r0
 8007dcc:	6818      	ldr	r0, [r3, #0]
 8007dce:	f7ff bfd3 	b.w	8007d78 <_raise_r>
 8007dd2:	bf00      	nop
 8007dd4:	20000064 	.word	0x20000064

08007dd8 <_kill_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	4d07      	ldr	r5, [pc, #28]	; (8007df8 <_kill_r+0x20>)
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4604      	mov	r4, r0
 8007de0:	4608      	mov	r0, r1
 8007de2:	4611      	mov	r1, r2
 8007de4:	602b      	str	r3, [r5, #0]
 8007de6:	f7f9 fd5b 	bl	80018a0 <_kill>
 8007dea:	1c43      	adds	r3, r0, #1
 8007dec:	d102      	bne.n	8007df4 <_kill_r+0x1c>
 8007dee:	682b      	ldr	r3, [r5, #0]
 8007df0:	b103      	cbz	r3, 8007df4 <_kill_r+0x1c>
 8007df2:	6023      	str	r3, [r4, #0]
 8007df4:	bd38      	pop	{r3, r4, r5, pc}
 8007df6:	bf00      	nop
 8007df8:	2000042c 	.word	0x2000042c

08007dfc <_getpid_r>:
 8007dfc:	f7f9 bd48 	b.w	8001890 <_getpid>

08007e00 <_init>:
 8007e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e02:	bf00      	nop
 8007e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e06:	bc08      	pop	{r3}
 8007e08:	469e      	mov	lr, r3
 8007e0a:	4770      	bx	lr

08007e0c <_fini>:
 8007e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0e:	bf00      	nop
 8007e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e12:	bc08      	pop	{r3}
 8007e14:	469e      	mov	lr, r3
 8007e16:	4770      	bx	lr
