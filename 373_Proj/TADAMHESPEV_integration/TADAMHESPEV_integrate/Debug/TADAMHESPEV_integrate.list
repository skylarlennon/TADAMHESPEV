
TADAMHESPEV_integrate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c448  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800c608  0800c608  0001c608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cadc  0800cadc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cadc  0800cadc  0001cadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cae4  0800cae4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cae4  0800cae4  0001cae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cae8  0800cae8  0001cae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800caec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  200001d8  0800ccc4  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  0800ccc4  000207ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c789  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003581  00000000  00000000  0003c9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e0  00000000  00000000  0003ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001396  00000000  00000000  00041838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e78c  00000000  00000000  00042bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eca3  00000000  00000000  0007135a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00120137  00000000  00000000  0008fffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007bb4  00000000  00000000  001b0134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  001b7ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c5f0 	.word	0x0800c5f0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	0800c5f0 	.word	0x0800c5f0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <setupAccModule>:
#define OUT_Z_L_A 0x2C
#define OUT_Z_H_A 0x2D

extern I2C_HandleTypeDef hi2c1;

void setupAccModule(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
	uint8_t buf[10]= {ACC_IR_CTRL1, CTR1_SETUP};
 8000f7a:	f249 7320 	movw	r3, #38688	; 0x9720
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	809a      	strh	r2, [r3, #4]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDR << 1, buf, 2, 1000);
 8000f8a:	1d3a      	adds	r2, r7, #4
 8000f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2302      	movs	r3, #2
 8000f94:	2132      	movs	r1, #50	; 0x32
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <setupAccModule+0x48>)
 8000f98:	f003 fdb6 	bl	8004b08 <HAL_I2C_Master_Transmit>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
	if(ret == 0){
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d103      	bne.n	8000fae <setupAccModule+0x3a>
		printf("We gucci\n");
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <setupAccModule+0x4c>)
 8000fa8:	f009 fb86 	bl	800a6b8 <puts>
	}
	else{
		printf("we not gucci setupAccModule\n");
	}
}
 8000fac:	e002      	b.n	8000fb4 <setupAccModule+0x40>
		printf("we not gucci setupAccModule\n");
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <setupAccModule+0x50>)
 8000fb0:	f009 fb82 	bl	800a6b8 <puts>
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000034c 	.word	0x2000034c
 8000fc0:	0800c608 	.word	0x0800c608
 8000fc4:	0800c614 	.word	0x0800c614

08000fc8 <ReadAccData>:
	printf("Raw:\t%u\tAcc:\t%f\tBinary:\t",raw,acc);
	printBinary(accBin);
	printf("\n");
}

float ReadAccData(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2140      	movs	r1, #64	; 0x40
 8000fd2:	482c      	ldr	r0, [pc, #176]	; (8001084 <ReadAccData+0xbc>)
 8000fd4:	f003 fce4 	bl	80049a0 <HAL_GPIO_WritePin>
		uint8_t buf[1]= {OUT_X_L_A | 1 << 7}; //Auto-Increment OUT_X_L_A
 8000fd8:	23a8      	movs	r3, #168	; 0xa8
 8000fda:	713b      	strb	r3, [r7, #4]
		uint8_t rbuf[2];
		float accVal = 0;
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]

		HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDR << 1, buf, 1, 1000);
 8000fe2:	1d3a      	adds	r2, r7, #4
 8000fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	2132      	movs	r1, #50	; 0x32
 8000fee:	4826      	ldr	r0, [pc, #152]	; (8001088 <ReadAccData+0xc0>)
 8000ff0:	f003 fd8a 	bl	8004b08 <HAL_I2C_Master_Transmit>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	72fb      	strb	r3, [r7, #11]
		//[TODO] - Have error checking for communication errors
		ret =  HAL_I2C_Master_Receive(&hi2c1, ACC_I2C_ADDR << 1, rbuf, 2, 1000);
 8000ff8:	463a      	mov	r2, r7
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2302      	movs	r3, #2
 8001002:	2132      	movs	r1, #50	; 0x32
 8001004:	4820      	ldr	r0, [pc, #128]	; (8001088 <ReadAccData+0xc0>)
 8001006:	f003 fe97 	bl	8004d38 <HAL_I2C_Master_Receive>
 800100a:	4603      	mov	r3, r0
 800100c:	72fb      	strb	r3, [r7, #11]
		//[TODO] - Have error checking for communication errors

		uint16_t raw = (rbuf[1] << 8) | rbuf[0];	// 2's compliment, +-2g's
 800100e:	787b      	ldrb	r3, [r7, #1]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	783b      	ldrb	r3, [r7, #0]
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	813b      	strh	r3, [r7, #8]
		if(raw > 64100){
 800101e:	893b      	ldrh	r3, [r7, #8]
 8001020:	f64f 2264 	movw	r2, #64100	; 0xfa64
 8001024:	4293      	cmp	r3, r2
 8001026:	d903      	bls.n	8001030 <ReadAccData+0x68>
			accVal = 0;
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e021      	b.n	8001074 <ReadAccData+0xac>
		}
		else if(raw & 0x8000){ //if value is negative
 8001030:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	da10      	bge.n	800105a <ReadAccData+0x92>
			int16_t temp = -((raw ^ 0xFFFF) + 1);
 8001038:	893b      	ldrh	r3, [r7, #8]
 800103a:	80fb      	strh	r3, [r7, #6]
			accVal = (temp / (float)(1 << 15))*2;
 800103c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001048:	eddf 6a10 	vldr	s13, [pc, #64]	; 800108c <ReadAccData+0xc4>
 800104c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001050:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001054:	edc7 7a03 	vstr	s15, [r7, #12]
 8001058:	e00c      	b.n	8001074 <ReadAccData+0xac>
		}
		else{ //positive acceleration
			accVal = (raw / (float)((1 << 15) - 1))*2;
 800105a:	893b      	ldrh	r3, [r7, #8]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001090 <ReadAccData+0xc8>
 8001068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001070:	edc7 7a03 	vstr	s15, [r7, #12]
		}
//		printf("Accel:\t%f\n",accVal);
		return accVal;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	ee07 3a90 	vmov	s15, r3
		//[TODO] - error check if binAcc = -1;

//		printf("%i\t%b\n",binAcc);

//		printf("%i\t%f\n",cnt++, accVal);
}
 800107a:	eeb0 0a67 	vmov.f32	s0, s15
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	48000400 	.word	0x48000400
 8001088:	2000034c 	.word	0x2000034c
 800108c:	47000000 	.word	0x47000000
 8001090:	46fffe00 	.word	0x46fffe00

08001094 <setupLEDS>:
uint8_t clearLEDs[NUM_MSG_BYTES];
uint8_t BLANK_LED[4] = {0xE0, 0x00, 0x00, 0x00};

extern SPI_HandleTypeDef hspi2;

void setupLEDS(){
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
	float acc_inc = MAX_ACCEL/NUM_LEDS;
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <setupLEDS+0xb8>)
 800109c:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < NUM_LEDS; ++i){
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e028      	b.n	80010f6 <setupLEDS+0x62>
		//setup LED_INDEX_THRESHOLD
		LED_INDEX_THRESHOLD[i] = i*acc_inc;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b6:	4a26      	ldr	r2, [pc, #152]	; (8001150 <setupLEDS+0xbc>)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	edc3 7a00 	vstr	s15, [r3]

		//setup LED_COLOR_ARR
		if(i < NUM_GREEN){
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	dc05      	bgt.n	80010d4 <setupLEDS+0x40>
			LED_COLOR_ARR[i] = 0; // 0 = green
 80010c8:	4a22      	ldr	r2, [pc, #136]	; (8001154 <setupLEDS+0xc0>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	e00d      	b.n	80010f0 <setupLEDS+0x5c>
		}
		else if(i < NUM_GREEN + NUM_YELLOW){
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	dc05      	bgt.n	80010e6 <setupLEDS+0x52>
			LED_COLOR_ARR[i] = 1; // 1 = yellow
 80010da:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <setupLEDS+0xc0>)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e004      	b.n	80010f0 <setupLEDS+0x5c>
		}
		else{
			LED_COLOR_ARR[i] = 2; // 2 = red
 80010e6:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <setupLEDS+0xc0>)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	2202      	movs	r2, #2
 80010ee:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_LEDS; ++i){
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	3301      	adds	r3, #1
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2b0e      	cmp	r3, #14
 80010fa:	ddd3      	ble.n	80010a4 <setupLEDS+0x10>
		}
	}

	//initialize a blank LED strip array
	for(int j = 0; j < NUM_MSG_BYTES; ++j){
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	e01a      	b.n	8001138 <setupLEDS+0xa4>
		if(j < 4){
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b03      	cmp	r3, #3
 8001106:	dc05      	bgt.n	8001114 <setupLEDS+0x80>
			clearLEDs[j] = 0;
 8001108:	4a13      	ldr	r2, [pc, #76]	; (8001158 <setupLEDS+0xc4>)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	4413      	add	r3, r2
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	e00e      	b.n	8001132 <setupLEDS+0x9e>
		}
		else if(j < (NUM_MSG_BYTES - 1)){
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	2b3f      	cmp	r3, #63	; 0x3f
 8001118:	dc06      	bgt.n	8001128 <setupLEDS+0x94>
			memcpy(&clearLEDs[j],BLANK_LED,sizeof(BLANK_LED));
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <setupLEDS+0xc4>)
 800111e:	4413      	add	r3, r2
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <setupLEDS+0xc8>)
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e004      	b.n	8001132 <setupLEDS+0x9e>
		}
		else{
			clearLEDs[j] = 0;
 8001128:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <setupLEDS+0xc4>)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	4413      	add	r3, r2
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < NUM_MSG_BYTES; ++j){
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3301      	adds	r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b40      	cmp	r3, #64	; 0x40
 800113c:	dde1      	ble.n	8001102 <setupLEDS+0x6e>
		}
	}
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	3e088889 	.word	0x3e088889
 8001150:	200001f4 	.word	0x200001f4
 8001154:	20000230 	.word	0x20000230
 8001158:	20000240 	.word	0x20000240
 800115c:	20000000 	.word	0x20000000

08001160 <makeLEDFrame>:
	if(ret != HAL_OK){
		//There is a problem
	}
}

void makeLEDFrame(uint8_t* frame, uint8_t gr_yel_red){
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	switch(gr_yel_red){
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d026      	beq.n	80011c0 <makeLEDFrame+0x60>
 8001172:	2b02      	cmp	r3, #2
 8001174:	dc34      	bgt.n	80011e0 <makeLEDFrame+0x80>
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <makeLEDFrame+0x20>
 800117a:	2b01      	cmp	r3, #1
 800117c:	d010      	beq.n	80011a0 <makeLEDFrame+0x40>
 800117e:	e02f      	b.n	80011e0 <makeLEDFrame+0x80>
		case 0:									// green
			*(frame) = LED_FRAME_START_BRIGHT;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	22e3      	movs	r2, #227	; 0xe3
 8001184:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 	//green
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3301      	adds	r3, #1
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 255; 		//blue
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3302      	adds	r3, #2
 8001192:	22ff      	movs	r2, #255	; 0xff
 8001194:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 0;		//red
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3303      	adds	r3, #3
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
			break;
 800119e:	e02f      	b.n	8001200 <makeLEDFrame+0xa0>
		case 1:					 				// yellow
			*(frame) = LED_FRAME_START_BRIGHT;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	22e3      	movs	r2, #227	; 0xe3
 80011a4:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 	//green
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3301      	adds	r3, #1
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 255; 		//blue
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3302      	adds	r3, #2
 80011b2:	22ff      	movs	r2, #255	; 0xff
 80011b4:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 255;		//red
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3303      	adds	r3, #3
 80011ba:	22ff      	movs	r2, #255	; 0xff
 80011bc:	701a      	strb	r2, [r3, #0]
			break;
 80011be:	e01f      	b.n	8001200 <makeLEDFrame+0xa0>
		case 2:					 				// red
			*(frame) = LED_FRAME_START_BRIGHT;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	22e3      	movs	r2, #227	; 0xe3
 80011c4:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 		//green
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3301      	adds	r3, #1
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 0;	 	//blue
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3302      	adds	r3, #2
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 255;		//red
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3303      	adds	r3, #3
 80011da:	22ff      	movs	r2, #255	; 0xff
 80011dc:	701a      	strb	r2, [r3, #0]
			break;
 80011de:	e00f      	b.n	8001200 <makeLEDFrame+0xa0>
		default:								// no brightness
			*(frame) = LED_FRAME_START_OFF;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	22e0      	movs	r2, #224	; 0xe0
 80011e4:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 		//green
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3301      	adds	r3, #1
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 0; 		//blue
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3302      	adds	r3, #2
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 0;		//red
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3303      	adds	r3, #3
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
			break;
 80011fe:	bf00      	nop
			//	[TODO] maybe try making them all off rather than having blue?
	}

}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <printLEDs>:

void printLEDs(float accVal){
 800120c:	b580      	push	{r7, lr}
 800120e:	b096      	sub	sp, #88	; 0x58
 8001210:	af00      	add	r7, sp, #0
 8001212:	ed87 0a01 	vstr	s0, [r7, #4]
	accVal = fabs(accVal);
 8001216:	edd7 7a01 	vldr	s15, [r7, #4]
 800121a:	eef0 7ae7 	vabs.f32	s15, s15
 800121e:	edc7 7a01 	vstr	s15, [r7, #4]

	uint8_t led_msg[NUM_MSG_BYTES];

	//create start frame
	int i = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	657b      	str	r3, [r7, #84]	; 0x54
	for(; i < 4; ++i){
 8001226:	e008      	b.n	800123a <printLEDs+0x2e>
		led_msg[i] = 0;
 8001228:	f107 020c 	add.w	r2, r7, #12
 800122c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800122e:	4413      	add	r3, r2
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
	for(; i < 4; ++i){
 8001234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001236:	3301      	adds	r3, #1
 8001238:	657b      	str	r3, [r7, #84]	; 0x54
 800123a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800123c:	2b03      	cmp	r3, #3
 800123e:	ddf3      	ble.n	8001228 <printLEDs+0x1c>
	}

	//create LED frame
	for(int j = 0; j < NUM_LEDS; ++j){
 8001240:	2300      	movs	r3, #0
 8001242:	653b      	str	r3, [r7, #80]	; 0x50
 8001244:	e029      	b.n	800129a <printLEDs+0x8e>
		uint8_t led_frame[4];
		if(accVal > LED_INDEX_THRESHOLD[j]){
 8001246:	4a27      	ldr	r2, [pc, #156]	; (80012e4 <printLEDs+0xd8>)
 8001248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	ed97 7a01 	vldr	s14, [r7, #4]
 8001256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125e:	dd0a      	ble.n	8001276 <printLEDs+0x6a>
			makeLEDFrame(led_frame,LED_COLOR_ARR[j]); //LED_COLOR_ARR[j] = 0,1,2
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <printLEDs+0xdc>)
 8001262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001264:	4413      	add	r3, r2
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff76 	bl	8001160 <makeLEDFrame>
 8001274:	e005      	b.n	8001282 <printLEDs+0x76>
		}
		else{
			makeLEDFrame(led_frame,4); //no brightness
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	2104      	movs	r1, #4
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff6f 	bl	8001160 <makeLEDFrame>
		}
		//add the frame to the rest of the message
		memcpy(&led_msg[i],led_frame,sizeof(led_frame));
 8001282:	f107 020c 	add.w	r2, r7, #12
 8001286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001288:	4413      	add	r3, r2
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	601a      	str	r2, [r3, #0]
//		led_msg[i] = led_frame;
		i = i + 4;
 800128e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001290:	3304      	adds	r3, #4
 8001292:	657b      	str	r3, [r7, #84]	; 0x54
	for(int j = 0; j < NUM_LEDS; ++j){
 8001294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001296:	3301      	adds	r3, #1
 8001298:	653b      	str	r3, [r7, #80]	; 0x50
 800129a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800129c:	2b0e      	cmp	r3, #14
 800129e:	ddd2      	ble.n	8001246 <printLEDs+0x3a>
			//full pause
		}
	}

	//create the end frame
	for(; i < NUM_MSG_BYTES; ++i){
 80012a0:	e008      	b.n	80012b4 <printLEDs+0xa8>
		led_msg[i] = 0;
 80012a2:	f107 020c 	add.w	r2, r7, #12
 80012a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012a8:	4413      	add	r3, r2
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
	for(; i < NUM_MSG_BYTES; ++i){
 80012ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b0:	3301      	adds	r3, #1
 80012b2:	657b      	str	r3, [r7, #84]	; 0x54
 80012b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b6:	2b40      	cmp	r3, #64	; 0x40
 80012b8:	ddf3      	ble.n	80012a2 <printLEDs+0x96>
	}

	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi2, (uint8_t *)led_msg, NUM_MSG_BYTES,1000);
 80012ba:	f107 010c 	add.w	r1, r7, #12
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	2241      	movs	r2, #65	; 0x41
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <printLEDs+0xe0>)
 80012c6:	f005 febe 	bl	8007046 <HAL_SPI_Transmit>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if(ret != HAL_OK){
		//There is a problem
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2140      	movs	r1, #64	; 0x40
 80012d4:	4806      	ldr	r0, [pc, #24]	; (80012f0 <printLEDs+0xe4>)
 80012d6:	f003 fb63 	bl	80049a0 <HAL_GPIO_WritePin>
}
 80012da:	bf00      	nop
 80012dc:	3758      	adds	r7, #88	; 0x58
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001f4 	.word	0x200001f4
 80012e8:	20000230 	.word	0x20000230
 80012ec:	2000052c 	.word	0x2000052c
 80012f0:	48000400 	.word	0x48000400

080012f4 <TADStructToBuffer>:
	data->speed = buf[2];
	data->voltage = buf[3];
	data->current = buf[4];
}

inline void TADStructToBuffer(float buf[], volatile struct TelData *data){
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
	buf[0] = data->accel;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
	buf[1] = data->temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3304      	adds	r3, #4
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	6852      	ldr	r2, [r2, #4]
 800130e:	601a      	str	r2, [r3, #0]
	buf[2] = data->speed;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3308      	adds	r3, #8
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	6892      	ldr	r2, [r2, #8]
 8001318:	601a      	str	r2, [r3, #0]
	buf[3] = data->voltage;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	330c      	adds	r3, #12
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	68d2      	ldr	r2, [r2, #12]
 8001322:	601a      	str	r2, [r3, #0]
	buf[4] = data->current;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3310      	adds	r3, #16
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	6912      	ldr	r2, [r2, #16]
 800132c:	601a      	str	r2, [r3, #0]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <read_Temperature>:

volatile uint16_t curVoltADC_DMA[2]; //https://www.youtube.com/watch?v=AloHXBk6Bfk
const int adcChannelCount = 2;
volatile int adcConversionComplete = 0;//set by callback

uint16_t read_Temperature(uint16_t GPIO_PIN) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
	uint16_t spi_buf[2];
	// Set the CS1 pin to low
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN, GPIO_PIN_RESET);
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	2200      	movs	r2, #0
 800134a:	4619      	mov	r1, r3
 800134c:	481e      	ldr	r0, [pc, #120]	; (80013c8 <read_Temperature+0x8c>)
 800134e:	f003 fb27 	bl	80049a0 <HAL_GPIO_WritePin>

	// Receive the data
	HAL_SPI_Receive(&hspi1, spi_buf, sizeof(spi_buf), 100);
 8001352:	f107 010c 	add.w	r1, r7, #12
 8001356:	2364      	movs	r3, #100	; 0x64
 8001358:	2204      	movs	r2, #4
 800135a:	481c      	ldr	r0, [pc, #112]	; (80013cc <read_Temperature+0x90>)
 800135c:	f005 ffe8 	bl	8007330 <HAL_SPI_Receive>

	// Set the CS pin back to high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN, GPIO_PIN_SET);
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	2201      	movs	r2, #1
 8001364:	4619      	mov	r1, r3
 8001366:	4818      	ldr	r0, [pc, #96]	; (80013c8 <read_Temperature+0x8c>)
 8001368:	f003 fb1a 	bl	80049a0 <HAL_GPIO_WritePin>
//	HAL_Delay(1000);

	// handle the data
	// spi_buf[0] contains the first 16 bits of data
	// spi_buf[1] contains the last 16 bits of data
	uint16_t external_temp = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	82fb      	strh	r3, [r7, #22]
	uint16_t internal_temp = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	82bb      	strh	r3, [r7, #20]
	uint8_t fault = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	74fb      	strb	r3, [r7, #19]
	external_temp |= (spi_buf[0] >> 2) & 0xFFFF; // keep all data values
 8001378:	89bb      	ldrh	r3, [r7, #12]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	b29a      	uxth	r2, r3
 800137e:	8afb      	ldrh	r3, [r7, #22]
 8001380:	4313      	orrs	r3, r2
 8001382:	82fb      	strh	r3, [r7, #22]
	internal_temp |= (spi_buf[1] >> 4) & 0xFFFF; // keep all data values
 8001384:	89fb      	ldrh	r3, [r7, #14]
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	b29a      	uxth	r2, r3
 800138a:	8abb      	ldrh	r3, [r7, #20]
 800138c:	4313      	orrs	r3, r2
 800138e:	82bb      	strh	r3, [r7, #20]
	fault |= spi_buf[0] & 0x01; // only want the LSB
 8001390:	89bb      	ldrh	r3, [r7, #12]
 8001392:	b25b      	sxtb	r3, r3
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	b25a      	sxtb	r2, r3
 800139a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800139e:	4313      	orrs	r3, r2
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	74fb      	strb	r3, [r7, #19]
//	printf("External Temperature of %d: %d \n\r", GPIO_PIN, (external_temp/4));
//	printf("Internal Temperature of %d: %d \n\r", GPIO_PIN, (internal_temp/16));
	if(fault) {
 80013a4:	7cfb      	ldrb	r3, [r7, #19]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <read_Temperature+0x74>
		printf("ERROR \n\r");
 80013aa:	4809      	ldr	r0, [pc, #36]	; (80013d0 <read_Temperature+0x94>)
 80013ac:	f009 f91e 	bl	800a5ec <iprintf>
	}


	// reset spi_buffer
	spi_buf[0] = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	81bb      	strh	r3, [r7, #12]
	spi_buf[1] = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	81fb      	strh	r3, [r7, #14]

	return external_temp/4;
 80013b8:	8afb      	ldrh	r3, [r7, #22]
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	b29b      	uxth	r3, r3
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	48000400 	.word	0x48000400
 80013cc:	200004c8 	.word	0x200004c8
 80013d0:	0800c650 	.word	0x0800c650
 80013d4:	00000000 	.word	0x00000000

080013d8 <CalculateCurrent>:

#define NUM_CUR_READS 10
void CalculateCurrent(uint16_t adcRead){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
	float adcVoltage = adcRead*3.3/(0b1<<12); //adc equation to get input voltage
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f8b5 	bl	8000554 <__aeabi_i2d>
 80013ea:	a321      	add	r3, pc, #132	; (adr r3, 8001470 <CalculateCurrent+0x98>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff f91a 	bl	8000628 <__aeabi_dmul>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <CalculateCurrent+0x90>)
 8001402:	f7ff fa3b 	bl	800087c <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff fbe3 	bl	8000bd8 <__aeabi_d2f>
 8001412:	4603      	mov	r3, r0
 8001414:	60fb      	str	r3, [r7, #12]
	teldata.current = (adcVoltage - 1.72)/0.0545;
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f7ff f8ae 	bl	8000578 <__aeabi_f2d>
 800141c:	a30e      	add	r3, pc, #56	; (adr r3, 8001458 <CalculateCurrent+0x80>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7fe ff49 	bl	80002b8 <__aeabi_dsub>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	a30c      	add	r3, pc, #48	; (adr r3, 8001460 <CalculateCurrent+0x88>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff fa22 	bl	800087c <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fbca 	bl	8000bd8 <__aeabi_d2f>
 8001444:	4603      	mov	r3, r0
 8001446:	4a09      	ldr	r2, [pc, #36]	; (800146c <CalculateCurrent+0x94>)
 8001448:	6113      	str	r3, [r2, #16]
}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	f3af 8000 	nop.w
 8001458:	b851eb85 	.word	0xb851eb85
 800145c:	3ffb851e 	.word	0x3ffb851e
 8001460:	8b439581 	.word	0x8b439581
 8001464:	3fabe76c 	.word	0x3fabe76c
 8001468:	40b00000 	.word	0x40b00000
 800146c:	20000674 	.word	0x20000674
 8001470:	66666666 	.word	0x66666666
 8001474:	400a6666 	.word	0x400a6666

08001478 <CalculateVoltage>:

void CalculateVoltage(uint16_t adcRead){
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	80fb      	strh	r3, [r7, #6]
	float adcVoltage = adcRead * 3.3 / (0b1 << 12); //adc equation to get input voltage
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f865 	bl	8000554 <__aeabi_i2d>
 800148a:	a31b      	add	r3, pc, #108	; (adr r3, 80014f8 <CalculateVoltage+0x80>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f8ca 	bl	8000628 <__aeabi_dmul>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <CalculateVoltage+0x88>)
 80014a2:	f7ff f9eb 	bl	800087c <__aeabi_ddiv>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff fb93 	bl	8000bd8 <__aeabi_d2f>
 80014b2:	4603      	mov	r3, r0
 80014b4:	60fb      	str	r3, [r7, #12]
	teldata.voltage = (adcVoltage/3.3)*69;
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff f85e 	bl	8000578 <__aeabi_f2d>
 80014bc:	a30e      	add	r3, pc, #56	; (adr r3, 80014f8 <CalculateVoltage+0x80>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff f9db 	bl	800087c <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <CalculateVoltage+0x8c>)
 80014d4:	f7ff f8a8 	bl	8000628 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fb7a 	bl	8000bd8 <__aeabi_d2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a08      	ldr	r2, [pc, #32]	; (8001508 <CalculateVoltage+0x90>)
 80014e8:	60d3      	str	r3, [r2, #12]
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	f3af 8000 	nop.w
 80014f8:	66666666 	.word	0x66666666
 80014fc:	400a6666 	.word	0x400a6666
 8001500:	40b00000 	.word	0x40b00000
 8001504:	40514000 	.word	0x40514000
 8001508:	20000674 	.word	0x20000674

0800150c <TakeADCMeasurement>:

void TakeADCMeasurement(){
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) curVoltADC_DMA, adcChannelCount);
 8001510:	2302      	movs	r3, #2
 8001512:	461a      	mov	r2, r3
 8001514:	4906      	ldr	r1, [pc, #24]	; (8001530 <TakeADCMeasurement+0x24>)
 8001516:	4807      	ldr	r0, [pc, #28]	; (8001534 <TakeADCMeasurement+0x28>)
 8001518:	f001 ff7e 	bl	8003418 <HAL_ADC_Start_DMA>
	while (adcConversionComplete == 0);
 800151c:	bf00      	nop
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <TakeADCMeasurement+0x2c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0fb      	beq.n	800151e <TakeADCMeasurement+0x12>
	adcConversionComplete = 0;
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <TakeADCMeasurement+0x2c>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000688 	.word	0x20000688
 8001534:	20000284 	.word	0x20000284
 8001538:	2000068c 	.word	0x2000068c

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b090      	sub	sp, #64	; 0x40
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f001 fbb0 	bl	8002ca6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f8f9 	bl	800173c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(6000); //wait for lcd to set up
 800154a:	f241 7070 	movw	r0, #6000	; 0x1770
 800154e:	f001 fc1f 	bl	8002d90 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001552:	f000 fc17 	bl	8001d84 <MX_GPIO_Init>
  MX_DMA_Init();
 8001556:	f000 fbeb 	bl	8001d30 <MX_DMA_Init>
  MX_I2C1_Init();
 800155a:	f000 f9a9 	bl	80018b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800155e:	f000 fa7d 	bl	8001a5c <MX_SPI1_Init>
  MX_TIM3_Init();
 8001562:	f000 faf7 	bl	8001b54 <MX_TIM3_Init>
  MX_TIM15_Init();
 8001566:	f000 fb45 	bl	8001bf4 <MX_TIM15_Init>
  MX_TIM17_Init();
 800156a:	f000 fb95 	bl	8001c98 <MX_TIM17_Init>
  MX_LPUART1_UART_Init();
 800156e:	f000 f9dd 	bl	800192c <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8001572:	f000 fab1 	bl	8001ad8 <MX_SPI2_Init>
  MX_UART4_Init();
 8001576:	f000 fa25 	bl	80019c4 <MX_UART4_Init>
  MX_ADC1_Init();
 800157a:	f000 f925 	bl	80017c8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("start integrated\n");
 800157e:	485e      	ldr	r0, [pc, #376]	; (80016f8 <main+0x1bc>)
 8001580:	f009 f89a 	bl	800a6b8 <puts>
  	uint8_t junk[19];
	HAL_UART_Transmit(&huart4, (uint8_t*) &junk, sizeof(junk), 100); //clear uart of secondary mcu
 8001584:	f107 0118 	add.w	r1, r7, #24
 8001588:	2364      	movs	r3, #100	; 0x64
 800158a:	2213      	movs	r2, #19
 800158c:	485b      	ldr	r0, [pc, #364]	; (80016fc <main+0x1c0>)
 800158e:	f007 fc5d 	bl	8008e4c <HAL_UART_Transmit>
	// CS for all sensors should be high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2120      	movs	r1, #32
 8001596:	485a      	ldr	r0, [pc, #360]	; (8001700 <main+0x1c4>)
 8001598:	f003 fa02 	bl	80049a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	2104      	movs	r1, #4
 80015a0:	4857      	ldr	r0, [pc, #348]	; (8001700 <main+0x1c4>)
 80015a2:	f003 f9fd 	bl	80049a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80015a6:	2201      	movs	r2, #1
 80015a8:	2140      	movs	r1, #64	; 0x40
 80015aa:	4855      	ldr	r0, [pc, #340]	; (8001700 <main+0x1c4>)
 80015ac:	f003 f9f8 	bl	80049a0 <HAL_GPIO_WritePin>



	setupAccModule();
 80015b0:	f7ff fce0 	bl	8000f74 <setupAccModule>
	setupLEDS();
 80015b4:	f7ff fd6e 	bl	8001094 <setupLEDS>

	// Start Timer
	HAL_TIM_Base_Start_IT(&htim3);
 80015b8:	4852      	ldr	r0, [pc, #328]	; (8001704 <main+0x1c8>)
 80015ba:	f006 fc27 	bl	8007e0c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim15);
 80015be:	4852      	ldr	r0, [pc, #328]	; (8001708 <main+0x1cc>)
 80015c0:	f006 fc24 	bl	8007e0c <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim17,TIM_CHANNEL_1);
 80015c4:	2100      	movs	r1, #0
 80015c6:	4851      	ldr	r0, [pc, #324]	; (800170c <main+0x1d0>)
 80015c8:	f006 fcf2 	bl	8007fb0 <HAL_TIM_IC_Start_IT>

	float buff[5];
	int voltageLoopCount = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
//		HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF);//wait for conversion to finish
//		ADC_VAL = HAL_ADC_GetValue(&hadc1);//retrieve value
//		teldata.current = ADC_VAL;
//		printf("adcval: %d\n", ADC_VAL);

	  	const int numSamples = 10;
 80015d0:	230a      	movs	r3, #10
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	uint32_t curAvg = 0, volAvg = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80015d8:	2300      	movs	r3, #0
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
	  	for(int i = 0; i < numSamples ; ++i){ //take 10 samples
 80015dc:	2300      	movs	r3, #0
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
 80015e0:	e012      	b.n	8001608 <main+0xcc>
	  		TakeADCMeasurement();
 80015e2:	f7ff ff93 	bl	800150c <TakeADCMeasurement>
	  		curAvg += curVoltADC_DMA[0];
 80015e6:	4b4a      	ldr	r3, [pc, #296]	; (8001710 <main+0x1d4>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f0:	4413      	add	r3, r2
 80015f2:	63bb      	str	r3, [r7, #56]	; 0x38
	  		volAvg += curVoltADC_DMA[1];
 80015f4:	4b46      	ldr	r3, [pc, #280]	; (8001710 <main+0x1d4>)
 80015f6:	885b      	ldrh	r3, [r3, #2]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fe:	4413      	add	r3, r2
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
	  	for(int i = 0; i < numSamples ; ++i){ //take 10 samples
 8001602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001604:	3301      	adds	r3, #1
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
 8001608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160c:	429a      	cmp	r2, r3
 800160e:	dbe8      	blt.n	80015e2 <main+0xa6>
	  	}
	  	curAvg/=numSamples;
 8001610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001614:	fbb2 f3f3 	udiv	r3, r2, r3
 8001618:	63bb      	str	r3, [r7, #56]	; 0x38
	  	volAvg/=numSamples;
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
	  	printf("CUR AVG %d, VOL AVG %d\n", curAvg, volAvg);
 8001624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001626:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001628:	483a      	ldr	r0, [pc, #232]	; (8001714 <main+0x1d8>)
 800162a:	f008 ffdf 	bl	800a5ec <iprintf>
	  	CalculateCurrent(curAvg);
 800162e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001630:	b29b      	uxth	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fed0 	bl	80013d8 <CalculateCurrent>
	  	if((++voltageLoopCount)%60==0) CalculateVoltage(volAvg);
 8001638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800163a:	3301      	adds	r3, #1
 800163c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800163e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001640:	4b35      	ldr	r3, [pc, #212]	; (8001718 <main+0x1dc>)
 8001642:	fb83 1302 	smull	r1, r3, r3, r2
 8001646:	4413      	add	r3, r2
 8001648:	1159      	asrs	r1, r3, #5
 800164a:	17d3      	asrs	r3, r2, #31
 800164c:	1ac9      	subs	r1, r1, r3
 800164e:	460b      	mov	r3, r1
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	1a5b      	subs	r3, r3, r1
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	1ad1      	subs	r1, r2, r3
 8001658:	2900      	cmp	r1, #0
 800165a:	d104      	bne.n	8001666 <main+0x12a>
 800165c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165e:	b29b      	uxth	r3, r3
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff09 	bl	8001478 <CalculateVoltage>
//	  	CalculateCurrent(curVoltADC_DMA[0]);
//	  	if((++voltageLoopCount)%60==0) CalculateVoltage(curVoltADC_DMA[1]);

	  	//printf("ADC CURRENT %d, ADC VOLT %d", curVoltADC_DMA[0], curVoltADC_DMA[1]);

		printf("Telemetry Data:\n");
 8001666:	482d      	ldr	r0, [pc, #180]	; (800171c <main+0x1e0>)
 8001668:	f009 f826 	bl	800a6b8 <puts>
		printf("Acceleration: %f\n", teldata.accel);
 800166c:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <main+0x1e4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff81 	bl	8000578 <__aeabi_f2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	482a      	ldr	r0, [pc, #168]	; (8001724 <main+0x1e8>)
 800167c:	f008 ffb6 	bl	800a5ec <iprintf>
		printf("Temperature: %f\n", teldata.temp);
 8001680:	4b27      	ldr	r3, [pc, #156]	; (8001720 <main+0x1e4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff77 	bl	8000578 <__aeabi_f2d>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4826      	ldr	r0, [pc, #152]	; (8001728 <main+0x1ec>)
 8001690:	f008 ffac 	bl	800a5ec <iprintf>
		printf("Speed: %f\n", teldata.speed);
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <main+0x1e4>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff6d 	bl	8000578 <__aeabi_f2d>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4822      	ldr	r0, [pc, #136]	; (800172c <main+0x1f0>)
 80016a4:	f008 ffa2 	bl	800a5ec <iprintf>
		printf("Voltage: %f\n", teldata.voltage);
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <main+0x1e4>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff63 	bl	8000578 <__aeabi_f2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	481e      	ldr	r0, [pc, #120]	; (8001730 <main+0x1f4>)
 80016b8:	f008 ff98 	bl	800a5ec <iprintf>
		printf("Current: %f\n\n", teldata.current);
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <main+0x1e4>)
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe ff59 	bl	8000578 <__aeabi_f2d>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	481a      	ldr	r0, [pc, #104]	; (8001734 <main+0x1f8>)
 80016cc:	f008 ff8e 	bl	800a5ec <iprintf>

		TADStructToBuffer(buff, &teldata);
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	4913      	ldr	r1, [pc, #76]	; (8001720 <main+0x1e4>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fe0d 	bl	80012f4 <TADStructToBuffer>
		HAL_UART_Transmit(&huart4, (uint8_t*) &buff, sizeof(buff), 100);
 80016da:	1d39      	adds	r1, r7, #4
 80016dc:	2364      	movs	r3, #100	; 0x64
 80016de:	2214      	movs	r2, #20
 80016e0:	4806      	ldr	r0, [pc, #24]	; (80016fc <main+0x1c0>)
 80016e2:	f007 fbb3 	bl	8008e4c <HAL_UART_Transmit>
		printf("uart trans\n");
 80016e6:	4814      	ldr	r0, [pc, #80]	; (8001738 <main+0x1fc>)
 80016e8:	f008 ffe6 	bl	800a6b8 <puts>
		HAL_Delay(1000);
 80016ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f0:	f001 fb4e 	bl	8002d90 <HAL_Delay>
  {
 80016f4:	e76c      	b.n	80015d0 <main+0x94>
 80016f6:	bf00      	nop
 80016f8:	0800c65c 	.word	0x0800c65c
 80016fc:	20000434 	.word	0x20000434
 8001700:	48000400 	.word	0x48000400
 8001704:	20000590 	.word	0x20000590
 8001708:	200005dc 	.word	0x200005dc
 800170c:	20000628 	.word	0x20000628
 8001710:	20000688 	.word	0x20000688
 8001714:	0800c670 	.word	0x0800c670
 8001718:	88888889 	.word	0x88888889
 800171c:	0800c688 	.word	0x0800c688
 8001720:	20000674 	.word	0x20000674
 8001724:	0800c698 	.word	0x0800c698
 8001728:	0800c6ac 	.word	0x0800c6ac
 800172c:	0800c6c0 	.word	0x0800c6c0
 8001730:	0800c6cc 	.word	0x0800c6cc
 8001734:	0800c6dc 	.word	0x0800c6dc
 8001738:	0800c6ec 	.word	0x0800c6ec

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b096      	sub	sp, #88	; 0x58
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	2244      	movs	r2, #68	; 0x44
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f009 f894 	bl	800a878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	463b      	mov	r3, r7
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800175e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001762:	f003 ff29 	bl	80055b8 <HAL_PWREx_ControlVoltageScaling>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800176c:	f000 fd20 	bl	80021b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001770:	2310      	movs	r3, #16
 8001772:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001774:	2301      	movs	r3, #1
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800177c:	2360      	movs	r3, #96	; 0x60
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001780:	2300      	movs	r3, #0
 8001782:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4618      	mov	r0, r3
 800178a:	f003 ffc9 	bl	8005720 <HAL_RCC_OscConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001794:	f000 fd0c 	bl	80021b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001798:	230f      	movs	r3, #15
 800179a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f004 fbcf 	bl	8005f54 <HAL_RCC_ClockConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80017bc:	f000 fcf8 	bl	80021b0 <Error_Handler>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3758      	adds	r7, #88	; 0x58
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ce:	463b      	mov	r3, r7
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <MX_ADC1_Init+0xd8>)
 80017e0:	4a30      	ldr	r2, [pc, #192]	; (80018a4 <MX_ADC1_Init+0xdc>)
 80017e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80017e4:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <MX_ADC1_Init+0xd8>)
 80017e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017ec:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <MX_ADC1_Init+0xd8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <MX_ADC1_Init+0xd8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017f8:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <MX_ADC1_Init+0xd8>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017fe:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <MX_ADC1_Init+0xd8>)
 8001800:	2204      	movs	r2, #4
 8001802:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001804:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <MX_ADC1_Init+0xd8>)
 8001806:	2200      	movs	r2, #0
 8001808:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <MX_ADC1_Init+0xd8>)
 800180c:	2200      	movs	r2, #0
 800180e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <MX_ADC1_Init+0xd8>)
 8001812:	2202      	movs	r2, #2
 8001814:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <MX_ADC1_Init+0xd8>)
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <MX_ADC1_Init+0xd8>)
 8001820:	2200      	movs	r2, #0
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <MX_ADC1_Init+0xd8>)
 8001826:	2200      	movs	r2, #0
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <MX_ADC1_Init+0xd8>)
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_ADC1_Init+0xd8>)
 8001834:	2200      	movs	r2, #0
 8001836:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <MX_ADC1_Init+0xd8>)
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001840:	4817      	ldr	r0, [pc, #92]	; (80018a0 <MX_ADC1_Init+0xd8>)
 8001842:	f001 fca3 	bl	800318c <HAL_ADC_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800184c:	f000 fcb0 	bl	80021b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <MX_ADC1_Init+0xe0>)
 8001852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001854:	2306      	movs	r3, #6
 8001856:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001858:	2307      	movs	r3, #7
 800185a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800185c:	237f      	movs	r3, #127	; 0x7f
 800185e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001860:	2304      	movs	r3, #4
 8001862:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001868:	463b      	mov	r3, r7
 800186a:	4619      	mov	r1, r3
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <MX_ADC1_Init+0xd8>)
 800186e:	f001 fe6b 	bl	8003548 <HAL_ADC_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001878:	f000 fc9a 	bl	80021b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <MX_ADC1_Init+0xe4>)
 800187e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001880:	230c      	movs	r3, #12
 8001882:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001884:	463b      	mov	r3, r7
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_ADC1_Init+0xd8>)
 800188a:	f001 fe5d 	bl	8003548 <HAL_ADC_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001894:	f000 fc8c 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000284 	.word	0x20000284
 80018a4:	50040000 	.word	0x50040000
 80018a8:	04300002 	.word	0x04300002
 80018ac:	08600004 	.word	0x08600004

080018b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <MX_I2C1_Init+0x74>)
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <MX_I2C1_Init+0x78>)
 80018b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MX_I2C1_Init+0x74>)
 80018bc:	f640 6214 	movw	r2, #3604	; 0xe14
 80018c0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <MX_I2C1_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <MX_I2C1_Init+0x74>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <MX_I2C1_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <MX_I2C1_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <MX_I2C1_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <MX_I2C1_Init+0x74>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_I2C1_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <MX_I2C1_Init+0x74>)
 80018ee:	f003 f86f 	bl	80049d0 <HAL_I2C_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018f8:	f000 fc5a 	bl	80021b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018fc:	2100      	movs	r1, #0
 80018fe:	4809      	ldr	r0, [pc, #36]	; (8001924 <MX_I2C1_Init+0x74>)
 8001900:	f003 fda2 	bl	8005448 <HAL_I2CEx_ConfigAnalogFilter>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800190a:	f000 fc51 	bl	80021b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800190e:	2100      	movs	r1, #0
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <MX_I2C1_Init+0x74>)
 8001912:	f003 fde4 	bl	80054de <HAL_I2CEx_ConfigDigitalFilter>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800191c:	f000 fc48 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000034c 	.word	0x2000034c
 8001928:	40005400 	.word	0x40005400

0800192c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <MX_LPUART1_UART_Init+0x90>)
 8001932:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <MX_LPUART1_UART_Init+0x94>)
 8001934:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001936:	4b21      	ldr	r3, [pc, #132]	; (80019bc <MX_LPUART1_UART_Init+0x90>)
 8001938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800193c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <MX_LPUART1_UART_Init+0x90>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <MX_LPUART1_UART_Init+0x90>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800194a:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <MX_LPUART1_UART_Init+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001950:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <MX_LPUART1_UART_Init+0x90>)
 8001952:	220c      	movs	r2, #12
 8001954:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <MX_LPUART1_UART_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <MX_LPUART1_UART_Init+0x90>)
 800195e:	2200      	movs	r2, #0
 8001960:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <MX_LPUART1_UART_Init+0x90>)
 8001964:	2200      	movs	r2, #0
 8001966:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <MX_LPUART1_UART_Init+0x90>)
 800196a:	2200      	movs	r2, #0
 800196c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <MX_LPUART1_UART_Init+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001974:	4811      	ldr	r0, [pc, #68]	; (80019bc <MX_LPUART1_UART_Init+0x90>)
 8001976:	f007 fa19 	bl	8008dac <HAL_UART_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001980:	f000 fc16 	bl	80021b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001984:	2100      	movs	r1, #0
 8001986:	480d      	ldr	r0, [pc, #52]	; (80019bc <MX_LPUART1_UART_Init+0x90>)
 8001988:	f008 f83e 	bl	8009a08 <HAL_UARTEx_SetTxFifoThreshold>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001992:	f000 fc0d 	bl	80021b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001996:	2100      	movs	r1, #0
 8001998:	4808      	ldr	r0, [pc, #32]	; (80019bc <MX_LPUART1_UART_Init+0x90>)
 800199a:	f008 f873 	bl	8009a84 <HAL_UARTEx_SetRxFifoThreshold>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019a4:	f000 fc04 	bl	80021b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <MX_LPUART1_UART_Init+0x90>)
 80019aa:	f007 fff4 	bl	8009996 <HAL_UARTEx_DisableFifoMode>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019b4:	f000 fbfc 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200003a0 	.word	0x200003a0
 80019c0:	40008000 	.word	0x40008000

080019c4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <MX_UART4_Init+0x90>)
 80019ca:	4a23      	ldr	r2, [pc, #140]	; (8001a58 <MX_UART4_Init+0x94>)
 80019cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <MX_UART4_Init+0x90>)
 80019d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019d6:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <MX_UART4_Init+0x90>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <MX_UART4_Init+0x90>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019e2:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <MX_UART4_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <MX_UART4_Init+0x90>)
 80019ea:	220c      	movs	r2, #12
 80019ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <MX_UART4_Init+0x90>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <MX_UART4_Init+0x90>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <MX_UART4_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <MX_UART4_Init+0x90>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <MX_UART4_Init+0x90>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a0c:	4811      	ldr	r0, [pc, #68]	; (8001a54 <MX_UART4_Init+0x90>)
 8001a0e:	f007 f9cd 	bl	8008dac <HAL_UART_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001a18:	f000 fbca 	bl	80021b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	480d      	ldr	r0, [pc, #52]	; (8001a54 <MX_UART4_Init+0x90>)
 8001a20:	f007 fff2 	bl	8009a08 <HAL_UARTEx_SetTxFifoThreshold>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001a2a:	f000 fbc1 	bl	80021b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4808      	ldr	r0, [pc, #32]	; (8001a54 <MX_UART4_Init+0x90>)
 8001a32:	f008 f827 	bl	8009a84 <HAL_UARTEx_SetRxFifoThreshold>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001a3c:	f000 fbb8 	bl	80021b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a40:	4804      	ldr	r0, [pc, #16]	; (8001a54 <MX_UART4_Init+0x90>)
 8001a42:	f007 ffa8 	bl	8009996 <HAL_UARTEx_DisableFifoMode>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001a4c:	f000 fbb0 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000434 	.word	0x20000434
 8001a58:	40004c00 	.word	0x40004c00

08001a5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <MX_SPI1_Init+0x74>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <MX_SPI1_Init+0x78>)
 8001a64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_SPI1_Init+0x74>)
 8001a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <MX_SPI1_Init+0x74>)
 8001a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a74:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <MX_SPI1_Init+0x74>)
 8001a78:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001a7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_SPI1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_SPI1_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_SPI1_Init+0x74>)
 8001a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_SPI1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <MX_SPI1_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_SPI1_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <MX_SPI1_Init+0x74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_SPI1_Init+0x74>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <MX_SPI1_Init+0x74>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_SPI1_Init+0x74>)
 8001ab8:	2208      	movs	r2, #8
 8001aba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001abc:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <MX_SPI1_Init+0x74>)
 8001abe:	f005 fa1f 	bl	8006f00 <HAL_SPI_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001ac8:	f000 fb72 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200004c8 	.word	0x200004c8
 8001ad4:	40013000 	.word	0x40013000

08001ad8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <MX_SPI2_Init+0x74>)
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <MX_SPI2_Init+0x78>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_SPI2_Init+0x74>)
 8001ae4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ae8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <MX_SPI2_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001af0:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <MX_SPI2_Init+0x74>)
 8001af2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001af6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_SPI2_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <MX_SPI2_Init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_SPI2_Init+0x74>)
 8001b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_SPI2_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_SPI2_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <MX_SPI2_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <MX_SPI2_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <MX_SPI2_Init+0x74>)
 8001b26:	2207      	movs	r2, #7
 8001b28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <MX_SPI2_Init+0x74>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_SPI2_Init+0x74>)
 8001b32:	2208      	movs	r2, #8
 8001b34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_SPI2_Init+0x74>)
 8001b38:	f005 f9e2 	bl	8006f00 <HAL_SPI_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001b42:	f000 fb35 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	2000052c 	.word	0x2000052c
 8001b50:	40003800 	.word	0x40003800

08001b54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5a:	f107 0310 	add.w	r3, r7, #16
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <MX_TIM3_Init+0x98>)
 8001b74:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <MX_TIM3_Init+0x9c>)
 8001b76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3999;
 8001b78:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <MX_TIM3_Init+0x98>)
 8001b7a:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001b7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b80:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <MX_TIM3_Init+0x98>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <MX_TIM3_Init+0x98>)
 8001b88:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001b8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <MX_TIM3_Init+0x98>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <MX_TIM3_Init+0x98>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b9a:	4814      	ldr	r0, [pc, #80]	; (8001bec <MX_TIM3_Init+0x98>)
 8001b9c:	f006 f8de 	bl	8007d5c <HAL_TIM_Base_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001ba6:	f000 fb03 	bl	80021b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480d      	ldr	r0, [pc, #52]	; (8001bec <MX_TIM3_Init+0x98>)
 8001bb8:	f006 fce2 	bl	8008580 <HAL_TIM_ConfigClockSource>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001bc2:	f000 faf5 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4806      	ldr	r0, [pc, #24]	; (8001bec <MX_TIM3_Init+0x98>)
 8001bd4:	f007 f844 	bl	8008c60 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001bde:	f000 fae7 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	3720      	adds	r7, #32
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000590 	.word	0x20000590
 8001bf0:	40000400 	.word	0x40000400

08001bf4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001c12:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <MX_TIM15_Init+0x9c>)
 8001c14:	4a1f      	ldr	r2, [pc, #124]	; (8001c94 <MX_TIM15_Init+0xa0>)
 8001c16:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3999;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <MX_TIM15_Init+0x9c>)
 8001c1a:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001c1e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <MX_TIM15_Init+0x9c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <MX_TIM15_Init+0x9c>)
 8001c28:	2213      	movs	r2, #19
 8001c2a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <MX_TIM15_Init+0x9c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <MX_TIM15_Init+0x9c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <MX_TIM15_Init+0x9c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001c3e:	4814      	ldr	r0, [pc, #80]	; (8001c90 <MX_TIM15_Init+0x9c>)
 8001c40:	f006 f88c 	bl	8007d5c <HAL_TIM_Base_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001c4a:	f000 fab1 	bl	80021b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480d      	ldr	r0, [pc, #52]	; (8001c90 <MX_TIM15_Init+0x9c>)
 8001c5c:	f006 fc90 	bl	8008580 <HAL_TIM_ConfigClockSource>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001c66:	f000 faa3 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	4619      	mov	r1, r3
 8001c76:	4806      	ldr	r0, [pc, #24]	; (8001c90 <MX_TIM15_Init+0x9c>)
 8001c78:	f006 fff2 	bl	8008c60 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001c82:	f000 fa95 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200005dc 	.word	0x200005dc
 8001c94:	40014000 	.word	0x40014000

08001c98 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001caa:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <MX_TIM17_Init+0x90>)
 8001cac:	4a1f      	ldr	r2, [pc, #124]	; (8001d2c <MX_TIM17_Init+0x94>)
 8001cae:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3999;
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <MX_TIM17_Init+0x90>)
 8001cb2:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001cb6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <MX_TIM17_Init+0x90>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <MX_TIM17_Init+0x90>)
 8001cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <MX_TIM17_Init+0x90>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <MX_TIM17_Init+0x90>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <MX_TIM17_Init+0x90>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001cd8:	4813      	ldr	r0, [pc, #76]	; (8001d28 <MX_TIM17_Init+0x90>)
 8001cda:	f006 f83f 	bl	8007d5c <HAL_TIM_Base_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM17_Init+0x50>
  {
    Error_Handler();
 8001ce4:	f000 fa64 	bl	80021b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8001ce8:	480f      	ldr	r0, [pc, #60]	; (8001d28 <MX_TIM17_Init+0x90>)
 8001cea:	f006 f8ff 	bl	8007eec <HAL_TIM_IC_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001cf4:	f000 fa5c 	bl	80021b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001d04:	230f      	movs	r3, #15
 8001d06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d08:	463b      	mov	r3, r7
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4806      	ldr	r0, [pc, #24]	; (8001d28 <MX_TIM17_Init+0x90>)
 8001d10:	f006 fb9a 	bl	8008448 <HAL_TIM_IC_ConfigChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM17_Init+0x86>
  {
    Error_Handler();
 8001d1a:	f000 fa49 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000628 	.word	0x20000628
 8001d2c:	40014800 	.word	0x40014800

08001d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <MX_DMA_Init+0x50>)
 8001d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d3a:	4a11      	ldr	r2, [pc, #68]	; (8001d80 <MX_DMA_Init+0x50>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	6493      	str	r3, [r2, #72]	; 0x48
 8001d42:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <MX_DMA_Init+0x50>)
 8001d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_DMA_Init+0x50>)
 8001d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d52:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <MX_DMA_Init+0x50>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6493      	str	r3, [r2, #72]	; 0x48
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_DMA_Init+0x50>)
 8001d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	200b      	movs	r0, #11
 8001d6c:	f002 f9dd 	bl	800412a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d70:	200b      	movs	r0, #11
 8001d72:	f002 f9f6 	bl	8004162 <HAL_NVIC_EnableIRQ>

}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000

08001d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08e      	sub	sp, #56	; 0x38
 8001d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d9a:	4bb3      	ldr	r3, [pc, #716]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	4ab2      	ldr	r2, [pc, #712]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001da0:	f043 0310 	orr.w	r3, r3, #16
 8001da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da6:	4bb0      	ldr	r3, [pc, #704]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	623b      	str	r3, [r7, #32]
 8001db0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db2:	4bad      	ldr	r3, [pc, #692]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	4aac      	ldr	r2, [pc, #688]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dbe:	4baa      	ldr	r3, [pc, #680]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dca:	4ba7      	ldr	r3, [pc, #668]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	4aa6      	ldr	r2, [pc, #664]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001dd0:	f043 0320 	orr.w	r3, r3, #32
 8001dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd6:	4ba4      	ldr	r3, [pc, #656]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de2:	4ba1      	ldr	r3, [pc, #644]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	4aa0      	ldr	r2, [pc, #640]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dee:	4b9e      	ldr	r3, [pc, #632]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	4b9b      	ldr	r3, [pc, #620]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	4a9a      	ldr	r2, [pc, #616]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e06:	4b98      	ldr	r3, [pc, #608]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	4b95      	ldr	r3, [pc, #596]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	4a94      	ldr	r2, [pc, #592]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1e:	4b92      	ldr	r3, [pc, #584]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2a:	4b8f      	ldr	r3, [pc, #572]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	4a8e      	ldr	r2, [pc, #568]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e36:	4b8c      	ldr	r3, [pc, #560]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e42:	4b89      	ldr	r3, [pc, #548]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	4a88      	ldr	r2, [pc, #544]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4e:	4b86      	ldr	r3, [pc, #536]	; (8002068 <MX_GPIO_Init+0x2e4>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001e5a:	f003 fc51 	bl	8005700 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e66:	f002 fd9b 	bl	80049a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2164      	movs	r1, #100	; 0x64
 8001e6e:	487f      	ldr	r0, [pc, #508]	; (800206c <MX_GPIO_Init+0x2e8>)
 8001e70:	f002 fd96 	bl	80049a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e74:	230c      	movs	r3, #12
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001e84:	230d      	movs	r3, #13
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4878      	ldr	r0, [pc, #480]	; (8002070 <MX_GPIO_Init+0x2ec>)
 8001e90:	f002 fbf4 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e94:	2307      	movs	r3, #7
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e98:	2312      	movs	r3, #18
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eac:	4619      	mov	r1, r3
 8001eae:	4871      	ldr	r0, [pc, #452]	; (8002074 <MX_GPIO_Init+0x2f0>)
 8001eb0:	f002 fbe4 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001ec4:	230d      	movs	r3, #13
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4869      	ldr	r0, [pc, #420]	; (8002074 <MX_GPIO_Init+0x2f0>)
 8001ed0:	f002 fbd4 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eec:	4619      	mov	r1, r3
 8001eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef2:	f002 fbc3 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f10:	f002 fbb4 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001f14:	2364      	movs	r3, #100	; 0x64
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4850      	ldr	r0, [pc, #320]	; (800206c <MX_GPIO_Init+0x2e8>)
 8001f2c:	f002 fba6 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001f30:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f42:	2301      	movs	r3, #1
 8001f44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4848      	ldr	r0, [pc, #288]	; (8002070 <MX_GPIO_Init+0x2ec>)
 8001f4e:	f002 fb95 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001f52:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001f64:	2303      	movs	r3, #3
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4840      	ldr	r0, [pc, #256]	; (8002070 <MX_GPIO_Init+0x2ec>)
 8001f70:	f002 fb84 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f86:	2301      	movs	r3, #1
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4836      	ldr	r0, [pc, #216]	; (800206c <MX_GPIO_Init+0x2e8>)
 8001f92:	f002 fb73 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001f96:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001fa8:	230d      	movs	r3, #13
 8001faa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	482e      	ldr	r0, [pc, #184]	; (800206c <MX_GPIO_Init+0x2e8>)
 8001fb4:	f002 fb62 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fca:	2307      	movs	r3, #7
 8001fcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4828      	ldr	r0, [pc, #160]	; (8002078 <MX_GPIO_Init+0x2f4>)
 8001fd6:	f002 fb51 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001fda:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fec:	2302      	movs	r3, #2
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4820      	ldr	r0, [pc, #128]	; (8002078 <MX_GPIO_Init+0x2f4>)
 8001ff8:	f002 fb40 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ffc:	2340      	movs	r3, #64	; 0x40
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800200c:	230d      	movs	r3, #13
 800200e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002014:	4619      	mov	r1, r3
 8002016:	4819      	ldr	r0, [pc, #100]	; (800207c <MX_GPIO_Init+0x2f8>)
 8002018:	f002 fb30 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 800201c:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800202e:	230c      	movs	r3, #12
 8002030:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002036:	4619      	mov	r1, r3
 8002038:	4810      	ldr	r0, [pc, #64]	; (800207c <MX_GPIO_Init+0x2f8>)
 800203a:	f002 fb1f 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800203e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002050:	230a      	movs	r3, #10
 8002052:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002058:	4619      	mov	r1, r3
 800205a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205e:	f002 fb0d 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002066:	e00b      	b.n	8002080 <MX_GPIO_Init+0x2fc>
 8002068:	40021000 	.word	0x40021000
 800206c:	48000400 	.word	0x48000400
 8002070:	48001000 	.word	0x48001000
 8002074:	48001400 	.word	0x48001400
 8002078:	48000c00 	.word	0x48000c00
 800207c:	48000800 	.word	0x48000800
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002082:	2300      	movs	r3, #0
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208e:	4619      	mov	r1, r3
 8002090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002094:	f002 faf2 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002098:	2301      	movs	r3, #1
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80020a8:	2309      	movs	r3, #9
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	482b      	ldr	r0, [pc, #172]	; (8002160 <MX_GPIO_Init+0x3dc>)
 80020b4:	f002 fae2 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020b8:	2304      	movs	r3, #4
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020c8:	230c      	movs	r3, #12
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d0:	4619      	mov	r1, r3
 80020d2:	4823      	ldr	r0, [pc, #140]	; (8002160 <MX_GPIO_Init+0x3dc>)
 80020d4:	f002 fad2 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020d8:	2320      	movs	r3, #32
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e4:	2303      	movs	r3, #3
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e8:	2307      	movs	r3, #7
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f0:	4619      	mov	r1, r3
 80020f2:	481b      	ldr	r0, [pc, #108]	; (8002160 <MX_GPIO_Init+0x3dc>)
 80020f4:	f002 fac2 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020f8:	2340      	movs	r3, #64	; 0x40
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002104:	2303      	movs	r3, #3
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8002108:	2305      	movs	r3, #5
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800210c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002110:	4619      	mov	r1, r3
 8002112:	4813      	ldr	r0, [pc, #76]	; (8002160 <MX_GPIO_Init+0x3dc>)
 8002114:	f002 fab2 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002118:	2318      	movs	r3, #24
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002128:	2306      	movs	r3, #6
 800212a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002130:	4619      	mov	r1, r3
 8002132:	480c      	ldr	r0, [pc, #48]	; (8002164 <MX_GPIO_Init+0x3e0>)
 8002134:	f002 faa2 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002138:	2301      	movs	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002148:	2302      	movs	r3, #2
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800214c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002150:	4619      	mov	r1, r3
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_GPIO_Init+0x3e4>)
 8002154:	f002 fa92 	bl	800467c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002158:	bf00      	nop
 800215a:	3738      	adds	r7, #56	; 0x38
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	48000c00 	.word	0x48000c00
 8002164:	48000400 	.word	0x48000400
 8002168:	48001000 	.word	0x48001000

0800216c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002174:	1d39      	adds	r1, r7, #4
 8002176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800217a:	2201      	movs	r2, #1
 800217c:	4803      	ldr	r0, [pc, #12]	; (800218c <__io_putchar+0x20>)
 800217e:	f006 fe65 	bl	8008e4c <HAL_UART_Transmit>
  return ch;
 8002182:	687b      	ldr	r3, [r7, #4]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200003a0 	.word	0x200003a0

08002190 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	adcConversionComplete = 1;
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <HAL_ADC_ConvCpltCallback+0x1c>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	2000068c 	.word	0x2000068c

080021b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b4:	b672      	cpsid	i
}
 80021b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <Error_Handler+0x8>
	...

080021bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_MspInit+0x44>)
 80021c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c6:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <HAL_MspInit+0x44>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6613      	str	r3, [r2, #96]	; 0x60
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_MspInit+0x44>)
 80021d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_MspInit+0x44>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	4a08      	ldr	r2, [pc, #32]	; (8002200 <HAL_MspInit+0x44>)
 80021e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6593      	str	r3, [r2, #88]	; 0x58
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_MspInit+0x44>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80021f2:	2005      	movs	r0, #5
 80021f4:	f001 ff8e 	bl	8004114 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000

08002204 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0b0      	sub	sp, #192	; 0xc0
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800221c:	f107 0318 	add.w	r3, r7, #24
 8002220:	2294      	movs	r2, #148	; 0x94
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f008 fb27 	bl	800a878 <memset>
  if(hadc->Instance==ADC1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a58      	ldr	r2, [pc, #352]	; (8002390 <HAL_ADC_MspInit+0x18c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	f040 80a9 	bne.w	8002388 <HAL_ADC_MspInit+0x184>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002236:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800223a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800223c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002244:	2301      	movs	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002248:	2301      	movs	r3, #1
 800224a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800224c:	2310      	movs	r3, #16
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002250:	2302      	movs	r3, #2
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002254:	2302      	movs	r3, #2
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002258:	2302      	movs	r3, #2
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800225c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002260:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002262:	f107 0318 	add.w	r3, r7, #24
 8002266:	4618      	mov	r0, r3
 8002268:	f004 f932 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8002272:	f7ff ff9d 	bl	80021b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_ADC_MspInit+0x190>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	4a46      	ldr	r2, [pc, #280]	; (8002394 <HAL_ADC_MspInit+0x190>)
 800227c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002282:	4b44      	ldr	r3, [pc, #272]	; (8002394 <HAL_ADC_MspInit+0x190>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800228e:	4b41      	ldr	r3, [pc, #260]	; (8002394 <HAL_ADC_MspInit+0x190>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	4a40      	ldr	r2, [pc, #256]	; (8002394 <HAL_ADC_MspInit+0x190>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229a:	4b3e      	ldr	r3, [pc, #248]	; (8002394 <HAL_ADC_MspInit+0x190>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_ADC_MspInit+0x190>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	4a3a      	ldr	r2, [pc, #232]	; (8002394 <HAL_ADC_MspInit+0x190>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b2:	4b38      	ldr	r3, [pc, #224]	; (8002394 <HAL_ADC_MspInit+0x190>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022be:	4b35      	ldr	r3, [pc, #212]	; (8002394 <HAL_ADC_MspInit+0x190>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	4a34      	ldr	r2, [pc, #208]	; (8002394 <HAL_ADC_MspInit+0x190>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ca:	4b32      	ldr	r3, [pc, #200]	; (8002394 <HAL_ADC_MspInit+0x190>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80022d6:	233f      	movs	r3, #63	; 0x3f
 80022d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022dc:	230b      	movs	r3, #11
 80022de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022ec:	4619      	mov	r1, r3
 80022ee:	482a      	ldr	r0, [pc, #168]	; (8002398 <HAL_ADC_MspInit+0x194>)
 80022f0:	f002 f9c4 	bl	800467c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80022f4:	230a      	movs	r3, #10
 80022f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022fa:	230b      	movs	r3, #11
 80022fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002306:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800230a:	4619      	mov	r1, r3
 800230c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002310:	f002 f9b4 	bl	800467c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002314:	2302      	movs	r3, #2
 8002316:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800231a:	230b      	movs	r3, #11
 800231c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002326:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800232a:	4619      	mov	r1, r3
 800232c:	481b      	ldr	r0, [pc, #108]	; (800239c <HAL_ADC_MspInit+0x198>)
 800232e:	f002 f9a5 	bl	800467c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002332:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_ADC_MspInit+0x19c>)
 8002334:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <HAL_ADC_MspInit+0x1a0>)
 8002336:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_ADC_MspInit+0x19c>)
 800233a:	2205      	movs	r2, #5
 800233c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800233e:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <HAL_ADC_MspInit+0x19c>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002344:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_ADC_MspInit+0x19c>)
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_ADC_MspInit+0x19c>)
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_ADC_MspInit+0x19c>)
 8002352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002356:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_ADC_MspInit+0x19c>)
 800235a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800235e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <HAL_ADC_MspInit+0x19c>)
 8002362:	2200      	movs	r2, #0
 8002364:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_ADC_MspInit+0x19c>)
 8002368:	2200      	movs	r2, #0
 800236a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800236c:	480c      	ldr	r0, [pc, #48]	; (80023a0 <HAL_ADC_MspInit+0x19c>)
 800236e:	f001 ff13 	bl	8004198 <HAL_DMA_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8002378:	f7ff ff1a 	bl	80021b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <HAL_ADC_MspInit+0x19c>)
 8002380:	651a      	str	r2, [r3, #80]	; 0x50
 8002382:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <HAL_ADC_MspInit+0x19c>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002388:	bf00      	nop
 800238a:	37c0      	adds	r7, #192	; 0xc0
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	50040000 	.word	0x50040000
 8002394:	40021000 	.word	0x40021000
 8002398:	48000800 	.word	0x48000800
 800239c:	48000400 	.word	0x48000400
 80023a0:	200002ec 	.word	0x200002ec
 80023a4:	40020008 	.word	0x40020008

080023a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b0ae      	sub	sp, #184	; 0xb8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	2294      	movs	r2, #148	; 0x94
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f008 fa55 	bl	800a878 <memset>
  if(hi2c->Instance==I2C1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a21      	ldr	r2, [pc, #132]	; (8002458 <HAL_I2C_MspInit+0xb0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d13b      	bne.n	8002450 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80023d8:	2340      	movs	r3, #64	; 0x40
 80023da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80023dc:	2300      	movs	r3, #0
 80023de:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e0:	f107 0310 	add.w	r3, r7, #16
 80023e4:	4618      	mov	r0, r3
 80023e6:	f004 f873 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80023f0:	f7ff fede 	bl	80021b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_I2C_MspInit+0xb4>)
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	4a18      	ldr	r2, [pc, #96]	; (800245c <HAL_I2C_MspInit+0xb4>)
 80023fa:	f043 0302 	orr.w	r3, r3, #2
 80023fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002400:	4b16      	ldr	r3, [pc, #88]	; (800245c <HAL_I2C_MspInit+0xb4>)
 8002402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800240c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002414:	2312      	movs	r3, #18
 8002416:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002426:	2304      	movs	r3, #4
 8002428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002430:	4619      	mov	r1, r3
 8002432:	480b      	ldr	r0, [pc, #44]	; (8002460 <HAL_I2C_MspInit+0xb8>)
 8002434:	f002 f922 	bl	800467c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <HAL_I2C_MspInit+0xb4>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	4a07      	ldr	r2, [pc, #28]	; (800245c <HAL_I2C_MspInit+0xb4>)
 800243e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002442:	6593      	str	r3, [r2, #88]	; 0x58
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_I2C_MspInit+0xb4>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002450:	bf00      	nop
 8002452:	37b8      	adds	r7, #184	; 0xb8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40005400 	.word	0x40005400
 800245c:	40021000 	.word	0x40021000
 8002460:	48000400 	.word	0x48000400

08002464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b0b0      	sub	sp, #192	; 0xc0
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800247c:	f107 0318 	add.w	r3, r7, #24
 8002480:	2294      	movs	r2, #148	; 0x94
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f008 f9f7 	bl	800a878 <memset>
  if(huart->Instance==LPUART1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a43      	ldr	r2, [pc, #268]	; (800259c <HAL_UART_MspInit+0x138>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d13e      	bne.n	8002512 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002494:	2320      	movs	r3, #32
 8002496:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002498:	2300      	movs	r3, #0
 800249a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800249c:	f107 0318 	add.w	r3, r7, #24
 80024a0:	4618      	mov	r0, r3
 80024a2:	f004 f815 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024ac:	f7ff fe80 	bl	80021b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80024b0:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_UART_MspInit+0x13c>)
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	4a3a      	ldr	r2, [pc, #232]	; (80025a0 <HAL_UART_MspInit+0x13c>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	65d3      	str	r3, [r2, #92]	; 0x5c
 80024bc:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <HAL_UART_MspInit+0x13c>)
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024c8:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <HAL_UART_MspInit+0x13c>)
 80024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024cc:	4a34      	ldr	r2, [pc, #208]	; (80025a0 <HAL_UART_MspInit+0x13c>)
 80024ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d4:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <HAL_UART_MspInit+0x13c>)
 80024d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80024e0:	f003 f90e 	bl	8005700 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80024e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80024e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ec:	2302      	movs	r3, #2
 80024ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80024fe:	2308      	movs	r3, #8
 8002500:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002504:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002508:	4619      	mov	r1, r3
 800250a:	4826      	ldr	r0, [pc, #152]	; (80025a4 <HAL_UART_MspInit+0x140>)
 800250c:	f002 f8b6 	bl	800467c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002510:	e040      	b.n	8002594 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==UART4)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a24      	ldr	r2, [pc, #144]	; (80025a8 <HAL_UART_MspInit+0x144>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d13b      	bne.n	8002594 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800251c:	2308      	movs	r3, #8
 800251e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002520:	2300      	movs	r3, #0
 8002522:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002524:	f107 0318 	add.w	r3, r7, #24
 8002528:	4618      	mov	r0, r3
 800252a:	f003 ffd1 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002534:	f7ff fe3c 	bl	80021b0 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_UART_MspInit+0x13c>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <HAL_UART_MspInit+0x13c>)
 800253e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002542:	6593      	str	r3, [r2, #88]	; 0x58
 8002544:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <HAL_UART_MspInit+0x13c>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_UART_MspInit+0x13c>)
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <HAL_UART_MspInit+0x13c>)
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_UART_MspInit+0x13c>)
 800255e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002568:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800256c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002582:	2308      	movs	r3, #8
 8002584:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002588:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800258c:	4619      	mov	r1, r3
 800258e:	4807      	ldr	r0, [pc, #28]	; (80025ac <HAL_UART_MspInit+0x148>)
 8002590:	f002 f874 	bl	800467c <HAL_GPIO_Init>
}
 8002594:	bf00      	nop
 8002596:	37c0      	adds	r7, #192	; 0xc0
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40008000 	.word	0x40008000
 80025a0:	40021000 	.word	0x40021000
 80025a4:	48001800 	.word	0x48001800
 80025a8:	40004c00 	.word	0x40004c00
 80025ac:	48000800 	.word	0x48000800

080025b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08c      	sub	sp, #48	; 0x30
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 031c 	add.w	r3, r7, #28
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a36      	ldr	r2, [pc, #216]	; (80026a8 <HAL_SPI_MspInit+0xf8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d129      	bne.n	8002626 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025d2:	4b36      	ldr	r3, [pc, #216]	; (80026ac <HAL_SPI_MspInit+0xfc>)
 80025d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d6:	4a35      	ldr	r2, [pc, #212]	; (80026ac <HAL_SPI_MspInit+0xfc>)
 80025d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025dc:	6613      	str	r3, [r2, #96]	; 0x60
 80025de:	4b33      	ldr	r3, [pc, #204]	; (80026ac <HAL_SPI_MspInit+0xfc>)
 80025e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ea:	4b30      	ldr	r3, [pc, #192]	; (80026ac <HAL_SPI_MspInit+0xfc>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ee:	4a2f      	ldr	r2, [pc, #188]	; (80026ac <HAL_SPI_MspInit+0xfc>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025f6:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <HAL_SPI_MspInit+0xfc>)
 80025f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002602:	2370      	movs	r3, #112	; 0x70
 8002604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260e:	2303      	movs	r3, #3
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002612:	2305      	movs	r3, #5
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002616:	f107 031c 	add.w	r3, r7, #28
 800261a:	4619      	mov	r1, r3
 800261c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002620:	f002 f82c 	bl	800467c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002624:	e03c      	b.n	80026a0 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a21      	ldr	r2, [pc, #132]	; (80026b0 <HAL_SPI_MspInit+0x100>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d137      	bne.n	80026a0 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002630:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <HAL_SPI_MspInit+0xfc>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <HAL_SPI_MspInit+0xfc>)
 8002636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800263a:	6593      	str	r3, [r2, #88]	; 0x58
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <HAL_SPI_MspInit+0xfc>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002648:	4b18      	ldr	r3, [pc, #96]	; (80026ac <HAL_SPI_MspInit+0xfc>)
 800264a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264c:	4a17      	ldr	r2, [pc, #92]	; (80026ac <HAL_SPI_MspInit+0xfc>)
 800264e:	f043 0308 	orr.w	r3, r3, #8
 8002652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002654:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_SPI_MspInit+0xfc>)
 8002656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002660:	2308      	movs	r3, #8
 8002662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8002670:	2303      	movs	r3, #3
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002674:	f107 031c 	add.w	r3, r7, #28
 8002678:	4619      	mov	r1, r3
 800267a:	480e      	ldr	r0, [pc, #56]	; (80026b4 <HAL_SPI_MspInit+0x104>)
 800267c:	f001 fffe 	bl	800467c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002680:	2310      	movs	r3, #16
 8002682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	2303      	movs	r3, #3
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002690:	2305      	movs	r3, #5
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	4806      	ldr	r0, [pc, #24]	; (80026b4 <HAL_SPI_MspInit+0x104>)
 800269c:	f001 ffee 	bl	800467c <HAL_GPIO_Init>
}
 80026a0:	bf00      	nop
 80026a2:	3730      	adds	r7, #48	; 0x30
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40013000 	.word	0x40013000
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40003800 	.word	0x40003800
 80026b4:	48000c00 	.word	0x48000c00

080026b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08e      	sub	sp, #56	; 0x38
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a5f      	ldr	r2, [pc, #380]	; (8002854 <HAL_TIM_Base_MspInit+0x19c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d14c      	bne.n	8002774 <HAL_TIM_Base_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026da:	4b5f      	ldr	r3, [pc, #380]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 80026dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026de:	4a5e      	ldr	r2, [pc, #376]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	6593      	str	r3, [r2, #88]	; 0x58
 80026e6:	4b5c      	ldr	r3, [pc, #368]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 80026e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	623b      	str	r3, [r7, #32]
 80026f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f2:	4b59      	ldr	r3, [pc, #356]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	4a58      	ldr	r2, [pc, #352]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 80026f8:	f043 0302 	orr.w	r3, r3, #2
 80026fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fe:	4b56      	ldr	r3, [pc, #344]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	61fb      	str	r3, [r7, #28]
 8002708:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800270a:	4b53      	ldr	r3, [pc, #332]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	4a52      	ldr	r2, [pc, #328]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002716:	4b50      	ldr	r3, [pc, #320]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002722:	2301      	movs	r3, #1
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	2300      	movs	r3, #0
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002732:	2302      	movs	r3, #2
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273a:	4619      	mov	r1, r3
 800273c:	4847      	ldr	r0, [pc, #284]	; (800285c <HAL_TIM_Base_MspInit+0x1a4>)
 800273e:	f001 ff9d 	bl	800467c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002752:	2302      	movs	r3, #2
 8002754:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800275a:	4619      	mov	r1, r3
 800275c:	4840      	ldr	r0, [pc, #256]	; (8002860 <HAL_TIM_Base_MspInit+0x1a8>)
 800275e:	f001 ff8d 	bl	800467c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 1);
 8002762:	2201      	movs	r2, #1
 8002764:	2101      	movs	r1, #1
 8002766:	201d      	movs	r0, #29
 8002768:	f001 fcdf 	bl	800412a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800276c:	201d      	movs	r0, #29
 800276e:	f001 fcf8 	bl	8004162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002772:	e06b      	b.n	800284c <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM15)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3a      	ldr	r2, [pc, #232]	; (8002864 <HAL_TIM_Base_MspInit+0x1ac>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d131      	bne.n	80027e2 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800277e:	4b36      	ldr	r3, [pc, #216]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 8002780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002782:	4a35      	ldr	r2, [pc, #212]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002788:	6613      	str	r3, [r2, #96]	; 0x60
 800278a:	4b33      	ldr	r3, [pc, #204]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 800278c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002796:	4b30      	ldr	r3, [pc, #192]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 8002798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279a:	4a2f      	ldr	r2, [pc, #188]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a2:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80027ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027bc:	2300      	movs	r3, #0
 80027be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80027c0:	230e      	movs	r3, #14
 80027c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c8:	4619      	mov	r1, r3
 80027ca:	4824      	ldr	r0, [pc, #144]	; (800285c <HAL_TIM_Base_MspInit+0x1a4>)
 80027cc:	f001 ff56 	bl	800467c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 80027d0:	2200      	movs	r2, #0
 80027d2:	2101      	movs	r1, #1
 80027d4:	2018      	movs	r0, #24
 80027d6:	f001 fca8 	bl	800412a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80027da:	2018      	movs	r0, #24
 80027dc:	f001 fcc1 	bl	8004162 <HAL_NVIC_EnableIRQ>
}
 80027e0:	e034      	b.n	800284c <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM17)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a20      	ldr	r2, [pc, #128]	; (8002868 <HAL_TIM_Base_MspInit+0x1b0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d12f      	bne.n	800284c <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80027ec:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 80027ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f0:	4a19      	ldr	r2, [pc, #100]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 80027f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f6:	6613      	str	r3, [r2, #96]	; 0x60
 80027f8:	4b17      	ldr	r3, [pc, #92]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 80027fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002804:	4b14      	ldr	r3, [pc, #80]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 8002806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002808:	4a13      	ldr	r2, [pc, #76]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 800280a:	f043 0310 	orr.w	r3, r3, #16
 800280e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_TIM_Base_MspInit+0x1a0>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800281c:	2302      	movs	r3, #2
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002828:	2300      	movs	r3, #0
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 800282c:	230e      	movs	r3, #14
 800282e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002834:	4619      	mov	r1, r3
 8002836:	480d      	ldr	r0, [pc, #52]	; (800286c <HAL_TIM_Base_MspInit+0x1b4>)
 8002838:	f001 ff20 	bl	800467c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800283c:	2200      	movs	r2, #0
 800283e:	2100      	movs	r1, #0
 8002840:	201a      	movs	r0, #26
 8002842:	f001 fc72 	bl	800412a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002846:	201a      	movs	r0, #26
 8002848:	f001 fc8b 	bl	8004162 <HAL_NVIC_EnableIRQ>
}
 800284c:	bf00      	nop
 800284e:	3738      	adds	r7, #56	; 0x38
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40000400 	.word	0x40000400
 8002858:	40021000 	.word	0x40021000
 800285c:	48000400 	.word	0x48000400
 8002860:	48000800 	.word	0x48000800
 8002864:	40014000 	.word	0x40014000
 8002868:	40014800 	.word	0x40014800
 800286c:	48001000 	.word	0x48001000

08002870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <NMI_Handler+0x4>

08002876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287a:	e7fe      	b.n	800287a <HardFault_Handler+0x4>

0800287c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <MemManage_Handler+0x4>

08002882 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002886:	e7fe      	b.n	8002886 <BusFault_Handler+0x4>

08002888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800288c:	e7fe      	b.n	800288c <UsageFault_Handler+0x4>

0800288e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028bc:	f000 fa48 	bl	8002d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <DMA1_Channel1_IRQHandler+0x10>)
 80028ca:	f001 fd88 	bl	80043de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200002ec 	.word	0x200002ec

080028d8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80028dc:	480b      	ldr	r0, [pc, #44]	; (800290c <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80028de:	f005 fcb1 	bl	8008244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  acc = ReadAccData();
 80028e2:	f7fe fb71 	bl	8000fc8 <ReadAccData>
 80028e6:	eef0 7a40 	vmov.f32	s15, s0
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80028ec:	edc3 7a00 	vstr	s15, [r3]
  teldata.accel = acc;
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a07      	ldr	r2, [pc, #28]	; (8002914 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 80028f6:	6013      	str	r3, [r2, #0]
  printLEDs(acc);
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002902:	f7fe fc83 	bl	800120c <printLEDs>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	200005dc 	.word	0x200005dc
 8002910:	20000694 	.word	0x20000694
 8002914:	20000674 	.word	0x20000674

08002918 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800291c:	480c      	ldr	r0, [pc, #48]	; (8002950 <TIM1_TRG_COM_TIM17_IRQHandler+0x38>)
 800291e:	f005 fc91 	bl	8008244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
	curTime = TIM17->CCR1; //get current time value
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <TIM1_TRG_COM_TIM17_IRQHandler+0x3c>)
 8002924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002926:	b29a      	uxth	r2, r3
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 800292a:	801a      	strh	r2, [r3, #0]
	TIM17->CNT = 0;
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <TIM1_TRG_COM_TIM17_IRQHandler+0x3c>)
 800292e:	2200      	movs	r2, #0
 8002930:	625a      	str	r2, [r3, #36]	; 0x24

	teldata.speed = (float)(veloMultiplier / curTime);
 8002932:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800295c <TIM1_TRG_COM_TIM17_IRQHandler+0x44>
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	ee07 3a90 	vmov	s15, r3
 800293e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 8002948:	edc3 7a02 	vstr	s15, [r3, #8]
	//printf("Speed: %f\n",(veloMultiplier / curTime));
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000628 	.word	0x20000628
 8002954:	40014800 	.word	0x40014800
 8002958:	20000690 	.word	0x20000690
 800295c:	455267a3 	.word	0x455267a3
 8002960:	20000674 	.word	0x20000674

08002964 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002968:	4802      	ldr	r0, [pc, #8]	; (8002974 <TIM3_IRQHandler+0x10>)
 800296a:	f005 fc6b 	bl	8008244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000590 	.word	0x20000590

08002978 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a45      	ldr	r2, [pc, #276]	; (8002a98 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002984:	4293      	cmp	r3, r2
 8002986:	f040 8083 	bne.w	8002a90 <HAL_TIM_PeriodElapsedCallback+0x118>
		uint16_t temp1sum = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t temp2sum = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t temp3sum = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	847b      	strh	r3, [r7, #34]	; 0x22

		// run a loop for 5 reads from the
		for (int i = 0; i < 5; i++) {
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	e01a      	b.n	80029d2 <HAL_TIM_PeriodElapsedCallback+0x5a>
			temp1sum += read_Temperature(GPIO_PIN_5); // read for the first temp sensor
 800299c:	2020      	movs	r0, #32
 800299e:	f7fe fccd 	bl	800133c <read_Temperature>
 80029a2:	4603      	mov	r3, r0
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029a8:	4413      	add	r3, r2
 80029aa:	84fb      	strh	r3, [r7, #38]	; 0x26
			temp2sum += read_Temperature(GPIO_PIN_2); // read for the second temp sensor
 80029ac:	2004      	movs	r0, #4
 80029ae:	f7fe fcc5 	bl	800133c <read_Temperature>
 80029b2:	4603      	mov	r3, r0
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029b8:	4413      	add	r3, r2
 80029ba:	84bb      	strh	r3, [r7, #36]	; 0x24
			temp3sum += read_Temperature(GPIO_PIN_6); // read for the third temp sensor
 80029bc:	2040      	movs	r0, #64	; 0x40
 80029be:	f7fe fcbd 	bl	800133c <read_Temperature>
 80029c2:	4603      	mov	r3, r0
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029c8:	4413      	add	r3, r2
 80029ca:	847b      	strh	r3, [r7, #34]	; 0x22
		for (int i = 0; i < 5; i++) {
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	3301      	adds	r3, #1
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	dde1      	ble.n	800299c <HAL_TIM_PeriodElapsedCallback+0x24>
		}
		float temp1 = temp1sum / 5.0; // take the average of the temp sensor values
 80029d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fdba 	bl	8000554 <__aeabi_i2d>
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80029e6:	f7fd ff49 	bl	800087c <__aeabi_ddiv>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	f7fe f8f1 	bl	8000bd8 <__aeabi_d2f>
 80029f6:	4603      	mov	r3, r0
 80029f8:	61bb      	str	r3, [r7, #24]
		float temp2 = temp2sum / 5.0;
 80029fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fd fda9 	bl	8000554 <__aeabi_i2d>
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002a08:	f7fd ff38 	bl	800087c <__aeabi_ddiv>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	f7fe f8e0 	bl	8000bd8 <__aeabi_d2f>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	617b      	str	r3, [r7, #20]
		float temp3 = temp3sum / 5.0;
 8002a1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fd98 	bl	8000554 <__aeabi_i2d>
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002a2a:	f7fd ff27 	bl	800087c <__aeabi_ddiv>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7fe f8cf 	bl	8000bd8 <__aeabi_d2f>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	613b      	str	r3, [r7, #16]

		float average = (temp1 + temp2 + temp3) / 3.0;
 8002a3e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a42:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a52:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002a56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a5a:	edc7 7a03 	vstr	s15, [r7, #12]
		teldata.temp = average;
 8002a5e:	4a10      	ldr	r2, [pc, #64]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6053      	str	r3, [r2, #4]

		// send this average to display

		//printf("Average External Temperature: %.2f \n\r", average);

		if (average > 24) {
 8002a64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a68:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a74:	dd06      	ble.n	8002a84 <HAL_TIM_PeriodElapsedCallback+0x10c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8002a76:	2201      	movs	r2, #1
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a7e:	f001 ff8f 	bl	80049a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
		}
	}
}
 8002a82:	e005      	b.n	8002a90 <HAL_TIM_PeriodElapsedCallback+0x118>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002a84:	2200      	movs	r2, #0
 8002a86:	2180      	movs	r1, #128	; 0x80
 8002a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a8c:	f001 ff88 	bl	80049a0 <HAL_GPIO_WritePin>
}
 8002a90:	bf00      	nop
 8002a92:	3728      	adds	r7, #40	; 0x28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000590 	.word	0x20000590
 8002a9c:	40140000 	.word	0x40140000
 8002aa0:	20000674 	.word	0x20000674

08002aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return 1;
 8002aa8:	2301      	movs	r3, #1
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <_kill>:

int _kill(int pid, int sig)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002abe:	f007 ff2d 	bl	800a91c <__errno>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2216      	movs	r2, #22
 8002ac6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <_exit>:

void _exit (int status)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002adc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ffe7 	bl	8002ab4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ae6:	e7fe      	b.n	8002ae6 <_exit+0x12>

08002ae8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	e00a      	b.n	8002b10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002afa:	f3af 8000 	nop.w
 8002afe:	4601      	mov	r1, r0
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	60ba      	str	r2, [r7, #8]
 8002b06:	b2ca      	uxtb	r2, r1
 8002b08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	dbf0      	blt.n	8002afa <_read+0x12>
  }

  return len;
 8002b18:	687b      	ldr	r3, [r7, #4]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e009      	b.n	8002b48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	60ba      	str	r2, [r7, #8]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fb15 	bl	800216c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	3301      	adds	r3, #1
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	dbf1      	blt.n	8002b34 <_write+0x12>
  }
  return len;
 8002b50:	687b      	ldr	r3, [r7, #4]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <_close>:

int _close(int file)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b82:	605a      	str	r2, [r3, #4]
  return 0;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <_isatty>:

int _isatty(int file)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b9a:	2301      	movs	r3, #1
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bcc:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <_sbrk+0x5c>)
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <_sbrk+0x60>)
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd8:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <_sbrk+0x64>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <_sbrk+0x64>)
 8002be2:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <_sbrk+0x68>)
 8002be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <_sbrk+0x64>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d207      	bcs.n	8002c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf4:	f007 fe92 	bl	800a91c <__errno>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002c02:	e009      	b.n	8002c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <_sbrk+0x64>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <_sbrk+0x64>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <_sbrk+0x64>)
 8002c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	200a0000 	.word	0x200a0000
 8002c24:	00000400 	.word	0x00000400
 8002c28:	20000698 	.word	0x20000698
 8002c2c:	200007f0 	.word	0x200007f0

08002c30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <SystemInit+0x20>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <SystemInit+0x20>)
 8002c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c58:	f7ff ffea 	bl	8002c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c5c:	480c      	ldr	r0, [pc, #48]	; (8002c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c5e:	490d      	ldr	r1, [pc, #52]	; (8002c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c60:	4a0d      	ldr	r2, [pc, #52]	; (8002c98 <LoopForever+0xe>)
  movs r3, #0
 8002c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c64:	e002      	b.n	8002c6c <LoopCopyDataInit>

08002c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c6a:	3304      	adds	r3, #4

08002c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c70:	d3f9      	bcc.n	8002c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c72:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c74:	4c0a      	ldr	r4, [pc, #40]	; (8002ca0 <LoopForever+0x16>)
  movs r3, #0
 8002c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c78:	e001      	b.n	8002c7e <LoopFillZerobss>

08002c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c7c:	3204      	adds	r2, #4

08002c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c80:	d3fb      	bcc.n	8002c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c82:	f007 fe51 	bl	800a928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c86:	f7fe fc59 	bl	800153c <main>

08002c8a <LoopForever>:

LoopForever:
    b LoopForever
 8002c8a:	e7fe      	b.n	8002c8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c8c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c94:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002c98:	0800caec 	.word	0x0800caec
  ldr r2, =_sbss
 8002c9c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002ca0:	200007ec 	.word	0x200007ec

08002ca4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ca4:	e7fe      	b.n	8002ca4 <ADC1_IRQHandler>

08002ca6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb0:	2003      	movs	r0, #3
 8002cb2:	f001 fa2f 	bl	8004114 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f000 f80e 	bl	8002cd8 <HAL_InitTick>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	71fb      	strb	r3, [r7, #7]
 8002cc6:	e001      	b.n	8002ccc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cc8:	f7ff fa78 	bl	80021bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ce4:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <HAL_InitTick+0x6c>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d023      	beq.n	8002d34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_InitTick+0x70>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_InitTick+0x6c>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	f001 fa3b 	bl	800417e <HAL_SYSTICK_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10f      	bne.n	8002d2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0f      	cmp	r3, #15
 8002d12:	d809      	bhi.n	8002d28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d14:	2200      	movs	r2, #0
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	f001 fa05 	bl	800412a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d20:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <HAL_InitTick+0x74>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e007      	b.n	8002d38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	e004      	b.n	8002d38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
 8002d32:	e001      	b.n	8002d38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	2000000c 	.word	0x2000000c
 8002d48:	20000004 	.word	0x20000004
 8002d4c:	20000008 	.word	0x20000008

08002d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_IncTick+0x20>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_IncTick+0x24>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_IncTick+0x24>)
 8002d62:	6013      	str	r3, [r2, #0]
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	2000000c 	.word	0x2000000c
 8002d74:	2000069c 	.word	0x2000069c

08002d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_GetTick+0x14>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	2000069c 	.word	0x2000069c

08002d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d98:	f7ff ffee 	bl	8002d78 <HAL_GetTick>
 8002d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d005      	beq.n	8002db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <HAL_Delay+0x44>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002db6:	bf00      	nop
 8002db8:	f7ff ffde 	bl	8002d78 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d8f7      	bhi.n	8002db8 <HAL_Delay+0x28>
  {
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	2000000c 	.word	0x2000000c

08002dd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	609a      	str	r2, [r3, #8]
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	609a      	str	r2, [r3, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3360      	adds	r3, #96	; 0x60
 8002e52:	461a      	mov	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <LL_ADC_SetOffset+0x44>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	03fff000 	.word	0x03fff000

08002e88 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3360      	adds	r3, #96	; 0x60
 8002e96:	461a      	mov	r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3360      	adds	r3, #96	; 0x60
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	615a      	str	r2, [r3, #20]
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b087      	sub	sp, #28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3330      	adds	r3, #48	; 0x30
 8002f46:	461a      	mov	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	4413      	add	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	211f      	movs	r1, #31
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	401a      	ands	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	0e9b      	lsrs	r3, r3, #26
 8002f6e:	f003 011f 	and.w	r1, r3, #31
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f82:	bf00      	nop
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b087      	sub	sp, #28
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3314      	adds	r3, #20
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	0e5b      	lsrs	r3, r3, #25
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	4413      	add	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	0d1b      	lsrs	r3, r3, #20
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	2107      	movs	r1, #7
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	0d1b      	lsrs	r3, r3, #20
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fd8:	bf00      	nop
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	401a      	ands	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0318 	and.w	r3, r3, #24
 8003006:	4908      	ldr	r1, [pc, #32]	; (8003028 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003008:	40d9      	lsrs	r1, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	400b      	ands	r3, r1
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	431a      	orrs	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	0007ffff 	.word	0x0007ffff

0800302c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800303c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6093      	str	r3, [r2, #8]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003064:	d101      	bne.n	800306a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800308c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030b4:	d101      	bne.n	80030ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030dc:	f043 0201 	orr.w	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <LL_ADC_IsEnabled+0x18>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <LL_ADC_IsEnabled+0x1a>
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003126:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800312a:	f043 0204 	orr.w	r2, r3, #4
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b04      	cmp	r3, #4
 8003150:	d101      	bne.n	8003156 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b08      	cmp	r3, #8
 8003176:	d101      	bne.n	800317c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e129      	b.n	80033fa <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d109      	bne.n	80031c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff f825 	bl	8002204 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff3f 	bl	8003050 <LL_ADC_IsDeepPowerDownEnabled>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d004      	beq.n	80031e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff25 	bl	800302c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff ff5a 	bl	80030a0 <LL_ADC_IsInternalRegulatorEnabled>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d115      	bne.n	800321e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff ff3e 	bl	8003078 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031fc:	4b81      	ldr	r3, [pc, #516]	; (8003404 <HAL_ADC_Init+0x278>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	099b      	lsrs	r3, r3, #6
 8003202:	4a81      	ldr	r2, [pc, #516]	; (8003408 <HAL_ADC_Init+0x27c>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	099b      	lsrs	r3, r3, #6
 800320a:	3301      	adds	r3, #1
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003210:	e002      	b.n	8003218 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3b01      	subs	r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f9      	bne.n	8003212 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff ff3c 	bl	80030a0 <LL_ADC_IsInternalRegulatorEnabled>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10d      	bne.n	800324a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	f043 0210 	orr.w	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ff75 	bl	800313e <LL_ADC_REG_IsConversionOngoing>
 8003254:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 80c2 	bne.w	80033e8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f040 80be 	bne.w	80033e8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003274:	f043 0202 	orr.w	r2, r3, #2
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff35 	bl	80030f0 <LL_ADC_IsEnabled>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10b      	bne.n	80032a4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800328c:	485f      	ldr	r0, [pc, #380]	; (800340c <HAL_ADC_Init+0x280>)
 800328e:	f7ff ff2f 	bl	80030f0 <LL_ADC_IsEnabled>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4619      	mov	r1, r3
 800329e:	485c      	ldr	r0, [pc, #368]	; (8003410 <HAL_ADC_Init+0x284>)
 80032a0:	f7ff fd9a 	bl	8002dd8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7e5b      	ldrb	r3, [r3, #25]
 80032a8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032ae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80032b4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80032ba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d106      	bne.n	80032e0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	3b01      	subs	r3, #1
 80032d8:	045b      	lsls	r3, r3, #17
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d009      	beq.n	80032fc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	4b44      	ldr	r3, [pc, #272]	; (8003414 <HAL_ADC_Init+0x288>)
 8003304:	4013      	ands	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	69b9      	ldr	r1, [r7, #24]
 800330c:	430b      	orrs	r3, r1
 800330e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff25 	bl	8003164 <LL_ADC_INJ_IsConversionOngoing>
 800331a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d140      	bne.n	80033a4 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d13d      	bne.n	80033a4 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	7e1b      	ldrb	r3, [r3, #24]
 8003330:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003332:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800333a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800334a:	f023 0306 	bic.w	r3, r3, #6
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6812      	ldr	r2, [r2, #0]
 8003352:	69b9      	ldr	r1, [r7, #24]
 8003354:	430b      	orrs	r3, r1
 8003356:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800335e:	2b01      	cmp	r3, #1
 8003360:	d118      	bne.n	8003394 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003378:	4311      	orrs	r1, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800337e:	4311      	orrs	r1, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003384:	430a      	orrs	r2, r1
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	611a      	str	r2, [r3, #16]
 8003392:	e007      	b.n	80033a4 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d10c      	bne.n	80033c6 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f023 010f 	bic.w	r1, r3, #15
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	1e5a      	subs	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
 80033c4:	e007      	b.n	80033d6 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 020f 	bic.w	r2, r2, #15
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	f023 0303 	bic.w	r3, r3, #3
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	659a      	str	r2, [r3, #88]	; 0x58
 80033e6:	e007      	b.n	80033f8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	f043 0210 	orr.w	r2, r3, #16
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000004 	.word	0x20000004
 8003408:	053e2d63 	.word	0x053e2d63
 800340c:	50040000 	.word	0x50040000
 8003410:	50040300 	.word	0x50040300
 8003414:	fff0c007 	.word	0xfff0c007

08003418 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fe88 	bl	800313e <LL_ADC_REG_IsConversionOngoing>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d167      	bne.n	8003504 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_ADC_Start_DMA+0x2a>
 800343e:	2302      	movs	r3, #2
 8003440:	e063      	b.n	800350a <HAL_ADC_Start_DMA+0xf2>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fc78 	bl	8003d40 <ADC_Enable>
 8003450:	4603      	mov	r3, r0
 8003452:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003454:	7dfb      	ldrb	r3, [r7, #23]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d14f      	bne.n	80034fa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003462:	f023 0301 	bic.w	r3, r3, #1
 8003466:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d006      	beq.n	8003488 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347e:	f023 0206 	bic.w	r2, r3, #6
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	65da      	str	r2, [r3, #92]	; 0x5c
 8003486:	e002      	b.n	800348e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003492:	4a20      	ldr	r2, [pc, #128]	; (8003514 <HAL_ADC_Start_DMA+0xfc>)
 8003494:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349a:	4a1f      	ldr	r2, [pc, #124]	; (8003518 <HAL_ADC_Start_DMA+0x100>)
 800349c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a2:	4a1e      	ldr	r2, [pc, #120]	; (800351c <HAL_ADC_Start_DMA+0x104>)
 80034a4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	221c      	movs	r2, #28
 80034ac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0210 	orr.w	r2, r2, #16
 80034c4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3340      	adds	r3, #64	; 0x40
 80034e0:	4619      	mov	r1, r3
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f000 feff 	bl	80042e8 <HAL_DMA_Start_IT>
 80034ea:	4603      	mov	r3, r0
 80034ec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff fe0f 	bl	8003116 <LL_ADC_REG_StartConversion>
 80034f8:	e006      	b.n	8003508 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003502:	e001      	b.n	8003508 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003504:	2302      	movs	r3, #2
 8003506:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003508:	7dfb      	ldrb	r3, [r7, #23]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	08003e4d 	.word	0x08003e4d
 8003518:	08003f25 	.word	0x08003f25
 800351c:	08003f41 	.word	0x08003f41

08003520 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b0b6      	sub	sp, #216	; 0xd8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003558:	2300      	movs	r3, #0
 800355a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_ADC_ConfigChannel+0x22>
 8003566:	2302      	movs	r3, #2
 8003568:	e3d5      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x7ce>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fde1 	bl	800313e <LL_ADC_REG_IsConversionOngoing>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	f040 83ba 	bne.w	8003cf8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b05      	cmp	r3, #5
 8003592:	d824      	bhi.n	80035de <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	3b02      	subs	r3, #2
 800359a:	2b03      	cmp	r3, #3
 800359c:	d81b      	bhi.n	80035d6 <HAL_ADC_ConfigChannel+0x8e>
 800359e:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <HAL_ADC_ConfigChannel+0x5c>)
 80035a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a4:	080035b5 	.word	0x080035b5
 80035a8:	080035bd 	.word	0x080035bd
 80035ac:	080035c5 	.word	0x080035c5
 80035b0:	080035cd 	.word	0x080035cd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80035b4:	230c      	movs	r3, #12
 80035b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035ba:	e010      	b.n	80035de <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80035bc:	2312      	movs	r3, #18
 80035be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035c2:	e00c      	b.n	80035de <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80035c4:	2318      	movs	r3, #24
 80035c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035ca:	e008      	b.n	80035de <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80035cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035d4:	e003      	b.n	80035de <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80035d6:	2306      	movs	r3, #6
 80035d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035dc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80035ec:	f7ff fca3 	bl	8002f36 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fda2 	bl	800313e <LL_ADC_REG_IsConversionOngoing>
 80035fa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fdae 	bl	8003164 <LL_ADC_INJ_IsConversionOngoing>
 8003608:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800360c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003610:	2b00      	cmp	r3, #0
 8003612:	f040 81bf 	bne.w	8003994 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003616:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800361a:	2b00      	cmp	r3, #0
 800361c:	f040 81ba 	bne.w	8003994 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003628:	d10f      	bne.n	800364a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2200      	movs	r2, #0
 8003634:	4619      	mov	r1, r3
 8003636:	f7ff fcaa 	bl	8002f8e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fc51 	bl	8002eea <LL_ADC_SetSamplingTimeCommonConfig>
 8003648:	e00e      	b.n	8003668 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6819      	ldr	r1, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	461a      	mov	r2, r3
 8003658:	f7ff fc99 	bl	8002f8e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff fc41 	bl	8002eea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	08db      	lsrs	r3, r3, #3
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2b04      	cmp	r3, #4
 8003688:	d00a      	beq.n	80036a0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6919      	ldr	r1, [r3, #16]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800369a:	f7ff fbd1 	bl	8002e40 <LL_ADC_SetOffset>
 800369e:	e179      	b.n	8003994 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fbee 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10a      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x184>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fbe3 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 80036c2:	4603      	mov	r3, r0
 80036c4:	0e9b      	lsrs	r3, r3, #26
 80036c6:	f003 021f 	and.w	r2, r3, #31
 80036ca:	e01e      	b.n	800370a <HAL_ADC_ConfigChannel+0x1c2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff fbd8 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 80036d8:	4603      	mov	r3, r0
 80036da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80036fa:	2320      	movs	r3, #32
 80036fc:	e004      	b.n	8003708 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80036fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003712:	2b00      	cmp	r3, #0
 8003714:	d105      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x1da>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	0e9b      	lsrs	r3, r3, #26
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	e018      	b.n	8003754 <HAL_ADC_ConfigChannel+0x20c>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003736:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800373a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800373e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003746:	2320      	movs	r3, #32
 8003748:	e004      	b.n	8003754 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800374a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003754:	429a      	cmp	r2, r3
 8003756:	d106      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2200      	movs	r2, #0
 800375e:	2100      	movs	r1, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fba7 	bl	8002eb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fb8b 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003772:	4603      	mov	r3, r0
 8003774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x24a>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fb80 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003788:	4603      	mov	r3, r0
 800378a:	0e9b      	lsrs	r3, r3, #26
 800378c:	f003 021f 	and.w	r2, r3, #31
 8003790:	e01e      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x288>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2101      	movs	r1, #1
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fb75 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 800379e:	4603      	mov	r3, r0
 80037a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80037b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80037b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80037c0:	2320      	movs	r3, #32
 80037c2:	e004      	b.n	80037ce <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80037c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d105      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x2a0>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0e9b      	lsrs	r3, r3, #26
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	e018      	b.n	800381a <HAL_ADC_ConfigChannel+0x2d2>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80037fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003804:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800380c:	2320      	movs	r3, #32
 800380e:	e004      	b.n	800381a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800381a:	429a      	cmp	r2, r3
 800381c:	d106      	bne.n	800382c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2200      	movs	r2, #0
 8003824:	2101      	movs	r1, #1
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fb44 	bl	8002eb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2102      	movs	r1, #2
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fb28 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003838:	4603      	mov	r3, r0
 800383a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x310>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2102      	movs	r1, #2
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fb1d 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 800384e:	4603      	mov	r3, r0
 8003850:	0e9b      	lsrs	r3, r3, #26
 8003852:	f003 021f 	and.w	r2, r3, #31
 8003856:	e01e      	b.n	8003896 <HAL_ADC_ConfigChannel+0x34e>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2102      	movs	r1, #2
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fb12 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003864:	4603      	mov	r3, r0
 8003866:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003876:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800387a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800387e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003886:	2320      	movs	r3, #32
 8003888:	e004      	b.n	8003894 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800388a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800388e:	fab3 f383 	clz	r3, r3
 8003892:	b2db      	uxtb	r3, r3
 8003894:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d105      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x366>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	0e9b      	lsrs	r3, r3, #26
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	e014      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x390>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038b6:	fa93 f3a3 	rbit	r3, r3
 80038ba:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80038bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80038c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80038ca:	2320      	movs	r3, #32
 80038cc:	e004      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80038ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038d8:	429a      	cmp	r2, r3
 80038da:	d106      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2200      	movs	r2, #0
 80038e2:	2102      	movs	r1, #2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fae5 	bl	8002eb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2103      	movs	r1, #3
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff fac9 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x3ce>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2103      	movs	r1, #3
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff fabe 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 800390c:	4603      	mov	r3, r0
 800390e:	0e9b      	lsrs	r3, r3, #26
 8003910:	f003 021f 	and.w	r2, r3, #31
 8003914:	e017      	b.n	8003946 <HAL_ADC_ConfigChannel+0x3fe>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2103      	movs	r1, #3
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fab3 	bl	8002e88 <LL_ADC_GetOffsetChannel>
 8003922:	4603      	mov	r3, r0
 8003924:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003930:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003938:	2320      	movs	r3, #32
 800393a:	e003      	b.n	8003944 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800393c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800393e:	fab3 f383 	clz	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394e:	2b00      	cmp	r3, #0
 8003950:	d105      	bne.n	800395e <HAL_ADC_ConfigChannel+0x416>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	0e9b      	lsrs	r3, r3, #26
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	e011      	b.n	8003982 <HAL_ADC_ConfigChannel+0x43a>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800396c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800396e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003976:	2320      	movs	r3, #32
 8003978:	e003      	b.n	8003982 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800397a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800397c:	fab3 f383 	clz	r3, r3
 8003980:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003982:	429a      	cmp	r2, r3
 8003984:	d106      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2200      	movs	r2, #0
 800398c:	2103      	movs	r1, #3
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fa90 	bl	8002eb4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fba9 	bl	80030f0 <LL_ADC_IsEnabled>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f040 813f 	bne.w	8003c24 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	6819      	ldr	r1, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	461a      	mov	r2, r3
 80039b4:	f7ff fb16 	bl	8002fe4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a8e      	ldr	r2, [pc, #568]	; (8003bf8 <HAL_ADC_ConfigChannel+0x6b0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	f040 8130 	bne.w	8003c24 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10b      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x4a4>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	0e9b      	lsrs	r3, r3, #26
 80039da:	3301      	adds	r3, #1
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2b09      	cmp	r3, #9
 80039e2:	bf94      	ite	ls
 80039e4:	2301      	movls	r3, #1
 80039e6:	2300      	movhi	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	e019      	b.n	8003a20 <HAL_ADC_ConfigChannel+0x4d8>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039f4:	fa93 f3a3 	rbit	r3, r3
 80039f8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80039fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80039fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003a04:	2320      	movs	r3, #32
 8003a06:	e003      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a0a:	fab3 f383 	clz	r3, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3301      	adds	r3, #1
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	2b09      	cmp	r3, #9
 8003a18:	bf94      	ite	ls
 8003a1a:	2301      	movls	r3, #1
 8003a1c:	2300      	movhi	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d079      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d107      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x4f8>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	0e9b      	lsrs	r3, r3, #26
 8003a36:	3301      	adds	r3, #1
 8003a38:	069b      	lsls	r3, r3, #26
 8003a3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a3e:	e015      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x524>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a48:	fa93 f3a3 	rbit	r3, r3
 8003a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a50:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003a58:	2320      	movs	r3, #32
 8003a5a:	e003      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a5e:	fab3 f383 	clz	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	3301      	adds	r3, #1
 8003a66:	069b      	lsls	r3, r3, #26
 8003a68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d109      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x544>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	0e9b      	lsrs	r3, r3, #26
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	2101      	movs	r1, #1
 8003a86:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8a:	e017      	b.n	8003abc <HAL_ADC_ConfigChannel+0x574>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a94:	fa93 f3a3 	rbit	r3, r3
 8003a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003aa4:	2320      	movs	r3, #32
 8003aa6:	e003      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8003abc:	ea42 0103 	orr.w	r1, r2, r3
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x59a>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	0e9b      	lsrs	r3, r3, #26
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f003 021f 	and.w	r2, r3, #31
 8003ad8:	4613      	mov	r3, r2
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	4413      	add	r3, r2
 8003ade:	051b      	lsls	r3, r3, #20
 8003ae0:	e018      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x5cc>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003afa:	2320      	movs	r3, #32
 8003afc:	e003      	b.n	8003b06 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b00:	fab3 f383 	clz	r3, r3
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	3301      	adds	r3, #1
 8003b08:	f003 021f 	and.w	r2, r3, #31
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b14:	430b      	orrs	r3, r1
 8003b16:	e080      	b.n	8003c1a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d107      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x5ec>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	0e9b      	lsrs	r3, r3, #26
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	069b      	lsls	r3, r3, #26
 8003b2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b32:	e015      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x618>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003b4c:	2320      	movs	r3, #32
 8003b4e:	e003      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	fab3 f383 	clz	r3, r3
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	3301      	adds	r3, #1
 8003b5a:	069b      	lsls	r3, r3, #26
 8003b5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d109      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x638>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	0e9b      	lsrs	r3, r3, #26
 8003b72:	3301      	adds	r3, #1
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	e017      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x668>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	fa93 f3a3 	rbit	r3, r3
 8003b8c:	61bb      	str	r3, [r7, #24]
  return result;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003b98:	2320      	movs	r3, #32
 8003b9a:	e003      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	fab3 f383 	clz	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	2101      	movs	r1, #1
 8003bac:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb0:	ea42 0103 	orr.w	r1, r2, r3
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10d      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x694>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	0e9b      	lsrs	r3, r3, #26
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f003 021f 	and.w	r2, r3, #31
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3b1e      	subs	r3, #30
 8003bd4:	051b      	lsls	r3, r3, #20
 8003bd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bda:	e01d      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x6d0>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	fa93 f3a3 	rbit	r3, r3
 8003be8:	60fb      	str	r3, [r7, #12]
  return result;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d103      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003bf4:	2320      	movs	r3, #32
 8003bf6:	e005      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x6bc>
 8003bf8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	f003 021f 	and.w	r2, r3, #31
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	3b1e      	subs	r3, #30
 8003c12:	051b      	lsls	r3, r3, #20
 8003c14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c18:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c1e:	4619      	mov	r1, r3
 8003c20:	f7ff f9b5 	bl	8002f8e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b3d      	ldr	r3, [pc, #244]	; (8003d20 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d06c      	beq.n	8003d0a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c30:	483c      	ldr	r0, [pc, #240]	; (8003d24 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c32:	f7ff f8f7 	bl	8002e24 <LL_ADC_GetCommonPathInternalCh>
 8003c36:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a3a      	ldr	r2, [pc, #232]	; (8003d28 <HAL_ADC_ConfigChannel+0x7e0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d127      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d121      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a35      	ldr	r2, [pc, #212]	; (8003d2c <HAL_ADC_ConfigChannel+0x7e4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d157      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c62:	4619      	mov	r1, r3
 8003c64:	482f      	ldr	r0, [pc, #188]	; (8003d24 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c66:	f7ff f8ca 	bl	8002dfe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c6a:	4b31      	ldr	r3, [pc, #196]	; (8003d30 <HAL_ADC_ConfigChannel+0x7e8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	099b      	lsrs	r3, r3, #6
 8003c70:	4a30      	ldr	r2, [pc, #192]	; (8003d34 <HAL_ADC_ConfigChannel+0x7ec>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	099b      	lsrs	r3, r3, #6
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c84:	e002      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f9      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c92:	e03a      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a27      	ldr	r2, [pc, #156]	; (8003d38 <HAL_ADC_ConfigChannel+0x7f0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d113      	bne.n	8003cc6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ca2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10d      	bne.n	8003cc6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <HAL_ADC_ConfigChannel+0x7e4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d12a      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4819      	ldr	r0, [pc, #100]	; (8003d24 <HAL_ADC_ConfigChannel+0x7dc>)
 8003cc0:	f7ff f89d 	bl	8002dfe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cc4:	e021      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1c      	ldr	r2, [pc, #112]	; (8003d3c <HAL_ADC_ConfigChannel+0x7f4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d11c      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d116      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <HAL_ADC_ConfigChannel+0x7e4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d111      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ce6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cee:	4619      	mov	r1, r3
 8003cf0:	480c      	ldr	r0, [pc, #48]	; (8003d24 <HAL_ADC_ConfigChannel+0x7dc>)
 8003cf2:	f7ff f884 	bl	8002dfe <LL_ADC_SetCommonPathInternalCh>
 8003cf6:	e008      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003d12:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	37d8      	adds	r7, #216	; 0xd8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	80080000 	.word	0x80080000
 8003d24:	50040300 	.word	0x50040300
 8003d28:	c7520000 	.word	0xc7520000
 8003d2c:	50040000 	.word	0x50040000
 8003d30:	20000004 	.word	0x20000004
 8003d34:	053e2d63 	.word	0x053e2d63
 8003d38:	cb840000 	.word	0xcb840000
 8003d3c:	80000001 	.word	0x80000001

08003d40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff f9cd 	bl	80030f0 <LL_ADC_IsEnabled>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d169      	bne.n	8003e30 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <ADC_Enable+0xfc>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	f043 0210 	orr.w	r2, r3, #16
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	f043 0201 	orr.w	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e055      	b.n	8003e32 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff f99c 	bl	80030c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d90:	482b      	ldr	r0, [pc, #172]	; (8003e40 <ADC_Enable+0x100>)
 8003d92:	f7ff f847 	bl	8002e24 <LL_ADC_GetCommonPathInternalCh>
 8003d96:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003da0:	4b28      	ldr	r3, [pc, #160]	; (8003e44 <ADC_Enable+0x104>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	099b      	lsrs	r3, r3, #6
 8003da6:	4a28      	ldr	r2, [pc, #160]	; (8003e48 <ADC_Enable+0x108>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	099b      	lsrs	r3, r3, #6
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	4613      	mov	r3, r2
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003dba:	e002      	b.n	8003dc2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f9      	bne.n	8003dbc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003dc8:	f7fe ffd6 	bl	8002d78 <HAL_GetTick>
 8003dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dce:	e028      	b.n	8003e22 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff f98b 	bl	80030f0 <LL_ADC_IsEnabled>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d104      	bne.n	8003dea <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff f96f 	bl	80030c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dea:	f7fe ffc5 	bl	8002d78 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d914      	bls.n	8003e22 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d00d      	beq.n	8003e22 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	f043 0210 	orr.w	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e16:	f043 0201 	orr.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e007      	b.n	8003e32 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d1cf      	bne.n	8003dd0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	8000003f 	.word	0x8000003f
 8003e40:	50040300 	.word	0x50040300
 8003e44:	20000004 	.word	0x20000004
 8003e48:	053e2d63 	.word	0x053e2d63

08003e4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d14b      	bne.n	8003efe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d021      	beq.n	8003ec4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff f843 	bl	8002f10 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d032      	beq.n	8003ef6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d12b      	bne.n	8003ef6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d11f      	bne.n	8003ef6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	f043 0201 	orr.w	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	659a      	str	r2, [r3, #88]	; 0x58
 8003ec2:	e018      	b.n	8003ef6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d111      	bne.n	8003ef6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d105      	bne.n	8003ef6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eee:	f043 0201 	orr.w	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7fe f94a 	bl	8002190 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003efc:	e00e      	b.n	8003f1c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff fb12 	bl	8003534 <HAL_ADC_ErrorCallback>
}
 8003f10:	e004      	b.n	8003f1c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4798      	blx	r3
}
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff faf4 	bl	8003520 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5e:	f043 0204 	orr.w	r2, r3, #4
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f7ff fae4 	bl	8003534 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f90:	4013      	ands	r3, r2
 8003f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fa6:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	60d3      	str	r3, [r2, #12]
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	0a1b      	lsrs	r3, r3, #8
 8003fc6:	f003 0307 	and.w	r3, r3, #7
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	db0b      	blt.n	8004002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	f003 021f 	and.w	r2, r3, #31
 8003ff0:	4907      	ldr	r1, [pc, #28]	; (8004010 <__NVIC_EnableIRQ+0x38>)
 8003ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8003ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	e000e100 	.word	0xe000e100

08004014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	6039      	str	r1, [r7, #0]
 800401e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004024:	2b00      	cmp	r3, #0
 8004026:	db0a      	blt.n	800403e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	b2da      	uxtb	r2, r3
 800402c:	490c      	ldr	r1, [pc, #48]	; (8004060 <__NVIC_SetPriority+0x4c>)
 800402e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004032:	0112      	lsls	r2, r2, #4
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	440b      	add	r3, r1
 8004038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800403c:	e00a      	b.n	8004054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	b2da      	uxtb	r2, r3
 8004042:	4908      	ldr	r1, [pc, #32]	; (8004064 <__NVIC_SetPriority+0x50>)
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	3b04      	subs	r3, #4
 800404c:	0112      	lsls	r2, r2, #4
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	440b      	add	r3, r1
 8004052:	761a      	strb	r2, [r3, #24]
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	e000e100 	.word	0xe000e100
 8004064:	e000ed00 	.word	0xe000ed00

08004068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004068:	b480      	push	{r7}
 800406a:	b089      	sub	sp, #36	; 0x24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f1c3 0307 	rsb	r3, r3, #7
 8004082:	2b04      	cmp	r3, #4
 8004084:	bf28      	it	cs
 8004086:	2304      	movcs	r3, #4
 8004088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	3304      	adds	r3, #4
 800408e:	2b06      	cmp	r3, #6
 8004090:	d902      	bls.n	8004098 <NVIC_EncodePriority+0x30>
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3b03      	subs	r3, #3
 8004096:	e000      	b.n	800409a <NVIC_EncodePriority+0x32>
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800409c:	f04f 32ff 	mov.w	r2, #4294967295
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43da      	mvns	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	401a      	ands	r2, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040b0:	f04f 31ff 	mov.w	r1, #4294967295
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ba:	43d9      	mvns	r1, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c0:	4313      	orrs	r3, r2
         );
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3724      	adds	r7, #36	; 0x24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
	...

080040d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3b01      	subs	r3, #1
 80040dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040e0:	d301      	bcc.n	80040e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040e2:	2301      	movs	r3, #1
 80040e4:	e00f      	b.n	8004106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <SysTick_Config+0x40>)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040ee:	210f      	movs	r1, #15
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295
 80040f4:	f7ff ff8e 	bl	8004014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <SysTick_Config+0x40>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040fe:	4b04      	ldr	r3, [pc, #16]	; (8004110 <SysTick_Config+0x40>)
 8004100:	2207      	movs	r2, #7
 8004102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	e000e010 	.word	0xe000e010

08004114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff ff29 	bl	8003f74 <__NVIC_SetPriorityGrouping>
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b086      	sub	sp, #24
 800412e:	af00      	add	r7, sp, #0
 8004130:	4603      	mov	r3, r0
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800413c:	f7ff ff3e 	bl	8003fbc <__NVIC_GetPriorityGrouping>
 8004140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	6978      	ldr	r0, [r7, #20]
 8004148:	f7ff ff8e 	bl	8004068 <NVIC_EncodePriority>
 800414c:	4602      	mov	r2, r0
 800414e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff ff5d 	bl	8004014 <__NVIC_SetPriority>
}
 800415a:	bf00      	nop
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	4603      	mov	r3, r0
 800416a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800416c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff ff31 	bl	8003fd8 <__NVIC_EnableIRQ>
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff ffa2 	bl	80040d0 <SysTick_Config>
 800418c:	4603      	mov	r3, r0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e08d      	b.n	80042c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	4b47      	ldr	r3, [pc, #284]	; (80042d0 <HAL_DMA_Init+0x138>)
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d80f      	bhi.n	80041d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	4b45      	ldr	r3, [pc, #276]	; (80042d4 <HAL_DMA_Init+0x13c>)
 80041be:	4413      	add	r3, r2
 80041c0:	4a45      	ldr	r2, [pc, #276]	; (80042d8 <HAL_DMA_Init+0x140>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	009a      	lsls	r2, r3, #2
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a42      	ldr	r2, [pc, #264]	; (80042dc <HAL_DMA_Init+0x144>)
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40
 80041d4:	e00e      	b.n	80041f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	4b40      	ldr	r3, [pc, #256]	; (80042e0 <HAL_DMA_Init+0x148>)
 80041de:	4413      	add	r3, r2
 80041e0:	4a3d      	ldr	r2, [pc, #244]	; (80042d8 <HAL_DMA_Init+0x140>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	091b      	lsrs	r3, r3, #4
 80041e8:	009a      	lsls	r2, r3, #2
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a3c      	ldr	r2, [pc, #240]	; (80042e4 <HAL_DMA_Init+0x14c>)
 80041f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800420a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f9b6 	bl	80045b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004254:	d102      	bne.n	800425c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004270:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d010      	beq.n	800429c <HAL_DMA_Init+0x104>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b04      	cmp	r3, #4
 8004280:	d80c      	bhi.n	800429c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f9d6 	bl	8004634 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	e008      	b.n	80042ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40020407 	.word	0x40020407
 80042d4:	bffdfff8 	.word	0xbffdfff8
 80042d8:	cccccccd 	.word	0xcccccccd
 80042dc:	40020000 	.word	0x40020000
 80042e0:	bffdfbf8 	.word	0xbffdfbf8
 80042e4:	40020400 	.word	0x40020400

080042e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_DMA_Start_IT+0x20>
 8004304:	2302      	movs	r3, #2
 8004306:	e066      	b.n	80043d6 <HAL_DMA_Start_IT+0xee>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b01      	cmp	r3, #1
 800431a:	d155      	bne.n	80043c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0201 	bic.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	68b9      	ldr	r1, [r7, #8]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f8fb 	bl	800453c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f042 020e 	orr.w	r2, r2, #14
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	e00f      	b.n	8004380 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0204 	bic.w	r2, r2, #4
 800436e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 020a 	orr.w	r2, r2, #10
 800437e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d007      	beq.n	800439e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800439c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	e005      	b.n	80043d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
 80043d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	f003 031c 	and.w	r3, r3, #28
 80043fe:	2204      	movs	r2, #4
 8004400:	409a      	lsls	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4013      	ands	r3, r2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d026      	beq.n	8004458 <HAL_DMA_IRQHandler+0x7a>
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d021      	beq.n	8004458 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	d107      	bne.n	8004432 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0204 	bic.w	r2, r2, #4
 8004430:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004436:	f003 021c 	and.w	r2, r3, #28
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	2104      	movs	r1, #4
 8004440:	fa01 f202 	lsl.w	r2, r1, r2
 8004444:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	2b00      	cmp	r3, #0
 800444c:	d071      	beq.n	8004532 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004456:	e06c      	b.n	8004532 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445c:	f003 031c 	and.w	r3, r3, #28
 8004460:	2202      	movs	r2, #2
 8004462:	409a      	lsls	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d02e      	beq.n	80044ca <HAL_DMA_IRQHandler+0xec>
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d029      	beq.n	80044ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10b      	bne.n	800449c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 020a 	bic.w	r2, r2, #10
 8004492:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	f003 021c 	and.w	r2, r3, #28
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	2102      	movs	r1, #2
 80044aa:	fa01 f202 	lsl.w	r2, r1, r2
 80044ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d038      	beq.n	8004532 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80044c8:	e033      	b.n	8004532 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	f003 031c 	and.w	r3, r3, #28
 80044d2:	2208      	movs	r2, #8
 80044d4:	409a      	lsls	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d02a      	beq.n	8004534 <HAL_DMA_IRQHandler+0x156>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d025      	beq.n	8004534 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 020e 	bic.w	r2, r2, #14
 80044f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fc:	f003 021c 	and.w	r2, r3, #28
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	2101      	movs	r1, #1
 8004506:	fa01 f202 	lsl.w	r2, r1, r2
 800450a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004526:	2b00      	cmp	r3, #0
 8004528:	d004      	beq.n	8004534 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004532:	bf00      	nop
 8004534:	bf00      	nop
}
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004552:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004564:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	f003 021c 	and.w	r2, r3, #28
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	2101      	movs	r1, #1
 8004574:	fa01 f202 	lsl.w	r2, r1, r2
 8004578:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b10      	cmp	r3, #16
 8004588:	d108      	bne.n	800459c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800459a:	e007      	b.n	80045ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	60da      	str	r2, [r3, #12]
}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	4b17      	ldr	r3, [pc, #92]	; (8004624 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d80a      	bhi.n	80045e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d0:	089b      	lsrs	r3, r3, #2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045d8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6493      	str	r3, [r2, #72]	; 0x48
 80045e0:	e007      	b.n	80045f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	009a      	lsls	r2, r3, #2
 80045ea:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80045ec:	4413      	add	r3, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	3b08      	subs	r3, #8
 80045fa:	4a0c      	ldr	r2, [pc, #48]	; (800462c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004608:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2201      	movs	r2, #1
 8004612:	409a      	lsls	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004618:	bf00      	nop
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	40020407 	.word	0x40020407
 8004628:	4002081c 	.word	0x4002081c
 800462c:	cccccccd 	.word	0xcccccccd
 8004630:	40020880 	.word	0x40020880

08004634 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	461a      	mov	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a08      	ldr	r2, [pc, #32]	; (8004678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004656:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3b01      	subs	r3, #1
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	2201      	movs	r2, #1
 8004662:	409a      	lsls	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	1000823f 	.word	0x1000823f
 8004678:	40020940 	.word	0x40020940

0800467c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800468a:	e166      	b.n	800495a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	2101      	movs	r1, #1
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	fa01 f303 	lsl.w	r3, r1, r3
 8004698:	4013      	ands	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8158 	beq.w	8004954 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 0303 	and.w	r3, r3, #3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d005      	beq.n	80046bc <HAL_GPIO_Init+0x40>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d130      	bne.n	800471e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	2203      	movs	r2, #3
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046f2:	2201      	movs	r2, #1
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43db      	mvns	r3, r3
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4013      	ands	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	f003 0201 	and.w	r2, r3, #1
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b03      	cmp	r3, #3
 8004728:	d017      	beq.n	800475a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	2203      	movs	r2, #3
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d123      	bne.n	80047ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	08da      	lsrs	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3208      	adds	r2, #8
 800476e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004772:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	220f      	movs	r2, #15
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43db      	mvns	r3, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	08da      	lsrs	r2, r3, #3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3208      	adds	r2, #8
 80047a8:	6939      	ldr	r1, [r7, #16]
 80047aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	2203      	movs	r2, #3
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43db      	mvns	r3, r3
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4013      	ands	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f003 0203 	and.w	r2, r3, #3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 80b2 	beq.w	8004954 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047f0:	4b61      	ldr	r3, [pc, #388]	; (8004978 <HAL_GPIO_Init+0x2fc>)
 80047f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f4:	4a60      	ldr	r2, [pc, #384]	; (8004978 <HAL_GPIO_Init+0x2fc>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6613      	str	r3, [r2, #96]	; 0x60
 80047fc:	4b5e      	ldr	r3, [pc, #376]	; (8004978 <HAL_GPIO_Init+0x2fc>)
 80047fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004808:	4a5c      	ldr	r2, [pc, #368]	; (800497c <HAL_GPIO_Init+0x300>)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	089b      	lsrs	r3, r3, #2
 800480e:	3302      	adds	r3, #2
 8004810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004814:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	220f      	movs	r2, #15
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004832:	d02b      	beq.n	800488c <HAL_GPIO_Init+0x210>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a52      	ldr	r2, [pc, #328]	; (8004980 <HAL_GPIO_Init+0x304>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d025      	beq.n	8004888 <HAL_GPIO_Init+0x20c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a51      	ldr	r2, [pc, #324]	; (8004984 <HAL_GPIO_Init+0x308>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d01f      	beq.n	8004884 <HAL_GPIO_Init+0x208>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a50      	ldr	r2, [pc, #320]	; (8004988 <HAL_GPIO_Init+0x30c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d019      	beq.n	8004880 <HAL_GPIO_Init+0x204>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a4f      	ldr	r2, [pc, #316]	; (800498c <HAL_GPIO_Init+0x310>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d013      	beq.n	800487c <HAL_GPIO_Init+0x200>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a4e      	ldr	r2, [pc, #312]	; (8004990 <HAL_GPIO_Init+0x314>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00d      	beq.n	8004878 <HAL_GPIO_Init+0x1fc>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a4d      	ldr	r2, [pc, #308]	; (8004994 <HAL_GPIO_Init+0x318>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d007      	beq.n	8004874 <HAL_GPIO_Init+0x1f8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a4c      	ldr	r2, [pc, #304]	; (8004998 <HAL_GPIO_Init+0x31c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d101      	bne.n	8004870 <HAL_GPIO_Init+0x1f4>
 800486c:	2307      	movs	r3, #7
 800486e:	e00e      	b.n	800488e <HAL_GPIO_Init+0x212>
 8004870:	2308      	movs	r3, #8
 8004872:	e00c      	b.n	800488e <HAL_GPIO_Init+0x212>
 8004874:	2306      	movs	r3, #6
 8004876:	e00a      	b.n	800488e <HAL_GPIO_Init+0x212>
 8004878:	2305      	movs	r3, #5
 800487a:	e008      	b.n	800488e <HAL_GPIO_Init+0x212>
 800487c:	2304      	movs	r3, #4
 800487e:	e006      	b.n	800488e <HAL_GPIO_Init+0x212>
 8004880:	2303      	movs	r3, #3
 8004882:	e004      	b.n	800488e <HAL_GPIO_Init+0x212>
 8004884:	2302      	movs	r3, #2
 8004886:	e002      	b.n	800488e <HAL_GPIO_Init+0x212>
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <HAL_GPIO_Init+0x212>
 800488c:	2300      	movs	r3, #0
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	f002 0203 	and.w	r2, r2, #3
 8004894:	0092      	lsls	r2, r2, #2
 8004896:	4093      	lsls	r3, r2
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800489e:	4937      	ldr	r1, [pc, #220]	; (800497c <HAL_GPIO_Init+0x300>)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	089b      	lsrs	r3, r3, #2
 80048a4:	3302      	adds	r3, #2
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048ac:	4b3b      	ldr	r3, [pc, #236]	; (800499c <HAL_GPIO_Init+0x320>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4013      	ands	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048d0:	4a32      	ldr	r2, [pc, #200]	; (800499c <HAL_GPIO_Init+0x320>)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048d6:	4b31      	ldr	r3, [pc, #196]	; (800499c <HAL_GPIO_Init+0x320>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	43db      	mvns	r3, r3
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4013      	ands	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048fa:	4a28      	ldr	r2, [pc, #160]	; (800499c <HAL_GPIO_Init+0x320>)
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004900:	4b26      	ldr	r3, [pc, #152]	; (800499c <HAL_GPIO_Init+0x320>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	43db      	mvns	r3, r3
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4013      	ands	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004924:	4a1d      	ldr	r2, [pc, #116]	; (800499c <HAL_GPIO_Init+0x320>)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800492a:	4b1c      	ldr	r3, [pc, #112]	; (800499c <HAL_GPIO_Init+0x320>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	43db      	mvns	r3, r3
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4013      	ands	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800494e:	4a13      	ldr	r2, [pc, #76]	; (800499c <HAL_GPIO_Init+0x320>)
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	3301      	adds	r3, #1
 8004958:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	fa22 f303 	lsr.w	r3, r2, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	f47f ae91 	bne.w	800468c <HAL_GPIO_Init+0x10>
  }
}
 800496a:	bf00      	nop
 800496c:	bf00      	nop
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	40021000 	.word	0x40021000
 800497c:	40010000 	.word	0x40010000
 8004980:	48000400 	.word	0x48000400
 8004984:	48000800 	.word	0x48000800
 8004988:	48000c00 	.word	0x48000c00
 800498c:	48001000 	.word	0x48001000
 8004990:	48001400 	.word	0x48001400
 8004994:	48001800 	.word	0x48001800
 8004998:	48001c00 	.word	0x48001c00
 800499c:	40010400 	.word	0x40010400

080049a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	807b      	strh	r3, [r7, #2]
 80049ac:	4613      	mov	r3, r2
 80049ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049b0:	787b      	ldrb	r3, [r7, #1]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049bc:	e002      	b.n	80049c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e08d      	b.n	8004afe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fd fcd6 	bl	80023a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2224      	movs	r2, #36	; 0x24
 8004a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0201 	bic.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d107      	bne.n	8004a4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a46:	609a      	str	r2, [r3, #8]
 8004a48:	e006      	b.n	8004a58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d108      	bne.n	8004a72 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a6e:	605a      	str	r2, [r3, #4]
 8004a70:	e007      	b.n	8004a82 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69d9      	ldr	r1, [r3, #28]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1a      	ldr	r2, [r3, #32]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	607a      	str	r2, [r7, #4]
 8004b12:	461a      	mov	r2, r3
 8004b14:	460b      	mov	r3, r1
 8004b16:	817b      	strh	r3, [r7, #10]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	f040 80fd 	bne.w	8004d24 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_I2C_Master_Transmit+0x30>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e0f6      	b.n	8004d26 <HAL_I2C_Master_Transmit+0x21e>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b40:	f7fe f91a 	bl	8002d78 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	2319      	movs	r3, #25
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fa0a 	bl	8004f6c <I2C_WaitOnFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e0e1      	b.n	8004d26 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2221      	movs	r2, #33	; 0x21
 8004b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2210      	movs	r2, #16
 8004b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	893a      	ldrh	r2, [r7, #8]
 8004b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2bff      	cmp	r3, #255	; 0xff
 8004b92:	d906      	bls.n	8004ba2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	22ff      	movs	r2, #255	; 0xff
 8004b98:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004b9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	e007      	b.n	8004bb2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004bac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bb0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d024      	beq.n	8004c04 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	781a      	ldrb	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	8979      	ldrh	r1, [r7, #10]
 8004bf6:	4b4e      	ldr	r3, [pc, #312]	; (8004d30 <HAL_I2C_Master_Transmit+0x228>)
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fbf1 	bl	80053e4 <I2C_TransferConfig>
 8004c02:	e066      	b.n	8004cd2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	8979      	ldrh	r1, [r7, #10]
 8004c0c:	4b48      	ldr	r3, [pc, #288]	; (8004d30 <HAL_I2C_Master_Transmit+0x228>)
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fbe6 	bl	80053e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004c18:	e05b      	b.n	8004cd2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	6a39      	ldr	r1, [r7, #32]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f9f3 	bl	800500a <I2C_WaitOnTXISFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e07b      	b.n	8004d26 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	781a      	ldrb	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d034      	beq.n	8004cd2 <HAL_I2C_Master_Transmit+0x1ca>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d130      	bne.n	8004cd2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	2200      	movs	r2, #0
 8004c78:	2180      	movs	r1, #128	; 0x80
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 f976 	bl	8004f6c <I2C_WaitOnFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e04d      	b.n	8004d26 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2bff      	cmp	r3, #255	; 0xff
 8004c92:	d90e      	bls.n	8004cb2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	22ff      	movs	r2, #255	; 0xff
 8004c98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	8979      	ldrh	r1, [r7, #10]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fb9a 	bl	80053e4 <I2C_TransferConfig>
 8004cb0:	e00f      	b.n	8004cd2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	8979      	ldrh	r1, [r7, #10]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 fb89 	bl	80053e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d19e      	bne.n	8004c1a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	6a39      	ldr	r1, [r7, #32]
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f9d9 	bl	8005098 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e01a      	b.n	8004d26 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6859      	ldr	r1, [r3, #4]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <HAL_I2C_Master_Transmit+0x22c>)
 8004d04:	400b      	ands	r3, r1
 8004d06:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e000      	b.n	8004d26 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004d24:	2302      	movs	r3, #2
  }
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	80002000 	.word	0x80002000
 8004d34:	fe00e800 	.word	0xfe00e800

08004d38 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	607a      	str	r2, [r7, #4]
 8004d42:	461a      	mov	r2, r3
 8004d44:	460b      	mov	r3, r1
 8004d46:	817b      	strh	r3, [r7, #10]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	f040 80db 	bne.w	8004f10 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_I2C_Master_Receive+0x30>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e0d4      	b.n	8004f12 <HAL_I2C_Master_Receive+0x1da>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d70:	f7fe f802 	bl	8002d78 <HAL_GetTick>
 8004d74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	2319      	movs	r3, #25
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f8f2 	bl	8004f6c <I2C_WaitOnFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e0bf      	b.n	8004f12 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2222      	movs	r2, #34	; 0x22
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2210      	movs	r2, #16
 8004d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	893a      	ldrh	r2, [r7, #8]
 8004db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2bff      	cmp	r3, #255	; 0xff
 8004dc2:	d90e      	bls.n	8004de2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	22ff      	movs	r2, #255	; 0xff
 8004dc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	8979      	ldrh	r1, [r7, #10]
 8004dd2:	4b52      	ldr	r3, [pc, #328]	; (8004f1c <HAL_I2C_Master_Receive+0x1e4>)
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fb02 	bl	80053e4 <I2C_TransferConfig>
 8004de0:	e06d      	b.n	8004ebe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	8979      	ldrh	r1, [r7, #10]
 8004df4:	4b49      	ldr	r3, [pc, #292]	; (8004f1c <HAL_I2C_Master_Receive+0x1e4>)
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 faf1 	bl	80053e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004e02:	e05c      	b.n	8004ebe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	6a39      	ldr	r1, [r7, #32]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f989 	bl	8005120 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e07c      	b.n	8004f12 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d034      	beq.n	8004ebe <HAL_I2C_Master_Receive+0x186>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d130      	bne.n	8004ebe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	2200      	movs	r2, #0
 8004e64:	2180      	movs	r1, #128	; 0x80
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f880 	bl	8004f6c <I2C_WaitOnFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e04d      	b.n	8004f12 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2bff      	cmp	r3, #255	; 0xff
 8004e7e:	d90e      	bls.n	8004e9e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	22ff      	movs	r2, #255	; 0xff
 8004e84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	8979      	ldrh	r1, [r7, #10]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 faa4 	bl	80053e4 <I2C_TransferConfig>
 8004e9c:	e00f      	b.n	8004ebe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	8979      	ldrh	r1, [r7, #10]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fa93 	bl	80053e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d19d      	bne.n	8004e04 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	6a39      	ldr	r1, [r7, #32]
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 f8e3 	bl	8005098 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e01a      	b.n	8004f12 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6859      	ldr	r1, [r3, #4]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <HAL_I2C_Master_Receive+0x1e8>)
 8004ef0:	400b      	ands	r3, r1
 8004ef2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e000      	b.n	8004f12 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004f10:	2302      	movs	r3, #2
  }
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	80002400 	.word	0x80002400
 8004f20:	fe00e800 	.word	0xfe00e800

08004f24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d103      	bne.n	8004f42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d007      	beq.n	8004f60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	619a      	str	r2, [r3, #24]
  }
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f7c:	e031      	b.n	8004fe2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f84:	d02d      	beq.n	8004fe2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f86:	f7fd fef7 	bl	8002d78 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d302      	bcc.n	8004f9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d122      	bne.n	8004fe2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d113      	bne.n	8004fe2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	f043 0220 	orr.w	r2, r3, #32
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e00f      	b.n	8005002 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699a      	ldr	r2, [r3, #24]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4013      	ands	r3, r2
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	bf0c      	ite	eq
 8004ff2:	2301      	moveq	r3, #1
 8004ff4:	2300      	movne	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d0be      	beq.n	8004f7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005016:	e033      	b.n	8005080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f901 	bl	8005224 <I2C_IsErrorOccurred>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e031      	b.n	8005090 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005032:	d025      	beq.n	8005080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005034:	f7fd fea0 	bl	8002d78 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	429a      	cmp	r2, r3
 8005042:	d302      	bcc.n	800504a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d11a      	bne.n	8005080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b02      	cmp	r3, #2
 8005056:	d013      	beq.n	8005080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505c:	f043 0220 	orr.w	r2, r3, #32
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e007      	b.n	8005090 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b02      	cmp	r3, #2
 800508c:	d1c4      	bne.n	8005018 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050a4:	e02f      	b.n	8005106 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f8ba 	bl	8005224 <I2C_IsErrorOccurred>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e02d      	b.n	8005116 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ba:	f7fd fe5d 	bl	8002d78 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d302      	bcc.n	80050d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d11a      	bne.n	8005106 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d013      	beq.n	8005106 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e2:	f043 0220 	orr.w	r2, r3, #32
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e007      	b.n	8005116 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b20      	cmp	r3, #32
 8005112:	d1c8      	bne.n	80050a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800512c:	e06b      	b.n	8005206 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f876 	bl	8005224 <I2C_IsErrorOccurred>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e069      	b.n	8005216 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	f003 0320 	and.w	r3, r3, #32
 800514c:	2b20      	cmp	r3, #32
 800514e:	d138      	bne.n	80051c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b04      	cmp	r3, #4
 800515c:	d105      	bne.n	800516a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e055      	b.n	8005216 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b10      	cmp	r3, #16
 8005176:	d107      	bne.n	8005188 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2210      	movs	r2, #16
 800517e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2204      	movs	r2, #4
 8005184:	645a      	str	r2, [r3, #68]	; 0x44
 8005186:	e002      	b.n	800518e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2220      	movs	r2, #32
 8005194:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6859      	ldr	r1, [r3, #4]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4b1f      	ldr	r3, [pc, #124]	; (8005220 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80051a2:	400b      	ands	r3, r1
 80051a4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e029      	b.n	8005216 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c2:	f7fd fdd9 	bl	8002d78 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d302      	bcc.n	80051d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d116      	bne.n	8005206 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d00f      	beq.n	8005206 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ea:	f043 0220 	orr.w	r2, r3, #32
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e007      	b.n	8005216 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b04      	cmp	r3, #4
 8005212:	d18c      	bne.n	800512e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	fe00e800 	.word	0xfe00e800

08005224 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08a      	sub	sp, #40	; 0x28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b00      	cmp	r3, #0
 800524e:	d068      	beq.n	8005322 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2210      	movs	r2, #16
 8005256:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005258:	e049      	b.n	80052ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d045      	beq.n	80052ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005262:	f7fd fd89 	bl	8002d78 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	d302      	bcc.n	8005278 <I2C_IsErrorOccurred+0x54>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d13a      	bne.n	80052ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005282:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800528a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529a:	d121      	bne.n	80052e0 <I2C_IsErrorOccurred+0xbc>
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052a2:	d01d      	beq.n	80052e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d01a      	beq.n	80052e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80052ba:	f7fd fd5d 	bl	8002d78 <HAL_GetTick>
 80052be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052c0:	e00e      	b.n	80052e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80052c2:	f7fd fd59 	bl	8002d78 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b19      	cmp	r3, #25
 80052ce:	d907      	bls.n	80052e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	f043 0320 	orr.w	r3, r3, #32
 80052d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80052de:	e006      	b.n	80052ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b20      	cmp	r3, #32
 80052ec:	d1e9      	bne.n	80052c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d003      	beq.n	8005304 <I2C_IsErrorOccurred+0xe0>
 80052fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0aa      	beq.n	800525a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005308:	2b00      	cmp	r3, #0
 800530a:	d103      	bne.n	8005314 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2220      	movs	r2, #32
 8005312:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	f043 0304 	orr.w	r3, r3, #4
 800531a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00b      	beq.n	800534c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005344:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00b      	beq.n	800536e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	f043 0308 	orr.w	r3, r3, #8
 800535c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005366:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00b      	beq.n	8005390 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	f043 0302 	orr.w	r3, r3, #2
 800537e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005388:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01c      	beq.n	80053d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7ff fdc3 	bl	8004f24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6859      	ldr	r1, [r3, #4]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <I2C_IsErrorOccurred+0x1bc>)
 80053aa:	400b      	ands	r3, r1
 80053ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	431a      	orrs	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80053d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3728      	adds	r7, #40	; 0x28
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	fe00e800 	.word	0xfe00e800

080053e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	607b      	str	r3, [r7, #4]
 80053ee:	460b      	mov	r3, r1
 80053f0:	817b      	strh	r3, [r7, #10]
 80053f2:	4613      	mov	r3, r2
 80053f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053f6:	897b      	ldrh	r3, [r7, #10]
 80053f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053fc:	7a7b      	ldrb	r3, [r7, #9]
 80053fe:	041b      	lsls	r3, r3, #16
 8005400:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005404:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	4313      	orrs	r3, r2
 800540e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005412:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	0d5b      	lsrs	r3, r3, #21
 800541e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005422:	4b08      	ldr	r3, [pc, #32]	; (8005444 <I2C_TransferConfig+0x60>)
 8005424:	430b      	orrs	r3, r1
 8005426:	43db      	mvns	r3, r3
 8005428:	ea02 0103 	and.w	r1, r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	03ff63ff 	.word	0x03ff63ff

08005448 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b20      	cmp	r3, #32
 800545c:	d138      	bne.n	80054d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005468:	2302      	movs	r3, #2
 800546a:	e032      	b.n	80054d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2224      	movs	r2, #36	; 0x24
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800549a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6819      	ldr	r1, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	e000      	b.n	80054d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
  }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d139      	bne.n	8005568 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d101      	bne.n	8005502 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054fe:	2302      	movs	r3, #2
 8005500:	e033      	b.n	800556a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2224      	movs	r2, #36	; 0x24
 800550e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0201 	bic.w	r2, r2, #1
 8005520:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005530:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	e000      	b.n	800556a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005568:	2302      	movs	r3, #2
  }
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800557c:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005588:	d102      	bne.n	8005590 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800558a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800558e:	e00b      	b.n	80055a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005590:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800559e:	d102      	bne.n	80055a6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80055a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055a4:	e000      	b.n	80055a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80055a6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40007000 	.word	0x40007000

080055b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d141      	bne.n	800564a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055c6:	4b4b      	ldr	r3, [pc, #300]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d2:	d131      	bne.n	8005638 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055d4:	4b47      	ldr	r3, [pc, #284]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055da:	4a46      	ldr	r2, [pc, #280]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055e4:	4b43      	ldr	r3, [pc, #268]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055ec:	4a41      	ldr	r2, [pc, #260]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80055f4:	4b40      	ldr	r3, [pc, #256]	; (80056f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2232      	movs	r2, #50	; 0x32
 80055fa:	fb02 f303 	mul.w	r3, r2, r3
 80055fe:	4a3f      	ldr	r2, [pc, #252]	; (80056fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005600:	fba2 2303 	umull	r2, r3, r2, r3
 8005604:	0c9b      	lsrs	r3, r3, #18
 8005606:	3301      	adds	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800560a:	e002      	b.n	8005612 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	3b01      	subs	r3, #1
 8005610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005612:	4b38      	ldr	r3, [pc, #224]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800561a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561e:	d102      	bne.n	8005626 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f2      	bne.n	800560c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005626:	4b33      	ldr	r3, [pc, #204]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005632:	d158      	bne.n	80056e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e057      	b.n	80056e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005638:	4b2e      	ldr	r3, [pc, #184]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800563a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800563e:	4a2d      	ldr	r2, [pc, #180]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005644:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005648:	e04d      	b.n	80056e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005650:	d141      	bne.n	80056d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005652:	4b28      	ldr	r3, [pc, #160]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800565a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565e:	d131      	bne.n	80056c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005660:	4b24      	ldr	r3, [pc, #144]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005666:	4a23      	ldr	r2, [pc, #140]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005670:	4b20      	ldr	r3, [pc, #128]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005678:	4a1e      	ldr	r2, [pc, #120]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800567a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800567e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005680:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2232      	movs	r2, #50	; 0x32
 8005686:	fb02 f303 	mul.w	r3, r2, r3
 800568a:	4a1c      	ldr	r2, [pc, #112]	; (80056fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800568c:	fba2 2303 	umull	r2, r3, r2, r3
 8005690:	0c9b      	lsrs	r3, r3, #18
 8005692:	3301      	adds	r3, #1
 8005694:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005696:	e002      	b.n	800569e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3b01      	subs	r3, #1
 800569c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800569e:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056aa:	d102      	bne.n	80056b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f2      	bne.n	8005698 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056b2:	4b10      	ldr	r3, [pc, #64]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056be:	d112      	bne.n	80056e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e011      	b.n	80056e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056c4:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ca:	4a0a      	ldr	r2, [pc, #40]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80056d4:	e007      	b.n	80056e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80056d6:	4b07      	ldr	r3, [pc, #28]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056de:	4a05      	ldr	r2, [pc, #20]	; (80056f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056e4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	40007000 	.word	0x40007000
 80056f8:	20000004 	.word	0x20000004
 80056fc:	431bde83 	.word	0x431bde83

08005700 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <HAL_PWREx_EnableVddIO2+0x1c>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	4a04      	ldr	r2, [pc, #16]	; (800571c <HAL_PWREx_EnableVddIO2+0x1c>)
 800570a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800570e:	6053      	str	r3, [r2, #4]
}
 8005710:	bf00      	nop
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40007000 	.word	0x40007000

08005720 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d102      	bne.n	8005734 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f000 bc08 	b.w	8005f44 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005734:	4b96      	ldr	r3, [pc, #600]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 030c 	and.w	r3, r3, #12
 800573c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800573e:	4b94      	ldr	r3, [pc, #592]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80e4 	beq.w	800591e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <HAL_RCC_OscConfig+0x4c>
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b0c      	cmp	r3, #12
 8005760:	f040 808b 	bne.w	800587a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2b01      	cmp	r3, #1
 8005768:	f040 8087 	bne.w	800587a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800576c:	4b88      	ldr	r3, [pc, #544]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <HAL_RCC_OscConfig+0x64>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e3df      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1a      	ldr	r2, [r3, #32]
 8005788:	4b81      	ldr	r3, [pc, #516]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d004      	beq.n	800579e <HAL_RCC_OscConfig+0x7e>
 8005794:	4b7e      	ldr	r3, [pc, #504]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800579c:	e005      	b.n	80057aa <HAL_RCC_OscConfig+0x8a>
 800579e:	4b7c      	ldr	r3, [pc, #496]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80057a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a4:	091b      	lsrs	r3, r3, #4
 80057a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d223      	bcs.n	80057f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fdcc 	bl	8006350 <RCC_SetFlashLatencyFromMSIRange>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e3c0      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057c2:	4b73      	ldr	r3, [pc, #460]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a72      	ldr	r2, [pc, #456]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80057c8:	f043 0308 	orr.w	r3, r3, #8
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	4b70      	ldr	r3, [pc, #448]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	496d      	ldr	r1, [pc, #436]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057e0:	4b6b      	ldr	r3, [pc, #428]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	4968      	ldr	r1, [pc, #416]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	604b      	str	r3, [r1, #4]
 80057f4:	e025      	b.n	8005842 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057f6:	4b66      	ldr	r3, [pc, #408]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a65      	ldr	r2, [pc, #404]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80057fc:	f043 0308 	orr.w	r3, r3, #8
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	4b63      	ldr	r3, [pc, #396]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	4960      	ldr	r1, [pc, #384]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 8005810:	4313      	orrs	r3, r2
 8005812:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005814:	4b5e      	ldr	r3, [pc, #376]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	495b      	ldr	r1, [pc, #364]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 8005824:	4313      	orrs	r3, r2
 8005826:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fd8c 	bl	8006350 <RCC_SetFlashLatencyFromMSIRange>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e380      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005842:	f000 fcc1 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 8005846:	4602      	mov	r2, r0
 8005848:	4b51      	ldr	r3, [pc, #324]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	091b      	lsrs	r3, r3, #4
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	4950      	ldr	r1, [pc, #320]	; (8005994 <HAL_RCC_OscConfig+0x274>)
 8005854:	5ccb      	ldrb	r3, [r1, r3]
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	fa22 f303 	lsr.w	r3, r2, r3
 800585e:	4a4e      	ldr	r2, [pc, #312]	; (8005998 <HAL_RCC_OscConfig+0x278>)
 8005860:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005862:	4b4e      	ldr	r3, [pc, #312]	; (800599c <HAL_RCC_OscConfig+0x27c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f7fd fa36 	bl	8002cd8 <HAL_InitTick>
 800586c:	4603      	mov	r3, r0
 800586e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d052      	beq.n	800591c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	e364      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d032      	beq.n	80058e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005882:	4b43      	ldr	r3, [pc, #268]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a42      	ldr	r2, [pc, #264]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 8005888:	f043 0301 	orr.w	r3, r3, #1
 800588c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800588e:	f7fd fa73 	bl	8002d78 <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005894:	e008      	b.n	80058a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005896:	f7fd fa6f 	bl	8002d78 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e34d      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058a8:	4b39      	ldr	r3, [pc, #228]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f0      	beq.n	8005896 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058b4:	4b36      	ldr	r3, [pc, #216]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a35      	ldr	r2, [pc, #212]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80058ba:	f043 0308 	orr.w	r3, r3, #8
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	4b33      	ldr	r3, [pc, #204]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	4930      	ldr	r1, [pc, #192]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058d2:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	492b      	ldr	r1, [pc, #172]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	604b      	str	r3, [r1, #4]
 80058e6:	e01a      	b.n	800591e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80058e8:	4b29      	ldr	r3, [pc, #164]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a28      	ldr	r2, [pc, #160]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058f4:	f7fd fa40 	bl	8002d78 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058fc:	f7fd fa3c 	bl	8002d78 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e31a      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800590e:	4b20      	ldr	r3, [pc, #128]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1f0      	bne.n	80058fc <HAL_RCC_OscConfig+0x1dc>
 800591a:	e000      	b.n	800591e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800591c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d073      	beq.n	8005a12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	2b08      	cmp	r3, #8
 800592e:	d005      	beq.n	800593c <HAL_RCC_OscConfig+0x21c>
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	2b0c      	cmp	r3, #12
 8005934:	d10e      	bne.n	8005954 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2b03      	cmp	r3, #3
 800593a:	d10b      	bne.n	8005954 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800593c:	4b14      	ldr	r3, [pc, #80]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d063      	beq.n	8005a10 <HAL_RCC_OscConfig+0x2f0>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d15f      	bne.n	8005a10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e2f7      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595c:	d106      	bne.n	800596c <HAL_RCC_OscConfig+0x24c>
 800595e:	4b0c      	ldr	r3, [pc, #48]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a0b      	ldr	r2, [pc, #44]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 8005964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	e025      	b.n	80059b8 <HAL_RCC_OscConfig+0x298>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005974:	d114      	bne.n	80059a0 <HAL_RCC_OscConfig+0x280>
 8005976:	4b06      	ldr	r3, [pc, #24]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a05      	ldr	r2, [pc, #20]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 800597c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	4b03      	ldr	r3, [pc, #12]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a02      	ldr	r2, [pc, #8]	; (8005990 <HAL_RCC_OscConfig+0x270>)
 8005988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e013      	b.n	80059b8 <HAL_RCC_OscConfig+0x298>
 8005990:	40021000 	.word	0x40021000
 8005994:	0800c6f8 	.word	0x0800c6f8
 8005998:	20000004 	.word	0x20000004
 800599c:	20000008 	.word	0x20000008
 80059a0:	4ba0      	ldr	r3, [pc, #640]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a9f      	ldr	r2, [pc, #636]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 80059a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	4b9d      	ldr	r3, [pc, #628]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a9c      	ldr	r2, [pc, #624]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 80059b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d013      	beq.n	80059e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fd f9da 	bl	8002d78 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c8:	f7fd f9d6 	bl	8002d78 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b64      	cmp	r3, #100	; 0x64
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e2b4      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059da:	4b92      	ldr	r3, [pc, #584]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0x2a8>
 80059e6:	e014      	b.n	8005a12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e8:	f7fd f9c6 	bl	8002d78 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f0:	f7fd f9c2 	bl	8002d78 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b64      	cmp	r3, #100	; 0x64
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e2a0      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a02:	4b88      	ldr	r3, [pc, #544]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f0      	bne.n	80059f0 <HAL_RCC_OscConfig+0x2d0>
 8005a0e:	e000      	b.n	8005a12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d060      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d005      	beq.n	8005a30 <HAL_RCC_OscConfig+0x310>
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b0c      	cmp	r3, #12
 8005a28:	d119      	bne.n	8005a5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d116      	bne.n	8005a5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a30:	4b7c      	ldr	r3, [pc, #496]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <HAL_RCC_OscConfig+0x328>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e27d      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a48:	4b76      	ldr	r3, [pc, #472]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	061b      	lsls	r3, r3, #24
 8005a56:	4973      	ldr	r1, [pc, #460]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a5c:	e040      	b.n	8005ae0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d023      	beq.n	8005aae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a66:	4b6f      	ldr	r3, [pc, #444]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a6e      	ldr	r2, [pc, #440]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a72:	f7fd f981 	bl	8002d78 <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a7a:	f7fd f97d 	bl	8002d78 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e25b      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a8c:	4b65      	ldr	r3, [pc, #404]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0f0      	beq.n	8005a7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a98:	4b62      	ldr	r3, [pc, #392]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	061b      	lsls	r3, r3, #24
 8005aa6:	495f      	ldr	r1, [pc, #380]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	604b      	str	r3, [r1, #4]
 8005aac:	e018      	b.n	8005ae0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aae:	4b5d      	ldr	r3, [pc, #372]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a5c      	ldr	r2, [pc, #368]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aba:	f7fd f95d 	bl	8002d78 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ac2:	f7fd f959 	bl	8002d78 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e237      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ad4:	4b53      	ldr	r3, [pc, #332]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f0      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d03c      	beq.n	8005b66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d01c      	beq.n	8005b2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005af4:	4b4b      	ldr	r3, [pc, #300]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005afa:	4a4a      	ldr	r2, [pc, #296]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005afc:	f043 0301 	orr.w	r3, r3, #1
 8005b00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b04:	f7fd f938 	bl	8002d78 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b0c:	f7fd f934 	bl	8002d78 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e212      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b1e:	4b41      	ldr	r3, [pc, #260]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0ef      	beq.n	8005b0c <HAL_RCC_OscConfig+0x3ec>
 8005b2c:	e01b      	b.n	8005b66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b2e:	4b3d      	ldr	r3, [pc, #244]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b34:	4a3b      	ldr	r2, [pc, #236]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b36:	f023 0301 	bic.w	r3, r3, #1
 8005b3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3e:	f7fd f91b 	bl	8002d78 <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b44:	e008      	b.n	8005b58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b46:	f7fd f917 	bl	8002d78 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e1f5      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b58:	4b32      	ldr	r3, [pc, #200]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1ef      	bne.n	8005b46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 80a6 	beq.w	8005cc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b74:	2300      	movs	r3, #0
 8005b76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b78:	4b2a      	ldr	r3, [pc, #168]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10d      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b84:	4b27      	ldr	r3, [pc, #156]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b88:	4a26      	ldr	r2, [pc, #152]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8005b90:	4b24      	ldr	r3, [pc, #144]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ba0:	4b21      	ldr	r3, [pc, #132]	; (8005c28 <HAL_RCC_OscConfig+0x508>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d118      	bne.n	8005bde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bac:	4b1e      	ldr	r3, [pc, #120]	; (8005c28 <HAL_RCC_OscConfig+0x508>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a1d      	ldr	r2, [pc, #116]	; (8005c28 <HAL_RCC_OscConfig+0x508>)
 8005bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bb8:	f7fd f8de 	bl	8002d78 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bc0:	f7fd f8da 	bl	8002d78 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e1b8      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bd2:	4b15      	ldr	r3, [pc, #84]	; (8005c28 <HAL_RCC_OscConfig+0x508>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f0      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d108      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x4d8>
 8005be6:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bec:	4a0d      	ldr	r2, [pc, #52]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005bee:	f043 0301 	orr.w	r3, r3, #1
 8005bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bf6:	e029      	b.n	8005c4c <HAL_RCC_OscConfig+0x52c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	2b05      	cmp	r3, #5
 8005bfe:	d115      	bne.n	8005c2c <HAL_RCC_OscConfig+0x50c>
 8005c00:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c06:	4a07      	ldr	r2, [pc, #28]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005c08:	f043 0304 	orr.w	r3, r3, #4
 8005c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c10:	4b04      	ldr	r3, [pc, #16]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c16:	4a03      	ldr	r2, [pc, #12]	; (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005c18:	f043 0301 	orr.w	r3, r3, #1
 8005c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c20:	e014      	b.n	8005c4c <HAL_RCC_OscConfig+0x52c>
 8005c22:	bf00      	nop
 8005c24:	40021000 	.word	0x40021000
 8005c28:	40007000 	.word	0x40007000
 8005c2c:	4b9d      	ldr	r3, [pc, #628]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c32:	4a9c      	ldr	r2, [pc, #624]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005c34:	f023 0301 	bic.w	r3, r3, #1
 8005c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c3c:	4b99      	ldr	r3, [pc, #612]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c42:	4a98      	ldr	r2, [pc, #608]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005c44:	f023 0304 	bic.w	r3, r3, #4
 8005c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d016      	beq.n	8005c82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c54:	f7fd f890 	bl	8002d78 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c5a:	e00a      	b.n	8005c72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5c:	f7fd f88c 	bl	8002d78 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e168      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c72:	4b8c      	ldr	r3, [pc, #560]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0ed      	beq.n	8005c5c <HAL_RCC_OscConfig+0x53c>
 8005c80:	e015      	b.n	8005cae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c82:	f7fd f879 	bl	8002d78 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c88:	e00a      	b.n	8005ca0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c8a:	f7fd f875 	bl	8002d78 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e151      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ca0:	4b80      	ldr	r3, [pc, #512]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1ed      	bne.n	8005c8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cae:	7ffb      	ldrb	r3, [r7, #31]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d105      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cb4:	4b7b      	ldr	r3, [pc, #492]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb8:	4a7a      	ldr	r2, [pc, #488]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d03c      	beq.n	8005d46 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01c      	beq.n	8005d0e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cd4:	4b73      	ldr	r3, [pc, #460]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cda:	4a72      	ldr	r2, [pc, #456]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce4:	f7fd f848 	bl	8002d78 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cec:	f7fd f844 	bl	8002d78 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e122      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cfe:	4b69      	ldr	r3, [pc, #420]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0ef      	beq.n	8005cec <HAL_RCC_OscConfig+0x5cc>
 8005d0c:	e01b      	b.n	8005d46 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d0e:	4b65      	ldr	r3, [pc, #404]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d14:	4a63      	ldr	r2, [pc, #396]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1e:	f7fd f82b 	bl	8002d78 <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d26:	f7fd f827 	bl	8002d78 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e105      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d38:	4b5a      	ldr	r3, [pc, #360]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1ef      	bne.n	8005d26 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80f9 	beq.w	8005f42 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	f040 80cf 	bne.w	8005ef8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d5a:	4b52      	ldr	r3, [pc, #328]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f003 0203 	and.w	r2, r3, #3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d12c      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d123      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d11b      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d113      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	3b01      	subs	r3, #1
 8005dae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d109      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d071      	beq.n	8005eac <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b0c      	cmp	r3, #12
 8005dcc:	d068      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005dce:	4b35      	ldr	r3, [pc, #212]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d105      	bne.n	8005de6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005dda:	4b32      	ldr	r3, [pc, #200]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e0ac      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005dea:	4b2e      	ldr	r3, [pc, #184]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a2d      	ldr	r2, [pc, #180]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005df4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005df6:	f7fc ffbf 	bl	8002d78 <HAL_GetTick>
 8005dfa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dfc:	e008      	b.n	8005e10 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dfe:	f7fc ffbb 	bl	8002d78 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e099      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e10:	4b24      	ldr	r3, [pc, #144]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1f0      	bne.n	8005dfe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e1c:	4b21      	ldr	r3, [pc, #132]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	4b21      	ldr	r3, [pc, #132]	; (8005ea8 <HAL_RCC_OscConfig+0x788>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e2c:	3a01      	subs	r2, #1
 8005e2e:	0112      	lsls	r2, r2, #4
 8005e30:	4311      	orrs	r1, r2
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e36:	0212      	lsls	r2, r2, #8
 8005e38:	4311      	orrs	r1, r2
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e3e:	0852      	lsrs	r2, r2, #1
 8005e40:	3a01      	subs	r2, #1
 8005e42:	0552      	lsls	r2, r2, #21
 8005e44:	4311      	orrs	r1, r2
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e4a:	0852      	lsrs	r2, r2, #1
 8005e4c:	3a01      	subs	r2, #1
 8005e4e:	0652      	lsls	r2, r2, #25
 8005e50:	4311      	orrs	r1, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e56:	06d2      	lsls	r2, r2, #27
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	4912      	ldr	r1, [pc, #72]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005e60:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a0f      	ldr	r2, [pc, #60]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	4a0c      	ldr	r2, [pc, #48]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e78:	f7fc ff7e 	bl	8002d78 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e80:	f7fc ff7a 	bl	8002d78 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e058      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e92:	4b04      	ldr	r3, [pc, #16]	; (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0f0      	beq.n	8005e80 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e9e:	e050      	b.n	8005f42 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e04f      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eac:	4b27      	ldr	r3, [pc, #156]	; (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d144      	bne.n	8005f42 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005eb8:	4b24      	ldr	r3, [pc, #144]	; (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a23      	ldr	r2, [pc, #140]	; (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ec2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ec4:	4b21      	ldr	r3, [pc, #132]	; (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	4a20      	ldr	r2, [pc, #128]	; (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ece:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ed0:	f7fc ff52 	bl	8002d78 <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ed8:	f7fc ff4e 	bl	8002d78 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e02c      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eea:	4b18      	ldr	r3, [pc, #96]	; (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f0      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x7b8>
 8005ef6:	e024      	b.n	8005f42 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b0c      	cmp	r3, #12
 8005efc:	d01f      	beq.n	8005f3e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005efe:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a12      	ldr	r2, [pc, #72]	; (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005f04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0a:	f7fc ff35 	bl	8002d78 <HAL_GetTick>
 8005f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f10:	e008      	b.n	8005f24 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f12:	f7fc ff31 	bl	8002d78 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e00f      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f24:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1f0      	bne.n	8005f12 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005f30:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	4905      	ldr	r1, [pc, #20]	; (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005f36:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <HAL_RCC_OscConfig+0x830>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	60cb      	str	r3, [r1, #12]
 8005f3c:	e001      	b.n	8005f42 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	feeefffc 	.word	0xfeeefffc

08005f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e11d      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f6c:	4b90      	ldr	r3, [pc, #576]	; (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d910      	bls.n	8005f9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f7a:	4b8d      	ldr	r3, [pc, #564]	; (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f023 020f 	bic.w	r2, r3, #15
 8005f82:	498b      	ldr	r1, [pc, #556]	; (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f8a:	4b89      	ldr	r3, [pc, #548]	; (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 030f 	and.w	r3, r3, #15
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d001      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e105      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d010      	beq.n	8005fca <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	4b81      	ldr	r3, [pc, #516]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d908      	bls.n	8005fca <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fb8:	4b7e      	ldr	r3, [pc, #504]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	497b      	ldr	r1, [pc, #492]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d079      	beq.n	80060ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d11e      	bne.n	800601c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fde:	4b75      	ldr	r3, [pc, #468]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e0dc      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005fee:	f000 fa09 	bl	8006404 <RCC_GetSysClockFreqFromPLLSource>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	4a70      	ldr	r2, [pc, #448]	; (80061b8 <HAL_RCC_ClockConfig+0x264>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d946      	bls.n	8006088 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005ffa:	4b6e      	ldr	r3, [pc, #440]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d140      	bne.n	8006088 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006006:	4b6b      	ldr	r3, [pc, #428]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800600e:	4a69      	ldr	r2, [pc, #420]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006014:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006016:	2380      	movs	r3, #128	; 0x80
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	e035      	b.n	8006088 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d107      	bne.n	8006034 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006024:	4b63      	ldr	r3, [pc, #396]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d115      	bne.n	800605c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e0b9      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d107      	bne.n	800604c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800603c:	4b5d      	ldr	r3, [pc, #372]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d109      	bne.n	800605c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e0ad      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800604c:	4b59      	ldr	r3, [pc, #356]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e0a5      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800605c:	f000 f8b4 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 8006060:	4603      	mov	r3, r0
 8006062:	4a55      	ldr	r2, [pc, #340]	; (80061b8 <HAL_RCC_ClockConfig+0x264>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d90f      	bls.n	8006088 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006068:	4b52      	ldr	r3, [pc, #328]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d109      	bne.n	8006088 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006074:	4b4f      	ldr	r3, [pc, #316]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800607c:	4a4d      	ldr	r2, [pc, #308]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 800607e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006082:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006084:	2380      	movs	r3, #128	; 0x80
 8006086:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006088:	4b4a      	ldr	r3, [pc, #296]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f023 0203 	bic.w	r2, r3, #3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	4947      	ldr	r1, [pc, #284]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006096:	4313      	orrs	r3, r2
 8006098:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800609a:	f7fc fe6d 	bl	8002d78 <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a0:	e00a      	b.n	80060b8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a2:	f7fc fe69 	bl	8002d78 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e077      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b8:	4b3e      	ldr	r3, [pc, #248]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 020c 	and.w	r2, r3, #12
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d1eb      	bne.n	80060a2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b80      	cmp	r3, #128	; 0x80
 80060ce:	d105      	bne.n	80060dc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060d0:	4b38      	ldr	r3, [pc, #224]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	4a37      	ldr	r2, [pc, #220]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 80060d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060da:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d010      	beq.n	800610a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	4b31      	ldr	r3, [pc, #196]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d208      	bcs.n	800610a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060f8:	4b2e      	ldr	r3, [pc, #184]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	492b      	ldr	r1, [pc, #172]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006106:	4313      	orrs	r3, r2
 8006108:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800610a:	4b29      	ldr	r3, [pc, #164]	; (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d210      	bcs.n	800613a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006118:	4b25      	ldr	r3, [pc, #148]	; (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f023 020f 	bic.w	r2, r3, #15
 8006120:	4923      	ldr	r1, [pc, #140]	; (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	4313      	orrs	r3, r2
 8006126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006128:	4b21      	ldr	r3, [pc, #132]	; (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d001      	beq.n	800613a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e036      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d008      	beq.n	8006158 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006146:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	4918      	ldr	r1, [pc, #96]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006154:	4313      	orrs	r3, r2
 8006156:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	2b00      	cmp	r3, #0
 8006162:	d009      	beq.n	8006178 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006164:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	4910      	ldr	r1, [pc, #64]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006174:	4313      	orrs	r3, r2
 8006176:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006178:	f000 f826 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 800617c:	4602      	mov	r2, r0
 800617e:	4b0d      	ldr	r3, [pc, #52]	; (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	091b      	lsrs	r3, r3, #4
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	490c      	ldr	r1, [pc, #48]	; (80061bc <HAL_RCC_ClockConfig+0x268>)
 800618a:	5ccb      	ldrb	r3, [r1, r3]
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	fa22 f303 	lsr.w	r3, r2, r3
 8006194:	4a0a      	ldr	r2, [pc, #40]	; (80061c0 <HAL_RCC_ClockConfig+0x26c>)
 8006196:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006198:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <HAL_RCC_ClockConfig+0x270>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4618      	mov	r0, r3
 800619e:	f7fc fd9b 	bl	8002cd8 <HAL_InitTick>
 80061a2:	4603      	mov	r3, r0
 80061a4:	73fb      	strb	r3, [r7, #15]

  return status;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	40022000 	.word	0x40022000
 80061b4:	40021000 	.word	0x40021000
 80061b8:	04c4b400 	.word	0x04c4b400
 80061bc:	0800c6f8 	.word	0x0800c6f8
 80061c0:	20000004 	.word	0x20000004
 80061c4:	20000008 	.word	0x20000008

080061c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b089      	sub	sp, #36	; 0x24
 80061cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61fb      	str	r3, [r7, #28]
 80061d2:	2300      	movs	r3, #0
 80061d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061d6:	4b3e      	ldr	r3, [pc, #248]	; (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 030c 	and.w	r3, r3, #12
 80061de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061e0:	4b3b      	ldr	r3, [pc, #236]	; (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_RCC_GetSysClockFreq+0x34>
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2b0c      	cmp	r3, #12
 80061f4:	d121      	bne.n	800623a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d11e      	bne.n	800623a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061fc:	4b34      	ldr	r3, [pc, #208]	; (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0308 	and.w	r3, r3, #8
 8006204:	2b00      	cmp	r3, #0
 8006206:	d107      	bne.n	8006218 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006208:	4b31      	ldr	r3, [pc, #196]	; (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800620a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800620e:	0a1b      	lsrs	r3, r3, #8
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	61fb      	str	r3, [r7, #28]
 8006216:	e005      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006218:	4b2d      	ldr	r3, [pc, #180]	; (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	091b      	lsrs	r3, r3, #4
 800621e:	f003 030f 	and.w	r3, r3, #15
 8006222:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006224:	4a2b      	ldr	r2, [pc, #172]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800622c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10d      	bne.n	8006250 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006238:	e00a      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b04      	cmp	r3, #4
 800623e:	d102      	bne.n	8006246 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006240:	4b25      	ldr	r3, [pc, #148]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	e004      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2b08      	cmp	r3, #8
 800624a:	d101      	bne.n	8006250 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800624c:	4b23      	ldr	r3, [pc, #140]	; (80062dc <HAL_RCC_GetSysClockFreq+0x114>)
 800624e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	2b0c      	cmp	r3, #12
 8006254:	d134      	bne.n	80062c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006256:	4b1e      	ldr	r3, [pc, #120]	; (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d003      	beq.n	800626e <HAL_RCC_GetSysClockFreq+0xa6>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b03      	cmp	r3, #3
 800626a:	d003      	beq.n	8006274 <HAL_RCC_GetSysClockFreq+0xac>
 800626c:	e005      	b.n	800627a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800626e:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006270:	617b      	str	r3, [r7, #20]
      break;
 8006272:	e005      	b.n	8006280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006274:	4b19      	ldr	r3, [pc, #100]	; (80062dc <HAL_RCC_GetSysClockFreq+0x114>)
 8006276:	617b      	str	r3, [r7, #20]
      break;
 8006278:	e002      	b.n	8006280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	617b      	str	r3, [r7, #20]
      break;
 800627e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006280:	4b13      	ldr	r3, [pc, #76]	; (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	091b      	lsrs	r3, r3, #4
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	3301      	adds	r3, #1
 800628c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800628e:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	0a1b      	lsrs	r3, r3, #8
 8006294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	fb03 f202 	mul.w	r2, r3, r2
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062a6:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	0e5b      	lsrs	r3, r3, #25
 80062ac:	f003 0303 	and.w	r3, r3, #3
 80062b0:	3301      	adds	r3, #1
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80062be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80062c0:	69bb      	ldr	r3, [r7, #24]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3724      	adds	r7, #36	; 0x24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40021000 	.word	0x40021000
 80062d4:	0800c710 	.word	0x0800c710
 80062d8:	00f42400 	.word	0x00f42400
 80062dc:	007a1200 	.word	0x007a1200

080062e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062e4:	4b03      	ldr	r3, [pc, #12]	; (80062f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80062e6:	681b      	ldr	r3, [r3, #0]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20000004 	.word	0x20000004

080062f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062fc:	f7ff fff0 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 8006300:	4602      	mov	r2, r0
 8006302:	4b06      	ldr	r3, [pc, #24]	; (800631c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	0a1b      	lsrs	r3, r3, #8
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	4904      	ldr	r1, [pc, #16]	; (8006320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800630e:	5ccb      	ldrb	r3, [r1, r3]
 8006310:	f003 031f 	and.w	r3, r3, #31
 8006314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006318:	4618      	mov	r0, r3
 800631a:	bd80      	pop	{r7, pc}
 800631c:	40021000 	.word	0x40021000
 8006320:	0800c708 	.word	0x0800c708

08006324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006328:	f7ff ffda 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 800632c:	4602      	mov	r2, r0
 800632e:	4b06      	ldr	r3, [pc, #24]	; (8006348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	0adb      	lsrs	r3, r3, #11
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	4904      	ldr	r1, [pc, #16]	; (800634c <HAL_RCC_GetPCLK2Freq+0x28>)
 800633a:	5ccb      	ldrb	r3, [r1, r3]
 800633c:	f003 031f 	and.w	r3, r3, #31
 8006340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006344:	4618      	mov	r0, r3
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40021000 	.word	0x40021000
 800634c:	0800c708 	.word	0x0800c708

08006350 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800635c:	4b27      	ldr	r3, [pc, #156]	; (80063fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800635e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006368:	f7ff f906 	bl	8005578 <HAL_PWREx_GetVoltageRange>
 800636c:	6178      	str	r0, [r7, #20]
 800636e:	e014      	b.n	800639a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006370:	4b22      	ldr	r3, [pc, #136]	; (80063fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006374:	4a21      	ldr	r2, [pc, #132]	; (80063fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800637a:	6593      	str	r3, [r2, #88]	; 0x58
 800637c:	4b1f      	ldr	r3, [pc, #124]	; (80063fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800637e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006388:	f7ff f8f6 	bl	8005578 <HAL_PWREx_GetVoltageRange>
 800638c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800638e:	4b1b      	ldr	r3, [pc, #108]	; (80063fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006392:	4a1a      	ldr	r2, [pc, #104]	; (80063fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006398:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a0:	d10b      	bne.n	80063ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b80      	cmp	r3, #128	; 0x80
 80063a6:	d913      	bls.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2ba0      	cmp	r3, #160	; 0xa0
 80063ac:	d902      	bls.n	80063b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063ae:	2302      	movs	r3, #2
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	e00d      	b.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063b4:	2301      	movs	r3, #1
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	e00a      	b.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b7f      	cmp	r3, #127	; 0x7f
 80063be:	d902      	bls.n	80063c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80063c0:	2302      	movs	r3, #2
 80063c2:	613b      	str	r3, [r7, #16]
 80063c4:	e004      	b.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b70      	cmp	r3, #112	; 0x70
 80063ca:	d101      	bne.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063cc:	2301      	movs	r3, #1
 80063ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063d0:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f023 020f 	bic.w	r2, r3, #15
 80063d8:	4909      	ldr	r1, [pc, #36]	; (8006400 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80063e0:	4b07      	ldr	r3, [pc, #28]	; (8006400 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d001      	beq.n	80063f2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	40021000 	.word	0x40021000
 8006400:	40022000 	.word	0x40022000

08006404 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800640a:	4b2d      	ldr	r3, [pc, #180]	; (80064c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b03      	cmp	r3, #3
 8006418:	d00b      	beq.n	8006432 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b03      	cmp	r3, #3
 800641e:	d825      	bhi.n	800646c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d008      	beq.n	8006438 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d11f      	bne.n	800646c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800642c:	4b25      	ldr	r3, [pc, #148]	; (80064c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800642e:	613b      	str	r3, [r7, #16]
    break;
 8006430:	e01f      	b.n	8006472 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006432:	4b25      	ldr	r3, [pc, #148]	; (80064c8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006434:	613b      	str	r3, [r7, #16]
    break;
 8006436:	e01c      	b.n	8006472 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006438:	4b21      	ldr	r3, [pc, #132]	; (80064c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b00      	cmp	r3, #0
 8006442:	d107      	bne.n	8006454 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006444:	4b1e      	ldr	r3, [pc, #120]	; (80064c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800644a:	0a1b      	lsrs	r3, r3, #8
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	e005      	b.n	8006460 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006454:	4b1a      	ldr	r3, [pc, #104]	; (80064c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	091b      	lsrs	r3, r3, #4
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006460:	4a1a      	ldr	r2, [pc, #104]	; (80064cc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006468:	613b      	str	r3, [r7, #16]
    break;
 800646a:	e002      	b.n	8006472 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	613b      	str	r3, [r7, #16]
    break;
 8006470:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006472:	4b13      	ldr	r3, [pc, #76]	; (80064c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	091b      	lsrs	r3, r3, #4
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	3301      	adds	r3, #1
 800647e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006480:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	0a1b      	lsrs	r3, r3, #8
 8006486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	fb03 f202 	mul.w	r2, r3, r2
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	fbb2 f3f3 	udiv	r3, r2, r3
 8006496:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006498:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	0e5b      	lsrs	r3, r3, #25
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	3301      	adds	r3, #1
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80064b2:	683b      	ldr	r3, [r7, #0]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	40021000 	.word	0x40021000
 80064c4:	00f42400 	.word	0x00f42400
 80064c8:	007a1200 	.word	0x007a1200
 80064cc:	0800c710 	.word	0x0800c710

080064d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064d8:	2300      	movs	r3, #0
 80064da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064dc:	2300      	movs	r3, #0
 80064de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d040      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064f0:	2b80      	cmp	r3, #128	; 0x80
 80064f2:	d02a      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80064f4:	2b80      	cmp	r3, #128	; 0x80
 80064f6:	d825      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80064f8:	2b60      	cmp	r3, #96	; 0x60
 80064fa:	d026      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80064fc:	2b60      	cmp	r3, #96	; 0x60
 80064fe:	d821      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006500:	2b40      	cmp	r3, #64	; 0x40
 8006502:	d006      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006504:	2b40      	cmp	r3, #64	; 0x40
 8006506:	d81d      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d009      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800650c:	2b20      	cmp	r3, #32
 800650e:	d010      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006510:	e018      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006512:	4b89      	ldr	r3, [pc, #548]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	4a88      	ldr	r2, [pc, #544]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800651c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800651e:	e015      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3304      	adds	r3, #4
 8006524:	2100      	movs	r1, #0
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fb02 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006530:	e00c      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3320      	adds	r3, #32
 8006536:	2100      	movs	r1, #0
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fbed 	bl	8006d18 <RCCEx_PLLSAI2_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006542:	e003      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	74fb      	strb	r3, [r7, #19]
      break;
 8006548:	e000      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800654a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800654c:	7cfb      	ldrb	r3, [r7, #19]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10b      	bne.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006552:	4b79      	ldr	r3, [pc, #484]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006554:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006558:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006560:	4975      	ldr	r1, [pc, #468]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006568:	e001      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656a:	7cfb      	ldrb	r3, [r7, #19]
 800656c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d047      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006582:	d030      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006588:	d82a      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800658a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800658e:	d02a      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006594:	d824      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800659a:	d008      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xde>
 800659c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a0:	d81e      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80065a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065aa:	d010      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80065ac:	e018      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80065ae:	4b62      	ldr	r3, [pc, #392]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	4a61      	ldr	r2, [pc, #388]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065ba:	e015      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fab4 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065cc:	e00c      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3320      	adds	r3, #32
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 fb9f 	bl	8006d18 <RCCEx_PLLSAI2_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065de:	e003      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	74fb      	strb	r3, [r7, #19]
      break;
 80065e4:	e000      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80065e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e8:	7cfb      	ldrb	r3, [r7, #19]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80065ee:	4b52      	ldr	r3, [pc, #328]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fc:	494e      	ldr	r1, [pc, #312]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006604:	e001      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006606:	7cfb      	ldrb	r3, [r7, #19]
 8006608:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 809f 	beq.w	8006756 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006618:	2300      	movs	r3, #0
 800661a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800661c:	4b46      	ldr	r3, [pc, #280]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800661e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006628:	2301      	movs	r3, #1
 800662a:	e000      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800662c:	2300      	movs	r3, #0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00d      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006632:	4b41      	ldr	r3, [pc, #260]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006636:	4a40      	ldr	r2, [pc, #256]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663c:	6593      	str	r3, [r2, #88]	; 0x58
 800663e:	4b3e      	ldr	r3, [pc, #248]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006646:	60bb      	str	r3, [r7, #8]
 8006648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800664a:	2301      	movs	r3, #1
 800664c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800664e:	4b3b      	ldr	r3, [pc, #236]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a3a      	ldr	r2, [pc, #232]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006658:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800665a:	f7fc fb8d 	bl	8002d78 <HAL_GetTick>
 800665e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006660:	e009      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006662:	f7fc fb89 	bl	8002d78 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d902      	bls.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	74fb      	strb	r3, [r7, #19]
        break;
 8006674:	e005      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006676:	4b31      	ldr	r3, [pc, #196]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0ef      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006682:	7cfb      	ldrb	r3, [r7, #19]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d15b      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006688:	4b2b      	ldr	r3, [pc, #172]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800668a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006692:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01f      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d019      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066a6:	4b24      	ldr	r3, [pc, #144]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066b2:	4b21      	ldr	r3, [pc, #132]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b8:	4a1f      	ldr	r2, [pc, #124]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066c2:	4b1d      	ldr	r3, [pc, #116]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c8:	4a1b      	ldr	r2, [pc, #108]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066d2:	4a19      	ldr	r2, [pc, #100]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d016      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e4:	f7fc fb48 	bl	8002d78 <HAL_GetTick>
 80066e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066ea:	e00b      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ec:	f7fc fb44 	bl	8002d78 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d902      	bls.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	74fb      	strb	r3, [r7, #19]
            break;
 8006702:	e006      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006704:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0ec      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006712:	7cfb      	ldrb	r3, [r7, #19]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10c      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006718:	4b07      	ldr	r3, [pc, #28]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800671a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800671e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006728:	4903      	ldr	r1, [pc, #12]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800672a:	4313      	orrs	r3, r2
 800672c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006730:	e008      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006732:	7cfb      	ldrb	r3, [r7, #19]
 8006734:	74bb      	strb	r3, [r7, #18]
 8006736:	e005      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006738:	40021000 	.word	0x40021000
 800673c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006740:	7cfb      	ldrb	r3, [r7, #19]
 8006742:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006744:	7c7b      	ldrb	r3, [r7, #17]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d105      	bne.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800674a:	4ba0      	ldr	r3, [pc, #640]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800674c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800674e:	4a9f      	ldr	r2, [pc, #636]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006754:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006762:	4b9a      	ldr	r3, [pc, #616]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006768:	f023 0203 	bic.w	r2, r3, #3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006770:	4996      	ldr	r1, [pc, #600]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006784:	4b91      	ldr	r3, [pc, #580]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678a:	f023 020c 	bic.w	r2, r3, #12
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	498e      	ldr	r1, [pc, #568]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067a6:	4b89      	ldr	r3, [pc, #548]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b4:	4985      	ldr	r1, [pc, #532]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067c8:	4b80      	ldr	r3, [pc, #512]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d6:	497d      	ldr	r1, [pc, #500]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0310 	and.w	r3, r3, #16
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80067ea:	4b78      	ldr	r3, [pc, #480]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f8:	4974      	ldr	r1, [pc, #464]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0320 	and.w	r3, r3, #32
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00a      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800680c:	4b6f      	ldr	r3, [pc, #444]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800680e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006812:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681a:	496c      	ldr	r1, [pc, #432]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800681c:	4313      	orrs	r3, r2
 800681e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800682e:	4b67      	ldr	r3, [pc, #412]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006834:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800683c:	4963      	ldr	r1, [pc, #396]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800683e:	4313      	orrs	r3, r2
 8006840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00a      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006850:	4b5e      	ldr	r3, [pc, #376]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006856:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800685e:	495b      	ldr	r1, [pc, #364]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006860:	4313      	orrs	r3, r2
 8006862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006872:	4b56      	ldr	r3, [pc, #344]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006878:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006880:	4952      	ldr	r1, [pc, #328]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006882:	4313      	orrs	r3, r2
 8006884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006894:	4b4d      	ldr	r3, [pc, #308]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a2:	494a      	ldr	r1, [pc, #296]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068b6:	4b45      	ldr	r3, [pc, #276]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c4:	4941      	ldr	r1, [pc, #260]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00a      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068d8:	4b3c      	ldr	r3, [pc, #240]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068de:	f023 0203 	bic.w	r2, r3, #3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e6:	4939      	ldr	r1, [pc, #228]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d028      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068fa:	4b34      	ldr	r3, [pc, #208]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006900:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006908:	4930      	ldr	r1, [pc, #192]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006918:	d106      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800691a:	4b2c      	ldr	r3, [pc, #176]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	4a2b      	ldr	r2, [pc, #172]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006924:	60d3      	str	r3, [r2, #12]
 8006926:	e011      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800692c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006930:	d10c      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3304      	adds	r3, #4
 8006936:	2101      	movs	r1, #1
 8006938:	4618      	mov	r0, r3
 800693a:	f000 f8f9 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 800693e:	4603      	mov	r3, r0
 8006940:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006942:	7cfb      	ldrb	r3, [r7, #19]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006948:	7cfb      	ldrb	r3, [r7, #19]
 800694a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d04d      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800695c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006960:	d108      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006962:	4b1a      	ldr	r3, [pc, #104]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006964:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006968:	4a18      	ldr	r2, [pc, #96]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800696a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800696e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006972:	e012      	b.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006974:	4b15      	ldr	r3, [pc, #84]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800697a:	4a14      	ldr	r2, [pc, #80]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800697c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006980:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006984:	4b11      	ldr	r3, [pc, #68]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006992:	490e      	ldr	r1, [pc, #56]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006994:	4313      	orrs	r3, r2
 8006996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800699e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069a2:	d106      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069a4:	4b09      	ldr	r3, [pc, #36]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	4a08      	ldr	r2, [pc, #32]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069ae:	60d3      	str	r3, [r2, #12]
 80069b0:	e020      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ba:	d109      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80069bc:	4b03      	ldr	r3, [pc, #12]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	4a02      	ldr	r2, [pc, #8]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c6:	60d3      	str	r3, [r2, #12]
 80069c8:	e014      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80069ca:	bf00      	nop
 80069cc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069d8:	d10c      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3304      	adds	r3, #4
 80069de:	2101      	movs	r1, #1
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 f8a5 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 80069e6:	4603      	mov	r3, r0
 80069e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069ea:	7cfb      	ldrb	r3, [r7, #19]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80069f0:	7cfb      	ldrb	r3, [r7, #19]
 80069f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d028      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a00:	4b4a      	ldr	r3, [pc, #296]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a0e:	4947      	ldr	r1, [pc, #284]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a1e:	d106      	bne.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a20:	4b42      	ldr	r3, [pc, #264]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	4a41      	ldr	r2, [pc, #260]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a2a:	60d3      	str	r3, [r2, #12]
 8006a2c:	e011      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a36:	d10c      	bne.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 f876 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 8006a44:	4603      	mov	r3, r0
 8006a46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a48:	7cfb      	ldrb	r3, [r7, #19]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006a4e:	7cfb      	ldrb	r3, [r7, #19]
 8006a50:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d01e      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a5e:	4b33      	ldr	r3, [pc, #204]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a6e:	492f      	ldr	r1, [pc, #188]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a80:	d10c      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3304      	adds	r3, #4
 8006a86:	2102      	movs	r1, #2
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 f851 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a92:	7cfb      	ldrb	r3, [r7, #19]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006a98:	7cfb      	ldrb	r3, [r7, #19]
 8006a9a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006aa8:	4b20      	ldr	r3, [pc, #128]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aae:	f023 0204 	bic.w	r2, r3, #4
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ab8:	491c      	ldr	r1, [pc, #112]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00b      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006acc:	4b17      	ldr	r3, [pc, #92]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ad2:	f023 0218 	bic.w	r2, r3, #24
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006adc:	4913      	ldr	r1, [pc, #76]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d017      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006af0:	4b0e      	ldr	r3, [pc, #56]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006af6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b00:	490a      	ldr	r1, [pc, #40]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b12:	d105      	bne.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	4a04      	ldr	r2, [pc, #16]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006b20:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	40021000 	.word	0x40021000

08006b30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b3e:	4b72      	ldr	r3, [pc, #456]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00e      	beq.n	8006b68 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b4a:	4b6f      	ldr	r3, [pc, #444]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f003 0203 	and.w	r2, r3, #3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d103      	bne.n	8006b62 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
       ||
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d142      	bne.n	8006be8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	73fb      	strb	r3, [r7, #15]
 8006b66:	e03f      	b.n	8006be8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d018      	beq.n	8006ba2 <RCCEx_PLLSAI1_Config+0x72>
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d825      	bhi.n	8006bc0 <RCCEx_PLLSAI1_Config+0x90>
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d002      	beq.n	8006b7e <RCCEx_PLLSAI1_Config+0x4e>
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d009      	beq.n	8006b90 <RCCEx_PLLSAI1_Config+0x60>
 8006b7c:	e020      	b.n	8006bc0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b7e:	4b62      	ldr	r3, [pc, #392]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d11d      	bne.n	8006bc6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b8e:	e01a      	b.n	8006bc6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b90:	4b5d      	ldr	r3, [pc, #372]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d116      	bne.n	8006bca <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ba0:	e013      	b.n	8006bca <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ba2:	4b59      	ldr	r3, [pc, #356]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10f      	bne.n	8006bce <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006bae:	4b56      	ldr	r3, [pc, #344]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d109      	bne.n	8006bce <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bbe:	e006      	b.n	8006bce <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc4:	e004      	b.n	8006bd0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006bc6:	bf00      	nop
 8006bc8:	e002      	b.n	8006bd0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006bca:	bf00      	nop
 8006bcc:	e000      	b.n	8006bd0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006bce:	bf00      	nop
    }

    if(status == HAL_OK)
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d108      	bne.n	8006be8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006bd6:	4b4c      	ldr	r3, [pc, #304]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f023 0203 	bic.w	r2, r3, #3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4949      	ldr	r1, [pc, #292]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f040 8086 	bne.w	8006cfc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006bf0:	4b45      	ldr	r3, [pc, #276]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a44      	ldr	r2, [pc, #272]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bfc:	f7fc f8bc 	bl	8002d78 <HAL_GetTick>
 8006c00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c02:	e009      	b.n	8006c18 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c04:	f7fc f8b8 	bl	8002d78 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d902      	bls.n	8006c18 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	73fb      	strb	r3, [r7, #15]
        break;
 8006c16:	e005      	b.n	8006c24 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c18:	4b3b      	ldr	r3, [pc, #236]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1ef      	bne.n	8006c04 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d168      	bne.n	8006cfc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d113      	bne.n	8006c58 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c30:	4b35      	ldr	r3, [pc, #212]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c32:	691a      	ldr	r2, [r3, #16]
 8006c34:	4b35      	ldr	r3, [pc, #212]	; (8006d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6892      	ldr	r2, [r2, #8]
 8006c3c:	0211      	lsls	r1, r2, #8
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	68d2      	ldr	r2, [r2, #12]
 8006c42:	06d2      	lsls	r2, r2, #27
 8006c44:	4311      	orrs	r1, r2
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6852      	ldr	r2, [r2, #4]
 8006c4a:	3a01      	subs	r2, #1
 8006c4c:	0112      	lsls	r2, r2, #4
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	492d      	ldr	r1, [pc, #180]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	610b      	str	r3, [r1, #16]
 8006c56:	e02d      	b.n	8006cb4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d115      	bne.n	8006c8a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c5e:	4b2a      	ldr	r3, [pc, #168]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	4b2b      	ldr	r3, [pc, #172]	; (8006d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	6892      	ldr	r2, [r2, #8]
 8006c6a:	0211      	lsls	r1, r2, #8
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	6912      	ldr	r2, [r2, #16]
 8006c70:	0852      	lsrs	r2, r2, #1
 8006c72:	3a01      	subs	r2, #1
 8006c74:	0552      	lsls	r2, r2, #21
 8006c76:	4311      	orrs	r1, r2
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	6852      	ldr	r2, [r2, #4]
 8006c7c:	3a01      	subs	r2, #1
 8006c7e:	0112      	lsls	r2, r2, #4
 8006c80:	430a      	orrs	r2, r1
 8006c82:	4921      	ldr	r1, [pc, #132]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	610b      	str	r3, [r1, #16]
 8006c88:	e014      	b.n	8006cb4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c8a:	4b1f      	ldr	r3, [pc, #124]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	4b21      	ldr	r3, [pc, #132]	; (8006d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6892      	ldr	r2, [r2, #8]
 8006c96:	0211      	lsls	r1, r2, #8
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6952      	ldr	r2, [r2, #20]
 8006c9c:	0852      	lsrs	r2, r2, #1
 8006c9e:	3a01      	subs	r2, #1
 8006ca0:	0652      	lsls	r2, r2, #25
 8006ca2:	4311      	orrs	r1, r2
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	6852      	ldr	r2, [r2, #4]
 8006ca8:	3a01      	subs	r2, #1
 8006caa:	0112      	lsls	r2, r2, #4
 8006cac:	430a      	orrs	r2, r1
 8006cae:	4916      	ldr	r1, [pc, #88]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006cb4:	4b14      	ldr	r3, [pc, #80]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a13      	ldr	r2, [pc, #76]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc0:	f7fc f85a 	bl	8002d78 <HAL_GetTick>
 8006cc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cc6:	e009      	b.n	8006cdc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cc8:	f7fc f856 	bl	8002d78 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d902      	bls.n	8006cdc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	73fb      	strb	r3, [r7, #15]
          break;
 8006cda:	e005      	b.n	8006ce8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0ef      	beq.n	8006cc8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006cee:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cf0:	691a      	ldr	r2, [r3, #16]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	4904      	ldr	r1, [pc, #16]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	40021000 	.word	0x40021000
 8006d0c:	07ff800f 	.word	0x07ff800f
 8006d10:	ff9f800f 	.word	0xff9f800f
 8006d14:	f9ff800f 	.word	0xf9ff800f

08006d18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d26:	4b72      	ldr	r3, [pc, #456]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00e      	beq.n	8006d50 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d32:	4b6f      	ldr	r3, [pc, #444]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f003 0203 	and.w	r2, r3, #3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d103      	bne.n	8006d4a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
       ||
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d142      	bne.n	8006dd0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	73fb      	strb	r3, [r7, #15]
 8006d4e:	e03f      	b.n	8006dd0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d018      	beq.n	8006d8a <RCCEx_PLLSAI2_Config+0x72>
 8006d58:	2b03      	cmp	r3, #3
 8006d5a:	d825      	bhi.n	8006da8 <RCCEx_PLLSAI2_Config+0x90>
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d002      	beq.n	8006d66 <RCCEx_PLLSAI2_Config+0x4e>
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d009      	beq.n	8006d78 <RCCEx_PLLSAI2_Config+0x60>
 8006d64:	e020      	b.n	8006da8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d66:	4b62      	ldr	r3, [pc, #392]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d11d      	bne.n	8006dae <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d76:	e01a      	b.n	8006dae <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d78:	4b5d      	ldr	r3, [pc, #372]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d116      	bne.n	8006db2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d88:	e013      	b.n	8006db2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d8a:	4b59      	ldr	r3, [pc, #356]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10f      	bne.n	8006db6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d96:	4b56      	ldr	r3, [pc, #344]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006da6:	e006      	b.n	8006db6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	73fb      	strb	r3, [r7, #15]
      break;
 8006dac:	e004      	b.n	8006db8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006dae:	bf00      	nop
 8006db0:	e002      	b.n	8006db8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006db2:	bf00      	nop
 8006db4:	e000      	b.n	8006db8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006db6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d108      	bne.n	8006dd0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006dbe:	4b4c      	ldr	r3, [pc, #304]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f023 0203 	bic.w	r2, r3, #3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4949      	ldr	r1, [pc, #292]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f040 8086 	bne.w	8006ee4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006dd8:	4b45      	ldr	r3, [pc, #276]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a44      	ldr	r2, [pc, #272]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006de4:	f7fb ffc8 	bl	8002d78 <HAL_GetTick>
 8006de8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006dea:	e009      	b.n	8006e00 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006dec:	f7fb ffc4 	bl	8002d78 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d902      	bls.n	8006e00 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	73fb      	strb	r3, [r7, #15]
        break;
 8006dfe:	e005      	b.n	8006e0c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e00:	4b3b      	ldr	r3, [pc, #236]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1ef      	bne.n	8006dec <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d168      	bne.n	8006ee4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d113      	bne.n	8006e40 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e18:	4b35      	ldr	r3, [pc, #212]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e1a:	695a      	ldr	r2, [r3, #20]
 8006e1c:	4b35      	ldr	r3, [pc, #212]	; (8006ef4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006e1e:	4013      	ands	r3, r2
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	6892      	ldr	r2, [r2, #8]
 8006e24:	0211      	lsls	r1, r2, #8
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	68d2      	ldr	r2, [r2, #12]
 8006e2a:	06d2      	lsls	r2, r2, #27
 8006e2c:	4311      	orrs	r1, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6852      	ldr	r2, [r2, #4]
 8006e32:	3a01      	subs	r2, #1
 8006e34:	0112      	lsls	r2, r2, #4
 8006e36:	430a      	orrs	r2, r1
 8006e38:	492d      	ldr	r1, [pc, #180]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	614b      	str	r3, [r1, #20]
 8006e3e:	e02d      	b.n	8006e9c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d115      	bne.n	8006e72 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e46:	4b2a      	ldr	r3, [pc, #168]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e48:	695a      	ldr	r2, [r3, #20]
 8006e4a:	4b2b      	ldr	r3, [pc, #172]	; (8006ef8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6892      	ldr	r2, [r2, #8]
 8006e52:	0211      	lsls	r1, r2, #8
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	6912      	ldr	r2, [r2, #16]
 8006e58:	0852      	lsrs	r2, r2, #1
 8006e5a:	3a01      	subs	r2, #1
 8006e5c:	0552      	lsls	r2, r2, #21
 8006e5e:	4311      	orrs	r1, r2
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6852      	ldr	r2, [r2, #4]
 8006e64:	3a01      	subs	r2, #1
 8006e66:	0112      	lsls	r2, r2, #4
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	4921      	ldr	r1, [pc, #132]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	614b      	str	r3, [r1, #20]
 8006e70:	e014      	b.n	8006e9c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e72:	4b1f      	ldr	r3, [pc, #124]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e74:	695a      	ldr	r2, [r3, #20]
 8006e76:	4b21      	ldr	r3, [pc, #132]	; (8006efc <RCCEx_PLLSAI2_Config+0x1e4>)
 8006e78:	4013      	ands	r3, r2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6892      	ldr	r2, [r2, #8]
 8006e7e:	0211      	lsls	r1, r2, #8
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6952      	ldr	r2, [r2, #20]
 8006e84:	0852      	lsrs	r2, r2, #1
 8006e86:	3a01      	subs	r2, #1
 8006e88:	0652      	lsls	r2, r2, #25
 8006e8a:	4311      	orrs	r1, r2
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6852      	ldr	r2, [r2, #4]
 8006e90:	3a01      	subs	r2, #1
 8006e92:	0112      	lsls	r2, r2, #4
 8006e94:	430a      	orrs	r2, r1
 8006e96:	4916      	ldr	r1, [pc, #88]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006e9c:	4b14      	ldr	r3, [pc, #80]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ea6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea8:	f7fb ff66 	bl	8002d78 <HAL_GetTick>
 8006eac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006eae:	e009      	b.n	8006ec4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006eb0:	f7fb ff62 	bl	8002d78 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d902      	bls.n	8006ec4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	73fb      	strb	r3, [r7, #15]
          break;
 8006ec2:	e005      	b.n	8006ed0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ec4:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0ef      	beq.n	8006eb0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d106      	bne.n	8006ee4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ed6:	4b06      	ldr	r3, [pc, #24]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ed8:	695a      	ldr	r2, [r3, #20]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	4904      	ldr	r1, [pc, #16]	; (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	40021000 	.word	0x40021000
 8006ef4:	07ff800f 	.word	0x07ff800f
 8006ef8:	ff9f800f 	.word	0xff9f800f
 8006efc:	f9ff800f 	.word	0xf9ff800f

08006f00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e095      	b.n	800703e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d108      	bne.n	8006f2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f22:	d009      	beq.n	8006f38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	61da      	str	r2, [r3, #28]
 8006f2a:	e005      	b.n	8006f38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fb fb2c 	bl	80025b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f78:	d902      	bls.n	8006f80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60fb      	str	r3, [r7, #12]
 8006f7e:	e002      	b.n	8006f86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006f8e:	d007      	beq.n	8006fa0 <HAL_SPI_Init+0xa0>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f98:	d002      	beq.n	8006fa0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe2:	ea42 0103 	orr.w	r1, r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	0c1b      	lsrs	r3, r3, #16
 8006ffc:	f003 0204 	and.w	r2, r3, #4
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	f003 0310 	and.w	r3, r3, #16
 8007008:	431a      	orrs	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	431a      	orrs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800701c:	ea42 0103 	orr.w	r1, r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b088      	sub	sp, #32
 800704a:	af00      	add	r7, sp, #0
 800704c:	60f8      	str	r0, [r7, #12]
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	603b      	str	r3, [r7, #0]
 8007052:	4613      	mov	r3, r2
 8007054:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007060:	2b01      	cmp	r3, #1
 8007062:	d101      	bne.n	8007068 <HAL_SPI_Transmit+0x22>
 8007064:	2302      	movs	r3, #2
 8007066:	e15f      	b.n	8007328 <HAL_SPI_Transmit+0x2e2>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007070:	f7fb fe82 	bl	8002d78 <HAL_GetTick>
 8007074:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007076:	88fb      	ldrh	r3, [r7, #6]
 8007078:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b01      	cmp	r3, #1
 8007084:	d002      	beq.n	800708c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007086:	2302      	movs	r3, #2
 8007088:	77fb      	strb	r3, [r7, #31]
    goto error;
 800708a:	e148      	b.n	800731e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <HAL_SPI_Transmit+0x52>
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d102      	bne.n	800709e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800709c:	e13f      	b.n	800731e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2203      	movs	r2, #3
 80070a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	88fa      	ldrh	r2, [r7, #6]
 80070b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	88fa      	ldrh	r2, [r7, #6]
 80070bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e8:	d10f      	bne.n	800710a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007108:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007114:	2b40      	cmp	r3, #64	; 0x40
 8007116:	d007      	beq.n	8007128 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007126:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007130:	d94f      	bls.n	80071d2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <HAL_SPI_Transmit+0xfa>
 800713a:	8afb      	ldrh	r3, [r7, #22]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d142      	bne.n	80071c6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	881a      	ldrh	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	1c9a      	adds	r2, r3, #2
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800715a:	b29b      	uxth	r3, r3
 800715c:	3b01      	subs	r3, #1
 800715e:	b29a      	uxth	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007164:	e02f      	b.n	80071c6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b02      	cmp	r3, #2
 8007172:	d112      	bne.n	800719a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	881a      	ldrh	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	1c9a      	adds	r2, r3, #2
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800718e:	b29b      	uxth	r3, r3
 8007190:	3b01      	subs	r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007198:	e015      	b.n	80071c6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800719a:	f7fb fded 	bl	8002d78 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d803      	bhi.n	80071b2 <HAL_SPI_Transmit+0x16c>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d102      	bne.n	80071b8 <HAL_SPI_Transmit+0x172>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d106      	bne.n	80071c6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80071c4:	e0ab      	b.n	800731e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1ca      	bne.n	8007166 <HAL_SPI_Transmit+0x120>
 80071d0:	e080      	b.n	80072d4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <HAL_SPI_Transmit+0x19a>
 80071da:	8afb      	ldrh	r3, [r7, #22]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d174      	bne.n	80072ca <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d912      	bls.n	8007210 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	881a      	ldrh	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fa:	1c9a      	adds	r2, r3, #2
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b02      	subs	r3, #2
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800720e:	e05c      	b.n	80072ca <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	330c      	adds	r3, #12
 800721a:	7812      	ldrb	r2, [r2, #0]
 800721c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800722c:	b29b      	uxth	r3, r3
 800722e:	3b01      	subs	r3, #1
 8007230:	b29a      	uxth	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007236:	e048      	b.n	80072ca <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b02      	cmp	r3, #2
 8007244:	d12b      	bne.n	800729e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800724a:	b29b      	uxth	r3, r3
 800724c:	2b01      	cmp	r3, #1
 800724e:	d912      	bls.n	8007276 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	881a      	ldrh	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	1c9a      	adds	r2, r3, #2
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800726a:	b29b      	uxth	r3, r3
 800726c:	3b02      	subs	r3, #2
 800726e:	b29a      	uxth	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007274:	e029      	b.n	80072ca <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	330c      	adds	r3, #12
 8007280:	7812      	ldrb	r2, [r2, #0]
 8007282:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007292:	b29b      	uxth	r3, r3
 8007294:	3b01      	subs	r3, #1
 8007296:	b29a      	uxth	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800729c:	e015      	b.n	80072ca <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800729e:	f7fb fd6b 	bl	8002d78 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d803      	bhi.n	80072b6 <HAL_SPI_Transmit+0x270>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b4:	d102      	bne.n	80072bc <HAL_SPI_Transmit+0x276>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d106      	bne.n	80072ca <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80072c8:	e029      	b.n	800731e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1b1      	bne.n	8007238 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 fcf9 	bl	8007cd0 <SPI_EndRxTxTransaction>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2220      	movs	r2, #32
 80072e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072f2:	2300      	movs	r3, #0
 80072f4:	613b      	str	r3, [r7, #16]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	77fb      	strb	r3, [r7, #31]
 8007314:	e003      	b.n	800731e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007326:	7ffb      	ldrb	r3, [r7, #31]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3720      	adds	r7, #32
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af02      	add	r7, sp, #8
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	4613      	mov	r3, r2
 800733e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b01      	cmp	r3, #1
 800734e:	d002      	beq.n	8007356 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007350:	2302      	movs	r3, #2
 8007352:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007354:	e11a      	b.n	800758c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800735e:	d112      	bne.n	8007386 <HAL_SPI_Receive+0x56>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10e      	bne.n	8007386 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2204      	movs	r2, #4
 800736c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007370:	88fa      	ldrh	r2, [r7, #6]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	4613      	mov	r3, r2
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 f90e 	bl	800759e <HAL_SPI_TransmitReceive>
 8007382:	4603      	mov	r3, r0
 8007384:	e107      	b.n	8007596 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <HAL_SPI_Receive+0x64>
 8007390:	2302      	movs	r3, #2
 8007392:	e100      	b.n	8007596 <HAL_SPI_Receive+0x266>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800739c:	f7fb fcec 	bl	8002d78 <HAL_GetTick>
 80073a0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <HAL_SPI_Receive+0x7e>
 80073a8:	88fb      	ldrh	r3, [r7, #6]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d102      	bne.n	80073b4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073b2:	e0eb      	b.n	800758c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2204      	movs	r2, #4
 80073b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	88fa      	ldrh	r2, [r7, #6]
 80073cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	88fa      	ldrh	r2, [r7, #6]
 80073d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073fe:	d908      	bls.n	8007412 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800740e:	605a      	str	r2, [r3, #4]
 8007410:	e007      	b.n	8007422 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007420:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800742a:	d10f      	bne.n	800744c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800743a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800744a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007456:	2b40      	cmp	r3, #64	; 0x40
 8007458:	d007      	beq.n	800746a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007468:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007472:	d86f      	bhi.n	8007554 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007474:	e034      	b.n	80074e0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b01      	cmp	r3, #1
 8007482:	d117      	bne.n	80074b4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f103 020c 	add.w	r2, r3, #12
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007490:	7812      	ldrb	r2, [r2, #0]
 8007492:	b2d2      	uxtb	r2, r2
 8007494:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80074b2:	e015      	b.n	80074e0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074b4:	f7fb fc60 	bl	8002d78 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d803      	bhi.n	80074cc <HAL_SPI_Receive+0x19c>
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ca:	d102      	bne.n	80074d2 <HAL_SPI_Receive+0x1a2>
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d106      	bne.n	80074e0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80074de:	e055      	b.n	800758c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1c4      	bne.n	8007476 <HAL_SPI_Receive+0x146>
 80074ec:	e038      	b.n	8007560 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d115      	bne.n	8007528 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	b292      	uxth	r2, r2
 8007508:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	1c9a      	adds	r2, r3, #2
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800751a:	b29b      	uxth	r3, r3
 800751c:	3b01      	subs	r3, #1
 800751e:	b29a      	uxth	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007526:	e015      	b.n	8007554 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007528:	f7fb fc26 	bl	8002d78 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d803      	bhi.n	8007540 <HAL_SPI_Receive+0x210>
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753e:	d102      	bne.n	8007546 <HAL_SPI_Receive+0x216>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d106      	bne.n	8007554 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007552:	e01b      	b.n	800758c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800755a:	b29b      	uxth	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1c6      	bne.n	80074ee <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 fb5b 	bl	8007c20 <SPI_EndRxTransaction>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2220      	movs	r2, #32
 8007574:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	75fb      	strb	r3, [r7, #23]
 8007582:	e003      	b.n	800758c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b08a      	sub	sp, #40	; 0x28
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	60f8      	str	r0, [r7, #12]
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	607a      	str	r2, [r7, #4]
 80075aa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075ac:	2301      	movs	r3, #1
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d101      	bne.n	80075c4 <HAL_SPI_TransmitReceive+0x26>
 80075c0:	2302      	movs	r3, #2
 80075c2:	e20a      	b.n	80079da <HAL_SPI_TransmitReceive+0x43c>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075cc:	f7fb fbd4 	bl	8002d78 <HAL_GetTick>
 80075d0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075d8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80075e0:	887b      	ldrh	r3, [r7, #2]
 80075e2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80075e4:	887b      	ldrh	r3, [r7, #2]
 80075e6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075e8:	7efb      	ldrb	r3, [r7, #27]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d00e      	beq.n	800760c <HAL_SPI_TransmitReceive+0x6e>
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075f4:	d106      	bne.n	8007604 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d102      	bne.n	8007604 <HAL_SPI_TransmitReceive+0x66>
 80075fe:	7efb      	ldrb	r3, [r7, #27]
 8007600:	2b04      	cmp	r3, #4
 8007602:	d003      	beq.n	800760c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007604:	2302      	movs	r3, #2
 8007606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800760a:	e1e0      	b.n	80079ce <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d005      	beq.n	800761e <HAL_SPI_TransmitReceive+0x80>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <HAL_SPI_TransmitReceive+0x80>
 8007618:	887b      	ldrh	r3, [r7, #2]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d103      	bne.n	8007626 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007624:	e1d3      	b.n	80079ce <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b04      	cmp	r3, #4
 8007630:	d003      	beq.n	800763a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2205      	movs	r2, #5
 8007636:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	887a      	ldrh	r2, [r7, #2]
 800764a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	887a      	ldrh	r2, [r7, #2]
 8007652:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	887a      	ldrh	r2, [r7, #2]
 8007660:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	887a      	ldrh	r2, [r7, #2]
 8007666:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800767c:	d802      	bhi.n	8007684 <HAL_SPI_TransmitReceive+0xe6>
 800767e:	8a3b      	ldrh	r3, [r7, #16]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d908      	bls.n	8007696 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007692:	605a      	str	r2, [r3, #4]
 8007694:	e007      	b.n	80076a6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076a4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b0:	2b40      	cmp	r3, #64	; 0x40
 80076b2:	d007      	beq.n	80076c4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076cc:	f240 8081 	bls.w	80077d2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <HAL_SPI_TransmitReceive+0x140>
 80076d8:	8a7b      	ldrh	r3, [r7, #18]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d16d      	bne.n	80077ba <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e2:	881a      	ldrh	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	1c9a      	adds	r2, r3, #2
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	3b01      	subs	r3, #1
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007702:	e05a      	b.n	80077ba <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b02      	cmp	r3, #2
 8007710:	d11b      	bne.n	800774a <HAL_SPI_TransmitReceive+0x1ac>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007716:	b29b      	uxth	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d016      	beq.n	800774a <HAL_SPI_TransmitReceive+0x1ac>
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	2b01      	cmp	r3, #1
 8007720:	d113      	bne.n	800774a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	881a      	ldrh	r2, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	1c9a      	adds	r2, r3, #2
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	b29a      	uxth	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b01      	cmp	r3, #1
 8007756:	d11c      	bne.n	8007792 <HAL_SPI_TransmitReceive+0x1f4>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800775e:	b29b      	uxth	r3, r3
 8007760:	2b00      	cmp	r3, #0
 8007762:	d016      	beq.n	8007792 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	b292      	uxth	r2, r2
 8007770:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	1c9a      	adds	r2, r3, #2
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007782:	b29b      	uxth	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800778e:	2301      	movs	r3, #1
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007792:	f7fb faf1 	bl	8002d78 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779e:	429a      	cmp	r2, r3
 80077a0:	d80b      	bhi.n	80077ba <HAL_SPI_TransmitReceive+0x21c>
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a8:	d007      	beq.n	80077ba <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80077b8:	e109      	b.n	80079ce <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d19f      	bne.n	8007704 <HAL_SPI_TransmitReceive+0x166>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d199      	bne.n	8007704 <HAL_SPI_TransmitReceive+0x166>
 80077d0:	e0e3      	b.n	800799a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_SPI_TransmitReceive+0x244>
 80077da:	8a7b      	ldrh	r3, [r7, #18]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	f040 80cf 	bne.w	8007980 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d912      	bls.n	8007812 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	881a      	ldrh	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	1c9a      	adds	r2, r3, #2
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007806:	b29b      	uxth	r3, r3
 8007808:	3b02      	subs	r3, #2
 800780a:	b29a      	uxth	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007810:	e0b6      	b.n	8007980 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	330c      	adds	r3, #12
 800781c:	7812      	ldrb	r2, [r2, #0]
 800781e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800782e:	b29b      	uxth	r3, r3
 8007830:	3b01      	subs	r3, #1
 8007832:	b29a      	uxth	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007838:	e0a2      	b.n	8007980 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b02      	cmp	r3, #2
 8007846:	d134      	bne.n	80078b2 <HAL_SPI_TransmitReceive+0x314>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800784c:	b29b      	uxth	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d02f      	beq.n	80078b2 <HAL_SPI_TransmitReceive+0x314>
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	2b01      	cmp	r3, #1
 8007856:	d12c      	bne.n	80078b2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b01      	cmp	r3, #1
 8007860:	d912      	bls.n	8007888 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007866:	881a      	ldrh	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007872:	1c9a      	adds	r2, r3, #2
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800787c:	b29b      	uxth	r3, r3
 800787e:	3b02      	subs	r3, #2
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007886:	e012      	b.n	80078ae <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	330c      	adds	r3, #12
 8007892:	7812      	ldrb	r2, [r2, #0]
 8007894:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d148      	bne.n	8007952 <HAL_SPI_TransmitReceive+0x3b4>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d042      	beq.n	8007952 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d923      	bls.n	8007920 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68da      	ldr	r2, [r3, #12]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	b292      	uxth	r2, r2
 80078e4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	1c9a      	adds	r2, r3, #2
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	3b02      	subs	r3, #2
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007908:	b29b      	uxth	r3, r3
 800790a:	2b01      	cmp	r3, #1
 800790c:	d81f      	bhi.n	800794e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800791c:	605a      	str	r2, [r3, #4]
 800791e:	e016      	b.n	800794e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f103 020c 	add.w	r2, r3, #12
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792c:	7812      	ldrb	r2, [r2, #0]
 800792e:	b2d2      	uxtb	r2, r2
 8007930:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007942:	b29b      	uxth	r3, r3
 8007944:	3b01      	subs	r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800794e:	2301      	movs	r3, #1
 8007950:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007952:	f7fb fa11 	bl	8002d78 <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800795e:	429a      	cmp	r2, r3
 8007960:	d803      	bhi.n	800796a <HAL_SPI_TransmitReceive+0x3cc>
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007968:	d102      	bne.n	8007970 <HAL_SPI_TransmitReceive+0x3d2>
 800796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796c:	2b00      	cmp	r3, #0
 800796e:	d107      	bne.n	8007980 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800797e:	e026      	b.n	80079ce <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	f47f af57 	bne.w	800783a <HAL_SPI_TransmitReceive+0x29c>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007992:	b29b      	uxth	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	f47f af50 	bne.w	800783a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800799a:	69fa      	ldr	r2, [r7, #28]
 800799c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 f996 	bl	8007cd0 <SPI_EndRxTxTransaction>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d005      	beq.n	80079b6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2220      	movs	r2, #32
 80079b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079c4:	e003      	b.n	80079ce <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80079d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3728      	adds	r7, #40	; 0x28
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	603b      	str	r3, [r7, #0]
 80079f0:	4613      	mov	r3, r2
 80079f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079f4:	f7fb f9c0 	bl	8002d78 <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	1a9b      	subs	r3, r3, r2
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	4413      	add	r3, r2
 8007a02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a04:	f7fb f9b8 	bl	8002d78 <HAL_GetTick>
 8007a08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a0a:	4b39      	ldr	r3, [pc, #228]	; (8007af0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	015b      	lsls	r3, r3, #5
 8007a10:	0d1b      	lsrs	r3, r3, #20
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	fb02 f303 	mul.w	r3, r2, r3
 8007a18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a1a:	e054      	b.n	8007ac6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a22:	d050      	beq.n	8007ac6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a24:	f7fb f9a8 	bl	8002d78 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d902      	bls.n	8007a3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d13d      	bne.n	8007ab6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a52:	d111      	bne.n	8007a78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a5c:	d004      	beq.n	8007a68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a66:	d107      	bne.n	8007a78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a80:	d10f      	bne.n	8007aa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007aa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e017      	b.n	8007ae6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689a      	ldr	r2, [r3, #8]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	bf0c      	ite	eq
 8007ad6:	2301      	moveq	r3, #1
 8007ad8:	2300      	movne	r3, #0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	461a      	mov	r2, r3
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d19b      	bne.n	8007a1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3720      	adds	r7, #32
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	20000004 	.word	0x20000004

08007af4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08a      	sub	sp, #40	; 0x28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007b02:	2300      	movs	r3, #0
 8007b04:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007b06:	f7fb f937 	bl	8002d78 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	1a9b      	subs	r3, r3, r2
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	4413      	add	r3, r2
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007b16:	f7fb f92f 	bl	8002d78 <HAL_GetTick>
 8007b1a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	330c      	adds	r3, #12
 8007b22:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007b24:	4b3d      	ldr	r3, [pc, #244]	; (8007c1c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	00da      	lsls	r2, r3, #3
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	0d1b      	lsrs	r3, r3, #20
 8007b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b36:	fb02 f303 	mul.w	r3, r2, r3
 8007b3a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007b3c:	e060      	b.n	8007c00 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b44:	d107      	bne.n	8007b56 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d104      	bne.n	8007b56 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5c:	d050      	beq.n	8007c00 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b5e:	f7fb f90b 	bl	8002d78 <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d902      	bls.n	8007b74 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d13d      	bne.n	8007bf0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b8c:	d111      	bne.n	8007bb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b96:	d004      	beq.n	8007ba2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ba0:	d107      	bne.n	8007bb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bb0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bba:	d10f      	bne.n	8007bdc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e010      	b.n	8007c12 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689a      	ldr	r2, [r3, #8]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	4013      	ands	r3, r2
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d196      	bne.n	8007b3e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3728      	adds	r7, #40	; 0x28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20000004 	.word	0x20000004

08007c20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af02      	add	r7, sp, #8
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c34:	d111      	bne.n	8007c5a <SPI_EndRxTransaction+0x3a>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c3e:	d004      	beq.n	8007c4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c48:	d107      	bne.n	8007c5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c58:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2200      	movs	r2, #0
 8007c62:	2180      	movs	r1, #128	; 0x80
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f7ff febd 	bl	80079e4 <SPI_WaitFlagStateUntilTimeout>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d007      	beq.n	8007c80 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c74:	f043 0220 	orr.w	r2, r3, #32
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e023      	b.n	8007cc8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c88:	d11d      	bne.n	8007cc6 <SPI_EndRxTransaction+0xa6>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c92:	d004      	beq.n	8007c9e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c9c:	d113      	bne.n	8007cc6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f7ff ff22 	bl	8007af4 <SPI_WaitFifoStateUntilTimeout>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d007      	beq.n	8007cc6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cba:	f043 0220 	orr.w	r2, r3, #32
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e000      	b.n	8007cc8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af02      	add	r7, sp, #8
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7ff ff03 	bl	8007af4 <SPI_WaitFifoStateUntilTimeout>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d007      	beq.n	8007d04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf8:	f043 0220 	orr.w	r2, r3, #32
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e027      	b.n	8007d54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	2180      	movs	r1, #128	; 0x80
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f7ff fe68 	bl	80079e4 <SPI_WaitFlagStateUntilTimeout>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d007      	beq.n	8007d2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d1e:	f043 0220 	orr.w	r2, r3, #32
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e014      	b.n	8007d54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7ff fedc 	bl	8007af4 <SPI_WaitFifoStateUntilTimeout>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d007      	beq.n	8007d52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d46:	f043 0220 	orr.w	r2, r3, #32
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e000      	b.n	8007d54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e049      	b.n	8007e02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d106      	bne.n	8007d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7fa fc98 	bl	80026b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	3304      	adds	r3, #4
 8007d98:	4619      	mov	r1, r3
 8007d9a:	4610      	mov	r0, r2
 8007d9c:	f000 fce2 	bl	8008764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d001      	beq.n	8007e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e04f      	b.n	8007ec4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f042 0201 	orr.w	r2, r2, #1
 8007e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a23      	ldr	r2, [pc, #140]	; (8007ed0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d01d      	beq.n	8007e82 <HAL_TIM_Base_Start_IT+0x76>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e4e:	d018      	beq.n	8007e82 <HAL_TIM_Base_Start_IT+0x76>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a1f      	ldr	r2, [pc, #124]	; (8007ed4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d013      	beq.n	8007e82 <HAL_TIM_Base_Start_IT+0x76>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a1e      	ldr	r2, [pc, #120]	; (8007ed8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00e      	beq.n	8007e82 <HAL_TIM_Base_Start_IT+0x76>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a1c      	ldr	r2, [pc, #112]	; (8007edc <HAL_TIM_Base_Start_IT+0xd0>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d009      	beq.n	8007e82 <HAL_TIM_Base_Start_IT+0x76>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a1b      	ldr	r2, [pc, #108]	; (8007ee0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d004      	beq.n	8007e82 <HAL_TIM_Base_Start_IT+0x76>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a19      	ldr	r2, [pc, #100]	; (8007ee4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d115      	bne.n	8007eae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	4b17      	ldr	r3, [pc, #92]	; (8007ee8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2b06      	cmp	r3, #6
 8007e92:	d015      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0xb4>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e9a:	d011      	beq.n	8007ec0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0201 	orr.w	r2, r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eac:	e008      	b.n	8007ec0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f042 0201 	orr.w	r2, r2, #1
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	e000      	b.n	8007ec2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	40012c00 	.word	0x40012c00
 8007ed4:	40000400 	.word	0x40000400
 8007ed8:	40000800 	.word	0x40000800
 8007edc:	40000c00 	.word	0x40000c00
 8007ee0:	40013400 	.word	0x40013400
 8007ee4:	40014000 	.word	0x40014000
 8007ee8:	00010007 	.word	0x00010007

08007eec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e049      	b.n	8007f92 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d106      	bne.n	8007f18 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f841 	bl	8007f9a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3304      	adds	r3, #4
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	f000 fc1a 	bl	8008764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007fa2:	bf00      	nop
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
	...

08007fb0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d104      	bne.n	8007fce <HAL_TIM_IC_Start_IT+0x1e>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	e023      	b.n	8008016 <HAL_TIM_IC_Start_IT+0x66>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	d104      	bne.n	8007fde <HAL_TIM_IC_Start_IT+0x2e>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	e01b      	b.n	8008016 <HAL_TIM_IC_Start_IT+0x66>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	d104      	bne.n	8007fee <HAL_TIM_IC_Start_IT+0x3e>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	e013      	b.n	8008016 <HAL_TIM_IC_Start_IT+0x66>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b0c      	cmp	r3, #12
 8007ff2:	d104      	bne.n	8007ffe <HAL_TIM_IC_Start_IT+0x4e>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	e00b      	b.n	8008016 <HAL_TIM_IC_Start_IT+0x66>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b10      	cmp	r3, #16
 8008002:	d104      	bne.n	800800e <HAL_TIM_IC_Start_IT+0x5e>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800800a:	b2db      	uxtb	r3, r3
 800800c:	e003      	b.n	8008016 <HAL_TIM_IC_Start_IT+0x66>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008014:	b2db      	uxtb	r3, r3
 8008016:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d104      	bne.n	8008028 <HAL_TIM_IC_Start_IT+0x78>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008024:	b2db      	uxtb	r3, r3
 8008026:	e013      	b.n	8008050 <HAL_TIM_IC_Start_IT+0xa0>
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	2b04      	cmp	r3, #4
 800802c:	d104      	bne.n	8008038 <HAL_TIM_IC_Start_IT+0x88>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008034:	b2db      	uxtb	r3, r3
 8008036:	e00b      	b.n	8008050 <HAL_TIM_IC_Start_IT+0xa0>
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b08      	cmp	r3, #8
 800803c:	d104      	bne.n	8008048 <HAL_TIM_IC_Start_IT+0x98>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008044:	b2db      	uxtb	r3, r3
 8008046:	e003      	b.n	8008050 <HAL_TIM_IC_Start_IT+0xa0>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800804e:	b2db      	uxtb	r3, r3
 8008050:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008052:	7bbb      	ldrb	r3, [r7, #14]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d102      	bne.n	800805e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008058:	7b7b      	ldrb	r3, [r7, #13]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d001      	beq.n	8008062 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e0dd      	b.n	800821e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d104      	bne.n	8008072 <HAL_TIM_IC_Start_IT+0xc2>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008070:	e023      	b.n	80080ba <HAL_TIM_IC_Start_IT+0x10a>
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b04      	cmp	r3, #4
 8008076:	d104      	bne.n	8008082 <HAL_TIM_IC_Start_IT+0xd2>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2202      	movs	r2, #2
 800807c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008080:	e01b      	b.n	80080ba <HAL_TIM_IC_Start_IT+0x10a>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b08      	cmp	r3, #8
 8008086:	d104      	bne.n	8008092 <HAL_TIM_IC_Start_IT+0xe2>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2202      	movs	r2, #2
 800808c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008090:	e013      	b.n	80080ba <HAL_TIM_IC_Start_IT+0x10a>
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b0c      	cmp	r3, #12
 8008096:	d104      	bne.n	80080a2 <HAL_TIM_IC_Start_IT+0xf2>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080a0:	e00b      	b.n	80080ba <HAL_TIM_IC_Start_IT+0x10a>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b10      	cmp	r3, #16
 80080a6:	d104      	bne.n	80080b2 <HAL_TIM_IC_Start_IT+0x102>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080b0:	e003      	b.n	80080ba <HAL_TIM_IC_Start_IT+0x10a>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2202      	movs	r2, #2
 80080b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d104      	bne.n	80080ca <HAL_TIM_IC_Start_IT+0x11a>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080c8:	e013      	b.n	80080f2 <HAL_TIM_IC_Start_IT+0x142>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d104      	bne.n	80080da <HAL_TIM_IC_Start_IT+0x12a>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080d8:	e00b      	b.n	80080f2 <HAL_TIM_IC_Start_IT+0x142>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b08      	cmp	r3, #8
 80080de:	d104      	bne.n	80080ea <HAL_TIM_IC_Start_IT+0x13a>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80080e8:	e003      	b.n	80080f2 <HAL_TIM_IC_Start_IT+0x142>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2202      	movs	r2, #2
 80080ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b0c      	cmp	r3, #12
 80080f6:	d841      	bhi.n	800817c <HAL_TIM_IC_Start_IT+0x1cc>
 80080f8:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <HAL_TIM_IC_Start_IT+0x150>)
 80080fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fe:	bf00      	nop
 8008100:	08008135 	.word	0x08008135
 8008104:	0800817d 	.word	0x0800817d
 8008108:	0800817d 	.word	0x0800817d
 800810c:	0800817d 	.word	0x0800817d
 8008110:	08008147 	.word	0x08008147
 8008114:	0800817d 	.word	0x0800817d
 8008118:	0800817d 	.word	0x0800817d
 800811c:	0800817d 	.word	0x0800817d
 8008120:	08008159 	.word	0x08008159
 8008124:	0800817d 	.word	0x0800817d
 8008128:	0800817d 	.word	0x0800817d
 800812c:	0800817d 	.word	0x0800817d
 8008130:	0800816b 	.word	0x0800816b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f042 0202 	orr.w	r2, r2, #2
 8008142:	60da      	str	r2, [r3, #12]
      break;
 8008144:	e01d      	b.n	8008182 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f042 0204 	orr.w	r2, r2, #4
 8008154:	60da      	str	r2, [r3, #12]
      break;
 8008156:	e014      	b.n	8008182 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0208 	orr.w	r2, r2, #8
 8008166:	60da      	str	r2, [r3, #12]
      break;
 8008168:	e00b      	b.n	8008182 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68da      	ldr	r2, [r3, #12]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f042 0210 	orr.w	r2, r2, #16
 8008178:	60da      	str	r2, [r3, #12]
      break;
 800817a:	e002      	b.n	8008182 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	73fb      	strb	r3, [r7, #15]
      break;
 8008180:	bf00      	nop
  }

  if (status == HAL_OK)
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d149      	bne.n	800821c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2201      	movs	r2, #1
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 fd3f 	bl	8008c14 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a23      	ldr	r2, [pc, #140]	; (8008228 <HAL_TIM_IC_Start_IT+0x278>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d01d      	beq.n	80081dc <HAL_TIM_IC_Start_IT+0x22c>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081a8:	d018      	beq.n	80081dc <HAL_TIM_IC_Start_IT+0x22c>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a1f      	ldr	r2, [pc, #124]	; (800822c <HAL_TIM_IC_Start_IT+0x27c>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d013      	beq.n	80081dc <HAL_TIM_IC_Start_IT+0x22c>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a1d      	ldr	r2, [pc, #116]	; (8008230 <HAL_TIM_IC_Start_IT+0x280>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d00e      	beq.n	80081dc <HAL_TIM_IC_Start_IT+0x22c>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a1c      	ldr	r2, [pc, #112]	; (8008234 <HAL_TIM_IC_Start_IT+0x284>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d009      	beq.n	80081dc <HAL_TIM_IC_Start_IT+0x22c>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a1a      	ldr	r2, [pc, #104]	; (8008238 <HAL_TIM_IC_Start_IT+0x288>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d004      	beq.n	80081dc <HAL_TIM_IC_Start_IT+0x22c>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a19      	ldr	r2, [pc, #100]	; (800823c <HAL_TIM_IC_Start_IT+0x28c>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d115      	bne.n	8008208 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689a      	ldr	r2, [r3, #8]
 80081e2:	4b17      	ldr	r3, [pc, #92]	; (8008240 <HAL_TIM_IC_Start_IT+0x290>)
 80081e4:	4013      	ands	r3, r2
 80081e6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2b06      	cmp	r3, #6
 80081ec:	d015      	beq.n	800821a <HAL_TIM_IC_Start_IT+0x26a>
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081f4:	d011      	beq.n	800821a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f042 0201 	orr.w	r2, r2, #1
 8008204:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008206:	e008      	b.n	800821a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f042 0201 	orr.w	r2, r2, #1
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	e000      	b.n	800821c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800821a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800821c:	7bfb      	ldrb	r3, [r7, #15]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	40012c00 	.word	0x40012c00
 800822c:	40000400 	.word	0x40000400
 8008230:	40000800 	.word	0x40000800
 8008234:	40000c00 	.word	0x40000c00
 8008238:	40013400 	.word	0x40013400
 800823c:	40014000 	.word	0x40014000
 8008240:	00010007 	.word	0x00010007

08008244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d020      	beq.n	80082a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d01b      	beq.n	80082a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f06f 0202 	mvn.w	r2, #2
 8008278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	f003 0303 	and.w	r3, r3, #3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fa49 	bl	8008726 <HAL_TIM_IC_CaptureCallback>
 8008294:	e005      	b.n	80082a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fa3b 	bl	8008712 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fa4c 	bl	800873a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f003 0304 	and.w	r3, r3, #4
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d020      	beq.n	80082f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d01b      	beq.n	80082f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f06f 0204 	mvn.w	r2, #4
 80082c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2202      	movs	r2, #2
 80082ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fa23 	bl	8008726 <HAL_TIM_IC_CaptureCallback>
 80082e0:	e005      	b.n	80082ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fa15 	bl	8008712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fa26 	bl	800873a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f003 0308 	and.w	r3, r3, #8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d020      	beq.n	8008340 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f003 0308 	and.w	r3, r3, #8
 8008304:	2b00      	cmp	r3, #0
 8008306:	d01b      	beq.n	8008340 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f06f 0208 	mvn.w	r2, #8
 8008310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2204      	movs	r2, #4
 8008316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	f003 0303 	and.w	r3, r3, #3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f9fd 	bl	8008726 <HAL_TIM_IC_CaptureCallback>
 800832c:	e005      	b.n	800833a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f9ef 	bl	8008712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fa00 	bl	800873a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f003 0310 	and.w	r3, r3, #16
 8008346:	2b00      	cmp	r3, #0
 8008348:	d020      	beq.n	800838c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f003 0310 	and.w	r3, r3, #16
 8008350:	2b00      	cmp	r3, #0
 8008352:	d01b      	beq.n	800838c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f06f 0210 	mvn.w	r2, #16
 800835c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2208      	movs	r2, #8
 8008362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f9d7 	bl	8008726 <HAL_TIM_IC_CaptureCallback>
 8008378:	e005      	b.n	8008386 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f9c9 	bl	8008712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f9da 	bl	800873a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00c      	beq.n	80083b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d007      	beq.n	80083b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f06f 0201 	mvn.w	r2, #1
 80083a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7fa fae4 	bl	8002978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00c      	beq.n	80083d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d007      	beq.n	80083d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fcd8 	bl	8008d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00c      	beq.n	80083f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d007      	beq.n	80083f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80083f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fcd0 	bl	8008d98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00c      	beq.n	800841c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008408:	2b00      	cmp	r3, #0
 800840a:	d007      	beq.n	800841c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f999 	bl	800874e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	f003 0320 	and.w	r3, r3, #32
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00c      	beq.n	8008440 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f003 0320 	and.w	r3, r3, #32
 800842c:	2b00      	cmp	r3, #0
 800842e:	d007      	beq.n	8008440 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f06f 0220 	mvn.w	r2, #32
 8008438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fc98 	bl	8008d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008440:	bf00      	nop
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800845e:	2b01      	cmp	r3, #1
 8008460:	d101      	bne.n	8008466 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008462:	2302      	movs	r3, #2
 8008464:	e088      	b.n	8008578 <HAL_TIM_IC_ConfigChannel+0x130>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d11b      	bne.n	80084ac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008484:	f000 fa08 	bl	8008898 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	699a      	ldr	r2, [r3, #24]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 020c 	bic.w	r2, r2, #12
 8008496:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6999      	ldr	r1, [r3, #24]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	689a      	ldr	r2, [r3, #8]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	619a      	str	r2, [r3, #24]
 80084aa:	e060      	b.n	800856e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	d11c      	bne.n	80084ec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80084c2:	f000 fa86 	bl	80089d2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	699a      	ldr	r2, [r3, #24]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80084d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6999      	ldr	r1, [r3, #24]
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	021a      	lsls	r2, r3, #8
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	619a      	str	r2, [r3, #24]
 80084ea:	e040      	b.n	800856e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b08      	cmp	r3, #8
 80084f0:	d11b      	bne.n	800852a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008502:	f000 fad3 	bl	8008aac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	69da      	ldr	r2, [r3, #28]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f022 020c 	bic.w	r2, r2, #12
 8008514:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69d9      	ldr	r1, [r3, #28]
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	689a      	ldr	r2, [r3, #8]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	61da      	str	r2, [r3, #28]
 8008528:	e021      	b.n	800856e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b0c      	cmp	r3, #12
 800852e:	d11c      	bne.n	800856a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008540:	f000 faf0 	bl	8008b24 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	69da      	ldr	r2, [r3, #28]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008552:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	69d9      	ldr	r1, [r3, #28]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	021a      	lsls	r2, r3, #8
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	61da      	str	r2, [r3, #28]
 8008568:	e001      	b.n	800856e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008576:	7dfb      	ldrb	r3, [r7, #23]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008594:	2b01      	cmp	r3, #1
 8008596:	d101      	bne.n	800859c <HAL_TIM_ConfigClockSource+0x1c>
 8008598:	2302      	movs	r3, #2
 800859a:	e0b6      	b.n	800870a <HAL_TIM_ConfigClockSource+0x18a>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80085be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d8:	d03e      	beq.n	8008658 <HAL_TIM_ConfigClockSource+0xd8>
 80085da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085de:	f200 8087 	bhi.w	80086f0 <HAL_TIM_ConfigClockSource+0x170>
 80085e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085e6:	f000 8086 	beq.w	80086f6 <HAL_TIM_ConfigClockSource+0x176>
 80085ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ee:	d87f      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x170>
 80085f0:	2b70      	cmp	r3, #112	; 0x70
 80085f2:	d01a      	beq.n	800862a <HAL_TIM_ConfigClockSource+0xaa>
 80085f4:	2b70      	cmp	r3, #112	; 0x70
 80085f6:	d87b      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x170>
 80085f8:	2b60      	cmp	r3, #96	; 0x60
 80085fa:	d050      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x11e>
 80085fc:	2b60      	cmp	r3, #96	; 0x60
 80085fe:	d877      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x170>
 8008600:	2b50      	cmp	r3, #80	; 0x50
 8008602:	d03c      	beq.n	800867e <HAL_TIM_ConfigClockSource+0xfe>
 8008604:	2b50      	cmp	r3, #80	; 0x50
 8008606:	d873      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x170>
 8008608:	2b40      	cmp	r3, #64	; 0x40
 800860a:	d058      	beq.n	80086be <HAL_TIM_ConfigClockSource+0x13e>
 800860c:	2b40      	cmp	r3, #64	; 0x40
 800860e:	d86f      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x170>
 8008610:	2b30      	cmp	r3, #48	; 0x30
 8008612:	d064      	beq.n	80086de <HAL_TIM_ConfigClockSource+0x15e>
 8008614:	2b30      	cmp	r3, #48	; 0x30
 8008616:	d86b      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x170>
 8008618:	2b20      	cmp	r3, #32
 800861a:	d060      	beq.n	80086de <HAL_TIM_ConfigClockSource+0x15e>
 800861c:	2b20      	cmp	r3, #32
 800861e:	d867      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x170>
 8008620:	2b00      	cmp	r3, #0
 8008622:	d05c      	beq.n	80086de <HAL_TIM_ConfigClockSource+0x15e>
 8008624:	2b10      	cmp	r3, #16
 8008626:	d05a      	beq.n	80086de <HAL_TIM_ConfigClockSource+0x15e>
 8008628:	e062      	b.n	80086f0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800863a:	f000 facb 	bl	8008bd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800864c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	609a      	str	r2, [r3, #8]
      break;
 8008656:	e04f      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008668:	f000 fab4 	bl	8008bd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689a      	ldr	r2, [r3, #8]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800867a:	609a      	str	r2, [r3, #8]
      break;
 800867c:	e03c      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800868a:	461a      	mov	r2, r3
 800868c:	f000 f972 	bl	8008974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2150      	movs	r1, #80	; 0x50
 8008696:	4618      	mov	r0, r3
 8008698:	f000 fa81 	bl	8008b9e <TIM_ITRx_SetConfig>
      break;
 800869c:	e02c      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086aa:	461a      	mov	r2, r3
 80086ac:	f000 f9ce 	bl	8008a4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2160      	movs	r1, #96	; 0x60
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 fa71 	bl	8008b9e <TIM_ITRx_SetConfig>
      break;
 80086bc:	e01c      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ca:	461a      	mov	r2, r3
 80086cc:	f000 f952 	bl	8008974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2140      	movs	r1, #64	; 0x40
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 fa61 	bl	8008b9e <TIM_ITRx_SetConfig>
      break;
 80086dc:	e00c      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4619      	mov	r1, r3
 80086e8:	4610      	mov	r0, r2
 80086ea:	f000 fa58 	bl	8008b9e <TIM_ITRx_SetConfig>
      break;
 80086ee:	e003      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	73fb      	strb	r3, [r7, #15]
      break;
 80086f4:	e000      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80086f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008708:	7bfb      	ldrb	r3, [r7, #15]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800871a:	bf00      	nop
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008726:	b480      	push	{r7}
 8008728:	b083      	sub	sp, #12
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800872e:	bf00      	nop
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008742:	bf00      	nop
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
	...

08008764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a40      	ldr	r2, [pc, #256]	; (8008878 <TIM_Base_SetConfig+0x114>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d013      	beq.n	80087a4 <TIM_Base_SetConfig+0x40>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008782:	d00f      	beq.n	80087a4 <TIM_Base_SetConfig+0x40>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a3d      	ldr	r2, [pc, #244]	; (800887c <TIM_Base_SetConfig+0x118>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d00b      	beq.n	80087a4 <TIM_Base_SetConfig+0x40>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a3c      	ldr	r2, [pc, #240]	; (8008880 <TIM_Base_SetConfig+0x11c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d007      	beq.n	80087a4 <TIM_Base_SetConfig+0x40>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a3b      	ldr	r2, [pc, #236]	; (8008884 <TIM_Base_SetConfig+0x120>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d003      	beq.n	80087a4 <TIM_Base_SetConfig+0x40>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a3a      	ldr	r2, [pc, #232]	; (8008888 <TIM_Base_SetConfig+0x124>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d108      	bne.n	80087b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a2f      	ldr	r2, [pc, #188]	; (8008878 <TIM_Base_SetConfig+0x114>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d01f      	beq.n	80087fe <TIM_Base_SetConfig+0x9a>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c4:	d01b      	beq.n	80087fe <TIM_Base_SetConfig+0x9a>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a2c      	ldr	r2, [pc, #176]	; (800887c <TIM_Base_SetConfig+0x118>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d017      	beq.n	80087fe <TIM_Base_SetConfig+0x9a>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a2b      	ldr	r2, [pc, #172]	; (8008880 <TIM_Base_SetConfig+0x11c>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d013      	beq.n	80087fe <TIM_Base_SetConfig+0x9a>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a2a      	ldr	r2, [pc, #168]	; (8008884 <TIM_Base_SetConfig+0x120>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d00f      	beq.n	80087fe <TIM_Base_SetConfig+0x9a>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a29      	ldr	r2, [pc, #164]	; (8008888 <TIM_Base_SetConfig+0x124>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d00b      	beq.n	80087fe <TIM_Base_SetConfig+0x9a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a28      	ldr	r2, [pc, #160]	; (800888c <TIM_Base_SetConfig+0x128>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d007      	beq.n	80087fe <TIM_Base_SetConfig+0x9a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a27      	ldr	r2, [pc, #156]	; (8008890 <TIM_Base_SetConfig+0x12c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d003      	beq.n	80087fe <TIM_Base_SetConfig+0x9a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a26      	ldr	r2, [pc, #152]	; (8008894 <TIM_Base_SetConfig+0x130>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d108      	bne.n	8008810 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	4313      	orrs	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	689a      	ldr	r2, [r3, #8]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a10      	ldr	r2, [pc, #64]	; (8008878 <TIM_Base_SetConfig+0x114>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d00f      	beq.n	800885c <TIM_Base_SetConfig+0xf8>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a12      	ldr	r2, [pc, #72]	; (8008888 <TIM_Base_SetConfig+0x124>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d00b      	beq.n	800885c <TIM_Base_SetConfig+0xf8>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a11      	ldr	r2, [pc, #68]	; (800888c <TIM_Base_SetConfig+0x128>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d007      	beq.n	800885c <TIM_Base_SetConfig+0xf8>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a10      	ldr	r2, [pc, #64]	; (8008890 <TIM_Base_SetConfig+0x12c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d003      	beq.n	800885c <TIM_Base_SetConfig+0xf8>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a0f      	ldr	r2, [pc, #60]	; (8008894 <TIM_Base_SetConfig+0x130>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d103      	bne.n	8008864 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	691a      	ldr	r2, [r3, #16]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	615a      	str	r2, [r3, #20]
}
 800886a:	bf00      	nop
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	40012c00 	.word	0x40012c00
 800887c:	40000400 	.word	0x40000400
 8008880:	40000800 	.word	0x40000800
 8008884:	40000c00 	.word	0x40000c00
 8008888:	40013400 	.word	0x40013400
 800888c:	40014000 	.word	0x40014000
 8008890:	40014400 	.word	0x40014400
 8008894:	40014800 	.word	0x40014800

08008898 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6a1b      	ldr	r3, [r3, #32]
 80088b0:	f023 0201 	bic.w	r2, r3, #1
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	4a26      	ldr	r2, [pc, #152]	; (800895c <TIM_TI1_SetConfig+0xc4>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d017      	beq.n	80088f6 <TIM_TI1_SetConfig+0x5e>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088cc:	d013      	beq.n	80088f6 <TIM_TI1_SetConfig+0x5e>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	4a23      	ldr	r2, [pc, #140]	; (8008960 <TIM_TI1_SetConfig+0xc8>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00f      	beq.n	80088f6 <TIM_TI1_SetConfig+0x5e>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	4a22      	ldr	r2, [pc, #136]	; (8008964 <TIM_TI1_SetConfig+0xcc>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d00b      	beq.n	80088f6 <TIM_TI1_SetConfig+0x5e>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	4a21      	ldr	r2, [pc, #132]	; (8008968 <TIM_TI1_SetConfig+0xd0>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d007      	beq.n	80088f6 <TIM_TI1_SetConfig+0x5e>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	4a20      	ldr	r2, [pc, #128]	; (800896c <TIM_TI1_SetConfig+0xd4>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d003      	beq.n	80088f6 <TIM_TI1_SetConfig+0x5e>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4a1f      	ldr	r2, [pc, #124]	; (8008970 <TIM_TI1_SetConfig+0xd8>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d101      	bne.n	80088fa <TIM_TI1_SetConfig+0x62>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e000      	b.n	80088fc <TIM_TI1_SetConfig+0x64>
 80088fa:	2300      	movs	r3, #0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d008      	beq.n	8008912 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	f023 0303 	bic.w	r3, r3, #3
 8008906:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4313      	orrs	r3, r2
 800890e:	617b      	str	r3, [r7, #20]
 8008910:	e003      	b.n	800891a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f043 0301 	orr.w	r3, r3, #1
 8008918:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	011b      	lsls	r3, r3, #4
 8008926:	b2db      	uxtb	r3, r3
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	4313      	orrs	r3, r2
 800892c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f023 030a 	bic.w	r3, r3, #10
 8008934:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	f003 030a 	and.w	r3, r3, #10
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	4313      	orrs	r3, r2
 8008940:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	621a      	str	r2, [r3, #32]
}
 800894e:	bf00      	nop
 8008950:	371c      	adds	r7, #28
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	40012c00 	.word	0x40012c00
 8008960:	40000400 	.word	0x40000400
 8008964:	40000800 	.word	0x40000800
 8008968:	40000c00 	.word	0x40000c00
 800896c:	40013400 	.word	0x40013400
 8008970:	40014000 	.word	0x40014000

08008974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6a1b      	ldr	r3, [r3, #32]
 8008984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	f023 0201 	bic.w	r2, r3, #1
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800899e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	011b      	lsls	r3, r3, #4
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f023 030a 	bic.w	r3, r3, #10
 80089b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	621a      	str	r2, [r3, #32]
}
 80089c6:	bf00      	nop
 80089c8:	371c      	adds	r7, #28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b087      	sub	sp, #28
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	60b9      	str	r1, [r7, #8]
 80089dc:	607a      	str	r2, [r7, #4]
 80089de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	f023 0210 	bic.w	r2, r3, #16
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	021b      	lsls	r3, r3, #8
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	031b      	lsls	r3, r3, #12
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a24:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	011b      	lsls	r3, r3, #4
 8008a2a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	621a      	str	r2, [r3, #32]
}
 8008a40:	bf00      	nop
 8008a42:	371c      	adds	r7, #28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	f023 0210 	bic.w	r2, r3, #16
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	031b      	lsls	r3, r3, #12
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	011b      	lsls	r3, r3, #4
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	621a      	str	r2, [r3, #32]
}
 8008aa0:	bf00      	nop
 8008aa2:	371c      	adds	r7, #28
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	69db      	ldr	r3, [r3, #28]
 8008ad0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	f023 0303 	bic.w	r3, r3, #3
 8008ad8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ae8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	011b      	lsls	r3, r3, #4
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008afc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	021b      	lsls	r3, r3, #8
 8008b02:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	621a      	str	r2, [r3, #32]
}
 8008b18:	bf00      	nop
 8008b1a:	371c      	adds	r7, #28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6a1b      	ldr	r3, [r3, #32]
 8008b3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b50:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	021b      	lsls	r3, r3, #8
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b62:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	031b      	lsls	r3, r3, #12
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008b76:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	031b      	lsls	r3, r3, #12
 8008b7c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	621a      	str	r2, [r3, #32]
}
 8008b92:	bf00      	nop
 8008b94:	371c      	adds	r7, #28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b085      	sub	sp, #20
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	f043 0307 	orr.w	r3, r3, #7
 8008bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	609a      	str	r2, [r3, #8]
}
 8008bc8:	bf00      	nop
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
 8008be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	021a      	lsls	r2, r3, #8
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	431a      	orrs	r2, r3
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	609a      	str	r2, [r3, #8]
}
 8008c08:	bf00      	nop
 8008c0a:	371c      	adds	r7, #28
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b087      	sub	sp, #28
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f003 031f 	and.w	r3, r3, #31
 8008c26:	2201      	movs	r2, #1
 8008c28:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6a1a      	ldr	r2, [r3, #32]
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	43db      	mvns	r3, r3
 8008c36:	401a      	ands	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a1a      	ldr	r2, [r3, #32]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	f003 031f 	and.w	r3, r3, #31
 8008c46:	6879      	ldr	r1, [r7, #4]
 8008c48:	fa01 f303 	lsl.w	r3, r1, r3
 8008c4c:	431a      	orrs	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	621a      	str	r2, [r3, #32]
}
 8008c52:	bf00      	nop
 8008c54:	371c      	adds	r7, #28
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
	...

08008c60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d101      	bne.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c74:	2302      	movs	r3, #2
 8008c76:	e068      	b.n	8008d4a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a2e      	ldr	r2, [pc, #184]	; (8008d58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d004      	beq.n	8008cac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a2d      	ldr	r2, [pc, #180]	; (8008d5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d108      	bne.n	8008cbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008cb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a1e      	ldr	r2, [pc, #120]	; (8008d58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d01d      	beq.n	8008d1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cea:	d018      	beq.n	8008d1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a1b      	ldr	r2, [pc, #108]	; (8008d60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d013      	beq.n	8008d1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a1a      	ldr	r2, [pc, #104]	; (8008d64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d00e      	beq.n	8008d1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a18      	ldr	r2, [pc, #96]	; (8008d68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d009      	beq.n	8008d1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a13      	ldr	r2, [pc, #76]	; (8008d5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d004      	beq.n	8008d1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a14      	ldr	r2, [pc, #80]	; (8008d6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d10c      	bne.n	8008d38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	40012c00 	.word	0x40012c00
 8008d5c:	40013400 	.word	0x40013400
 8008d60:	40000400 	.word	0x40000400
 8008d64:	40000800 	.word	0x40000800
 8008d68:	40000c00 	.word	0x40000c00
 8008d6c:	40014000 	.word	0x40014000

08008d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e042      	b.n	8008e44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d106      	bne.n	8008dd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f7f9 fb47 	bl	8002464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2224      	movs	r2, #36	; 0x24
 8008dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f022 0201 	bic.w	r2, r2, #1
 8008dec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d002      	beq.n	8008dfc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fbb4 	bl	8009564 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f8b5 	bl	8008f6c <UART_SetConfig>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d101      	bne.n	8008e0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e01b      	b.n	8008e44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	689a      	ldr	r2, [r3, #8]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f042 0201 	orr.w	r2, r2, #1
 8008e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fc33 	bl	80096a8 <UART_CheckIdleState>
 8008e42:	4603      	mov	r3, r0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08a      	sub	sp, #40	; 0x28
 8008e50:	af02      	add	r7, sp, #8
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	603b      	str	r3, [r7, #0]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e62:	2b20      	cmp	r3, #32
 8008e64:	d17c      	bne.n	8008f60 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d002      	beq.n	8008e72 <HAL_UART_Transmit+0x26>
 8008e6c:	88fb      	ldrh	r3, [r7, #6]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e075      	b.n	8008f62 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2221      	movs	r2, #33	; 0x21
 8008e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e86:	f7f9 ff77 	bl	8002d78 <HAL_GetTick>
 8008e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	88fa      	ldrh	r2, [r7, #6]
 8008e90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	88fa      	ldrh	r2, [r7, #6]
 8008e98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ea4:	d108      	bne.n	8008eb8 <HAL_UART_Transmit+0x6c>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d104      	bne.n	8008eb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	61bb      	str	r3, [r7, #24]
 8008eb6:	e003      	b.n	8008ec0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ec0:	e031      	b.n	8008f26 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	2180      	movs	r1, #128	; 0x80
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 fc95 	bl	80097fc <UART_WaitOnFlagUntilTimeout>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d005      	beq.n	8008ee4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2220      	movs	r2, #32
 8008edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e03e      	b.n	8008f62 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10b      	bne.n	8008f02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	881a      	ldrh	r2, [r3, #0]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ef6:	b292      	uxth	r2, r2
 8008ef8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	3302      	adds	r3, #2
 8008efe:	61bb      	str	r3, [r7, #24]
 8008f00:	e008      	b.n	8008f14 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	781a      	ldrb	r2, [r3, #0]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	b292      	uxth	r2, r2
 8008f0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	3301      	adds	r3, #1
 8008f12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1c7      	bne.n	8008ec2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	2140      	movs	r1, #64	; 0x40
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f000 fc5d 	bl	80097fc <UART_WaitOnFlagUntilTimeout>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d005      	beq.n	8008f54 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e006      	b.n	8008f62 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2220      	movs	r2, #32
 8008f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	e000      	b.n	8008f62 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8008f60:	2302      	movs	r3, #2
  }
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3720      	adds	r7, #32
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f70:	b08c      	sub	sp, #48	; 0x30
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	689a      	ldr	r2, [r3, #8]
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	431a      	orrs	r2, r3
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	4baa      	ldr	r3, [pc, #680]	; (8009244 <UART_SetConfig+0x2d8>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	6812      	ldr	r2, [r2, #0]
 8008fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fa4:	430b      	orrs	r3, r1
 8008fa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a9f      	ldr	r2, [pc, #636]	; (8009248 <UART_SetConfig+0x2dc>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d004      	beq.n	8008fd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008fe2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	6812      	ldr	r2, [r2, #0]
 8008fea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fec:	430b      	orrs	r3, r1
 8008fee:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff6:	f023 010f 	bic.w	r1, r3, #15
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a90      	ldr	r2, [pc, #576]	; (800924c <UART_SetConfig+0x2e0>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d125      	bne.n	800905c <UART_SetConfig+0xf0>
 8009010:	4b8f      	ldr	r3, [pc, #572]	; (8009250 <UART_SetConfig+0x2e4>)
 8009012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	2b03      	cmp	r3, #3
 800901c:	d81a      	bhi.n	8009054 <UART_SetConfig+0xe8>
 800901e:	a201      	add	r2, pc, #4	; (adr r2, 8009024 <UART_SetConfig+0xb8>)
 8009020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009024:	08009035 	.word	0x08009035
 8009028:	08009045 	.word	0x08009045
 800902c:	0800903d 	.word	0x0800903d
 8009030:	0800904d 	.word	0x0800904d
 8009034:	2301      	movs	r3, #1
 8009036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800903a:	e116      	b.n	800926a <UART_SetConfig+0x2fe>
 800903c:	2302      	movs	r3, #2
 800903e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009042:	e112      	b.n	800926a <UART_SetConfig+0x2fe>
 8009044:	2304      	movs	r3, #4
 8009046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800904a:	e10e      	b.n	800926a <UART_SetConfig+0x2fe>
 800904c:	2308      	movs	r3, #8
 800904e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009052:	e10a      	b.n	800926a <UART_SetConfig+0x2fe>
 8009054:	2310      	movs	r3, #16
 8009056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800905a:	e106      	b.n	800926a <UART_SetConfig+0x2fe>
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a7c      	ldr	r2, [pc, #496]	; (8009254 <UART_SetConfig+0x2e8>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d138      	bne.n	80090d8 <UART_SetConfig+0x16c>
 8009066:	4b7a      	ldr	r3, [pc, #488]	; (8009250 <UART_SetConfig+0x2e4>)
 8009068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800906c:	f003 030c 	and.w	r3, r3, #12
 8009070:	2b0c      	cmp	r3, #12
 8009072:	d82d      	bhi.n	80090d0 <UART_SetConfig+0x164>
 8009074:	a201      	add	r2, pc, #4	; (adr r2, 800907c <UART_SetConfig+0x110>)
 8009076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907a:	bf00      	nop
 800907c:	080090b1 	.word	0x080090b1
 8009080:	080090d1 	.word	0x080090d1
 8009084:	080090d1 	.word	0x080090d1
 8009088:	080090d1 	.word	0x080090d1
 800908c:	080090c1 	.word	0x080090c1
 8009090:	080090d1 	.word	0x080090d1
 8009094:	080090d1 	.word	0x080090d1
 8009098:	080090d1 	.word	0x080090d1
 800909c:	080090b9 	.word	0x080090b9
 80090a0:	080090d1 	.word	0x080090d1
 80090a4:	080090d1 	.word	0x080090d1
 80090a8:	080090d1 	.word	0x080090d1
 80090ac:	080090c9 	.word	0x080090c9
 80090b0:	2300      	movs	r3, #0
 80090b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090b6:	e0d8      	b.n	800926a <UART_SetConfig+0x2fe>
 80090b8:	2302      	movs	r3, #2
 80090ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090be:	e0d4      	b.n	800926a <UART_SetConfig+0x2fe>
 80090c0:	2304      	movs	r3, #4
 80090c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090c6:	e0d0      	b.n	800926a <UART_SetConfig+0x2fe>
 80090c8:	2308      	movs	r3, #8
 80090ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090ce:	e0cc      	b.n	800926a <UART_SetConfig+0x2fe>
 80090d0:	2310      	movs	r3, #16
 80090d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090d6:	e0c8      	b.n	800926a <UART_SetConfig+0x2fe>
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a5e      	ldr	r2, [pc, #376]	; (8009258 <UART_SetConfig+0x2ec>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d125      	bne.n	800912e <UART_SetConfig+0x1c2>
 80090e2:	4b5b      	ldr	r3, [pc, #364]	; (8009250 <UART_SetConfig+0x2e4>)
 80090e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80090ec:	2b30      	cmp	r3, #48	; 0x30
 80090ee:	d016      	beq.n	800911e <UART_SetConfig+0x1b2>
 80090f0:	2b30      	cmp	r3, #48	; 0x30
 80090f2:	d818      	bhi.n	8009126 <UART_SetConfig+0x1ba>
 80090f4:	2b20      	cmp	r3, #32
 80090f6:	d00a      	beq.n	800910e <UART_SetConfig+0x1a2>
 80090f8:	2b20      	cmp	r3, #32
 80090fa:	d814      	bhi.n	8009126 <UART_SetConfig+0x1ba>
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <UART_SetConfig+0x19a>
 8009100:	2b10      	cmp	r3, #16
 8009102:	d008      	beq.n	8009116 <UART_SetConfig+0x1aa>
 8009104:	e00f      	b.n	8009126 <UART_SetConfig+0x1ba>
 8009106:	2300      	movs	r3, #0
 8009108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800910c:	e0ad      	b.n	800926a <UART_SetConfig+0x2fe>
 800910e:	2302      	movs	r3, #2
 8009110:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009114:	e0a9      	b.n	800926a <UART_SetConfig+0x2fe>
 8009116:	2304      	movs	r3, #4
 8009118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800911c:	e0a5      	b.n	800926a <UART_SetConfig+0x2fe>
 800911e:	2308      	movs	r3, #8
 8009120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009124:	e0a1      	b.n	800926a <UART_SetConfig+0x2fe>
 8009126:	2310      	movs	r3, #16
 8009128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800912c:	e09d      	b.n	800926a <UART_SetConfig+0x2fe>
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a4a      	ldr	r2, [pc, #296]	; (800925c <UART_SetConfig+0x2f0>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d125      	bne.n	8009184 <UART_SetConfig+0x218>
 8009138:	4b45      	ldr	r3, [pc, #276]	; (8009250 <UART_SetConfig+0x2e4>)
 800913a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800913e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009142:	2bc0      	cmp	r3, #192	; 0xc0
 8009144:	d016      	beq.n	8009174 <UART_SetConfig+0x208>
 8009146:	2bc0      	cmp	r3, #192	; 0xc0
 8009148:	d818      	bhi.n	800917c <UART_SetConfig+0x210>
 800914a:	2b80      	cmp	r3, #128	; 0x80
 800914c:	d00a      	beq.n	8009164 <UART_SetConfig+0x1f8>
 800914e:	2b80      	cmp	r3, #128	; 0x80
 8009150:	d814      	bhi.n	800917c <UART_SetConfig+0x210>
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <UART_SetConfig+0x1f0>
 8009156:	2b40      	cmp	r3, #64	; 0x40
 8009158:	d008      	beq.n	800916c <UART_SetConfig+0x200>
 800915a:	e00f      	b.n	800917c <UART_SetConfig+0x210>
 800915c:	2300      	movs	r3, #0
 800915e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009162:	e082      	b.n	800926a <UART_SetConfig+0x2fe>
 8009164:	2302      	movs	r3, #2
 8009166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800916a:	e07e      	b.n	800926a <UART_SetConfig+0x2fe>
 800916c:	2304      	movs	r3, #4
 800916e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009172:	e07a      	b.n	800926a <UART_SetConfig+0x2fe>
 8009174:	2308      	movs	r3, #8
 8009176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800917a:	e076      	b.n	800926a <UART_SetConfig+0x2fe>
 800917c:	2310      	movs	r3, #16
 800917e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009182:	e072      	b.n	800926a <UART_SetConfig+0x2fe>
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a35      	ldr	r2, [pc, #212]	; (8009260 <UART_SetConfig+0x2f4>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d12a      	bne.n	80091e4 <UART_SetConfig+0x278>
 800918e:	4b30      	ldr	r3, [pc, #192]	; (8009250 <UART_SetConfig+0x2e4>)
 8009190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009198:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800919c:	d01a      	beq.n	80091d4 <UART_SetConfig+0x268>
 800919e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091a2:	d81b      	bhi.n	80091dc <UART_SetConfig+0x270>
 80091a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091a8:	d00c      	beq.n	80091c4 <UART_SetConfig+0x258>
 80091aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091ae:	d815      	bhi.n	80091dc <UART_SetConfig+0x270>
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <UART_SetConfig+0x250>
 80091b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091b8:	d008      	beq.n	80091cc <UART_SetConfig+0x260>
 80091ba:	e00f      	b.n	80091dc <UART_SetConfig+0x270>
 80091bc:	2300      	movs	r3, #0
 80091be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091c2:	e052      	b.n	800926a <UART_SetConfig+0x2fe>
 80091c4:	2302      	movs	r3, #2
 80091c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091ca:	e04e      	b.n	800926a <UART_SetConfig+0x2fe>
 80091cc:	2304      	movs	r3, #4
 80091ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091d2:	e04a      	b.n	800926a <UART_SetConfig+0x2fe>
 80091d4:	2308      	movs	r3, #8
 80091d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091da:	e046      	b.n	800926a <UART_SetConfig+0x2fe>
 80091dc:	2310      	movs	r3, #16
 80091de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091e2:	e042      	b.n	800926a <UART_SetConfig+0x2fe>
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a17      	ldr	r2, [pc, #92]	; (8009248 <UART_SetConfig+0x2dc>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d13a      	bne.n	8009264 <UART_SetConfig+0x2f8>
 80091ee:	4b18      	ldr	r3, [pc, #96]	; (8009250 <UART_SetConfig+0x2e4>)
 80091f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80091f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091fc:	d01a      	beq.n	8009234 <UART_SetConfig+0x2c8>
 80091fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009202:	d81b      	bhi.n	800923c <UART_SetConfig+0x2d0>
 8009204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009208:	d00c      	beq.n	8009224 <UART_SetConfig+0x2b8>
 800920a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800920e:	d815      	bhi.n	800923c <UART_SetConfig+0x2d0>
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <UART_SetConfig+0x2b0>
 8009214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009218:	d008      	beq.n	800922c <UART_SetConfig+0x2c0>
 800921a:	e00f      	b.n	800923c <UART_SetConfig+0x2d0>
 800921c:	2300      	movs	r3, #0
 800921e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009222:	e022      	b.n	800926a <UART_SetConfig+0x2fe>
 8009224:	2302      	movs	r3, #2
 8009226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800922a:	e01e      	b.n	800926a <UART_SetConfig+0x2fe>
 800922c:	2304      	movs	r3, #4
 800922e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009232:	e01a      	b.n	800926a <UART_SetConfig+0x2fe>
 8009234:	2308      	movs	r3, #8
 8009236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800923a:	e016      	b.n	800926a <UART_SetConfig+0x2fe>
 800923c:	2310      	movs	r3, #16
 800923e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009242:	e012      	b.n	800926a <UART_SetConfig+0x2fe>
 8009244:	cfff69f3 	.word	0xcfff69f3
 8009248:	40008000 	.word	0x40008000
 800924c:	40013800 	.word	0x40013800
 8009250:	40021000 	.word	0x40021000
 8009254:	40004400 	.word	0x40004400
 8009258:	40004800 	.word	0x40004800
 800925c:	40004c00 	.word	0x40004c00
 8009260:	40005000 	.word	0x40005000
 8009264:	2310      	movs	r3, #16
 8009266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4aae      	ldr	r2, [pc, #696]	; (8009528 <UART_SetConfig+0x5bc>)
 8009270:	4293      	cmp	r3, r2
 8009272:	f040 8097 	bne.w	80093a4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009276:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800927a:	2b08      	cmp	r3, #8
 800927c:	d823      	bhi.n	80092c6 <UART_SetConfig+0x35a>
 800927e:	a201      	add	r2, pc, #4	; (adr r2, 8009284 <UART_SetConfig+0x318>)
 8009280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009284:	080092a9 	.word	0x080092a9
 8009288:	080092c7 	.word	0x080092c7
 800928c:	080092b1 	.word	0x080092b1
 8009290:	080092c7 	.word	0x080092c7
 8009294:	080092b7 	.word	0x080092b7
 8009298:	080092c7 	.word	0x080092c7
 800929c:	080092c7 	.word	0x080092c7
 80092a0:	080092c7 	.word	0x080092c7
 80092a4:	080092bf 	.word	0x080092bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092a8:	f7fd f826 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 80092ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80092ae:	e010      	b.n	80092d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092b0:	4b9e      	ldr	r3, [pc, #632]	; (800952c <UART_SetConfig+0x5c0>)
 80092b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80092b4:	e00d      	b.n	80092d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092b6:	f7fc ff87 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 80092ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80092bc:	e009      	b.n	80092d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80092c4:	e005      	b.n	80092d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80092c6:	2300      	movs	r3, #0
 80092c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80092d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 8130 	beq.w	800953a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	4a94      	ldr	r2, [pc, #592]	; (8009530 <UART_SetConfig+0x5c4>)
 80092e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092e4:	461a      	mov	r2, r3
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80092ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	4613      	mov	r3, r2
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	4413      	add	r3, r2
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d305      	bcc.n	800930a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009304:	69ba      	ldr	r2, [r7, #24]
 8009306:	429a      	cmp	r2, r3
 8009308:	d903      	bls.n	8009312 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009310:	e113      	b.n	800953a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	2200      	movs	r2, #0
 8009316:	60bb      	str	r3, [r7, #8]
 8009318:	60fa      	str	r2, [r7, #12]
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931e:	4a84      	ldr	r2, [pc, #528]	; (8009530 <UART_SetConfig+0x5c4>)
 8009320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009324:	b29b      	uxth	r3, r3
 8009326:	2200      	movs	r2, #0
 8009328:	603b      	str	r3, [r7, #0]
 800932a:	607a      	str	r2, [r7, #4]
 800932c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009330:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009334:	f7f7 fca0 	bl	8000c78 <__aeabi_uldivmod>
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	4610      	mov	r0, r2
 800933e:	4619      	mov	r1, r3
 8009340:	f04f 0200 	mov.w	r2, #0
 8009344:	f04f 0300 	mov.w	r3, #0
 8009348:	020b      	lsls	r3, r1, #8
 800934a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800934e:	0202      	lsls	r2, r0, #8
 8009350:	6979      	ldr	r1, [r7, #20]
 8009352:	6849      	ldr	r1, [r1, #4]
 8009354:	0849      	lsrs	r1, r1, #1
 8009356:	2000      	movs	r0, #0
 8009358:	460c      	mov	r4, r1
 800935a:	4605      	mov	r5, r0
 800935c:	eb12 0804 	adds.w	r8, r2, r4
 8009360:	eb43 0905 	adc.w	r9, r3, r5
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	469a      	mov	sl, r3
 800936c:	4693      	mov	fp, r2
 800936e:	4652      	mov	r2, sl
 8009370:	465b      	mov	r3, fp
 8009372:	4640      	mov	r0, r8
 8009374:	4649      	mov	r1, r9
 8009376:	f7f7 fc7f 	bl	8000c78 <__aeabi_uldivmod>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	4613      	mov	r3, r2
 8009380:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009382:	6a3b      	ldr	r3, [r7, #32]
 8009384:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009388:	d308      	bcc.n	800939c <UART_SetConfig+0x430>
 800938a:	6a3b      	ldr	r3, [r7, #32]
 800938c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009390:	d204      	bcs.n	800939c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6a3a      	ldr	r2, [r7, #32]
 8009398:	60da      	str	r2, [r3, #12]
 800939a:	e0ce      	b.n	800953a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80093a2:	e0ca      	b.n	800953a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	69db      	ldr	r3, [r3, #28]
 80093a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093ac:	d166      	bne.n	800947c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80093ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80093b2:	2b08      	cmp	r3, #8
 80093b4:	d827      	bhi.n	8009406 <UART_SetConfig+0x49a>
 80093b6:	a201      	add	r2, pc, #4	; (adr r2, 80093bc <UART_SetConfig+0x450>)
 80093b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093bc:	080093e1 	.word	0x080093e1
 80093c0:	080093e9 	.word	0x080093e9
 80093c4:	080093f1 	.word	0x080093f1
 80093c8:	08009407 	.word	0x08009407
 80093cc:	080093f7 	.word	0x080093f7
 80093d0:	08009407 	.word	0x08009407
 80093d4:	08009407 	.word	0x08009407
 80093d8:	08009407 	.word	0x08009407
 80093dc:	080093ff 	.word	0x080093ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093e0:	f7fc ff8a 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 80093e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093e6:	e014      	b.n	8009412 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093e8:	f7fc ff9c 	bl	8006324 <HAL_RCC_GetPCLK2Freq>
 80093ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093ee:	e010      	b.n	8009412 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093f0:	4b4e      	ldr	r3, [pc, #312]	; (800952c <UART_SetConfig+0x5c0>)
 80093f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80093f4:	e00d      	b.n	8009412 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093f6:	f7fc fee7 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 80093fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093fc:	e009      	b.n	8009412 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009402:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009404:	e005      	b.n	8009412 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009406:	2300      	movs	r3, #0
 8009408:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009410:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 8090 	beq.w	800953a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941e:	4a44      	ldr	r2, [pc, #272]	; (8009530 <UART_SetConfig+0x5c4>)
 8009420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009424:	461a      	mov	r2, r3
 8009426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009428:	fbb3 f3f2 	udiv	r3, r3, r2
 800942c:	005a      	lsls	r2, r3, #1
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	085b      	lsrs	r3, r3, #1
 8009434:	441a      	add	r2, r3
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	fbb2 f3f3 	udiv	r3, r2, r3
 800943e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009440:	6a3b      	ldr	r3, [r7, #32]
 8009442:	2b0f      	cmp	r3, #15
 8009444:	d916      	bls.n	8009474 <UART_SetConfig+0x508>
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800944c:	d212      	bcs.n	8009474 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	b29b      	uxth	r3, r3
 8009452:	f023 030f 	bic.w	r3, r3, #15
 8009456:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	085b      	lsrs	r3, r3, #1
 800945c:	b29b      	uxth	r3, r3
 800945e:	f003 0307 	and.w	r3, r3, #7
 8009462:	b29a      	uxth	r2, r3
 8009464:	8bfb      	ldrh	r3, [r7, #30]
 8009466:	4313      	orrs	r3, r2
 8009468:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	8bfa      	ldrh	r2, [r7, #30]
 8009470:	60da      	str	r2, [r3, #12]
 8009472:	e062      	b.n	800953a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800947a:	e05e      	b.n	800953a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800947c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009480:	2b08      	cmp	r3, #8
 8009482:	d828      	bhi.n	80094d6 <UART_SetConfig+0x56a>
 8009484:	a201      	add	r2, pc, #4	; (adr r2, 800948c <UART_SetConfig+0x520>)
 8009486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948a:	bf00      	nop
 800948c:	080094b1 	.word	0x080094b1
 8009490:	080094b9 	.word	0x080094b9
 8009494:	080094c1 	.word	0x080094c1
 8009498:	080094d7 	.word	0x080094d7
 800949c:	080094c7 	.word	0x080094c7
 80094a0:	080094d7 	.word	0x080094d7
 80094a4:	080094d7 	.word	0x080094d7
 80094a8:	080094d7 	.word	0x080094d7
 80094ac:	080094cf 	.word	0x080094cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094b0:	f7fc ff22 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 80094b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094b6:	e014      	b.n	80094e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094b8:	f7fc ff34 	bl	8006324 <HAL_RCC_GetPCLK2Freq>
 80094bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094be:	e010      	b.n	80094e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094c0:	4b1a      	ldr	r3, [pc, #104]	; (800952c <UART_SetConfig+0x5c0>)
 80094c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80094c4:	e00d      	b.n	80094e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094c6:	f7fc fe7f 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 80094ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094cc:	e009      	b.n	80094e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80094d4:	e005      	b.n	80094e2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80094d6:	2300      	movs	r3, #0
 80094d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80094e0:	bf00      	nop
    }

    if (pclk != 0U)
 80094e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d028      	beq.n	800953a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ec:	4a10      	ldr	r2, [pc, #64]	; (8009530 <UART_SetConfig+0x5c4>)
 80094ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094f2:	461a      	mov	r2, r3
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	085b      	lsrs	r3, r3, #1
 8009500:	441a      	add	r2, r3
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	fbb2 f3f3 	udiv	r3, r2, r3
 800950a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800950c:	6a3b      	ldr	r3, [r7, #32]
 800950e:	2b0f      	cmp	r3, #15
 8009510:	d910      	bls.n	8009534 <UART_SetConfig+0x5c8>
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009518:	d20c      	bcs.n	8009534 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	b29a      	uxth	r2, r3
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	60da      	str	r2, [r3, #12]
 8009524:	e009      	b.n	800953a <UART_SetConfig+0x5ce>
 8009526:	bf00      	nop
 8009528:	40008000 	.word	0x40008000
 800952c:	00f42400 	.word	0x00f42400
 8009530:	0800c740 	.word	0x0800c740
      }
      else
      {
        ret = HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2201      	movs	r2, #1
 800953e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2201      	movs	r2, #1
 8009546:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2200      	movs	r2, #0
 800954e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	2200      	movs	r2, #0
 8009554:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009556:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800955a:	4618      	mov	r0, r3
 800955c:	3730      	adds	r7, #48	; 0x30
 800955e:	46bd      	mov	sp, r7
 8009560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009570:	f003 0308 	and.w	r3, r3, #8
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00a      	beq.n	800958e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b4:	f003 0302 	and.w	r3, r3, #2
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00a      	beq.n	80095d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	430a      	orrs	r2, r1
 80095d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d6:	f003 0304 	and.w	r3, r3, #4
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00a      	beq.n	80095f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	430a      	orrs	r2, r1
 80095f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f8:	f003 0310 	and.w	r3, r3, #16
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00a      	beq.n	8009616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	430a      	orrs	r2, r1
 8009614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961a:	f003 0320 	and.w	r3, r3, #32
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00a      	beq.n	8009638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	430a      	orrs	r2, r1
 8009636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009640:	2b00      	cmp	r3, #0
 8009642:	d01a      	beq.n	800967a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800965e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009662:	d10a      	bne.n	800967a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	430a      	orrs	r2, r1
 8009678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00a      	beq.n	800969c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	430a      	orrs	r2, r1
 800969a:	605a      	str	r2, [r3, #4]
  }
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b098      	sub	sp, #96	; 0x60
 80096ac:	af02      	add	r7, sp, #8
 80096ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096b8:	f7f9 fb5e 	bl	8002d78 <HAL_GetTick>
 80096bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0308 	and.w	r3, r3, #8
 80096c8:	2b08      	cmp	r3, #8
 80096ca:	d12f      	bne.n	800972c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096d4:	2200      	movs	r2, #0
 80096d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f88e 	bl	80097fc <UART_WaitOnFlagUntilTimeout>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d022      	beq.n	800972c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ee:	e853 3f00 	ldrex	r3, [r3]
 80096f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096fa:	653b      	str	r3, [r7, #80]	; 0x50
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009704:	647b      	str	r3, [r7, #68]	; 0x44
 8009706:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009708:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800970a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800970c:	e841 2300 	strex	r3, r2, [r1]
 8009710:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1e6      	bne.n	80096e6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2220      	movs	r2, #32
 800971c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e063      	b.n	80097f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 0304 	and.w	r3, r3, #4
 8009736:	2b04      	cmp	r3, #4
 8009738:	d149      	bne.n	80097ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800973a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009742:	2200      	movs	r2, #0
 8009744:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f857 	bl	80097fc <UART_WaitOnFlagUntilTimeout>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d03c      	beq.n	80097ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	e853 3f00 	ldrex	r3, [r3]
 8009760:	623b      	str	r3, [r7, #32]
   return(result);
 8009762:	6a3b      	ldr	r3, [r7, #32]
 8009764:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009768:	64fb      	str	r3, [r7, #76]	; 0x4c
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009772:	633b      	str	r3, [r7, #48]	; 0x30
 8009774:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800977a:	e841 2300 	strex	r3, r2, [r1]
 800977e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1e6      	bne.n	8009754 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3308      	adds	r3, #8
 800978c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	e853 3f00 	ldrex	r3, [r3]
 8009794:	60fb      	str	r3, [r7, #12]
   return(result);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f023 0301 	bic.w	r3, r3, #1
 800979c:	64bb      	str	r3, [r7, #72]	; 0x48
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3308      	adds	r3, #8
 80097a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097a6:	61fa      	str	r2, [r7, #28]
 80097a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097aa:	69b9      	ldr	r1, [r7, #24]
 80097ac:	69fa      	ldr	r2, [r7, #28]
 80097ae:	e841 2300 	strex	r3, r2, [r1]
 80097b2:	617b      	str	r3, [r7, #20]
   return(result);
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1e5      	bne.n	8009786 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2220      	movs	r2, #32
 80097be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097ca:	2303      	movs	r3, #3
 80097cc:	e012      	b.n	80097f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2220      	movs	r2, #32
 80097d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2220      	movs	r2, #32
 80097da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3758      	adds	r7, #88	; 0x58
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	603b      	str	r3, [r7, #0]
 8009808:	4613      	mov	r3, r2
 800980a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800980c:	e049      	b.n	80098a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009814:	d045      	beq.n	80098a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009816:	f7f9 faaf 	bl	8002d78 <HAL_GetTick>
 800981a:	4602      	mov	r2, r0
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	69ba      	ldr	r2, [r7, #24]
 8009822:	429a      	cmp	r2, r3
 8009824:	d302      	bcc.n	800982c <UART_WaitOnFlagUntilTimeout+0x30>
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d101      	bne.n	8009830 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800982c:	2303      	movs	r3, #3
 800982e:	e048      	b.n	80098c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 0304 	and.w	r3, r3, #4
 800983a:	2b00      	cmp	r3, #0
 800983c:	d031      	beq.n	80098a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69db      	ldr	r3, [r3, #28]
 8009844:	f003 0308 	and.w	r3, r3, #8
 8009848:	2b08      	cmp	r3, #8
 800984a:	d110      	bne.n	800986e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2208      	movs	r2, #8
 8009852:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 f838 	bl	80098ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2208      	movs	r2, #8
 800985e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e029      	b.n	80098c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	69db      	ldr	r3, [r3, #28]
 8009874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800987c:	d111      	bne.n	80098a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009886:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f000 f81e 	bl	80098ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2220      	movs	r2, #32
 8009892:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	e00f      	b.n	80098c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	69da      	ldr	r2, [r3, #28]
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	4013      	ands	r3, r2
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	bf0c      	ite	eq
 80098b2:	2301      	moveq	r3, #1
 80098b4:	2300      	movne	r3, #0
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	461a      	mov	r2, r3
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d0a6      	beq.n	800980e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098ca:	b480      	push	{r7}
 80098cc:	b095      	sub	sp, #84	; 0x54
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098da:	e853 3f00 	ldrex	r3, [r3]
 80098de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	461a      	mov	r2, r3
 80098ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098f0:	643b      	str	r3, [r7, #64]	; 0x40
 80098f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098f8:	e841 2300 	strex	r3, r2, [r1]
 80098fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1e6      	bne.n	80098d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	3308      	adds	r3, #8
 800990a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	e853 3f00 	ldrex	r3, [r3]
 8009912:	61fb      	str	r3, [r7, #28]
   return(result);
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800991a:	f023 0301 	bic.w	r3, r3, #1
 800991e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3308      	adds	r3, #8
 8009926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009928:	62fa      	str	r2, [r7, #44]	; 0x2c
 800992a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800992e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009930:	e841 2300 	strex	r3, r2, [r1]
 8009934:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1e3      	bne.n	8009904 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009940:	2b01      	cmp	r3, #1
 8009942:	d118      	bne.n	8009976 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	e853 3f00 	ldrex	r3, [r3]
 8009950:	60bb      	str	r3, [r7, #8]
   return(result);
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	f023 0310 	bic.w	r3, r3, #16
 8009958:	647b      	str	r3, [r7, #68]	; 0x44
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009962:	61bb      	str	r3, [r7, #24]
 8009964:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	6979      	ldr	r1, [r7, #20]
 8009968:	69ba      	ldr	r2, [r7, #24]
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	613b      	str	r3, [r7, #16]
   return(result);
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e6      	bne.n	8009944 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2220      	movs	r2, #32
 800997a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	675a      	str	r2, [r3, #116]	; 0x74
}
 800998a:	bf00      	nop
 800998c:	3754      	adds	r7, #84	; 0x54
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009996:	b480      	push	{r7}
 8009998:	b085      	sub	sp, #20
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d101      	bne.n	80099ac <HAL_UARTEx_DisableFifoMode+0x16>
 80099a8:	2302      	movs	r3, #2
 80099aa:	e027      	b.n	80099fc <HAL_UARTEx_DisableFifoMode+0x66>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2224      	movs	r2, #36	; 0x24
 80099b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f022 0201 	bic.w	r2, r2, #1
 80099d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80099da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2220      	movs	r2, #32
 80099ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d101      	bne.n	8009a20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	e02d      	b.n	8009a7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2224      	movs	r2, #36	; 0x24
 8009a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f022 0201 	bic.w	r2, r2, #1
 8009a46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f84f 	bl	8009b00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d101      	bne.n	8009a9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a98:	2302      	movs	r3, #2
 8009a9a:	e02d      	b.n	8009af8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2224      	movs	r2, #36	; 0x24
 8009aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f022 0201 	bic.w	r2, r2, #1
 8009ac2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	430a      	orrs	r2, r1
 8009ad6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f811 	bl	8009b00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2220      	movs	r2, #32
 8009aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d108      	bne.n	8009b22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b20:	e031      	b.n	8009b86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b22:	2308      	movs	r3, #8
 8009b24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b26:	2308      	movs	r3, #8
 8009b28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	0e5b      	lsrs	r3, r3, #25
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	f003 0307 	and.w	r3, r3, #7
 8009b38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	0f5b      	lsrs	r3, r3, #29
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	f003 0307 	and.w	r3, r3, #7
 8009b48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b4a:	7bbb      	ldrb	r3, [r7, #14]
 8009b4c:	7b3a      	ldrb	r2, [r7, #12]
 8009b4e:	4911      	ldr	r1, [pc, #68]	; (8009b94 <UARTEx_SetNbDataToProcess+0x94>)
 8009b50:	5c8a      	ldrb	r2, [r1, r2]
 8009b52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b56:	7b3a      	ldrb	r2, [r7, #12]
 8009b58:	490f      	ldr	r1, [pc, #60]	; (8009b98 <UARTEx_SetNbDataToProcess+0x98>)
 8009b5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
 8009b6a:	7b7a      	ldrb	r2, [r7, #13]
 8009b6c:	4909      	ldr	r1, [pc, #36]	; (8009b94 <UARTEx_SetNbDataToProcess+0x94>)
 8009b6e:	5c8a      	ldrb	r2, [r1, r2]
 8009b70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b74:	7b7a      	ldrb	r2, [r7, #13]
 8009b76:	4908      	ldr	r1, [pc, #32]	; (8009b98 <UARTEx_SetNbDataToProcess+0x98>)
 8009b78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009b86:	bf00      	nop
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	0800c758 	.word	0x0800c758
 8009b98:	0800c760 	.word	0x0800c760

08009b9c <__cvt>:
 8009b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba0:	ec55 4b10 	vmov	r4, r5, d0
 8009ba4:	2d00      	cmp	r5, #0
 8009ba6:	460e      	mov	r6, r1
 8009ba8:	4619      	mov	r1, r3
 8009baa:	462b      	mov	r3, r5
 8009bac:	bfbb      	ittet	lt
 8009bae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009bb2:	461d      	movlt	r5, r3
 8009bb4:	2300      	movge	r3, #0
 8009bb6:	232d      	movlt	r3, #45	; 0x2d
 8009bb8:	700b      	strb	r3, [r1, #0]
 8009bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009bc0:	4691      	mov	r9, r2
 8009bc2:	f023 0820 	bic.w	r8, r3, #32
 8009bc6:	bfbc      	itt	lt
 8009bc8:	4622      	movlt	r2, r4
 8009bca:	4614      	movlt	r4, r2
 8009bcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bd0:	d005      	beq.n	8009bde <__cvt+0x42>
 8009bd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009bd6:	d100      	bne.n	8009bda <__cvt+0x3e>
 8009bd8:	3601      	adds	r6, #1
 8009bda:	2102      	movs	r1, #2
 8009bdc:	e000      	b.n	8009be0 <__cvt+0x44>
 8009bde:	2103      	movs	r1, #3
 8009be0:	ab03      	add	r3, sp, #12
 8009be2:	9301      	str	r3, [sp, #4]
 8009be4:	ab02      	add	r3, sp, #8
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	ec45 4b10 	vmov	d0, r4, r5
 8009bec:	4653      	mov	r3, sl
 8009bee:	4632      	mov	r2, r6
 8009bf0:	f000 ff4a 	bl	800aa88 <_dtoa_r>
 8009bf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009bf8:	4607      	mov	r7, r0
 8009bfa:	d102      	bne.n	8009c02 <__cvt+0x66>
 8009bfc:	f019 0f01 	tst.w	r9, #1
 8009c00:	d022      	beq.n	8009c48 <__cvt+0xac>
 8009c02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c06:	eb07 0906 	add.w	r9, r7, r6
 8009c0a:	d110      	bne.n	8009c2e <__cvt+0x92>
 8009c0c:	783b      	ldrb	r3, [r7, #0]
 8009c0e:	2b30      	cmp	r3, #48	; 0x30
 8009c10:	d10a      	bne.n	8009c28 <__cvt+0x8c>
 8009c12:	2200      	movs	r2, #0
 8009c14:	2300      	movs	r3, #0
 8009c16:	4620      	mov	r0, r4
 8009c18:	4629      	mov	r1, r5
 8009c1a:	f7f6 ff6d 	bl	8000af8 <__aeabi_dcmpeq>
 8009c1e:	b918      	cbnz	r0, 8009c28 <__cvt+0x8c>
 8009c20:	f1c6 0601 	rsb	r6, r6, #1
 8009c24:	f8ca 6000 	str.w	r6, [sl]
 8009c28:	f8da 3000 	ldr.w	r3, [sl]
 8009c2c:	4499      	add	r9, r3
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2300      	movs	r3, #0
 8009c32:	4620      	mov	r0, r4
 8009c34:	4629      	mov	r1, r5
 8009c36:	f7f6 ff5f 	bl	8000af8 <__aeabi_dcmpeq>
 8009c3a:	b108      	cbz	r0, 8009c40 <__cvt+0xa4>
 8009c3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c40:	2230      	movs	r2, #48	; 0x30
 8009c42:	9b03      	ldr	r3, [sp, #12]
 8009c44:	454b      	cmp	r3, r9
 8009c46:	d307      	bcc.n	8009c58 <__cvt+0xbc>
 8009c48:	9b03      	ldr	r3, [sp, #12]
 8009c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c4c:	1bdb      	subs	r3, r3, r7
 8009c4e:	4638      	mov	r0, r7
 8009c50:	6013      	str	r3, [r2, #0]
 8009c52:	b004      	add	sp, #16
 8009c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c58:	1c59      	adds	r1, r3, #1
 8009c5a:	9103      	str	r1, [sp, #12]
 8009c5c:	701a      	strb	r2, [r3, #0]
 8009c5e:	e7f0      	b.n	8009c42 <__cvt+0xa6>

08009c60 <__exponent>:
 8009c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c62:	4603      	mov	r3, r0
 8009c64:	2900      	cmp	r1, #0
 8009c66:	bfb8      	it	lt
 8009c68:	4249      	neglt	r1, r1
 8009c6a:	f803 2b02 	strb.w	r2, [r3], #2
 8009c6e:	bfb4      	ite	lt
 8009c70:	222d      	movlt	r2, #45	; 0x2d
 8009c72:	222b      	movge	r2, #43	; 0x2b
 8009c74:	2909      	cmp	r1, #9
 8009c76:	7042      	strb	r2, [r0, #1]
 8009c78:	dd2a      	ble.n	8009cd0 <__exponent+0x70>
 8009c7a:	f10d 0207 	add.w	r2, sp, #7
 8009c7e:	4617      	mov	r7, r2
 8009c80:	260a      	movs	r6, #10
 8009c82:	4694      	mov	ip, r2
 8009c84:	fb91 f5f6 	sdiv	r5, r1, r6
 8009c88:	fb06 1415 	mls	r4, r6, r5, r1
 8009c8c:	3430      	adds	r4, #48	; 0x30
 8009c8e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009c92:	460c      	mov	r4, r1
 8009c94:	2c63      	cmp	r4, #99	; 0x63
 8009c96:	f102 32ff 	add.w	r2, r2, #4294967295
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	dcf1      	bgt.n	8009c82 <__exponent+0x22>
 8009c9e:	3130      	adds	r1, #48	; 0x30
 8009ca0:	f1ac 0402 	sub.w	r4, ip, #2
 8009ca4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009ca8:	1c41      	adds	r1, r0, #1
 8009caa:	4622      	mov	r2, r4
 8009cac:	42ba      	cmp	r2, r7
 8009cae:	d30a      	bcc.n	8009cc6 <__exponent+0x66>
 8009cb0:	f10d 0209 	add.w	r2, sp, #9
 8009cb4:	eba2 020c 	sub.w	r2, r2, ip
 8009cb8:	42bc      	cmp	r4, r7
 8009cba:	bf88      	it	hi
 8009cbc:	2200      	movhi	r2, #0
 8009cbe:	4413      	add	r3, r2
 8009cc0:	1a18      	subs	r0, r3, r0
 8009cc2:	b003      	add	sp, #12
 8009cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cc6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009cca:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009cce:	e7ed      	b.n	8009cac <__exponent+0x4c>
 8009cd0:	2330      	movs	r3, #48	; 0x30
 8009cd2:	3130      	adds	r1, #48	; 0x30
 8009cd4:	7083      	strb	r3, [r0, #2]
 8009cd6:	70c1      	strb	r1, [r0, #3]
 8009cd8:	1d03      	adds	r3, r0, #4
 8009cda:	e7f1      	b.n	8009cc0 <__exponent+0x60>

08009cdc <_printf_float>:
 8009cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce0:	ed2d 8b02 	vpush	{d8}
 8009ce4:	b08d      	sub	sp, #52	; 0x34
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009cec:	4616      	mov	r6, r2
 8009cee:	461f      	mov	r7, r3
 8009cf0:	4605      	mov	r5, r0
 8009cf2:	f000 fdc9 	bl	800a888 <_localeconv_r>
 8009cf6:	f8d0 a000 	ldr.w	sl, [r0]
 8009cfa:	4650      	mov	r0, sl
 8009cfc:	f7f6 fad0 	bl	80002a0 <strlen>
 8009d00:	2300      	movs	r3, #0
 8009d02:	930a      	str	r3, [sp, #40]	; 0x28
 8009d04:	6823      	ldr	r3, [r4, #0]
 8009d06:	9305      	str	r3, [sp, #20]
 8009d08:	f8d8 3000 	ldr.w	r3, [r8]
 8009d0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009d10:	3307      	adds	r3, #7
 8009d12:	f023 0307 	bic.w	r3, r3, #7
 8009d16:	f103 0208 	add.w	r2, r3, #8
 8009d1a:	f8c8 2000 	str.w	r2, [r8]
 8009d1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d26:	9307      	str	r3, [sp, #28]
 8009d28:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d2c:	ee08 0a10 	vmov	s16, r0
 8009d30:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009d34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d38:	4b9e      	ldr	r3, [pc, #632]	; (8009fb4 <_printf_float+0x2d8>)
 8009d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3e:	f7f6 ff0d 	bl	8000b5c <__aeabi_dcmpun>
 8009d42:	bb88      	cbnz	r0, 8009da8 <_printf_float+0xcc>
 8009d44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d48:	4b9a      	ldr	r3, [pc, #616]	; (8009fb4 <_printf_float+0x2d8>)
 8009d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d4e:	f7f6 fee7 	bl	8000b20 <__aeabi_dcmple>
 8009d52:	bb48      	cbnz	r0, 8009da8 <_printf_float+0xcc>
 8009d54:	2200      	movs	r2, #0
 8009d56:	2300      	movs	r3, #0
 8009d58:	4640      	mov	r0, r8
 8009d5a:	4649      	mov	r1, r9
 8009d5c:	f7f6 fed6 	bl	8000b0c <__aeabi_dcmplt>
 8009d60:	b110      	cbz	r0, 8009d68 <_printf_float+0x8c>
 8009d62:	232d      	movs	r3, #45	; 0x2d
 8009d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d68:	4a93      	ldr	r2, [pc, #588]	; (8009fb8 <_printf_float+0x2dc>)
 8009d6a:	4b94      	ldr	r3, [pc, #592]	; (8009fbc <_printf_float+0x2e0>)
 8009d6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d70:	bf94      	ite	ls
 8009d72:	4690      	movls	r8, r2
 8009d74:	4698      	movhi	r8, r3
 8009d76:	2303      	movs	r3, #3
 8009d78:	6123      	str	r3, [r4, #16]
 8009d7a:	9b05      	ldr	r3, [sp, #20]
 8009d7c:	f023 0304 	bic.w	r3, r3, #4
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	f04f 0900 	mov.w	r9, #0
 8009d86:	9700      	str	r7, [sp, #0]
 8009d88:	4633      	mov	r3, r6
 8009d8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f000 f9da 	bl	800a148 <_printf_common>
 8009d94:	3001      	adds	r0, #1
 8009d96:	f040 8090 	bne.w	8009eba <_printf_float+0x1de>
 8009d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9e:	b00d      	add	sp, #52	; 0x34
 8009da0:	ecbd 8b02 	vpop	{d8}
 8009da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da8:	4642      	mov	r2, r8
 8009daa:	464b      	mov	r3, r9
 8009dac:	4640      	mov	r0, r8
 8009dae:	4649      	mov	r1, r9
 8009db0:	f7f6 fed4 	bl	8000b5c <__aeabi_dcmpun>
 8009db4:	b140      	cbz	r0, 8009dc8 <_printf_float+0xec>
 8009db6:	464b      	mov	r3, r9
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	bfbc      	itt	lt
 8009dbc:	232d      	movlt	r3, #45	; 0x2d
 8009dbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009dc2:	4a7f      	ldr	r2, [pc, #508]	; (8009fc0 <_printf_float+0x2e4>)
 8009dc4:	4b7f      	ldr	r3, [pc, #508]	; (8009fc4 <_printf_float+0x2e8>)
 8009dc6:	e7d1      	b.n	8009d6c <_printf_float+0x90>
 8009dc8:	6863      	ldr	r3, [r4, #4]
 8009dca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009dce:	9206      	str	r2, [sp, #24]
 8009dd0:	1c5a      	adds	r2, r3, #1
 8009dd2:	d13f      	bne.n	8009e54 <_printf_float+0x178>
 8009dd4:	2306      	movs	r3, #6
 8009dd6:	6063      	str	r3, [r4, #4]
 8009dd8:	9b05      	ldr	r3, [sp, #20]
 8009dda:	6861      	ldr	r1, [r4, #4]
 8009ddc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009de0:	2300      	movs	r3, #0
 8009de2:	9303      	str	r3, [sp, #12]
 8009de4:	ab0a      	add	r3, sp, #40	; 0x28
 8009de6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009dea:	ab09      	add	r3, sp, #36	; 0x24
 8009dec:	ec49 8b10 	vmov	d0, r8, r9
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	6022      	str	r2, [r4, #0]
 8009df4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009df8:	4628      	mov	r0, r5
 8009dfa:	f7ff fecf 	bl	8009b9c <__cvt>
 8009dfe:	9b06      	ldr	r3, [sp, #24]
 8009e00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e02:	2b47      	cmp	r3, #71	; 0x47
 8009e04:	4680      	mov	r8, r0
 8009e06:	d108      	bne.n	8009e1a <_printf_float+0x13e>
 8009e08:	1cc8      	adds	r0, r1, #3
 8009e0a:	db02      	blt.n	8009e12 <_printf_float+0x136>
 8009e0c:	6863      	ldr	r3, [r4, #4]
 8009e0e:	4299      	cmp	r1, r3
 8009e10:	dd41      	ble.n	8009e96 <_printf_float+0x1ba>
 8009e12:	f1ab 0302 	sub.w	r3, fp, #2
 8009e16:	fa5f fb83 	uxtb.w	fp, r3
 8009e1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e1e:	d820      	bhi.n	8009e62 <_printf_float+0x186>
 8009e20:	3901      	subs	r1, #1
 8009e22:	465a      	mov	r2, fp
 8009e24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e28:	9109      	str	r1, [sp, #36]	; 0x24
 8009e2a:	f7ff ff19 	bl	8009c60 <__exponent>
 8009e2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e30:	1813      	adds	r3, r2, r0
 8009e32:	2a01      	cmp	r2, #1
 8009e34:	4681      	mov	r9, r0
 8009e36:	6123      	str	r3, [r4, #16]
 8009e38:	dc02      	bgt.n	8009e40 <_printf_float+0x164>
 8009e3a:	6822      	ldr	r2, [r4, #0]
 8009e3c:	07d2      	lsls	r2, r2, #31
 8009e3e:	d501      	bpl.n	8009e44 <_printf_float+0x168>
 8009e40:	3301      	adds	r3, #1
 8009e42:	6123      	str	r3, [r4, #16]
 8009e44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d09c      	beq.n	8009d86 <_printf_float+0xaa>
 8009e4c:	232d      	movs	r3, #45	; 0x2d
 8009e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e52:	e798      	b.n	8009d86 <_printf_float+0xaa>
 8009e54:	9a06      	ldr	r2, [sp, #24]
 8009e56:	2a47      	cmp	r2, #71	; 0x47
 8009e58:	d1be      	bne.n	8009dd8 <_printf_float+0xfc>
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1bc      	bne.n	8009dd8 <_printf_float+0xfc>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e7b9      	b.n	8009dd6 <_printf_float+0xfa>
 8009e62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e66:	d118      	bne.n	8009e9a <_printf_float+0x1be>
 8009e68:	2900      	cmp	r1, #0
 8009e6a:	6863      	ldr	r3, [r4, #4]
 8009e6c:	dd0b      	ble.n	8009e86 <_printf_float+0x1aa>
 8009e6e:	6121      	str	r1, [r4, #16]
 8009e70:	b913      	cbnz	r3, 8009e78 <_printf_float+0x19c>
 8009e72:	6822      	ldr	r2, [r4, #0]
 8009e74:	07d0      	lsls	r0, r2, #31
 8009e76:	d502      	bpl.n	8009e7e <_printf_float+0x1a2>
 8009e78:	3301      	adds	r3, #1
 8009e7a:	440b      	add	r3, r1
 8009e7c:	6123      	str	r3, [r4, #16]
 8009e7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e80:	f04f 0900 	mov.w	r9, #0
 8009e84:	e7de      	b.n	8009e44 <_printf_float+0x168>
 8009e86:	b913      	cbnz	r3, 8009e8e <_printf_float+0x1b2>
 8009e88:	6822      	ldr	r2, [r4, #0]
 8009e8a:	07d2      	lsls	r2, r2, #31
 8009e8c:	d501      	bpl.n	8009e92 <_printf_float+0x1b6>
 8009e8e:	3302      	adds	r3, #2
 8009e90:	e7f4      	b.n	8009e7c <_printf_float+0x1a0>
 8009e92:	2301      	movs	r3, #1
 8009e94:	e7f2      	b.n	8009e7c <_printf_float+0x1a0>
 8009e96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e9c:	4299      	cmp	r1, r3
 8009e9e:	db05      	blt.n	8009eac <_printf_float+0x1d0>
 8009ea0:	6823      	ldr	r3, [r4, #0]
 8009ea2:	6121      	str	r1, [r4, #16]
 8009ea4:	07d8      	lsls	r0, r3, #31
 8009ea6:	d5ea      	bpl.n	8009e7e <_printf_float+0x1a2>
 8009ea8:	1c4b      	adds	r3, r1, #1
 8009eaa:	e7e7      	b.n	8009e7c <_printf_float+0x1a0>
 8009eac:	2900      	cmp	r1, #0
 8009eae:	bfd4      	ite	le
 8009eb0:	f1c1 0202 	rsble	r2, r1, #2
 8009eb4:	2201      	movgt	r2, #1
 8009eb6:	4413      	add	r3, r2
 8009eb8:	e7e0      	b.n	8009e7c <_printf_float+0x1a0>
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	055a      	lsls	r2, r3, #21
 8009ebe:	d407      	bmi.n	8009ed0 <_printf_float+0x1f4>
 8009ec0:	6923      	ldr	r3, [r4, #16]
 8009ec2:	4642      	mov	r2, r8
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	47b8      	blx	r7
 8009eca:	3001      	adds	r0, #1
 8009ecc:	d12c      	bne.n	8009f28 <_printf_float+0x24c>
 8009ece:	e764      	b.n	8009d9a <_printf_float+0xbe>
 8009ed0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ed4:	f240 80e0 	bls.w	800a098 <_printf_float+0x3bc>
 8009ed8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009edc:	2200      	movs	r2, #0
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f7f6 fe0a 	bl	8000af8 <__aeabi_dcmpeq>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d034      	beq.n	8009f52 <_printf_float+0x276>
 8009ee8:	4a37      	ldr	r2, [pc, #220]	; (8009fc8 <_printf_float+0x2ec>)
 8009eea:	2301      	movs	r3, #1
 8009eec:	4631      	mov	r1, r6
 8009eee:	4628      	mov	r0, r5
 8009ef0:	47b8      	blx	r7
 8009ef2:	3001      	adds	r0, #1
 8009ef4:	f43f af51 	beq.w	8009d9a <_printf_float+0xbe>
 8009ef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009efc:	429a      	cmp	r2, r3
 8009efe:	db02      	blt.n	8009f06 <_printf_float+0x22a>
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	07d8      	lsls	r0, r3, #31
 8009f04:	d510      	bpl.n	8009f28 <_printf_float+0x24c>
 8009f06:	ee18 3a10 	vmov	r3, s16
 8009f0a:	4652      	mov	r2, sl
 8009f0c:	4631      	mov	r1, r6
 8009f0e:	4628      	mov	r0, r5
 8009f10:	47b8      	blx	r7
 8009f12:	3001      	adds	r0, #1
 8009f14:	f43f af41 	beq.w	8009d9a <_printf_float+0xbe>
 8009f18:	f04f 0800 	mov.w	r8, #0
 8009f1c:	f104 091a 	add.w	r9, r4, #26
 8009f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f22:	3b01      	subs	r3, #1
 8009f24:	4543      	cmp	r3, r8
 8009f26:	dc09      	bgt.n	8009f3c <_printf_float+0x260>
 8009f28:	6823      	ldr	r3, [r4, #0]
 8009f2a:	079b      	lsls	r3, r3, #30
 8009f2c:	f100 8107 	bmi.w	800a13e <_printf_float+0x462>
 8009f30:	68e0      	ldr	r0, [r4, #12]
 8009f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f34:	4298      	cmp	r0, r3
 8009f36:	bfb8      	it	lt
 8009f38:	4618      	movlt	r0, r3
 8009f3a:	e730      	b.n	8009d9e <_printf_float+0xc2>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	464a      	mov	r2, r9
 8009f40:	4631      	mov	r1, r6
 8009f42:	4628      	mov	r0, r5
 8009f44:	47b8      	blx	r7
 8009f46:	3001      	adds	r0, #1
 8009f48:	f43f af27 	beq.w	8009d9a <_printf_float+0xbe>
 8009f4c:	f108 0801 	add.w	r8, r8, #1
 8009f50:	e7e6      	b.n	8009f20 <_printf_float+0x244>
 8009f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	dc39      	bgt.n	8009fcc <_printf_float+0x2f0>
 8009f58:	4a1b      	ldr	r2, [pc, #108]	; (8009fc8 <_printf_float+0x2ec>)
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	4631      	mov	r1, r6
 8009f5e:	4628      	mov	r0, r5
 8009f60:	47b8      	blx	r7
 8009f62:	3001      	adds	r0, #1
 8009f64:	f43f af19 	beq.w	8009d9a <_printf_float+0xbe>
 8009f68:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	d102      	bne.n	8009f76 <_printf_float+0x29a>
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	07d9      	lsls	r1, r3, #31
 8009f74:	d5d8      	bpl.n	8009f28 <_printf_float+0x24c>
 8009f76:	ee18 3a10 	vmov	r3, s16
 8009f7a:	4652      	mov	r2, sl
 8009f7c:	4631      	mov	r1, r6
 8009f7e:	4628      	mov	r0, r5
 8009f80:	47b8      	blx	r7
 8009f82:	3001      	adds	r0, #1
 8009f84:	f43f af09 	beq.w	8009d9a <_printf_float+0xbe>
 8009f88:	f04f 0900 	mov.w	r9, #0
 8009f8c:	f104 0a1a 	add.w	sl, r4, #26
 8009f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f92:	425b      	negs	r3, r3
 8009f94:	454b      	cmp	r3, r9
 8009f96:	dc01      	bgt.n	8009f9c <_printf_float+0x2c0>
 8009f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f9a:	e792      	b.n	8009ec2 <_printf_float+0x1e6>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	4652      	mov	r2, sl
 8009fa0:	4631      	mov	r1, r6
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	47b8      	blx	r7
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	f43f aef7 	beq.w	8009d9a <_printf_float+0xbe>
 8009fac:	f109 0901 	add.w	r9, r9, #1
 8009fb0:	e7ee      	b.n	8009f90 <_printf_float+0x2b4>
 8009fb2:	bf00      	nop
 8009fb4:	7fefffff 	.word	0x7fefffff
 8009fb8:	0800c768 	.word	0x0800c768
 8009fbc:	0800c76c 	.word	0x0800c76c
 8009fc0:	0800c770 	.word	0x0800c770
 8009fc4:	0800c774 	.word	0x0800c774
 8009fc8:	0800c778 	.word	0x0800c778
 8009fcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	bfa8      	it	ge
 8009fd4:	461a      	movge	r2, r3
 8009fd6:	2a00      	cmp	r2, #0
 8009fd8:	4691      	mov	r9, r2
 8009fda:	dc37      	bgt.n	800a04c <_printf_float+0x370>
 8009fdc:	f04f 0b00 	mov.w	fp, #0
 8009fe0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fe4:	f104 021a 	add.w	r2, r4, #26
 8009fe8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fea:	9305      	str	r3, [sp, #20]
 8009fec:	eba3 0309 	sub.w	r3, r3, r9
 8009ff0:	455b      	cmp	r3, fp
 8009ff2:	dc33      	bgt.n	800a05c <_printf_float+0x380>
 8009ff4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	db3b      	blt.n	800a074 <_printf_float+0x398>
 8009ffc:	6823      	ldr	r3, [r4, #0]
 8009ffe:	07da      	lsls	r2, r3, #31
 800a000:	d438      	bmi.n	800a074 <_printf_float+0x398>
 800a002:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a006:	eba2 0903 	sub.w	r9, r2, r3
 800a00a:	9b05      	ldr	r3, [sp, #20]
 800a00c:	1ad2      	subs	r2, r2, r3
 800a00e:	4591      	cmp	r9, r2
 800a010:	bfa8      	it	ge
 800a012:	4691      	movge	r9, r2
 800a014:	f1b9 0f00 	cmp.w	r9, #0
 800a018:	dc35      	bgt.n	800a086 <_printf_float+0x3aa>
 800a01a:	f04f 0800 	mov.w	r8, #0
 800a01e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a022:	f104 0a1a 	add.w	sl, r4, #26
 800a026:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a02a:	1a9b      	subs	r3, r3, r2
 800a02c:	eba3 0309 	sub.w	r3, r3, r9
 800a030:	4543      	cmp	r3, r8
 800a032:	f77f af79 	ble.w	8009f28 <_printf_float+0x24c>
 800a036:	2301      	movs	r3, #1
 800a038:	4652      	mov	r2, sl
 800a03a:	4631      	mov	r1, r6
 800a03c:	4628      	mov	r0, r5
 800a03e:	47b8      	blx	r7
 800a040:	3001      	adds	r0, #1
 800a042:	f43f aeaa 	beq.w	8009d9a <_printf_float+0xbe>
 800a046:	f108 0801 	add.w	r8, r8, #1
 800a04a:	e7ec      	b.n	800a026 <_printf_float+0x34a>
 800a04c:	4613      	mov	r3, r2
 800a04e:	4631      	mov	r1, r6
 800a050:	4642      	mov	r2, r8
 800a052:	4628      	mov	r0, r5
 800a054:	47b8      	blx	r7
 800a056:	3001      	adds	r0, #1
 800a058:	d1c0      	bne.n	8009fdc <_printf_float+0x300>
 800a05a:	e69e      	b.n	8009d9a <_printf_float+0xbe>
 800a05c:	2301      	movs	r3, #1
 800a05e:	4631      	mov	r1, r6
 800a060:	4628      	mov	r0, r5
 800a062:	9205      	str	r2, [sp, #20]
 800a064:	47b8      	blx	r7
 800a066:	3001      	adds	r0, #1
 800a068:	f43f ae97 	beq.w	8009d9a <_printf_float+0xbe>
 800a06c:	9a05      	ldr	r2, [sp, #20]
 800a06e:	f10b 0b01 	add.w	fp, fp, #1
 800a072:	e7b9      	b.n	8009fe8 <_printf_float+0x30c>
 800a074:	ee18 3a10 	vmov	r3, s16
 800a078:	4652      	mov	r2, sl
 800a07a:	4631      	mov	r1, r6
 800a07c:	4628      	mov	r0, r5
 800a07e:	47b8      	blx	r7
 800a080:	3001      	adds	r0, #1
 800a082:	d1be      	bne.n	800a002 <_printf_float+0x326>
 800a084:	e689      	b.n	8009d9a <_printf_float+0xbe>
 800a086:	9a05      	ldr	r2, [sp, #20]
 800a088:	464b      	mov	r3, r9
 800a08a:	4442      	add	r2, r8
 800a08c:	4631      	mov	r1, r6
 800a08e:	4628      	mov	r0, r5
 800a090:	47b8      	blx	r7
 800a092:	3001      	adds	r0, #1
 800a094:	d1c1      	bne.n	800a01a <_printf_float+0x33e>
 800a096:	e680      	b.n	8009d9a <_printf_float+0xbe>
 800a098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a09a:	2a01      	cmp	r2, #1
 800a09c:	dc01      	bgt.n	800a0a2 <_printf_float+0x3c6>
 800a09e:	07db      	lsls	r3, r3, #31
 800a0a0:	d53a      	bpl.n	800a118 <_printf_float+0x43c>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	4642      	mov	r2, r8
 800a0a6:	4631      	mov	r1, r6
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	47b8      	blx	r7
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	f43f ae74 	beq.w	8009d9a <_printf_float+0xbe>
 800a0b2:	ee18 3a10 	vmov	r3, s16
 800a0b6:	4652      	mov	r2, sl
 800a0b8:	4631      	mov	r1, r6
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	47b8      	blx	r7
 800a0be:	3001      	adds	r0, #1
 800a0c0:	f43f ae6b 	beq.w	8009d9a <_printf_float+0xbe>
 800a0c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a0d0:	f7f6 fd12 	bl	8000af8 <__aeabi_dcmpeq>
 800a0d4:	b9d8      	cbnz	r0, 800a10e <_printf_float+0x432>
 800a0d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a0da:	f108 0201 	add.w	r2, r8, #1
 800a0de:	4631      	mov	r1, r6
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	47b8      	blx	r7
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d10e      	bne.n	800a106 <_printf_float+0x42a>
 800a0e8:	e657      	b.n	8009d9a <_printf_float+0xbe>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	4652      	mov	r2, sl
 800a0ee:	4631      	mov	r1, r6
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b8      	blx	r7
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	f43f ae50 	beq.w	8009d9a <_printf_float+0xbe>
 800a0fa:	f108 0801 	add.w	r8, r8, #1
 800a0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a100:	3b01      	subs	r3, #1
 800a102:	4543      	cmp	r3, r8
 800a104:	dcf1      	bgt.n	800a0ea <_printf_float+0x40e>
 800a106:	464b      	mov	r3, r9
 800a108:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a10c:	e6da      	b.n	8009ec4 <_printf_float+0x1e8>
 800a10e:	f04f 0800 	mov.w	r8, #0
 800a112:	f104 0a1a 	add.w	sl, r4, #26
 800a116:	e7f2      	b.n	800a0fe <_printf_float+0x422>
 800a118:	2301      	movs	r3, #1
 800a11a:	4642      	mov	r2, r8
 800a11c:	e7df      	b.n	800a0de <_printf_float+0x402>
 800a11e:	2301      	movs	r3, #1
 800a120:	464a      	mov	r2, r9
 800a122:	4631      	mov	r1, r6
 800a124:	4628      	mov	r0, r5
 800a126:	47b8      	blx	r7
 800a128:	3001      	adds	r0, #1
 800a12a:	f43f ae36 	beq.w	8009d9a <_printf_float+0xbe>
 800a12e:	f108 0801 	add.w	r8, r8, #1
 800a132:	68e3      	ldr	r3, [r4, #12]
 800a134:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a136:	1a5b      	subs	r3, r3, r1
 800a138:	4543      	cmp	r3, r8
 800a13a:	dcf0      	bgt.n	800a11e <_printf_float+0x442>
 800a13c:	e6f8      	b.n	8009f30 <_printf_float+0x254>
 800a13e:	f04f 0800 	mov.w	r8, #0
 800a142:	f104 0919 	add.w	r9, r4, #25
 800a146:	e7f4      	b.n	800a132 <_printf_float+0x456>

0800a148 <_printf_common>:
 800a148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a14c:	4616      	mov	r6, r2
 800a14e:	4699      	mov	r9, r3
 800a150:	688a      	ldr	r2, [r1, #8]
 800a152:	690b      	ldr	r3, [r1, #16]
 800a154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a158:	4293      	cmp	r3, r2
 800a15a:	bfb8      	it	lt
 800a15c:	4613      	movlt	r3, r2
 800a15e:	6033      	str	r3, [r6, #0]
 800a160:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a164:	4607      	mov	r7, r0
 800a166:	460c      	mov	r4, r1
 800a168:	b10a      	cbz	r2, 800a16e <_printf_common+0x26>
 800a16a:	3301      	adds	r3, #1
 800a16c:	6033      	str	r3, [r6, #0]
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	0699      	lsls	r1, r3, #26
 800a172:	bf42      	ittt	mi
 800a174:	6833      	ldrmi	r3, [r6, #0]
 800a176:	3302      	addmi	r3, #2
 800a178:	6033      	strmi	r3, [r6, #0]
 800a17a:	6825      	ldr	r5, [r4, #0]
 800a17c:	f015 0506 	ands.w	r5, r5, #6
 800a180:	d106      	bne.n	800a190 <_printf_common+0x48>
 800a182:	f104 0a19 	add.w	sl, r4, #25
 800a186:	68e3      	ldr	r3, [r4, #12]
 800a188:	6832      	ldr	r2, [r6, #0]
 800a18a:	1a9b      	subs	r3, r3, r2
 800a18c:	42ab      	cmp	r3, r5
 800a18e:	dc26      	bgt.n	800a1de <_printf_common+0x96>
 800a190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a194:	1e13      	subs	r3, r2, #0
 800a196:	6822      	ldr	r2, [r4, #0]
 800a198:	bf18      	it	ne
 800a19a:	2301      	movne	r3, #1
 800a19c:	0692      	lsls	r2, r2, #26
 800a19e:	d42b      	bmi.n	800a1f8 <_printf_common+0xb0>
 800a1a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	47c0      	blx	r8
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	d01e      	beq.n	800a1ec <_printf_common+0xa4>
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	6922      	ldr	r2, [r4, #16]
 800a1b2:	f003 0306 	and.w	r3, r3, #6
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	bf02      	ittt	eq
 800a1ba:	68e5      	ldreq	r5, [r4, #12]
 800a1bc:	6833      	ldreq	r3, [r6, #0]
 800a1be:	1aed      	subeq	r5, r5, r3
 800a1c0:	68a3      	ldr	r3, [r4, #8]
 800a1c2:	bf0c      	ite	eq
 800a1c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1c8:	2500      	movne	r5, #0
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	bfc4      	itt	gt
 800a1ce:	1a9b      	subgt	r3, r3, r2
 800a1d0:	18ed      	addgt	r5, r5, r3
 800a1d2:	2600      	movs	r6, #0
 800a1d4:	341a      	adds	r4, #26
 800a1d6:	42b5      	cmp	r5, r6
 800a1d8:	d11a      	bne.n	800a210 <_printf_common+0xc8>
 800a1da:	2000      	movs	r0, #0
 800a1dc:	e008      	b.n	800a1f0 <_printf_common+0xa8>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	4652      	mov	r2, sl
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	47c0      	blx	r8
 800a1e8:	3001      	adds	r0, #1
 800a1ea:	d103      	bne.n	800a1f4 <_printf_common+0xac>
 800a1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f4:	3501      	adds	r5, #1
 800a1f6:	e7c6      	b.n	800a186 <_printf_common+0x3e>
 800a1f8:	18e1      	adds	r1, r4, r3
 800a1fa:	1c5a      	adds	r2, r3, #1
 800a1fc:	2030      	movs	r0, #48	; 0x30
 800a1fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a202:	4422      	add	r2, r4
 800a204:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a20c:	3302      	adds	r3, #2
 800a20e:	e7c7      	b.n	800a1a0 <_printf_common+0x58>
 800a210:	2301      	movs	r3, #1
 800a212:	4622      	mov	r2, r4
 800a214:	4649      	mov	r1, r9
 800a216:	4638      	mov	r0, r7
 800a218:	47c0      	blx	r8
 800a21a:	3001      	adds	r0, #1
 800a21c:	d0e6      	beq.n	800a1ec <_printf_common+0xa4>
 800a21e:	3601      	adds	r6, #1
 800a220:	e7d9      	b.n	800a1d6 <_printf_common+0x8e>
	...

0800a224 <_printf_i>:
 800a224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a228:	7e0f      	ldrb	r7, [r1, #24]
 800a22a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a22c:	2f78      	cmp	r7, #120	; 0x78
 800a22e:	4691      	mov	r9, r2
 800a230:	4680      	mov	r8, r0
 800a232:	460c      	mov	r4, r1
 800a234:	469a      	mov	sl, r3
 800a236:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a23a:	d807      	bhi.n	800a24c <_printf_i+0x28>
 800a23c:	2f62      	cmp	r7, #98	; 0x62
 800a23e:	d80a      	bhi.n	800a256 <_printf_i+0x32>
 800a240:	2f00      	cmp	r7, #0
 800a242:	f000 80d4 	beq.w	800a3ee <_printf_i+0x1ca>
 800a246:	2f58      	cmp	r7, #88	; 0x58
 800a248:	f000 80c0 	beq.w	800a3cc <_printf_i+0x1a8>
 800a24c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a254:	e03a      	b.n	800a2cc <_printf_i+0xa8>
 800a256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a25a:	2b15      	cmp	r3, #21
 800a25c:	d8f6      	bhi.n	800a24c <_printf_i+0x28>
 800a25e:	a101      	add	r1, pc, #4	; (adr r1, 800a264 <_printf_i+0x40>)
 800a260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a264:	0800a2bd 	.word	0x0800a2bd
 800a268:	0800a2d1 	.word	0x0800a2d1
 800a26c:	0800a24d 	.word	0x0800a24d
 800a270:	0800a24d 	.word	0x0800a24d
 800a274:	0800a24d 	.word	0x0800a24d
 800a278:	0800a24d 	.word	0x0800a24d
 800a27c:	0800a2d1 	.word	0x0800a2d1
 800a280:	0800a24d 	.word	0x0800a24d
 800a284:	0800a24d 	.word	0x0800a24d
 800a288:	0800a24d 	.word	0x0800a24d
 800a28c:	0800a24d 	.word	0x0800a24d
 800a290:	0800a3d5 	.word	0x0800a3d5
 800a294:	0800a2fd 	.word	0x0800a2fd
 800a298:	0800a38f 	.word	0x0800a38f
 800a29c:	0800a24d 	.word	0x0800a24d
 800a2a0:	0800a24d 	.word	0x0800a24d
 800a2a4:	0800a3f7 	.word	0x0800a3f7
 800a2a8:	0800a24d 	.word	0x0800a24d
 800a2ac:	0800a2fd 	.word	0x0800a2fd
 800a2b0:	0800a24d 	.word	0x0800a24d
 800a2b4:	0800a24d 	.word	0x0800a24d
 800a2b8:	0800a397 	.word	0x0800a397
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	1d1a      	adds	r2, r3, #4
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	602a      	str	r2, [r5, #0]
 800a2c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e09f      	b.n	800a410 <_printf_i+0x1ec>
 800a2d0:	6820      	ldr	r0, [r4, #0]
 800a2d2:	682b      	ldr	r3, [r5, #0]
 800a2d4:	0607      	lsls	r7, r0, #24
 800a2d6:	f103 0104 	add.w	r1, r3, #4
 800a2da:	6029      	str	r1, [r5, #0]
 800a2dc:	d501      	bpl.n	800a2e2 <_printf_i+0xbe>
 800a2de:	681e      	ldr	r6, [r3, #0]
 800a2e0:	e003      	b.n	800a2ea <_printf_i+0xc6>
 800a2e2:	0646      	lsls	r6, r0, #25
 800a2e4:	d5fb      	bpl.n	800a2de <_printf_i+0xba>
 800a2e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a2ea:	2e00      	cmp	r6, #0
 800a2ec:	da03      	bge.n	800a2f6 <_printf_i+0xd2>
 800a2ee:	232d      	movs	r3, #45	; 0x2d
 800a2f0:	4276      	negs	r6, r6
 800a2f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2f6:	485a      	ldr	r0, [pc, #360]	; (800a460 <_printf_i+0x23c>)
 800a2f8:	230a      	movs	r3, #10
 800a2fa:	e012      	b.n	800a322 <_printf_i+0xfe>
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	6820      	ldr	r0, [r4, #0]
 800a300:	1d19      	adds	r1, r3, #4
 800a302:	6029      	str	r1, [r5, #0]
 800a304:	0605      	lsls	r5, r0, #24
 800a306:	d501      	bpl.n	800a30c <_printf_i+0xe8>
 800a308:	681e      	ldr	r6, [r3, #0]
 800a30a:	e002      	b.n	800a312 <_printf_i+0xee>
 800a30c:	0641      	lsls	r1, r0, #25
 800a30e:	d5fb      	bpl.n	800a308 <_printf_i+0xe4>
 800a310:	881e      	ldrh	r6, [r3, #0]
 800a312:	4853      	ldr	r0, [pc, #332]	; (800a460 <_printf_i+0x23c>)
 800a314:	2f6f      	cmp	r7, #111	; 0x6f
 800a316:	bf0c      	ite	eq
 800a318:	2308      	moveq	r3, #8
 800a31a:	230a      	movne	r3, #10
 800a31c:	2100      	movs	r1, #0
 800a31e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a322:	6865      	ldr	r5, [r4, #4]
 800a324:	60a5      	str	r5, [r4, #8]
 800a326:	2d00      	cmp	r5, #0
 800a328:	bfa2      	ittt	ge
 800a32a:	6821      	ldrge	r1, [r4, #0]
 800a32c:	f021 0104 	bicge.w	r1, r1, #4
 800a330:	6021      	strge	r1, [r4, #0]
 800a332:	b90e      	cbnz	r6, 800a338 <_printf_i+0x114>
 800a334:	2d00      	cmp	r5, #0
 800a336:	d04b      	beq.n	800a3d0 <_printf_i+0x1ac>
 800a338:	4615      	mov	r5, r2
 800a33a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a33e:	fb03 6711 	mls	r7, r3, r1, r6
 800a342:	5dc7      	ldrb	r7, [r0, r7]
 800a344:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a348:	4637      	mov	r7, r6
 800a34a:	42bb      	cmp	r3, r7
 800a34c:	460e      	mov	r6, r1
 800a34e:	d9f4      	bls.n	800a33a <_printf_i+0x116>
 800a350:	2b08      	cmp	r3, #8
 800a352:	d10b      	bne.n	800a36c <_printf_i+0x148>
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	07de      	lsls	r6, r3, #31
 800a358:	d508      	bpl.n	800a36c <_printf_i+0x148>
 800a35a:	6923      	ldr	r3, [r4, #16]
 800a35c:	6861      	ldr	r1, [r4, #4]
 800a35e:	4299      	cmp	r1, r3
 800a360:	bfde      	ittt	le
 800a362:	2330      	movle	r3, #48	; 0x30
 800a364:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a368:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a36c:	1b52      	subs	r2, r2, r5
 800a36e:	6122      	str	r2, [r4, #16]
 800a370:	f8cd a000 	str.w	sl, [sp]
 800a374:	464b      	mov	r3, r9
 800a376:	aa03      	add	r2, sp, #12
 800a378:	4621      	mov	r1, r4
 800a37a:	4640      	mov	r0, r8
 800a37c:	f7ff fee4 	bl	800a148 <_printf_common>
 800a380:	3001      	adds	r0, #1
 800a382:	d14a      	bne.n	800a41a <_printf_i+0x1f6>
 800a384:	f04f 30ff 	mov.w	r0, #4294967295
 800a388:	b004      	add	sp, #16
 800a38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a38e:	6823      	ldr	r3, [r4, #0]
 800a390:	f043 0320 	orr.w	r3, r3, #32
 800a394:	6023      	str	r3, [r4, #0]
 800a396:	4833      	ldr	r0, [pc, #204]	; (800a464 <_printf_i+0x240>)
 800a398:	2778      	movs	r7, #120	; 0x78
 800a39a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	6829      	ldr	r1, [r5, #0]
 800a3a2:	061f      	lsls	r7, r3, #24
 800a3a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3a8:	d402      	bmi.n	800a3b0 <_printf_i+0x18c>
 800a3aa:	065f      	lsls	r7, r3, #25
 800a3ac:	bf48      	it	mi
 800a3ae:	b2b6      	uxthmi	r6, r6
 800a3b0:	07df      	lsls	r7, r3, #31
 800a3b2:	bf48      	it	mi
 800a3b4:	f043 0320 	orrmi.w	r3, r3, #32
 800a3b8:	6029      	str	r1, [r5, #0]
 800a3ba:	bf48      	it	mi
 800a3bc:	6023      	strmi	r3, [r4, #0]
 800a3be:	b91e      	cbnz	r6, 800a3c8 <_printf_i+0x1a4>
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	f023 0320 	bic.w	r3, r3, #32
 800a3c6:	6023      	str	r3, [r4, #0]
 800a3c8:	2310      	movs	r3, #16
 800a3ca:	e7a7      	b.n	800a31c <_printf_i+0xf8>
 800a3cc:	4824      	ldr	r0, [pc, #144]	; (800a460 <_printf_i+0x23c>)
 800a3ce:	e7e4      	b.n	800a39a <_printf_i+0x176>
 800a3d0:	4615      	mov	r5, r2
 800a3d2:	e7bd      	b.n	800a350 <_printf_i+0x12c>
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	6826      	ldr	r6, [r4, #0]
 800a3d8:	6961      	ldr	r1, [r4, #20]
 800a3da:	1d18      	adds	r0, r3, #4
 800a3dc:	6028      	str	r0, [r5, #0]
 800a3de:	0635      	lsls	r5, r6, #24
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	d501      	bpl.n	800a3e8 <_printf_i+0x1c4>
 800a3e4:	6019      	str	r1, [r3, #0]
 800a3e6:	e002      	b.n	800a3ee <_printf_i+0x1ca>
 800a3e8:	0670      	lsls	r0, r6, #25
 800a3ea:	d5fb      	bpl.n	800a3e4 <_printf_i+0x1c0>
 800a3ec:	8019      	strh	r1, [r3, #0]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	6123      	str	r3, [r4, #16]
 800a3f2:	4615      	mov	r5, r2
 800a3f4:	e7bc      	b.n	800a370 <_printf_i+0x14c>
 800a3f6:	682b      	ldr	r3, [r5, #0]
 800a3f8:	1d1a      	adds	r2, r3, #4
 800a3fa:	602a      	str	r2, [r5, #0]
 800a3fc:	681d      	ldr	r5, [r3, #0]
 800a3fe:	6862      	ldr	r2, [r4, #4]
 800a400:	2100      	movs	r1, #0
 800a402:	4628      	mov	r0, r5
 800a404:	f7f5 fefc 	bl	8000200 <memchr>
 800a408:	b108      	cbz	r0, 800a40e <_printf_i+0x1ea>
 800a40a:	1b40      	subs	r0, r0, r5
 800a40c:	6060      	str	r0, [r4, #4]
 800a40e:	6863      	ldr	r3, [r4, #4]
 800a410:	6123      	str	r3, [r4, #16]
 800a412:	2300      	movs	r3, #0
 800a414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a418:	e7aa      	b.n	800a370 <_printf_i+0x14c>
 800a41a:	6923      	ldr	r3, [r4, #16]
 800a41c:	462a      	mov	r2, r5
 800a41e:	4649      	mov	r1, r9
 800a420:	4640      	mov	r0, r8
 800a422:	47d0      	blx	sl
 800a424:	3001      	adds	r0, #1
 800a426:	d0ad      	beq.n	800a384 <_printf_i+0x160>
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	079b      	lsls	r3, r3, #30
 800a42c:	d413      	bmi.n	800a456 <_printf_i+0x232>
 800a42e:	68e0      	ldr	r0, [r4, #12]
 800a430:	9b03      	ldr	r3, [sp, #12]
 800a432:	4298      	cmp	r0, r3
 800a434:	bfb8      	it	lt
 800a436:	4618      	movlt	r0, r3
 800a438:	e7a6      	b.n	800a388 <_printf_i+0x164>
 800a43a:	2301      	movs	r3, #1
 800a43c:	4632      	mov	r2, r6
 800a43e:	4649      	mov	r1, r9
 800a440:	4640      	mov	r0, r8
 800a442:	47d0      	blx	sl
 800a444:	3001      	adds	r0, #1
 800a446:	d09d      	beq.n	800a384 <_printf_i+0x160>
 800a448:	3501      	adds	r5, #1
 800a44a:	68e3      	ldr	r3, [r4, #12]
 800a44c:	9903      	ldr	r1, [sp, #12]
 800a44e:	1a5b      	subs	r3, r3, r1
 800a450:	42ab      	cmp	r3, r5
 800a452:	dcf2      	bgt.n	800a43a <_printf_i+0x216>
 800a454:	e7eb      	b.n	800a42e <_printf_i+0x20a>
 800a456:	2500      	movs	r5, #0
 800a458:	f104 0619 	add.w	r6, r4, #25
 800a45c:	e7f5      	b.n	800a44a <_printf_i+0x226>
 800a45e:	bf00      	nop
 800a460:	0800c77a 	.word	0x0800c77a
 800a464:	0800c78b 	.word	0x0800c78b

0800a468 <std>:
 800a468:	2300      	movs	r3, #0
 800a46a:	b510      	push	{r4, lr}
 800a46c:	4604      	mov	r4, r0
 800a46e:	e9c0 3300 	strd	r3, r3, [r0]
 800a472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a476:	6083      	str	r3, [r0, #8]
 800a478:	8181      	strh	r1, [r0, #12]
 800a47a:	6643      	str	r3, [r0, #100]	; 0x64
 800a47c:	81c2      	strh	r2, [r0, #14]
 800a47e:	6183      	str	r3, [r0, #24]
 800a480:	4619      	mov	r1, r3
 800a482:	2208      	movs	r2, #8
 800a484:	305c      	adds	r0, #92	; 0x5c
 800a486:	f000 f9f7 	bl	800a878 <memset>
 800a48a:	4b0d      	ldr	r3, [pc, #52]	; (800a4c0 <std+0x58>)
 800a48c:	6263      	str	r3, [r4, #36]	; 0x24
 800a48e:	4b0d      	ldr	r3, [pc, #52]	; (800a4c4 <std+0x5c>)
 800a490:	62a3      	str	r3, [r4, #40]	; 0x28
 800a492:	4b0d      	ldr	r3, [pc, #52]	; (800a4c8 <std+0x60>)
 800a494:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a496:	4b0d      	ldr	r3, [pc, #52]	; (800a4cc <std+0x64>)
 800a498:	6323      	str	r3, [r4, #48]	; 0x30
 800a49a:	4b0d      	ldr	r3, [pc, #52]	; (800a4d0 <std+0x68>)
 800a49c:	6224      	str	r4, [r4, #32]
 800a49e:	429c      	cmp	r4, r3
 800a4a0:	d006      	beq.n	800a4b0 <std+0x48>
 800a4a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a4a6:	4294      	cmp	r4, r2
 800a4a8:	d002      	beq.n	800a4b0 <std+0x48>
 800a4aa:	33d0      	adds	r3, #208	; 0xd0
 800a4ac:	429c      	cmp	r4, r3
 800a4ae:	d105      	bne.n	800a4bc <std+0x54>
 800a4b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4b8:	f000 ba5a 	b.w	800a970 <__retarget_lock_init_recursive>
 800a4bc:	bd10      	pop	{r4, pc}
 800a4be:	bf00      	nop
 800a4c0:	0800a6c9 	.word	0x0800a6c9
 800a4c4:	0800a6eb 	.word	0x0800a6eb
 800a4c8:	0800a723 	.word	0x0800a723
 800a4cc:	0800a747 	.word	0x0800a747
 800a4d0:	200006a0 	.word	0x200006a0

0800a4d4 <stdio_exit_handler>:
 800a4d4:	4a02      	ldr	r2, [pc, #8]	; (800a4e0 <stdio_exit_handler+0xc>)
 800a4d6:	4903      	ldr	r1, [pc, #12]	; (800a4e4 <stdio_exit_handler+0x10>)
 800a4d8:	4803      	ldr	r0, [pc, #12]	; (800a4e8 <stdio_exit_handler+0x14>)
 800a4da:	f000 b869 	b.w	800a5b0 <_fwalk_sglue>
 800a4de:	bf00      	nop
 800a4e0:	20000010 	.word	0x20000010
 800a4e4:	0800c2f9 	.word	0x0800c2f9
 800a4e8:	2000001c 	.word	0x2000001c

0800a4ec <cleanup_stdio>:
 800a4ec:	6841      	ldr	r1, [r0, #4]
 800a4ee:	4b0c      	ldr	r3, [pc, #48]	; (800a520 <cleanup_stdio+0x34>)
 800a4f0:	4299      	cmp	r1, r3
 800a4f2:	b510      	push	{r4, lr}
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	d001      	beq.n	800a4fc <cleanup_stdio+0x10>
 800a4f8:	f001 fefe 	bl	800c2f8 <_fflush_r>
 800a4fc:	68a1      	ldr	r1, [r4, #8]
 800a4fe:	4b09      	ldr	r3, [pc, #36]	; (800a524 <cleanup_stdio+0x38>)
 800a500:	4299      	cmp	r1, r3
 800a502:	d002      	beq.n	800a50a <cleanup_stdio+0x1e>
 800a504:	4620      	mov	r0, r4
 800a506:	f001 fef7 	bl	800c2f8 <_fflush_r>
 800a50a:	68e1      	ldr	r1, [r4, #12]
 800a50c:	4b06      	ldr	r3, [pc, #24]	; (800a528 <cleanup_stdio+0x3c>)
 800a50e:	4299      	cmp	r1, r3
 800a510:	d004      	beq.n	800a51c <cleanup_stdio+0x30>
 800a512:	4620      	mov	r0, r4
 800a514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a518:	f001 beee 	b.w	800c2f8 <_fflush_r>
 800a51c:	bd10      	pop	{r4, pc}
 800a51e:	bf00      	nop
 800a520:	200006a0 	.word	0x200006a0
 800a524:	20000708 	.word	0x20000708
 800a528:	20000770 	.word	0x20000770

0800a52c <global_stdio_init.part.0>:
 800a52c:	b510      	push	{r4, lr}
 800a52e:	4b0b      	ldr	r3, [pc, #44]	; (800a55c <global_stdio_init.part.0+0x30>)
 800a530:	4c0b      	ldr	r4, [pc, #44]	; (800a560 <global_stdio_init.part.0+0x34>)
 800a532:	4a0c      	ldr	r2, [pc, #48]	; (800a564 <global_stdio_init.part.0+0x38>)
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	4620      	mov	r0, r4
 800a538:	2200      	movs	r2, #0
 800a53a:	2104      	movs	r1, #4
 800a53c:	f7ff ff94 	bl	800a468 <std>
 800a540:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a544:	2201      	movs	r2, #1
 800a546:	2109      	movs	r1, #9
 800a548:	f7ff ff8e 	bl	800a468 <std>
 800a54c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a550:	2202      	movs	r2, #2
 800a552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a556:	2112      	movs	r1, #18
 800a558:	f7ff bf86 	b.w	800a468 <std>
 800a55c:	200007d8 	.word	0x200007d8
 800a560:	200006a0 	.word	0x200006a0
 800a564:	0800a4d5 	.word	0x0800a4d5

0800a568 <__sfp_lock_acquire>:
 800a568:	4801      	ldr	r0, [pc, #4]	; (800a570 <__sfp_lock_acquire+0x8>)
 800a56a:	f000 ba02 	b.w	800a972 <__retarget_lock_acquire_recursive>
 800a56e:	bf00      	nop
 800a570:	200007e1 	.word	0x200007e1

0800a574 <__sfp_lock_release>:
 800a574:	4801      	ldr	r0, [pc, #4]	; (800a57c <__sfp_lock_release+0x8>)
 800a576:	f000 b9fd 	b.w	800a974 <__retarget_lock_release_recursive>
 800a57a:	bf00      	nop
 800a57c:	200007e1 	.word	0x200007e1

0800a580 <__sinit>:
 800a580:	b510      	push	{r4, lr}
 800a582:	4604      	mov	r4, r0
 800a584:	f7ff fff0 	bl	800a568 <__sfp_lock_acquire>
 800a588:	6a23      	ldr	r3, [r4, #32]
 800a58a:	b11b      	cbz	r3, 800a594 <__sinit+0x14>
 800a58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a590:	f7ff bff0 	b.w	800a574 <__sfp_lock_release>
 800a594:	4b04      	ldr	r3, [pc, #16]	; (800a5a8 <__sinit+0x28>)
 800a596:	6223      	str	r3, [r4, #32]
 800a598:	4b04      	ldr	r3, [pc, #16]	; (800a5ac <__sinit+0x2c>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1f5      	bne.n	800a58c <__sinit+0xc>
 800a5a0:	f7ff ffc4 	bl	800a52c <global_stdio_init.part.0>
 800a5a4:	e7f2      	b.n	800a58c <__sinit+0xc>
 800a5a6:	bf00      	nop
 800a5a8:	0800a4ed 	.word	0x0800a4ed
 800a5ac:	200007d8 	.word	0x200007d8

0800a5b0 <_fwalk_sglue>:
 800a5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b4:	4607      	mov	r7, r0
 800a5b6:	4688      	mov	r8, r1
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	2600      	movs	r6, #0
 800a5bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5c0:	f1b9 0901 	subs.w	r9, r9, #1
 800a5c4:	d505      	bpl.n	800a5d2 <_fwalk_sglue+0x22>
 800a5c6:	6824      	ldr	r4, [r4, #0]
 800a5c8:	2c00      	cmp	r4, #0
 800a5ca:	d1f7      	bne.n	800a5bc <_fwalk_sglue+0xc>
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d2:	89ab      	ldrh	r3, [r5, #12]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d907      	bls.n	800a5e8 <_fwalk_sglue+0x38>
 800a5d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	d003      	beq.n	800a5e8 <_fwalk_sglue+0x38>
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	47c0      	blx	r8
 800a5e6:	4306      	orrs	r6, r0
 800a5e8:	3568      	adds	r5, #104	; 0x68
 800a5ea:	e7e9      	b.n	800a5c0 <_fwalk_sglue+0x10>

0800a5ec <iprintf>:
 800a5ec:	b40f      	push	{r0, r1, r2, r3}
 800a5ee:	b507      	push	{r0, r1, r2, lr}
 800a5f0:	4906      	ldr	r1, [pc, #24]	; (800a60c <iprintf+0x20>)
 800a5f2:	ab04      	add	r3, sp, #16
 800a5f4:	6808      	ldr	r0, [r1, #0]
 800a5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5fa:	6881      	ldr	r1, [r0, #8]
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	f001 fcdb 	bl	800bfb8 <_vfiprintf_r>
 800a602:	b003      	add	sp, #12
 800a604:	f85d eb04 	ldr.w	lr, [sp], #4
 800a608:	b004      	add	sp, #16
 800a60a:	4770      	bx	lr
 800a60c:	20000068 	.word	0x20000068

0800a610 <_puts_r>:
 800a610:	6a03      	ldr	r3, [r0, #32]
 800a612:	b570      	push	{r4, r5, r6, lr}
 800a614:	6884      	ldr	r4, [r0, #8]
 800a616:	4605      	mov	r5, r0
 800a618:	460e      	mov	r6, r1
 800a61a:	b90b      	cbnz	r3, 800a620 <_puts_r+0x10>
 800a61c:	f7ff ffb0 	bl	800a580 <__sinit>
 800a620:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a622:	07db      	lsls	r3, r3, #31
 800a624:	d405      	bmi.n	800a632 <_puts_r+0x22>
 800a626:	89a3      	ldrh	r3, [r4, #12]
 800a628:	0598      	lsls	r0, r3, #22
 800a62a:	d402      	bmi.n	800a632 <_puts_r+0x22>
 800a62c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a62e:	f000 f9a0 	bl	800a972 <__retarget_lock_acquire_recursive>
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	0719      	lsls	r1, r3, #28
 800a636:	d513      	bpl.n	800a660 <_puts_r+0x50>
 800a638:	6923      	ldr	r3, [r4, #16]
 800a63a:	b18b      	cbz	r3, 800a660 <_puts_r+0x50>
 800a63c:	3e01      	subs	r6, #1
 800a63e:	68a3      	ldr	r3, [r4, #8]
 800a640:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a644:	3b01      	subs	r3, #1
 800a646:	60a3      	str	r3, [r4, #8]
 800a648:	b9e9      	cbnz	r1, 800a686 <_puts_r+0x76>
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	da2e      	bge.n	800a6ac <_puts_r+0x9c>
 800a64e:	4622      	mov	r2, r4
 800a650:	210a      	movs	r1, #10
 800a652:	4628      	mov	r0, r5
 800a654:	f000 f87b 	bl	800a74e <__swbuf_r>
 800a658:	3001      	adds	r0, #1
 800a65a:	d007      	beq.n	800a66c <_puts_r+0x5c>
 800a65c:	250a      	movs	r5, #10
 800a65e:	e007      	b.n	800a670 <_puts_r+0x60>
 800a660:	4621      	mov	r1, r4
 800a662:	4628      	mov	r0, r5
 800a664:	f000 f8b0 	bl	800a7c8 <__swsetup_r>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d0e7      	beq.n	800a63c <_puts_r+0x2c>
 800a66c:	f04f 35ff 	mov.w	r5, #4294967295
 800a670:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a672:	07da      	lsls	r2, r3, #31
 800a674:	d405      	bmi.n	800a682 <_puts_r+0x72>
 800a676:	89a3      	ldrh	r3, [r4, #12]
 800a678:	059b      	lsls	r3, r3, #22
 800a67a:	d402      	bmi.n	800a682 <_puts_r+0x72>
 800a67c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a67e:	f000 f979 	bl	800a974 <__retarget_lock_release_recursive>
 800a682:	4628      	mov	r0, r5
 800a684:	bd70      	pop	{r4, r5, r6, pc}
 800a686:	2b00      	cmp	r3, #0
 800a688:	da04      	bge.n	800a694 <_puts_r+0x84>
 800a68a:	69a2      	ldr	r2, [r4, #24]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	dc06      	bgt.n	800a69e <_puts_r+0x8e>
 800a690:	290a      	cmp	r1, #10
 800a692:	d004      	beq.n	800a69e <_puts_r+0x8e>
 800a694:	6823      	ldr	r3, [r4, #0]
 800a696:	1c5a      	adds	r2, r3, #1
 800a698:	6022      	str	r2, [r4, #0]
 800a69a:	7019      	strb	r1, [r3, #0]
 800a69c:	e7cf      	b.n	800a63e <_puts_r+0x2e>
 800a69e:	4622      	mov	r2, r4
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	f000 f854 	bl	800a74e <__swbuf_r>
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	d1c9      	bne.n	800a63e <_puts_r+0x2e>
 800a6aa:	e7df      	b.n	800a66c <_puts_r+0x5c>
 800a6ac:	6823      	ldr	r3, [r4, #0]
 800a6ae:	250a      	movs	r5, #10
 800a6b0:	1c5a      	adds	r2, r3, #1
 800a6b2:	6022      	str	r2, [r4, #0]
 800a6b4:	701d      	strb	r5, [r3, #0]
 800a6b6:	e7db      	b.n	800a670 <_puts_r+0x60>

0800a6b8 <puts>:
 800a6b8:	4b02      	ldr	r3, [pc, #8]	; (800a6c4 <puts+0xc>)
 800a6ba:	4601      	mov	r1, r0
 800a6bc:	6818      	ldr	r0, [r3, #0]
 800a6be:	f7ff bfa7 	b.w	800a610 <_puts_r>
 800a6c2:	bf00      	nop
 800a6c4:	20000068 	.word	0x20000068

0800a6c8 <__sread>:
 800a6c8:	b510      	push	{r4, lr}
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d0:	f000 f900 	bl	800a8d4 <_read_r>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	bfab      	itete	ge
 800a6d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a6da:	89a3      	ldrhlt	r3, [r4, #12]
 800a6dc:	181b      	addge	r3, r3, r0
 800a6de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a6e2:	bfac      	ite	ge
 800a6e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a6e6:	81a3      	strhlt	r3, [r4, #12]
 800a6e8:	bd10      	pop	{r4, pc}

0800a6ea <__swrite>:
 800a6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ee:	461f      	mov	r7, r3
 800a6f0:	898b      	ldrh	r3, [r1, #12]
 800a6f2:	05db      	lsls	r3, r3, #23
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	4616      	mov	r6, r2
 800a6fa:	d505      	bpl.n	800a708 <__swrite+0x1e>
 800a6fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a700:	2302      	movs	r3, #2
 800a702:	2200      	movs	r2, #0
 800a704:	f000 f8d4 	bl	800a8b0 <_lseek_r>
 800a708:	89a3      	ldrh	r3, [r4, #12]
 800a70a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a70e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a712:	81a3      	strh	r3, [r4, #12]
 800a714:	4632      	mov	r2, r6
 800a716:	463b      	mov	r3, r7
 800a718:	4628      	mov	r0, r5
 800a71a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a71e:	f000 b8eb 	b.w	800a8f8 <_write_r>

0800a722 <__sseek>:
 800a722:	b510      	push	{r4, lr}
 800a724:	460c      	mov	r4, r1
 800a726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a72a:	f000 f8c1 	bl	800a8b0 <_lseek_r>
 800a72e:	1c43      	adds	r3, r0, #1
 800a730:	89a3      	ldrh	r3, [r4, #12]
 800a732:	bf15      	itete	ne
 800a734:	6560      	strne	r0, [r4, #84]	; 0x54
 800a736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a73a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a73e:	81a3      	strheq	r3, [r4, #12]
 800a740:	bf18      	it	ne
 800a742:	81a3      	strhne	r3, [r4, #12]
 800a744:	bd10      	pop	{r4, pc}

0800a746 <__sclose>:
 800a746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a74a:	f000 b8a1 	b.w	800a890 <_close_r>

0800a74e <__swbuf_r>:
 800a74e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a750:	460e      	mov	r6, r1
 800a752:	4614      	mov	r4, r2
 800a754:	4605      	mov	r5, r0
 800a756:	b118      	cbz	r0, 800a760 <__swbuf_r+0x12>
 800a758:	6a03      	ldr	r3, [r0, #32]
 800a75a:	b90b      	cbnz	r3, 800a760 <__swbuf_r+0x12>
 800a75c:	f7ff ff10 	bl	800a580 <__sinit>
 800a760:	69a3      	ldr	r3, [r4, #24]
 800a762:	60a3      	str	r3, [r4, #8]
 800a764:	89a3      	ldrh	r3, [r4, #12]
 800a766:	071a      	lsls	r2, r3, #28
 800a768:	d525      	bpl.n	800a7b6 <__swbuf_r+0x68>
 800a76a:	6923      	ldr	r3, [r4, #16]
 800a76c:	b31b      	cbz	r3, 800a7b6 <__swbuf_r+0x68>
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	6922      	ldr	r2, [r4, #16]
 800a772:	1a98      	subs	r0, r3, r2
 800a774:	6963      	ldr	r3, [r4, #20]
 800a776:	b2f6      	uxtb	r6, r6
 800a778:	4283      	cmp	r3, r0
 800a77a:	4637      	mov	r7, r6
 800a77c:	dc04      	bgt.n	800a788 <__swbuf_r+0x3a>
 800a77e:	4621      	mov	r1, r4
 800a780:	4628      	mov	r0, r5
 800a782:	f001 fdb9 	bl	800c2f8 <_fflush_r>
 800a786:	b9e0      	cbnz	r0, 800a7c2 <__swbuf_r+0x74>
 800a788:	68a3      	ldr	r3, [r4, #8]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	60a3      	str	r3, [r4, #8]
 800a78e:	6823      	ldr	r3, [r4, #0]
 800a790:	1c5a      	adds	r2, r3, #1
 800a792:	6022      	str	r2, [r4, #0]
 800a794:	701e      	strb	r6, [r3, #0]
 800a796:	6962      	ldr	r2, [r4, #20]
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d004      	beq.n	800a7a8 <__swbuf_r+0x5a>
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	07db      	lsls	r3, r3, #31
 800a7a2:	d506      	bpl.n	800a7b2 <__swbuf_r+0x64>
 800a7a4:	2e0a      	cmp	r6, #10
 800a7a6:	d104      	bne.n	800a7b2 <__swbuf_r+0x64>
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	f001 fda4 	bl	800c2f8 <_fflush_r>
 800a7b0:	b938      	cbnz	r0, 800a7c2 <__swbuf_r+0x74>
 800a7b2:	4638      	mov	r0, r7
 800a7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	f000 f805 	bl	800a7c8 <__swsetup_r>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d0d5      	beq.n	800a76e <__swbuf_r+0x20>
 800a7c2:	f04f 37ff 	mov.w	r7, #4294967295
 800a7c6:	e7f4      	b.n	800a7b2 <__swbuf_r+0x64>

0800a7c8 <__swsetup_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	4b2a      	ldr	r3, [pc, #168]	; (800a874 <__swsetup_r+0xac>)
 800a7cc:	4605      	mov	r5, r0
 800a7ce:	6818      	ldr	r0, [r3, #0]
 800a7d0:	460c      	mov	r4, r1
 800a7d2:	b118      	cbz	r0, 800a7dc <__swsetup_r+0x14>
 800a7d4:	6a03      	ldr	r3, [r0, #32]
 800a7d6:	b90b      	cbnz	r3, 800a7dc <__swsetup_r+0x14>
 800a7d8:	f7ff fed2 	bl	800a580 <__sinit>
 800a7dc:	89a3      	ldrh	r3, [r4, #12]
 800a7de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7e2:	0718      	lsls	r0, r3, #28
 800a7e4:	d422      	bmi.n	800a82c <__swsetup_r+0x64>
 800a7e6:	06d9      	lsls	r1, r3, #27
 800a7e8:	d407      	bmi.n	800a7fa <__swsetup_r+0x32>
 800a7ea:	2309      	movs	r3, #9
 800a7ec:	602b      	str	r3, [r5, #0]
 800a7ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7f2:	81a3      	strh	r3, [r4, #12]
 800a7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f8:	e034      	b.n	800a864 <__swsetup_r+0x9c>
 800a7fa:	0758      	lsls	r0, r3, #29
 800a7fc:	d512      	bpl.n	800a824 <__swsetup_r+0x5c>
 800a7fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a800:	b141      	cbz	r1, 800a814 <__swsetup_r+0x4c>
 800a802:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a806:	4299      	cmp	r1, r3
 800a808:	d002      	beq.n	800a810 <__swsetup_r+0x48>
 800a80a:	4628      	mov	r0, r5
 800a80c:	f000 ff2e 	bl	800b66c <_free_r>
 800a810:	2300      	movs	r3, #0
 800a812:	6363      	str	r3, [r4, #52]	; 0x34
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a81a:	81a3      	strh	r3, [r4, #12]
 800a81c:	2300      	movs	r3, #0
 800a81e:	6063      	str	r3, [r4, #4]
 800a820:	6923      	ldr	r3, [r4, #16]
 800a822:	6023      	str	r3, [r4, #0]
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	f043 0308 	orr.w	r3, r3, #8
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	6923      	ldr	r3, [r4, #16]
 800a82e:	b94b      	cbnz	r3, 800a844 <__swsetup_r+0x7c>
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a83a:	d003      	beq.n	800a844 <__swsetup_r+0x7c>
 800a83c:	4621      	mov	r1, r4
 800a83e:	4628      	mov	r0, r5
 800a840:	f001 fda8 	bl	800c394 <__smakebuf_r>
 800a844:	89a0      	ldrh	r0, [r4, #12]
 800a846:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a84a:	f010 0301 	ands.w	r3, r0, #1
 800a84e:	d00a      	beq.n	800a866 <__swsetup_r+0x9e>
 800a850:	2300      	movs	r3, #0
 800a852:	60a3      	str	r3, [r4, #8]
 800a854:	6963      	ldr	r3, [r4, #20]
 800a856:	425b      	negs	r3, r3
 800a858:	61a3      	str	r3, [r4, #24]
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	b943      	cbnz	r3, 800a870 <__swsetup_r+0xa8>
 800a85e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a862:	d1c4      	bne.n	800a7ee <__swsetup_r+0x26>
 800a864:	bd38      	pop	{r3, r4, r5, pc}
 800a866:	0781      	lsls	r1, r0, #30
 800a868:	bf58      	it	pl
 800a86a:	6963      	ldrpl	r3, [r4, #20]
 800a86c:	60a3      	str	r3, [r4, #8]
 800a86e:	e7f4      	b.n	800a85a <__swsetup_r+0x92>
 800a870:	2000      	movs	r0, #0
 800a872:	e7f7      	b.n	800a864 <__swsetup_r+0x9c>
 800a874:	20000068 	.word	0x20000068

0800a878 <memset>:
 800a878:	4402      	add	r2, r0
 800a87a:	4603      	mov	r3, r0
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d100      	bne.n	800a882 <memset+0xa>
 800a880:	4770      	bx	lr
 800a882:	f803 1b01 	strb.w	r1, [r3], #1
 800a886:	e7f9      	b.n	800a87c <memset+0x4>

0800a888 <_localeconv_r>:
 800a888:	4800      	ldr	r0, [pc, #0]	; (800a88c <_localeconv_r+0x4>)
 800a88a:	4770      	bx	lr
 800a88c:	2000015c 	.word	0x2000015c

0800a890 <_close_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	4d06      	ldr	r5, [pc, #24]	; (800a8ac <_close_r+0x1c>)
 800a894:	2300      	movs	r3, #0
 800a896:	4604      	mov	r4, r0
 800a898:	4608      	mov	r0, r1
 800a89a:	602b      	str	r3, [r5, #0]
 800a89c:	f7f8 f95d 	bl	8002b5a <_close>
 800a8a0:	1c43      	adds	r3, r0, #1
 800a8a2:	d102      	bne.n	800a8aa <_close_r+0x1a>
 800a8a4:	682b      	ldr	r3, [r5, #0]
 800a8a6:	b103      	cbz	r3, 800a8aa <_close_r+0x1a>
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	bd38      	pop	{r3, r4, r5, pc}
 800a8ac:	200007dc 	.word	0x200007dc

0800a8b0 <_lseek_r>:
 800a8b0:	b538      	push	{r3, r4, r5, lr}
 800a8b2:	4d07      	ldr	r5, [pc, #28]	; (800a8d0 <_lseek_r+0x20>)
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	4608      	mov	r0, r1
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	602a      	str	r2, [r5, #0]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	f7f8 f972 	bl	8002ba8 <_lseek>
 800a8c4:	1c43      	adds	r3, r0, #1
 800a8c6:	d102      	bne.n	800a8ce <_lseek_r+0x1e>
 800a8c8:	682b      	ldr	r3, [r5, #0]
 800a8ca:	b103      	cbz	r3, 800a8ce <_lseek_r+0x1e>
 800a8cc:	6023      	str	r3, [r4, #0]
 800a8ce:	bd38      	pop	{r3, r4, r5, pc}
 800a8d0:	200007dc 	.word	0x200007dc

0800a8d4 <_read_r>:
 800a8d4:	b538      	push	{r3, r4, r5, lr}
 800a8d6:	4d07      	ldr	r5, [pc, #28]	; (800a8f4 <_read_r+0x20>)
 800a8d8:	4604      	mov	r4, r0
 800a8da:	4608      	mov	r0, r1
 800a8dc:	4611      	mov	r1, r2
 800a8de:	2200      	movs	r2, #0
 800a8e0:	602a      	str	r2, [r5, #0]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	f7f8 f900 	bl	8002ae8 <_read>
 800a8e8:	1c43      	adds	r3, r0, #1
 800a8ea:	d102      	bne.n	800a8f2 <_read_r+0x1e>
 800a8ec:	682b      	ldr	r3, [r5, #0]
 800a8ee:	b103      	cbz	r3, 800a8f2 <_read_r+0x1e>
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	bd38      	pop	{r3, r4, r5, pc}
 800a8f4:	200007dc 	.word	0x200007dc

0800a8f8 <_write_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	4d07      	ldr	r5, [pc, #28]	; (800a918 <_write_r+0x20>)
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	4608      	mov	r0, r1
 800a900:	4611      	mov	r1, r2
 800a902:	2200      	movs	r2, #0
 800a904:	602a      	str	r2, [r5, #0]
 800a906:	461a      	mov	r2, r3
 800a908:	f7f8 f90b 	bl	8002b22 <_write>
 800a90c:	1c43      	adds	r3, r0, #1
 800a90e:	d102      	bne.n	800a916 <_write_r+0x1e>
 800a910:	682b      	ldr	r3, [r5, #0]
 800a912:	b103      	cbz	r3, 800a916 <_write_r+0x1e>
 800a914:	6023      	str	r3, [r4, #0]
 800a916:	bd38      	pop	{r3, r4, r5, pc}
 800a918:	200007dc 	.word	0x200007dc

0800a91c <__errno>:
 800a91c:	4b01      	ldr	r3, [pc, #4]	; (800a924 <__errno+0x8>)
 800a91e:	6818      	ldr	r0, [r3, #0]
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	20000068 	.word	0x20000068

0800a928 <__libc_init_array>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	4d0d      	ldr	r5, [pc, #52]	; (800a960 <__libc_init_array+0x38>)
 800a92c:	4c0d      	ldr	r4, [pc, #52]	; (800a964 <__libc_init_array+0x3c>)
 800a92e:	1b64      	subs	r4, r4, r5
 800a930:	10a4      	asrs	r4, r4, #2
 800a932:	2600      	movs	r6, #0
 800a934:	42a6      	cmp	r6, r4
 800a936:	d109      	bne.n	800a94c <__libc_init_array+0x24>
 800a938:	4d0b      	ldr	r5, [pc, #44]	; (800a968 <__libc_init_array+0x40>)
 800a93a:	4c0c      	ldr	r4, [pc, #48]	; (800a96c <__libc_init_array+0x44>)
 800a93c:	f001 fe58 	bl	800c5f0 <_init>
 800a940:	1b64      	subs	r4, r4, r5
 800a942:	10a4      	asrs	r4, r4, #2
 800a944:	2600      	movs	r6, #0
 800a946:	42a6      	cmp	r6, r4
 800a948:	d105      	bne.n	800a956 <__libc_init_array+0x2e>
 800a94a:	bd70      	pop	{r4, r5, r6, pc}
 800a94c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a950:	4798      	blx	r3
 800a952:	3601      	adds	r6, #1
 800a954:	e7ee      	b.n	800a934 <__libc_init_array+0xc>
 800a956:	f855 3b04 	ldr.w	r3, [r5], #4
 800a95a:	4798      	blx	r3
 800a95c:	3601      	adds	r6, #1
 800a95e:	e7f2      	b.n	800a946 <__libc_init_array+0x1e>
 800a960:	0800cae4 	.word	0x0800cae4
 800a964:	0800cae4 	.word	0x0800cae4
 800a968:	0800cae4 	.word	0x0800cae4
 800a96c:	0800cae8 	.word	0x0800cae8

0800a970 <__retarget_lock_init_recursive>:
 800a970:	4770      	bx	lr

0800a972 <__retarget_lock_acquire_recursive>:
 800a972:	4770      	bx	lr

0800a974 <__retarget_lock_release_recursive>:
 800a974:	4770      	bx	lr

0800a976 <quorem>:
 800a976:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97a:	6903      	ldr	r3, [r0, #16]
 800a97c:	690c      	ldr	r4, [r1, #16]
 800a97e:	42a3      	cmp	r3, r4
 800a980:	4607      	mov	r7, r0
 800a982:	db7e      	blt.n	800aa82 <quorem+0x10c>
 800a984:	3c01      	subs	r4, #1
 800a986:	f101 0814 	add.w	r8, r1, #20
 800a98a:	f100 0514 	add.w	r5, r0, #20
 800a98e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a992:	9301      	str	r3, [sp, #4]
 800a994:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a998:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a99c:	3301      	adds	r3, #1
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a9a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a9a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a9ac:	d331      	bcc.n	800aa12 <quorem+0x9c>
 800a9ae:	f04f 0e00 	mov.w	lr, #0
 800a9b2:	4640      	mov	r0, r8
 800a9b4:	46ac      	mov	ip, r5
 800a9b6:	46f2      	mov	sl, lr
 800a9b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a9bc:	b293      	uxth	r3, r2
 800a9be:	fb06 e303 	mla	r3, r6, r3, lr
 800a9c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a9c6:	0c1a      	lsrs	r2, r3, #16
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	ebaa 0303 	sub.w	r3, sl, r3
 800a9ce:	f8dc a000 	ldr.w	sl, [ip]
 800a9d2:	fa13 f38a 	uxtah	r3, r3, sl
 800a9d6:	fb06 220e 	mla	r2, r6, lr, r2
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	9b00      	ldr	r3, [sp, #0]
 800a9de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a9e2:	b292      	uxth	r2, r2
 800a9e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a9e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9ec:	f8bd 3000 	ldrh.w	r3, [sp]
 800a9f0:	4581      	cmp	r9, r0
 800a9f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9f6:	f84c 3b04 	str.w	r3, [ip], #4
 800a9fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a9fe:	d2db      	bcs.n	800a9b8 <quorem+0x42>
 800aa00:	f855 300b 	ldr.w	r3, [r5, fp]
 800aa04:	b92b      	cbnz	r3, 800aa12 <quorem+0x9c>
 800aa06:	9b01      	ldr	r3, [sp, #4]
 800aa08:	3b04      	subs	r3, #4
 800aa0a:	429d      	cmp	r5, r3
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	d32c      	bcc.n	800aa6a <quorem+0xf4>
 800aa10:	613c      	str	r4, [r7, #16]
 800aa12:	4638      	mov	r0, r7
 800aa14:	f001 f9a6 	bl	800bd64 <__mcmp>
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	db22      	blt.n	800aa62 <quorem+0xec>
 800aa1c:	3601      	adds	r6, #1
 800aa1e:	4629      	mov	r1, r5
 800aa20:	2000      	movs	r0, #0
 800aa22:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa26:	f8d1 c000 	ldr.w	ip, [r1]
 800aa2a:	b293      	uxth	r3, r2
 800aa2c:	1ac3      	subs	r3, r0, r3
 800aa2e:	0c12      	lsrs	r2, r2, #16
 800aa30:	fa13 f38c 	uxtah	r3, r3, ip
 800aa34:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800aa38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa42:	45c1      	cmp	r9, r8
 800aa44:	f841 3b04 	str.w	r3, [r1], #4
 800aa48:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aa4c:	d2e9      	bcs.n	800aa22 <quorem+0xac>
 800aa4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa56:	b922      	cbnz	r2, 800aa62 <quorem+0xec>
 800aa58:	3b04      	subs	r3, #4
 800aa5a:	429d      	cmp	r5, r3
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	d30a      	bcc.n	800aa76 <quorem+0x100>
 800aa60:	613c      	str	r4, [r7, #16]
 800aa62:	4630      	mov	r0, r6
 800aa64:	b003      	add	sp, #12
 800aa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6a:	6812      	ldr	r2, [r2, #0]
 800aa6c:	3b04      	subs	r3, #4
 800aa6e:	2a00      	cmp	r2, #0
 800aa70:	d1ce      	bne.n	800aa10 <quorem+0x9a>
 800aa72:	3c01      	subs	r4, #1
 800aa74:	e7c9      	b.n	800aa0a <quorem+0x94>
 800aa76:	6812      	ldr	r2, [r2, #0]
 800aa78:	3b04      	subs	r3, #4
 800aa7a:	2a00      	cmp	r2, #0
 800aa7c:	d1f0      	bne.n	800aa60 <quorem+0xea>
 800aa7e:	3c01      	subs	r4, #1
 800aa80:	e7eb      	b.n	800aa5a <quorem+0xe4>
 800aa82:	2000      	movs	r0, #0
 800aa84:	e7ee      	b.n	800aa64 <quorem+0xee>
	...

0800aa88 <_dtoa_r>:
 800aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8c:	ed2d 8b04 	vpush	{d8-d9}
 800aa90:	69c5      	ldr	r5, [r0, #28]
 800aa92:	b093      	sub	sp, #76	; 0x4c
 800aa94:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aa98:	ec57 6b10 	vmov	r6, r7, d0
 800aa9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aaa0:	9107      	str	r1, [sp, #28]
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	920a      	str	r2, [sp, #40]	; 0x28
 800aaa6:	930d      	str	r3, [sp, #52]	; 0x34
 800aaa8:	b975      	cbnz	r5, 800aac8 <_dtoa_r+0x40>
 800aaaa:	2010      	movs	r0, #16
 800aaac:	f000 fe2a 	bl	800b704 <malloc>
 800aab0:	4602      	mov	r2, r0
 800aab2:	61e0      	str	r0, [r4, #28]
 800aab4:	b920      	cbnz	r0, 800aac0 <_dtoa_r+0x38>
 800aab6:	4bae      	ldr	r3, [pc, #696]	; (800ad70 <_dtoa_r+0x2e8>)
 800aab8:	21ef      	movs	r1, #239	; 0xef
 800aaba:	48ae      	ldr	r0, [pc, #696]	; (800ad74 <_dtoa_r+0x2ec>)
 800aabc:	f001 fce6 	bl	800c48c <__assert_func>
 800aac0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aac4:	6005      	str	r5, [r0, #0]
 800aac6:	60c5      	str	r5, [r0, #12]
 800aac8:	69e3      	ldr	r3, [r4, #28]
 800aaca:	6819      	ldr	r1, [r3, #0]
 800aacc:	b151      	cbz	r1, 800aae4 <_dtoa_r+0x5c>
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	604a      	str	r2, [r1, #4]
 800aad2:	2301      	movs	r3, #1
 800aad4:	4093      	lsls	r3, r2
 800aad6:	608b      	str	r3, [r1, #8]
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 ff07 	bl	800b8ec <_Bfree>
 800aade:	69e3      	ldr	r3, [r4, #28]
 800aae0:	2200      	movs	r2, #0
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	1e3b      	subs	r3, r7, #0
 800aae6:	bfbb      	ittet	lt
 800aae8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aaec:	9303      	strlt	r3, [sp, #12]
 800aaee:	2300      	movge	r3, #0
 800aaf0:	2201      	movlt	r2, #1
 800aaf2:	bfac      	ite	ge
 800aaf4:	f8c8 3000 	strge.w	r3, [r8]
 800aaf8:	f8c8 2000 	strlt.w	r2, [r8]
 800aafc:	4b9e      	ldr	r3, [pc, #632]	; (800ad78 <_dtoa_r+0x2f0>)
 800aafe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ab02:	ea33 0308 	bics.w	r3, r3, r8
 800ab06:	d11b      	bne.n	800ab40 <_dtoa_r+0xb8>
 800ab08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab0a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ab0e:	6013      	str	r3, [r2, #0]
 800ab10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ab14:	4333      	orrs	r3, r6
 800ab16:	f000 8593 	beq.w	800b640 <_dtoa_r+0xbb8>
 800ab1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab1c:	b963      	cbnz	r3, 800ab38 <_dtoa_r+0xb0>
 800ab1e:	4b97      	ldr	r3, [pc, #604]	; (800ad7c <_dtoa_r+0x2f4>)
 800ab20:	e027      	b.n	800ab72 <_dtoa_r+0xea>
 800ab22:	4b97      	ldr	r3, [pc, #604]	; (800ad80 <_dtoa_r+0x2f8>)
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	3308      	adds	r3, #8
 800ab28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab2a:	6013      	str	r3, [r2, #0]
 800ab2c:	9800      	ldr	r0, [sp, #0]
 800ab2e:	b013      	add	sp, #76	; 0x4c
 800ab30:	ecbd 8b04 	vpop	{d8-d9}
 800ab34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab38:	4b90      	ldr	r3, [pc, #576]	; (800ad7c <_dtoa_r+0x2f4>)
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	3303      	adds	r3, #3
 800ab3e:	e7f3      	b.n	800ab28 <_dtoa_r+0xa0>
 800ab40:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab44:	2200      	movs	r2, #0
 800ab46:	ec51 0b17 	vmov	r0, r1, d7
 800ab4a:	eeb0 8a47 	vmov.f32	s16, s14
 800ab4e:	eef0 8a67 	vmov.f32	s17, s15
 800ab52:	2300      	movs	r3, #0
 800ab54:	f7f5 ffd0 	bl	8000af8 <__aeabi_dcmpeq>
 800ab58:	4681      	mov	r9, r0
 800ab5a:	b160      	cbz	r0, 800ab76 <_dtoa_r+0xee>
 800ab5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab5e:	2301      	movs	r3, #1
 800ab60:	6013      	str	r3, [r2, #0]
 800ab62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f000 8568 	beq.w	800b63a <_dtoa_r+0xbb2>
 800ab6a:	4b86      	ldr	r3, [pc, #536]	; (800ad84 <_dtoa_r+0x2fc>)
 800ab6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab6e:	6013      	str	r3, [r2, #0]
 800ab70:	3b01      	subs	r3, #1
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	e7da      	b.n	800ab2c <_dtoa_r+0xa4>
 800ab76:	aa10      	add	r2, sp, #64	; 0x40
 800ab78:	a911      	add	r1, sp, #68	; 0x44
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	eeb0 0a48 	vmov.f32	s0, s16
 800ab80:	eef0 0a68 	vmov.f32	s1, s17
 800ab84:	f001 f994 	bl	800beb0 <__d2b>
 800ab88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ab8c:	4682      	mov	sl, r0
 800ab8e:	2d00      	cmp	r5, #0
 800ab90:	d07f      	beq.n	800ac92 <_dtoa_r+0x20a>
 800ab92:	ee18 3a90 	vmov	r3, s17
 800ab96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ab9e:	ec51 0b18 	vmov	r0, r1, d8
 800aba2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aba6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800abaa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800abae:	4619      	mov	r1, r3
 800abb0:	2200      	movs	r2, #0
 800abb2:	4b75      	ldr	r3, [pc, #468]	; (800ad88 <_dtoa_r+0x300>)
 800abb4:	f7f5 fb80 	bl	80002b8 <__aeabi_dsub>
 800abb8:	a367      	add	r3, pc, #412	; (adr r3, 800ad58 <_dtoa_r+0x2d0>)
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	f7f5 fd33 	bl	8000628 <__aeabi_dmul>
 800abc2:	a367      	add	r3, pc, #412	; (adr r3, 800ad60 <_dtoa_r+0x2d8>)
 800abc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc8:	f7f5 fb78 	bl	80002bc <__adddf3>
 800abcc:	4606      	mov	r6, r0
 800abce:	4628      	mov	r0, r5
 800abd0:	460f      	mov	r7, r1
 800abd2:	f7f5 fcbf 	bl	8000554 <__aeabi_i2d>
 800abd6:	a364      	add	r3, pc, #400	; (adr r3, 800ad68 <_dtoa_r+0x2e0>)
 800abd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abdc:	f7f5 fd24 	bl	8000628 <__aeabi_dmul>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	4630      	mov	r0, r6
 800abe6:	4639      	mov	r1, r7
 800abe8:	f7f5 fb68 	bl	80002bc <__adddf3>
 800abec:	4606      	mov	r6, r0
 800abee:	460f      	mov	r7, r1
 800abf0:	f7f5 ffca 	bl	8000b88 <__aeabi_d2iz>
 800abf4:	2200      	movs	r2, #0
 800abf6:	4683      	mov	fp, r0
 800abf8:	2300      	movs	r3, #0
 800abfa:	4630      	mov	r0, r6
 800abfc:	4639      	mov	r1, r7
 800abfe:	f7f5 ff85 	bl	8000b0c <__aeabi_dcmplt>
 800ac02:	b148      	cbz	r0, 800ac18 <_dtoa_r+0x190>
 800ac04:	4658      	mov	r0, fp
 800ac06:	f7f5 fca5 	bl	8000554 <__aeabi_i2d>
 800ac0a:	4632      	mov	r2, r6
 800ac0c:	463b      	mov	r3, r7
 800ac0e:	f7f5 ff73 	bl	8000af8 <__aeabi_dcmpeq>
 800ac12:	b908      	cbnz	r0, 800ac18 <_dtoa_r+0x190>
 800ac14:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac18:	f1bb 0f16 	cmp.w	fp, #22
 800ac1c:	d857      	bhi.n	800acce <_dtoa_r+0x246>
 800ac1e:	4b5b      	ldr	r3, [pc, #364]	; (800ad8c <_dtoa_r+0x304>)
 800ac20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac28:	ec51 0b18 	vmov	r0, r1, d8
 800ac2c:	f7f5 ff6e 	bl	8000b0c <__aeabi_dcmplt>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d04e      	beq.n	800acd2 <_dtoa_r+0x24a>
 800ac34:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac38:	2300      	movs	r3, #0
 800ac3a:	930c      	str	r3, [sp, #48]	; 0x30
 800ac3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac3e:	1b5b      	subs	r3, r3, r5
 800ac40:	1e5a      	subs	r2, r3, #1
 800ac42:	bf45      	ittet	mi
 800ac44:	f1c3 0301 	rsbmi	r3, r3, #1
 800ac48:	9305      	strmi	r3, [sp, #20]
 800ac4a:	2300      	movpl	r3, #0
 800ac4c:	2300      	movmi	r3, #0
 800ac4e:	9206      	str	r2, [sp, #24]
 800ac50:	bf54      	ite	pl
 800ac52:	9305      	strpl	r3, [sp, #20]
 800ac54:	9306      	strmi	r3, [sp, #24]
 800ac56:	f1bb 0f00 	cmp.w	fp, #0
 800ac5a:	db3c      	blt.n	800acd6 <_dtoa_r+0x24e>
 800ac5c:	9b06      	ldr	r3, [sp, #24]
 800ac5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ac62:	445b      	add	r3, fp
 800ac64:	9306      	str	r3, [sp, #24]
 800ac66:	2300      	movs	r3, #0
 800ac68:	9308      	str	r3, [sp, #32]
 800ac6a:	9b07      	ldr	r3, [sp, #28]
 800ac6c:	2b09      	cmp	r3, #9
 800ac6e:	d868      	bhi.n	800ad42 <_dtoa_r+0x2ba>
 800ac70:	2b05      	cmp	r3, #5
 800ac72:	bfc4      	itt	gt
 800ac74:	3b04      	subgt	r3, #4
 800ac76:	9307      	strgt	r3, [sp, #28]
 800ac78:	9b07      	ldr	r3, [sp, #28]
 800ac7a:	f1a3 0302 	sub.w	r3, r3, #2
 800ac7e:	bfcc      	ite	gt
 800ac80:	2500      	movgt	r5, #0
 800ac82:	2501      	movle	r5, #1
 800ac84:	2b03      	cmp	r3, #3
 800ac86:	f200 8085 	bhi.w	800ad94 <_dtoa_r+0x30c>
 800ac8a:	e8df f003 	tbb	[pc, r3]
 800ac8e:	3b2e      	.short	0x3b2e
 800ac90:	5839      	.short	0x5839
 800ac92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ac96:	441d      	add	r5, r3
 800ac98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac9c:	2b20      	cmp	r3, #32
 800ac9e:	bfc1      	itttt	gt
 800aca0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aca4:	fa08 f803 	lslgt.w	r8, r8, r3
 800aca8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800acac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800acb0:	bfd6      	itet	le
 800acb2:	f1c3 0320 	rsble	r3, r3, #32
 800acb6:	ea48 0003 	orrgt.w	r0, r8, r3
 800acba:	fa06 f003 	lslle.w	r0, r6, r3
 800acbe:	f7f5 fc39 	bl	8000534 <__aeabi_ui2d>
 800acc2:	2201      	movs	r2, #1
 800acc4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800acc8:	3d01      	subs	r5, #1
 800acca:	920e      	str	r2, [sp, #56]	; 0x38
 800accc:	e76f      	b.n	800abae <_dtoa_r+0x126>
 800acce:	2301      	movs	r3, #1
 800acd0:	e7b3      	b.n	800ac3a <_dtoa_r+0x1b2>
 800acd2:	900c      	str	r0, [sp, #48]	; 0x30
 800acd4:	e7b2      	b.n	800ac3c <_dtoa_r+0x1b4>
 800acd6:	9b05      	ldr	r3, [sp, #20]
 800acd8:	eba3 030b 	sub.w	r3, r3, fp
 800acdc:	9305      	str	r3, [sp, #20]
 800acde:	f1cb 0300 	rsb	r3, fp, #0
 800ace2:	9308      	str	r3, [sp, #32]
 800ace4:	2300      	movs	r3, #0
 800ace6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ace8:	e7bf      	b.n	800ac6a <_dtoa_r+0x1e2>
 800acea:	2300      	movs	r3, #0
 800acec:	9309      	str	r3, [sp, #36]	; 0x24
 800acee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	dc52      	bgt.n	800ad9a <_dtoa_r+0x312>
 800acf4:	2301      	movs	r3, #1
 800acf6:	9301      	str	r3, [sp, #4]
 800acf8:	9304      	str	r3, [sp, #16]
 800acfa:	461a      	mov	r2, r3
 800acfc:	920a      	str	r2, [sp, #40]	; 0x28
 800acfe:	e00b      	b.n	800ad18 <_dtoa_r+0x290>
 800ad00:	2301      	movs	r3, #1
 800ad02:	e7f3      	b.n	800acec <_dtoa_r+0x264>
 800ad04:	2300      	movs	r3, #0
 800ad06:	9309      	str	r3, [sp, #36]	; 0x24
 800ad08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad0a:	445b      	add	r3, fp
 800ad0c:	9301      	str	r3, [sp, #4]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	9304      	str	r3, [sp, #16]
 800ad14:	bfb8      	it	lt
 800ad16:	2301      	movlt	r3, #1
 800ad18:	69e0      	ldr	r0, [r4, #28]
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	2204      	movs	r2, #4
 800ad1e:	f102 0614 	add.w	r6, r2, #20
 800ad22:	429e      	cmp	r6, r3
 800ad24:	d93d      	bls.n	800ada2 <_dtoa_r+0x31a>
 800ad26:	6041      	str	r1, [r0, #4]
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f000 fd9f 	bl	800b86c <_Balloc>
 800ad2e:	9000      	str	r0, [sp, #0]
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d139      	bne.n	800ada8 <_dtoa_r+0x320>
 800ad34:	4b16      	ldr	r3, [pc, #88]	; (800ad90 <_dtoa_r+0x308>)
 800ad36:	4602      	mov	r2, r0
 800ad38:	f240 11af 	movw	r1, #431	; 0x1af
 800ad3c:	e6bd      	b.n	800aaba <_dtoa_r+0x32>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e7e1      	b.n	800ad06 <_dtoa_r+0x27e>
 800ad42:	2501      	movs	r5, #1
 800ad44:	2300      	movs	r3, #0
 800ad46:	9307      	str	r3, [sp, #28]
 800ad48:	9509      	str	r5, [sp, #36]	; 0x24
 800ad4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	9304      	str	r3, [sp, #16]
 800ad52:	2200      	movs	r2, #0
 800ad54:	2312      	movs	r3, #18
 800ad56:	e7d1      	b.n	800acfc <_dtoa_r+0x274>
 800ad58:	636f4361 	.word	0x636f4361
 800ad5c:	3fd287a7 	.word	0x3fd287a7
 800ad60:	8b60c8b3 	.word	0x8b60c8b3
 800ad64:	3fc68a28 	.word	0x3fc68a28
 800ad68:	509f79fb 	.word	0x509f79fb
 800ad6c:	3fd34413 	.word	0x3fd34413
 800ad70:	0800c7a9 	.word	0x0800c7a9
 800ad74:	0800c7c0 	.word	0x0800c7c0
 800ad78:	7ff00000 	.word	0x7ff00000
 800ad7c:	0800c7a5 	.word	0x0800c7a5
 800ad80:	0800c79c 	.word	0x0800c79c
 800ad84:	0800c779 	.word	0x0800c779
 800ad88:	3ff80000 	.word	0x3ff80000
 800ad8c:	0800c8b0 	.word	0x0800c8b0
 800ad90:	0800c818 	.word	0x0800c818
 800ad94:	2301      	movs	r3, #1
 800ad96:	9309      	str	r3, [sp, #36]	; 0x24
 800ad98:	e7d7      	b.n	800ad4a <_dtoa_r+0x2c2>
 800ad9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	9304      	str	r3, [sp, #16]
 800ada0:	e7ba      	b.n	800ad18 <_dtoa_r+0x290>
 800ada2:	3101      	adds	r1, #1
 800ada4:	0052      	lsls	r2, r2, #1
 800ada6:	e7ba      	b.n	800ad1e <_dtoa_r+0x296>
 800ada8:	69e3      	ldr	r3, [r4, #28]
 800adaa:	9a00      	ldr	r2, [sp, #0]
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	9b04      	ldr	r3, [sp, #16]
 800adb0:	2b0e      	cmp	r3, #14
 800adb2:	f200 80a8 	bhi.w	800af06 <_dtoa_r+0x47e>
 800adb6:	2d00      	cmp	r5, #0
 800adb8:	f000 80a5 	beq.w	800af06 <_dtoa_r+0x47e>
 800adbc:	f1bb 0f00 	cmp.w	fp, #0
 800adc0:	dd38      	ble.n	800ae34 <_dtoa_r+0x3ac>
 800adc2:	4bc0      	ldr	r3, [pc, #768]	; (800b0c4 <_dtoa_r+0x63c>)
 800adc4:	f00b 020f 	and.w	r2, fp, #15
 800adc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adcc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800add0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800add4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800add8:	d019      	beq.n	800ae0e <_dtoa_r+0x386>
 800adda:	4bbb      	ldr	r3, [pc, #748]	; (800b0c8 <_dtoa_r+0x640>)
 800addc:	ec51 0b18 	vmov	r0, r1, d8
 800ade0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ade4:	f7f5 fd4a 	bl	800087c <__aeabi_ddiv>
 800ade8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adec:	f008 080f 	and.w	r8, r8, #15
 800adf0:	2503      	movs	r5, #3
 800adf2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b0c8 <_dtoa_r+0x640>
 800adf6:	f1b8 0f00 	cmp.w	r8, #0
 800adfa:	d10a      	bne.n	800ae12 <_dtoa_r+0x38a>
 800adfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae00:	4632      	mov	r2, r6
 800ae02:	463b      	mov	r3, r7
 800ae04:	f7f5 fd3a 	bl	800087c <__aeabi_ddiv>
 800ae08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae0c:	e02b      	b.n	800ae66 <_dtoa_r+0x3de>
 800ae0e:	2502      	movs	r5, #2
 800ae10:	e7ef      	b.n	800adf2 <_dtoa_r+0x36a>
 800ae12:	f018 0f01 	tst.w	r8, #1
 800ae16:	d008      	beq.n	800ae2a <_dtoa_r+0x3a2>
 800ae18:	4630      	mov	r0, r6
 800ae1a:	4639      	mov	r1, r7
 800ae1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ae20:	f7f5 fc02 	bl	8000628 <__aeabi_dmul>
 800ae24:	3501      	adds	r5, #1
 800ae26:	4606      	mov	r6, r0
 800ae28:	460f      	mov	r7, r1
 800ae2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ae2e:	f109 0908 	add.w	r9, r9, #8
 800ae32:	e7e0      	b.n	800adf6 <_dtoa_r+0x36e>
 800ae34:	f000 809f 	beq.w	800af76 <_dtoa_r+0x4ee>
 800ae38:	f1cb 0600 	rsb	r6, fp, #0
 800ae3c:	4ba1      	ldr	r3, [pc, #644]	; (800b0c4 <_dtoa_r+0x63c>)
 800ae3e:	4fa2      	ldr	r7, [pc, #648]	; (800b0c8 <_dtoa_r+0x640>)
 800ae40:	f006 020f 	and.w	r2, r6, #15
 800ae44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4c:	ec51 0b18 	vmov	r0, r1, d8
 800ae50:	f7f5 fbea 	bl	8000628 <__aeabi_dmul>
 800ae54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae58:	1136      	asrs	r6, r6, #4
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	2502      	movs	r5, #2
 800ae5e:	2e00      	cmp	r6, #0
 800ae60:	d17e      	bne.n	800af60 <_dtoa_r+0x4d8>
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1d0      	bne.n	800ae08 <_dtoa_r+0x380>
 800ae66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 8084 	beq.w	800af7a <_dtoa_r+0x4f2>
 800ae72:	4b96      	ldr	r3, [pc, #600]	; (800b0cc <_dtoa_r+0x644>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	4640      	mov	r0, r8
 800ae78:	4649      	mov	r1, r9
 800ae7a:	f7f5 fe47 	bl	8000b0c <__aeabi_dcmplt>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d07b      	beq.n	800af7a <_dtoa_r+0x4f2>
 800ae82:	9b04      	ldr	r3, [sp, #16]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d078      	beq.n	800af7a <_dtoa_r+0x4f2>
 800ae88:	9b01      	ldr	r3, [sp, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	dd39      	ble.n	800af02 <_dtoa_r+0x47a>
 800ae8e:	4b90      	ldr	r3, [pc, #576]	; (800b0d0 <_dtoa_r+0x648>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	4640      	mov	r0, r8
 800ae94:	4649      	mov	r1, r9
 800ae96:	f7f5 fbc7 	bl	8000628 <__aeabi_dmul>
 800ae9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae9e:	9e01      	ldr	r6, [sp, #4]
 800aea0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800aea4:	3501      	adds	r5, #1
 800aea6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f7f5 fb52 	bl	8000554 <__aeabi_i2d>
 800aeb0:	4642      	mov	r2, r8
 800aeb2:	464b      	mov	r3, r9
 800aeb4:	f7f5 fbb8 	bl	8000628 <__aeabi_dmul>
 800aeb8:	4b86      	ldr	r3, [pc, #536]	; (800b0d4 <_dtoa_r+0x64c>)
 800aeba:	2200      	movs	r2, #0
 800aebc:	f7f5 f9fe 	bl	80002bc <__adddf3>
 800aec0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800aec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aec8:	9303      	str	r3, [sp, #12]
 800aeca:	2e00      	cmp	r6, #0
 800aecc:	d158      	bne.n	800af80 <_dtoa_r+0x4f8>
 800aece:	4b82      	ldr	r3, [pc, #520]	; (800b0d8 <_dtoa_r+0x650>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	4640      	mov	r0, r8
 800aed4:	4649      	mov	r1, r9
 800aed6:	f7f5 f9ef 	bl	80002b8 <__aeabi_dsub>
 800aeda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aede:	4680      	mov	r8, r0
 800aee0:	4689      	mov	r9, r1
 800aee2:	f7f5 fe31 	bl	8000b48 <__aeabi_dcmpgt>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	f040 8296 	bne.w	800b418 <_dtoa_r+0x990>
 800aeec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800aef0:	4640      	mov	r0, r8
 800aef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aef6:	4649      	mov	r1, r9
 800aef8:	f7f5 fe08 	bl	8000b0c <__aeabi_dcmplt>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	f040 8289 	bne.w	800b414 <_dtoa_r+0x98c>
 800af02:	ed8d 8b02 	vstr	d8, [sp, #8]
 800af06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f2c0 814e 	blt.w	800b1aa <_dtoa_r+0x722>
 800af0e:	f1bb 0f0e 	cmp.w	fp, #14
 800af12:	f300 814a 	bgt.w	800b1aa <_dtoa_r+0x722>
 800af16:	4b6b      	ldr	r3, [pc, #428]	; (800b0c4 <_dtoa_r+0x63c>)
 800af18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800af1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af22:	2b00      	cmp	r3, #0
 800af24:	f280 80dc 	bge.w	800b0e0 <_dtoa_r+0x658>
 800af28:	9b04      	ldr	r3, [sp, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f300 80d8 	bgt.w	800b0e0 <_dtoa_r+0x658>
 800af30:	f040 826f 	bne.w	800b412 <_dtoa_r+0x98a>
 800af34:	4b68      	ldr	r3, [pc, #416]	; (800b0d8 <_dtoa_r+0x650>)
 800af36:	2200      	movs	r2, #0
 800af38:	4640      	mov	r0, r8
 800af3a:	4649      	mov	r1, r9
 800af3c:	f7f5 fb74 	bl	8000628 <__aeabi_dmul>
 800af40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af44:	f7f5 fdf6 	bl	8000b34 <__aeabi_dcmpge>
 800af48:	9e04      	ldr	r6, [sp, #16]
 800af4a:	4637      	mov	r7, r6
 800af4c:	2800      	cmp	r0, #0
 800af4e:	f040 8245 	bne.w	800b3dc <_dtoa_r+0x954>
 800af52:	9d00      	ldr	r5, [sp, #0]
 800af54:	2331      	movs	r3, #49	; 0x31
 800af56:	f805 3b01 	strb.w	r3, [r5], #1
 800af5a:	f10b 0b01 	add.w	fp, fp, #1
 800af5e:	e241      	b.n	800b3e4 <_dtoa_r+0x95c>
 800af60:	07f2      	lsls	r2, r6, #31
 800af62:	d505      	bpl.n	800af70 <_dtoa_r+0x4e8>
 800af64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af68:	f7f5 fb5e 	bl	8000628 <__aeabi_dmul>
 800af6c:	3501      	adds	r5, #1
 800af6e:	2301      	movs	r3, #1
 800af70:	1076      	asrs	r6, r6, #1
 800af72:	3708      	adds	r7, #8
 800af74:	e773      	b.n	800ae5e <_dtoa_r+0x3d6>
 800af76:	2502      	movs	r5, #2
 800af78:	e775      	b.n	800ae66 <_dtoa_r+0x3de>
 800af7a:	9e04      	ldr	r6, [sp, #16]
 800af7c:	465f      	mov	r7, fp
 800af7e:	e792      	b.n	800aea6 <_dtoa_r+0x41e>
 800af80:	9900      	ldr	r1, [sp, #0]
 800af82:	4b50      	ldr	r3, [pc, #320]	; (800b0c4 <_dtoa_r+0x63c>)
 800af84:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af88:	4431      	add	r1, r6
 800af8a:	9102      	str	r1, [sp, #8]
 800af8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af8e:	eeb0 9a47 	vmov.f32	s18, s14
 800af92:	eef0 9a67 	vmov.f32	s19, s15
 800af96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af9e:	2900      	cmp	r1, #0
 800afa0:	d044      	beq.n	800b02c <_dtoa_r+0x5a4>
 800afa2:	494e      	ldr	r1, [pc, #312]	; (800b0dc <_dtoa_r+0x654>)
 800afa4:	2000      	movs	r0, #0
 800afa6:	f7f5 fc69 	bl	800087c <__aeabi_ddiv>
 800afaa:	ec53 2b19 	vmov	r2, r3, d9
 800afae:	f7f5 f983 	bl	80002b8 <__aeabi_dsub>
 800afb2:	9d00      	ldr	r5, [sp, #0]
 800afb4:	ec41 0b19 	vmov	d9, r0, r1
 800afb8:	4649      	mov	r1, r9
 800afba:	4640      	mov	r0, r8
 800afbc:	f7f5 fde4 	bl	8000b88 <__aeabi_d2iz>
 800afc0:	4606      	mov	r6, r0
 800afc2:	f7f5 fac7 	bl	8000554 <__aeabi_i2d>
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
 800afca:	4640      	mov	r0, r8
 800afcc:	4649      	mov	r1, r9
 800afce:	f7f5 f973 	bl	80002b8 <__aeabi_dsub>
 800afd2:	3630      	adds	r6, #48	; 0x30
 800afd4:	f805 6b01 	strb.w	r6, [r5], #1
 800afd8:	ec53 2b19 	vmov	r2, r3, d9
 800afdc:	4680      	mov	r8, r0
 800afde:	4689      	mov	r9, r1
 800afe0:	f7f5 fd94 	bl	8000b0c <__aeabi_dcmplt>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d164      	bne.n	800b0b2 <_dtoa_r+0x62a>
 800afe8:	4642      	mov	r2, r8
 800afea:	464b      	mov	r3, r9
 800afec:	4937      	ldr	r1, [pc, #220]	; (800b0cc <_dtoa_r+0x644>)
 800afee:	2000      	movs	r0, #0
 800aff0:	f7f5 f962 	bl	80002b8 <__aeabi_dsub>
 800aff4:	ec53 2b19 	vmov	r2, r3, d9
 800aff8:	f7f5 fd88 	bl	8000b0c <__aeabi_dcmplt>
 800affc:	2800      	cmp	r0, #0
 800affe:	f040 80b6 	bne.w	800b16e <_dtoa_r+0x6e6>
 800b002:	9b02      	ldr	r3, [sp, #8]
 800b004:	429d      	cmp	r5, r3
 800b006:	f43f af7c 	beq.w	800af02 <_dtoa_r+0x47a>
 800b00a:	4b31      	ldr	r3, [pc, #196]	; (800b0d0 <_dtoa_r+0x648>)
 800b00c:	ec51 0b19 	vmov	r0, r1, d9
 800b010:	2200      	movs	r2, #0
 800b012:	f7f5 fb09 	bl	8000628 <__aeabi_dmul>
 800b016:	4b2e      	ldr	r3, [pc, #184]	; (800b0d0 <_dtoa_r+0x648>)
 800b018:	ec41 0b19 	vmov	d9, r0, r1
 800b01c:	2200      	movs	r2, #0
 800b01e:	4640      	mov	r0, r8
 800b020:	4649      	mov	r1, r9
 800b022:	f7f5 fb01 	bl	8000628 <__aeabi_dmul>
 800b026:	4680      	mov	r8, r0
 800b028:	4689      	mov	r9, r1
 800b02a:	e7c5      	b.n	800afb8 <_dtoa_r+0x530>
 800b02c:	ec51 0b17 	vmov	r0, r1, d7
 800b030:	f7f5 fafa 	bl	8000628 <__aeabi_dmul>
 800b034:	9b02      	ldr	r3, [sp, #8]
 800b036:	9d00      	ldr	r5, [sp, #0]
 800b038:	930f      	str	r3, [sp, #60]	; 0x3c
 800b03a:	ec41 0b19 	vmov	d9, r0, r1
 800b03e:	4649      	mov	r1, r9
 800b040:	4640      	mov	r0, r8
 800b042:	f7f5 fda1 	bl	8000b88 <__aeabi_d2iz>
 800b046:	4606      	mov	r6, r0
 800b048:	f7f5 fa84 	bl	8000554 <__aeabi_i2d>
 800b04c:	3630      	adds	r6, #48	; 0x30
 800b04e:	4602      	mov	r2, r0
 800b050:	460b      	mov	r3, r1
 800b052:	4640      	mov	r0, r8
 800b054:	4649      	mov	r1, r9
 800b056:	f7f5 f92f 	bl	80002b8 <__aeabi_dsub>
 800b05a:	f805 6b01 	strb.w	r6, [r5], #1
 800b05e:	9b02      	ldr	r3, [sp, #8]
 800b060:	429d      	cmp	r5, r3
 800b062:	4680      	mov	r8, r0
 800b064:	4689      	mov	r9, r1
 800b066:	f04f 0200 	mov.w	r2, #0
 800b06a:	d124      	bne.n	800b0b6 <_dtoa_r+0x62e>
 800b06c:	4b1b      	ldr	r3, [pc, #108]	; (800b0dc <_dtoa_r+0x654>)
 800b06e:	ec51 0b19 	vmov	r0, r1, d9
 800b072:	f7f5 f923 	bl	80002bc <__adddf3>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	4640      	mov	r0, r8
 800b07c:	4649      	mov	r1, r9
 800b07e:	f7f5 fd63 	bl	8000b48 <__aeabi_dcmpgt>
 800b082:	2800      	cmp	r0, #0
 800b084:	d173      	bne.n	800b16e <_dtoa_r+0x6e6>
 800b086:	ec53 2b19 	vmov	r2, r3, d9
 800b08a:	4914      	ldr	r1, [pc, #80]	; (800b0dc <_dtoa_r+0x654>)
 800b08c:	2000      	movs	r0, #0
 800b08e:	f7f5 f913 	bl	80002b8 <__aeabi_dsub>
 800b092:	4602      	mov	r2, r0
 800b094:	460b      	mov	r3, r1
 800b096:	4640      	mov	r0, r8
 800b098:	4649      	mov	r1, r9
 800b09a:	f7f5 fd37 	bl	8000b0c <__aeabi_dcmplt>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	f43f af2f 	beq.w	800af02 <_dtoa_r+0x47a>
 800b0a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b0a6:	1e6b      	subs	r3, r5, #1
 800b0a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b0ae:	2b30      	cmp	r3, #48	; 0x30
 800b0b0:	d0f8      	beq.n	800b0a4 <_dtoa_r+0x61c>
 800b0b2:	46bb      	mov	fp, r7
 800b0b4:	e04a      	b.n	800b14c <_dtoa_r+0x6c4>
 800b0b6:	4b06      	ldr	r3, [pc, #24]	; (800b0d0 <_dtoa_r+0x648>)
 800b0b8:	f7f5 fab6 	bl	8000628 <__aeabi_dmul>
 800b0bc:	4680      	mov	r8, r0
 800b0be:	4689      	mov	r9, r1
 800b0c0:	e7bd      	b.n	800b03e <_dtoa_r+0x5b6>
 800b0c2:	bf00      	nop
 800b0c4:	0800c8b0 	.word	0x0800c8b0
 800b0c8:	0800c888 	.word	0x0800c888
 800b0cc:	3ff00000 	.word	0x3ff00000
 800b0d0:	40240000 	.word	0x40240000
 800b0d4:	401c0000 	.word	0x401c0000
 800b0d8:	40140000 	.word	0x40140000
 800b0dc:	3fe00000 	.word	0x3fe00000
 800b0e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b0e4:	9d00      	ldr	r5, [sp, #0]
 800b0e6:	4642      	mov	r2, r8
 800b0e8:	464b      	mov	r3, r9
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	4639      	mov	r1, r7
 800b0ee:	f7f5 fbc5 	bl	800087c <__aeabi_ddiv>
 800b0f2:	f7f5 fd49 	bl	8000b88 <__aeabi_d2iz>
 800b0f6:	9001      	str	r0, [sp, #4]
 800b0f8:	f7f5 fa2c 	bl	8000554 <__aeabi_i2d>
 800b0fc:	4642      	mov	r2, r8
 800b0fe:	464b      	mov	r3, r9
 800b100:	f7f5 fa92 	bl	8000628 <__aeabi_dmul>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4630      	mov	r0, r6
 800b10a:	4639      	mov	r1, r7
 800b10c:	f7f5 f8d4 	bl	80002b8 <__aeabi_dsub>
 800b110:	9e01      	ldr	r6, [sp, #4]
 800b112:	9f04      	ldr	r7, [sp, #16]
 800b114:	3630      	adds	r6, #48	; 0x30
 800b116:	f805 6b01 	strb.w	r6, [r5], #1
 800b11a:	9e00      	ldr	r6, [sp, #0]
 800b11c:	1bae      	subs	r6, r5, r6
 800b11e:	42b7      	cmp	r7, r6
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	d134      	bne.n	800b190 <_dtoa_r+0x708>
 800b126:	f7f5 f8c9 	bl	80002bc <__adddf3>
 800b12a:	4642      	mov	r2, r8
 800b12c:	464b      	mov	r3, r9
 800b12e:	4606      	mov	r6, r0
 800b130:	460f      	mov	r7, r1
 800b132:	f7f5 fd09 	bl	8000b48 <__aeabi_dcmpgt>
 800b136:	b9c8      	cbnz	r0, 800b16c <_dtoa_r+0x6e4>
 800b138:	4642      	mov	r2, r8
 800b13a:	464b      	mov	r3, r9
 800b13c:	4630      	mov	r0, r6
 800b13e:	4639      	mov	r1, r7
 800b140:	f7f5 fcda 	bl	8000af8 <__aeabi_dcmpeq>
 800b144:	b110      	cbz	r0, 800b14c <_dtoa_r+0x6c4>
 800b146:	9b01      	ldr	r3, [sp, #4]
 800b148:	07db      	lsls	r3, r3, #31
 800b14a:	d40f      	bmi.n	800b16c <_dtoa_r+0x6e4>
 800b14c:	4651      	mov	r1, sl
 800b14e:	4620      	mov	r0, r4
 800b150:	f000 fbcc 	bl	800b8ec <_Bfree>
 800b154:	2300      	movs	r3, #0
 800b156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b158:	702b      	strb	r3, [r5, #0]
 800b15a:	f10b 0301 	add.w	r3, fp, #1
 800b15e:	6013      	str	r3, [r2, #0]
 800b160:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b162:	2b00      	cmp	r3, #0
 800b164:	f43f ace2 	beq.w	800ab2c <_dtoa_r+0xa4>
 800b168:	601d      	str	r5, [r3, #0]
 800b16a:	e4df      	b.n	800ab2c <_dtoa_r+0xa4>
 800b16c:	465f      	mov	r7, fp
 800b16e:	462b      	mov	r3, r5
 800b170:	461d      	mov	r5, r3
 800b172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b176:	2a39      	cmp	r2, #57	; 0x39
 800b178:	d106      	bne.n	800b188 <_dtoa_r+0x700>
 800b17a:	9a00      	ldr	r2, [sp, #0]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d1f7      	bne.n	800b170 <_dtoa_r+0x6e8>
 800b180:	9900      	ldr	r1, [sp, #0]
 800b182:	2230      	movs	r2, #48	; 0x30
 800b184:	3701      	adds	r7, #1
 800b186:	700a      	strb	r2, [r1, #0]
 800b188:	781a      	ldrb	r2, [r3, #0]
 800b18a:	3201      	adds	r2, #1
 800b18c:	701a      	strb	r2, [r3, #0]
 800b18e:	e790      	b.n	800b0b2 <_dtoa_r+0x62a>
 800b190:	4ba3      	ldr	r3, [pc, #652]	; (800b420 <_dtoa_r+0x998>)
 800b192:	2200      	movs	r2, #0
 800b194:	f7f5 fa48 	bl	8000628 <__aeabi_dmul>
 800b198:	2200      	movs	r2, #0
 800b19a:	2300      	movs	r3, #0
 800b19c:	4606      	mov	r6, r0
 800b19e:	460f      	mov	r7, r1
 800b1a0:	f7f5 fcaa 	bl	8000af8 <__aeabi_dcmpeq>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d09e      	beq.n	800b0e6 <_dtoa_r+0x65e>
 800b1a8:	e7d0      	b.n	800b14c <_dtoa_r+0x6c4>
 800b1aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1ac:	2a00      	cmp	r2, #0
 800b1ae:	f000 80ca 	beq.w	800b346 <_dtoa_r+0x8be>
 800b1b2:	9a07      	ldr	r2, [sp, #28]
 800b1b4:	2a01      	cmp	r2, #1
 800b1b6:	f300 80ad 	bgt.w	800b314 <_dtoa_r+0x88c>
 800b1ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1bc:	2a00      	cmp	r2, #0
 800b1be:	f000 80a5 	beq.w	800b30c <_dtoa_r+0x884>
 800b1c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b1c6:	9e08      	ldr	r6, [sp, #32]
 800b1c8:	9d05      	ldr	r5, [sp, #20]
 800b1ca:	9a05      	ldr	r2, [sp, #20]
 800b1cc:	441a      	add	r2, r3
 800b1ce:	9205      	str	r2, [sp, #20]
 800b1d0:	9a06      	ldr	r2, [sp, #24]
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	441a      	add	r2, r3
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	9206      	str	r2, [sp, #24]
 800b1da:	f000 fc3d 	bl	800ba58 <__i2b>
 800b1de:	4607      	mov	r7, r0
 800b1e0:	b165      	cbz	r5, 800b1fc <_dtoa_r+0x774>
 800b1e2:	9b06      	ldr	r3, [sp, #24]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	dd09      	ble.n	800b1fc <_dtoa_r+0x774>
 800b1e8:	42ab      	cmp	r3, r5
 800b1ea:	9a05      	ldr	r2, [sp, #20]
 800b1ec:	bfa8      	it	ge
 800b1ee:	462b      	movge	r3, r5
 800b1f0:	1ad2      	subs	r2, r2, r3
 800b1f2:	9205      	str	r2, [sp, #20]
 800b1f4:	9a06      	ldr	r2, [sp, #24]
 800b1f6:	1aed      	subs	r5, r5, r3
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	9306      	str	r3, [sp, #24]
 800b1fc:	9b08      	ldr	r3, [sp, #32]
 800b1fe:	b1f3      	cbz	r3, 800b23e <_dtoa_r+0x7b6>
 800b200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b202:	2b00      	cmp	r3, #0
 800b204:	f000 80a3 	beq.w	800b34e <_dtoa_r+0x8c6>
 800b208:	2e00      	cmp	r6, #0
 800b20a:	dd10      	ble.n	800b22e <_dtoa_r+0x7a6>
 800b20c:	4639      	mov	r1, r7
 800b20e:	4632      	mov	r2, r6
 800b210:	4620      	mov	r0, r4
 800b212:	f000 fce1 	bl	800bbd8 <__pow5mult>
 800b216:	4652      	mov	r2, sl
 800b218:	4601      	mov	r1, r0
 800b21a:	4607      	mov	r7, r0
 800b21c:	4620      	mov	r0, r4
 800b21e:	f000 fc31 	bl	800ba84 <__multiply>
 800b222:	4651      	mov	r1, sl
 800b224:	4680      	mov	r8, r0
 800b226:	4620      	mov	r0, r4
 800b228:	f000 fb60 	bl	800b8ec <_Bfree>
 800b22c:	46c2      	mov	sl, r8
 800b22e:	9b08      	ldr	r3, [sp, #32]
 800b230:	1b9a      	subs	r2, r3, r6
 800b232:	d004      	beq.n	800b23e <_dtoa_r+0x7b6>
 800b234:	4651      	mov	r1, sl
 800b236:	4620      	mov	r0, r4
 800b238:	f000 fcce 	bl	800bbd8 <__pow5mult>
 800b23c:	4682      	mov	sl, r0
 800b23e:	2101      	movs	r1, #1
 800b240:	4620      	mov	r0, r4
 800b242:	f000 fc09 	bl	800ba58 <__i2b>
 800b246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b248:	2b00      	cmp	r3, #0
 800b24a:	4606      	mov	r6, r0
 800b24c:	f340 8081 	ble.w	800b352 <_dtoa_r+0x8ca>
 800b250:	461a      	mov	r2, r3
 800b252:	4601      	mov	r1, r0
 800b254:	4620      	mov	r0, r4
 800b256:	f000 fcbf 	bl	800bbd8 <__pow5mult>
 800b25a:	9b07      	ldr	r3, [sp, #28]
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	4606      	mov	r6, r0
 800b260:	dd7a      	ble.n	800b358 <_dtoa_r+0x8d0>
 800b262:	f04f 0800 	mov.w	r8, #0
 800b266:	6933      	ldr	r3, [r6, #16]
 800b268:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b26c:	6918      	ldr	r0, [r3, #16]
 800b26e:	f000 fba5 	bl	800b9bc <__hi0bits>
 800b272:	f1c0 0020 	rsb	r0, r0, #32
 800b276:	9b06      	ldr	r3, [sp, #24]
 800b278:	4418      	add	r0, r3
 800b27a:	f010 001f 	ands.w	r0, r0, #31
 800b27e:	f000 8094 	beq.w	800b3aa <_dtoa_r+0x922>
 800b282:	f1c0 0320 	rsb	r3, r0, #32
 800b286:	2b04      	cmp	r3, #4
 800b288:	f340 8085 	ble.w	800b396 <_dtoa_r+0x90e>
 800b28c:	9b05      	ldr	r3, [sp, #20]
 800b28e:	f1c0 001c 	rsb	r0, r0, #28
 800b292:	4403      	add	r3, r0
 800b294:	9305      	str	r3, [sp, #20]
 800b296:	9b06      	ldr	r3, [sp, #24]
 800b298:	4403      	add	r3, r0
 800b29a:	4405      	add	r5, r0
 800b29c:	9306      	str	r3, [sp, #24]
 800b29e:	9b05      	ldr	r3, [sp, #20]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	dd05      	ble.n	800b2b0 <_dtoa_r+0x828>
 800b2a4:	4651      	mov	r1, sl
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f000 fcef 	bl	800bc8c <__lshift>
 800b2ae:	4682      	mov	sl, r0
 800b2b0:	9b06      	ldr	r3, [sp, #24]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	dd05      	ble.n	800b2c2 <_dtoa_r+0x83a>
 800b2b6:	4631      	mov	r1, r6
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f000 fce6 	bl	800bc8c <__lshift>
 800b2c0:	4606      	mov	r6, r0
 800b2c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d072      	beq.n	800b3ae <_dtoa_r+0x926>
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	4650      	mov	r0, sl
 800b2cc:	f000 fd4a 	bl	800bd64 <__mcmp>
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	da6c      	bge.n	800b3ae <_dtoa_r+0x926>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	4651      	mov	r1, sl
 800b2d8:	220a      	movs	r2, #10
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f000 fb28 	bl	800b930 <__multadd>
 800b2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2e6:	4682      	mov	sl, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f000 81b0 	beq.w	800b64e <_dtoa_r+0xbc6>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	4639      	mov	r1, r7
 800b2f2:	220a      	movs	r2, #10
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	f000 fb1b 	bl	800b930 <__multadd>
 800b2fa:	9b01      	ldr	r3, [sp, #4]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	4607      	mov	r7, r0
 800b300:	f300 8096 	bgt.w	800b430 <_dtoa_r+0x9a8>
 800b304:	9b07      	ldr	r3, [sp, #28]
 800b306:	2b02      	cmp	r3, #2
 800b308:	dc59      	bgt.n	800b3be <_dtoa_r+0x936>
 800b30a:	e091      	b.n	800b430 <_dtoa_r+0x9a8>
 800b30c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b30e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b312:	e758      	b.n	800b1c6 <_dtoa_r+0x73e>
 800b314:	9b04      	ldr	r3, [sp, #16]
 800b316:	1e5e      	subs	r6, r3, #1
 800b318:	9b08      	ldr	r3, [sp, #32]
 800b31a:	42b3      	cmp	r3, r6
 800b31c:	bfbf      	itttt	lt
 800b31e:	9b08      	ldrlt	r3, [sp, #32]
 800b320:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b322:	9608      	strlt	r6, [sp, #32]
 800b324:	1af3      	sublt	r3, r6, r3
 800b326:	bfb4      	ite	lt
 800b328:	18d2      	addlt	r2, r2, r3
 800b32a:	1b9e      	subge	r6, r3, r6
 800b32c:	9b04      	ldr	r3, [sp, #16]
 800b32e:	bfbc      	itt	lt
 800b330:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b332:	2600      	movlt	r6, #0
 800b334:	2b00      	cmp	r3, #0
 800b336:	bfb7      	itett	lt
 800b338:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b33c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b340:	1a9d      	sublt	r5, r3, r2
 800b342:	2300      	movlt	r3, #0
 800b344:	e741      	b.n	800b1ca <_dtoa_r+0x742>
 800b346:	9e08      	ldr	r6, [sp, #32]
 800b348:	9d05      	ldr	r5, [sp, #20]
 800b34a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b34c:	e748      	b.n	800b1e0 <_dtoa_r+0x758>
 800b34e:	9a08      	ldr	r2, [sp, #32]
 800b350:	e770      	b.n	800b234 <_dtoa_r+0x7ac>
 800b352:	9b07      	ldr	r3, [sp, #28]
 800b354:	2b01      	cmp	r3, #1
 800b356:	dc19      	bgt.n	800b38c <_dtoa_r+0x904>
 800b358:	9b02      	ldr	r3, [sp, #8]
 800b35a:	b9bb      	cbnz	r3, 800b38c <_dtoa_r+0x904>
 800b35c:	9b03      	ldr	r3, [sp, #12]
 800b35e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b362:	b99b      	cbnz	r3, 800b38c <_dtoa_r+0x904>
 800b364:	9b03      	ldr	r3, [sp, #12]
 800b366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b36a:	0d1b      	lsrs	r3, r3, #20
 800b36c:	051b      	lsls	r3, r3, #20
 800b36e:	b183      	cbz	r3, 800b392 <_dtoa_r+0x90a>
 800b370:	9b05      	ldr	r3, [sp, #20]
 800b372:	3301      	adds	r3, #1
 800b374:	9305      	str	r3, [sp, #20]
 800b376:	9b06      	ldr	r3, [sp, #24]
 800b378:	3301      	adds	r3, #1
 800b37a:	9306      	str	r3, [sp, #24]
 800b37c:	f04f 0801 	mov.w	r8, #1
 800b380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b382:	2b00      	cmp	r3, #0
 800b384:	f47f af6f 	bne.w	800b266 <_dtoa_r+0x7de>
 800b388:	2001      	movs	r0, #1
 800b38a:	e774      	b.n	800b276 <_dtoa_r+0x7ee>
 800b38c:	f04f 0800 	mov.w	r8, #0
 800b390:	e7f6      	b.n	800b380 <_dtoa_r+0x8f8>
 800b392:	4698      	mov	r8, r3
 800b394:	e7f4      	b.n	800b380 <_dtoa_r+0x8f8>
 800b396:	d082      	beq.n	800b29e <_dtoa_r+0x816>
 800b398:	9a05      	ldr	r2, [sp, #20]
 800b39a:	331c      	adds	r3, #28
 800b39c:	441a      	add	r2, r3
 800b39e:	9205      	str	r2, [sp, #20]
 800b3a0:	9a06      	ldr	r2, [sp, #24]
 800b3a2:	441a      	add	r2, r3
 800b3a4:	441d      	add	r5, r3
 800b3a6:	9206      	str	r2, [sp, #24]
 800b3a8:	e779      	b.n	800b29e <_dtoa_r+0x816>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	e7f4      	b.n	800b398 <_dtoa_r+0x910>
 800b3ae:	9b04      	ldr	r3, [sp, #16]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	dc37      	bgt.n	800b424 <_dtoa_r+0x99c>
 800b3b4:	9b07      	ldr	r3, [sp, #28]
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	dd34      	ble.n	800b424 <_dtoa_r+0x99c>
 800b3ba:	9b04      	ldr	r3, [sp, #16]
 800b3bc:	9301      	str	r3, [sp, #4]
 800b3be:	9b01      	ldr	r3, [sp, #4]
 800b3c0:	b963      	cbnz	r3, 800b3dc <_dtoa_r+0x954>
 800b3c2:	4631      	mov	r1, r6
 800b3c4:	2205      	movs	r2, #5
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f000 fab2 	bl	800b930 <__multadd>
 800b3cc:	4601      	mov	r1, r0
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	4650      	mov	r0, sl
 800b3d2:	f000 fcc7 	bl	800bd64 <__mcmp>
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	f73f adbb 	bgt.w	800af52 <_dtoa_r+0x4ca>
 800b3dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3de:	9d00      	ldr	r5, [sp, #0]
 800b3e0:	ea6f 0b03 	mvn.w	fp, r3
 800b3e4:	f04f 0800 	mov.w	r8, #0
 800b3e8:	4631      	mov	r1, r6
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f000 fa7e 	bl	800b8ec <_Bfree>
 800b3f0:	2f00      	cmp	r7, #0
 800b3f2:	f43f aeab 	beq.w	800b14c <_dtoa_r+0x6c4>
 800b3f6:	f1b8 0f00 	cmp.w	r8, #0
 800b3fa:	d005      	beq.n	800b408 <_dtoa_r+0x980>
 800b3fc:	45b8      	cmp	r8, r7
 800b3fe:	d003      	beq.n	800b408 <_dtoa_r+0x980>
 800b400:	4641      	mov	r1, r8
 800b402:	4620      	mov	r0, r4
 800b404:	f000 fa72 	bl	800b8ec <_Bfree>
 800b408:	4639      	mov	r1, r7
 800b40a:	4620      	mov	r0, r4
 800b40c:	f000 fa6e 	bl	800b8ec <_Bfree>
 800b410:	e69c      	b.n	800b14c <_dtoa_r+0x6c4>
 800b412:	2600      	movs	r6, #0
 800b414:	4637      	mov	r7, r6
 800b416:	e7e1      	b.n	800b3dc <_dtoa_r+0x954>
 800b418:	46bb      	mov	fp, r7
 800b41a:	4637      	mov	r7, r6
 800b41c:	e599      	b.n	800af52 <_dtoa_r+0x4ca>
 800b41e:	bf00      	nop
 800b420:	40240000 	.word	0x40240000
 800b424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b426:	2b00      	cmp	r3, #0
 800b428:	f000 80c8 	beq.w	800b5bc <_dtoa_r+0xb34>
 800b42c:	9b04      	ldr	r3, [sp, #16]
 800b42e:	9301      	str	r3, [sp, #4]
 800b430:	2d00      	cmp	r5, #0
 800b432:	dd05      	ble.n	800b440 <_dtoa_r+0x9b8>
 800b434:	4639      	mov	r1, r7
 800b436:	462a      	mov	r2, r5
 800b438:	4620      	mov	r0, r4
 800b43a:	f000 fc27 	bl	800bc8c <__lshift>
 800b43e:	4607      	mov	r7, r0
 800b440:	f1b8 0f00 	cmp.w	r8, #0
 800b444:	d05b      	beq.n	800b4fe <_dtoa_r+0xa76>
 800b446:	6879      	ldr	r1, [r7, #4]
 800b448:	4620      	mov	r0, r4
 800b44a:	f000 fa0f 	bl	800b86c <_Balloc>
 800b44e:	4605      	mov	r5, r0
 800b450:	b928      	cbnz	r0, 800b45e <_dtoa_r+0x9d6>
 800b452:	4b83      	ldr	r3, [pc, #524]	; (800b660 <_dtoa_r+0xbd8>)
 800b454:	4602      	mov	r2, r0
 800b456:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b45a:	f7ff bb2e 	b.w	800aaba <_dtoa_r+0x32>
 800b45e:	693a      	ldr	r2, [r7, #16]
 800b460:	3202      	adds	r2, #2
 800b462:	0092      	lsls	r2, r2, #2
 800b464:	f107 010c 	add.w	r1, r7, #12
 800b468:	300c      	adds	r0, #12
 800b46a:	f001 f801 	bl	800c470 <memcpy>
 800b46e:	2201      	movs	r2, #1
 800b470:	4629      	mov	r1, r5
 800b472:	4620      	mov	r0, r4
 800b474:	f000 fc0a 	bl	800bc8c <__lshift>
 800b478:	9b00      	ldr	r3, [sp, #0]
 800b47a:	3301      	adds	r3, #1
 800b47c:	9304      	str	r3, [sp, #16]
 800b47e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b482:	4413      	add	r3, r2
 800b484:	9308      	str	r3, [sp, #32]
 800b486:	9b02      	ldr	r3, [sp, #8]
 800b488:	f003 0301 	and.w	r3, r3, #1
 800b48c:	46b8      	mov	r8, r7
 800b48e:	9306      	str	r3, [sp, #24]
 800b490:	4607      	mov	r7, r0
 800b492:	9b04      	ldr	r3, [sp, #16]
 800b494:	4631      	mov	r1, r6
 800b496:	3b01      	subs	r3, #1
 800b498:	4650      	mov	r0, sl
 800b49a:	9301      	str	r3, [sp, #4]
 800b49c:	f7ff fa6b 	bl	800a976 <quorem>
 800b4a0:	4641      	mov	r1, r8
 800b4a2:	9002      	str	r0, [sp, #8]
 800b4a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b4a8:	4650      	mov	r0, sl
 800b4aa:	f000 fc5b 	bl	800bd64 <__mcmp>
 800b4ae:	463a      	mov	r2, r7
 800b4b0:	9005      	str	r0, [sp, #20]
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 fc71 	bl	800bd9c <__mdiff>
 800b4ba:	68c2      	ldr	r2, [r0, #12]
 800b4bc:	4605      	mov	r5, r0
 800b4be:	bb02      	cbnz	r2, 800b502 <_dtoa_r+0xa7a>
 800b4c0:	4601      	mov	r1, r0
 800b4c2:	4650      	mov	r0, sl
 800b4c4:	f000 fc4e 	bl	800bd64 <__mcmp>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	4629      	mov	r1, r5
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	9209      	str	r2, [sp, #36]	; 0x24
 800b4d0:	f000 fa0c 	bl	800b8ec <_Bfree>
 800b4d4:	9b07      	ldr	r3, [sp, #28]
 800b4d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4d8:	9d04      	ldr	r5, [sp, #16]
 800b4da:	ea43 0102 	orr.w	r1, r3, r2
 800b4de:	9b06      	ldr	r3, [sp, #24]
 800b4e0:	4319      	orrs	r1, r3
 800b4e2:	d110      	bne.n	800b506 <_dtoa_r+0xa7e>
 800b4e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b4e8:	d029      	beq.n	800b53e <_dtoa_r+0xab6>
 800b4ea:	9b05      	ldr	r3, [sp, #20]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	dd02      	ble.n	800b4f6 <_dtoa_r+0xa6e>
 800b4f0:	9b02      	ldr	r3, [sp, #8]
 800b4f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b4f6:	9b01      	ldr	r3, [sp, #4]
 800b4f8:	f883 9000 	strb.w	r9, [r3]
 800b4fc:	e774      	b.n	800b3e8 <_dtoa_r+0x960>
 800b4fe:	4638      	mov	r0, r7
 800b500:	e7ba      	b.n	800b478 <_dtoa_r+0x9f0>
 800b502:	2201      	movs	r2, #1
 800b504:	e7e1      	b.n	800b4ca <_dtoa_r+0xa42>
 800b506:	9b05      	ldr	r3, [sp, #20]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	db04      	blt.n	800b516 <_dtoa_r+0xa8e>
 800b50c:	9907      	ldr	r1, [sp, #28]
 800b50e:	430b      	orrs	r3, r1
 800b510:	9906      	ldr	r1, [sp, #24]
 800b512:	430b      	orrs	r3, r1
 800b514:	d120      	bne.n	800b558 <_dtoa_r+0xad0>
 800b516:	2a00      	cmp	r2, #0
 800b518:	dded      	ble.n	800b4f6 <_dtoa_r+0xa6e>
 800b51a:	4651      	mov	r1, sl
 800b51c:	2201      	movs	r2, #1
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 fbb4 	bl	800bc8c <__lshift>
 800b524:	4631      	mov	r1, r6
 800b526:	4682      	mov	sl, r0
 800b528:	f000 fc1c 	bl	800bd64 <__mcmp>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	dc03      	bgt.n	800b538 <_dtoa_r+0xab0>
 800b530:	d1e1      	bne.n	800b4f6 <_dtoa_r+0xa6e>
 800b532:	f019 0f01 	tst.w	r9, #1
 800b536:	d0de      	beq.n	800b4f6 <_dtoa_r+0xa6e>
 800b538:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b53c:	d1d8      	bne.n	800b4f0 <_dtoa_r+0xa68>
 800b53e:	9a01      	ldr	r2, [sp, #4]
 800b540:	2339      	movs	r3, #57	; 0x39
 800b542:	7013      	strb	r3, [r2, #0]
 800b544:	462b      	mov	r3, r5
 800b546:	461d      	mov	r5, r3
 800b548:	3b01      	subs	r3, #1
 800b54a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b54e:	2a39      	cmp	r2, #57	; 0x39
 800b550:	d06c      	beq.n	800b62c <_dtoa_r+0xba4>
 800b552:	3201      	adds	r2, #1
 800b554:	701a      	strb	r2, [r3, #0]
 800b556:	e747      	b.n	800b3e8 <_dtoa_r+0x960>
 800b558:	2a00      	cmp	r2, #0
 800b55a:	dd07      	ble.n	800b56c <_dtoa_r+0xae4>
 800b55c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b560:	d0ed      	beq.n	800b53e <_dtoa_r+0xab6>
 800b562:	9a01      	ldr	r2, [sp, #4]
 800b564:	f109 0301 	add.w	r3, r9, #1
 800b568:	7013      	strb	r3, [r2, #0]
 800b56a:	e73d      	b.n	800b3e8 <_dtoa_r+0x960>
 800b56c:	9b04      	ldr	r3, [sp, #16]
 800b56e:	9a08      	ldr	r2, [sp, #32]
 800b570:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b574:	4293      	cmp	r3, r2
 800b576:	d043      	beq.n	800b600 <_dtoa_r+0xb78>
 800b578:	4651      	mov	r1, sl
 800b57a:	2300      	movs	r3, #0
 800b57c:	220a      	movs	r2, #10
 800b57e:	4620      	mov	r0, r4
 800b580:	f000 f9d6 	bl	800b930 <__multadd>
 800b584:	45b8      	cmp	r8, r7
 800b586:	4682      	mov	sl, r0
 800b588:	f04f 0300 	mov.w	r3, #0
 800b58c:	f04f 020a 	mov.w	r2, #10
 800b590:	4641      	mov	r1, r8
 800b592:	4620      	mov	r0, r4
 800b594:	d107      	bne.n	800b5a6 <_dtoa_r+0xb1e>
 800b596:	f000 f9cb 	bl	800b930 <__multadd>
 800b59a:	4680      	mov	r8, r0
 800b59c:	4607      	mov	r7, r0
 800b59e:	9b04      	ldr	r3, [sp, #16]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	9304      	str	r3, [sp, #16]
 800b5a4:	e775      	b.n	800b492 <_dtoa_r+0xa0a>
 800b5a6:	f000 f9c3 	bl	800b930 <__multadd>
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	4680      	mov	r8, r0
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	220a      	movs	r2, #10
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	f000 f9bc 	bl	800b930 <__multadd>
 800b5b8:	4607      	mov	r7, r0
 800b5ba:	e7f0      	b.n	800b59e <_dtoa_r+0xb16>
 800b5bc:	9b04      	ldr	r3, [sp, #16]
 800b5be:	9301      	str	r3, [sp, #4]
 800b5c0:	9d00      	ldr	r5, [sp, #0]
 800b5c2:	4631      	mov	r1, r6
 800b5c4:	4650      	mov	r0, sl
 800b5c6:	f7ff f9d6 	bl	800a976 <quorem>
 800b5ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b5ce:	9b00      	ldr	r3, [sp, #0]
 800b5d0:	f805 9b01 	strb.w	r9, [r5], #1
 800b5d4:	1aea      	subs	r2, r5, r3
 800b5d6:	9b01      	ldr	r3, [sp, #4]
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	dd07      	ble.n	800b5ec <_dtoa_r+0xb64>
 800b5dc:	4651      	mov	r1, sl
 800b5de:	2300      	movs	r3, #0
 800b5e0:	220a      	movs	r2, #10
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f000 f9a4 	bl	800b930 <__multadd>
 800b5e8:	4682      	mov	sl, r0
 800b5ea:	e7ea      	b.n	800b5c2 <_dtoa_r+0xb3a>
 800b5ec:	9b01      	ldr	r3, [sp, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	bfc8      	it	gt
 800b5f2:	461d      	movgt	r5, r3
 800b5f4:	9b00      	ldr	r3, [sp, #0]
 800b5f6:	bfd8      	it	le
 800b5f8:	2501      	movle	r5, #1
 800b5fa:	441d      	add	r5, r3
 800b5fc:	f04f 0800 	mov.w	r8, #0
 800b600:	4651      	mov	r1, sl
 800b602:	2201      	movs	r2, #1
 800b604:	4620      	mov	r0, r4
 800b606:	f000 fb41 	bl	800bc8c <__lshift>
 800b60a:	4631      	mov	r1, r6
 800b60c:	4682      	mov	sl, r0
 800b60e:	f000 fba9 	bl	800bd64 <__mcmp>
 800b612:	2800      	cmp	r0, #0
 800b614:	dc96      	bgt.n	800b544 <_dtoa_r+0xabc>
 800b616:	d102      	bne.n	800b61e <_dtoa_r+0xb96>
 800b618:	f019 0f01 	tst.w	r9, #1
 800b61c:	d192      	bne.n	800b544 <_dtoa_r+0xabc>
 800b61e:	462b      	mov	r3, r5
 800b620:	461d      	mov	r5, r3
 800b622:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b626:	2a30      	cmp	r2, #48	; 0x30
 800b628:	d0fa      	beq.n	800b620 <_dtoa_r+0xb98>
 800b62a:	e6dd      	b.n	800b3e8 <_dtoa_r+0x960>
 800b62c:	9a00      	ldr	r2, [sp, #0]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d189      	bne.n	800b546 <_dtoa_r+0xabe>
 800b632:	f10b 0b01 	add.w	fp, fp, #1
 800b636:	2331      	movs	r3, #49	; 0x31
 800b638:	e796      	b.n	800b568 <_dtoa_r+0xae0>
 800b63a:	4b0a      	ldr	r3, [pc, #40]	; (800b664 <_dtoa_r+0xbdc>)
 800b63c:	f7ff ba99 	b.w	800ab72 <_dtoa_r+0xea>
 800b640:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b642:	2b00      	cmp	r3, #0
 800b644:	f47f aa6d 	bne.w	800ab22 <_dtoa_r+0x9a>
 800b648:	4b07      	ldr	r3, [pc, #28]	; (800b668 <_dtoa_r+0xbe0>)
 800b64a:	f7ff ba92 	b.w	800ab72 <_dtoa_r+0xea>
 800b64e:	9b01      	ldr	r3, [sp, #4]
 800b650:	2b00      	cmp	r3, #0
 800b652:	dcb5      	bgt.n	800b5c0 <_dtoa_r+0xb38>
 800b654:	9b07      	ldr	r3, [sp, #28]
 800b656:	2b02      	cmp	r3, #2
 800b658:	f73f aeb1 	bgt.w	800b3be <_dtoa_r+0x936>
 800b65c:	e7b0      	b.n	800b5c0 <_dtoa_r+0xb38>
 800b65e:	bf00      	nop
 800b660:	0800c818 	.word	0x0800c818
 800b664:	0800c778 	.word	0x0800c778
 800b668:	0800c79c 	.word	0x0800c79c

0800b66c <_free_r>:
 800b66c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b66e:	2900      	cmp	r1, #0
 800b670:	d044      	beq.n	800b6fc <_free_r+0x90>
 800b672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b676:	9001      	str	r0, [sp, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f1a1 0404 	sub.w	r4, r1, #4
 800b67e:	bfb8      	it	lt
 800b680:	18e4      	addlt	r4, r4, r3
 800b682:	f000 f8e7 	bl	800b854 <__malloc_lock>
 800b686:	4a1e      	ldr	r2, [pc, #120]	; (800b700 <_free_r+0x94>)
 800b688:	9801      	ldr	r0, [sp, #4]
 800b68a:	6813      	ldr	r3, [r2, #0]
 800b68c:	b933      	cbnz	r3, 800b69c <_free_r+0x30>
 800b68e:	6063      	str	r3, [r4, #4]
 800b690:	6014      	str	r4, [r2, #0]
 800b692:	b003      	add	sp, #12
 800b694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b698:	f000 b8e2 	b.w	800b860 <__malloc_unlock>
 800b69c:	42a3      	cmp	r3, r4
 800b69e:	d908      	bls.n	800b6b2 <_free_r+0x46>
 800b6a0:	6825      	ldr	r5, [r4, #0]
 800b6a2:	1961      	adds	r1, r4, r5
 800b6a4:	428b      	cmp	r3, r1
 800b6a6:	bf01      	itttt	eq
 800b6a8:	6819      	ldreq	r1, [r3, #0]
 800b6aa:	685b      	ldreq	r3, [r3, #4]
 800b6ac:	1949      	addeq	r1, r1, r5
 800b6ae:	6021      	streq	r1, [r4, #0]
 800b6b0:	e7ed      	b.n	800b68e <_free_r+0x22>
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	b10b      	cbz	r3, 800b6bc <_free_r+0x50>
 800b6b8:	42a3      	cmp	r3, r4
 800b6ba:	d9fa      	bls.n	800b6b2 <_free_r+0x46>
 800b6bc:	6811      	ldr	r1, [r2, #0]
 800b6be:	1855      	adds	r5, r2, r1
 800b6c0:	42a5      	cmp	r5, r4
 800b6c2:	d10b      	bne.n	800b6dc <_free_r+0x70>
 800b6c4:	6824      	ldr	r4, [r4, #0]
 800b6c6:	4421      	add	r1, r4
 800b6c8:	1854      	adds	r4, r2, r1
 800b6ca:	42a3      	cmp	r3, r4
 800b6cc:	6011      	str	r1, [r2, #0]
 800b6ce:	d1e0      	bne.n	800b692 <_free_r+0x26>
 800b6d0:	681c      	ldr	r4, [r3, #0]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	6053      	str	r3, [r2, #4]
 800b6d6:	440c      	add	r4, r1
 800b6d8:	6014      	str	r4, [r2, #0]
 800b6da:	e7da      	b.n	800b692 <_free_r+0x26>
 800b6dc:	d902      	bls.n	800b6e4 <_free_r+0x78>
 800b6de:	230c      	movs	r3, #12
 800b6e0:	6003      	str	r3, [r0, #0]
 800b6e2:	e7d6      	b.n	800b692 <_free_r+0x26>
 800b6e4:	6825      	ldr	r5, [r4, #0]
 800b6e6:	1961      	adds	r1, r4, r5
 800b6e8:	428b      	cmp	r3, r1
 800b6ea:	bf04      	itt	eq
 800b6ec:	6819      	ldreq	r1, [r3, #0]
 800b6ee:	685b      	ldreq	r3, [r3, #4]
 800b6f0:	6063      	str	r3, [r4, #4]
 800b6f2:	bf04      	itt	eq
 800b6f4:	1949      	addeq	r1, r1, r5
 800b6f6:	6021      	streq	r1, [r4, #0]
 800b6f8:	6054      	str	r4, [r2, #4]
 800b6fa:	e7ca      	b.n	800b692 <_free_r+0x26>
 800b6fc:	b003      	add	sp, #12
 800b6fe:	bd30      	pop	{r4, r5, pc}
 800b700:	200007e4 	.word	0x200007e4

0800b704 <malloc>:
 800b704:	4b02      	ldr	r3, [pc, #8]	; (800b710 <malloc+0xc>)
 800b706:	4601      	mov	r1, r0
 800b708:	6818      	ldr	r0, [r3, #0]
 800b70a:	f000 b823 	b.w	800b754 <_malloc_r>
 800b70e:	bf00      	nop
 800b710:	20000068 	.word	0x20000068

0800b714 <sbrk_aligned>:
 800b714:	b570      	push	{r4, r5, r6, lr}
 800b716:	4e0e      	ldr	r6, [pc, #56]	; (800b750 <sbrk_aligned+0x3c>)
 800b718:	460c      	mov	r4, r1
 800b71a:	6831      	ldr	r1, [r6, #0]
 800b71c:	4605      	mov	r5, r0
 800b71e:	b911      	cbnz	r1, 800b726 <sbrk_aligned+0x12>
 800b720:	f000 fe96 	bl	800c450 <_sbrk_r>
 800b724:	6030      	str	r0, [r6, #0]
 800b726:	4621      	mov	r1, r4
 800b728:	4628      	mov	r0, r5
 800b72a:	f000 fe91 	bl	800c450 <_sbrk_r>
 800b72e:	1c43      	adds	r3, r0, #1
 800b730:	d00a      	beq.n	800b748 <sbrk_aligned+0x34>
 800b732:	1cc4      	adds	r4, r0, #3
 800b734:	f024 0403 	bic.w	r4, r4, #3
 800b738:	42a0      	cmp	r0, r4
 800b73a:	d007      	beq.n	800b74c <sbrk_aligned+0x38>
 800b73c:	1a21      	subs	r1, r4, r0
 800b73e:	4628      	mov	r0, r5
 800b740:	f000 fe86 	bl	800c450 <_sbrk_r>
 800b744:	3001      	adds	r0, #1
 800b746:	d101      	bne.n	800b74c <sbrk_aligned+0x38>
 800b748:	f04f 34ff 	mov.w	r4, #4294967295
 800b74c:	4620      	mov	r0, r4
 800b74e:	bd70      	pop	{r4, r5, r6, pc}
 800b750:	200007e8 	.word	0x200007e8

0800b754 <_malloc_r>:
 800b754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b758:	1ccd      	adds	r5, r1, #3
 800b75a:	f025 0503 	bic.w	r5, r5, #3
 800b75e:	3508      	adds	r5, #8
 800b760:	2d0c      	cmp	r5, #12
 800b762:	bf38      	it	cc
 800b764:	250c      	movcc	r5, #12
 800b766:	2d00      	cmp	r5, #0
 800b768:	4607      	mov	r7, r0
 800b76a:	db01      	blt.n	800b770 <_malloc_r+0x1c>
 800b76c:	42a9      	cmp	r1, r5
 800b76e:	d905      	bls.n	800b77c <_malloc_r+0x28>
 800b770:	230c      	movs	r3, #12
 800b772:	603b      	str	r3, [r7, #0]
 800b774:	2600      	movs	r6, #0
 800b776:	4630      	mov	r0, r6
 800b778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b850 <_malloc_r+0xfc>
 800b780:	f000 f868 	bl	800b854 <__malloc_lock>
 800b784:	f8d8 3000 	ldr.w	r3, [r8]
 800b788:	461c      	mov	r4, r3
 800b78a:	bb5c      	cbnz	r4, 800b7e4 <_malloc_r+0x90>
 800b78c:	4629      	mov	r1, r5
 800b78e:	4638      	mov	r0, r7
 800b790:	f7ff ffc0 	bl	800b714 <sbrk_aligned>
 800b794:	1c43      	adds	r3, r0, #1
 800b796:	4604      	mov	r4, r0
 800b798:	d155      	bne.n	800b846 <_malloc_r+0xf2>
 800b79a:	f8d8 4000 	ldr.w	r4, [r8]
 800b79e:	4626      	mov	r6, r4
 800b7a0:	2e00      	cmp	r6, #0
 800b7a2:	d145      	bne.n	800b830 <_malloc_r+0xdc>
 800b7a4:	2c00      	cmp	r4, #0
 800b7a6:	d048      	beq.n	800b83a <_malloc_r+0xe6>
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	4631      	mov	r1, r6
 800b7ac:	4638      	mov	r0, r7
 800b7ae:	eb04 0903 	add.w	r9, r4, r3
 800b7b2:	f000 fe4d 	bl	800c450 <_sbrk_r>
 800b7b6:	4581      	cmp	r9, r0
 800b7b8:	d13f      	bne.n	800b83a <_malloc_r+0xe6>
 800b7ba:	6821      	ldr	r1, [r4, #0]
 800b7bc:	1a6d      	subs	r5, r5, r1
 800b7be:	4629      	mov	r1, r5
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	f7ff ffa7 	bl	800b714 <sbrk_aligned>
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	d037      	beq.n	800b83a <_malloc_r+0xe6>
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	442b      	add	r3, r5
 800b7ce:	6023      	str	r3, [r4, #0]
 800b7d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d038      	beq.n	800b84a <_malloc_r+0xf6>
 800b7d8:	685a      	ldr	r2, [r3, #4]
 800b7da:	42a2      	cmp	r2, r4
 800b7dc:	d12b      	bne.n	800b836 <_malloc_r+0xe2>
 800b7de:	2200      	movs	r2, #0
 800b7e0:	605a      	str	r2, [r3, #4]
 800b7e2:	e00f      	b.n	800b804 <_malloc_r+0xb0>
 800b7e4:	6822      	ldr	r2, [r4, #0]
 800b7e6:	1b52      	subs	r2, r2, r5
 800b7e8:	d41f      	bmi.n	800b82a <_malloc_r+0xd6>
 800b7ea:	2a0b      	cmp	r2, #11
 800b7ec:	d917      	bls.n	800b81e <_malloc_r+0xca>
 800b7ee:	1961      	adds	r1, r4, r5
 800b7f0:	42a3      	cmp	r3, r4
 800b7f2:	6025      	str	r5, [r4, #0]
 800b7f4:	bf18      	it	ne
 800b7f6:	6059      	strne	r1, [r3, #4]
 800b7f8:	6863      	ldr	r3, [r4, #4]
 800b7fa:	bf08      	it	eq
 800b7fc:	f8c8 1000 	streq.w	r1, [r8]
 800b800:	5162      	str	r2, [r4, r5]
 800b802:	604b      	str	r3, [r1, #4]
 800b804:	4638      	mov	r0, r7
 800b806:	f104 060b 	add.w	r6, r4, #11
 800b80a:	f000 f829 	bl	800b860 <__malloc_unlock>
 800b80e:	f026 0607 	bic.w	r6, r6, #7
 800b812:	1d23      	adds	r3, r4, #4
 800b814:	1af2      	subs	r2, r6, r3
 800b816:	d0ae      	beq.n	800b776 <_malloc_r+0x22>
 800b818:	1b9b      	subs	r3, r3, r6
 800b81a:	50a3      	str	r3, [r4, r2]
 800b81c:	e7ab      	b.n	800b776 <_malloc_r+0x22>
 800b81e:	42a3      	cmp	r3, r4
 800b820:	6862      	ldr	r2, [r4, #4]
 800b822:	d1dd      	bne.n	800b7e0 <_malloc_r+0x8c>
 800b824:	f8c8 2000 	str.w	r2, [r8]
 800b828:	e7ec      	b.n	800b804 <_malloc_r+0xb0>
 800b82a:	4623      	mov	r3, r4
 800b82c:	6864      	ldr	r4, [r4, #4]
 800b82e:	e7ac      	b.n	800b78a <_malloc_r+0x36>
 800b830:	4634      	mov	r4, r6
 800b832:	6876      	ldr	r6, [r6, #4]
 800b834:	e7b4      	b.n	800b7a0 <_malloc_r+0x4c>
 800b836:	4613      	mov	r3, r2
 800b838:	e7cc      	b.n	800b7d4 <_malloc_r+0x80>
 800b83a:	230c      	movs	r3, #12
 800b83c:	603b      	str	r3, [r7, #0]
 800b83e:	4638      	mov	r0, r7
 800b840:	f000 f80e 	bl	800b860 <__malloc_unlock>
 800b844:	e797      	b.n	800b776 <_malloc_r+0x22>
 800b846:	6025      	str	r5, [r4, #0]
 800b848:	e7dc      	b.n	800b804 <_malloc_r+0xb0>
 800b84a:	605b      	str	r3, [r3, #4]
 800b84c:	deff      	udf	#255	; 0xff
 800b84e:	bf00      	nop
 800b850:	200007e4 	.word	0x200007e4

0800b854 <__malloc_lock>:
 800b854:	4801      	ldr	r0, [pc, #4]	; (800b85c <__malloc_lock+0x8>)
 800b856:	f7ff b88c 	b.w	800a972 <__retarget_lock_acquire_recursive>
 800b85a:	bf00      	nop
 800b85c:	200007e0 	.word	0x200007e0

0800b860 <__malloc_unlock>:
 800b860:	4801      	ldr	r0, [pc, #4]	; (800b868 <__malloc_unlock+0x8>)
 800b862:	f7ff b887 	b.w	800a974 <__retarget_lock_release_recursive>
 800b866:	bf00      	nop
 800b868:	200007e0 	.word	0x200007e0

0800b86c <_Balloc>:
 800b86c:	b570      	push	{r4, r5, r6, lr}
 800b86e:	69c6      	ldr	r6, [r0, #28]
 800b870:	4604      	mov	r4, r0
 800b872:	460d      	mov	r5, r1
 800b874:	b976      	cbnz	r6, 800b894 <_Balloc+0x28>
 800b876:	2010      	movs	r0, #16
 800b878:	f7ff ff44 	bl	800b704 <malloc>
 800b87c:	4602      	mov	r2, r0
 800b87e:	61e0      	str	r0, [r4, #28]
 800b880:	b920      	cbnz	r0, 800b88c <_Balloc+0x20>
 800b882:	4b18      	ldr	r3, [pc, #96]	; (800b8e4 <_Balloc+0x78>)
 800b884:	4818      	ldr	r0, [pc, #96]	; (800b8e8 <_Balloc+0x7c>)
 800b886:	216b      	movs	r1, #107	; 0x6b
 800b888:	f000 fe00 	bl	800c48c <__assert_func>
 800b88c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b890:	6006      	str	r6, [r0, #0]
 800b892:	60c6      	str	r6, [r0, #12]
 800b894:	69e6      	ldr	r6, [r4, #28]
 800b896:	68f3      	ldr	r3, [r6, #12]
 800b898:	b183      	cbz	r3, 800b8bc <_Balloc+0x50>
 800b89a:	69e3      	ldr	r3, [r4, #28]
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8a2:	b9b8      	cbnz	r0, 800b8d4 <_Balloc+0x68>
 800b8a4:	2101      	movs	r1, #1
 800b8a6:	fa01 f605 	lsl.w	r6, r1, r5
 800b8aa:	1d72      	adds	r2, r6, #5
 800b8ac:	0092      	lsls	r2, r2, #2
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f000 fe0a 	bl	800c4c8 <_calloc_r>
 800b8b4:	b160      	cbz	r0, 800b8d0 <_Balloc+0x64>
 800b8b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8ba:	e00e      	b.n	800b8da <_Balloc+0x6e>
 800b8bc:	2221      	movs	r2, #33	; 0x21
 800b8be:	2104      	movs	r1, #4
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f000 fe01 	bl	800c4c8 <_calloc_r>
 800b8c6:	69e3      	ldr	r3, [r4, #28]
 800b8c8:	60f0      	str	r0, [r6, #12]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1e4      	bne.n	800b89a <_Balloc+0x2e>
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	bd70      	pop	{r4, r5, r6, pc}
 800b8d4:	6802      	ldr	r2, [r0, #0]
 800b8d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8da:	2300      	movs	r3, #0
 800b8dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8e0:	e7f7      	b.n	800b8d2 <_Balloc+0x66>
 800b8e2:	bf00      	nop
 800b8e4:	0800c7a9 	.word	0x0800c7a9
 800b8e8:	0800c829 	.word	0x0800c829

0800b8ec <_Bfree>:
 800b8ec:	b570      	push	{r4, r5, r6, lr}
 800b8ee:	69c6      	ldr	r6, [r0, #28]
 800b8f0:	4605      	mov	r5, r0
 800b8f2:	460c      	mov	r4, r1
 800b8f4:	b976      	cbnz	r6, 800b914 <_Bfree+0x28>
 800b8f6:	2010      	movs	r0, #16
 800b8f8:	f7ff ff04 	bl	800b704 <malloc>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	61e8      	str	r0, [r5, #28]
 800b900:	b920      	cbnz	r0, 800b90c <_Bfree+0x20>
 800b902:	4b09      	ldr	r3, [pc, #36]	; (800b928 <_Bfree+0x3c>)
 800b904:	4809      	ldr	r0, [pc, #36]	; (800b92c <_Bfree+0x40>)
 800b906:	218f      	movs	r1, #143	; 0x8f
 800b908:	f000 fdc0 	bl	800c48c <__assert_func>
 800b90c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b910:	6006      	str	r6, [r0, #0]
 800b912:	60c6      	str	r6, [r0, #12]
 800b914:	b13c      	cbz	r4, 800b926 <_Bfree+0x3a>
 800b916:	69eb      	ldr	r3, [r5, #28]
 800b918:	6862      	ldr	r2, [r4, #4]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b920:	6021      	str	r1, [r4, #0]
 800b922:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b926:	bd70      	pop	{r4, r5, r6, pc}
 800b928:	0800c7a9 	.word	0x0800c7a9
 800b92c:	0800c829 	.word	0x0800c829

0800b930 <__multadd>:
 800b930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b934:	690d      	ldr	r5, [r1, #16]
 800b936:	4607      	mov	r7, r0
 800b938:	460c      	mov	r4, r1
 800b93a:	461e      	mov	r6, r3
 800b93c:	f101 0c14 	add.w	ip, r1, #20
 800b940:	2000      	movs	r0, #0
 800b942:	f8dc 3000 	ldr.w	r3, [ip]
 800b946:	b299      	uxth	r1, r3
 800b948:	fb02 6101 	mla	r1, r2, r1, r6
 800b94c:	0c1e      	lsrs	r6, r3, #16
 800b94e:	0c0b      	lsrs	r3, r1, #16
 800b950:	fb02 3306 	mla	r3, r2, r6, r3
 800b954:	b289      	uxth	r1, r1
 800b956:	3001      	adds	r0, #1
 800b958:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b95c:	4285      	cmp	r5, r0
 800b95e:	f84c 1b04 	str.w	r1, [ip], #4
 800b962:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b966:	dcec      	bgt.n	800b942 <__multadd+0x12>
 800b968:	b30e      	cbz	r6, 800b9ae <__multadd+0x7e>
 800b96a:	68a3      	ldr	r3, [r4, #8]
 800b96c:	42ab      	cmp	r3, r5
 800b96e:	dc19      	bgt.n	800b9a4 <__multadd+0x74>
 800b970:	6861      	ldr	r1, [r4, #4]
 800b972:	4638      	mov	r0, r7
 800b974:	3101      	adds	r1, #1
 800b976:	f7ff ff79 	bl	800b86c <_Balloc>
 800b97a:	4680      	mov	r8, r0
 800b97c:	b928      	cbnz	r0, 800b98a <__multadd+0x5a>
 800b97e:	4602      	mov	r2, r0
 800b980:	4b0c      	ldr	r3, [pc, #48]	; (800b9b4 <__multadd+0x84>)
 800b982:	480d      	ldr	r0, [pc, #52]	; (800b9b8 <__multadd+0x88>)
 800b984:	21ba      	movs	r1, #186	; 0xba
 800b986:	f000 fd81 	bl	800c48c <__assert_func>
 800b98a:	6922      	ldr	r2, [r4, #16]
 800b98c:	3202      	adds	r2, #2
 800b98e:	f104 010c 	add.w	r1, r4, #12
 800b992:	0092      	lsls	r2, r2, #2
 800b994:	300c      	adds	r0, #12
 800b996:	f000 fd6b 	bl	800c470 <memcpy>
 800b99a:	4621      	mov	r1, r4
 800b99c:	4638      	mov	r0, r7
 800b99e:	f7ff ffa5 	bl	800b8ec <_Bfree>
 800b9a2:	4644      	mov	r4, r8
 800b9a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9a8:	3501      	adds	r5, #1
 800b9aa:	615e      	str	r6, [r3, #20]
 800b9ac:	6125      	str	r5, [r4, #16]
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b4:	0800c818 	.word	0x0800c818
 800b9b8:	0800c829 	.word	0x0800c829

0800b9bc <__hi0bits>:
 800b9bc:	0c03      	lsrs	r3, r0, #16
 800b9be:	041b      	lsls	r3, r3, #16
 800b9c0:	b9d3      	cbnz	r3, 800b9f8 <__hi0bits+0x3c>
 800b9c2:	0400      	lsls	r0, r0, #16
 800b9c4:	2310      	movs	r3, #16
 800b9c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b9ca:	bf04      	itt	eq
 800b9cc:	0200      	lsleq	r0, r0, #8
 800b9ce:	3308      	addeq	r3, #8
 800b9d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b9d4:	bf04      	itt	eq
 800b9d6:	0100      	lsleq	r0, r0, #4
 800b9d8:	3304      	addeq	r3, #4
 800b9da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b9de:	bf04      	itt	eq
 800b9e0:	0080      	lsleq	r0, r0, #2
 800b9e2:	3302      	addeq	r3, #2
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	db05      	blt.n	800b9f4 <__hi0bits+0x38>
 800b9e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b9ec:	f103 0301 	add.w	r3, r3, #1
 800b9f0:	bf08      	it	eq
 800b9f2:	2320      	moveq	r3, #32
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	4770      	bx	lr
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	e7e4      	b.n	800b9c6 <__hi0bits+0xa>

0800b9fc <__lo0bits>:
 800b9fc:	6803      	ldr	r3, [r0, #0]
 800b9fe:	f013 0207 	ands.w	r2, r3, #7
 800ba02:	d00c      	beq.n	800ba1e <__lo0bits+0x22>
 800ba04:	07d9      	lsls	r1, r3, #31
 800ba06:	d422      	bmi.n	800ba4e <__lo0bits+0x52>
 800ba08:	079a      	lsls	r2, r3, #30
 800ba0a:	bf49      	itett	mi
 800ba0c:	085b      	lsrmi	r3, r3, #1
 800ba0e:	089b      	lsrpl	r3, r3, #2
 800ba10:	6003      	strmi	r3, [r0, #0]
 800ba12:	2201      	movmi	r2, #1
 800ba14:	bf5c      	itt	pl
 800ba16:	6003      	strpl	r3, [r0, #0]
 800ba18:	2202      	movpl	r2, #2
 800ba1a:	4610      	mov	r0, r2
 800ba1c:	4770      	bx	lr
 800ba1e:	b299      	uxth	r1, r3
 800ba20:	b909      	cbnz	r1, 800ba26 <__lo0bits+0x2a>
 800ba22:	0c1b      	lsrs	r3, r3, #16
 800ba24:	2210      	movs	r2, #16
 800ba26:	b2d9      	uxtb	r1, r3
 800ba28:	b909      	cbnz	r1, 800ba2e <__lo0bits+0x32>
 800ba2a:	3208      	adds	r2, #8
 800ba2c:	0a1b      	lsrs	r3, r3, #8
 800ba2e:	0719      	lsls	r1, r3, #28
 800ba30:	bf04      	itt	eq
 800ba32:	091b      	lsreq	r3, r3, #4
 800ba34:	3204      	addeq	r2, #4
 800ba36:	0799      	lsls	r1, r3, #30
 800ba38:	bf04      	itt	eq
 800ba3a:	089b      	lsreq	r3, r3, #2
 800ba3c:	3202      	addeq	r2, #2
 800ba3e:	07d9      	lsls	r1, r3, #31
 800ba40:	d403      	bmi.n	800ba4a <__lo0bits+0x4e>
 800ba42:	085b      	lsrs	r3, r3, #1
 800ba44:	f102 0201 	add.w	r2, r2, #1
 800ba48:	d003      	beq.n	800ba52 <__lo0bits+0x56>
 800ba4a:	6003      	str	r3, [r0, #0]
 800ba4c:	e7e5      	b.n	800ba1a <__lo0bits+0x1e>
 800ba4e:	2200      	movs	r2, #0
 800ba50:	e7e3      	b.n	800ba1a <__lo0bits+0x1e>
 800ba52:	2220      	movs	r2, #32
 800ba54:	e7e1      	b.n	800ba1a <__lo0bits+0x1e>
	...

0800ba58 <__i2b>:
 800ba58:	b510      	push	{r4, lr}
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	f7ff ff05 	bl	800b86c <_Balloc>
 800ba62:	4602      	mov	r2, r0
 800ba64:	b928      	cbnz	r0, 800ba72 <__i2b+0x1a>
 800ba66:	4b05      	ldr	r3, [pc, #20]	; (800ba7c <__i2b+0x24>)
 800ba68:	4805      	ldr	r0, [pc, #20]	; (800ba80 <__i2b+0x28>)
 800ba6a:	f240 1145 	movw	r1, #325	; 0x145
 800ba6e:	f000 fd0d 	bl	800c48c <__assert_func>
 800ba72:	2301      	movs	r3, #1
 800ba74:	6144      	str	r4, [r0, #20]
 800ba76:	6103      	str	r3, [r0, #16]
 800ba78:	bd10      	pop	{r4, pc}
 800ba7a:	bf00      	nop
 800ba7c:	0800c818 	.word	0x0800c818
 800ba80:	0800c829 	.word	0x0800c829

0800ba84 <__multiply>:
 800ba84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba88:	4691      	mov	r9, r2
 800ba8a:	690a      	ldr	r2, [r1, #16]
 800ba8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	bfb8      	it	lt
 800ba94:	460b      	movlt	r3, r1
 800ba96:	460c      	mov	r4, r1
 800ba98:	bfbc      	itt	lt
 800ba9a:	464c      	movlt	r4, r9
 800ba9c:	4699      	movlt	r9, r3
 800ba9e:	6927      	ldr	r7, [r4, #16]
 800baa0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800baa4:	68a3      	ldr	r3, [r4, #8]
 800baa6:	6861      	ldr	r1, [r4, #4]
 800baa8:	eb07 060a 	add.w	r6, r7, sl
 800baac:	42b3      	cmp	r3, r6
 800baae:	b085      	sub	sp, #20
 800bab0:	bfb8      	it	lt
 800bab2:	3101      	addlt	r1, #1
 800bab4:	f7ff feda 	bl	800b86c <_Balloc>
 800bab8:	b930      	cbnz	r0, 800bac8 <__multiply+0x44>
 800baba:	4602      	mov	r2, r0
 800babc:	4b44      	ldr	r3, [pc, #272]	; (800bbd0 <__multiply+0x14c>)
 800babe:	4845      	ldr	r0, [pc, #276]	; (800bbd4 <__multiply+0x150>)
 800bac0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bac4:	f000 fce2 	bl	800c48c <__assert_func>
 800bac8:	f100 0514 	add.w	r5, r0, #20
 800bacc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bad0:	462b      	mov	r3, r5
 800bad2:	2200      	movs	r2, #0
 800bad4:	4543      	cmp	r3, r8
 800bad6:	d321      	bcc.n	800bb1c <__multiply+0x98>
 800bad8:	f104 0314 	add.w	r3, r4, #20
 800badc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bae0:	f109 0314 	add.w	r3, r9, #20
 800bae4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bae8:	9202      	str	r2, [sp, #8]
 800baea:	1b3a      	subs	r2, r7, r4
 800baec:	3a15      	subs	r2, #21
 800baee:	f022 0203 	bic.w	r2, r2, #3
 800baf2:	3204      	adds	r2, #4
 800baf4:	f104 0115 	add.w	r1, r4, #21
 800baf8:	428f      	cmp	r7, r1
 800bafa:	bf38      	it	cc
 800bafc:	2204      	movcc	r2, #4
 800bafe:	9201      	str	r2, [sp, #4]
 800bb00:	9a02      	ldr	r2, [sp, #8]
 800bb02:	9303      	str	r3, [sp, #12]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d80c      	bhi.n	800bb22 <__multiply+0x9e>
 800bb08:	2e00      	cmp	r6, #0
 800bb0a:	dd03      	ble.n	800bb14 <__multiply+0x90>
 800bb0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d05b      	beq.n	800bbcc <__multiply+0x148>
 800bb14:	6106      	str	r6, [r0, #16]
 800bb16:	b005      	add	sp, #20
 800bb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1c:	f843 2b04 	str.w	r2, [r3], #4
 800bb20:	e7d8      	b.n	800bad4 <__multiply+0x50>
 800bb22:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb26:	f1ba 0f00 	cmp.w	sl, #0
 800bb2a:	d024      	beq.n	800bb76 <__multiply+0xf2>
 800bb2c:	f104 0e14 	add.w	lr, r4, #20
 800bb30:	46a9      	mov	r9, r5
 800bb32:	f04f 0c00 	mov.w	ip, #0
 800bb36:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bb3a:	f8d9 1000 	ldr.w	r1, [r9]
 800bb3e:	fa1f fb82 	uxth.w	fp, r2
 800bb42:	b289      	uxth	r1, r1
 800bb44:	fb0a 110b 	mla	r1, sl, fp, r1
 800bb48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bb4c:	f8d9 2000 	ldr.w	r2, [r9]
 800bb50:	4461      	add	r1, ip
 800bb52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb56:	fb0a c20b 	mla	r2, sl, fp, ip
 800bb5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb5e:	b289      	uxth	r1, r1
 800bb60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb64:	4577      	cmp	r7, lr
 800bb66:	f849 1b04 	str.w	r1, [r9], #4
 800bb6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb6e:	d8e2      	bhi.n	800bb36 <__multiply+0xb2>
 800bb70:	9a01      	ldr	r2, [sp, #4]
 800bb72:	f845 c002 	str.w	ip, [r5, r2]
 800bb76:	9a03      	ldr	r2, [sp, #12]
 800bb78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	f1b9 0f00 	cmp.w	r9, #0
 800bb82:	d021      	beq.n	800bbc8 <__multiply+0x144>
 800bb84:	6829      	ldr	r1, [r5, #0]
 800bb86:	f104 0c14 	add.w	ip, r4, #20
 800bb8a:	46ae      	mov	lr, r5
 800bb8c:	f04f 0a00 	mov.w	sl, #0
 800bb90:	f8bc b000 	ldrh.w	fp, [ip]
 800bb94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bb98:	fb09 220b 	mla	r2, r9, fp, r2
 800bb9c:	4452      	add	r2, sl
 800bb9e:	b289      	uxth	r1, r1
 800bba0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bba4:	f84e 1b04 	str.w	r1, [lr], #4
 800bba8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bbac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bbb0:	f8be 1000 	ldrh.w	r1, [lr]
 800bbb4:	fb09 110a 	mla	r1, r9, sl, r1
 800bbb8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bbbc:	4567      	cmp	r7, ip
 800bbbe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bbc2:	d8e5      	bhi.n	800bb90 <__multiply+0x10c>
 800bbc4:	9a01      	ldr	r2, [sp, #4]
 800bbc6:	50a9      	str	r1, [r5, r2]
 800bbc8:	3504      	adds	r5, #4
 800bbca:	e799      	b.n	800bb00 <__multiply+0x7c>
 800bbcc:	3e01      	subs	r6, #1
 800bbce:	e79b      	b.n	800bb08 <__multiply+0x84>
 800bbd0:	0800c818 	.word	0x0800c818
 800bbd4:	0800c829 	.word	0x0800c829

0800bbd8 <__pow5mult>:
 800bbd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbdc:	4615      	mov	r5, r2
 800bbde:	f012 0203 	ands.w	r2, r2, #3
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	460f      	mov	r7, r1
 800bbe6:	d007      	beq.n	800bbf8 <__pow5mult+0x20>
 800bbe8:	4c25      	ldr	r4, [pc, #148]	; (800bc80 <__pow5mult+0xa8>)
 800bbea:	3a01      	subs	r2, #1
 800bbec:	2300      	movs	r3, #0
 800bbee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbf2:	f7ff fe9d 	bl	800b930 <__multadd>
 800bbf6:	4607      	mov	r7, r0
 800bbf8:	10ad      	asrs	r5, r5, #2
 800bbfa:	d03d      	beq.n	800bc78 <__pow5mult+0xa0>
 800bbfc:	69f4      	ldr	r4, [r6, #28]
 800bbfe:	b97c      	cbnz	r4, 800bc20 <__pow5mult+0x48>
 800bc00:	2010      	movs	r0, #16
 800bc02:	f7ff fd7f 	bl	800b704 <malloc>
 800bc06:	4602      	mov	r2, r0
 800bc08:	61f0      	str	r0, [r6, #28]
 800bc0a:	b928      	cbnz	r0, 800bc18 <__pow5mult+0x40>
 800bc0c:	4b1d      	ldr	r3, [pc, #116]	; (800bc84 <__pow5mult+0xac>)
 800bc0e:	481e      	ldr	r0, [pc, #120]	; (800bc88 <__pow5mult+0xb0>)
 800bc10:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bc14:	f000 fc3a 	bl	800c48c <__assert_func>
 800bc18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc1c:	6004      	str	r4, [r0, #0]
 800bc1e:	60c4      	str	r4, [r0, #12]
 800bc20:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bc24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc28:	b94c      	cbnz	r4, 800bc3e <__pow5mult+0x66>
 800bc2a:	f240 2171 	movw	r1, #625	; 0x271
 800bc2e:	4630      	mov	r0, r6
 800bc30:	f7ff ff12 	bl	800ba58 <__i2b>
 800bc34:	2300      	movs	r3, #0
 800bc36:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	6003      	str	r3, [r0, #0]
 800bc3e:	f04f 0900 	mov.w	r9, #0
 800bc42:	07eb      	lsls	r3, r5, #31
 800bc44:	d50a      	bpl.n	800bc5c <__pow5mult+0x84>
 800bc46:	4639      	mov	r1, r7
 800bc48:	4622      	mov	r2, r4
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f7ff ff1a 	bl	800ba84 <__multiply>
 800bc50:	4639      	mov	r1, r7
 800bc52:	4680      	mov	r8, r0
 800bc54:	4630      	mov	r0, r6
 800bc56:	f7ff fe49 	bl	800b8ec <_Bfree>
 800bc5a:	4647      	mov	r7, r8
 800bc5c:	106d      	asrs	r5, r5, #1
 800bc5e:	d00b      	beq.n	800bc78 <__pow5mult+0xa0>
 800bc60:	6820      	ldr	r0, [r4, #0]
 800bc62:	b938      	cbnz	r0, 800bc74 <__pow5mult+0x9c>
 800bc64:	4622      	mov	r2, r4
 800bc66:	4621      	mov	r1, r4
 800bc68:	4630      	mov	r0, r6
 800bc6a:	f7ff ff0b 	bl	800ba84 <__multiply>
 800bc6e:	6020      	str	r0, [r4, #0]
 800bc70:	f8c0 9000 	str.w	r9, [r0]
 800bc74:	4604      	mov	r4, r0
 800bc76:	e7e4      	b.n	800bc42 <__pow5mult+0x6a>
 800bc78:	4638      	mov	r0, r7
 800bc7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc7e:	bf00      	nop
 800bc80:	0800c978 	.word	0x0800c978
 800bc84:	0800c7a9 	.word	0x0800c7a9
 800bc88:	0800c829 	.word	0x0800c829

0800bc8c <__lshift>:
 800bc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc90:	460c      	mov	r4, r1
 800bc92:	6849      	ldr	r1, [r1, #4]
 800bc94:	6923      	ldr	r3, [r4, #16]
 800bc96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc9a:	68a3      	ldr	r3, [r4, #8]
 800bc9c:	4607      	mov	r7, r0
 800bc9e:	4691      	mov	r9, r2
 800bca0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bca4:	f108 0601 	add.w	r6, r8, #1
 800bca8:	42b3      	cmp	r3, r6
 800bcaa:	db0b      	blt.n	800bcc4 <__lshift+0x38>
 800bcac:	4638      	mov	r0, r7
 800bcae:	f7ff fddd 	bl	800b86c <_Balloc>
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	b948      	cbnz	r0, 800bcca <__lshift+0x3e>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	4b28      	ldr	r3, [pc, #160]	; (800bd5c <__lshift+0xd0>)
 800bcba:	4829      	ldr	r0, [pc, #164]	; (800bd60 <__lshift+0xd4>)
 800bcbc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bcc0:	f000 fbe4 	bl	800c48c <__assert_func>
 800bcc4:	3101      	adds	r1, #1
 800bcc6:	005b      	lsls	r3, r3, #1
 800bcc8:	e7ee      	b.n	800bca8 <__lshift+0x1c>
 800bcca:	2300      	movs	r3, #0
 800bccc:	f100 0114 	add.w	r1, r0, #20
 800bcd0:	f100 0210 	add.w	r2, r0, #16
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	4553      	cmp	r3, sl
 800bcd8:	db33      	blt.n	800bd42 <__lshift+0xb6>
 800bcda:	6920      	ldr	r0, [r4, #16]
 800bcdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bce0:	f104 0314 	add.w	r3, r4, #20
 800bce4:	f019 091f 	ands.w	r9, r9, #31
 800bce8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bcf0:	d02b      	beq.n	800bd4a <__lshift+0xbe>
 800bcf2:	f1c9 0e20 	rsb	lr, r9, #32
 800bcf6:	468a      	mov	sl, r1
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	6818      	ldr	r0, [r3, #0]
 800bcfc:	fa00 f009 	lsl.w	r0, r0, r9
 800bd00:	4310      	orrs	r0, r2
 800bd02:	f84a 0b04 	str.w	r0, [sl], #4
 800bd06:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd0a:	459c      	cmp	ip, r3
 800bd0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd10:	d8f3      	bhi.n	800bcfa <__lshift+0x6e>
 800bd12:	ebac 0304 	sub.w	r3, ip, r4
 800bd16:	3b15      	subs	r3, #21
 800bd18:	f023 0303 	bic.w	r3, r3, #3
 800bd1c:	3304      	adds	r3, #4
 800bd1e:	f104 0015 	add.w	r0, r4, #21
 800bd22:	4584      	cmp	ip, r0
 800bd24:	bf38      	it	cc
 800bd26:	2304      	movcc	r3, #4
 800bd28:	50ca      	str	r2, [r1, r3]
 800bd2a:	b10a      	cbz	r2, 800bd30 <__lshift+0xa4>
 800bd2c:	f108 0602 	add.w	r6, r8, #2
 800bd30:	3e01      	subs	r6, #1
 800bd32:	4638      	mov	r0, r7
 800bd34:	612e      	str	r6, [r5, #16]
 800bd36:	4621      	mov	r1, r4
 800bd38:	f7ff fdd8 	bl	800b8ec <_Bfree>
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd42:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd46:	3301      	adds	r3, #1
 800bd48:	e7c5      	b.n	800bcd6 <__lshift+0x4a>
 800bd4a:	3904      	subs	r1, #4
 800bd4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd50:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd54:	459c      	cmp	ip, r3
 800bd56:	d8f9      	bhi.n	800bd4c <__lshift+0xc0>
 800bd58:	e7ea      	b.n	800bd30 <__lshift+0xa4>
 800bd5a:	bf00      	nop
 800bd5c:	0800c818 	.word	0x0800c818
 800bd60:	0800c829 	.word	0x0800c829

0800bd64 <__mcmp>:
 800bd64:	b530      	push	{r4, r5, lr}
 800bd66:	6902      	ldr	r2, [r0, #16]
 800bd68:	690c      	ldr	r4, [r1, #16]
 800bd6a:	1b12      	subs	r2, r2, r4
 800bd6c:	d10e      	bne.n	800bd8c <__mcmp+0x28>
 800bd6e:	f100 0314 	add.w	r3, r0, #20
 800bd72:	3114      	adds	r1, #20
 800bd74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd84:	42a5      	cmp	r5, r4
 800bd86:	d003      	beq.n	800bd90 <__mcmp+0x2c>
 800bd88:	d305      	bcc.n	800bd96 <__mcmp+0x32>
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	bd30      	pop	{r4, r5, pc}
 800bd90:	4283      	cmp	r3, r0
 800bd92:	d3f3      	bcc.n	800bd7c <__mcmp+0x18>
 800bd94:	e7fa      	b.n	800bd8c <__mcmp+0x28>
 800bd96:	f04f 32ff 	mov.w	r2, #4294967295
 800bd9a:	e7f7      	b.n	800bd8c <__mcmp+0x28>

0800bd9c <__mdiff>:
 800bd9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda0:	460c      	mov	r4, r1
 800bda2:	4606      	mov	r6, r0
 800bda4:	4611      	mov	r1, r2
 800bda6:	4620      	mov	r0, r4
 800bda8:	4690      	mov	r8, r2
 800bdaa:	f7ff ffdb 	bl	800bd64 <__mcmp>
 800bdae:	1e05      	subs	r5, r0, #0
 800bdb0:	d110      	bne.n	800bdd4 <__mdiff+0x38>
 800bdb2:	4629      	mov	r1, r5
 800bdb4:	4630      	mov	r0, r6
 800bdb6:	f7ff fd59 	bl	800b86c <_Balloc>
 800bdba:	b930      	cbnz	r0, 800bdca <__mdiff+0x2e>
 800bdbc:	4b3a      	ldr	r3, [pc, #232]	; (800bea8 <__mdiff+0x10c>)
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	f240 2137 	movw	r1, #567	; 0x237
 800bdc4:	4839      	ldr	r0, [pc, #228]	; (800beac <__mdiff+0x110>)
 800bdc6:	f000 fb61 	bl	800c48c <__assert_func>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd4:	bfa4      	itt	ge
 800bdd6:	4643      	movge	r3, r8
 800bdd8:	46a0      	movge	r8, r4
 800bdda:	4630      	mov	r0, r6
 800bddc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bde0:	bfa6      	itte	ge
 800bde2:	461c      	movge	r4, r3
 800bde4:	2500      	movge	r5, #0
 800bde6:	2501      	movlt	r5, #1
 800bde8:	f7ff fd40 	bl	800b86c <_Balloc>
 800bdec:	b920      	cbnz	r0, 800bdf8 <__mdiff+0x5c>
 800bdee:	4b2e      	ldr	r3, [pc, #184]	; (800bea8 <__mdiff+0x10c>)
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	f240 2145 	movw	r1, #581	; 0x245
 800bdf6:	e7e5      	b.n	800bdc4 <__mdiff+0x28>
 800bdf8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bdfc:	6926      	ldr	r6, [r4, #16]
 800bdfe:	60c5      	str	r5, [r0, #12]
 800be00:	f104 0914 	add.w	r9, r4, #20
 800be04:	f108 0514 	add.w	r5, r8, #20
 800be08:	f100 0e14 	add.w	lr, r0, #20
 800be0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800be10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800be14:	f108 0210 	add.w	r2, r8, #16
 800be18:	46f2      	mov	sl, lr
 800be1a:	2100      	movs	r1, #0
 800be1c:	f859 3b04 	ldr.w	r3, [r9], #4
 800be20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800be24:	fa11 f88b 	uxtah	r8, r1, fp
 800be28:	b299      	uxth	r1, r3
 800be2a:	0c1b      	lsrs	r3, r3, #16
 800be2c:	eba8 0801 	sub.w	r8, r8, r1
 800be30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be34:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800be38:	fa1f f888 	uxth.w	r8, r8
 800be3c:	1419      	asrs	r1, r3, #16
 800be3e:	454e      	cmp	r6, r9
 800be40:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be44:	f84a 3b04 	str.w	r3, [sl], #4
 800be48:	d8e8      	bhi.n	800be1c <__mdiff+0x80>
 800be4a:	1b33      	subs	r3, r6, r4
 800be4c:	3b15      	subs	r3, #21
 800be4e:	f023 0303 	bic.w	r3, r3, #3
 800be52:	3304      	adds	r3, #4
 800be54:	3415      	adds	r4, #21
 800be56:	42a6      	cmp	r6, r4
 800be58:	bf38      	it	cc
 800be5a:	2304      	movcc	r3, #4
 800be5c:	441d      	add	r5, r3
 800be5e:	4473      	add	r3, lr
 800be60:	469e      	mov	lr, r3
 800be62:	462e      	mov	r6, r5
 800be64:	4566      	cmp	r6, ip
 800be66:	d30e      	bcc.n	800be86 <__mdiff+0xea>
 800be68:	f10c 0203 	add.w	r2, ip, #3
 800be6c:	1b52      	subs	r2, r2, r5
 800be6e:	f022 0203 	bic.w	r2, r2, #3
 800be72:	3d03      	subs	r5, #3
 800be74:	45ac      	cmp	ip, r5
 800be76:	bf38      	it	cc
 800be78:	2200      	movcc	r2, #0
 800be7a:	4413      	add	r3, r2
 800be7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800be80:	b17a      	cbz	r2, 800bea2 <__mdiff+0x106>
 800be82:	6107      	str	r7, [r0, #16]
 800be84:	e7a4      	b.n	800bdd0 <__mdiff+0x34>
 800be86:	f856 8b04 	ldr.w	r8, [r6], #4
 800be8a:	fa11 f288 	uxtah	r2, r1, r8
 800be8e:	1414      	asrs	r4, r2, #16
 800be90:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800be94:	b292      	uxth	r2, r2
 800be96:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800be9a:	f84e 2b04 	str.w	r2, [lr], #4
 800be9e:	1421      	asrs	r1, r4, #16
 800bea0:	e7e0      	b.n	800be64 <__mdiff+0xc8>
 800bea2:	3f01      	subs	r7, #1
 800bea4:	e7ea      	b.n	800be7c <__mdiff+0xe0>
 800bea6:	bf00      	nop
 800bea8:	0800c818 	.word	0x0800c818
 800beac:	0800c829 	.word	0x0800c829

0800beb0 <__d2b>:
 800beb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800beb4:	460f      	mov	r7, r1
 800beb6:	2101      	movs	r1, #1
 800beb8:	ec59 8b10 	vmov	r8, r9, d0
 800bebc:	4616      	mov	r6, r2
 800bebe:	f7ff fcd5 	bl	800b86c <_Balloc>
 800bec2:	4604      	mov	r4, r0
 800bec4:	b930      	cbnz	r0, 800bed4 <__d2b+0x24>
 800bec6:	4602      	mov	r2, r0
 800bec8:	4b24      	ldr	r3, [pc, #144]	; (800bf5c <__d2b+0xac>)
 800beca:	4825      	ldr	r0, [pc, #148]	; (800bf60 <__d2b+0xb0>)
 800becc:	f240 310f 	movw	r1, #783	; 0x30f
 800bed0:	f000 fadc 	bl	800c48c <__assert_func>
 800bed4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bed8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bedc:	bb2d      	cbnz	r5, 800bf2a <__d2b+0x7a>
 800bede:	9301      	str	r3, [sp, #4]
 800bee0:	f1b8 0300 	subs.w	r3, r8, #0
 800bee4:	d026      	beq.n	800bf34 <__d2b+0x84>
 800bee6:	4668      	mov	r0, sp
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	f7ff fd87 	bl	800b9fc <__lo0bits>
 800beee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bef2:	b1e8      	cbz	r0, 800bf30 <__d2b+0x80>
 800bef4:	f1c0 0320 	rsb	r3, r0, #32
 800bef8:	fa02 f303 	lsl.w	r3, r2, r3
 800befc:	430b      	orrs	r3, r1
 800befe:	40c2      	lsrs	r2, r0
 800bf00:	6163      	str	r3, [r4, #20]
 800bf02:	9201      	str	r2, [sp, #4]
 800bf04:	9b01      	ldr	r3, [sp, #4]
 800bf06:	61a3      	str	r3, [r4, #24]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	bf14      	ite	ne
 800bf0c:	2202      	movne	r2, #2
 800bf0e:	2201      	moveq	r2, #1
 800bf10:	6122      	str	r2, [r4, #16]
 800bf12:	b1bd      	cbz	r5, 800bf44 <__d2b+0x94>
 800bf14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf18:	4405      	add	r5, r0
 800bf1a:	603d      	str	r5, [r7, #0]
 800bf1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf20:	6030      	str	r0, [r6, #0]
 800bf22:	4620      	mov	r0, r4
 800bf24:	b003      	add	sp, #12
 800bf26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf2e:	e7d6      	b.n	800bede <__d2b+0x2e>
 800bf30:	6161      	str	r1, [r4, #20]
 800bf32:	e7e7      	b.n	800bf04 <__d2b+0x54>
 800bf34:	a801      	add	r0, sp, #4
 800bf36:	f7ff fd61 	bl	800b9fc <__lo0bits>
 800bf3a:	9b01      	ldr	r3, [sp, #4]
 800bf3c:	6163      	str	r3, [r4, #20]
 800bf3e:	3020      	adds	r0, #32
 800bf40:	2201      	movs	r2, #1
 800bf42:	e7e5      	b.n	800bf10 <__d2b+0x60>
 800bf44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf4c:	6038      	str	r0, [r7, #0]
 800bf4e:	6918      	ldr	r0, [r3, #16]
 800bf50:	f7ff fd34 	bl	800b9bc <__hi0bits>
 800bf54:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf58:	e7e2      	b.n	800bf20 <__d2b+0x70>
 800bf5a:	bf00      	nop
 800bf5c:	0800c818 	.word	0x0800c818
 800bf60:	0800c829 	.word	0x0800c829

0800bf64 <__sfputc_r>:
 800bf64:	6893      	ldr	r3, [r2, #8]
 800bf66:	3b01      	subs	r3, #1
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	b410      	push	{r4}
 800bf6c:	6093      	str	r3, [r2, #8]
 800bf6e:	da08      	bge.n	800bf82 <__sfputc_r+0x1e>
 800bf70:	6994      	ldr	r4, [r2, #24]
 800bf72:	42a3      	cmp	r3, r4
 800bf74:	db01      	blt.n	800bf7a <__sfputc_r+0x16>
 800bf76:	290a      	cmp	r1, #10
 800bf78:	d103      	bne.n	800bf82 <__sfputc_r+0x1e>
 800bf7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf7e:	f7fe bbe6 	b.w	800a74e <__swbuf_r>
 800bf82:	6813      	ldr	r3, [r2, #0]
 800bf84:	1c58      	adds	r0, r3, #1
 800bf86:	6010      	str	r0, [r2, #0]
 800bf88:	7019      	strb	r1, [r3, #0]
 800bf8a:	4608      	mov	r0, r1
 800bf8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <__sfputs_r>:
 800bf92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf94:	4606      	mov	r6, r0
 800bf96:	460f      	mov	r7, r1
 800bf98:	4614      	mov	r4, r2
 800bf9a:	18d5      	adds	r5, r2, r3
 800bf9c:	42ac      	cmp	r4, r5
 800bf9e:	d101      	bne.n	800bfa4 <__sfputs_r+0x12>
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	e007      	b.n	800bfb4 <__sfputs_r+0x22>
 800bfa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfa8:	463a      	mov	r2, r7
 800bfaa:	4630      	mov	r0, r6
 800bfac:	f7ff ffda 	bl	800bf64 <__sfputc_r>
 800bfb0:	1c43      	adds	r3, r0, #1
 800bfb2:	d1f3      	bne.n	800bf9c <__sfputs_r+0xa>
 800bfb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bfb8 <_vfiprintf_r>:
 800bfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfbc:	460d      	mov	r5, r1
 800bfbe:	b09d      	sub	sp, #116	; 0x74
 800bfc0:	4614      	mov	r4, r2
 800bfc2:	4698      	mov	r8, r3
 800bfc4:	4606      	mov	r6, r0
 800bfc6:	b118      	cbz	r0, 800bfd0 <_vfiprintf_r+0x18>
 800bfc8:	6a03      	ldr	r3, [r0, #32]
 800bfca:	b90b      	cbnz	r3, 800bfd0 <_vfiprintf_r+0x18>
 800bfcc:	f7fe fad8 	bl	800a580 <__sinit>
 800bfd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfd2:	07d9      	lsls	r1, r3, #31
 800bfd4:	d405      	bmi.n	800bfe2 <_vfiprintf_r+0x2a>
 800bfd6:	89ab      	ldrh	r3, [r5, #12]
 800bfd8:	059a      	lsls	r2, r3, #22
 800bfda:	d402      	bmi.n	800bfe2 <_vfiprintf_r+0x2a>
 800bfdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfde:	f7fe fcc8 	bl	800a972 <__retarget_lock_acquire_recursive>
 800bfe2:	89ab      	ldrh	r3, [r5, #12]
 800bfe4:	071b      	lsls	r3, r3, #28
 800bfe6:	d501      	bpl.n	800bfec <_vfiprintf_r+0x34>
 800bfe8:	692b      	ldr	r3, [r5, #16]
 800bfea:	b99b      	cbnz	r3, 800c014 <_vfiprintf_r+0x5c>
 800bfec:	4629      	mov	r1, r5
 800bfee:	4630      	mov	r0, r6
 800bff0:	f7fe fbea 	bl	800a7c8 <__swsetup_r>
 800bff4:	b170      	cbz	r0, 800c014 <_vfiprintf_r+0x5c>
 800bff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bff8:	07dc      	lsls	r4, r3, #31
 800bffa:	d504      	bpl.n	800c006 <_vfiprintf_r+0x4e>
 800bffc:	f04f 30ff 	mov.w	r0, #4294967295
 800c000:	b01d      	add	sp, #116	; 0x74
 800c002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c006:	89ab      	ldrh	r3, [r5, #12]
 800c008:	0598      	lsls	r0, r3, #22
 800c00a:	d4f7      	bmi.n	800bffc <_vfiprintf_r+0x44>
 800c00c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c00e:	f7fe fcb1 	bl	800a974 <__retarget_lock_release_recursive>
 800c012:	e7f3      	b.n	800bffc <_vfiprintf_r+0x44>
 800c014:	2300      	movs	r3, #0
 800c016:	9309      	str	r3, [sp, #36]	; 0x24
 800c018:	2320      	movs	r3, #32
 800c01a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c01e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c022:	2330      	movs	r3, #48	; 0x30
 800c024:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c1d8 <_vfiprintf_r+0x220>
 800c028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c02c:	f04f 0901 	mov.w	r9, #1
 800c030:	4623      	mov	r3, r4
 800c032:	469a      	mov	sl, r3
 800c034:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c038:	b10a      	cbz	r2, 800c03e <_vfiprintf_r+0x86>
 800c03a:	2a25      	cmp	r2, #37	; 0x25
 800c03c:	d1f9      	bne.n	800c032 <_vfiprintf_r+0x7a>
 800c03e:	ebba 0b04 	subs.w	fp, sl, r4
 800c042:	d00b      	beq.n	800c05c <_vfiprintf_r+0xa4>
 800c044:	465b      	mov	r3, fp
 800c046:	4622      	mov	r2, r4
 800c048:	4629      	mov	r1, r5
 800c04a:	4630      	mov	r0, r6
 800c04c:	f7ff ffa1 	bl	800bf92 <__sfputs_r>
 800c050:	3001      	adds	r0, #1
 800c052:	f000 80a9 	beq.w	800c1a8 <_vfiprintf_r+0x1f0>
 800c056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c058:	445a      	add	r2, fp
 800c05a:	9209      	str	r2, [sp, #36]	; 0x24
 800c05c:	f89a 3000 	ldrb.w	r3, [sl]
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 80a1 	beq.w	800c1a8 <_vfiprintf_r+0x1f0>
 800c066:	2300      	movs	r3, #0
 800c068:	f04f 32ff 	mov.w	r2, #4294967295
 800c06c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c070:	f10a 0a01 	add.w	sl, sl, #1
 800c074:	9304      	str	r3, [sp, #16]
 800c076:	9307      	str	r3, [sp, #28]
 800c078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c07c:	931a      	str	r3, [sp, #104]	; 0x68
 800c07e:	4654      	mov	r4, sl
 800c080:	2205      	movs	r2, #5
 800c082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c086:	4854      	ldr	r0, [pc, #336]	; (800c1d8 <_vfiprintf_r+0x220>)
 800c088:	f7f4 f8ba 	bl	8000200 <memchr>
 800c08c:	9a04      	ldr	r2, [sp, #16]
 800c08e:	b9d8      	cbnz	r0, 800c0c8 <_vfiprintf_r+0x110>
 800c090:	06d1      	lsls	r1, r2, #27
 800c092:	bf44      	itt	mi
 800c094:	2320      	movmi	r3, #32
 800c096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c09a:	0713      	lsls	r3, r2, #28
 800c09c:	bf44      	itt	mi
 800c09e:	232b      	movmi	r3, #43	; 0x2b
 800c0a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c0aa:	d015      	beq.n	800c0d8 <_vfiprintf_r+0x120>
 800c0ac:	9a07      	ldr	r2, [sp, #28]
 800c0ae:	4654      	mov	r4, sl
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	f04f 0c0a 	mov.w	ip, #10
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0bc:	3b30      	subs	r3, #48	; 0x30
 800c0be:	2b09      	cmp	r3, #9
 800c0c0:	d94d      	bls.n	800c15e <_vfiprintf_r+0x1a6>
 800c0c2:	b1b0      	cbz	r0, 800c0f2 <_vfiprintf_r+0x13a>
 800c0c4:	9207      	str	r2, [sp, #28]
 800c0c6:	e014      	b.n	800c0f2 <_vfiprintf_r+0x13a>
 800c0c8:	eba0 0308 	sub.w	r3, r0, r8
 800c0cc:	fa09 f303 	lsl.w	r3, r9, r3
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	9304      	str	r3, [sp, #16]
 800c0d4:	46a2      	mov	sl, r4
 800c0d6:	e7d2      	b.n	800c07e <_vfiprintf_r+0xc6>
 800c0d8:	9b03      	ldr	r3, [sp, #12]
 800c0da:	1d19      	adds	r1, r3, #4
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	9103      	str	r1, [sp, #12]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	bfbb      	ittet	lt
 800c0e4:	425b      	neglt	r3, r3
 800c0e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c0ea:	9307      	strge	r3, [sp, #28]
 800c0ec:	9307      	strlt	r3, [sp, #28]
 800c0ee:	bfb8      	it	lt
 800c0f0:	9204      	strlt	r2, [sp, #16]
 800c0f2:	7823      	ldrb	r3, [r4, #0]
 800c0f4:	2b2e      	cmp	r3, #46	; 0x2e
 800c0f6:	d10c      	bne.n	800c112 <_vfiprintf_r+0x15a>
 800c0f8:	7863      	ldrb	r3, [r4, #1]
 800c0fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c0fc:	d134      	bne.n	800c168 <_vfiprintf_r+0x1b0>
 800c0fe:	9b03      	ldr	r3, [sp, #12]
 800c100:	1d1a      	adds	r2, r3, #4
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	9203      	str	r2, [sp, #12]
 800c106:	2b00      	cmp	r3, #0
 800c108:	bfb8      	it	lt
 800c10a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c10e:	3402      	adds	r4, #2
 800c110:	9305      	str	r3, [sp, #20]
 800c112:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c1e8 <_vfiprintf_r+0x230>
 800c116:	7821      	ldrb	r1, [r4, #0]
 800c118:	2203      	movs	r2, #3
 800c11a:	4650      	mov	r0, sl
 800c11c:	f7f4 f870 	bl	8000200 <memchr>
 800c120:	b138      	cbz	r0, 800c132 <_vfiprintf_r+0x17a>
 800c122:	9b04      	ldr	r3, [sp, #16]
 800c124:	eba0 000a 	sub.w	r0, r0, sl
 800c128:	2240      	movs	r2, #64	; 0x40
 800c12a:	4082      	lsls	r2, r0
 800c12c:	4313      	orrs	r3, r2
 800c12e:	3401      	adds	r4, #1
 800c130:	9304      	str	r3, [sp, #16]
 800c132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c136:	4829      	ldr	r0, [pc, #164]	; (800c1dc <_vfiprintf_r+0x224>)
 800c138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c13c:	2206      	movs	r2, #6
 800c13e:	f7f4 f85f 	bl	8000200 <memchr>
 800c142:	2800      	cmp	r0, #0
 800c144:	d03f      	beq.n	800c1c6 <_vfiprintf_r+0x20e>
 800c146:	4b26      	ldr	r3, [pc, #152]	; (800c1e0 <_vfiprintf_r+0x228>)
 800c148:	bb1b      	cbnz	r3, 800c192 <_vfiprintf_r+0x1da>
 800c14a:	9b03      	ldr	r3, [sp, #12]
 800c14c:	3307      	adds	r3, #7
 800c14e:	f023 0307 	bic.w	r3, r3, #7
 800c152:	3308      	adds	r3, #8
 800c154:	9303      	str	r3, [sp, #12]
 800c156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c158:	443b      	add	r3, r7
 800c15a:	9309      	str	r3, [sp, #36]	; 0x24
 800c15c:	e768      	b.n	800c030 <_vfiprintf_r+0x78>
 800c15e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c162:	460c      	mov	r4, r1
 800c164:	2001      	movs	r0, #1
 800c166:	e7a6      	b.n	800c0b6 <_vfiprintf_r+0xfe>
 800c168:	2300      	movs	r3, #0
 800c16a:	3401      	adds	r4, #1
 800c16c:	9305      	str	r3, [sp, #20]
 800c16e:	4619      	mov	r1, r3
 800c170:	f04f 0c0a 	mov.w	ip, #10
 800c174:	4620      	mov	r0, r4
 800c176:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c17a:	3a30      	subs	r2, #48	; 0x30
 800c17c:	2a09      	cmp	r2, #9
 800c17e:	d903      	bls.n	800c188 <_vfiprintf_r+0x1d0>
 800c180:	2b00      	cmp	r3, #0
 800c182:	d0c6      	beq.n	800c112 <_vfiprintf_r+0x15a>
 800c184:	9105      	str	r1, [sp, #20]
 800c186:	e7c4      	b.n	800c112 <_vfiprintf_r+0x15a>
 800c188:	fb0c 2101 	mla	r1, ip, r1, r2
 800c18c:	4604      	mov	r4, r0
 800c18e:	2301      	movs	r3, #1
 800c190:	e7f0      	b.n	800c174 <_vfiprintf_r+0x1bc>
 800c192:	ab03      	add	r3, sp, #12
 800c194:	9300      	str	r3, [sp, #0]
 800c196:	462a      	mov	r2, r5
 800c198:	4b12      	ldr	r3, [pc, #72]	; (800c1e4 <_vfiprintf_r+0x22c>)
 800c19a:	a904      	add	r1, sp, #16
 800c19c:	4630      	mov	r0, r6
 800c19e:	f7fd fd9d 	bl	8009cdc <_printf_float>
 800c1a2:	4607      	mov	r7, r0
 800c1a4:	1c78      	adds	r0, r7, #1
 800c1a6:	d1d6      	bne.n	800c156 <_vfiprintf_r+0x19e>
 800c1a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1aa:	07d9      	lsls	r1, r3, #31
 800c1ac:	d405      	bmi.n	800c1ba <_vfiprintf_r+0x202>
 800c1ae:	89ab      	ldrh	r3, [r5, #12]
 800c1b0:	059a      	lsls	r2, r3, #22
 800c1b2:	d402      	bmi.n	800c1ba <_vfiprintf_r+0x202>
 800c1b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1b6:	f7fe fbdd 	bl	800a974 <__retarget_lock_release_recursive>
 800c1ba:	89ab      	ldrh	r3, [r5, #12]
 800c1bc:	065b      	lsls	r3, r3, #25
 800c1be:	f53f af1d 	bmi.w	800bffc <_vfiprintf_r+0x44>
 800c1c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1c4:	e71c      	b.n	800c000 <_vfiprintf_r+0x48>
 800c1c6:	ab03      	add	r3, sp, #12
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	462a      	mov	r2, r5
 800c1cc:	4b05      	ldr	r3, [pc, #20]	; (800c1e4 <_vfiprintf_r+0x22c>)
 800c1ce:	a904      	add	r1, sp, #16
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	f7fe f827 	bl	800a224 <_printf_i>
 800c1d6:	e7e4      	b.n	800c1a2 <_vfiprintf_r+0x1ea>
 800c1d8:	0800c984 	.word	0x0800c984
 800c1dc:	0800c98e 	.word	0x0800c98e
 800c1e0:	08009cdd 	.word	0x08009cdd
 800c1e4:	0800bf93 	.word	0x0800bf93
 800c1e8:	0800c98a 	.word	0x0800c98a

0800c1ec <__sflush_r>:
 800c1ec:	898a      	ldrh	r2, [r1, #12]
 800c1ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	0710      	lsls	r0, r2, #28
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	d458      	bmi.n	800c2ac <__sflush_r+0xc0>
 800c1fa:	684b      	ldr	r3, [r1, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	dc05      	bgt.n	800c20c <__sflush_r+0x20>
 800c200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c202:	2b00      	cmp	r3, #0
 800c204:	dc02      	bgt.n	800c20c <__sflush_r+0x20>
 800c206:	2000      	movs	r0, #0
 800c208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c20c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c20e:	2e00      	cmp	r6, #0
 800c210:	d0f9      	beq.n	800c206 <__sflush_r+0x1a>
 800c212:	2300      	movs	r3, #0
 800c214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c218:	682f      	ldr	r7, [r5, #0]
 800c21a:	6a21      	ldr	r1, [r4, #32]
 800c21c:	602b      	str	r3, [r5, #0]
 800c21e:	d032      	beq.n	800c286 <__sflush_r+0x9a>
 800c220:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c222:	89a3      	ldrh	r3, [r4, #12]
 800c224:	075a      	lsls	r2, r3, #29
 800c226:	d505      	bpl.n	800c234 <__sflush_r+0x48>
 800c228:	6863      	ldr	r3, [r4, #4]
 800c22a:	1ac0      	subs	r0, r0, r3
 800c22c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c22e:	b10b      	cbz	r3, 800c234 <__sflush_r+0x48>
 800c230:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c232:	1ac0      	subs	r0, r0, r3
 800c234:	2300      	movs	r3, #0
 800c236:	4602      	mov	r2, r0
 800c238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c23a:	6a21      	ldr	r1, [r4, #32]
 800c23c:	4628      	mov	r0, r5
 800c23e:	47b0      	blx	r6
 800c240:	1c43      	adds	r3, r0, #1
 800c242:	89a3      	ldrh	r3, [r4, #12]
 800c244:	d106      	bne.n	800c254 <__sflush_r+0x68>
 800c246:	6829      	ldr	r1, [r5, #0]
 800c248:	291d      	cmp	r1, #29
 800c24a:	d82b      	bhi.n	800c2a4 <__sflush_r+0xb8>
 800c24c:	4a29      	ldr	r2, [pc, #164]	; (800c2f4 <__sflush_r+0x108>)
 800c24e:	410a      	asrs	r2, r1
 800c250:	07d6      	lsls	r6, r2, #31
 800c252:	d427      	bmi.n	800c2a4 <__sflush_r+0xb8>
 800c254:	2200      	movs	r2, #0
 800c256:	6062      	str	r2, [r4, #4]
 800c258:	04d9      	lsls	r1, r3, #19
 800c25a:	6922      	ldr	r2, [r4, #16]
 800c25c:	6022      	str	r2, [r4, #0]
 800c25e:	d504      	bpl.n	800c26a <__sflush_r+0x7e>
 800c260:	1c42      	adds	r2, r0, #1
 800c262:	d101      	bne.n	800c268 <__sflush_r+0x7c>
 800c264:	682b      	ldr	r3, [r5, #0]
 800c266:	b903      	cbnz	r3, 800c26a <__sflush_r+0x7e>
 800c268:	6560      	str	r0, [r4, #84]	; 0x54
 800c26a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c26c:	602f      	str	r7, [r5, #0]
 800c26e:	2900      	cmp	r1, #0
 800c270:	d0c9      	beq.n	800c206 <__sflush_r+0x1a>
 800c272:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c276:	4299      	cmp	r1, r3
 800c278:	d002      	beq.n	800c280 <__sflush_r+0x94>
 800c27a:	4628      	mov	r0, r5
 800c27c:	f7ff f9f6 	bl	800b66c <_free_r>
 800c280:	2000      	movs	r0, #0
 800c282:	6360      	str	r0, [r4, #52]	; 0x34
 800c284:	e7c0      	b.n	800c208 <__sflush_r+0x1c>
 800c286:	2301      	movs	r3, #1
 800c288:	4628      	mov	r0, r5
 800c28a:	47b0      	blx	r6
 800c28c:	1c41      	adds	r1, r0, #1
 800c28e:	d1c8      	bne.n	800c222 <__sflush_r+0x36>
 800c290:	682b      	ldr	r3, [r5, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d0c5      	beq.n	800c222 <__sflush_r+0x36>
 800c296:	2b1d      	cmp	r3, #29
 800c298:	d001      	beq.n	800c29e <__sflush_r+0xb2>
 800c29a:	2b16      	cmp	r3, #22
 800c29c:	d101      	bne.n	800c2a2 <__sflush_r+0xb6>
 800c29e:	602f      	str	r7, [r5, #0]
 800c2a0:	e7b1      	b.n	800c206 <__sflush_r+0x1a>
 800c2a2:	89a3      	ldrh	r3, [r4, #12]
 800c2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2a8:	81a3      	strh	r3, [r4, #12]
 800c2aa:	e7ad      	b.n	800c208 <__sflush_r+0x1c>
 800c2ac:	690f      	ldr	r7, [r1, #16]
 800c2ae:	2f00      	cmp	r7, #0
 800c2b0:	d0a9      	beq.n	800c206 <__sflush_r+0x1a>
 800c2b2:	0793      	lsls	r3, r2, #30
 800c2b4:	680e      	ldr	r6, [r1, #0]
 800c2b6:	bf08      	it	eq
 800c2b8:	694b      	ldreq	r3, [r1, #20]
 800c2ba:	600f      	str	r7, [r1, #0]
 800c2bc:	bf18      	it	ne
 800c2be:	2300      	movne	r3, #0
 800c2c0:	eba6 0807 	sub.w	r8, r6, r7
 800c2c4:	608b      	str	r3, [r1, #8]
 800c2c6:	f1b8 0f00 	cmp.w	r8, #0
 800c2ca:	dd9c      	ble.n	800c206 <__sflush_r+0x1a>
 800c2cc:	6a21      	ldr	r1, [r4, #32]
 800c2ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2d0:	4643      	mov	r3, r8
 800c2d2:	463a      	mov	r2, r7
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	47b0      	blx	r6
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	dc06      	bgt.n	800c2ea <__sflush_r+0xfe>
 800c2dc:	89a3      	ldrh	r3, [r4, #12]
 800c2de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2e2:	81a3      	strh	r3, [r4, #12]
 800c2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e8:	e78e      	b.n	800c208 <__sflush_r+0x1c>
 800c2ea:	4407      	add	r7, r0
 800c2ec:	eba8 0800 	sub.w	r8, r8, r0
 800c2f0:	e7e9      	b.n	800c2c6 <__sflush_r+0xda>
 800c2f2:	bf00      	nop
 800c2f4:	dfbffffe 	.word	0xdfbffffe

0800c2f8 <_fflush_r>:
 800c2f8:	b538      	push	{r3, r4, r5, lr}
 800c2fa:	690b      	ldr	r3, [r1, #16]
 800c2fc:	4605      	mov	r5, r0
 800c2fe:	460c      	mov	r4, r1
 800c300:	b913      	cbnz	r3, 800c308 <_fflush_r+0x10>
 800c302:	2500      	movs	r5, #0
 800c304:	4628      	mov	r0, r5
 800c306:	bd38      	pop	{r3, r4, r5, pc}
 800c308:	b118      	cbz	r0, 800c312 <_fflush_r+0x1a>
 800c30a:	6a03      	ldr	r3, [r0, #32]
 800c30c:	b90b      	cbnz	r3, 800c312 <_fflush_r+0x1a>
 800c30e:	f7fe f937 	bl	800a580 <__sinit>
 800c312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d0f3      	beq.n	800c302 <_fflush_r+0xa>
 800c31a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c31c:	07d0      	lsls	r0, r2, #31
 800c31e:	d404      	bmi.n	800c32a <_fflush_r+0x32>
 800c320:	0599      	lsls	r1, r3, #22
 800c322:	d402      	bmi.n	800c32a <_fflush_r+0x32>
 800c324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c326:	f7fe fb24 	bl	800a972 <__retarget_lock_acquire_recursive>
 800c32a:	4628      	mov	r0, r5
 800c32c:	4621      	mov	r1, r4
 800c32e:	f7ff ff5d 	bl	800c1ec <__sflush_r>
 800c332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c334:	07da      	lsls	r2, r3, #31
 800c336:	4605      	mov	r5, r0
 800c338:	d4e4      	bmi.n	800c304 <_fflush_r+0xc>
 800c33a:	89a3      	ldrh	r3, [r4, #12]
 800c33c:	059b      	lsls	r3, r3, #22
 800c33e:	d4e1      	bmi.n	800c304 <_fflush_r+0xc>
 800c340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c342:	f7fe fb17 	bl	800a974 <__retarget_lock_release_recursive>
 800c346:	e7dd      	b.n	800c304 <_fflush_r+0xc>

0800c348 <__swhatbuf_r>:
 800c348:	b570      	push	{r4, r5, r6, lr}
 800c34a:	460c      	mov	r4, r1
 800c34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c350:	2900      	cmp	r1, #0
 800c352:	b096      	sub	sp, #88	; 0x58
 800c354:	4615      	mov	r5, r2
 800c356:	461e      	mov	r6, r3
 800c358:	da0d      	bge.n	800c376 <__swhatbuf_r+0x2e>
 800c35a:	89a3      	ldrh	r3, [r4, #12]
 800c35c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c360:	f04f 0100 	mov.w	r1, #0
 800c364:	bf0c      	ite	eq
 800c366:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c36a:	2340      	movne	r3, #64	; 0x40
 800c36c:	2000      	movs	r0, #0
 800c36e:	6031      	str	r1, [r6, #0]
 800c370:	602b      	str	r3, [r5, #0]
 800c372:	b016      	add	sp, #88	; 0x58
 800c374:	bd70      	pop	{r4, r5, r6, pc}
 800c376:	466a      	mov	r2, sp
 800c378:	f000 f848 	bl	800c40c <_fstat_r>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	dbec      	blt.n	800c35a <__swhatbuf_r+0x12>
 800c380:	9901      	ldr	r1, [sp, #4]
 800c382:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c386:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c38a:	4259      	negs	r1, r3
 800c38c:	4159      	adcs	r1, r3
 800c38e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c392:	e7eb      	b.n	800c36c <__swhatbuf_r+0x24>

0800c394 <__smakebuf_r>:
 800c394:	898b      	ldrh	r3, [r1, #12]
 800c396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c398:	079d      	lsls	r5, r3, #30
 800c39a:	4606      	mov	r6, r0
 800c39c:	460c      	mov	r4, r1
 800c39e:	d507      	bpl.n	800c3b0 <__smakebuf_r+0x1c>
 800c3a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3a4:	6023      	str	r3, [r4, #0]
 800c3a6:	6123      	str	r3, [r4, #16]
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	6163      	str	r3, [r4, #20]
 800c3ac:	b002      	add	sp, #8
 800c3ae:	bd70      	pop	{r4, r5, r6, pc}
 800c3b0:	ab01      	add	r3, sp, #4
 800c3b2:	466a      	mov	r2, sp
 800c3b4:	f7ff ffc8 	bl	800c348 <__swhatbuf_r>
 800c3b8:	9900      	ldr	r1, [sp, #0]
 800c3ba:	4605      	mov	r5, r0
 800c3bc:	4630      	mov	r0, r6
 800c3be:	f7ff f9c9 	bl	800b754 <_malloc_r>
 800c3c2:	b948      	cbnz	r0, 800c3d8 <__smakebuf_r+0x44>
 800c3c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3c8:	059a      	lsls	r2, r3, #22
 800c3ca:	d4ef      	bmi.n	800c3ac <__smakebuf_r+0x18>
 800c3cc:	f023 0303 	bic.w	r3, r3, #3
 800c3d0:	f043 0302 	orr.w	r3, r3, #2
 800c3d4:	81a3      	strh	r3, [r4, #12]
 800c3d6:	e7e3      	b.n	800c3a0 <__smakebuf_r+0xc>
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	6020      	str	r0, [r4, #0]
 800c3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3e0:	81a3      	strh	r3, [r4, #12]
 800c3e2:	9b00      	ldr	r3, [sp, #0]
 800c3e4:	6163      	str	r3, [r4, #20]
 800c3e6:	9b01      	ldr	r3, [sp, #4]
 800c3e8:	6120      	str	r0, [r4, #16]
 800c3ea:	b15b      	cbz	r3, 800c404 <__smakebuf_r+0x70>
 800c3ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	f000 f81d 	bl	800c430 <_isatty_r>
 800c3f6:	b128      	cbz	r0, 800c404 <__smakebuf_r+0x70>
 800c3f8:	89a3      	ldrh	r3, [r4, #12]
 800c3fa:	f023 0303 	bic.w	r3, r3, #3
 800c3fe:	f043 0301 	orr.w	r3, r3, #1
 800c402:	81a3      	strh	r3, [r4, #12]
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	431d      	orrs	r5, r3
 800c408:	81a5      	strh	r5, [r4, #12]
 800c40a:	e7cf      	b.n	800c3ac <__smakebuf_r+0x18>

0800c40c <_fstat_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	4d07      	ldr	r5, [pc, #28]	; (800c42c <_fstat_r+0x20>)
 800c410:	2300      	movs	r3, #0
 800c412:	4604      	mov	r4, r0
 800c414:	4608      	mov	r0, r1
 800c416:	4611      	mov	r1, r2
 800c418:	602b      	str	r3, [r5, #0]
 800c41a:	f7f6 fbaa 	bl	8002b72 <_fstat>
 800c41e:	1c43      	adds	r3, r0, #1
 800c420:	d102      	bne.n	800c428 <_fstat_r+0x1c>
 800c422:	682b      	ldr	r3, [r5, #0]
 800c424:	b103      	cbz	r3, 800c428 <_fstat_r+0x1c>
 800c426:	6023      	str	r3, [r4, #0]
 800c428:	bd38      	pop	{r3, r4, r5, pc}
 800c42a:	bf00      	nop
 800c42c:	200007dc 	.word	0x200007dc

0800c430 <_isatty_r>:
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	4d06      	ldr	r5, [pc, #24]	; (800c44c <_isatty_r+0x1c>)
 800c434:	2300      	movs	r3, #0
 800c436:	4604      	mov	r4, r0
 800c438:	4608      	mov	r0, r1
 800c43a:	602b      	str	r3, [r5, #0]
 800c43c:	f7f6 fba9 	bl	8002b92 <_isatty>
 800c440:	1c43      	adds	r3, r0, #1
 800c442:	d102      	bne.n	800c44a <_isatty_r+0x1a>
 800c444:	682b      	ldr	r3, [r5, #0]
 800c446:	b103      	cbz	r3, 800c44a <_isatty_r+0x1a>
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	bd38      	pop	{r3, r4, r5, pc}
 800c44c:	200007dc 	.word	0x200007dc

0800c450 <_sbrk_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4d06      	ldr	r5, [pc, #24]	; (800c46c <_sbrk_r+0x1c>)
 800c454:	2300      	movs	r3, #0
 800c456:	4604      	mov	r4, r0
 800c458:	4608      	mov	r0, r1
 800c45a:	602b      	str	r3, [r5, #0]
 800c45c:	f7f6 fbb2 	bl	8002bc4 <_sbrk>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d102      	bne.n	800c46a <_sbrk_r+0x1a>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	b103      	cbz	r3, 800c46a <_sbrk_r+0x1a>
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	200007dc 	.word	0x200007dc

0800c470 <memcpy>:
 800c470:	440a      	add	r2, r1
 800c472:	4291      	cmp	r1, r2
 800c474:	f100 33ff 	add.w	r3, r0, #4294967295
 800c478:	d100      	bne.n	800c47c <memcpy+0xc>
 800c47a:	4770      	bx	lr
 800c47c:	b510      	push	{r4, lr}
 800c47e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c482:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c486:	4291      	cmp	r1, r2
 800c488:	d1f9      	bne.n	800c47e <memcpy+0xe>
 800c48a:	bd10      	pop	{r4, pc}

0800c48c <__assert_func>:
 800c48c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c48e:	4614      	mov	r4, r2
 800c490:	461a      	mov	r2, r3
 800c492:	4b09      	ldr	r3, [pc, #36]	; (800c4b8 <__assert_func+0x2c>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4605      	mov	r5, r0
 800c498:	68d8      	ldr	r0, [r3, #12]
 800c49a:	b14c      	cbz	r4, 800c4b0 <__assert_func+0x24>
 800c49c:	4b07      	ldr	r3, [pc, #28]	; (800c4bc <__assert_func+0x30>)
 800c49e:	9100      	str	r1, [sp, #0]
 800c4a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4a4:	4906      	ldr	r1, [pc, #24]	; (800c4c0 <__assert_func+0x34>)
 800c4a6:	462b      	mov	r3, r5
 800c4a8:	f000 f844 	bl	800c534 <fiprintf>
 800c4ac:	f000 f854 	bl	800c558 <abort>
 800c4b0:	4b04      	ldr	r3, [pc, #16]	; (800c4c4 <__assert_func+0x38>)
 800c4b2:	461c      	mov	r4, r3
 800c4b4:	e7f3      	b.n	800c49e <__assert_func+0x12>
 800c4b6:	bf00      	nop
 800c4b8:	20000068 	.word	0x20000068
 800c4bc:	0800c99f 	.word	0x0800c99f
 800c4c0:	0800c9ac 	.word	0x0800c9ac
 800c4c4:	0800c9da 	.word	0x0800c9da

0800c4c8 <_calloc_r>:
 800c4c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4ca:	fba1 2402 	umull	r2, r4, r1, r2
 800c4ce:	b94c      	cbnz	r4, 800c4e4 <_calloc_r+0x1c>
 800c4d0:	4611      	mov	r1, r2
 800c4d2:	9201      	str	r2, [sp, #4]
 800c4d4:	f7ff f93e 	bl	800b754 <_malloc_r>
 800c4d8:	9a01      	ldr	r2, [sp, #4]
 800c4da:	4605      	mov	r5, r0
 800c4dc:	b930      	cbnz	r0, 800c4ec <_calloc_r+0x24>
 800c4de:	4628      	mov	r0, r5
 800c4e0:	b003      	add	sp, #12
 800c4e2:	bd30      	pop	{r4, r5, pc}
 800c4e4:	220c      	movs	r2, #12
 800c4e6:	6002      	str	r2, [r0, #0]
 800c4e8:	2500      	movs	r5, #0
 800c4ea:	e7f8      	b.n	800c4de <_calloc_r+0x16>
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	f7fe f9c3 	bl	800a878 <memset>
 800c4f2:	e7f4      	b.n	800c4de <_calloc_r+0x16>

0800c4f4 <__ascii_mbtowc>:
 800c4f4:	b082      	sub	sp, #8
 800c4f6:	b901      	cbnz	r1, 800c4fa <__ascii_mbtowc+0x6>
 800c4f8:	a901      	add	r1, sp, #4
 800c4fa:	b142      	cbz	r2, 800c50e <__ascii_mbtowc+0x1a>
 800c4fc:	b14b      	cbz	r3, 800c512 <__ascii_mbtowc+0x1e>
 800c4fe:	7813      	ldrb	r3, [r2, #0]
 800c500:	600b      	str	r3, [r1, #0]
 800c502:	7812      	ldrb	r2, [r2, #0]
 800c504:	1e10      	subs	r0, r2, #0
 800c506:	bf18      	it	ne
 800c508:	2001      	movne	r0, #1
 800c50a:	b002      	add	sp, #8
 800c50c:	4770      	bx	lr
 800c50e:	4610      	mov	r0, r2
 800c510:	e7fb      	b.n	800c50a <__ascii_mbtowc+0x16>
 800c512:	f06f 0001 	mvn.w	r0, #1
 800c516:	e7f8      	b.n	800c50a <__ascii_mbtowc+0x16>

0800c518 <__ascii_wctomb>:
 800c518:	b149      	cbz	r1, 800c52e <__ascii_wctomb+0x16>
 800c51a:	2aff      	cmp	r2, #255	; 0xff
 800c51c:	bf85      	ittet	hi
 800c51e:	238a      	movhi	r3, #138	; 0x8a
 800c520:	6003      	strhi	r3, [r0, #0]
 800c522:	700a      	strbls	r2, [r1, #0]
 800c524:	f04f 30ff 	movhi.w	r0, #4294967295
 800c528:	bf98      	it	ls
 800c52a:	2001      	movls	r0, #1
 800c52c:	4770      	bx	lr
 800c52e:	4608      	mov	r0, r1
 800c530:	4770      	bx	lr
	...

0800c534 <fiprintf>:
 800c534:	b40e      	push	{r1, r2, r3}
 800c536:	b503      	push	{r0, r1, lr}
 800c538:	4601      	mov	r1, r0
 800c53a:	ab03      	add	r3, sp, #12
 800c53c:	4805      	ldr	r0, [pc, #20]	; (800c554 <fiprintf+0x20>)
 800c53e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c542:	6800      	ldr	r0, [r0, #0]
 800c544:	9301      	str	r3, [sp, #4]
 800c546:	f7ff fd37 	bl	800bfb8 <_vfiprintf_r>
 800c54a:	b002      	add	sp, #8
 800c54c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c550:	b003      	add	sp, #12
 800c552:	4770      	bx	lr
 800c554:	20000068 	.word	0x20000068

0800c558 <abort>:
 800c558:	b508      	push	{r3, lr}
 800c55a:	2006      	movs	r0, #6
 800c55c:	f000 f82c 	bl	800c5b8 <raise>
 800c560:	2001      	movs	r0, #1
 800c562:	f7f6 fab7 	bl	8002ad4 <_exit>

0800c566 <_raise_r>:
 800c566:	291f      	cmp	r1, #31
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4604      	mov	r4, r0
 800c56c:	460d      	mov	r5, r1
 800c56e:	d904      	bls.n	800c57a <_raise_r+0x14>
 800c570:	2316      	movs	r3, #22
 800c572:	6003      	str	r3, [r0, #0]
 800c574:	f04f 30ff 	mov.w	r0, #4294967295
 800c578:	bd38      	pop	{r3, r4, r5, pc}
 800c57a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c57c:	b112      	cbz	r2, 800c584 <_raise_r+0x1e>
 800c57e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c582:	b94b      	cbnz	r3, 800c598 <_raise_r+0x32>
 800c584:	4620      	mov	r0, r4
 800c586:	f000 f831 	bl	800c5ec <_getpid_r>
 800c58a:	462a      	mov	r2, r5
 800c58c:	4601      	mov	r1, r0
 800c58e:	4620      	mov	r0, r4
 800c590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c594:	f000 b818 	b.w	800c5c8 <_kill_r>
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d00a      	beq.n	800c5b2 <_raise_r+0x4c>
 800c59c:	1c59      	adds	r1, r3, #1
 800c59e:	d103      	bne.n	800c5a8 <_raise_r+0x42>
 800c5a0:	2316      	movs	r3, #22
 800c5a2:	6003      	str	r3, [r0, #0]
 800c5a4:	2001      	movs	r0, #1
 800c5a6:	e7e7      	b.n	800c578 <_raise_r+0x12>
 800c5a8:	2400      	movs	r4, #0
 800c5aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	4798      	blx	r3
 800c5b2:	2000      	movs	r0, #0
 800c5b4:	e7e0      	b.n	800c578 <_raise_r+0x12>
	...

0800c5b8 <raise>:
 800c5b8:	4b02      	ldr	r3, [pc, #8]	; (800c5c4 <raise+0xc>)
 800c5ba:	4601      	mov	r1, r0
 800c5bc:	6818      	ldr	r0, [r3, #0]
 800c5be:	f7ff bfd2 	b.w	800c566 <_raise_r>
 800c5c2:	bf00      	nop
 800c5c4:	20000068 	.word	0x20000068

0800c5c8 <_kill_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	4d07      	ldr	r5, [pc, #28]	; (800c5e8 <_kill_r+0x20>)
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	4608      	mov	r0, r1
 800c5d2:	4611      	mov	r1, r2
 800c5d4:	602b      	str	r3, [r5, #0]
 800c5d6:	f7f6 fa6d 	bl	8002ab4 <_kill>
 800c5da:	1c43      	adds	r3, r0, #1
 800c5dc:	d102      	bne.n	800c5e4 <_kill_r+0x1c>
 800c5de:	682b      	ldr	r3, [r5, #0]
 800c5e0:	b103      	cbz	r3, 800c5e4 <_kill_r+0x1c>
 800c5e2:	6023      	str	r3, [r4, #0]
 800c5e4:	bd38      	pop	{r3, r4, r5, pc}
 800c5e6:	bf00      	nop
 800c5e8:	200007dc 	.word	0x200007dc

0800c5ec <_getpid_r>:
 800c5ec:	f7f6 ba5a 	b.w	8002aa4 <_getpid>

0800c5f0 <_init>:
 800c5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f2:	bf00      	nop
 800c5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5f6:	bc08      	pop	{r3}
 800c5f8:	469e      	mov	lr, r3
 800c5fa:	4770      	bx	lr

0800c5fc <_fini>:
 800c5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fe:	bf00      	nop
 800c600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c602:	bc08      	pop	{r3}
 800c604:	469e      	mov	lr, r3
 800c606:	4770      	bx	lr
