
TADAMHESPEV_integrate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c568  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800c728  0800c728  0001c728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbfc  0800cbfc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbfc  0800cbfc  0001cbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc04  0800cc04  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc04  0800cc04  0001cc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc08  0800cc08  0001cc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cc0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  200001e0  0800cdec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  0800cdec  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c882  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003581  00000000  00000000  0003cad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e8  00000000  00000000  00040058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000139c  00000000  00000000  00041940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e78c  00000000  00000000  00042cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ed37  00000000  00000000  00071468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001201e6  00000000  00000000  0009019f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007be0  00000000  00000000  001b0388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  001b7f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c710 	.word	0x0800c710

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0800c710 	.word	0x0800c710

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <setupAccModule>:
#define OUT_Z_L_A 0x2C
#define OUT_Z_H_A 0x2D

extern I2C_HandleTypeDef hi2c1;

void setupAccModule(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
	uint8_t buf[10]= {ACC_IR_CTRL1, CTR1_SETUP};
 8000f7a:	f249 7320 	movw	r3, #38688	; 0x9720
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	809a      	strh	r2, [r3, #4]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDR << 1, buf, 2, 1000);
 8000f8a:	1d3a      	adds	r2, r7, #4
 8000f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2302      	movs	r3, #2
 8000f94:	2132      	movs	r1, #50	; 0x32
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <setupAccModule+0x48>)
 8000f98:	f003 fe44 	bl	8004c24 <HAL_I2C_Master_Transmit>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
	if(ret == 0){
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d103      	bne.n	8000fae <setupAccModule+0x3a>
		printf("We gucci\n");
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <setupAccModule+0x4c>)
 8000fa8:	f009 fc14 	bl	800a7d4 <puts>
	}
	else{
		printf("we not gucci setupAccModule\n");
	}
}
 8000fac:	e002      	b.n	8000fb4 <setupAccModule+0x40>
		printf("we not gucci setupAccModule\n");
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <setupAccModule+0x50>)
 8000fb0:	f009 fc10 	bl	800a7d4 <puts>
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000354 	.word	0x20000354
 8000fc0:	0800c728 	.word	0x0800c728
 8000fc4:	0800c734 	.word	0x0800c734

08000fc8 <ReadAccData>:
	printf("Raw:\t%u\tAcc:\t%f\tBinary:\t",raw,acc);
	printBinary(accBin);
	printf("\n");
}

float ReadAccData(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2140      	movs	r1, #64	; 0x40
 8000fd2:	482c      	ldr	r0, [pc, #176]	; (8001084 <ReadAccData+0xbc>)
 8000fd4:	f003 fd72 	bl	8004abc <HAL_GPIO_WritePin>
		uint8_t buf[1]= {OUT_X_L_A | 1 << 7}; //Auto-Increment OUT_X_L_A
 8000fd8:	23a8      	movs	r3, #168	; 0xa8
 8000fda:	713b      	strb	r3, [r7, #4]
		uint8_t rbuf[2];
		float accVal = 0;
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]

		HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDR << 1, buf, 1, 1000);
 8000fe2:	1d3a      	adds	r2, r7, #4
 8000fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	2132      	movs	r1, #50	; 0x32
 8000fee:	4826      	ldr	r0, [pc, #152]	; (8001088 <ReadAccData+0xc0>)
 8000ff0:	f003 fe18 	bl	8004c24 <HAL_I2C_Master_Transmit>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	72fb      	strb	r3, [r7, #11]
		//[TODO] - Have error checking for communication errors
		ret =  HAL_I2C_Master_Receive(&hi2c1, ACC_I2C_ADDR << 1, rbuf, 2, 1000);
 8000ff8:	463a      	mov	r2, r7
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2302      	movs	r3, #2
 8001002:	2132      	movs	r1, #50	; 0x32
 8001004:	4820      	ldr	r0, [pc, #128]	; (8001088 <ReadAccData+0xc0>)
 8001006:	f003 ff25 	bl	8004e54 <HAL_I2C_Master_Receive>
 800100a:	4603      	mov	r3, r0
 800100c:	72fb      	strb	r3, [r7, #11]
		//[TODO] - Have error checking for communication errors

		uint16_t raw = (rbuf[1] << 8) | rbuf[0];	// 2's compliment, +-2g's
 800100e:	787b      	ldrb	r3, [r7, #1]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	783b      	ldrb	r3, [r7, #0]
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	813b      	strh	r3, [r7, #8]
		if(raw > 64100){
 800101e:	893b      	ldrh	r3, [r7, #8]
 8001020:	f64f 2264 	movw	r2, #64100	; 0xfa64
 8001024:	4293      	cmp	r3, r2
 8001026:	d903      	bls.n	8001030 <ReadAccData+0x68>
			accVal = 0;
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e021      	b.n	8001074 <ReadAccData+0xac>
		}
		else if(raw & 0x8000){ //if value is negative
 8001030:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	da10      	bge.n	800105a <ReadAccData+0x92>
			int16_t temp = -((raw ^ 0xFFFF) + 1);
 8001038:	893b      	ldrh	r3, [r7, #8]
 800103a:	80fb      	strh	r3, [r7, #6]
			accVal = (temp / (float)(1 << 15))*2;
 800103c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001048:	eddf 6a10 	vldr	s13, [pc, #64]	; 800108c <ReadAccData+0xc4>
 800104c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001050:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001054:	edc7 7a03 	vstr	s15, [r7, #12]
 8001058:	e00c      	b.n	8001074 <ReadAccData+0xac>
		}
		else{ //positive acceleration
			accVal = (raw / (float)((1 << 15) - 1))*2;
 800105a:	893b      	ldrh	r3, [r7, #8]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001090 <ReadAccData+0xc8>
 8001068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001070:	edc7 7a03 	vstr	s15, [r7, #12]
		}
//		printf("Accel:\t%f\n",accVal);
		return accVal;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	ee07 3a90 	vmov	s15, r3
		//[TODO] - error check if binAcc = -1;

//		printf("%i\t%b\n",binAcc);

//		printf("%i\t%f\n",cnt++, accVal);
}
 800107a:	eeb0 0a67 	vmov.f32	s0, s15
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	48000400 	.word	0x48000400
 8001088:	20000354 	.word	0x20000354
 800108c:	47000000 	.word	0x47000000
 8001090:	46fffe00 	.word	0x46fffe00

08001094 <setupLEDS>:
uint8_t clearLEDs[NUM_MSG_BYTES];
uint8_t BLANK_LED[4] = {0xE0, 0x00, 0x00, 0x00};

extern SPI_HandleTypeDef hspi2;

void setupLEDS(){
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
	float acc_inc = MAX_ACCEL/NUM_LEDS;
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <setupLEDS+0xb8>)
 800109c:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < NUM_LEDS; ++i){
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e028      	b.n	80010f6 <setupLEDS+0x62>
		//setup LED_INDEX_THRESHOLD
		LED_INDEX_THRESHOLD[i] = i*acc_inc;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b6:	4a26      	ldr	r2, [pc, #152]	; (8001150 <setupLEDS+0xbc>)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	edc3 7a00 	vstr	s15, [r3]

		//setup LED_COLOR_ARR
		if(i < NUM_GREEN){
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	dc05      	bgt.n	80010d4 <setupLEDS+0x40>
			LED_COLOR_ARR[i] = 0; // 0 = green
 80010c8:	4a22      	ldr	r2, [pc, #136]	; (8001154 <setupLEDS+0xc0>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	e00d      	b.n	80010f0 <setupLEDS+0x5c>
		}
		else if(i < NUM_GREEN + NUM_YELLOW){
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	dc05      	bgt.n	80010e6 <setupLEDS+0x52>
			LED_COLOR_ARR[i] = 1; // 1 = yellow
 80010da:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <setupLEDS+0xc0>)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e004      	b.n	80010f0 <setupLEDS+0x5c>
		}
		else{
			LED_COLOR_ARR[i] = 2; // 2 = red
 80010e6:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <setupLEDS+0xc0>)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	2202      	movs	r2, #2
 80010ee:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_LEDS; ++i){
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	3301      	adds	r3, #1
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2b0e      	cmp	r3, #14
 80010fa:	ddd3      	ble.n	80010a4 <setupLEDS+0x10>
		}
	}

	//initialize a blank LED strip array
	for(int j = 0; j < NUM_MSG_BYTES; ++j){
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	e01a      	b.n	8001138 <setupLEDS+0xa4>
		if(j < 4){
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b03      	cmp	r3, #3
 8001106:	dc05      	bgt.n	8001114 <setupLEDS+0x80>
			clearLEDs[j] = 0;
 8001108:	4a13      	ldr	r2, [pc, #76]	; (8001158 <setupLEDS+0xc4>)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	4413      	add	r3, r2
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	e00e      	b.n	8001132 <setupLEDS+0x9e>
		}
		else if(j < (NUM_MSG_BYTES - 1)){
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	2b3f      	cmp	r3, #63	; 0x3f
 8001118:	dc06      	bgt.n	8001128 <setupLEDS+0x94>
			memcpy(&clearLEDs[j],BLANK_LED,sizeof(BLANK_LED));
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <setupLEDS+0xc4>)
 800111e:	4413      	add	r3, r2
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <setupLEDS+0xc8>)
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e004      	b.n	8001132 <setupLEDS+0x9e>
		}
		else{
			clearLEDs[j] = 0;
 8001128:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <setupLEDS+0xc4>)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	4413      	add	r3, r2
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < NUM_MSG_BYTES; ++j){
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3301      	adds	r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b40      	cmp	r3, #64	; 0x40
 800113c:	dde1      	ble.n	8001102 <setupLEDS+0x6e>
		}
	}
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	3e088889 	.word	0x3e088889
 8001150:	200001fc 	.word	0x200001fc
 8001154:	20000238 	.word	0x20000238
 8001158:	20000248 	.word	0x20000248
 800115c:	20000000 	.word	0x20000000

08001160 <makeLEDFrame>:
	if(ret != HAL_OK){
		//There is a problem
	}
}

void makeLEDFrame(uint8_t* frame, uint8_t gr_yel_red){
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	switch(gr_yel_red){
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d026      	beq.n	80011c0 <makeLEDFrame+0x60>
 8001172:	2b02      	cmp	r3, #2
 8001174:	dc34      	bgt.n	80011e0 <makeLEDFrame+0x80>
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <makeLEDFrame+0x20>
 800117a:	2b01      	cmp	r3, #1
 800117c:	d010      	beq.n	80011a0 <makeLEDFrame+0x40>
 800117e:	e02f      	b.n	80011e0 <makeLEDFrame+0x80>
		case 0:									// green
			*(frame) = LED_FRAME_START_BRIGHT;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	22e3      	movs	r2, #227	; 0xe3
 8001184:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 	//green
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3301      	adds	r3, #1
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 255; 		//blue
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3302      	adds	r3, #2
 8001192:	22ff      	movs	r2, #255	; 0xff
 8001194:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 0;		//red
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3303      	adds	r3, #3
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
			break;
 800119e:	e02f      	b.n	8001200 <makeLEDFrame+0xa0>
		case 1:					 				// yellow
			*(frame) = LED_FRAME_START_BRIGHT;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	22e3      	movs	r2, #227	; 0xe3
 80011a4:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 	//green
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3301      	adds	r3, #1
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 255; 		//blue
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3302      	adds	r3, #2
 80011b2:	22ff      	movs	r2, #255	; 0xff
 80011b4:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 255;		//red
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3303      	adds	r3, #3
 80011ba:	22ff      	movs	r2, #255	; 0xff
 80011bc:	701a      	strb	r2, [r3, #0]
			break;
 80011be:	e01f      	b.n	8001200 <makeLEDFrame+0xa0>
		case 2:					 				// red
			*(frame) = LED_FRAME_START_BRIGHT;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	22e3      	movs	r2, #227	; 0xe3
 80011c4:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 		//green
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3301      	adds	r3, #1
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 0;	 	//blue
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3302      	adds	r3, #2
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 255;		//red
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3303      	adds	r3, #3
 80011da:	22ff      	movs	r2, #255	; 0xff
 80011dc:	701a      	strb	r2, [r3, #0]
			break;
 80011de:	e00f      	b.n	8001200 <makeLEDFrame+0xa0>
		default:								// no brightness
			*(frame) = LED_FRAME_START_OFF;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	22e0      	movs	r2, #224	; 0xe0
 80011e4:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 		//green
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3301      	adds	r3, #1
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 0; 		//blue
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3302      	adds	r3, #2
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 0;		//red
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3303      	adds	r3, #3
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
			break;
 80011fe:	bf00      	nop
			//	[TODO] maybe try making them all off rather than having blue?
	}

}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <printLEDs>:

void printLEDs(float accVal){
 800120c:	b580      	push	{r7, lr}
 800120e:	b096      	sub	sp, #88	; 0x58
 8001210:	af00      	add	r7, sp, #0
 8001212:	ed87 0a01 	vstr	s0, [r7, #4]
	accVal = fabs(accVal);
 8001216:	edd7 7a01 	vldr	s15, [r7, #4]
 800121a:	eef0 7ae7 	vabs.f32	s15, s15
 800121e:	edc7 7a01 	vstr	s15, [r7, #4]

	uint8_t led_msg[NUM_MSG_BYTES];

	//create start frame
	int i = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	657b      	str	r3, [r7, #84]	; 0x54
	for(; i < 4; ++i){
 8001226:	e008      	b.n	800123a <printLEDs+0x2e>
		led_msg[i] = 0;
 8001228:	f107 020c 	add.w	r2, r7, #12
 800122c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800122e:	4413      	add	r3, r2
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
	for(; i < 4; ++i){
 8001234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001236:	3301      	adds	r3, #1
 8001238:	657b      	str	r3, [r7, #84]	; 0x54
 800123a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800123c:	2b03      	cmp	r3, #3
 800123e:	ddf3      	ble.n	8001228 <printLEDs+0x1c>
	}

	//create LED frame
	for(int j = 0; j < NUM_LEDS; ++j){
 8001240:	2300      	movs	r3, #0
 8001242:	653b      	str	r3, [r7, #80]	; 0x50
 8001244:	e029      	b.n	800129a <printLEDs+0x8e>
		uint8_t led_frame[4];
		if(accVal > LED_INDEX_THRESHOLD[j]){
 8001246:	4a27      	ldr	r2, [pc, #156]	; (80012e4 <printLEDs+0xd8>)
 8001248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	ed97 7a01 	vldr	s14, [r7, #4]
 8001256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125e:	dd0a      	ble.n	8001276 <printLEDs+0x6a>
			makeLEDFrame(led_frame,LED_COLOR_ARR[j]); //LED_COLOR_ARR[j] = 0,1,2
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <printLEDs+0xdc>)
 8001262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001264:	4413      	add	r3, r2
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff76 	bl	8001160 <makeLEDFrame>
 8001274:	e005      	b.n	8001282 <printLEDs+0x76>
		}
		else{
			makeLEDFrame(led_frame,4); //no brightness
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	2104      	movs	r1, #4
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff6f 	bl	8001160 <makeLEDFrame>
		}
		//add the frame to the rest of the message
		memcpy(&led_msg[i],led_frame,sizeof(led_frame));
 8001282:	f107 020c 	add.w	r2, r7, #12
 8001286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001288:	4413      	add	r3, r2
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	601a      	str	r2, [r3, #0]
//		led_msg[i] = led_frame;
		i = i + 4;
 800128e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001290:	3304      	adds	r3, #4
 8001292:	657b      	str	r3, [r7, #84]	; 0x54
	for(int j = 0; j < NUM_LEDS; ++j){
 8001294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001296:	3301      	adds	r3, #1
 8001298:	653b      	str	r3, [r7, #80]	; 0x50
 800129a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800129c:	2b0e      	cmp	r3, #14
 800129e:	ddd2      	ble.n	8001246 <printLEDs+0x3a>
			//full pause
		}
	}

	//create the end frame
	for(; i < NUM_MSG_BYTES; ++i){
 80012a0:	e008      	b.n	80012b4 <printLEDs+0xa8>
		led_msg[i] = 0;
 80012a2:	f107 020c 	add.w	r2, r7, #12
 80012a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012a8:	4413      	add	r3, r2
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
	for(; i < NUM_MSG_BYTES; ++i){
 80012ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b0:	3301      	adds	r3, #1
 80012b2:	657b      	str	r3, [r7, #84]	; 0x54
 80012b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b6:	2b40      	cmp	r3, #64	; 0x40
 80012b8:	ddf3      	ble.n	80012a2 <printLEDs+0x96>
	}

	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi2, (uint8_t *)led_msg, NUM_MSG_BYTES,1000);
 80012ba:	f107 010c 	add.w	r1, r7, #12
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	2241      	movs	r2, #65	; 0x41
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <printLEDs+0xe0>)
 80012c6:	f005 ff4c 	bl	8007162 <HAL_SPI_Transmit>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if(ret != HAL_OK){
		//There is a problem
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2140      	movs	r1, #64	; 0x40
 80012d4:	4806      	ldr	r0, [pc, #24]	; (80012f0 <printLEDs+0xe4>)
 80012d6:	f003 fbf1 	bl	8004abc <HAL_GPIO_WritePin>
}
 80012da:	bf00      	nop
 80012dc:	3758      	adds	r7, #88	; 0x58
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001fc 	.word	0x200001fc
 80012e8:	20000238 	.word	0x20000238
 80012ec:	20000534 	.word	0x20000534
 80012f0:	48000400 	.word	0x48000400

080012f4 <TADStructToBuffer>:
	data->speed = buf[2];
	data->voltage = buf[3];
	data->current = buf[4];
}

inline void TADStructToBuffer(float buf[], volatile struct TelData *data){
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
	buf[0] = data->accel;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
	buf[1] = data->temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3304      	adds	r3, #4
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	6852      	ldr	r2, [r2, #4]
 800130e:	601a      	str	r2, [r3, #0]
	buf[2] = data->speed;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3308      	adds	r3, #8
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	6892      	ldr	r2, [r2, #8]
 8001318:	601a      	str	r2, [r3, #0]
	buf[3] = data->voltage;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	330c      	adds	r3, #12
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	68d2      	ldr	r2, [r2, #12]
 8001322:	601a      	str	r2, [r3, #0]
	buf[4] = data->current;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3310      	adds	r3, #16
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	6912      	ldr	r2, [r2, #16]
 800132c:	601a      	str	r2, [r3, #0]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <KalmanEstimate>:
volatile int adcConversionComplete = 0;//set by callback

float volt_constant = 69.0 / (0b1 << 12);
float curr_constant = 3.3 / (0b1 << 12);

float KalmanEstimate(struct Kalman *filter, float measurement, float meas_error, float est_error, float noise) {
 800133c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	6178      	str	r0, [r7, #20]
 8001346:	ed87 0a04 	vstr	s0, [r7, #16]
 800134a:	edc7 0a03 	vstr	s1, [r7, #12]
 800134e:	ed87 1a02 	vstr	s2, [r7, #8]
 8001352:	edc7 1a01 	vstr	s3, [r7, #4]
	if (filter->error_estimate == 0) filter->error_estimate = meas_error;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	edd3 7a03 	vldr	s15, [r3, #12]
 800135c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001364:	d102      	bne.n	800136c <KalmanEstimate+0x30>
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	60da      	str	r2, [r3, #12]
	filter->gain = filter->error_estimate/(filter->error_estimate + meas_error);
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	ed93 7a03 	vldr	s14, [r3, #12]
 8001378:	edd7 7a03 	vldr	s15, [r7, #12]
 800137c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	edc3 7a01 	vstr	s15, [r3, #4]
	filter->signal_estimate = filter->prev_estimate + filter->gain*(measurement - filter->prev_estimate);
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	ed93 7a00 	vldr	s14, [r3]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	edd3 6a01 	vldr	s13, [r3, #4]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	ed97 6a04 	vldr	s12, [r7, #16]
 80013a0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	edc3 7a02 	vstr	s15, [r3, #8]
	filter->error_estimate = (1.0 - filter->gain)*filter->error_estimate + fabs(filter->prev_estimate - filter->signal_estimate)*noise;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f8de 	bl	8000578 <__aeabi_f2d>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	f04f 0000 	mov.w	r0, #0
 80013c4:	4925      	ldr	r1, [pc, #148]	; (800145c <KalmanEstimate+0x120>)
 80013c6:	f7fe ff77 	bl	80002b8 <__aeabi_dsub>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4614      	mov	r4, r2
 80013d0:	461d      	mov	r5, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f8ce 	bl	8000578 <__aeabi_f2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4620      	mov	r0, r4
 80013e2:	4629      	mov	r1, r5
 80013e4:	f7ff f920 	bl	8000628 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4690      	mov	r8, r2
 80013ee:	4699      	mov	r9, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	ed93 7a00 	vldr	s14, [r3]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80013fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001400:	eef0 7ae7 	vabs.f32	s15, s15
 8001404:	ee17 0a90 	vmov	r0, s15
 8001408:	f7ff f8b6 	bl	8000578 <__aeabi_f2d>
 800140c:	4604      	mov	r4, r0
 800140e:	460d      	mov	r5, r1
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff f8b1 	bl	8000578 <__aeabi_f2d>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4620      	mov	r0, r4
 800141c:	4629      	mov	r1, r5
 800141e:	f7ff f903 	bl	8000628 <__aeabi_dmul>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4640      	mov	r0, r8
 8001428:	4649      	mov	r1, r9
 800142a:	f7fe ff47 	bl	80002bc <__adddf3>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fbcf 	bl	8000bd8 <__aeabi_d2f>
 800143a:	4602      	mov	r2, r0
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	60da      	str	r2, [r3, #12]
	filter->prev_estimate = filter->signal_estimate;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	601a      	str	r2, [r3, #0]
	return filter->signal_estimate;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	ee07 3a90 	vmov	s15, r3
}
 8001450:	eeb0 0a67 	vmov.f32	s0, s15
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800145c:	3ff00000 	.word	0x3ff00000

08001460 <read_Temperature>:

uint16_t read_Temperature(uint16_t GPIO_PIN) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	80fb      	strh	r3, [r7, #6]
	uint16_t spi_buf[2];
	// Set the CS1 pin to low
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN, GPIO_PIN_RESET);
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	2200      	movs	r2, #0
 800146e:	4619      	mov	r1, r3
 8001470:	481e      	ldr	r0, [pc, #120]	; (80014ec <read_Temperature+0x8c>)
 8001472:	f003 fb23 	bl	8004abc <HAL_GPIO_WritePin>

	// Receive the data
	HAL_SPI_Receive(&hspi1, spi_buf, sizeof(spi_buf), 100);
 8001476:	f107 010c 	add.w	r1, r7, #12
 800147a:	2364      	movs	r3, #100	; 0x64
 800147c:	2204      	movs	r2, #4
 800147e:	481c      	ldr	r0, [pc, #112]	; (80014f0 <read_Temperature+0x90>)
 8001480:	f005 ffe4 	bl	800744c <HAL_SPI_Receive>

	// Set the CS pin back to high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN, GPIO_PIN_SET);
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	2201      	movs	r2, #1
 8001488:	4619      	mov	r1, r3
 800148a:	4818      	ldr	r0, [pc, #96]	; (80014ec <read_Temperature+0x8c>)
 800148c:	f003 fb16 	bl	8004abc <HAL_GPIO_WritePin>
//	HAL_Delay(1000);

	// handle the data
	// spi_buf[0] contains the first 16 bits of data
	// spi_buf[1] contains the last 16 bits of data
	uint16_t external_temp = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	82fb      	strh	r3, [r7, #22]
	uint16_t internal_temp = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	82bb      	strh	r3, [r7, #20]
	uint8_t fault = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	74fb      	strb	r3, [r7, #19]
	external_temp |= (spi_buf[0] >> 2) & 0xFFFF; // keep all data values
 800149c:	89bb      	ldrh	r3, [r7, #12]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	8afb      	ldrh	r3, [r7, #22]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	82fb      	strh	r3, [r7, #22]
	internal_temp |= (spi_buf[1] >> 4) & 0xFFFF; // keep all data values
 80014a8:	89fb      	ldrh	r3, [r7, #14]
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	8abb      	ldrh	r3, [r7, #20]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	82bb      	strh	r3, [r7, #20]
	fault |= spi_buf[0] & 0x01; // only want the LSB
 80014b4:	89bb      	ldrh	r3, [r7, #12]
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	b25a      	sxtb	r2, r3
 80014be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	74fb      	strb	r3, [r7, #19]
//	printf("External Temperature of %d: %d \n\r", GPIO_PIN, (external_temp/4));
//	printf("Internal Temperature of %d: %d \n\r", GPIO_PIN, (internal_temp/16));
	if(fault) {
 80014c8:	7cfb      	ldrb	r3, [r7, #19]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <read_Temperature+0x74>
		printf("ERROR \n\r");
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <read_Temperature+0x94>)
 80014d0:	f009 f91a 	bl	800a708 <iprintf>
	}


	// reset spi_buffer
	spi_buf[0] = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	81bb      	strh	r3, [r7, #12]
	spi_buf[1] = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	81fb      	strh	r3, [r7, #14]

	return external_temp/4;
 80014dc:	8afb      	ldrh	r3, [r7, #22]
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	b29b      	uxth	r3, r3
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	48000400 	.word	0x48000400
 80014f0:	200004d0 	.word	0x200004d0
 80014f4:	0800c770 	.word	0x0800c770

080014f8 <CalculateCurrent>:

#define NUM_CUR_READS 10
void CalculateCurrent(uint16_t adcRead){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	80fb      	strh	r3, [r7, #6]
	float curr = ((adcRead*curr_constant) - 1.72)/0.0545; //adc equation to get input current
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	ee07 3a90 	vmov	s15, r3
 8001508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150c:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <CalculateCurrent+0x90>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001516:	ee17 0a90 	vmov	r0, s15
 800151a:	f7ff f82d 	bl	8000578 <__aeabi_f2d>
 800151e:	a316      	add	r3, pc, #88	; (adr r3, 8001578 <CalculateCurrent+0x80>)
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	f7fe fec8 	bl	80002b8 <__aeabi_dsub>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4610      	mov	r0, r2
 800152e:	4619      	mov	r1, r3
 8001530:	a313      	add	r3, pc, #76	; (adr r3, 8001580 <CalculateCurrent+0x88>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff f9a1 	bl	800087c <__aeabi_ddiv>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff fb49 	bl	8000bd8 <__aeabi_d2f>
 8001546:	4603      	mov	r3, r0
 8001548:	60fb      	str	r3, [r7, #12]
	teldata.current = KalmanEstimate(&curr_filter,curr,1.0,1.0,0.015);
 800154a:	eddf 1a10 	vldr	s3, [pc, #64]	; 800158c <CalculateCurrent+0x94>
 800154e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001552:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001556:	ed97 0a03 	vldr	s0, [r7, #12]
 800155a:	480d      	ldr	r0, [pc, #52]	; (8001590 <CalculateCurrent+0x98>)
 800155c:	f7ff feee 	bl	800133c <KalmanEstimate>
 8001560:	eef0 7a40 	vmov.f32	s15, s0
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <CalculateCurrent+0x9c>)
 8001566:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	f3af 8000 	nop.w
 8001578:	b851eb85 	.word	0xb851eb85
 800157c:	3ffb851e 	.word	0x3ffb851e
 8001580:	8b439581 	.word	0x8b439581
 8001584:	3fabe76c 	.word	0x3fabe76c
 8001588:	20000008 	.word	0x20000008
 800158c:	3c75c28f 	.word	0x3c75c28f
 8001590:	200006a0 	.word	0x200006a0
 8001594:	2000067c 	.word	0x2000067c

08001598 <CalculateVoltage>:

void CalculateVoltage(uint16_t adcRead){
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
	float volt = adcRead * volt_constant; //adc equation to get input voltage
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ac:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <CalculateVoltage+0x4c>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b6:	edc7 7a03 	vstr	s15, [r7, #12]
	teldata.voltage = KalmanEstimate(&volt_filter,volt,1.0,1.0,0.015);
 80015ba:	eddf 1a0b 	vldr	s3, [pc, #44]	; 80015e8 <CalculateVoltage+0x50>
 80015be:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80015c2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80015c6:	ed97 0a03 	vldr	s0, [r7, #12]
 80015ca:	4808      	ldr	r0, [pc, #32]	; (80015ec <CalculateVoltage+0x54>)
 80015cc:	f7ff feb6 	bl	800133c <KalmanEstimate>
 80015d0:	eef0 7a40 	vmov.f32	s15, s0
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <CalculateVoltage+0x58>)
 80015d6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000004 	.word	0x20000004
 80015e8:	3c75c28f 	.word	0x3c75c28f
 80015ec:	20000690 	.word	0x20000690
 80015f0:	2000067c 	.word	0x2000067c

080015f4 <TakeADCMeasurement>:

void TakeADCMeasurement(){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) curVoltADC_DMA, adcChannelCount);
 80015f8:	2302      	movs	r3, #2
 80015fa:	461a      	mov	r2, r3
 80015fc:	4906      	ldr	r1, [pc, #24]	; (8001618 <TakeADCMeasurement+0x24>)
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <TakeADCMeasurement+0x28>)
 8001600:	f001 ff98 	bl	8003534 <HAL_ADC_Start_DMA>
	while (adcConversionComplete == 0);
 8001604:	bf00      	nop
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <TakeADCMeasurement+0x2c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0fb      	beq.n	8001606 <TakeADCMeasurement+0x12>
	adcConversionComplete = 0;
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <TakeADCMeasurement+0x2c>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200006b0 	.word	0x200006b0
 800161c:	2000028c 	.word	0x2000028c
 8001620:	200006b4 	.word	0x200006b4

08001624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b090      	sub	sp, #64	; 0x40
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162a:	f001 fbca 	bl	8002dc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162e:	f000 f913 	bl	8001858 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(6000); //wait for lcd to set up
 8001632:	f241 7070 	movw	r0, #6000	; 0x1770
 8001636:	f001 fc39 	bl	8002eac <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163a:	f000 fc31 	bl	8001ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 800163e:	f000 fc05 	bl	8001e4c <MX_DMA_Init>
  MX_I2C1_Init();
 8001642:	f000 f9c3 	bl	80019cc <MX_I2C1_Init>
  MX_SPI1_Init();
 8001646:	f000 fa97 	bl	8001b78 <MX_SPI1_Init>
  MX_TIM3_Init();
 800164a:	f000 fb11 	bl	8001c70 <MX_TIM3_Init>
  MX_TIM15_Init();
 800164e:	f000 fb5f 	bl	8001d10 <MX_TIM15_Init>
  MX_TIM17_Init();
 8001652:	f000 fbaf 	bl	8001db4 <MX_TIM17_Init>
  MX_LPUART1_UART_Init();
 8001656:	f000 f9f7 	bl	8001a48 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 800165a:	f000 facb 	bl	8001bf4 <MX_SPI2_Init>
  MX_UART4_Init();
 800165e:	f000 fa3f 	bl	8001ae0 <MX_UART4_Init>
  MX_ADC1_Init();
 8001662:	f000 f93f 	bl	80018e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("start integrated\n");
 8001666:	486b      	ldr	r0, [pc, #428]	; (8001814 <main+0x1f0>)
 8001668:	f009 f8b4 	bl	800a7d4 <puts>
  	uint8_t junk[19];
	HAL_UART_Transmit(&huart4, (uint8_t*) &junk, sizeof(junk), 100); //clear uart of secondary mcu
 800166c:	f107 0114 	add.w	r1, r7, #20
 8001670:	2364      	movs	r3, #100	; 0x64
 8001672:	2213      	movs	r2, #19
 8001674:	4868      	ldr	r0, [pc, #416]	; (8001818 <main+0x1f4>)
 8001676:	f007 fc77 	bl	8008f68 <HAL_UART_Transmit>
	// CS for all sensors should be high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800167a:	2201      	movs	r2, #1
 800167c:	2120      	movs	r1, #32
 800167e:	4867      	ldr	r0, [pc, #412]	; (800181c <main+0x1f8>)
 8001680:	f003 fa1c 	bl	8004abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	2104      	movs	r1, #4
 8001688:	4864      	ldr	r0, [pc, #400]	; (800181c <main+0x1f8>)
 800168a:	f003 fa17 	bl	8004abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	2140      	movs	r1, #64	; 0x40
 8001692:	4862      	ldr	r0, [pc, #392]	; (800181c <main+0x1f8>)
 8001694:	f003 fa12 	bl	8004abc <HAL_GPIO_WritePin>



	setupAccModule();
 8001698:	f7ff fc6c 	bl	8000f74 <setupAccModule>
	setupLEDS();
 800169c:	f7ff fcfa 	bl	8001094 <setupLEDS>

	// Start Timer
	HAL_TIM_Base_Start_IT(&htim3);
 80016a0:	485f      	ldr	r0, [pc, #380]	; (8001820 <main+0x1fc>)
 80016a2:	f006 fc41 	bl	8007f28 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim15);
 80016a6:	485f      	ldr	r0, [pc, #380]	; (8001824 <main+0x200>)
 80016a8:	f006 fc3e 	bl	8007f28 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim17,TIM_CHANNEL_1);
 80016ac:	2100      	movs	r1, #0
 80016ae:	485e      	ldr	r0, [pc, #376]	; (8001828 <main+0x204>)
 80016b0:	f006 fd0c 	bl	80080cc <HAL_TIM_IC_Start_IT>

	float buff[5];
	int voltageLoopCount = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	int speedCount = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	63bb      	str	r3, [r7, #56]	; 0x38
	const int numSamples = 10;
 80016bc:	230a      	movs	r3, #10
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t curAvg = 0, volAvg = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
 80016c4:	2300      	movs	r3, #0
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
//		HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF);//wait for conversion to finish
//		ADC_VAL = HAL_ADC_GetValue(&hadc1);//retrieve value
//		teldata.current = ADC_VAL;
//		printf("adcval: %d\n", ADC_VAL);

	  	for(int i = 0; i < numSamples ; ++i){ //take 10 samples
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016cc:	e012      	b.n	80016f4 <main+0xd0>
	  		TakeADCMeasurement();
 80016ce:	f7ff ff91 	bl	80015f4 <TakeADCMeasurement>
	  		volAvg += curVoltADC_DMA[0];
 80016d2:	4b56      	ldr	r3, [pc, #344]	; (800182c <main+0x208>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016dc:	4413      	add	r3, r2
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
	  		curAvg += curVoltADC_DMA[1];
 80016e0:	4b52      	ldr	r3, [pc, #328]	; (800182c <main+0x208>)
 80016e2:	885b      	ldrh	r3, [r3, #2]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ea:	4413      	add	r3, r2
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
	  	for(int i = 0; i < numSamples ; ++i){ //take 10 samples
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	3301      	adds	r3, #1
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dbe8      	blt.n	80016ce <main+0xaa>
	  	}
	  	curAvg/=numSamples;
 80016fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
	  	volAvg/=numSamples;
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
	  	printf("CUR AVG %d, VOL AVG %d\n", curAvg, volAvg);
 8001710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001712:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001714:	4846      	ldr	r0, [pc, #280]	; (8001830 <main+0x20c>)
 8001716:	f008 fff7 	bl	800a708 <iprintf>
	  	CalculateCurrent(curAvg);
 800171a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171c:	b29b      	uxth	r3, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff feea 	bl	80014f8 <CalculateCurrent>
	  	if(voltageLoopCount == 0 || (++voltageLoopCount)%20==0) CalculateVoltage(volAvg);
 8001724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001726:	2b00      	cmp	r3, #0
 8001728:	d010      	beq.n	800174c <main+0x128>
 800172a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800172c:	3301      	adds	r3, #1
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001730:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001732:	4b40      	ldr	r3, [pc, #256]	; (8001834 <main+0x210>)
 8001734:	fb83 2301 	smull	r2, r3, r3, r1
 8001738:	10da      	asrs	r2, r3, #3
 800173a:	17cb      	asrs	r3, r1, #31
 800173c:	1ad2      	subs	r2, r2, r3
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	1aca      	subs	r2, r1, r3
 8001748:	2a00      	cmp	r2, #0
 800174a:	d104      	bne.n	8001756 <main+0x132>
 800174c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800174e:	b29b      	uxth	r3, r3
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff21 	bl	8001598 <CalculateVoltage>
//	  	adcConversionComplete = 0;
//	  	CalculateCurrent(curVoltADC_DMA[0]);
//	  	if((++voltageLoopCount)%60==0) CalculateVoltage(curVoltADC_DMA[1]);

	  	//printf("ADC CURRENT %d, ADC VOLT %d", curVoltADC_DMA[0], curVoltADC_DMA[1]);
	  	if (teldata.speed == buff[2]) {
 8001756:	4b38      	ldr	r3, [pc, #224]	; (8001838 <main+0x214>)
 8001758:	ed93 7a02 	vldr	s14, [r3, #8]
 800175c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001760:	eeb4 7a67 	vcmp.f32	s14, s15
 8001764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001768:	d103      	bne.n	8001772 <main+0x14e>
	  		speedCount++;
 800176a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800176c:	3301      	adds	r3, #1
 800176e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001770:	e001      	b.n	8001776 <main+0x152>
	  	} else {
	  		speedCount = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	63bb      	str	r3, [r7, #56]	; 0x38
	  	}
	  	if (speedCount >= 3) {
 8001776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001778:	2b02      	cmp	r3, #2
 800177a:	dd03      	ble.n	8001784 <main+0x160>
	  		teldata.speed = 0;
 800177c:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <main+0x214>)
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
	  	}

		printf("Telemetry Data:\n");
 8001784:	482d      	ldr	r0, [pc, #180]	; (800183c <main+0x218>)
 8001786:	f009 f825 	bl	800a7d4 <puts>
		printf("Acceleration: %f\n", teldata.accel);
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <main+0x214>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fef2 	bl	8000578 <__aeabi_f2d>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4829      	ldr	r0, [pc, #164]	; (8001840 <main+0x21c>)
 800179a:	f008 ffb5 	bl	800a708 <iprintf>
		printf("Temperature: %f\n", teldata.temp);
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <main+0x214>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fee8 	bl	8000578 <__aeabi_f2d>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4825      	ldr	r0, [pc, #148]	; (8001844 <main+0x220>)
 80017ae:	f008 ffab 	bl	800a708 <iprintf>
		printf("Speed: %f\n", teldata.speed);
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <main+0x214>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fede 	bl	8000578 <__aeabi_f2d>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4821      	ldr	r0, [pc, #132]	; (8001848 <main+0x224>)
 80017c2:	f008 ffa1 	bl	800a708 <iprintf>
		printf("Voltage: %f\n", teldata.voltage);
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <main+0x214>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fed4 	bl	8000578 <__aeabi_f2d>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	481d      	ldr	r0, [pc, #116]	; (800184c <main+0x228>)
 80017d6:	f008 ff97 	bl	800a708 <iprintf>
		printf("Current: %f\n\n", teldata.current);
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <main+0x214>)
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe feca 	bl	8000578 <__aeabi_f2d>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4819      	ldr	r0, [pc, #100]	; (8001850 <main+0x22c>)
 80017ea:	f008 ff8d 	bl	800a708 <iprintf>

		TADStructToBuffer(buff, &teldata);
 80017ee:	463b      	mov	r3, r7
 80017f0:	4911      	ldr	r1, [pc, #68]	; (8001838 <main+0x214>)
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fd7e 	bl	80012f4 <TADStructToBuffer>
		HAL_UART_Transmit(&huart4, (uint8_t*) &buff, sizeof(buff), 100);
 80017f8:	4639      	mov	r1, r7
 80017fa:	2364      	movs	r3, #100	; 0x64
 80017fc:	2214      	movs	r2, #20
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <main+0x1f4>)
 8001800:	f007 fbb2 	bl	8008f68 <HAL_UART_Transmit>
		printf("uart trans\n");
 8001804:	4813      	ldr	r0, [pc, #76]	; (8001854 <main+0x230>)
 8001806:	f008 ffe5 	bl	800a7d4 <puts>
		HAL_Delay(1000);
 800180a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800180e:	f001 fb4d 	bl	8002eac <HAL_Delay>
	  	for(int i = 0; i < numSamples ; ++i){ //take 10 samples
 8001812:	e759      	b.n	80016c8 <main+0xa4>
 8001814:	0800c77c 	.word	0x0800c77c
 8001818:	2000043c 	.word	0x2000043c
 800181c:	48000400 	.word	0x48000400
 8001820:	20000598 	.word	0x20000598
 8001824:	200005e4 	.word	0x200005e4
 8001828:	20000630 	.word	0x20000630
 800182c:	200006b0 	.word	0x200006b0
 8001830:	0800c790 	.word	0x0800c790
 8001834:	66666667 	.word	0x66666667
 8001838:	2000067c 	.word	0x2000067c
 800183c:	0800c7a8 	.word	0x0800c7a8
 8001840:	0800c7b8 	.word	0x0800c7b8
 8001844:	0800c7cc 	.word	0x0800c7cc
 8001848:	0800c7e0 	.word	0x0800c7e0
 800184c:	0800c7ec 	.word	0x0800c7ec
 8001850:	0800c7fc 	.word	0x0800c7fc
 8001854:	0800c80c 	.word	0x0800c80c

08001858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b096      	sub	sp, #88	; 0x58
 800185c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	2244      	movs	r2, #68	; 0x44
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f009 f894 	bl	800a994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800186c:	463b      	mov	r3, r7
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800187a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800187e:	f003 ff29 	bl	80056d4 <HAL_PWREx_ControlVoltageScaling>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001888:	f000 fd20 	bl	80022cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800188c:	2310      	movs	r3, #16
 800188e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001890:	2301      	movs	r3, #1
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001898:	2360      	movs	r3, #96	; 0x60
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800189c:	2300      	movs	r3, #0
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 ffc9 	bl	800583c <HAL_RCC_OscConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80018b0:	f000 fd0c 	bl	80022cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b4:	230f      	movs	r3, #15
 80018b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018c8:	463b      	mov	r3, r7
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f004 fbcf 	bl	8006070 <HAL_RCC_ClockConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80018d8:	f000 fcf8 	bl	80022cc <Error_Handler>
  }
}
 80018dc:	bf00      	nop
 80018de:	3758      	adds	r7, #88	; 0x58
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ea:	463b      	mov	r3, r7
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
 80018f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018fa:	4b30      	ldr	r3, [pc, #192]	; (80019bc <MX_ADC1_Init+0xd8>)
 80018fc:	4a30      	ldr	r2, [pc, #192]	; (80019c0 <MX_ADC1_Init+0xdc>)
 80018fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001900:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <MX_ADC1_Init+0xd8>)
 8001902:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001906:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001908:	4b2c      	ldr	r3, [pc, #176]	; (80019bc <MX_ADC1_Init+0xd8>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800190e:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <MX_ADC1_Init+0xd8>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001914:	4b29      	ldr	r3, [pc, #164]	; (80019bc <MX_ADC1_Init+0xd8>)
 8001916:	2201      	movs	r2, #1
 8001918:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800191a:	4b28      	ldr	r3, [pc, #160]	; (80019bc <MX_ADC1_Init+0xd8>)
 800191c:	2204      	movs	r2, #4
 800191e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001920:	4b26      	ldr	r3, [pc, #152]	; (80019bc <MX_ADC1_Init+0xd8>)
 8001922:	2200      	movs	r2, #0
 8001924:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001926:	4b25      	ldr	r3, [pc, #148]	; (80019bc <MX_ADC1_Init+0xd8>)
 8001928:	2200      	movs	r2, #0
 800192a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <MX_ADC1_Init+0xd8>)
 800192e:	2202      	movs	r2, #2
 8001930:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001932:	4b22      	ldr	r3, [pc, #136]	; (80019bc <MX_ADC1_Init+0xd8>)
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <MX_ADC1_Init+0xd8>)
 800193c:	2200      	movs	r2, #0
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001940:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <MX_ADC1_Init+0xd8>)
 8001942:	2200      	movs	r2, #0
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001946:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <MX_ADC1_Init+0xd8>)
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <MX_ADC1_Init+0xd8>)
 8001950:	2200      	movs	r2, #0
 8001952:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <MX_ADC1_Init+0xd8>)
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800195c:	4817      	ldr	r0, [pc, #92]	; (80019bc <MX_ADC1_Init+0xd8>)
 800195e:	f001 fca3 	bl	80032a8 <HAL_ADC_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001968:	f000 fcb0 	bl	80022cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <MX_ADC1_Init+0xe0>)
 800196e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001970:	2306      	movs	r3, #6
 8001972:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001974:	2307      	movs	r3, #7
 8001976:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001978:	237f      	movs	r3, #127	; 0x7f
 800197a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800197c:	2304      	movs	r3, #4
 800197e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001984:	463b      	mov	r3, r7
 8001986:	4619      	mov	r1, r3
 8001988:	480c      	ldr	r0, [pc, #48]	; (80019bc <MX_ADC1_Init+0xd8>)
 800198a:	f001 fe6b 	bl	8003664 <HAL_ADC_ConfigChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001994:	f000 fc9a 	bl	80022cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <MX_ADC1_Init+0xe4>)
 800199a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800199c:	230c      	movs	r3, #12
 800199e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_ADC1_Init+0xd8>)
 80019a6:	f001 fe5d 	bl	8003664 <HAL_ADC_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80019b0:	f000 fc8c 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2000028c 	.word	0x2000028c
 80019c0:	50040000 	.word	0x50040000
 80019c4:	04300002 	.word	0x04300002
 80019c8:	08600004 	.word	0x08600004

080019cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <MX_I2C1_Init+0x74>)
 80019d2:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <MX_I2C1_Init+0x78>)
 80019d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <MX_I2C1_Init+0x74>)
 80019d8:	f640 6214 	movw	r2, #3604	; 0xe14
 80019dc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <MX_I2C1_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <MX_I2C1_Init+0x74>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <MX_I2C1_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <MX_I2C1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <MX_I2C1_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <MX_I2C1_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <MX_I2C1_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a08:	480d      	ldr	r0, [pc, #52]	; (8001a40 <MX_I2C1_Init+0x74>)
 8001a0a:	f003 f86f 	bl	8004aec <HAL_I2C_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a14:	f000 fc5a 	bl	80022cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4809      	ldr	r0, [pc, #36]	; (8001a40 <MX_I2C1_Init+0x74>)
 8001a1c:	f003 fda2 	bl	8005564 <HAL_I2CEx_ConfigAnalogFilter>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001a26:	f000 fc51 	bl	80022cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4804      	ldr	r0, [pc, #16]	; (8001a40 <MX_I2C1_Init+0x74>)
 8001a2e:	f003 fde4 	bl	80055fa <HAL_I2CEx_ConfigDigitalFilter>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001a38:	f000 fc48 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000354 	.word	0x20000354
 8001a44:	40005400 	.word	0x40005400

08001a48 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <MX_LPUART1_UART_Init+0x90>)
 8001a4e:	4a23      	ldr	r2, [pc, #140]	; (8001adc <MX_LPUART1_UART_Init+0x94>)
 8001a50:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <MX_LPUART1_UART_Init+0x90>)
 8001a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a58:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <MX_LPUART1_UART_Init+0x90>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <MX_LPUART1_UART_Init+0x90>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <MX_LPUART1_UART_Init+0x90>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <MX_LPUART1_UART_Init+0x90>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <MX_LPUART1_UART_Init+0x90>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <MX_LPUART1_UART_Init+0x90>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <MX_LPUART1_UART_Init+0x90>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <MX_LPUART1_UART_Init+0x90>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <MX_LPUART1_UART_Init+0x90>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a90:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <MX_LPUART1_UART_Init+0x90>)
 8001a92:	f007 fa19 	bl	8008ec8 <HAL_UART_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a9c:	f000 fc16 	bl	80022cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <MX_LPUART1_UART_Init+0x90>)
 8001aa4:	f008 f83e 	bl	8009b24 <HAL_UARTEx_SetTxFifoThreshold>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001aae:	f000 fc0d 	bl	80022cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4808      	ldr	r0, [pc, #32]	; (8001ad8 <MX_LPUART1_UART_Init+0x90>)
 8001ab6:	f008 f873 	bl	8009ba0 <HAL_UARTEx_SetRxFifoThreshold>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ac0:	f000 fc04 	bl	80022cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001ac4:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <MX_LPUART1_UART_Init+0x90>)
 8001ac6:	f007 fff4 	bl	8009ab2 <HAL_UARTEx_DisableFifoMode>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ad0:	f000 fbfc 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200003a8 	.word	0x200003a8
 8001adc:	40008000 	.word	0x40008000

08001ae0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <MX_UART4_Init+0x90>)
 8001ae6:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <MX_UART4_Init+0x94>)
 8001ae8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <MX_UART4_Init+0x90>)
 8001aec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001af0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <MX_UART4_Init+0x90>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <MX_UART4_Init+0x90>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_UART4_Init+0x90>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_UART4_Init+0x90>)
 8001b06:	220c      	movs	r2, #12
 8001b08:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <MX_UART4_Init+0x90>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_UART4_Init+0x90>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_UART4_Init+0x90>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_UART4_Init+0x90>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_UART4_Init+0x90>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b28:	4811      	ldr	r0, [pc, #68]	; (8001b70 <MX_UART4_Init+0x90>)
 8001b2a:	f007 f9cd 	bl	8008ec8 <HAL_UART_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001b34:	f000 fbca 	bl	80022cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b38:	2100      	movs	r1, #0
 8001b3a:	480d      	ldr	r0, [pc, #52]	; (8001b70 <MX_UART4_Init+0x90>)
 8001b3c:	f007 fff2 	bl	8009b24 <HAL_UARTEx_SetTxFifoThreshold>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001b46:	f000 fbc1 	bl	80022cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4808      	ldr	r0, [pc, #32]	; (8001b70 <MX_UART4_Init+0x90>)
 8001b4e:	f008 f827 	bl	8009ba0 <HAL_UARTEx_SetRxFifoThreshold>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001b58:	f000 fbb8 	bl	80022cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_UART4_Init+0x90>)
 8001b5e:	f007 ffa8 	bl	8009ab2 <HAL_UARTEx_DisableFifoMode>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001b68:	f000 fbb0 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	2000043c 	.word	0x2000043c
 8001b74:	40004c00 	.word	0x40004c00

08001b78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <MX_SPI1_Init+0x74>)
 8001b7e:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <MX_SPI1_Init+0x78>)
 8001b80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <MX_SPI1_Init+0x74>)
 8001b84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <MX_SPI1_Init+0x74>)
 8001b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b90:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <MX_SPI1_Init+0x74>)
 8001b94:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001b98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <MX_SPI1_Init+0x74>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <MX_SPI1_Init+0x74>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_SPI1_Init+0x74>)
 8001ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bd8:	4804      	ldr	r0, [pc, #16]	; (8001bec <MX_SPI1_Init+0x74>)
 8001bda:	f005 fa1f 	bl	800701c <HAL_SPI_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001be4:	f000 fb72 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200004d0 	.word	0x200004d0
 8001bf0:	40013000 	.word	0x40013000

08001bf4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MX_SPI2_Init+0x74>)
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <MX_SPI2_Init+0x78>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_SPI2_Init+0x74>)
 8001c00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <MX_SPI2_Init+0x74>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <MX_SPI2_Init+0x74>)
 8001c0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c12:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c14:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <MX_SPI2_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <MX_SPI2_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_SPI2_Init+0x74>)
 8001c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c26:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <MX_SPI2_Init+0x74>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <MX_SPI2_Init+0x74>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <MX_SPI2_Init+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <MX_SPI2_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <MX_SPI2_Init+0x74>)
 8001c42:	2207      	movs	r2, #7
 8001c44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <MX_SPI2_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <MX_SPI2_Init+0x74>)
 8001c4e:	2208      	movs	r2, #8
 8001c50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_SPI2_Init+0x74>)
 8001c54:	f005 f9e2 	bl	800701c <HAL_SPI_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c5e:	f000 fb35 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000534 	.word	0x20000534
 8001c6c:	40003800 	.word	0x40003800

08001c70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c76:	f107 0310 	add.w	r3, r7, #16
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001c90:	4a1e      	ldr	r2, [pc, #120]	; (8001d0c <MX_TIM3_Init+0x9c>)
 8001c92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3999;
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001c96:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001c9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8001ca2:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001ca4:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001ca8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cb6:	4814      	ldr	r0, [pc, #80]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001cb8:	f006 f8de 	bl	8007e78 <HAL_TIM_Base_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001cc2:	f000 fb03 	bl	80022cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480d      	ldr	r0, [pc, #52]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001cd4:	f006 fce2 	bl	800869c <HAL_TIM_ConfigClockSource>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001cde:	f000 faf5 	bl	80022cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	4806      	ldr	r0, [pc, #24]	; (8001d08 <MX_TIM3_Init+0x98>)
 8001cf0:	f007 f844 	bl	8008d7c <HAL_TIMEx_MasterConfigSynchronization>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001cfa:	f000 fae7 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000598 	.word	0x20000598
 8001d0c:	40000400 	.word	0x40000400

08001d10 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d16:	f107 0310 	add.w	r3, r7, #16
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <MX_TIM15_Init+0x9c>)
 8001d30:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <MX_TIM15_Init+0xa0>)
 8001d32:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3999;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <MX_TIM15_Init+0x9c>)
 8001d36:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001d3a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_TIM15_Init+0x9c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <MX_TIM15_Init+0x9c>)
 8001d44:	2213      	movs	r2, #19
 8001d46:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d48:	4b18      	ldr	r3, [pc, #96]	; (8001dac <MX_TIM15_Init+0x9c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <MX_TIM15_Init+0x9c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <MX_TIM15_Init+0x9c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001d5a:	4814      	ldr	r0, [pc, #80]	; (8001dac <MX_TIM15_Init+0x9c>)
 8001d5c:	f006 f88c 	bl	8007e78 <HAL_TIM_Base_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001d66:	f000 fab1 	bl	80022cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4619      	mov	r1, r3
 8001d76:	480d      	ldr	r0, [pc, #52]	; (8001dac <MX_TIM15_Init+0x9c>)
 8001d78:	f006 fc90 	bl	800869c <HAL_TIM_ConfigClockSource>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001d82:	f000 faa3 	bl	80022cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	4619      	mov	r1, r3
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <MX_TIM15_Init+0x9c>)
 8001d94:	f006 fff2 	bl	8008d7c <HAL_TIMEx_MasterConfigSynchronization>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001d9e:	f000 fa95 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	3720      	adds	r7, #32
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200005e4 	.word	0x200005e4
 8001db0:	40014000 	.word	0x40014000

08001db4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001dba:	463b      	mov	r3, r7
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <MX_TIM17_Init+0x90>)
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <MX_TIM17_Init+0x94>)
 8001dca:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3999;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <MX_TIM17_Init+0x90>)
 8001dce:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001dd2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <MX_TIM17_Init+0x90>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001dda:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <MX_TIM17_Init+0x90>)
 8001ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <MX_TIM17_Init+0x90>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001de8:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <MX_TIM17_Init+0x90>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <MX_TIM17_Init+0x90>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001df4:	4813      	ldr	r0, [pc, #76]	; (8001e44 <MX_TIM17_Init+0x90>)
 8001df6:	f006 f83f 	bl	8007e78 <HAL_TIM_Base_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM17_Init+0x50>
  {
    Error_Handler();
 8001e00:	f000 fa64 	bl	80022cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8001e04:	480f      	ldr	r0, [pc, #60]	; (8001e44 <MX_TIM17_Init+0x90>)
 8001e06:	f006 f8ff 	bl	8008008 <HAL_TIM_IC_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001e10:	f000 fa5c 	bl	80022cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001e14:	2302      	movs	r3, #2
 8001e16:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001e20:	230f      	movs	r3, #15
 8001e22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e24:	463b      	mov	r3, r7
 8001e26:	2200      	movs	r2, #0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4806      	ldr	r0, [pc, #24]	; (8001e44 <MX_TIM17_Init+0x90>)
 8001e2c:	f006 fb9a 	bl	8008564 <HAL_TIM_IC_ConfigChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM17_Init+0x86>
  {
    Error_Handler();
 8001e36:	f000 fa49 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000630 	.word	0x20000630
 8001e48:	40014800 	.word	0x40014800

08001e4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <MX_DMA_Init+0x50>)
 8001e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e56:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <MX_DMA_Init+0x50>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	6493      	str	r3, [r2, #72]	; 0x48
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <MX_DMA_Init+0x50>)
 8001e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_DMA_Init+0x50>)
 8001e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <MX_DMA_Init+0x50>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6493      	str	r3, [r2, #72]	; 0x48
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_DMA_Init+0x50>)
 8001e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	200b      	movs	r0, #11
 8001e88:	f002 f9dd 	bl	8004246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e8c:	200b      	movs	r0, #11
 8001e8e:	f002 f9f6 	bl	800427e <HAL_NVIC_EnableIRQ>

}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08e      	sub	sp, #56	; 0x38
 8001ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
 8001eb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eb6:	4bb3      	ldr	r3, [pc, #716]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	4ab2      	ldr	r2, [pc, #712]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001ebc:	f043 0310 	orr.w	r3, r3, #16
 8001ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec2:	4bb0      	ldr	r3, [pc, #704]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	623b      	str	r3, [r7, #32]
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ece:	4bad      	ldr	r3, [pc, #692]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	4aac      	ldr	r2, [pc, #688]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001ed4:	f043 0304 	orr.w	r3, r3, #4
 8001ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eda:	4baa      	ldr	r3, [pc, #680]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ee6:	4ba7      	ldr	r3, [pc, #668]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	4aa6      	ldr	r2, [pc, #664]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001eec:	f043 0320 	orr.w	r3, r3, #32
 8001ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef2:	4ba4      	ldr	r3, [pc, #656]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001efe:	4ba1      	ldr	r3, [pc, #644]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	4aa0      	ldr	r2, [pc, #640]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0a:	4b9e      	ldr	r3, [pc, #632]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	4b9b      	ldr	r3, [pc, #620]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1a:	4a9a      	ldr	r2, [pc, #616]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f22:	4b98      	ldr	r3, [pc, #608]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	4b95      	ldr	r3, [pc, #596]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	4a94      	ldr	r2, [pc, #592]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f3a:	4b92      	ldr	r3, [pc, #584]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f46:	4b8f      	ldr	r3, [pc, #572]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	4a8e      	ldr	r2, [pc, #568]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001f4c:	f043 0308 	orr.w	r3, r3, #8
 8001f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f52:	4b8c      	ldr	r3, [pc, #560]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f5e:	4b89      	ldr	r3, [pc, #548]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	4a88      	ldr	r2, [pc, #544]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f6a:	4b86      	ldr	r3, [pc, #536]	; (8002184 <MX_GPIO_Init+0x2e4>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001f76:	f003 fc51 	bl	800581c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2180      	movs	r1, #128	; 0x80
 8001f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f82:	f002 fd9b 	bl	8004abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2164      	movs	r1, #100	; 0x64
 8001f8a:	487f      	ldr	r0, [pc, #508]	; (8002188 <MX_GPIO_Init+0x2e8>)
 8001f8c:	f002 fd96 	bl	8004abc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f90:	230c      	movs	r3, #12
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001fa0:	230d      	movs	r3, #13
 8001fa2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4878      	ldr	r0, [pc, #480]	; (800218c <MX_GPIO_Init+0x2ec>)
 8001fac:	f002 fbf4 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001fb0:	2307      	movs	r3, #7
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb4:	2312      	movs	r3, #18
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4871      	ldr	r0, [pc, #452]	; (8002190 <MX_GPIO_Init+0x2f0>)
 8001fcc:	f002 fbe4 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001fe0:	230d      	movs	r3, #13
 8001fe2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4869      	ldr	r0, [pc, #420]	; (8002190 <MX_GPIO_Init+0x2f0>)
 8001fec:	f002 fbd4 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002000:	2301      	movs	r3, #1
 8002002:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002008:	4619      	mov	r1, r3
 800200a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800200e:	f002 fbc3 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002016:	2301      	movs	r3, #1
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002026:	4619      	mov	r1, r3
 8002028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202c:	f002 fbb4 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002030:	2364      	movs	r3, #100	; 0x64
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002034:	2301      	movs	r3, #1
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002044:	4619      	mov	r1, r3
 8002046:	4850      	ldr	r0, [pc, #320]	; (8002188 <MX_GPIO_Init+0x2e8>)
 8002048:	f002 fba6 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800204c:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800205e:	2301      	movs	r3, #1
 8002060:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002066:	4619      	mov	r1, r3
 8002068:	4848      	ldr	r0, [pc, #288]	; (800218c <MX_GPIO_Init+0x2ec>)
 800206a:	f002 fb95 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800206e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8002080:	2303      	movs	r3, #3
 8002082:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002088:	4619      	mov	r1, r3
 800208a:	4840      	ldr	r0, [pc, #256]	; (800218c <MX_GPIO_Init+0x2ec>)
 800208c:	f002 fb84 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020a2:	2301      	movs	r3, #1
 80020a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020aa:	4619      	mov	r1, r3
 80020ac:	4836      	ldr	r0, [pc, #216]	; (8002188 <MX_GPIO_Init+0x2e8>)
 80020ae:	f002 fb73 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80020b2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80020c4:	230d      	movs	r3, #13
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020cc:	4619      	mov	r1, r3
 80020ce:	482e      	ldr	r0, [pc, #184]	; (8002188 <MX_GPIO_Init+0x2e8>)
 80020d0:	f002 fb62 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020e6:	2307      	movs	r3, #7
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ee:	4619      	mov	r1, r3
 80020f0:	4828      	ldr	r0, [pc, #160]	; (8002194 <MX_GPIO_Init+0x2f4>)
 80020f2:	f002 fb51 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80020f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002108:	2302      	movs	r3, #2
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800210c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002110:	4619      	mov	r1, r3
 8002112:	4820      	ldr	r0, [pc, #128]	; (8002194 <MX_GPIO_Init+0x2f4>)
 8002114:	f002 fb40 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002118:	2340      	movs	r3, #64	; 0x40
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002128:	230d      	movs	r3, #13
 800212a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002130:	4619      	mov	r1, r3
 8002132:	4819      	ldr	r0, [pc, #100]	; (8002198 <MX_GPIO_Init+0x2f8>)
 8002134:	f002 fb30 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 8002138:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002146:	2303      	movs	r3, #3
 8002148:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800214a:	230c      	movs	r3, #12
 800214c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002152:	4619      	mov	r1, r3
 8002154:	4810      	ldr	r0, [pc, #64]	; (8002198 <MX_GPIO_Init+0x2f8>)
 8002156:	f002 fb1f 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800215a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002168:	2303      	movs	r3, #3
 800216a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800216c:	230a      	movs	r3, #10
 800216e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002174:	4619      	mov	r1, r3
 8002176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217a:	f002 fb0d 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800217e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002182:	e00b      	b.n	800219c <MX_GPIO_Init+0x2fc>
 8002184:	40021000 	.word	0x40021000
 8002188:	48000400 	.word	0x48000400
 800218c:	48001000 	.word	0x48001000
 8002190:	48001400 	.word	0x48001400
 8002194:	48000c00 	.word	0x48000c00
 8002198:	48000800 	.word	0x48000800
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219e:	2300      	movs	r3, #0
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021aa:	4619      	mov	r1, r3
 80021ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b0:	f002 faf2 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021b4:	2301      	movs	r3, #1
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80021c4:	2309      	movs	r3, #9
 80021c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021cc:	4619      	mov	r1, r3
 80021ce:	482b      	ldr	r0, [pc, #172]	; (800227c <MX_GPIO_Init+0x3dc>)
 80021d0:	f002 fae2 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021d4:	2304      	movs	r3, #4
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80021e4:	230c      	movs	r3, #12
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ec:	4619      	mov	r1, r3
 80021ee:	4823      	ldr	r0, [pc, #140]	; (800227c <MX_GPIO_Init+0x3dc>)
 80021f0:	f002 fad2 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021f4:	2320      	movs	r3, #32
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002204:	2307      	movs	r3, #7
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220c:	4619      	mov	r1, r3
 800220e:	481b      	ldr	r0, [pc, #108]	; (800227c <MX_GPIO_Init+0x3dc>)
 8002210:	f002 fac2 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002214:	2340      	movs	r3, #64	; 0x40
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002220:	2303      	movs	r3, #3
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8002224:	2305      	movs	r3, #5
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222c:	4619      	mov	r1, r3
 800222e:	4813      	ldr	r0, [pc, #76]	; (800227c <MX_GPIO_Init+0x3dc>)
 8002230:	f002 fab2 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002234:	2318      	movs	r3, #24
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002244:	2306      	movs	r3, #6
 8002246:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224c:	4619      	mov	r1, r3
 800224e:	480c      	ldr	r0, [pc, #48]	; (8002280 <MX_GPIO_Init+0x3e0>)
 8002250:	f002 faa2 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002254:	2301      	movs	r3, #1
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002264:	2302      	movs	r3, #2
 8002266:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226c:	4619      	mov	r1, r3
 800226e:	4805      	ldr	r0, [pc, #20]	; (8002284 <MX_GPIO_Init+0x3e4>)
 8002270:	f002 fa92 	bl	8004798 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002274:	bf00      	nop
 8002276:	3738      	adds	r7, #56	; 0x38
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	48000c00 	.word	0x48000c00
 8002280:	48000400 	.word	0x48000400
 8002284:	48001000 	.word	0x48001000

08002288 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002290:	1d39      	adds	r1, r7, #4
 8002292:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002296:	2201      	movs	r2, #1
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <__io_putchar+0x20>)
 800229a:	f006 fe65 	bl	8008f68 <HAL_UART_Transmit>
  return ch;
 800229e:	687b      	ldr	r3, [r7, #4]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	200003a8 	.word	0x200003a8

080022ac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	adcConversionComplete = 1;
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	200006b4 	.word	0x200006b4

080022cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d0:	b672      	cpsid	i
}
 80022d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <Error_Handler+0x8>
	...

080022d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <HAL_MspInit+0x44>)
 80022e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e2:	4a0e      	ldr	r2, [pc, #56]	; (800231c <HAL_MspInit+0x44>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6613      	str	r3, [r2, #96]	; 0x60
 80022ea:	4b0c      	ldr	r3, [pc, #48]	; (800231c <HAL_MspInit+0x44>)
 80022ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_MspInit+0x44>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	4a08      	ldr	r2, [pc, #32]	; (800231c <HAL_MspInit+0x44>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002300:	6593      	str	r3, [r2, #88]	; 0x58
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_MspInit+0x44>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800230e:	2005      	movs	r0, #5
 8002310:	f001 ff8e 	bl	8004230 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000

08002320 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b0b0      	sub	sp, #192	; 0xc0
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002338:	f107 0318 	add.w	r3, r7, #24
 800233c:	2294      	movs	r2, #148	; 0x94
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f008 fb27 	bl	800a994 <memset>
  if(hadc->Instance==ADC1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a58      	ldr	r2, [pc, #352]	; (80024ac <HAL_ADC_MspInit+0x18c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	f040 80a9 	bne.w	80024a4 <HAL_ADC_MspInit+0x184>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002352:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002356:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002358:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800235c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002360:	2301      	movs	r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002364:	2301      	movs	r3, #1
 8002366:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002368:	2310      	movs	r3, #16
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800236c:	2302      	movs	r3, #2
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002370:	2302      	movs	r3, #2
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002374:	2302      	movs	r3, #2
 8002376:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800237c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800237e:	f107 0318 	add.w	r3, r7, #24
 8002382:	4618      	mov	r0, r3
 8002384:	f004 f932 	bl	80065ec <HAL_RCCEx_PeriphCLKConfig>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 800238e:	f7ff ff9d 	bl	80022cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_ADC_MspInit+0x190>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002396:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_ADC_MspInit+0x190>)
 8002398:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800239c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800239e:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <HAL_ADC_MspInit+0x190>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023aa:	4b41      	ldr	r3, [pc, #260]	; (80024b0 <HAL_ADC_MspInit+0x190>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	4a40      	ldr	r2, [pc, #256]	; (80024b0 <HAL_ADC_MspInit+0x190>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b6:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <HAL_ADC_MspInit+0x190>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <HAL_ADC_MspInit+0x190>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	4a3a      	ldr	r2, [pc, #232]	; (80024b0 <HAL_ADC_MspInit+0x190>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ce:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <HAL_ADC_MspInit+0x190>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023da:	4b35      	ldr	r3, [pc, #212]	; (80024b0 <HAL_ADC_MspInit+0x190>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	4a34      	ldr	r2, [pc, #208]	; (80024b0 <HAL_ADC_MspInit+0x190>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e6:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <HAL_ADC_MspInit+0x190>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80023f2:	233f      	movs	r3, #63	; 0x3f
 80023f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80023f8:	230b      	movs	r3, #11
 80023fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002404:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002408:	4619      	mov	r1, r3
 800240a:	482a      	ldr	r0, [pc, #168]	; (80024b4 <HAL_ADC_MspInit+0x194>)
 800240c:	f002 f9c4 	bl	8004798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002410:	230a      	movs	r3, #10
 8002412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002416:	230b      	movs	r3, #11
 8002418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002426:	4619      	mov	r1, r3
 8002428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242c:	f002 f9b4 	bl	8004798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002430:	2302      	movs	r3, #2
 8002432:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002436:	230b      	movs	r3, #11
 8002438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002442:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002446:	4619      	mov	r1, r3
 8002448:	481b      	ldr	r0, [pc, #108]	; (80024b8 <HAL_ADC_MspInit+0x198>)
 800244a:	f002 f9a5 	bl	8004798 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800244e:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_ADC_MspInit+0x19c>)
 8002450:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <HAL_ADC_MspInit+0x1a0>)
 8002452:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_ADC_MspInit+0x19c>)
 8002456:	2205      	movs	r2, #5
 8002458:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800245a:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_ADC_MspInit+0x19c>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002460:	4b16      	ldr	r3, [pc, #88]	; (80024bc <HAL_ADC_MspInit+0x19c>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_ADC_MspInit+0x19c>)
 8002468:	2280      	movs	r2, #128	; 0x80
 800246a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800246c:	4b13      	ldr	r3, [pc, #76]	; (80024bc <HAL_ADC_MspInit+0x19c>)
 800246e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002472:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_ADC_MspInit+0x19c>)
 8002476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800247a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800247c:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_ADC_MspInit+0x19c>)
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_ADC_MspInit+0x19c>)
 8002484:	2200      	movs	r2, #0
 8002486:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002488:	480c      	ldr	r0, [pc, #48]	; (80024bc <HAL_ADC_MspInit+0x19c>)
 800248a:	f001 ff13 	bl	80042b4 <HAL_DMA_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_ADC_MspInit+0x178>
    {
      Error_Handler();
 8002494:	f7ff ff1a 	bl	80022cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_ADC_MspInit+0x19c>)
 800249c:	651a      	str	r2, [r3, #80]	; 0x50
 800249e:	4a07      	ldr	r2, [pc, #28]	; (80024bc <HAL_ADC_MspInit+0x19c>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024a4:	bf00      	nop
 80024a6:	37c0      	adds	r7, #192	; 0xc0
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	50040000 	.word	0x50040000
 80024b0:	40021000 	.word	0x40021000
 80024b4:	48000800 	.word	0x48000800
 80024b8:	48000400 	.word	0x48000400
 80024bc:	200002f4 	.word	0x200002f4
 80024c0:	40020008 	.word	0x40020008

080024c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b0ae      	sub	sp, #184	; 0xb8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	2294      	movs	r2, #148	; 0x94
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f008 fa55 	bl	800a994 <memset>
  if(hi2c->Instance==I2C1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a21      	ldr	r2, [pc, #132]	; (8002574 <HAL_I2C_MspInit+0xb0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d13b      	bne.n	800256c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024f4:	2340      	movs	r3, #64	; 0x40
 80024f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024f8:	2300      	movs	r3, #0
 80024fa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	4618      	mov	r0, r3
 8002502:	f004 f873 	bl	80065ec <HAL_RCCEx_PeriphCLKConfig>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800250c:	f7ff fede 	bl	80022cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_I2C_MspInit+0xb4>)
 8002512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002514:	4a18      	ldr	r2, [pc, #96]	; (8002578 <HAL_I2C_MspInit+0xb4>)
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800251c:	4b16      	ldr	r3, [pc, #88]	; (8002578 <HAL_I2C_MspInit+0xb4>)
 800251e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002528:	f44f 7340 	mov.w	r3, #768	; 0x300
 800252c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002530:	2312      	movs	r3, #18
 8002532:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002542:	2304      	movs	r3, #4
 8002544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002548:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800254c:	4619      	mov	r1, r3
 800254e:	480b      	ldr	r0, [pc, #44]	; (800257c <HAL_I2C_MspInit+0xb8>)
 8002550:	f002 f922 	bl	8004798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <HAL_I2C_MspInit+0xb4>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	4a07      	ldr	r2, [pc, #28]	; (8002578 <HAL_I2C_MspInit+0xb4>)
 800255a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800255e:	6593      	str	r3, [r2, #88]	; 0x58
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_I2C_MspInit+0xb4>)
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800256c:	bf00      	nop
 800256e:	37b8      	adds	r7, #184	; 0xb8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40005400 	.word	0x40005400
 8002578:	40021000 	.word	0x40021000
 800257c:	48000400 	.word	0x48000400

08002580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b0b0      	sub	sp, #192	; 0xc0
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002598:	f107 0318 	add.w	r3, r7, #24
 800259c:	2294      	movs	r2, #148	; 0x94
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f008 f9f7 	bl	800a994 <memset>
  if(huart->Instance==LPUART1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a43      	ldr	r2, [pc, #268]	; (80026b8 <HAL_UART_MspInit+0x138>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d13e      	bne.n	800262e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80025b0:	2320      	movs	r3, #32
 80025b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80025b4:	2300      	movs	r3, #0
 80025b6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025b8:	f107 0318 	add.w	r3, r7, #24
 80025bc:	4618      	mov	r0, r3
 80025be:	f004 f815 	bl	80065ec <HAL_RCCEx_PeriphCLKConfig>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025c8:	f7ff fe80 	bl	80022cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80025cc:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <HAL_UART_MspInit+0x13c>)
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	4a3a      	ldr	r2, [pc, #232]	; (80026bc <HAL_UART_MspInit+0x13c>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80025d8:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_UART_MspInit+0x13c>)
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025e4:	4b35      	ldr	r3, [pc, #212]	; (80026bc <HAL_UART_MspInit+0x13c>)
 80025e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e8:	4a34      	ldr	r2, [pc, #208]	; (80026bc <HAL_UART_MspInit+0x13c>)
 80025ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025f0:	4b32      	ldr	r3, [pc, #200]	; (80026bc <HAL_UART_MspInit+0x13c>)
 80025f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80025fc:	f003 f90e 	bl	800581c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002600:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002604:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002614:	2303      	movs	r3, #3
 8002616:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800261a:	2308      	movs	r3, #8
 800261c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002620:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002624:	4619      	mov	r1, r3
 8002626:	4826      	ldr	r0, [pc, #152]	; (80026c0 <HAL_UART_MspInit+0x140>)
 8002628:	f002 f8b6 	bl	8004798 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800262c:	e040      	b.n	80026b0 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==UART4)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a24      	ldr	r2, [pc, #144]	; (80026c4 <HAL_UART_MspInit+0x144>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d13b      	bne.n	80026b0 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002638:	2308      	movs	r3, #8
 800263a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800263c:	2300      	movs	r3, #0
 800263e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002640:	f107 0318 	add.w	r3, r7, #24
 8002644:	4618      	mov	r0, r3
 8002646:	f003 ffd1 	bl	80065ec <HAL_RCCEx_PeriphCLKConfig>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002650:	f7ff fe3c 	bl	80022cc <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_UART_MspInit+0x13c>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	4a18      	ldr	r2, [pc, #96]	; (80026bc <HAL_UART_MspInit+0x13c>)
 800265a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800265e:	6593      	str	r3, [r2, #88]	; 0x58
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <HAL_UART_MspInit+0x13c>)
 8002662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <HAL_UART_MspInit+0x13c>)
 800266e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002670:	4a12      	ldr	r2, [pc, #72]	; (80026bc <HAL_UART_MspInit+0x13c>)
 8002672:	f043 0304 	orr.w	r3, r3, #4
 8002676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_UART_MspInit+0x13c>)
 800267a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002684:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002688:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800269e:	2308      	movs	r3, #8
 80026a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026a8:	4619      	mov	r1, r3
 80026aa:	4807      	ldr	r0, [pc, #28]	; (80026c8 <HAL_UART_MspInit+0x148>)
 80026ac:	f002 f874 	bl	8004798 <HAL_GPIO_Init>
}
 80026b0:	bf00      	nop
 80026b2:	37c0      	adds	r7, #192	; 0xc0
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40008000 	.word	0x40008000
 80026bc:	40021000 	.word	0x40021000
 80026c0:	48001800 	.word	0x48001800
 80026c4:	40004c00 	.word	0x40004c00
 80026c8:	48000800 	.word	0x48000800

080026cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08c      	sub	sp, #48	; 0x30
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 031c 	add.w	r3, r7, #28
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a36      	ldr	r2, [pc, #216]	; (80027c4 <HAL_SPI_MspInit+0xf8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d129      	bne.n	8002742 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026ee:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <HAL_SPI_MspInit+0xfc>)
 80026f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f2:	4a35      	ldr	r2, [pc, #212]	; (80027c8 <HAL_SPI_MspInit+0xfc>)
 80026f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026f8:	6613      	str	r3, [r2, #96]	; 0x60
 80026fa:	4b33      	ldr	r3, [pc, #204]	; (80027c8 <HAL_SPI_MspInit+0xfc>)
 80026fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <HAL_SPI_MspInit+0xfc>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	4a2f      	ldr	r2, [pc, #188]	; (80027c8 <HAL_SPI_MspInit+0xfc>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002712:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <HAL_SPI_MspInit+0xfc>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800271e:	2370      	movs	r3, #112	; 0x70
 8002720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272a:	2303      	movs	r3, #3
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800272e:	2305      	movs	r3, #5
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002732:	f107 031c 	add.w	r3, r7, #28
 8002736:	4619      	mov	r1, r3
 8002738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273c:	f002 f82c 	bl	8004798 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002740:	e03c      	b.n	80027bc <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a21      	ldr	r2, [pc, #132]	; (80027cc <HAL_SPI_MspInit+0x100>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d137      	bne.n	80027bc <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800274c:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <HAL_SPI_MspInit+0xfc>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002750:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <HAL_SPI_MspInit+0xfc>)
 8002752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002756:	6593      	str	r3, [r2, #88]	; 0x58
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_SPI_MspInit+0xfc>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_SPI_MspInit+0xfc>)
 8002766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002768:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_SPI_MspInit+0xfc>)
 800276a:	f043 0308 	orr.w	r3, r3, #8
 800276e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002770:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_SPI_MspInit+0xfc>)
 8002772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800277c:	2308      	movs	r3, #8
 800277e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800278c:	2303      	movs	r3, #3
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002790:	f107 031c 	add.w	r3, r7, #28
 8002794:	4619      	mov	r1, r3
 8002796:	480e      	ldr	r0, [pc, #56]	; (80027d0 <HAL_SPI_MspInit+0x104>)
 8002798:	f001 fffe 	bl	8004798 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800279c:	2310      	movs	r3, #16
 800279e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a8:	2303      	movs	r3, #3
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027ac:	2305      	movs	r3, #5
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	4619      	mov	r1, r3
 80027b6:	4806      	ldr	r0, [pc, #24]	; (80027d0 <HAL_SPI_MspInit+0x104>)
 80027b8:	f001 ffee 	bl	8004798 <HAL_GPIO_Init>
}
 80027bc:	bf00      	nop
 80027be:	3730      	adds	r7, #48	; 0x30
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40013000 	.word	0x40013000
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40003800 	.word	0x40003800
 80027d0:	48000c00 	.word	0x48000c00

080027d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08e      	sub	sp, #56	; 0x38
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a5f      	ldr	r2, [pc, #380]	; (8002970 <HAL_TIM_Base_MspInit+0x19c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d14c      	bne.n	8002890 <HAL_TIM_Base_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027f6:	4b5f      	ldr	r3, [pc, #380]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fa:	4a5e      	ldr	r2, [pc, #376]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 80027fc:	f043 0302 	orr.w	r3, r3, #2
 8002800:	6593      	str	r3, [r2, #88]	; 0x58
 8002802:	4b5c      	ldr	r3, [pc, #368]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	623b      	str	r3, [r7, #32]
 800280c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280e:	4b59      	ldr	r3, [pc, #356]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	4a58      	ldr	r2, [pc, #352]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800281a:	4b56      	ldr	r3, [pc, #344]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002826:	4b53      	ldr	r3, [pc, #332]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 8002828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282a:	4a52      	ldr	r2, [pc, #328]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002832:	4b50      	ldr	r3, [pc, #320]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 8002834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800283e:	2301      	movs	r3, #1
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	2300      	movs	r3, #0
 800284c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800284e:	2302      	movs	r3, #2
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002856:	4619      	mov	r1, r3
 8002858:	4847      	ldr	r0, [pc, #284]	; (8002978 <HAL_TIM_Base_MspInit+0x1a4>)
 800285a:	f001 ff9d 	bl	8004798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002862:	2302      	movs	r3, #2
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286a:	2300      	movs	r3, #0
 800286c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800286e:	2302      	movs	r3, #2
 8002870:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002876:	4619      	mov	r1, r3
 8002878:	4840      	ldr	r0, [pc, #256]	; (800297c <HAL_TIM_Base_MspInit+0x1a8>)
 800287a:	f001 ff8d 	bl	8004798 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 1);
 800287e:	2201      	movs	r2, #1
 8002880:	2101      	movs	r1, #1
 8002882:	201d      	movs	r0, #29
 8002884:	f001 fcdf 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002888:	201d      	movs	r0, #29
 800288a:	f001 fcf8 	bl	800427e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800288e:	e06b      	b.n	8002968 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM15)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a3a      	ldr	r2, [pc, #232]	; (8002980 <HAL_TIM_Base_MspInit+0x1ac>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d131      	bne.n	80028fe <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 800289c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289e:	4a35      	ldr	r2, [pc, #212]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	6613      	str	r3, [r2, #96]	; 0x60
 80028a6:	4b33      	ldr	r3, [pc, #204]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 80028a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b2:	4b30      	ldr	r3, [pc, #192]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	4a2f      	ldr	r2, [pc, #188]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028be:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 80028c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80028ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80028dc:	230e      	movs	r3, #14
 80028de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e4:	4619      	mov	r1, r3
 80028e6:	4824      	ldr	r0, [pc, #144]	; (8002978 <HAL_TIM_Base_MspInit+0x1a4>)
 80028e8:	f001 ff56 	bl	8004798 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 80028ec:	2200      	movs	r2, #0
 80028ee:	2101      	movs	r1, #1
 80028f0:	2018      	movs	r0, #24
 80028f2:	f001 fca8 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80028f6:	2018      	movs	r0, #24
 80028f8:	f001 fcc1 	bl	800427e <HAL_NVIC_EnableIRQ>
}
 80028fc:	e034      	b.n	8002968 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM17)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a20      	ldr	r2, [pc, #128]	; (8002984 <HAL_TIM_Base_MspInit+0x1b0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d12f      	bne.n	8002968 <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002908:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 800290a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290c:	4a19      	ldr	r2, [pc, #100]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 800290e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002912:	6613      	str	r3, [r2, #96]	; 0x60
 8002914:	4b17      	ldr	r3, [pc, #92]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 8002916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 8002922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002924:	4a13      	ldr	r2, [pc, #76]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 8002926:	f043 0310 	orr.w	r3, r3, #16
 800292a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_TIM_Base_MspInit+0x1a0>)
 800292e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002938:	2302      	movs	r3, #2
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8002948:	230e      	movs	r3, #14
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	4619      	mov	r1, r3
 8002952:	480d      	ldr	r0, [pc, #52]	; (8002988 <HAL_TIM_Base_MspInit+0x1b4>)
 8002954:	f001 ff20 	bl	8004798 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	2100      	movs	r1, #0
 800295c:	201a      	movs	r0, #26
 800295e:	f001 fc72 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002962:	201a      	movs	r0, #26
 8002964:	f001 fc8b 	bl	800427e <HAL_NVIC_EnableIRQ>
}
 8002968:	bf00      	nop
 800296a:	3738      	adds	r7, #56	; 0x38
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40000400 	.word	0x40000400
 8002974:	40021000 	.word	0x40021000
 8002978:	48000400 	.word	0x48000400
 800297c:	48000800 	.word	0x48000800
 8002980:	40014000 	.word	0x40014000
 8002984:	40014800 	.word	0x40014800
 8002988:	48001000 	.word	0x48001000

0800298c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <NMI_Handler+0x4>

08002992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002996:	e7fe      	b.n	8002996 <HardFault_Handler+0x4>

08002998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800299c:	e7fe      	b.n	800299c <MemManage_Handler+0x4>

0800299e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a2:	e7fe      	b.n	80029a2 <BusFault_Handler+0x4>

080029a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a8:	e7fe      	b.n	80029a8 <UsageFault_Handler+0x4>

080029aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029d8:	f000 fa48 	bl	8002e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}

080029e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <DMA1_Channel1_IRQHandler+0x10>)
 80029e6:	f001 fd88 	bl	80044fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200002f4 	.word	0x200002f4

080029f4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80029f8:	480b      	ldr	r0, [pc, #44]	; (8002a28 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80029fa:	f005 fcb1 	bl	8008360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  acc = ReadAccData();
 80029fe:	f7fe fae3 	bl	8000fc8 <ReadAccData>
 8002a02:	eef0 7a40 	vmov.f32	s15, s0
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002a08:	edc3 7a00 	vstr	s15, [r3]
  teldata.accel = acc;
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 8002a12:	6013      	str	r3, [r2, #0]
  printLEDs(acc);
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002a16:	edd3 7a00 	vldr	s15, [r3]
 8002a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a1e:	f7fe fbf5 	bl	800120c <printLEDs>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200005e4 	.word	0x200005e4
 8002a2c:	200006bc 	.word	0x200006bc
 8002a30:	2000067c 	.word	0x2000067c

08002a34 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002a38:	480c      	ldr	r0, [pc, #48]	; (8002a6c <TIM1_TRG_COM_TIM17_IRQHandler+0x38>)
 8002a3a:	f005 fc91 	bl	8008360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
	curTime = TIM17->CCR1; //get current time value
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <TIM1_TRG_COM_TIM17_IRQHandler+0x3c>)
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8002a46:	801a      	strh	r2, [r3, #0]
	TIM17->CNT = 0;
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <TIM1_TRG_COM_TIM17_IRQHandler+0x3c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

	teldata.speed = (float)(veloMultiplier / curTime);
 8002a4e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002a78 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	ee07 3a90 	vmov	s15, r3
 8002a5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 8002a64:	edc3 7a02 	vstr	s15, [r3, #8]
	//printf("Speed: %f\n",(veloMultiplier / curTime));
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000630 	.word	0x20000630
 8002a70:	40014800 	.word	0x40014800
 8002a74:	200006b8 	.word	0x200006b8
 8002a78:	455267a3 	.word	0x455267a3
 8002a7c:	2000067c 	.word	0x2000067c

08002a80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <TIM3_IRQHandler+0x10>)
 8002a86:	f005 fc6b 	bl	8008360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000598 	.word	0x20000598

08002a94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a45      	ldr	r2, [pc, #276]	; (8002bb4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	f040 8083 	bne.w	8002bac <HAL_TIM_PeriodElapsedCallback+0x118>
		uint16_t temp1sum = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t temp2sum = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t temp3sum = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	847b      	strh	r3, [r7, #34]	; 0x22

		// run a loop for 5 reads from the
		for (int i = 0; i < 5; i++) {
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	e01a      	b.n	8002aee <HAL_TIM_PeriodElapsedCallback+0x5a>
			temp1sum += read_Temperature(GPIO_PIN_5); // read for the first temp sensor
 8002ab8:	2020      	movs	r0, #32
 8002aba:	f7fe fcd1 	bl	8001460 <read_Temperature>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ac4:	4413      	add	r3, r2
 8002ac6:	84fb      	strh	r3, [r7, #38]	; 0x26
			temp2sum += read_Temperature(GPIO_PIN_2); // read for the second temp sensor
 8002ac8:	2004      	movs	r0, #4
 8002aca:	f7fe fcc9 	bl	8001460 <read_Temperature>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ad4:	4413      	add	r3, r2
 8002ad6:	84bb      	strh	r3, [r7, #36]	; 0x24
			temp3sum += read_Temperature(GPIO_PIN_6); // read for the third temp sensor
 8002ad8:	2040      	movs	r0, #64	; 0x40
 8002ada:	f7fe fcc1 	bl	8001460 <read_Temperature>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ae4:	4413      	add	r3, r2
 8002ae6:	847b      	strh	r3, [r7, #34]	; 0x22
		for (int i = 0; i < 5; i++) {
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	3301      	adds	r3, #1
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	dde1      	ble.n	8002ab8 <HAL_TIM_PeriodElapsedCallback+0x24>
		}
		float temp1 = temp1sum / 5.0; // take the average of the temp sensor values
 8002af4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fd2c 	bl	8000554 <__aeabi_i2d>
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	4b2d      	ldr	r3, [pc, #180]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002b02:	f7fd febb 	bl	800087c <__aeabi_ddiv>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f7fe f863 	bl	8000bd8 <__aeabi_d2f>
 8002b12:	4603      	mov	r3, r0
 8002b14:	61bb      	str	r3, [r7, #24]
		float temp2 = temp2sum / 5.0;
 8002b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fd fd1b 	bl	8000554 <__aeabi_i2d>
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002b24:	f7fd feaa 	bl	800087c <__aeabi_ddiv>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f7fe f852 	bl	8000bd8 <__aeabi_d2f>
 8002b34:	4603      	mov	r3, r0
 8002b36:	617b      	str	r3, [r7, #20]
		float temp3 = temp3sum / 5.0;
 8002b38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fd0a 	bl	8000554 <__aeabi_i2d>
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002b46:	f7fd fe99 	bl	800087c <__aeabi_ddiv>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	f7fe f841 	bl	8000bd8 <__aeabi_d2f>
 8002b56:	4603      	mov	r3, r0
 8002b58:	613b      	str	r3, [r7, #16]

		float average = (temp1 + temp2 + temp3) / 3.0;
 8002b5a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b66:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b6e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b76:	edc7 7a03 	vstr	s15, [r7, #12]
		teldata.temp = average;
 8002b7a:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6053      	str	r3, [r2, #4]

		// send this average to display

		//printf("Average External Temperature: %.2f \n\r", average);

		if (average > 24) {
 8002b80:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b84:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b90:	dd06      	ble.n	8002ba0 <HAL_TIM_PeriodElapsedCallback+0x10c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8002b92:	2201      	movs	r2, #1
 8002b94:	2180      	movs	r1, #128	; 0x80
 8002b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b9a:	f001 ff8f 	bl	8004abc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
		}
	}
}
 8002b9e:	e005      	b.n	8002bac <HAL_TIM_PeriodElapsedCallback+0x118>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2180      	movs	r1, #128	; 0x80
 8002ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba8:	f001 ff88 	bl	8004abc <HAL_GPIO_WritePin>
}
 8002bac:	bf00      	nop
 8002bae:	3728      	adds	r7, #40	; 0x28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000598 	.word	0x20000598
 8002bb8:	40140000 	.word	0x40140000
 8002bbc:	2000067c 	.word	0x2000067c

08002bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return 1;
 8002bc4:	2301      	movs	r3, #1
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <_kill>:

int _kill(int pid, int sig)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bda:	f007 ff2d 	bl	800aa38 <__errno>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2216      	movs	r2, #22
 8002be2:	601a      	str	r2, [r3, #0]
  return -1;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_exit>:

void _exit (int status)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ffe7 	bl	8002bd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c02:	e7fe      	b.n	8002c02 <_exit+0x12>

08002c04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	e00a      	b.n	8002c2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c16:	f3af 8000 	nop.w
 8002c1a:	4601      	mov	r1, r0
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	60ba      	str	r2, [r7, #8]
 8002c22:	b2ca      	uxtb	r2, r1
 8002c24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	dbf0      	blt.n	8002c16 <_read+0x12>
  }

  return len;
 8002c34:	687b      	ldr	r3, [r7, #4]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	e009      	b.n	8002c64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	60ba      	str	r2, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fb15 	bl	8002288 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3301      	adds	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	dbf1      	blt.n	8002c50 <_write+0x12>
  }
  return len;
 8002c6c:	687b      	ldr	r3, [r7, #4]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <_close>:

int _close(int file)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c9e:	605a      	str	r2, [r3, #4]
  return 0;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <_isatty>:

int _isatty(int file)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cb6:	2301      	movs	r3, #1
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce8:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <_sbrk+0x5c>)
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <_sbrk+0x60>)
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <_sbrk+0x64>)
 8002cfe:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <_sbrk+0x68>)
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <_sbrk+0x64>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d207      	bcs.n	8002d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d10:	f007 fe92 	bl	800aa38 <__errno>
 8002d14:	4603      	mov	r3, r0
 8002d16:	220c      	movs	r2, #12
 8002d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1e:	e009      	b.n	8002d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4a05      	ldr	r2, [pc, #20]	; (8002d44 <_sbrk+0x64>)
 8002d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	200a0000 	.word	0x200a0000
 8002d40:	00000400 	.word	0x00000400
 8002d44:	200006c0 	.word	0x200006c0
 8002d48:	20000818 	.word	0x20000818

08002d4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <SystemInit+0x20>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <SystemInit+0x20>)
 8002d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002da8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d74:	f7ff ffea 	bl	8002d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d78:	480c      	ldr	r0, [pc, #48]	; (8002dac <LoopForever+0x6>)
  ldr r1, =_edata
 8002d7a:	490d      	ldr	r1, [pc, #52]	; (8002db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	; (8002db4 <LoopForever+0xe>)
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d80:	e002      	b.n	8002d88 <LoopCopyDataInit>

08002d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d86:	3304      	adds	r3, #4

08002d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d8c:	d3f9      	bcc.n	8002d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d90:	4c0a      	ldr	r4, [pc, #40]	; (8002dbc <LoopForever+0x16>)
  movs r3, #0
 8002d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d94:	e001      	b.n	8002d9a <LoopFillZerobss>

08002d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d98:	3204      	adds	r2, #4

08002d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d9c:	d3fb      	bcc.n	8002d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d9e:	f007 fe51 	bl	800aa44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002da2:	f7fe fc3f 	bl	8001624 <main>

08002da6 <LoopForever>:

LoopForever:
    b LoopForever
 8002da6:	e7fe      	b.n	8002da6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002da8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002db4:	0800cc0c 	.word	0x0800cc0c
  ldr r2, =_sbss
 8002db8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002dbc:	20000814 	.word	0x20000814

08002dc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dc0:	e7fe      	b.n	8002dc0 <ADC1_IRQHandler>

08002dc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dcc:	2003      	movs	r0, #3
 8002dce:	f001 fa2f 	bl	8004230 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f000 f80e 	bl	8002df4 <HAL_InitTick>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	71fb      	strb	r3, [r7, #7]
 8002de2:	e001      	b.n	8002de8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002de4:	f7ff fa78 	bl	80022d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002de8:	79fb      	ldrb	r3, [r7, #7]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e00:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <HAL_InitTick+0x6c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d023      	beq.n	8002e50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <HAL_InitTick+0x70>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <HAL_InitTick+0x6c>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	4619      	mov	r1, r3
 8002e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f001 fa3b 	bl	800429a <HAL_SYSTICK_Config>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b0f      	cmp	r3, #15
 8002e2e:	d809      	bhi.n	8002e44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e30:	2200      	movs	r2, #0
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	f001 fa05 	bl	8004246 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e3c:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <HAL_InitTick+0x74>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e007      	b.n	8002e54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e004      	b.n	8002e54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	73fb      	strb	r3, [r7, #15]
 8002e4e:	e001      	b.n	8002e54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000014 	.word	0x20000014
 8002e64:	2000000c 	.word	0x2000000c
 8002e68:	20000010 	.word	0x20000010

08002e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_IncTick+0x20>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_IncTick+0x24>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <HAL_IncTick+0x24>)
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000014 	.word	0x20000014
 8002e90:	200006c4 	.word	0x200006c4

08002e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return uwTick;
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_GetTick+0x14>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	200006c4 	.word	0x200006c4

08002eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb4:	f7ff ffee 	bl	8002e94 <HAL_GetTick>
 8002eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d005      	beq.n	8002ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_Delay+0x44>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ed2:	bf00      	nop
 8002ed4:	f7ff ffde 	bl	8002e94 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d8f7      	bhi.n	8002ed4 <HAL_Delay+0x28>
  {
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000014 	.word	0x20000014

08002ef4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	609a      	str	r2, [r3, #8]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3360      	adds	r3, #96	; 0x60
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <LL_ADC_SetOffset+0x44>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f94:	bf00      	nop
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	03fff000 	.word	0x03fff000

08002fa4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3360      	adds	r3, #96	; 0x60
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3360      	adds	r3, #96	; 0x60
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	615a      	str	r2, [r3, #20]
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003052:	b480      	push	{r7}
 8003054:	b087      	sub	sp, #28
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3330      	adds	r3, #48	; 0x30
 8003062:	461a      	mov	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	0a1b      	lsrs	r3, r3, #8
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	4413      	add	r3, r2
 8003070:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	211f      	movs	r1, #31
 800307e:	fa01 f303 	lsl.w	r3, r1, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	401a      	ands	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	0e9b      	lsrs	r3, r3, #26
 800308a:	f003 011f 	and.w	r1, r3, #31
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	431a      	orrs	r2, r3
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800309e:	bf00      	nop
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b087      	sub	sp, #28
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	3314      	adds	r3, #20
 80030ba:	461a      	mov	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	0e5b      	lsrs	r3, r3, #25
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	4413      	add	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	0d1b      	lsrs	r3, r3, #20
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	2107      	movs	r1, #7
 80030d8:	fa01 f303 	lsl.w	r3, r1, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	401a      	ands	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	0d1b      	lsrs	r3, r3, #20
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	431a      	orrs	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003118:	43db      	mvns	r3, r3
 800311a:	401a      	ands	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0318 	and.w	r3, r3, #24
 8003122:	4908      	ldr	r1, [pc, #32]	; (8003144 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003124:	40d9      	lsrs	r1, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	400b      	ands	r3, r1
 800312a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312e:	431a      	orrs	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003136:	bf00      	nop
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	0007ffff 	.word	0x0007ffff

08003148 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003158:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6093      	str	r3, [r2, #8]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800317c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003180:	d101      	bne.n	8003186 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031d0:	d101      	bne.n	80031d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031f8:	f043 0201 	orr.w	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <LL_ADC_IsEnabled+0x18>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <LL_ADC_IsEnabled+0x1a>
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003242:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003246:	f043 0204 	orr.w	r2, r3, #4
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b04      	cmp	r3, #4
 800326c:	d101      	bne.n	8003272 <LL_ADC_REG_IsConversionOngoing+0x18>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b08      	cmp	r3, #8
 8003292:	d101      	bne.n	8003298 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e129      	b.n	8003516 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d109      	bne.n	80032e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff f825 	bl	8002320 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff3f 	bl	800316c <LL_ADC_IsDeepPowerDownEnabled>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d004      	beq.n	80032fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff25 	bl	8003148 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff ff5a 	bl	80031bc <LL_ADC_IsInternalRegulatorEnabled>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d115      	bne.n	800333a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff ff3e 	bl	8003194 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003318:	4b81      	ldr	r3, [pc, #516]	; (8003520 <HAL_ADC_Init+0x278>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	099b      	lsrs	r3, r3, #6
 800331e:	4a81      	ldr	r2, [pc, #516]	; (8003524 <HAL_ADC_Init+0x27c>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	099b      	lsrs	r3, r3, #6
 8003326:	3301      	adds	r3, #1
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800332c:	e002      	b.n	8003334 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3b01      	subs	r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f9      	bne.n	800332e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff3c 	bl	80031bc <LL_ADC_IsInternalRegulatorEnabled>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10d      	bne.n	8003366 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	f043 0210 	orr.w	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	f043 0201 	orr.w	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff ff75 	bl	800325a <LL_ADC_REG_IsConversionOngoing>
 8003370:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b00      	cmp	r3, #0
 800337c:	f040 80c2 	bne.w	8003504 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f040 80be 	bne.w	8003504 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003390:	f043 0202 	orr.w	r2, r3, #2
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff35 	bl	800320c <LL_ADC_IsEnabled>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033a8:	485f      	ldr	r0, [pc, #380]	; (8003528 <HAL_ADC_Init+0x280>)
 80033aa:	f7ff ff2f 	bl	800320c <LL_ADC_IsEnabled>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d105      	bne.n	80033c0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	4619      	mov	r1, r3
 80033ba:	485c      	ldr	r0, [pc, #368]	; (800352c <HAL_ADC_Init+0x284>)
 80033bc:	f7ff fd9a 	bl	8002ef4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	7e5b      	ldrb	r3, [r3, #25]
 80033c4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033ca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80033d0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80033d6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033de:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d106      	bne.n	80033fc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	3b01      	subs	r3, #1
 80033f4:	045b      	lsls	r3, r3, #17
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	2b00      	cmp	r3, #0
 8003402:	d009      	beq.n	8003418 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	4b44      	ldr	r3, [pc, #272]	; (8003530 <HAL_ADC_Init+0x288>)
 8003420:	4013      	ands	r3, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	69b9      	ldr	r1, [r7, #24]
 8003428:	430b      	orrs	r3, r1
 800342a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff25 	bl	8003280 <LL_ADC_INJ_IsConversionOngoing>
 8003436:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d140      	bne.n	80034c0 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d13d      	bne.n	80034c0 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	7e1b      	ldrb	r3, [r3, #24]
 800344c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800344e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003456:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003466:	f023 0306 	bic.w	r3, r3, #6
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	69b9      	ldr	r1, [r7, #24]
 8003470:	430b      	orrs	r3, r1
 8003472:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800347a:	2b01      	cmp	r3, #1
 800347c:	d118      	bne.n	80034b0 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003488:	f023 0304 	bic.w	r3, r3, #4
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003494:	4311      	orrs	r1, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800349a:	4311      	orrs	r1, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034a0:	430a      	orrs	r2, r1
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0201 	orr.w	r2, r2, #1
 80034ac:	611a      	str	r2, [r3, #16]
 80034ae:	e007      	b.n	80034c0 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d10c      	bne.n	80034e2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	f023 010f 	bic.w	r1, r3, #15
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	1e5a      	subs	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
 80034e0:	e007      	b.n	80034f2 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 020f 	bic.w	r2, r2, #15
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f6:	f023 0303 	bic.w	r3, r3, #3
 80034fa:	f043 0201 	orr.w	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	659a      	str	r2, [r3, #88]	; 0x58
 8003502:	e007      	b.n	8003514 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003508:	f043 0210 	orr.w	r2, r3, #16
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003514:	7ffb      	ldrb	r3, [r7, #31]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3720      	adds	r7, #32
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	2000000c 	.word	0x2000000c
 8003524:	053e2d63 	.word	0x053e2d63
 8003528:	50040000 	.word	0x50040000
 800352c:	50040300 	.word	0x50040300
 8003530:	fff0c007 	.word	0xfff0c007

08003534 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fe88 	bl	800325a <LL_ADC_REG_IsConversionOngoing>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d167      	bne.n	8003620 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_ADC_Start_DMA+0x2a>
 800355a:	2302      	movs	r3, #2
 800355c:	e063      	b.n	8003626 <HAL_ADC_Start_DMA+0xf2>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 fc78 	bl	8003e5c <ADC_Enable>
 800356c:	4603      	mov	r3, r0
 800356e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003570:	7dfb      	ldrb	r3, [r7, #23]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d14f      	bne.n	8003616 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800357e:	f023 0301 	bic.w	r3, r3, #1
 8003582:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359a:	f023 0206 	bic.w	r2, r3, #6
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80035a2:	e002      	b.n	80035aa <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ae:	4a20      	ldr	r2, [pc, #128]	; (8003630 <HAL_ADC_Start_DMA+0xfc>)
 80035b0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b6:	4a1f      	ldr	r2, [pc, #124]	; (8003634 <HAL_ADC_Start_DMA+0x100>)
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035be:	4a1e      	ldr	r2, [pc, #120]	; (8003638 <HAL_ADC_Start_DMA+0x104>)
 80035c0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	221c      	movs	r2, #28
 80035c8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0210 	orr.w	r2, r2, #16
 80035e0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0201 	orr.w	r2, r2, #1
 80035f0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3340      	adds	r3, #64	; 0x40
 80035fc:	4619      	mov	r1, r3
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f000 feff 	bl	8004404 <HAL_DMA_Start_IT>
 8003606:	4603      	mov	r3, r0
 8003608:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fe0f 	bl	8003232 <LL_ADC_REG_StartConversion>
 8003614:	e006      	b.n	8003624 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800361e:	e001      	b.n	8003624 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003620:	2302      	movs	r3, #2
 8003622:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003624:	7dfb      	ldrb	r3, [r7, #23]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	08003f69 	.word	0x08003f69
 8003634:	08004041 	.word	0x08004041
 8003638:	0800405d 	.word	0x0800405d

0800363c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b0b6      	sub	sp, #216	; 0xd8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003674:	2300      	movs	r3, #0
 8003676:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x22>
 8003682:	2302      	movs	r3, #2
 8003684:	e3d5      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x7ce>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fde1 	bl	800325a <LL_ADC_REG_IsConversionOngoing>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	f040 83ba 	bne.w	8003e14 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b05      	cmp	r3, #5
 80036ae:	d824      	bhi.n	80036fa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	3b02      	subs	r3, #2
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d81b      	bhi.n	80036f2 <HAL_ADC_ConfigChannel+0x8e>
 80036ba:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <HAL_ADC_ConfigChannel+0x5c>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	080036d1 	.word	0x080036d1
 80036c4:	080036d9 	.word	0x080036d9
 80036c8:	080036e1 	.word	0x080036e1
 80036cc:	080036e9 	.word	0x080036e9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80036d0:	230c      	movs	r3, #12
 80036d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80036d6:	e010      	b.n	80036fa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80036d8:	2312      	movs	r3, #18
 80036da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80036de:	e00c      	b.n	80036fa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80036e0:	2318      	movs	r3, #24
 80036e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80036e6:	e008      	b.n	80036fa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80036e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80036f0:	e003      	b.n	80036fa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80036f2:	2306      	movs	r3, #6
 80036f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80036f8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003708:	f7ff fca3 	bl	8003052 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fda2 	bl	800325a <LL_ADC_REG_IsConversionOngoing>
 8003716:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fdae 	bl	8003280 <LL_ADC_INJ_IsConversionOngoing>
 8003724:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800372c:	2b00      	cmp	r3, #0
 800372e:	f040 81bf 	bne.w	8003ab0 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003732:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003736:	2b00      	cmp	r3, #0
 8003738:	f040 81ba 	bne.w	8003ab0 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003744:	d10f      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	4619      	mov	r1, r3
 8003752:	f7ff fcaa 	bl	80030aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff fc51 	bl	8003006 <LL_ADC_SetSamplingTimeCommonConfig>
 8003764:	e00e      	b.n	8003784 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6819      	ldr	r1, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	461a      	mov	r2, r3
 8003774:	f7ff fc99 	bl	80030aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fc41 	bl	8003006 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	08db      	lsrs	r3, r3, #3
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d00a      	beq.n	80037bc <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6919      	ldr	r1, [r3, #16]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037b6:	f7ff fbd1 	bl	8002f5c <LL_ADC_SetOffset>
 80037ba:	e179      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fbee 	bl	8002fa4 <LL_ADC_GetOffsetChannel>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x184>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fbe3 	bl	8002fa4 <LL_ADC_GetOffsetChannel>
 80037de:	4603      	mov	r3, r0
 80037e0:	0e9b      	lsrs	r3, r3, #26
 80037e2:	f003 021f 	and.w	r2, r3, #31
 80037e6:	e01e      	b.n	8003826 <HAL_ADC_ConfigChannel+0x1c2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fbd8 	bl	8002fa4 <LL_ADC_GetOffsetChannel>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037fe:	fa93 f3a3 	rbit	r3, r3
 8003802:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003806:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800380a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800380e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003816:	2320      	movs	r3, #32
 8003818:	e004      	b.n	8003824 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800381a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382e:	2b00      	cmp	r3, #0
 8003830:	d105      	bne.n	800383e <HAL_ADC_ConfigChannel+0x1da>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	0e9b      	lsrs	r3, r3, #26
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	e018      	b.n	8003870 <HAL_ADC_ConfigChannel+0x20c>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003852:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800385a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003862:	2320      	movs	r3, #32
 8003864:	e004      	b.n	8003870 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003866:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800386a:	fab3 f383 	clz	r3, r3
 800386e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003870:	429a      	cmp	r2, r3
 8003872:	d106      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2200      	movs	r2, #0
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fba7 	bl	8002fd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2101      	movs	r1, #1
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff fb8b 	bl	8002fa4 <LL_ADC_GetOffsetChannel>
 800388e:	4603      	mov	r3, r0
 8003890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x24a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2101      	movs	r1, #1
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fb80 	bl	8002fa4 <LL_ADC_GetOffsetChannel>
 80038a4:	4603      	mov	r3, r0
 80038a6:	0e9b      	lsrs	r3, r3, #26
 80038a8:	f003 021f 	and.w	r2, r3, #31
 80038ac:	e01e      	b.n	80038ec <HAL_ADC_ConfigChannel+0x288>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2101      	movs	r1, #1
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fb75 	bl	8002fa4 <LL_ADC_GetOffsetChannel>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038c4:	fa93 f3a3 	rbit	r3, r3
 80038c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80038cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80038d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80038dc:	2320      	movs	r3, #32
 80038de:	e004      	b.n	80038ea <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80038e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038e4:	fab3 f383 	clz	r3, r3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d105      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x2a0>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	0e9b      	lsrs	r3, r3, #26
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	e018      	b.n	8003936 <HAL_ADC_ConfigChannel+0x2d2>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003910:	fa93 f3a3 	rbit	r3, r3
 8003914:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003918:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800391c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003920:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003928:	2320      	movs	r3, #32
 800392a:	e004      	b.n	8003936 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800392c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003930:	fab3 f383 	clz	r3, r3
 8003934:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003936:	429a      	cmp	r2, r3
 8003938:	d106      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2200      	movs	r2, #0
 8003940:	2101      	movs	r1, #1
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fb44 	bl	8002fd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2102      	movs	r1, #2
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff fb28 	bl	8002fa4 <LL_ADC_GetOffsetChannel>
 8003954:	4603      	mov	r3, r0
 8003956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x310>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2102      	movs	r1, #2
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fb1d 	bl	8002fa4 <LL_ADC_GetOffsetChannel>
 800396a:	4603      	mov	r3, r0
 800396c:	0e9b      	lsrs	r3, r3, #26
 800396e:	f003 021f 	and.w	r2, r3, #31
 8003972:	e01e      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x34e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2102      	movs	r1, #2
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fb12 	bl	8002fa4 <LL_ADC_GetOffsetChannel>
 8003980:	4603      	mov	r3, r0
 8003982:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003992:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800399a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80039a2:	2320      	movs	r3, #32
 80039a4:	e004      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80039a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039aa:	fab3 f383 	clz	r3, r3
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d105      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x366>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	0e9b      	lsrs	r3, r3, #26
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	e014      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x390>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039d2:	fa93 f3a3 	rbit	r3, r3
 80039d6:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80039d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80039de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80039e6:	2320      	movs	r3, #32
 80039e8:	e004      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80039ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d106      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2200      	movs	r2, #0
 80039fe:	2102      	movs	r1, #2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fae5 	bl	8002fd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2103      	movs	r1, #3
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fac9 	bl	8002fa4 <LL_ADC_GetOffsetChannel>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x3ce>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2103      	movs	r1, #3
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff fabe 	bl	8002fa4 <LL_ADC_GetOffsetChannel>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	0e9b      	lsrs	r3, r3, #26
 8003a2c:	f003 021f 	and.w	r2, r3, #31
 8003a30:	e017      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x3fe>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2103      	movs	r1, #3
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fab3 	bl	8002fa4 <LL_ADC_GetOffsetChannel>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a44:	fa93 f3a3 	rbit	r3, r3
 8003a48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003a54:	2320      	movs	r3, #32
 8003a56:	e003      	b.n	8003a60 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a5a:	fab3 f383 	clz	r3, r3
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x416>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	0e9b      	lsrs	r3, r3, #26
 8003a74:	f003 031f 	and.w	r3, r3, #31
 8003a78:	e011      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x43a>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a82:	fa93 f3a3 	rbit	r3, r3
 8003a86:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a8a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003a8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003a92:	2320      	movs	r3, #32
 8003a94:	e003      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003a96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a98:	fab3 f383 	clz	r3, r3
 8003a9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d106      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2103      	movs	r1, #3
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fa90 	bl	8002fd0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fba9 	bl	800320c <LL_ADC_IsEnabled>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f040 813f 	bne.w	8003d40 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6819      	ldr	r1, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f7ff fb16 	bl	8003100 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4a8e      	ldr	r2, [pc, #568]	; (8003d14 <HAL_ADC_ConfigChannel+0x6b0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	f040 8130 	bne.w	8003d40 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x4a4>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	0e9b      	lsrs	r3, r3, #26
 8003af6:	3301      	adds	r3, #1
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	2b09      	cmp	r3, #9
 8003afe:	bf94      	ite	ls
 8003b00:	2301      	movls	r3, #1
 8003b02:	2300      	movhi	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e019      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x4d8>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b10:	fa93 f3a3 	rbit	r3, r3
 8003b14:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b18:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003b20:	2320      	movs	r3, #32
 8003b22:	e003      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	2b09      	cmp	r3, #9
 8003b34:	bf94      	ite	ls
 8003b36:	2301      	movls	r3, #1
 8003b38:	2300      	movhi	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d079      	beq.n	8003c34 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d107      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x4f8>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	0e9b      	lsrs	r3, r3, #26
 8003b52:	3301      	adds	r3, #1
 8003b54:	069b      	lsls	r3, r3, #26
 8003b56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b5a:	e015      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x524>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b64:	fa93 f3a3 	rbit	r3, r3
 8003b68:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b6c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003b74:	2320      	movs	r3, #32
 8003b76:	e003      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	069b      	lsls	r3, r3, #26
 8003b84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x544>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	0e9b      	lsrs	r3, r3, #26
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba6:	e017      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x574>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003bc0:	2320      	movs	r3, #32
 8003bc2:	e003      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd8:	ea42 0103 	orr.w	r1, r2, r3
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x59a>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	0e9b      	lsrs	r3, r3, #26
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f003 021f 	and.w	r2, r3, #31
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4413      	add	r3, r2
 8003bfa:	051b      	lsls	r3, r3, #20
 8003bfc:	e018      	b.n	8003c30 <HAL_ADC_ConfigChannel+0x5cc>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003c16:	2320      	movs	r3, #32
 8003c18:	e003      	b.n	8003c22 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	fab3 f383 	clz	r3, r3
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	3301      	adds	r3, #1
 8003c24:	f003 021f 	and.w	r2, r3, #31
 8003c28:	4613      	mov	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c30:	430b      	orrs	r3, r1
 8003c32:	e080      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d107      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x5ec>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	0e9b      	lsrs	r3, r3, #26
 8003c46:	3301      	adds	r3, #1
 8003c48:	069b      	lsls	r3, r3, #26
 8003c4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c4e:	e015      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x618>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	fa93 f3a3 	rbit	r3, r3
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003c68:	2320      	movs	r3, #32
 8003c6a:	e003      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	3301      	adds	r3, #1
 8003c76:	069b      	lsls	r3, r3, #26
 8003c78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x638>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	0e9b      	lsrs	r3, r3, #26
 8003c8e:	3301      	adds	r3, #1
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	2101      	movs	r1, #1
 8003c96:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9a:	e017      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x668>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	fa93 f3a3 	rbit	r3, r3
 8003ca8:	61bb      	str	r3, [r7, #24]
  return result;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003cb4:	2320      	movs	r3, #32
 8003cb6:	e003      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	fab3 f383 	clz	r3, r3
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ccc:	ea42 0103 	orr.w	r1, r2, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10d      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x694>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	0e9b      	lsrs	r3, r3, #26
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f003 021f 	and.w	r2, r3, #31
 8003ce8:	4613      	mov	r3, r2
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	4413      	add	r3, r2
 8003cee:	3b1e      	subs	r3, #30
 8003cf0:	051b      	lsls	r3, r3, #20
 8003cf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	e01d      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x6d0>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	fa93 f3a3 	rbit	r3, r3
 8003d04:	60fb      	str	r3, [r7, #12]
  return result;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d103      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003d10:	2320      	movs	r3, #32
 8003d12:	e005      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x6bc>
 8003d14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	fab3 f383 	clz	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	3301      	adds	r3, #1
 8003d22:	f003 021f 	and.w	r2, r3, #31
 8003d26:	4613      	mov	r3, r2
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3b1e      	subs	r3, #30
 8003d2e:	051b      	lsls	r3, r3, #20
 8003d30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d34:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f7ff f9b5 	bl	80030aa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4b3d      	ldr	r3, [pc, #244]	; (8003e3c <HAL_ADC_ConfigChannel+0x7d8>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d06c      	beq.n	8003e26 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d4c:	483c      	ldr	r0, [pc, #240]	; (8003e40 <HAL_ADC_ConfigChannel+0x7dc>)
 8003d4e:	f7ff f8f7 	bl	8002f40 <LL_ADC_GetCommonPathInternalCh>
 8003d52:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a3a      	ldr	r2, [pc, #232]	; (8003e44 <HAL_ADC_ConfigChannel+0x7e0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d127      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d121      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a35      	ldr	r2, [pc, #212]	; (8003e48 <HAL_ADC_ConfigChannel+0x7e4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d157      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d7e:	4619      	mov	r1, r3
 8003d80:	482f      	ldr	r0, [pc, #188]	; (8003e40 <HAL_ADC_ConfigChannel+0x7dc>)
 8003d82:	f7ff f8ca 	bl	8002f1a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d86:	4b31      	ldr	r3, [pc, #196]	; (8003e4c <HAL_ADC_ConfigChannel+0x7e8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	099b      	lsrs	r3, r3, #6
 8003d8c:	4a30      	ldr	r2, [pc, #192]	; (8003e50 <HAL_ADC_ConfigChannel+0x7ec>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	099b      	lsrs	r3, r3, #6
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	4613      	mov	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003da0:	e002      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f9      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dae:	e03a      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a27      	ldr	r2, [pc, #156]	; (8003e54 <HAL_ADC_ConfigChannel+0x7f0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d113      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003dba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10d      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1f      	ldr	r2, [pc, #124]	; (8003e48 <HAL_ADC_ConfigChannel+0x7e4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d12a      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4819      	ldr	r0, [pc, #100]	; (8003e40 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ddc:	f7ff f89d 	bl	8002f1a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003de0:	e021      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1c      	ldr	r2, [pc, #112]	; (8003e58 <HAL_ADC_ConfigChannel+0x7f4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d11c      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003dec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d116      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <HAL_ADC_ConfigChannel+0x7e4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d111      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	480c      	ldr	r0, [pc, #48]	; (8003e40 <HAL_ADC_ConfigChannel+0x7dc>)
 8003e0e:	f7ff f884 	bl	8002f1a <LL_ADC_SetCommonPathInternalCh>
 8003e12:	e008      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003e2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	37d8      	adds	r7, #216	; 0xd8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	80080000 	.word	0x80080000
 8003e40:	50040300 	.word	0x50040300
 8003e44:	c7520000 	.word	0xc7520000
 8003e48:	50040000 	.word	0x50040000
 8003e4c:	2000000c 	.word	0x2000000c
 8003e50:	053e2d63 	.word	0x053e2d63
 8003e54:	cb840000 	.word	0xcb840000
 8003e58:	80000001 	.word	0x80000001

08003e5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff f9cd 	bl	800320c <LL_ADC_IsEnabled>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d169      	bne.n	8003f4c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <ADC_Enable+0xfc>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	f043 0210 	orr.w	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e96:	f043 0201 	orr.w	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e055      	b.n	8003f4e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff f99c 	bl	80031e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003eac:	482b      	ldr	r0, [pc, #172]	; (8003f5c <ADC_Enable+0x100>)
 8003eae:	f7ff f847 	bl	8002f40 <LL_ADC_GetCommonPathInternalCh>
 8003eb2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003eb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d013      	beq.n	8003ee4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ebc:	4b28      	ldr	r3, [pc, #160]	; (8003f60 <ADC_Enable+0x104>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	099b      	lsrs	r3, r3, #6
 8003ec2:	4a28      	ldr	r2, [pc, #160]	; (8003f64 <ADC_Enable+0x108>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	099b      	lsrs	r3, r3, #6
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	4613      	mov	r3, r2
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ed6:	e002      	b.n	8003ede <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f9      	bne.n	8003ed8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ee4:	f7fe ffd6 	bl	8002e94 <HAL_GetTick>
 8003ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eea:	e028      	b.n	8003f3e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff f98b 	bl	800320c <LL_ADC_IsEnabled>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d104      	bne.n	8003f06 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff f96f 	bl	80031e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f06:	f7fe ffc5 	bl	8002e94 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d914      	bls.n	8003f3e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d00d      	beq.n	8003f3e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f26:	f043 0210 	orr.w	r2, r3, #16
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f32:	f043 0201 	orr.w	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e007      	b.n	8003f4e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d1cf      	bne.n	8003eec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	8000003f 	.word	0x8000003f
 8003f5c:	50040300 	.word	0x50040300
 8003f60:	2000000c 	.word	0x2000000c
 8003f64:	053e2d63 	.word	0x053e2d63

08003f68 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d14b      	bne.n	800401a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d021      	beq.n	8003fe0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff f843 	bl	800302c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d032      	beq.n	8004012 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d12b      	bne.n	8004012 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d11f      	bne.n	8004012 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	f043 0201 	orr.w	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	659a      	str	r2, [r3, #88]	; 0x58
 8003fde:	e018      	b.n	8004012 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d111      	bne.n	8004012 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d105      	bne.n	8004012 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	f043 0201 	orr.w	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f7fe f94a 	bl	80022ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004018:	e00e      	b.n	8004038 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f7ff fb12 	bl	8003650 <HAL_ADC_ErrorCallback>
}
 800402c:	e004      	b.n	8004038 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4798      	blx	r3
}
 8004038:	bf00      	nop
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7ff faf4 	bl	800363c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407a:	f043 0204 	orr.w	r2, r3, #4
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff fae4 	bl	8003650 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <__NVIC_SetPriorityGrouping+0x44>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040ac:	4013      	ands	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040c2:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <__NVIC_SetPriorityGrouping+0x44>)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	60d3      	str	r3, [r2, #12]
}
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040dc:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <__NVIC_GetPriorityGrouping+0x18>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	f003 0307 	and.w	r3, r3, #7
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004102:	2b00      	cmp	r3, #0
 8004104:	db0b      	blt.n	800411e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	f003 021f 	and.w	r2, r3, #31
 800410c:	4907      	ldr	r1, [pc, #28]	; (800412c <__NVIC_EnableIRQ+0x38>)
 800410e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	2001      	movs	r0, #1
 8004116:	fa00 f202 	lsl.w	r2, r0, r2
 800411a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	e000e100 	.word	0xe000e100

08004130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	6039      	str	r1, [r7, #0]
 800413a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800413c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004140:	2b00      	cmp	r3, #0
 8004142:	db0a      	blt.n	800415a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	b2da      	uxtb	r2, r3
 8004148:	490c      	ldr	r1, [pc, #48]	; (800417c <__NVIC_SetPriority+0x4c>)
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	0112      	lsls	r2, r2, #4
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	440b      	add	r3, r1
 8004154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004158:	e00a      	b.n	8004170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4908      	ldr	r1, [pc, #32]	; (8004180 <__NVIC_SetPriority+0x50>)
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	3b04      	subs	r3, #4
 8004168:	0112      	lsls	r2, r2, #4
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	440b      	add	r3, r1
 800416e:	761a      	strb	r2, [r3, #24]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000e100 	.word	0xe000e100
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004184:	b480      	push	{r7}
 8004186:	b089      	sub	sp, #36	; 0x24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f1c3 0307 	rsb	r3, r3, #7
 800419e:	2b04      	cmp	r3, #4
 80041a0:	bf28      	it	cs
 80041a2:	2304      	movcs	r3, #4
 80041a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3304      	adds	r3, #4
 80041aa:	2b06      	cmp	r3, #6
 80041ac:	d902      	bls.n	80041b4 <NVIC_EncodePriority+0x30>
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3b03      	subs	r3, #3
 80041b2:	e000      	b.n	80041b6 <NVIC_EncodePriority+0x32>
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b8:	f04f 32ff 	mov.w	r2, #4294967295
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43da      	mvns	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	401a      	ands	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041cc:	f04f 31ff 	mov.w	r1, #4294967295
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	fa01 f303 	lsl.w	r3, r1, r3
 80041d6:	43d9      	mvns	r1, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041dc:	4313      	orrs	r3, r2
         );
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	; 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041fc:	d301      	bcc.n	8004202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041fe:	2301      	movs	r3, #1
 8004200:	e00f      	b.n	8004222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004202:	4a0a      	ldr	r2, [pc, #40]	; (800422c <SysTick_Config+0x40>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3b01      	subs	r3, #1
 8004208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800420a:	210f      	movs	r1, #15
 800420c:	f04f 30ff 	mov.w	r0, #4294967295
 8004210:	f7ff ff8e 	bl	8004130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <SysTick_Config+0x40>)
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800421a:	4b04      	ldr	r3, [pc, #16]	; (800422c <SysTick_Config+0x40>)
 800421c:	2207      	movs	r2, #7
 800421e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	e000e010 	.word	0xe000e010

08004230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ff29 	bl	8004090 <__NVIC_SetPriorityGrouping>
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b086      	sub	sp, #24
 800424a:	af00      	add	r7, sp, #0
 800424c:	4603      	mov	r3, r0
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004258:	f7ff ff3e 	bl	80040d8 <__NVIC_GetPriorityGrouping>
 800425c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	68b9      	ldr	r1, [r7, #8]
 8004262:	6978      	ldr	r0, [r7, #20]
 8004264:	f7ff ff8e 	bl	8004184 <NVIC_EncodePriority>
 8004268:	4602      	mov	r2, r0
 800426a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800426e:	4611      	mov	r1, r2
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff ff5d 	bl	8004130 <__NVIC_SetPriority>
}
 8004276:	bf00      	nop
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	4603      	mov	r3, r0
 8004286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff31 	bl	80040f4 <__NVIC_EnableIRQ>
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff ffa2 	bl	80041ec <SysTick_Config>
 80042a8:	4603      	mov	r3, r0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e08d      	b.n	80043e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	4b47      	ldr	r3, [pc, #284]	; (80043ec <HAL_DMA_Init+0x138>)
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d80f      	bhi.n	80042f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	4b45      	ldr	r3, [pc, #276]	; (80043f0 <HAL_DMA_Init+0x13c>)
 80042da:	4413      	add	r3, r2
 80042dc:	4a45      	ldr	r2, [pc, #276]	; (80043f4 <HAL_DMA_Init+0x140>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	091b      	lsrs	r3, r3, #4
 80042e4:	009a      	lsls	r2, r3, #2
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a42      	ldr	r2, [pc, #264]	; (80043f8 <HAL_DMA_Init+0x144>)
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40
 80042f0:	e00e      	b.n	8004310 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	4b40      	ldr	r3, [pc, #256]	; (80043fc <HAL_DMA_Init+0x148>)
 80042fa:	4413      	add	r3, r2
 80042fc:	4a3d      	ldr	r2, [pc, #244]	; (80043f4 <HAL_DMA_Init+0x140>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	009a      	lsls	r2, r3, #2
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a3c      	ldr	r2, [pc, #240]	; (8004400 <HAL_DMA_Init+0x14c>)
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004334:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004340:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800434c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f9b6 	bl	80046d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004370:	d102      	bne.n	8004378 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800438c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d010      	beq.n	80043b8 <HAL_DMA_Init+0x104>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b04      	cmp	r3, #4
 800439c:	d80c      	bhi.n	80043b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f9d6 	bl	8004750 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	e008      	b.n	80043ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40020407 	.word	0x40020407
 80043f0:	bffdfff8 	.word	0xbffdfff8
 80043f4:	cccccccd 	.word	0xcccccccd
 80043f8:	40020000 	.word	0x40020000
 80043fc:	bffdfbf8 	.word	0xbffdfbf8
 8004400:	40020400 	.word	0x40020400

08004404 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_DMA_Start_IT+0x20>
 8004420:	2302      	movs	r3, #2
 8004422:	e066      	b.n	80044f2 <HAL_DMA_Start_IT+0xee>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d155      	bne.n	80044e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0201 	bic.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f8fb 	bl	8004658 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	2b00      	cmp	r3, #0
 8004468:	d008      	beq.n	800447c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 020e 	orr.w	r2, r2, #14
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e00f      	b.n	800449c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0204 	bic.w	r2, r2, #4
 800448a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 020a 	orr.w	r2, r2, #10
 800449a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d007      	beq.n	80044d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0201 	orr.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e005      	b.n	80044f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
 80044ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	f003 031c 	and.w	r3, r3, #28
 800451a:	2204      	movs	r2, #4
 800451c:	409a      	lsls	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4013      	ands	r3, r2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d026      	beq.n	8004574 <HAL_DMA_IRQHandler+0x7a>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d021      	beq.n	8004574 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	d107      	bne.n	800454e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0204 	bic.w	r2, r2, #4
 800454c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	f003 021c 	and.w	r2, r3, #28
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	2104      	movs	r1, #4
 800455c:	fa01 f202 	lsl.w	r2, r1, r2
 8004560:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	2b00      	cmp	r3, #0
 8004568:	d071      	beq.n	800464e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004572:	e06c      	b.n	800464e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004578:	f003 031c 	and.w	r3, r3, #28
 800457c:	2202      	movs	r2, #2
 800457e:	409a      	lsls	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d02e      	beq.n	80045e6 <HAL_DMA_IRQHandler+0xec>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d029      	beq.n	80045e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 020a 	bic.w	r2, r2, #10
 80045ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	f003 021c 	and.w	r2, r3, #28
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	2102      	movs	r1, #2
 80045c6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d038      	beq.n	800464e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80045e4:	e033      	b.n	800464e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	f003 031c 	and.w	r3, r3, #28
 80045ee:	2208      	movs	r2, #8
 80045f0:	409a      	lsls	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d02a      	beq.n	8004650 <HAL_DMA_IRQHandler+0x156>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b00      	cmp	r3, #0
 8004602:	d025      	beq.n	8004650 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 020e 	bic.w	r2, r2, #14
 8004612:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	f003 021c 	and.w	r2, r3, #28
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	2101      	movs	r1, #1
 8004622:	fa01 f202 	lsl.w	r2, r1, r2
 8004626:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800464e:	bf00      	nop
 8004650:	bf00      	nop
}
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800466e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004674:	2b00      	cmp	r3, #0
 8004676:	d004      	beq.n	8004682 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004680:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	f003 021c 	and.w	r2, r3, #28
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	2101      	movs	r1, #1
 8004690:	fa01 f202 	lsl.w	r2, r1, r2
 8004694:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b10      	cmp	r3, #16
 80046a4:	d108      	bne.n	80046b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046b6:	e007      	b.n	80046c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	60da      	str	r2, [r3, #12]
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	4b17      	ldr	r3, [pc, #92]	; (8004740 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d80a      	bhi.n	80046fe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ec:	089b      	lsrs	r3, r3, #2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046f4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6493      	str	r3, [r2, #72]	; 0x48
 80046fc:	e007      	b.n	800470e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	089b      	lsrs	r3, r3, #2
 8004704:	009a      	lsls	r2, r3, #2
 8004706:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004708:	4413      	add	r3, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	3b08      	subs	r3, #8
 8004716:	4a0c      	ldr	r2, [pc, #48]	; (8004748 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004718:	fba2 2303 	umull	r2, r3, r2, r3
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a0a      	ldr	r2, [pc, #40]	; (800474c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004724:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f003 031f 	and.w	r3, r3, #31
 800472c:	2201      	movs	r2, #1
 800472e:	409a      	lsls	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004734:	bf00      	nop
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	40020407 	.word	0x40020407
 8004744:	4002081c 	.word	0x4002081c
 8004748:	cccccccd 	.word	0xcccccccd
 800474c:	40020880 	.word	0x40020880

08004750 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	461a      	mov	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a08      	ldr	r2, [pc, #32]	; (8004794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004772:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	3b01      	subs	r3, #1
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	2201      	movs	r2, #1
 800477e:	409a      	lsls	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	1000823f 	.word	0x1000823f
 8004794:	40020940 	.word	0x40020940

08004798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047a6:	e166      	b.n	8004a76 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	2101      	movs	r1, #1
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	fa01 f303 	lsl.w	r3, r1, r3
 80047b4:	4013      	ands	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 8158 	beq.w	8004a70 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d005      	beq.n	80047d8 <HAL_GPIO_Init+0x40>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d130      	bne.n	800483a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	2203      	movs	r2, #3
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4013      	ands	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800480e:	2201      	movs	r2, #1
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4013      	ands	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	091b      	lsrs	r3, r3, #4
 8004824:	f003 0201 	and.w	r2, r3, #1
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b03      	cmp	r3, #3
 8004844:	d017      	beq.n	8004876 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	2203      	movs	r2, #3
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4013      	ands	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d123      	bne.n	80048ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	08da      	lsrs	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3208      	adds	r2, #8
 800488a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800488e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	220f      	movs	r2, #15
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43db      	mvns	r3, r3
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4013      	ands	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	08da      	lsrs	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3208      	adds	r2, #8
 80048c4:	6939      	ldr	r1, [r7, #16]
 80048c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	2203      	movs	r2, #3
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4013      	ands	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 0203 	and.w	r2, r3, #3
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 80b2 	beq.w	8004a70 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800490c:	4b61      	ldr	r3, [pc, #388]	; (8004a94 <HAL_GPIO_Init+0x2fc>)
 800490e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004910:	4a60      	ldr	r2, [pc, #384]	; (8004a94 <HAL_GPIO_Init+0x2fc>)
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	6613      	str	r3, [r2, #96]	; 0x60
 8004918:	4b5e      	ldr	r3, [pc, #376]	; (8004a94 <HAL_GPIO_Init+0x2fc>)
 800491a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004924:	4a5c      	ldr	r2, [pc, #368]	; (8004a98 <HAL_GPIO_Init+0x300>)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	089b      	lsrs	r3, r3, #2
 800492a:	3302      	adds	r3, #2
 800492c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004930:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	220f      	movs	r2, #15
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4013      	ands	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800494e:	d02b      	beq.n	80049a8 <HAL_GPIO_Init+0x210>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a52      	ldr	r2, [pc, #328]	; (8004a9c <HAL_GPIO_Init+0x304>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d025      	beq.n	80049a4 <HAL_GPIO_Init+0x20c>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a51      	ldr	r2, [pc, #324]	; (8004aa0 <HAL_GPIO_Init+0x308>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d01f      	beq.n	80049a0 <HAL_GPIO_Init+0x208>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a50      	ldr	r2, [pc, #320]	; (8004aa4 <HAL_GPIO_Init+0x30c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d019      	beq.n	800499c <HAL_GPIO_Init+0x204>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a4f      	ldr	r2, [pc, #316]	; (8004aa8 <HAL_GPIO_Init+0x310>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d013      	beq.n	8004998 <HAL_GPIO_Init+0x200>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a4e      	ldr	r2, [pc, #312]	; (8004aac <HAL_GPIO_Init+0x314>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00d      	beq.n	8004994 <HAL_GPIO_Init+0x1fc>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a4d      	ldr	r2, [pc, #308]	; (8004ab0 <HAL_GPIO_Init+0x318>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <HAL_GPIO_Init+0x1f8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a4c      	ldr	r2, [pc, #304]	; (8004ab4 <HAL_GPIO_Init+0x31c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d101      	bne.n	800498c <HAL_GPIO_Init+0x1f4>
 8004988:	2307      	movs	r3, #7
 800498a:	e00e      	b.n	80049aa <HAL_GPIO_Init+0x212>
 800498c:	2308      	movs	r3, #8
 800498e:	e00c      	b.n	80049aa <HAL_GPIO_Init+0x212>
 8004990:	2306      	movs	r3, #6
 8004992:	e00a      	b.n	80049aa <HAL_GPIO_Init+0x212>
 8004994:	2305      	movs	r3, #5
 8004996:	e008      	b.n	80049aa <HAL_GPIO_Init+0x212>
 8004998:	2304      	movs	r3, #4
 800499a:	e006      	b.n	80049aa <HAL_GPIO_Init+0x212>
 800499c:	2303      	movs	r3, #3
 800499e:	e004      	b.n	80049aa <HAL_GPIO_Init+0x212>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e002      	b.n	80049aa <HAL_GPIO_Init+0x212>
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <HAL_GPIO_Init+0x212>
 80049a8:	2300      	movs	r3, #0
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	f002 0203 	and.w	r2, r2, #3
 80049b0:	0092      	lsls	r2, r2, #2
 80049b2:	4093      	lsls	r3, r2
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049ba:	4937      	ldr	r1, [pc, #220]	; (8004a98 <HAL_GPIO_Init+0x300>)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	089b      	lsrs	r3, r3, #2
 80049c0:	3302      	adds	r3, #2
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049c8:	4b3b      	ldr	r3, [pc, #236]	; (8004ab8 <HAL_GPIO_Init+0x320>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4013      	ands	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049ec:	4a32      	ldr	r2, [pc, #200]	; (8004ab8 <HAL_GPIO_Init+0x320>)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049f2:	4b31      	ldr	r3, [pc, #196]	; (8004ab8 <HAL_GPIO_Init+0x320>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	43db      	mvns	r3, r3
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4013      	ands	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a16:	4a28      	ldr	r2, [pc, #160]	; (8004ab8 <HAL_GPIO_Init+0x320>)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a1c:	4b26      	ldr	r3, [pc, #152]	; (8004ab8 <HAL_GPIO_Init+0x320>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a40:	4a1d      	ldr	r2, [pc, #116]	; (8004ab8 <HAL_GPIO_Init+0x320>)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004a46:	4b1c      	ldr	r3, [pc, #112]	; (8004ab8 <HAL_GPIO_Init+0x320>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4013      	ands	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a6a:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <HAL_GPIO_Init+0x320>)
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	3301      	adds	r3, #1
 8004a74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f47f ae91 	bne.w	80047a8 <HAL_GPIO_Init+0x10>
  }
}
 8004a86:	bf00      	nop
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	40021000 	.word	0x40021000
 8004a98:	40010000 	.word	0x40010000
 8004a9c:	48000400 	.word	0x48000400
 8004aa0:	48000800 	.word	0x48000800
 8004aa4:	48000c00 	.word	0x48000c00
 8004aa8:	48001000 	.word	0x48001000
 8004aac:	48001400 	.word	0x48001400
 8004ab0:	48001800 	.word	0x48001800
 8004ab4:	48001c00 	.word	0x48001c00
 8004ab8:	40010400 	.word	0x40010400

08004abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	807b      	strh	r3, [r7, #2]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004acc:	787b      	ldrb	r3, [r7, #1]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ad2:	887a      	ldrh	r2, [r7, #2]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ad8:	e002      	b.n	8004ae0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ada:	887a      	ldrh	r2, [r7, #2]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e08d      	b.n	8004c1a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fd fcd6 	bl	80024c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2224      	movs	r2, #36	; 0x24
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0201 	bic.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d107      	bne.n	8004b66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b62:	609a      	str	r2, [r3, #8]
 8004b64:	e006      	b.n	8004b74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d108      	bne.n	8004b8e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b8a:	605a      	str	r2, [r3, #4]
 8004b8c:	e007      	b.n	8004b9e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69d9      	ldr	r1, [r3, #28]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1a      	ldr	r2, [r3, #32]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	607a      	str	r2, [r7, #4]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	460b      	mov	r3, r1
 8004c32:	817b      	strh	r3, [r7, #10]
 8004c34:	4613      	mov	r3, r2
 8004c36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	f040 80fd 	bne.w	8004e40 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_I2C_Master_Transmit+0x30>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e0f6      	b.n	8004e42 <HAL_I2C_Master_Transmit+0x21e>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c5c:	f7fe f91a 	bl	8002e94 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	2319      	movs	r3, #25
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fa0a 	bl	8005088 <I2C_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e0e1      	b.n	8004e42 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2221      	movs	r2, #33	; 0x21
 8004c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2210      	movs	r2, #16
 8004c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	893a      	ldrh	r2, [r7, #8]
 8004c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2bff      	cmp	r3, #255	; 0xff
 8004cae:	d906      	bls.n	8004cbe <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	22ff      	movs	r2, #255	; 0xff
 8004cb4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004cb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e007      	b.n	8004cce <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004cc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ccc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d024      	beq.n	8004d20 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	781a      	ldrb	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	8979      	ldrh	r1, [r7, #10]
 8004d12:	4b4e      	ldr	r3, [pc, #312]	; (8004e4c <HAL_I2C_Master_Transmit+0x228>)
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fbf1 	bl	8005500 <I2C_TransferConfig>
 8004d1e:	e066      	b.n	8004dee <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	8979      	ldrh	r1, [r7, #10]
 8004d28:	4b48      	ldr	r3, [pc, #288]	; (8004e4c <HAL_I2C_Master_Transmit+0x228>)
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 fbe6 	bl	8005500 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d34:	e05b      	b.n	8004dee <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	6a39      	ldr	r1, [r7, #32]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f9f3 	bl	8005126 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e07b      	b.n	8004e42 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	781a      	ldrb	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d034      	beq.n	8004dee <HAL_I2C_Master_Transmit+0x1ca>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d130      	bne.n	8004dee <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	2200      	movs	r2, #0
 8004d94:	2180      	movs	r1, #128	; 0x80
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f976 	bl	8005088 <I2C_WaitOnFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e04d      	b.n	8004e42 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2bff      	cmp	r3, #255	; 0xff
 8004dae:	d90e      	bls.n	8004dce <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	22ff      	movs	r2, #255	; 0xff
 8004db4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	8979      	ldrh	r1, [r7, #10]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 fb9a 	bl	8005500 <I2C_TransferConfig>
 8004dcc:	e00f      	b.n	8004dee <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	8979      	ldrh	r1, [r7, #10]
 8004de0:	2300      	movs	r3, #0
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 fb89 	bl	8005500 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d19e      	bne.n	8004d36 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	6a39      	ldr	r1, [r7, #32]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f9d9 	bl	80051b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e01a      	b.n	8004e42 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2220      	movs	r2, #32
 8004e12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6859      	ldr	r1, [r3, #4]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <HAL_I2C_Master_Transmit+0x22c>)
 8004e20:	400b      	ands	r3, r1
 8004e22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	e000      	b.n	8004e42 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004e40:	2302      	movs	r3, #2
  }
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	80002000 	.word	0x80002000
 8004e50:	fe00e800 	.word	0xfe00e800

08004e54 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	607a      	str	r2, [r7, #4]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	460b      	mov	r3, r1
 8004e62:	817b      	strh	r3, [r7, #10]
 8004e64:	4613      	mov	r3, r2
 8004e66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	f040 80db 	bne.w	800502c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_I2C_Master_Receive+0x30>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e0d4      	b.n	800502e <HAL_I2C_Master_Receive+0x1da>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e8c:	f7fe f802 	bl	8002e94 <HAL_GetTick>
 8004e90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	2319      	movs	r3, #25
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f8f2 	bl	8005088 <I2C_WaitOnFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e0bf      	b.n	800502e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2222      	movs	r2, #34	; 0x22
 8004eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2210      	movs	r2, #16
 8004eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	893a      	ldrh	r2, [r7, #8]
 8004ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2bff      	cmp	r3, #255	; 0xff
 8004ede:	d90e      	bls.n	8004efe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	22ff      	movs	r2, #255	; 0xff
 8004ee4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	8979      	ldrh	r1, [r7, #10]
 8004eee:	4b52      	ldr	r3, [pc, #328]	; (8005038 <HAL_I2C_Master_Receive+0x1e4>)
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 fb02 	bl	8005500 <I2C_TransferConfig>
 8004efc:	e06d      	b.n	8004fda <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	8979      	ldrh	r1, [r7, #10]
 8004f10:	4b49      	ldr	r3, [pc, #292]	; (8005038 <HAL_I2C_Master_Receive+0x1e4>)
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 faf1 	bl	8005500 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004f1e:	e05c      	b.n	8004fda <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	6a39      	ldr	r1, [r7, #32]
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f989 	bl	800523c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e07c      	b.n	800502e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d034      	beq.n	8004fda <HAL_I2C_Master_Receive+0x186>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d130      	bne.n	8004fda <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2180      	movs	r1, #128	; 0x80
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 f880 	bl	8005088 <I2C_WaitOnFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e04d      	b.n	800502e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2bff      	cmp	r3, #255	; 0xff
 8004f9a:	d90e      	bls.n	8004fba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	22ff      	movs	r2, #255	; 0xff
 8004fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	8979      	ldrh	r1, [r7, #10]
 8004faa:	2300      	movs	r3, #0
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 faa4 	bl	8005500 <I2C_TransferConfig>
 8004fb8:	e00f      	b.n	8004fda <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	8979      	ldrh	r1, [r7, #10]
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 fa93 	bl	8005500 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d19d      	bne.n	8004f20 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	6a39      	ldr	r1, [r7, #32]
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f8e3 	bl	80051b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e01a      	b.n	800502e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6859      	ldr	r1, [r3, #4]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4b0c      	ldr	r3, [pc, #48]	; (800503c <HAL_I2C_Master_Receive+0x1e8>)
 800500c:	400b      	ands	r3, r1
 800500e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	e000      	b.n	800502e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800502c:	2302      	movs	r3, #2
  }
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	80002400 	.word	0x80002400
 800503c:	fe00e800 	.word	0xfe00e800

08005040 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b02      	cmp	r3, #2
 8005054:	d103      	bne.n	800505e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2200      	movs	r2, #0
 800505c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b01      	cmp	r3, #1
 800506a:	d007      	beq.n	800507c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699a      	ldr	r2, [r3, #24]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	619a      	str	r2, [r3, #24]
  }
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	4613      	mov	r3, r2
 8005096:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005098:	e031      	b.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a0:	d02d      	beq.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a2:	f7fd fef7 	bl	8002e94 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d302      	bcc.n	80050b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d122      	bne.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4013      	ands	r3, r2
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	bf0c      	ite	eq
 80050c8:	2301      	moveq	r3, #1
 80050ca:	2300      	movne	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d113      	bne.n	80050fe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	f043 0220 	orr.w	r2, r3, #32
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e00f      	b.n	800511e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699a      	ldr	r2, [r3, #24]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4013      	ands	r3, r2
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	429a      	cmp	r2, r3
 800510c:	bf0c      	ite	eq
 800510e:	2301      	moveq	r3, #1
 8005110:	2300      	movne	r3, #0
 8005112:	b2db      	uxtb	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	429a      	cmp	r2, r3
 800511a:	d0be      	beq.n	800509a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005132:	e033      	b.n	800519c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f901 	bl	8005340 <I2C_IsErrorOccurred>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e031      	b.n	80051ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514e:	d025      	beq.n	800519c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005150:	f7fd fea0 	bl	8002e94 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	429a      	cmp	r2, r3
 800515e:	d302      	bcc.n	8005166 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d11a      	bne.n	800519c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b02      	cmp	r3, #2
 8005172:	d013      	beq.n	800519c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005178:	f043 0220 	orr.w	r2, r3, #32
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e007      	b.n	80051ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d1c4      	bne.n	8005134 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051c0:	e02f      	b.n	8005222 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	68b9      	ldr	r1, [r7, #8]
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 f8ba 	bl	8005340 <I2C_IsErrorOccurred>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e02d      	b.n	8005232 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d6:	f7fd fe5d 	bl	8002e94 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d11a      	bne.n	8005222 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d013      	beq.n	8005222 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fe:	f043 0220 	orr.w	r2, r3, #32
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e007      	b.n	8005232 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b20      	cmp	r3, #32
 800522e:	d1c8      	bne.n	80051c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005248:	e06b      	b.n	8005322 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f876 	bl	8005340 <I2C_IsErrorOccurred>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e069      	b.n	8005332 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b20      	cmp	r3, #32
 800526a:	d138      	bne.n	80052de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b04      	cmp	r3, #4
 8005278:	d105      	bne.n	8005286 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	e055      	b.n	8005332 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b10      	cmp	r3, #16
 8005292:	d107      	bne.n	80052a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2210      	movs	r2, #16
 800529a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2204      	movs	r2, #4
 80052a0:	645a      	str	r2, [r3, #68]	; 0x44
 80052a2:	e002      	b.n	80052aa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2220      	movs	r2, #32
 80052b0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6859      	ldr	r1, [r3, #4]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	4b1f      	ldr	r3, [pc, #124]	; (800533c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80052be:	400b      	ands	r3, r1
 80052c0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e029      	b.n	8005332 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052de:	f7fd fdd9 	bl	8002e94 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d302      	bcc.n	80052f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d116      	bne.n	8005322 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d00f      	beq.n	8005322 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005306:	f043 0220 	orr.w	r2, r3, #32
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e007      	b.n	8005332 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b04      	cmp	r3, #4
 800532e:	d18c      	bne.n	800524a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	fe00e800 	.word	0xfe00e800

08005340 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	; 0x28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	d068      	beq.n	800543e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2210      	movs	r2, #16
 8005372:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005374:	e049      	b.n	800540a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d045      	beq.n	800540a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800537e:	f7fd fd89 	bl	8002e94 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	429a      	cmp	r2, r3
 800538c:	d302      	bcc.n	8005394 <I2C_IsErrorOccurred+0x54>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d13a      	bne.n	800540a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b6:	d121      	bne.n	80053fc <I2C_IsErrorOccurred+0xbc>
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053be:	d01d      	beq.n	80053fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80053c0:	7cfb      	ldrb	r3, [r7, #19]
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d01a      	beq.n	80053fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80053d6:	f7fd fd5d 	bl	8002e94 <HAL_GetTick>
 80053da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053dc:	e00e      	b.n	80053fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80053de:	f7fd fd59 	bl	8002e94 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b19      	cmp	r3, #25
 80053ea:	d907      	bls.n	80053fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	f043 0320 	orr.w	r3, r3, #32
 80053f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80053fa:	e006      	b.n	800540a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b20      	cmp	r3, #32
 8005408:	d1e9      	bne.n	80053de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b20      	cmp	r3, #32
 8005416:	d003      	beq.n	8005420 <I2C_IsErrorOccurred+0xe0>
 8005418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0aa      	beq.n	8005376 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005424:	2b00      	cmp	r3, #0
 8005426:	d103      	bne.n	8005430 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2220      	movs	r2, #32
 800542e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	f043 0304 	orr.w	r3, r3, #4
 8005436:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005460:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	f043 0308 	orr.w	r3, r3, #8
 8005478:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005482:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00b      	beq.n	80054ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	f043 0302 	orr.w	r3, r3, #2
 800549a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80054ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01c      	beq.n	80054ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff fdc3 	bl	8005040 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6859      	ldr	r1, [r3, #4]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	4b0d      	ldr	r3, [pc, #52]	; (80054fc <I2C_IsErrorOccurred+0x1bc>)
 80054c6:	400b      	ands	r3, r1
 80054c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80054ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3728      	adds	r7, #40	; 0x28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	fe00e800 	.word	0xfe00e800

08005500 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	607b      	str	r3, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	817b      	strh	r3, [r7, #10]
 800550e:	4613      	mov	r3, r2
 8005510:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005512:	897b      	ldrh	r3, [r7, #10]
 8005514:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005518:	7a7b      	ldrb	r3, [r7, #9]
 800551a:	041b      	lsls	r3, r3, #16
 800551c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005520:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	4313      	orrs	r3, r2
 800552a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800552e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	0d5b      	lsrs	r3, r3, #21
 800553a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800553e:	4b08      	ldr	r3, [pc, #32]	; (8005560 <I2C_TransferConfig+0x60>)
 8005540:	430b      	orrs	r3, r1
 8005542:	43db      	mvns	r3, r3
 8005544:	ea02 0103 	and.w	r1, r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	03ff63ff 	.word	0x03ff63ff

08005564 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b20      	cmp	r3, #32
 8005578:	d138      	bne.n	80055ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005584:	2302      	movs	r3, #2
 8005586:	e032      	b.n	80055ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2224      	movs	r2, #36	; 0x24
 8005594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0201 	bic.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6819      	ldr	r1, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	e000      	b.n	80055ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055ec:	2302      	movs	r3, #2
  }
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b20      	cmp	r3, #32
 800560e:	d139      	bne.n	8005684 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800561a:	2302      	movs	r3, #2
 800561c:	e033      	b.n	8005686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2224      	movs	r2, #36	; 0x24
 800562a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800564c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	e000      	b.n	8005686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005684:	2302      	movs	r3, #2
  }
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005698:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a4:	d102      	bne.n	80056ac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80056a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056aa:	e00b      	b.n	80056c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80056ac:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80056ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ba:	d102      	bne.n	80056c2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80056bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056c0:	e000      	b.n	80056c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80056c2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40007000 	.word	0x40007000

080056d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d141      	bne.n	8005766 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056e2:	4b4b      	ldr	r3, [pc, #300]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ee:	d131      	bne.n	8005754 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056f0:	4b47      	ldr	r3, [pc, #284]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056f6:	4a46      	ldr	r2, [pc, #280]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005700:	4b43      	ldr	r3, [pc, #268]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005708:	4a41      	ldr	r2, [pc, #260]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800570a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800570e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005710:	4b40      	ldr	r3, [pc, #256]	; (8005814 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2232      	movs	r2, #50	; 0x32
 8005716:	fb02 f303 	mul.w	r3, r2, r3
 800571a:	4a3f      	ldr	r2, [pc, #252]	; (8005818 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800571c:	fba2 2303 	umull	r2, r3, r2, r3
 8005720:	0c9b      	lsrs	r3, r3, #18
 8005722:	3301      	adds	r3, #1
 8005724:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005726:	e002      	b.n	800572e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3b01      	subs	r3, #1
 800572c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800572e:	4b38      	ldr	r3, [pc, #224]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800573a:	d102      	bne.n	8005742 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f2      	bne.n	8005728 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005742:	4b33      	ldr	r3, [pc, #204]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800574a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800574e:	d158      	bne.n	8005802 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e057      	b.n	8005804 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005754:	4b2e      	ldr	r3, [pc, #184]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800575a:	4a2d      	ldr	r2, [pc, #180]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800575c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005760:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005764:	e04d      	b.n	8005802 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800576c:	d141      	bne.n	80057f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800576e:	4b28      	ldr	r3, [pc, #160]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800577a:	d131      	bne.n	80057e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800577c:	4b24      	ldr	r3, [pc, #144]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800577e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005782:	4a23      	ldr	r2, [pc, #140]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005788:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800578c:	4b20      	ldr	r3, [pc, #128]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005794:	4a1e      	ldr	r2, [pc, #120]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800579a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800579c:	4b1d      	ldr	r3, [pc, #116]	; (8005814 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2232      	movs	r2, #50	; 0x32
 80057a2:	fb02 f303 	mul.w	r3, r2, r3
 80057a6:	4a1c      	ldr	r2, [pc, #112]	; (8005818 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057a8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ac:	0c9b      	lsrs	r3, r3, #18
 80057ae:	3301      	adds	r3, #1
 80057b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057b2:	e002      	b.n	80057ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057ba:	4b15      	ldr	r3, [pc, #84]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c6:	d102      	bne.n	80057ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f2      	bne.n	80057b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057ce:	4b10      	ldr	r3, [pc, #64]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057da:	d112      	bne.n	8005802 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e011      	b.n	8005804 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057e6:	4a0a      	ldr	r2, [pc, #40]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80057f0:	e007      	b.n	8005802 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057f2:	4b07      	ldr	r3, [pc, #28]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057fa:	4a05      	ldr	r2, [pc, #20]	; (8005810 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005800:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	40007000 	.word	0x40007000
 8005814:	2000000c 	.word	0x2000000c
 8005818:	431bde83 	.word	0x431bde83

0800581c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005820:	4b05      	ldr	r3, [pc, #20]	; (8005838 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	4a04      	ldr	r2, [pc, #16]	; (8005838 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800582a:	6053      	str	r3, [r2, #4]
}
 800582c:	bf00      	nop
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40007000 	.word	0x40007000

0800583c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	f000 bc08 	b.w	8006060 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005850:	4b96      	ldr	r3, [pc, #600]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f003 030c 	and.w	r3, r3, #12
 8005858:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800585a:	4b94      	ldr	r3, [pc, #592]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80e4 	beq.w	8005a3a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d007      	beq.n	8005888 <HAL_RCC_OscConfig+0x4c>
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2b0c      	cmp	r3, #12
 800587c:	f040 808b 	bne.w	8005996 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2b01      	cmp	r3, #1
 8005884:	f040 8087 	bne.w	8005996 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005888:	4b88      	ldr	r3, [pc, #544]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <HAL_RCC_OscConfig+0x64>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e3df      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1a      	ldr	r2, [r3, #32]
 80058a4:	4b81      	ldr	r3, [pc, #516]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d004      	beq.n	80058ba <HAL_RCC_OscConfig+0x7e>
 80058b0:	4b7e      	ldr	r3, [pc, #504]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058b8:	e005      	b.n	80058c6 <HAL_RCC_OscConfig+0x8a>
 80058ba:	4b7c      	ldr	r3, [pc, #496]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80058bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c0:	091b      	lsrs	r3, r3, #4
 80058c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d223      	bcs.n	8005912 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fdcc 	bl	800646c <RCC_SetFlashLatencyFromMSIRange>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e3c0      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058de:	4b73      	ldr	r3, [pc, #460]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a72      	ldr	r2, [pc, #456]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80058e4:	f043 0308 	orr.w	r3, r3, #8
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	4b70      	ldr	r3, [pc, #448]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	496d      	ldr	r1, [pc, #436]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058fc:	4b6b      	ldr	r3, [pc, #428]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	4968      	ldr	r1, [pc, #416]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 800590c:	4313      	orrs	r3, r2
 800590e:	604b      	str	r3, [r1, #4]
 8005910:	e025      	b.n	800595e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005912:	4b66      	ldr	r3, [pc, #408]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a65      	ldr	r2, [pc, #404]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005918:	f043 0308 	orr.w	r3, r3, #8
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	4b63      	ldr	r3, [pc, #396]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	4960      	ldr	r1, [pc, #384]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 800592c:	4313      	orrs	r3, r2
 800592e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005930:	4b5e      	ldr	r3, [pc, #376]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	495b      	ldr	r1, [pc, #364]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005940:	4313      	orrs	r3, r2
 8005942:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fd8c 	bl	800646c <RCC_SetFlashLatencyFromMSIRange>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e380      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800595e:	f000 fcc1 	bl	80062e4 <HAL_RCC_GetSysClockFreq>
 8005962:	4602      	mov	r2, r0
 8005964:	4b51      	ldr	r3, [pc, #324]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	091b      	lsrs	r3, r3, #4
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	4950      	ldr	r1, [pc, #320]	; (8005ab0 <HAL_RCC_OscConfig+0x274>)
 8005970:	5ccb      	ldrb	r3, [r1, r3]
 8005972:	f003 031f 	and.w	r3, r3, #31
 8005976:	fa22 f303 	lsr.w	r3, r2, r3
 800597a:	4a4e      	ldr	r2, [pc, #312]	; (8005ab4 <HAL_RCC_OscConfig+0x278>)
 800597c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800597e:	4b4e      	ldr	r3, [pc, #312]	; (8005ab8 <HAL_RCC_OscConfig+0x27c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f7fd fa36 	bl	8002df4 <HAL_InitTick>
 8005988:	4603      	mov	r3, r0
 800598a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d052      	beq.n	8005a38 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005992:	7bfb      	ldrb	r3, [r7, #15]
 8005994:	e364      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d032      	beq.n	8005a04 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800599e:	4b43      	ldr	r3, [pc, #268]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a42      	ldr	r2, [pc, #264]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80059a4:	f043 0301 	orr.w	r3, r3, #1
 80059a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059aa:	f7fd fa73 	bl	8002e94 <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059b0:	e008      	b.n	80059c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059b2:	f7fd fa6f 	bl	8002e94 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e34d      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059c4:	4b39      	ldr	r3, [pc, #228]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0f0      	beq.n	80059b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059d0:	4b36      	ldr	r3, [pc, #216]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a35      	ldr	r2, [pc, #212]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80059d6:	f043 0308 	orr.w	r3, r3, #8
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	4b33      	ldr	r3, [pc, #204]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	4930      	ldr	r1, [pc, #192]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059ee:	4b2f      	ldr	r3, [pc, #188]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	492b      	ldr	r1, [pc, #172]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	604b      	str	r3, [r1, #4]
 8005a02:	e01a      	b.n	8005a3a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005a04:	4b29      	ldr	r3, [pc, #164]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a28      	ldr	r2, [pc, #160]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005a0a:	f023 0301 	bic.w	r3, r3, #1
 8005a0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a10:	f7fd fa40 	bl	8002e94 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a18:	f7fd fa3c 	bl	8002e94 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e31a      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a2a:	4b20      	ldr	r3, [pc, #128]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0x1dc>
 8005a36:	e000      	b.n	8005a3a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d073      	beq.n	8005b2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d005      	beq.n	8005a58 <HAL_RCC_OscConfig+0x21c>
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	2b0c      	cmp	r3, #12
 8005a50:	d10e      	bne.n	8005a70 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d10b      	bne.n	8005a70 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a58:	4b14      	ldr	r3, [pc, #80]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d063      	beq.n	8005b2c <HAL_RCC_OscConfig+0x2f0>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d15f      	bne.n	8005b2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e2f7      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a78:	d106      	bne.n	8005a88 <HAL_RCC_OscConfig+0x24c>
 8005a7a:	4b0c      	ldr	r3, [pc, #48]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a0b      	ldr	r2, [pc, #44]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	e025      	b.n	8005ad4 <HAL_RCC_OscConfig+0x298>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a90:	d114      	bne.n	8005abc <HAL_RCC_OscConfig+0x280>
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a05      	ldr	r2, [pc, #20]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	4b03      	ldr	r3, [pc, #12]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a02      	ldr	r2, [pc, #8]	; (8005aac <HAL_RCC_OscConfig+0x270>)
 8005aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	e013      	b.n	8005ad4 <HAL_RCC_OscConfig+0x298>
 8005aac:	40021000 	.word	0x40021000
 8005ab0:	0800c818 	.word	0x0800c818
 8005ab4:	2000000c 	.word	0x2000000c
 8005ab8:	20000010 	.word	0x20000010
 8005abc:	4ba0      	ldr	r3, [pc, #640]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a9f      	ldr	r2, [pc, #636]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	4b9d      	ldr	r3, [pc, #628]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a9c      	ldr	r2, [pc, #624]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d013      	beq.n	8005b04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005adc:	f7fd f9da 	bl	8002e94 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae4:	f7fd f9d6 	bl	8002e94 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b64      	cmp	r3, #100	; 0x64
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e2b4      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005af6:	4b92      	ldr	r3, [pc, #584]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0f0      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x2a8>
 8005b02:	e014      	b.n	8005b2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b04:	f7fd f9c6 	bl	8002e94 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b0c:	f7fd f9c2 	bl	8002e94 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b64      	cmp	r3, #100	; 0x64
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e2a0      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b1e:	4b88      	ldr	r3, [pc, #544]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f0      	bne.n	8005b0c <HAL_RCC_OscConfig+0x2d0>
 8005b2a:	e000      	b.n	8005b2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d060      	beq.n	8005bfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d005      	beq.n	8005b4c <HAL_RCC_OscConfig+0x310>
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	2b0c      	cmp	r3, #12
 8005b44:	d119      	bne.n	8005b7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d116      	bne.n	8005b7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b4c:	4b7c      	ldr	r3, [pc, #496]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <HAL_RCC_OscConfig+0x328>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e27d      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b64:	4b76      	ldr	r3, [pc, #472]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	061b      	lsls	r3, r3, #24
 8005b72:	4973      	ldr	r1, [pc, #460]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b78:	e040      	b.n	8005bfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d023      	beq.n	8005bca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b82:	4b6f      	ldr	r3, [pc, #444]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a6e      	ldr	r2, [pc, #440]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8e:	f7fd f981 	bl	8002e94 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b96:	f7fd f97d 	bl	8002e94 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e25b      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ba8:	4b65      	ldr	r3, [pc, #404]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f0      	beq.n	8005b96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb4:	4b62      	ldr	r3, [pc, #392]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	061b      	lsls	r3, r3, #24
 8005bc2:	495f      	ldr	r1, [pc, #380]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	604b      	str	r3, [r1, #4]
 8005bc8:	e018      	b.n	8005bfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bca:	4b5d      	ldr	r3, [pc, #372]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a5c      	ldr	r2, [pc, #368]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd6:	f7fd f95d 	bl	8002e94 <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bdc:	e008      	b.n	8005bf0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bde:	f7fd f959 	bl	8002e94 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e237      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bf0:	4b53      	ldr	r3, [pc, #332]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1f0      	bne.n	8005bde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d03c      	beq.n	8005c82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01c      	beq.n	8005c4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c10:	4b4b      	ldr	r3, [pc, #300]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c16:	4a4a      	ldr	r2, [pc, #296]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005c18:	f043 0301 	orr.w	r3, r3, #1
 8005c1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c20:	f7fd f938 	bl	8002e94 <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c28:	f7fd f934 	bl	8002e94 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e212      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c3a:	4b41      	ldr	r3, [pc, #260]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0ef      	beq.n	8005c28 <HAL_RCC_OscConfig+0x3ec>
 8005c48:	e01b      	b.n	8005c82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c4a:	4b3d      	ldr	r3, [pc, #244]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c50:	4a3b      	ldr	r2, [pc, #236]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5a:	f7fd f91b 	bl	8002e94 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c62:	f7fd f917 	bl	8002e94 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e1f5      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c74:	4b32      	ldr	r3, [pc, #200]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1ef      	bne.n	8005c62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 80a6 	beq.w	8005ddc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c90:	2300      	movs	r3, #0
 8005c92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c94:	4b2a      	ldr	r3, [pc, #168]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10d      	bne.n	8005cbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ca0:	4b27      	ldr	r3, [pc, #156]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca4:	4a26      	ldr	r2, [pc, #152]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005caa:	6593      	str	r3, [r2, #88]	; 0x58
 8005cac:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cbc:	4b21      	ldr	r3, [pc, #132]	; (8005d44 <HAL_RCC_OscConfig+0x508>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d118      	bne.n	8005cfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cc8:	4b1e      	ldr	r3, [pc, #120]	; (8005d44 <HAL_RCC_OscConfig+0x508>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1d      	ldr	r2, [pc, #116]	; (8005d44 <HAL_RCC_OscConfig+0x508>)
 8005cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cd4:	f7fd f8de 	bl	8002e94 <HAL_GetTick>
 8005cd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cdc:	f7fd f8da 	bl	8002e94 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e1b8      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cee:	4b15      	ldr	r3, [pc, #84]	; (8005d44 <HAL_RCC_OscConfig+0x508>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0f0      	beq.n	8005cdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d108      	bne.n	8005d14 <HAL_RCC_OscConfig+0x4d8>
 8005d02:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d08:	4a0d      	ldr	r2, [pc, #52]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d12:	e029      	b.n	8005d68 <HAL_RCC_OscConfig+0x52c>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b05      	cmp	r3, #5
 8005d1a:	d115      	bne.n	8005d48 <HAL_RCC_OscConfig+0x50c>
 8005d1c:	4b08      	ldr	r3, [pc, #32]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d22:	4a07      	ldr	r2, [pc, #28]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005d24:	f043 0304 	orr.w	r3, r3, #4
 8005d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d2c:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d32:	4a03      	ldr	r2, [pc, #12]	; (8005d40 <HAL_RCC_OscConfig+0x504>)
 8005d34:	f043 0301 	orr.w	r3, r3, #1
 8005d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d3c:	e014      	b.n	8005d68 <HAL_RCC_OscConfig+0x52c>
 8005d3e:	bf00      	nop
 8005d40:	40021000 	.word	0x40021000
 8005d44:	40007000 	.word	0x40007000
 8005d48:	4b9d      	ldr	r3, [pc, #628]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4e:	4a9c      	ldr	r2, [pc, #624]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005d50:	f023 0301 	bic.w	r3, r3, #1
 8005d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d58:	4b99      	ldr	r3, [pc, #612]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5e:	4a98      	ldr	r2, [pc, #608]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005d60:	f023 0304 	bic.w	r3, r3, #4
 8005d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d016      	beq.n	8005d9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d70:	f7fd f890 	bl	8002e94 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d76:	e00a      	b.n	8005d8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d78:	f7fd f88c 	bl	8002e94 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e168      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d8e:	4b8c      	ldr	r3, [pc, #560]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0ed      	beq.n	8005d78 <HAL_RCC_OscConfig+0x53c>
 8005d9c:	e015      	b.n	8005dca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d9e:	f7fd f879 	bl	8002e94 <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005da4:	e00a      	b.n	8005dbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da6:	f7fd f875 	bl	8002e94 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e151      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005dbc:	4b80      	ldr	r3, [pc, #512]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1ed      	bne.n	8005da6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dca:	7ffb      	ldrb	r3, [r7, #31]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d105      	bne.n	8005ddc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd0:	4b7b      	ldr	r3, [pc, #492]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd4:	4a7a      	ldr	r2, [pc, #488]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d03c      	beq.n	8005e62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01c      	beq.n	8005e2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005df0:	4b73      	ldr	r3, [pc, #460]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005df6:	4a72      	ldr	r2, [pc, #456]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005df8:	f043 0301 	orr.w	r3, r3, #1
 8005dfc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e00:	f7fd f848 	bl	8002e94 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e08:	f7fd f844 	bl	8002e94 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e122      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e1a:	4b69      	ldr	r3, [pc, #420]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005e1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0ef      	beq.n	8005e08 <HAL_RCC_OscConfig+0x5cc>
 8005e28:	e01b      	b.n	8005e62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e2a:	4b65      	ldr	r3, [pc, #404]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005e2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e30:	4a63      	ldr	r2, [pc, #396]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005e32:	f023 0301 	bic.w	r3, r3, #1
 8005e36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e3a:	f7fd f82b 	bl	8002e94 <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e42:	f7fd f827 	bl	8002e94 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e105      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e54:	4b5a      	ldr	r3, [pc, #360]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1ef      	bne.n	8005e42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80f9 	beq.w	800605e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	f040 80cf 	bne.w	8006014 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005e76:	4b52      	ldr	r3, [pc, #328]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f003 0203 	and.w	r2, r3, #3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d12c      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	3b01      	subs	r3, #1
 8005e96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d123      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d11b      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d113      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec6:	085b      	lsrs	r3, r3, #1
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d109      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	3b01      	subs	r3, #1
 8005ede:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d071      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	2b0c      	cmp	r3, #12
 8005ee8:	d068      	beq.n	8005fbc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005eea:	4b35      	ldr	r3, [pc, #212]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d105      	bne.n	8005f02 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005ef6:	4b32      	ldr	r3, [pc, #200]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e0ac      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005f06:	4b2e      	ldr	r3, [pc, #184]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a2d      	ldr	r2, [pc, #180]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005f0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f12:	f7fc ffbf 	bl	8002e94 <HAL_GetTick>
 8005f16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f1a:	f7fc ffbb 	bl	8002e94 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e099      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f2c:	4b24      	ldr	r3, [pc, #144]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1f0      	bne.n	8005f1a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f38:	4b21      	ldr	r3, [pc, #132]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	4b21      	ldr	r3, [pc, #132]	; (8005fc4 <HAL_RCC_OscConfig+0x788>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f48:	3a01      	subs	r2, #1
 8005f4a:	0112      	lsls	r2, r2, #4
 8005f4c:	4311      	orrs	r1, r2
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f52:	0212      	lsls	r2, r2, #8
 8005f54:	4311      	orrs	r1, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f5a:	0852      	lsrs	r2, r2, #1
 8005f5c:	3a01      	subs	r2, #1
 8005f5e:	0552      	lsls	r2, r2, #21
 8005f60:	4311      	orrs	r1, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005f66:	0852      	lsrs	r2, r2, #1
 8005f68:	3a01      	subs	r2, #1
 8005f6a:	0652      	lsls	r2, r2, #25
 8005f6c:	4311      	orrs	r1, r2
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f72:	06d2      	lsls	r2, r2, #27
 8005f74:	430a      	orrs	r2, r1
 8005f76:	4912      	ldr	r1, [pc, #72]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005f7c:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a0f      	ldr	r2, [pc, #60]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f88:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	4a0c      	ldr	r2, [pc, #48]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f94:	f7fc ff7e 	bl	8002e94 <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f9c:	f7fc ff7a 	bl	8002e94 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e058      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fae:	4b04      	ldr	r3, [pc, #16]	; (8005fc0 <HAL_RCC_OscConfig+0x784>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0f0      	beq.n	8005f9c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fba:	e050      	b.n	800605e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e04f      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fc8:	4b27      	ldr	r3, [pc, #156]	; (8006068 <HAL_RCC_OscConfig+0x82c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d144      	bne.n	800605e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005fd4:	4b24      	ldr	r3, [pc, #144]	; (8006068 <HAL_RCC_OscConfig+0x82c>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a23      	ldr	r2, [pc, #140]	; (8006068 <HAL_RCC_OscConfig+0x82c>)
 8005fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fe0:	4b21      	ldr	r3, [pc, #132]	; (8006068 <HAL_RCC_OscConfig+0x82c>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	4a20      	ldr	r2, [pc, #128]	; (8006068 <HAL_RCC_OscConfig+0x82c>)
 8005fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fec:	f7fc ff52 	bl	8002e94 <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff4:	f7fc ff4e 	bl	8002e94 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e02c      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006006:	4b18      	ldr	r3, [pc, #96]	; (8006068 <HAL_RCC_OscConfig+0x82c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f0      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x7b8>
 8006012:	e024      	b.n	800605e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	2b0c      	cmp	r3, #12
 8006018:	d01f      	beq.n	800605a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800601a:	4b13      	ldr	r3, [pc, #76]	; (8006068 <HAL_RCC_OscConfig+0x82c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a12      	ldr	r2, [pc, #72]	; (8006068 <HAL_RCC_OscConfig+0x82c>)
 8006020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006026:	f7fc ff35 	bl	8002e94 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800602e:	f7fc ff31 	bl	8002e94 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e00f      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <HAL_RCC_OscConfig+0x82c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1f0      	bne.n	800602e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800604c:	4b06      	ldr	r3, [pc, #24]	; (8006068 <HAL_RCC_OscConfig+0x82c>)
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	4905      	ldr	r1, [pc, #20]	; (8006068 <HAL_RCC_OscConfig+0x82c>)
 8006052:	4b06      	ldr	r3, [pc, #24]	; (800606c <HAL_RCC_OscConfig+0x830>)
 8006054:	4013      	ands	r3, r2
 8006056:	60cb      	str	r3, [r1, #12]
 8006058:	e001      	b.n	800605e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3720      	adds	r7, #32
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40021000 	.word	0x40021000
 800606c:	feeefffc 	.word	0xfeeefffc

08006070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800607a:	2300      	movs	r3, #0
 800607c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e11d      	b.n	80062c4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006088:	4b90      	ldr	r3, [pc, #576]	; (80062cc <HAL_RCC_ClockConfig+0x25c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d910      	bls.n	80060b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006096:	4b8d      	ldr	r3, [pc, #564]	; (80062cc <HAL_RCC_ClockConfig+0x25c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f023 020f 	bic.w	r2, r3, #15
 800609e:	498b      	ldr	r1, [pc, #556]	; (80062cc <HAL_RCC_ClockConfig+0x25c>)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a6:	4b89      	ldr	r3, [pc, #548]	; (80062cc <HAL_RCC_ClockConfig+0x25c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d001      	beq.n	80060b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e105      	b.n	80062c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d010      	beq.n	80060e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	4b81      	ldr	r3, [pc, #516]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d908      	bls.n	80060e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060d4:	4b7e      	ldr	r3, [pc, #504]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	497b      	ldr	r1, [pc, #492]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d079      	beq.n	80061e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d11e      	bne.n	8006138 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060fa:	4b75      	ldr	r3, [pc, #468]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e0dc      	b.n	80062c4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800610a:	f000 fa09 	bl	8006520 <RCC_GetSysClockFreqFromPLLSource>
 800610e:	4603      	mov	r3, r0
 8006110:	4a70      	ldr	r2, [pc, #448]	; (80062d4 <HAL_RCC_ClockConfig+0x264>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d946      	bls.n	80061a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006116:	4b6e      	ldr	r3, [pc, #440]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d140      	bne.n	80061a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006122:	4b6b      	ldr	r3, [pc, #428]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800612a:	4a69      	ldr	r2, [pc, #420]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 800612c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006130:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006132:	2380      	movs	r3, #128	; 0x80
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	e035      	b.n	80061a4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2b02      	cmp	r3, #2
 800613e:	d107      	bne.n	8006150 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006140:	4b63      	ldr	r3, [pc, #396]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d115      	bne.n	8006178 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e0b9      	b.n	80062c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d107      	bne.n	8006168 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006158:	4b5d      	ldr	r3, [pc, #372]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d109      	bne.n	8006178 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0ad      	b.n	80062c4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006168:	4b59      	ldr	r3, [pc, #356]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e0a5      	b.n	80062c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006178:	f000 f8b4 	bl	80062e4 <HAL_RCC_GetSysClockFreq>
 800617c:	4603      	mov	r3, r0
 800617e:	4a55      	ldr	r2, [pc, #340]	; (80062d4 <HAL_RCC_ClockConfig+0x264>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d90f      	bls.n	80061a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006184:	4b52      	ldr	r3, [pc, #328]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d109      	bne.n	80061a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006190:	4b4f      	ldr	r3, [pc, #316]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006198:	4a4d      	ldr	r2, [pc, #308]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 800619a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800619e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80061a0:	2380      	movs	r3, #128	; 0x80
 80061a2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061a4:	4b4a      	ldr	r3, [pc, #296]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f023 0203 	bic.w	r2, r3, #3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	4947      	ldr	r1, [pc, #284]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b6:	f7fc fe6d 	bl	8002e94 <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061bc:	e00a      	b.n	80061d4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061be:	f7fc fe69 	bl	8002e94 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d901      	bls.n	80061d4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e077      	b.n	80062c4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061d4:	4b3e      	ldr	r3, [pc, #248]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 020c 	and.w	r2, r3, #12
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d1eb      	bne.n	80061be <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b80      	cmp	r3, #128	; 0x80
 80061ea:	d105      	bne.n	80061f8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80061ec:	4b38      	ldr	r3, [pc, #224]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	4a37      	ldr	r2, [pc, #220]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 80061f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061f6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d010      	beq.n	8006226 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	4b31      	ldr	r3, [pc, #196]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006210:	429a      	cmp	r2, r3
 8006212:	d208      	bcs.n	8006226 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006214:	4b2e      	ldr	r3, [pc, #184]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	492b      	ldr	r1, [pc, #172]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 8006222:	4313      	orrs	r3, r2
 8006224:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006226:	4b29      	ldr	r3, [pc, #164]	; (80062cc <HAL_RCC_ClockConfig+0x25c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d210      	bcs.n	8006256 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006234:	4b25      	ldr	r3, [pc, #148]	; (80062cc <HAL_RCC_ClockConfig+0x25c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f023 020f 	bic.w	r2, r3, #15
 800623c:	4923      	ldr	r1, [pc, #140]	; (80062cc <HAL_RCC_ClockConfig+0x25c>)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	4313      	orrs	r3, r2
 8006242:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006244:	4b21      	ldr	r3, [pc, #132]	; (80062cc <HAL_RCC_ClockConfig+0x25c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 030f 	and.w	r3, r3, #15
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d001      	beq.n	8006256 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e036      	b.n	80062c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b00      	cmp	r3, #0
 8006260:	d008      	beq.n	8006274 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006262:	4b1b      	ldr	r3, [pc, #108]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	4918      	ldr	r1, [pc, #96]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 8006270:	4313      	orrs	r3, r2
 8006272:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b00      	cmp	r3, #0
 800627e:	d009      	beq.n	8006294 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006280:	4b13      	ldr	r3, [pc, #76]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	4910      	ldr	r1, [pc, #64]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 8006290:	4313      	orrs	r3, r2
 8006292:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006294:	f000 f826 	bl	80062e4 <HAL_RCC_GetSysClockFreq>
 8006298:	4602      	mov	r2, r0
 800629a:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <HAL_RCC_ClockConfig+0x260>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	091b      	lsrs	r3, r3, #4
 80062a0:	f003 030f 	and.w	r3, r3, #15
 80062a4:	490c      	ldr	r1, [pc, #48]	; (80062d8 <HAL_RCC_ClockConfig+0x268>)
 80062a6:	5ccb      	ldrb	r3, [r1, r3]
 80062a8:	f003 031f 	and.w	r3, r3, #31
 80062ac:	fa22 f303 	lsr.w	r3, r2, r3
 80062b0:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <HAL_RCC_ClockConfig+0x26c>)
 80062b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80062b4:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <HAL_RCC_ClockConfig+0x270>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fc fd9b 	bl	8002df4 <HAL_InitTick>
 80062be:	4603      	mov	r3, r0
 80062c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	40022000 	.word	0x40022000
 80062d0:	40021000 	.word	0x40021000
 80062d4:	04c4b400 	.word	0x04c4b400
 80062d8:	0800c818 	.word	0x0800c818
 80062dc:	2000000c 	.word	0x2000000c
 80062e0:	20000010 	.word	0x20000010

080062e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b089      	sub	sp, #36	; 0x24
 80062e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	61fb      	str	r3, [r7, #28]
 80062ee:	2300      	movs	r3, #0
 80062f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062f2:	4b3e      	ldr	r3, [pc, #248]	; (80063ec <HAL_RCC_GetSysClockFreq+0x108>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 030c 	and.w	r3, r3, #12
 80062fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062fc:	4b3b      	ldr	r3, [pc, #236]	; (80063ec <HAL_RCC_GetSysClockFreq+0x108>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0303 	and.w	r3, r3, #3
 8006304:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d005      	beq.n	8006318 <HAL_RCC_GetSysClockFreq+0x34>
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	2b0c      	cmp	r3, #12
 8006310:	d121      	bne.n	8006356 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d11e      	bne.n	8006356 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006318:	4b34      	ldr	r3, [pc, #208]	; (80063ec <HAL_RCC_GetSysClockFreq+0x108>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b00      	cmp	r3, #0
 8006322:	d107      	bne.n	8006334 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006324:	4b31      	ldr	r3, [pc, #196]	; (80063ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800632a:	0a1b      	lsrs	r3, r3, #8
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	61fb      	str	r3, [r7, #28]
 8006332:	e005      	b.n	8006340 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006334:	4b2d      	ldr	r3, [pc, #180]	; (80063ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	091b      	lsrs	r3, r3, #4
 800633a:	f003 030f 	and.w	r3, r3, #15
 800633e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006340:	4a2b      	ldr	r2, [pc, #172]	; (80063f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006348:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10d      	bne.n	800636c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006354:	e00a      	b.n	800636c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b04      	cmp	r3, #4
 800635a:	d102      	bne.n	8006362 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800635c:	4b25      	ldr	r3, [pc, #148]	; (80063f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800635e:	61bb      	str	r3, [r7, #24]
 8006360:	e004      	b.n	800636c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d101      	bne.n	800636c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006368:	4b23      	ldr	r3, [pc, #140]	; (80063f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800636a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	2b0c      	cmp	r3, #12
 8006370:	d134      	bne.n	80063dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006372:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d003      	beq.n	800638a <HAL_RCC_GetSysClockFreq+0xa6>
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b03      	cmp	r3, #3
 8006386:	d003      	beq.n	8006390 <HAL_RCC_GetSysClockFreq+0xac>
 8006388:	e005      	b.n	8006396 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800638a:	4b1a      	ldr	r3, [pc, #104]	; (80063f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800638c:	617b      	str	r3, [r7, #20]
      break;
 800638e:	e005      	b.n	800639c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006390:	4b19      	ldr	r3, [pc, #100]	; (80063f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006392:	617b      	str	r3, [r7, #20]
      break;
 8006394:	e002      	b.n	800639c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	617b      	str	r3, [r7, #20]
      break;
 800639a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800639c:	4b13      	ldr	r3, [pc, #76]	; (80063ec <HAL_RCC_GetSysClockFreq+0x108>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	3301      	adds	r3, #1
 80063a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <HAL_RCC_GetSysClockFreq+0x108>)
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	0a1b      	lsrs	r3, r3, #8
 80063b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	fb03 f202 	mul.w	r2, r3, r2
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063c2:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <HAL_RCC_GetSysClockFreq+0x108>)
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	0e5b      	lsrs	r3, r3, #25
 80063c8:	f003 0303 	and.w	r3, r3, #3
 80063cc:	3301      	adds	r3, #1
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80063dc:	69bb      	ldr	r3, [r7, #24]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3724      	adds	r7, #36	; 0x24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40021000 	.word	0x40021000
 80063f0:	0800c830 	.word	0x0800c830
 80063f4:	00f42400 	.word	0x00f42400
 80063f8:	007a1200 	.word	0x007a1200

080063fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006400:	4b03      	ldr	r3, [pc, #12]	; (8006410 <HAL_RCC_GetHCLKFreq+0x14>)
 8006402:	681b      	ldr	r3, [r3, #0]
}
 8006404:	4618      	mov	r0, r3
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	2000000c 	.word	0x2000000c

08006414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006418:	f7ff fff0 	bl	80063fc <HAL_RCC_GetHCLKFreq>
 800641c:	4602      	mov	r2, r0
 800641e:	4b06      	ldr	r3, [pc, #24]	; (8006438 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	0a1b      	lsrs	r3, r3, #8
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	4904      	ldr	r1, [pc, #16]	; (800643c <HAL_RCC_GetPCLK1Freq+0x28>)
 800642a:	5ccb      	ldrb	r3, [r1, r3]
 800642c:	f003 031f 	and.w	r3, r3, #31
 8006430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006434:	4618      	mov	r0, r3
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40021000 	.word	0x40021000
 800643c:	0800c828 	.word	0x0800c828

08006440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006444:	f7ff ffda 	bl	80063fc <HAL_RCC_GetHCLKFreq>
 8006448:	4602      	mov	r2, r0
 800644a:	4b06      	ldr	r3, [pc, #24]	; (8006464 <HAL_RCC_GetPCLK2Freq+0x24>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	0adb      	lsrs	r3, r3, #11
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	4904      	ldr	r1, [pc, #16]	; (8006468 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006456:	5ccb      	ldrb	r3, [r1, r3]
 8006458:	f003 031f 	and.w	r3, r3, #31
 800645c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006460:	4618      	mov	r0, r3
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40021000 	.word	0x40021000
 8006468:	0800c828 	.word	0x0800c828

0800646c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006474:	2300      	movs	r3, #0
 8006476:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006478:	4b27      	ldr	r3, [pc, #156]	; (8006518 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800647a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006484:	f7ff f906 	bl	8005694 <HAL_PWREx_GetVoltageRange>
 8006488:	6178      	str	r0, [r7, #20]
 800648a:	e014      	b.n	80064b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800648c:	4b22      	ldr	r3, [pc, #136]	; (8006518 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800648e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006490:	4a21      	ldr	r2, [pc, #132]	; (8006518 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006496:	6593      	str	r3, [r2, #88]	; 0x58
 8006498:	4b1f      	ldr	r3, [pc, #124]	; (8006518 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800649a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80064a4:	f7ff f8f6 	bl	8005694 <HAL_PWREx_GetVoltageRange>
 80064a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80064aa:	4b1b      	ldr	r3, [pc, #108]	; (8006518 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80064ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ae:	4a1a      	ldr	r2, [pc, #104]	; (8006518 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80064b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064bc:	d10b      	bne.n	80064d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b80      	cmp	r3, #128	; 0x80
 80064c2:	d913      	bls.n	80064ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2ba0      	cmp	r3, #160	; 0xa0
 80064c8:	d902      	bls.n	80064d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80064ca:	2302      	movs	r3, #2
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	e00d      	b.n	80064ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80064d0:	2301      	movs	r3, #1
 80064d2:	613b      	str	r3, [r7, #16]
 80064d4:	e00a      	b.n	80064ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b7f      	cmp	r3, #127	; 0x7f
 80064da:	d902      	bls.n	80064e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80064dc:	2302      	movs	r3, #2
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	e004      	b.n	80064ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b70      	cmp	r3, #112	; 0x70
 80064e6:	d101      	bne.n	80064ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80064e8:	2301      	movs	r3, #1
 80064ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80064ec:	4b0b      	ldr	r3, [pc, #44]	; (800651c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f023 020f 	bic.w	r2, r3, #15
 80064f4:	4909      	ldr	r1, [pc, #36]	; (800651c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80064fc:	4b07      	ldr	r3, [pc, #28]	; (800651c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 030f 	and.w	r3, r3, #15
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	429a      	cmp	r2, r3
 8006508:	d001      	beq.n	800650e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	40021000 	.word	0x40021000
 800651c:	40022000 	.word	0x40022000

08006520 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006526:	4b2d      	ldr	r3, [pc, #180]	; (80065dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2b03      	cmp	r3, #3
 8006534:	d00b      	beq.n	800654e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b03      	cmp	r3, #3
 800653a:	d825      	bhi.n	8006588 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d008      	beq.n	8006554 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d11f      	bne.n	8006588 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006548:	4b25      	ldr	r3, [pc, #148]	; (80065e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800654a:	613b      	str	r3, [r7, #16]
    break;
 800654c:	e01f      	b.n	800658e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800654e:	4b25      	ldr	r3, [pc, #148]	; (80065e4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006550:	613b      	str	r3, [r7, #16]
    break;
 8006552:	e01c      	b.n	800658e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006554:	4b21      	ldr	r3, [pc, #132]	; (80065dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b00      	cmp	r3, #0
 800655e:	d107      	bne.n	8006570 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006560:	4b1e      	ldr	r3, [pc, #120]	; (80065dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006566:	0a1b      	lsrs	r3, r3, #8
 8006568:	f003 030f 	and.w	r3, r3, #15
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	e005      	b.n	800657c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006570:	4b1a      	ldr	r3, [pc, #104]	; (80065dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	091b      	lsrs	r3, r3, #4
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800657c:	4a1a      	ldr	r2, [pc, #104]	; (80065e8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006584:	613b      	str	r3, [r7, #16]
    break;
 8006586:	e002      	b.n	800658e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006588:	2300      	movs	r3, #0
 800658a:	613b      	str	r3, [r7, #16]
    break;
 800658c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800658e:	4b13      	ldr	r3, [pc, #76]	; (80065dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	091b      	lsrs	r3, r3, #4
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	3301      	adds	r3, #1
 800659a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800659c:	4b0f      	ldr	r3, [pc, #60]	; (80065dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	0a1b      	lsrs	r3, r3, #8
 80065a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	fb03 f202 	mul.w	r2, r3, r2
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065b4:	4b09      	ldr	r3, [pc, #36]	; (80065dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	0e5b      	lsrs	r3, r3, #25
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	3301      	adds	r3, #1
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065cc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80065ce:	683b      	ldr	r3, [r7, #0]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	40021000 	.word	0x40021000
 80065e0:	00f42400 	.word	0x00f42400
 80065e4:	007a1200 	.word	0x007a1200
 80065e8:	0800c830 	.word	0x0800c830

080065ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065f4:	2300      	movs	r3, #0
 80065f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065f8:	2300      	movs	r3, #0
 80065fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006604:	2b00      	cmp	r3, #0
 8006606:	d040      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660c:	2b80      	cmp	r3, #128	; 0x80
 800660e:	d02a      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006610:	2b80      	cmp	r3, #128	; 0x80
 8006612:	d825      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006614:	2b60      	cmp	r3, #96	; 0x60
 8006616:	d026      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006618:	2b60      	cmp	r3, #96	; 0x60
 800661a:	d821      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800661c:	2b40      	cmp	r3, #64	; 0x40
 800661e:	d006      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006620:	2b40      	cmp	r3, #64	; 0x40
 8006622:	d81d      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006624:	2b00      	cmp	r3, #0
 8006626:	d009      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006628:	2b20      	cmp	r3, #32
 800662a:	d010      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800662c:	e018      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800662e:	4b89      	ldr	r3, [pc, #548]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	4a88      	ldr	r2, [pc, #544]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006638:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800663a:	e015      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3304      	adds	r3, #4
 8006640:	2100      	movs	r1, #0
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fb02 	bl	8006c4c <RCCEx_PLLSAI1_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800664c:	e00c      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	3320      	adds	r3, #32
 8006652:	2100      	movs	r1, #0
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fbed 	bl	8006e34 <RCCEx_PLLSAI2_Config>
 800665a:	4603      	mov	r3, r0
 800665c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800665e:	e003      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	74fb      	strb	r3, [r7, #19]
      break;
 8006664:	e000      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006668:	7cfb      	ldrb	r3, [r7, #19]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10b      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800666e:	4b79      	ldr	r3, [pc, #484]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006670:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006674:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800667c:	4975      	ldr	r1, [pc, #468]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006684:	e001      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006686:	7cfb      	ldrb	r3, [r7, #19]
 8006688:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d047      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800669e:	d030      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80066a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a4:	d82a      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80066a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066aa:	d02a      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80066ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b0:	d824      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80066b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066b6:	d008      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 80066b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066bc:	d81e      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80066c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c6:	d010      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80066c8:	e018      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80066ca:	4b62      	ldr	r3, [pc, #392]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	4a61      	ldr	r2, [pc, #388]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066d4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80066d6:	e015      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3304      	adds	r3, #4
 80066dc:	2100      	movs	r1, #0
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fab4 	bl	8006c4c <RCCEx_PLLSAI1_Config>
 80066e4:	4603      	mov	r3, r0
 80066e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80066e8:	e00c      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3320      	adds	r3, #32
 80066ee:	2100      	movs	r1, #0
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fb9f 	bl	8006e34 <RCCEx_PLLSAI2_Config>
 80066f6:	4603      	mov	r3, r0
 80066f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80066fa:	e003      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	74fb      	strb	r3, [r7, #19]
      break;
 8006700:	e000      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006704:	7cfb      	ldrb	r3, [r7, #19]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10b      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800670a:	4b52      	ldr	r3, [pc, #328]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800670c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006718:	494e      	ldr	r1, [pc, #312]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006720:	e001      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006722:	7cfb      	ldrb	r3, [r7, #19]
 8006724:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 809f 	beq.w	8006872 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006734:	2300      	movs	r3, #0
 8006736:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006738:	4b46      	ldr	r3, [pc, #280]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800673a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006744:	2301      	movs	r3, #1
 8006746:	e000      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006748:	2300      	movs	r3, #0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00d      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800674e:	4b41      	ldr	r3, [pc, #260]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006752:	4a40      	ldr	r2, [pc, #256]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006758:	6593      	str	r3, [r2, #88]	; 0x58
 800675a:	4b3e      	ldr	r3, [pc, #248]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800675c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800675e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006762:	60bb      	str	r3, [r7, #8]
 8006764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006766:	2301      	movs	r3, #1
 8006768:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800676a:	4b3b      	ldr	r3, [pc, #236]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a3a      	ldr	r2, [pc, #232]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006774:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006776:	f7fc fb8d 	bl	8002e94 <HAL_GetTick>
 800677a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800677c:	e009      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800677e:	f7fc fb89 	bl	8002e94 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d902      	bls.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	74fb      	strb	r3, [r7, #19]
        break;
 8006790:	e005      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006792:	4b31      	ldr	r3, [pc, #196]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0ef      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800679e:	7cfb      	ldrb	r3, [r7, #19]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d15b      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80067a4:	4b2b      	ldr	r3, [pc, #172]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d01f      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d019      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80067c2:	4b24      	ldr	r3, [pc, #144]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067ce:	4b21      	ldr	r3, [pc, #132]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d4:	4a1f      	ldr	r2, [pc, #124]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067de:	4b1d      	ldr	r3, [pc, #116]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e4:	4a1b      	ldr	r2, [pc, #108]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80067ee:	4a19      	ldr	r2, [pc, #100]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d016      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006800:	f7fc fb48 	bl	8002e94 <HAL_GetTick>
 8006804:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006806:	e00b      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006808:	f7fc fb44 	bl	8002e94 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	f241 3288 	movw	r2, #5000	; 0x1388
 8006816:	4293      	cmp	r3, r2
 8006818:	d902      	bls.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	74fb      	strb	r3, [r7, #19]
            break;
 800681e:	e006      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006820:	4b0c      	ldr	r3, [pc, #48]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0ec      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800682e:	7cfb      	ldrb	r3, [r7, #19]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10c      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006834:	4b07      	ldr	r3, [pc, #28]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006844:	4903      	ldr	r1, [pc, #12]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800684c:	e008      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800684e:	7cfb      	ldrb	r3, [r7, #19]
 8006850:	74bb      	strb	r3, [r7, #18]
 8006852:	e005      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006854:	40021000 	.word	0x40021000
 8006858:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685c:	7cfb      	ldrb	r3, [r7, #19]
 800685e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006860:	7c7b      	ldrb	r3, [r7, #17]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d105      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006866:	4ba0      	ldr	r3, [pc, #640]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686a:	4a9f      	ldr	r2, [pc, #636]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800686c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006870:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800687e:	4b9a      	ldr	r3, [pc, #616]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006884:	f023 0203 	bic.w	r2, r3, #3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688c:	4996      	ldr	r1, [pc, #600]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800688e:	4313      	orrs	r3, r2
 8006890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068a0:	4b91      	ldr	r3, [pc, #580]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a6:	f023 020c 	bic.w	r2, r3, #12
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	498e      	ldr	r1, [pc, #568]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068c2:	4b89      	ldr	r3, [pc, #548]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d0:	4985      	ldr	r1, [pc, #532]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0308 	and.w	r3, r3, #8
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00a      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068e4:	4b80      	ldr	r3, [pc, #512]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f2:	497d      	ldr	r1, [pc, #500]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0310 	and.w	r3, r3, #16
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006906:	4b78      	ldr	r3, [pc, #480]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006914:	4974      	ldr	r1, [pc, #464]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006916:	4313      	orrs	r3, r2
 8006918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006928:	4b6f      	ldr	r3, [pc, #444]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800692a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006936:	496c      	ldr	r1, [pc, #432]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006938:	4313      	orrs	r3, r2
 800693a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800694a:	4b67      	ldr	r3, [pc, #412]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800694c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006950:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006958:	4963      	ldr	r1, [pc, #396]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800695a:	4313      	orrs	r3, r2
 800695c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800696c:	4b5e      	ldr	r3, [pc, #376]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800696e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006972:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800697a:	495b      	ldr	r1, [pc, #364]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800697c:	4313      	orrs	r3, r2
 800697e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800698e:	4b56      	ldr	r3, [pc, #344]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006994:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699c:	4952      	ldr	r1, [pc, #328]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069b0:	4b4d      	ldr	r3, [pc, #308]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069be:	494a      	ldr	r1, [pc, #296]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069d2:	4b45      	ldr	r3, [pc, #276]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e0:	4941      	ldr	r1, [pc, #260]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069f4:	4b3c      	ldr	r3, [pc, #240]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069fa:	f023 0203 	bic.w	r2, r3, #3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a02:	4939      	ldr	r1, [pc, #228]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d028      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a16:	4b34      	ldr	r3, [pc, #208]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a24:	4930      	ldr	r1, [pc, #192]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a34:	d106      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a36:	4b2c      	ldr	r3, [pc, #176]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	4a2b      	ldr	r2, [pc, #172]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a40:	60d3      	str	r3, [r2, #12]
 8006a42:	e011      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a4c:	d10c      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	3304      	adds	r3, #4
 8006a52:	2101      	movs	r1, #1
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 f8f9 	bl	8006c4c <RCCEx_PLLSAI1_Config>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006a5e:	7cfb      	ldrb	r3, [r7, #19]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006a64:	7cfb      	ldrb	r3, [r7, #19]
 8006a66:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d04d      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a7c:	d108      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006a7e:	4b1a      	ldr	r3, [pc, #104]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a84:	4a18      	ldr	r2, [pc, #96]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a8a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006a8e:	e012      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006a90:	4b15      	ldr	r3, [pc, #84]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a96:	4a14      	ldr	r2, [pc, #80]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a9c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006aa0:	4b11      	ldr	r3, [pc, #68]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aae:	490e      	ldr	r1, [pc, #56]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006abe:	d106      	bne.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ac0:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	4a08      	ldr	r2, [pc, #32]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aca:	60d3      	str	r3, [r2, #12]
 8006acc:	e020      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ad2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ad6:	d109      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006ad8:	4b03      	ldr	r3, [pc, #12]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	4a02      	ldr	r2, [pc, #8]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae2:	60d3      	str	r3, [r2, #12]
 8006ae4:	e014      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006ae6:	bf00      	nop
 8006ae8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006af0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006af4:	d10c      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3304      	adds	r3, #4
 8006afa:	2101      	movs	r1, #1
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 f8a5 	bl	8006c4c <RCCEx_PLLSAI1_Config>
 8006b02:	4603      	mov	r3, r0
 8006b04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b06:	7cfb      	ldrb	r3, [r7, #19]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006b0c:	7cfb      	ldrb	r3, [r7, #19]
 8006b0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d028      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b1c:	4b4a      	ldr	r3, [pc, #296]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b2a:	4947      	ldr	r1, [pc, #284]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b3a:	d106      	bne.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b3c:	4b42      	ldr	r3, [pc, #264]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	4a41      	ldr	r2, [pc, #260]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b46:	60d3      	str	r3, [r2, #12]
 8006b48:	e011      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b52:	d10c      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3304      	adds	r3, #4
 8006b58:	2101      	movs	r1, #1
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f876 	bl	8006c4c <RCCEx_PLLSAI1_Config>
 8006b60:	4603      	mov	r3, r0
 8006b62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b64:	7cfb      	ldrb	r3, [r7, #19]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006b6a:	7cfb      	ldrb	r3, [r7, #19]
 8006b6c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d01e      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b7a:	4b33      	ldr	r3, [pc, #204]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b8a:	492f      	ldr	r1, [pc, #188]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b9c:	d10c      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	2102      	movs	r1, #2
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 f851 	bl	8006c4c <RCCEx_PLLSAI1_Config>
 8006baa:	4603      	mov	r3, r0
 8006bac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bae:	7cfb      	ldrb	r3, [r7, #19]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006bb4:	7cfb      	ldrb	r3, [r7, #19]
 8006bb6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00b      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bc4:	4b20      	ldr	r3, [pc, #128]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bca:	f023 0204 	bic.w	r2, r3, #4
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bd4:	491c      	ldr	r1, [pc, #112]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00b      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006be8:	4b17      	ldr	r3, [pc, #92]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bee:	f023 0218 	bic.w	r2, r3, #24
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf8:	4913      	ldr	r1, [pc, #76]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d017      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006c0c:	4b0e      	ldr	r3, [pc, #56]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c1c:	490a      	ldr	r1, [pc, #40]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c2e:	d105      	bne.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c30:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	4a04      	ldr	r2, [pc, #16]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006c3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	40021000 	.word	0x40021000

08006c4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c5a:	4b72      	ldr	r3, [pc, #456]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f003 0303 	and.w	r3, r3, #3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00e      	beq.n	8006c84 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006c66:	4b6f      	ldr	r3, [pc, #444]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f003 0203 	and.w	r2, r3, #3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d103      	bne.n	8006c7e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
       ||
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d142      	bne.n	8006d04 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	73fb      	strb	r3, [r7, #15]
 8006c82:	e03f      	b.n	8006d04 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d018      	beq.n	8006cbe <RCCEx_PLLSAI1_Config+0x72>
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d825      	bhi.n	8006cdc <RCCEx_PLLSAI1_Config+0x90>
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d002      	beq.n	8006c9a <RCCEx_PLLSAI1_Config+0x4e>
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d009      	beq.n	8006cac <RCCEx_PLLSAI1_Config+0x60>
 8006c98:	e020      	b.n	8006cdc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c9a:	4b62      	ldr	r3, [pc, #392]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d11d      	bne.n	8006ce2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006caa:	e01a      	b.n	8006ce2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cac:	4b5d      	ldr	r3, [pc, #372]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d116      	bne.n	8006ce6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cbc:	e013      	b.n	8006ce6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006cbe:	4b59      	ldr	r3, [pc, #356]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10f      	bne.n	8006cea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006cca:	4b56      	ldr	r3, [pc, #344]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cda:	e006      	b.n	8006cea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce0:	e004      	b.n	8006cec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006ce2:	bf00      	nop
 8006ce4:	e002      	b.n	8006cec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006ce6:	bf00      	nop
 8006ce8:	e000      	b.n	8006cec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006cea:	bf00      	nop
    }

    if(status == HAL_OK)
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d108      	bne.n	8006d04 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006cf2:	4b4c      	ldr	r3, [pc, #304]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f023 0203 	bic.w	r2, r3, #3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4949      	ldr	r1, [pc, #292]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f040 8086 	bne.w	8006e18 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006d0c:	4b45      	ldr	r3, [pc, #276]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a44      	ldr	r2, [pc, #272]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d18:	f7fc f8bc 	bl	8002e94 <HAL_GetTick>
 8006d1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d1e:	e009      	b.n	8006d34 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d20:	f7fc f8b8 	bl	8002e94 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d902      	bls.n	8006d34 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	73fb      	strb	r3, [r7, #15]
        break;
 8006d32:	e005      	b.n	8006d40 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d34:	4b3b      	ldr	r3, [pc, #236]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1ef      	bne.n	8006d20 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d168      	bne.n	8006e18 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d113      	bne.n	8006d74 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d4c:	4b35      	ldr	r3, [pc, #212]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	4b35      	ldr	r3, [pc, #212]	; (8006e28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d52:	4013      	ands	r3, r2
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	6892      	ldr	r2, [r2, #8]
 8006d58:	0211      	lsls	r1, r2, #8
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	68d2      	ldr	r2, [r2, #12]
 8006d5e:	06d2      	lsls	r2, r2, #27
 8006d60:	4311      	orrs	r1, r2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6852      	ldr	r2, [r2, #4]
 8006d66:	3a01      	subs	r2, #1
 8006d68:	0112      	lsls	r2, r2, #4
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	492d      	ldr	r1, [pc, #180]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	610b      	str	r3, [r1, #16]
 8006d72:	e02d      	b.n	8006dd0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d115      	bne.n	8006da6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d7a:	4b2a      	ldr	r3, [pc, #168]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d7c:	691a      	ldr	r2, [r3, #16]
 8006d7e:	4b2b      	ldr	r3, [pc, #172]	; (8006e2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d80:	4013      	ands	r3, r2
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	6892      	ldr	r2, [r2, #8]
 8006d86:	0211      	lsls	r1, r2, #8
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	6912      	ldr	r2, [r2, #16]
 8006d8c:	0852      	lsrs	r2, r2, #1
 8006d8e:	3a01      	subs	r2, #1
 8006d90:	0552      	lsls	r2, r2, #21
 8006d92:	4311      	orrs	r1, r2
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6852      	ldr	r2, [r2, #4]
 8006d98:	3a01      	subs	r2, #1
 8006d9a:	0112      	lsls	r2, r2, #4
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	4921      	ldr	r1, [pc, #132]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	610b      	str	r3, [r1, #16]
 8006da4:	e014      	b.n	8006dd0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006da6:	4b1f      	ldr	r3, [pc, #124]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006da8:	691a      	ldr	r2, [r3, #16]
 8006daa:	4b21      	ldr	r3, [pc, #132]	; (8006e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6892      	ldr	r2, [r2, #8]
 8006db2:	0211      	lsls	r1, r2, #8
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6952      	ldr	r2, [r2, #20]
 8006db8:	0852      	lsrs	r2, r2, #1
 8006dba:	3a01      	subs	r2, #1
 8006dbc:	0652      	lsls	r2, r2, #25
 8006dbe:	4311      	orrs	r1, r2
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6852      	ldr	r2, [r2, #4]
 8006dc4:	3a01      	subs	r2, #1
 8006dc6:	0112      	lsls	r2, r2, #4
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	4916      	ldr	r1, [pc, #88]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006dd0:	4b14      	ldr	r3, [pc, #80]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a13      	ldr	r2, [pc, #76]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006dda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ddc:	f7fc f85a 	bl	8002e94 <HAL_GetTick>
 8006de0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006de2:	e009      	b.n	8006df8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006de4:	f7fc f856 	bl	8002e94 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d902      	bls.n	8006df8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	73fb      	strb	r3, [r7, #15]
          break;
 8006df6:	e005      	b.n	8006e04 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006df8:	4b0a      	ldr	r3, [pc, #40]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0ef      	beq.n	8006de4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006e0a:	4b06      	ldr	r3, [pc, #24]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e0c:	691a      	ldr	r2, [r3, #16]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	4904      	ldr	r1, [pc, #16]	; (8006e24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	40021000 	.word	0x40021000
 8006e28:	07ff800f 	.word	0x07ff800f
 8006e2c:	ff9f800f 	.word	0xff9f800f
 8006e30:	f9ff800f 	.word	0xf9ff800f

08006e34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006e42:	4b72      	ldr	r3, [pc, #456]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00e      	beq.n	8006e6c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006e4e:	4b6f      	ldr	r3, [pc, #444]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f003 0203 	and.w	r2, r3, #3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d103      	bne.n	8006e66 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
       ||
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d142      	bne.n	8006eec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	73fb      	strb	r3, [r7, #15]
 8006e6a:	e03f      	b.n	8006eec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d018      	beq.n	8006ea6 <RCCEx_PLLSAI2_Config+0x72>
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d825      	bhi.n	8006ec4 <RCCEx_PLLSAI2_Config+0x90>
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d002      	beq.n	8006e82 <RCCEx_PLLSAI2_Config+0x4e>
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d009      	beq.n	8006e94 <RCCEx_PLLSAI2_Config+0x60>
 8006e80:	e020      	b.n	8006ec4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006e82:	4b62      	ldr	r3, [pc, #392]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d11d      	bne.n	8006eca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e92:	e01a      	b.n	8006eca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006e94:	4b5d      	ldr	r3, [pc, #372]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d116      	bne.n	8006ece <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ea4:	e013      	b.n	8006ece <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ea6:	4b59      	ldr	r3, [pc, #356]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10f      	bne.n	8006ed2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006eb2:	4b56      	ldr	r3, [pc, #344]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d109      	bne.n	8006ed2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ec2:	e006      	b.n	8006ed2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec8:	e004      	b.n	8006ed4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006eca:	bf00      	nop
 8006ecc:	e002      	b.n	8006ed4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ece:	bf00      	nop
 8006ed0:	e000      	b.n	8006ed4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ed2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d108      	bne.n	8006eec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006eda:	4b4c      	ldr	r3, [pc, #304]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f023 0203 	bic.w	r2, r3, #3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4949      	ldr	r1, [pc, #292]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f040 8086 	bne.w	8007000 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006ef4:	4b45      	ldr	r3, [pc, #276]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a44      	ldr	r2, [pc, #272]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f00:	f7fb ffc8 	bl	8002e94 <HAL_GetTick>
 8006f04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f06:	e009      	b.n	8006f1c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f08:	f7fb ffc4 	bl	8002e94 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d902      	bls.n	8006f1c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	73fb      	strb	r3, [r7, #15]
        break;
 8006f1a:	e005      	b.n	8006f28 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f1c:	4b3b      	ldr	r3, [pc, #236]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1ef      	bne.n	8006f08 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d168      	bne.n	8007000 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d113      	bne.n	8006f5c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f34:	4b35      	ldr	r3, [pc, #212]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f36:	695a      	ldr	r2, [r3, #20]
 8006f38:	4b35      	ldr	r3, [pc, #212]	; (8007010 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	6892      	ldr	r2, [r2, #8]
 8006f40:	0211      	lsls	r1, r2, #8
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	68d2      	ldr	r2, [r2, #12]
 8006f46:	06d2      	lsls	r2, r2, #27
 8006f48:	4311      	orrs	r1, r2
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6852      	ldr	r2, [r2, #4]
 8006f4e:	3a01      	subs	r2, #1
 8006f50:	0112      	lsls	r2, r2, #4
 8006f52:	430a      	orrs	r2, r1
 8006f54:	492d      	ldr	r1, [pc, #180]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	614b      	str	r3, [r1, #20]
 8006f5a:	e02d      	b.n	8006fb8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d115      	bne.n	8006f8e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f62:	4b2a      	ldr	r3, [pc, #168]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f64:	695a      	ldr	r2, [r3, #20]
 8006f66:	4b2b      	ldr	r3, [pc, #172]	; (8007014 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6892      	ldr	r2, [r2, #8]
 8006f6e:	0211      	lsls	r1, r2, #8
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6912      	ldr	r2, [r2, #16]
 8006f74:	0852      	lsrs	r2, r2, #1
 8006f76:	3a01      	subs	r2, #1
 8006f78:	0552      	lsls	r2, r2, #21
 8006f7a:	4311      	orrs	r1, r2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6852      	ldr	r2, [r2, #4]
 8006f80:	3a01      	subs	r2, #1
 8006f82:	0112      	lsls	r2, r2, #4
 8006f84:	430a      	orrs	r2, r1
 8006f86:	4921      	ldr	r1, [pc, #132]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	614b      	str	r3, [r1, #20]
 8006f8c:	e014      	b.n	8006fb8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f8e:	4b1f      	ldr	r3, [pc, #124]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f90:	695a      	ldr	r2, [r3, #20]
 8006f92:	4b21      	ldr	r3, [pc, #132]	; (8007018 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006f94:	4013      	ands	r3, r2
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6892      	ldr	r2, [r2, #8]
 8006f9a:	0211      	lsls	r1, r2, #8
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	6952      	ldr	r2, [r2, #20]
 8006fa0:	0852      	lsrs	r2, r2, #1
 8006fa2:	3a01      	subs	r2, #1
 8006fa4:	0652      	lsls	r2, r2, #25
 8006fa6:	4311      	orrs	r1, r2
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6852      	ldr	r2, [r2, #4]
 8006fac:	3a01      	subs	r2, #1
 8006fae:	0112      	lsls	r2, r2, #4
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	4916      	ldr	r1, [pc, #88]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006fb8:	4b14      	ldr	r3, [pc, #80]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a13      	ldr	r2, [pc, #76]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc4:	f7fb ff66 	bl	8002e94 <HAL_GetTick>
 8006fc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006fca:	e009      	b.n	8006fe0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006fcc:	f7fb ff62 	bl	8002e94 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d902      	bls.n	8006fe0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	73fb      	strb	r3, [r7, #15]
          break;
 8006fde:	e005      	b.n	8006fec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006fe0:	4b0a      	ldr	r3, [pc, #40]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0ef      	beq.n	8006fcc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d106      	bne.n	8007000 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ff2:	4b06      	ldr	r3, [pc, #24]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ff4:	695a      	ldr	r2, [r3, #20]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	4904      	ldr	r1, [pc, #16]	; (800700c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007000:	7bfb      	ldrb	r3, [r7, #15]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	40021000 	.word	0x40021000
 8007010:	07ff800f 	.word	0x07ff800f
 8007014:	ff9f800f 	.word	0xff9f800f
 8007018:	f9ff800f 	.word	0xf9ff800f

0800701c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e095      	b.n	800715a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	2b00      	cmp	r3, #0
 8007034:	d108      	bne.n	8007048 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800703e:	d009      	beq.n	8007054 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	61da      	str	r2, [r3, #28]
 8007046:	e005      	b.n	8007054 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fb fb2c 	bl	80026cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800708a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007094:	d902      	bls.n	800709c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	e002      	b.n	80070a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800709c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80070aa:	d007      	beq.n	80070bc <HAL_SPI_Init+0xa0>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070b4:	d002      	beq.n	80070bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80070cc:	431a      	orrs	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	431a      	orrs	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070ea:	431a      	orrs	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070f4:	431a      	orrs	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	ea42 0103 	orr.w	r1, r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	0c1b      	lsrs	r3, r3, #16
 8007118:	f003 0204 	and.w	r2, r3, #4
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	f003 0310 	and.w	r3, r3, #16
 8007124:	431a      	orrs	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007138:	ea42 0103 	orr.w	r1, r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b088      	sub	sp, #32
 8007166:	af00      	add	r7, sp, #0
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	603b      	str	r3, [r7, #0]
 800716e:	4613      	mov	r3, r2
 8007170:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800717c:	2b01      	cmp	r3, #1
 800717e:	d101      	bne.n	8007184 <HAL_SPI_Transmit+0x22>
 8007180:	2302      	movs	r3, #2
 8007182:	e15f      	b.n	8007444 <HAL_SPI_Transmit+0x2e2>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800718c:	f7fb fe82 	bl	8002e94 <HAL_GetTick>
 8007190:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007192:	88fb      	ldrh	r3, [r7, #6]
 8007194:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d002      	beq.n	80071a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80071a2:	2302      	movs	r3, #2
 80071a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80071a6:	e148      	b.n	800743a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <HAL_SPI_Transmit+0x52>
 80071ae:	88fb      	ldrh	r3, [r7, #6]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d102      	bne.n	80071ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80071b8:	e13f      	b.n	800743a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2203      	movs	r2, #3
 80071be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	88fa      	ldrh	r2, [r7, #6]
 80071d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	88fa      	ldrh	r2, [r7, #6]
 80071d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007204:	d10f      	bne.n	8007226 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007214:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007224:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007230:	2b40      	cmp	r3, #64	; 0x40
 8007232:	d007      	beq.n	8007244 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007242:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800724c:	d94f      	bls.n	80072ee <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <HAL_SPI_Transmit+0xfa>
 8007256:	8afb      	ldrh	r3, [r7, #22]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d142      	bne.n	80072e2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	881a      	ldrh	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	1c9a      	adds	r2, r3, #2
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007276:	b29b      	uxth	r3, r3
 8007278:	3b01      	subs	r3, #1
 800727a:	b29a      	uxth	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007280:	e02f      	b.n	80072e2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b02      	cmp	r3, #2
 800728e:	d112      	bne.n	80072b6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007294:	881a      	ldrh	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	1c9a      	adds	r2, r3, #2
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	3b01      	subs	r3, #1
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072b4:	e015      	b.n	80072e2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072b6:	f7fb fded 	bl	8002e94 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d803      	bhi.n	80072ce <HAL_SPI_Transmit+0x16c>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072cc:	d102      	bne.n	80072d4 <HAL_SPI_Transmit+0x172>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d106      	bne.n	80072e2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80072e0:	e0ab      	b.n	800743a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1ca      	bne.n	8007282 <HAL_SPI_Transmit+0x120>
 80072ec:	e080      	b.n	80073f0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <HAL_SPI_Transmit+0x19a>
 80072f6:	8afb      	ldrh	r3, [r7, #22]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d174      	bne.n	80073e6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007300:	b29b      	uxth	r3, r3
 8007302:	2b01      	cmp	r3, #1
 8007304:	d912      	bls.n	800732c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	881a      	ldrh	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	1c9a      	adds	r2, r3, #2
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007320:	b29b      	uxth	r3, r3
 8007322:	3b02      	subs	r3, #2
 8007324:	b29a      	uxth	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	87da      	strh	r2, [r3, #62]	; 0x3e
 800732a:	e05c      	b.n	80073e6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	330c      	adds	r3, #12
 8007336:	7812      	ldrb	r2, [r2, #0]
 8007338:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	1c5a      	adds	r2, r3, #1
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007348:	b29b      	uxth	r3, r3
 800734a:	3b01      	subs	r3, #1
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007352:	e048      	b.n	80073e6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 0302 	and.w	r3, r3, #2
 800735e:	2b02      	cmp	r3, #2
 8007360:	d12b      	bne.n	80073ba <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b01      	cmp	r3, #1
 800736a:	d912      	bls.n	8007392 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007370:	881a      	ldrh	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737c:	1c9a      	adds	r2, r3, #2
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007386:	b29b      	uxth	r3, r3
 8007388:	3b02      	subs	r3, #2
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007390:	e029      	b.n	80073e6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	330c      	adds	r3, #12
 800739c:	7812      	ldrb	r2, [r2, #0]
 800739e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	3b01      	subs	r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073b8:	e015      	b.n	80073e6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073ba:	f7fb fd6b 	bl	8002e94 <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d803      	bhi.n	80073d2 <HAL_SPI_Transmit+0x270>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d0:	d102      	bne.n	80073d8 <HAL_SPI_Transmit+0x276>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d106      	bne.n	80073e6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80073e4:	e029      	b.n	800743a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1b1      	bne.n	8007354 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 fcf9 	bl	8007dec <SPI_EndRxTxTransaction>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2220      	movs	r2, #32
 8007404:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10a      	bne.n	8007424 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800740e:	2300      	movs	r3, #0
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	613b      	str	r3, [r7, #16]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	77fb      	strb	r3, [r7, #31]
 8007430:	e003      	b.n	800743a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007442:	7ffb      	ldrb	r3, [r7, #31]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3720      	adds	r7, #32
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b088      	sub	sp, #32
 8007450:	af02      	add	r7, sp, #8
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	603b      	str	r3, [r7, #0]
 8007458:	4613      	mov	r3, r2
 800745a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b01      	cmp	r3, #1
 800746a:	d002      	beq.n	8007472 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800746c:	2302      	movs	r3, #2
 800746e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007470:	e11a      	b.n	80076a8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800747a:	d112      	bne.n	80074a2 <HAL_SPI_Receive+0x56>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10e      	bne.n	80074a2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2204      	movs	r2, #4
 8007488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800748c:	88fa      	ldrh	r2, [r7, #6]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	4613      	mov	r3, r2
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f90e 	bl	80076ba <HAL_SPI_TransmitReceive>
 800749e:	4603      	mov	r3, r0
 80074a0:	e107      	b.n	80076b2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_SPI_Receive+0x64>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e100      	b.n	80076b2 <HAL_SPI_Receive+0x266>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074b8:	f7fb fcec 	bl	8002e94 <HAL_GetTick>
 80074bc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <HAL_SPI_Receive+0x7e>
 80074c4:	88fb      	ldrh	r3, [r7, #6]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d102      	bne.n	80074d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074ce:	e0eb      	b.n	80076a8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2204      	movs	r2, #4
 80074d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	88fa      	ldrh	r2, [r7, #6]
 80074e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800751a:	d908      	bls.n	800752e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800752a:	605a      	str	r2, [r3, #4]
 800752c:	e007      	b.n	800753e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800753c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007546:	d10f      	bne.n	8007568 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007556:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007566:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007572:	2b40      	cmp	r3, #64	; 0x40
 8007574:	d007      	beq.n	8007586 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007584:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800758e:	d86f      	bhi.n	8007670 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007590:	e034      	b.n	80075fc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b01      	cmp	r3, #1
 800759e:	d117      	bne.n	80075d0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f103 020c 	add.w	r2, r3, #12
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ac:	7812      	ldrb	r2, [r2, #0]
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80075ce:	e015      	b.n	80075fc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075d0:	f7fb fc60 	bl	8002e94 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d803      	bhi.n	80075e8 <HAL_SPI_Receive+0x19c>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e6:	d102      	bne.n	80075ee <HAL_SPI_Receive+0x1a2>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80075fa:	e055      	b.n	80076a8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1c4      	bne.n	8007592 <HAL_SPI_Receive+0x146>
 8007608:	e038      	b.n	800767c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b01      	cmp	r3, #1
 8007616:	d115      	bne.n	8007644 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	b292      	uxth	r2, r2
 8007624:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	1c9a      	adds	r2, r3, #2
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007636:	b29b      	uxth	r3, r3
 8007638:	3b01      	subs	r3, #1
 800763a:	b29a      	uxth	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007642:	e015      	b.n	8007670 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007644:	f7fb fc26 	bl	8002e94 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	429a      	cmp	r2, r3
 8007652:	d803      	bhi.n	800765c <HAL_SPI_Receive+0x210>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765a:	d102      	bne.n	8007662 <HAL_SPI_Receive+0x216>
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d106      	bne.n	8007670 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800766e:	e01b      	b.n	80076a8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007676:	b29b      	uxth	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1c6      	bne.n	800760a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fb5b 	bl	8007d3c <SPI_EndRxTransaction>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2220      	movs	r2, #32
 8007690:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	75fb      	strb	r3, [r7, #23]
 800769e:	e003      	b.n	80076a8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b08a      	sub	sp, #40	; 0x28
 80076be:	af00      	add	r7, sp, #0
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	607a      	str	r2, [r7, #4]
 80076c6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076c8:	2301      	movs	r3, #1
 80076ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d101      	bne.n	80076e0 <HAL_SPI_TransmitReceive+0x26>
 80076dc:	2302      	movs	r3, #2
 80076de:	e20a      	b.n	8007af6 <HAL_SPI_TransmitReceive+0x43c>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076e8:	f7fb fbd4 	bl	8002e94 <HAL_GetTick>
 80076ec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076f4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80076fc:	887b      	ldrh	r3, [r7, #2]
 80076fe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007700:	887b      	ldrh	r3, [r7, #2]
 8007702:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007704:	7efb      	ldrb	r3, [r7, #27]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d00e      	beq.n	8007728 <HAL_SPI_TransmitReceive+0x6e>
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007710:	d106      	bne.n	8007720 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <HAL_SPI_TransmitReceive+0x66>
 800771a:	7efb      	ldrb	r3, [r7, #27]
 800771c:	2b04      	cmp	r3, #4
 800771e:	d003      	beq.n	8007728 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007720:	2302      	movs	r3, #2
 8007722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007726:	e1e0      	b.n	8007aea <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d005      	beq.n	800773a <HAL_SPI_TransmitReceive+0x80>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <HAL_SPI_TransmitReceive+0x80>
 8007734:	887b      	ldrh	r3, [r7, #2]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d103      	bne.n	8007742 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007740:	e1d3      	b.n	8007aea <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b04      	cmp	r3, #4
 800774c:	d003      	beq.n	8007756 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2205      	movs	r2, #5
 8007752:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	887a      	ldrh	r2, [r7, #2]
 8007766:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	887a      	ldrh	r2, [r7, #2]
 800776e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	887a      	ldrh	r2, [r7, #2]
 800777c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	887a      	ldrh	r2, [r7, #2]
 8007782:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007798:	d802      	bhi.n	80077a0 <HAL_SPI_TransmitReceive+0xe6>
 800779a:	8a3b      	ldrh	r3, [r7, #16]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d908      	bls.n	80077b2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077ae:	605a      	str	r2, [r3, #4]
 80077b0:	e007      	b.n	80077c2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077c0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077cc:	2b40      	cmp	r3, #64	; 0x40
 80077ce:	d007      	beq.n	80077e0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077e8:	f240 8081 	bls.w	80078ee <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <HAL_SPI_TransmitReceive+0x140>
 80077f4:	8a7b      	ldrh	r3, [r7, #18]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d16d      	bne.n	80078d6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	881a      	ldrh	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780a:	1c9a      	adds	r2, r3, #2
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007814:	b29b      	uxth	r3, r3
 8007816:	3b01      	subs	r3, #1
 8007818:	b29a      	uxth	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800781e:	e05a      	b.n	80078d6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b02      	cmp	r3, #2
 800782c:	d11b      	bne.n	8007866 <HAL_SPI_TransmitReceive+0x1ac>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007832:	b29b      	uxth	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	d016      	beq.n	8007866 <HAL_SPI_TransmitReceive+0x1ac>
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	2b01      	cmp	r3, #1
 800783c:	d113      	bne.n	8007866 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007842:	881a      	ldrh	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784e:	1c9a      	adds	r2, r3, #2
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007862:	2300      	movs	r3, #0
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b01      	cmp	r3, #1
 8007872:	d11c      	bne.n	80078ae <HAL_SPI_TransmitReceive+0x1f4>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800787a:	b29b      	uxth	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d016      	beq.n	80078ae <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	b292      	uxth	r2, r2
 800788c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	1c9a      	adds	r2, r3, #2
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800789e:	b29b      	uxth	r3, r3
 80078a0:	3b01      	subs	r3, #1
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078aa:	2301      	movs	r3, #1
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078ae:	f7fb faf1 	bl	8002e94 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d80b      	bhi.n	80078d6 <HAL_SPI_TransmitReceive+0x21c>
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c4:	d007      	beq.n	80078d6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80078d4:	e109      	b.n	8007aea <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d19f      	bne.n	8007820 <HAL_SPI_TransmitReceive+0x166>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d199      	bne.n	8007820 <HAL_SPI_TransmitReceive+0x166>
 80078ec:	e0e3      	b.n	8007ab6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_SPI_TransmitReceive+0x244>
 80078f6:	8a7b      	ldrh	r3, [r7, #18]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	f040 80cf 	bne.w	8007a9c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007902:	b29b      	uxth	r3, r3
 8007904:	2b01      	cmp	r3, #1
 8007906:	d912      	bls.n	800792e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790c:	881a      	ldrh	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007918:	1c9a      	adds	r2, r3, #2
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007922:	b29b      	uxth	r3, r3
 8007924:	3b02      	subs	r3, #2
 8007926:	b29a      	uxth	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800792c:	e0b6      	b.n	8007a9c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	330c      	adds	r3, #12
 8007938:	7812      	ldrb	r2, [r2, #0]
 800793a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800794a:	b29b      	uxth	r3, r3
 800794c:	3b01      	subs	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007954:	e0a2      	b.n	8007a9c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	2b02      	cmp	r3, #2
 8007962:	d134      	bne.n	80079ce <HAL_SPI_TransmitReceive+0x314>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d02f      	beq.n	80079ce <HAL_SPI_TransmitReceive+0x314>
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	2b01      	cmp	r3, #1
 8007972:	d12c      	bne.n	80079ce <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007978:	b29b      	uxth	r3, r3
 800797a:	2b01      	cmp	r3, #1
 800797c:	d912      	bls.n	80079a4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007982:	881a      	ldrh	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798e:	1c9a      	adds	r2, r3, #2
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007998:	b29b      	uxth	r3, r3
 800799a:	3b02      	subs	r3, #2
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079a2:	e012      	b.n	80079ca <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	330c      	adds	r3, #12
 80079ae:	7812      	ldrb	r2, [r2, #0]
 80079b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	3b01      	subs	r3, #1
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d148      	bne.n	8007a6e <HAL_SPI_TransmitReceive+0x3b4>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d042      	beq.n	8007a6e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d923      	bls.n	8007a3c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	b292      	uxth	r2, r2
 8007a00:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a06:	1c9a      	adds	r2, r3, #2
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	3b02      	subs	r3, #2
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d81f      	bhi.n	8007a6a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a38:	605a      	str	r2, [r3, #4]
 8007a3a:	e016      	b.n	8007a6a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f103 020c 	add.w	r2, r3, #12
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a48:	7812      	ldrb	r2, [r2, #0]
 8007a4a:	b2d2      	uxtb	r2, r2
 8007a4c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	1c5a      	adds	r2, r3, #1
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	3b01      	subs	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a6e:	f7fb fa11 	bl	8002e94 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d803      	bhi.n	8007a86 <HAL_SPI_TransmitReceive+0x3cc>
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a84:	d102      	bne.n	8007a8c <HAL_SPI_TransmitReceive+0x3d2>
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d107      	bne.n	8007a9c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007a9a:	e026      	b.n	8007aea <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f47f af57 	bne.w	8007956 <HAL_SPI_TransmitReceive+0x29c>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f47f af50 	bne.w	8007956 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ab6:	69fa      	ldr	r2, [r7, #28]
 8007ab8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 f996 	bl	8007dec <SPI_EndRxTxTransaction>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d005      	beq.n	8007ad2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ae0:	e003      	b.n	8007aea <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007af2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3728      	adds	r7, #40	; 0x28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
	...

08007b00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	603b      	str	r3, [r7, #0]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b10:	f7fb f9c0 	bl	8002e94 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	1a9b      	subs	r3, r3, r2
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b20:	f7fb f9b8 	bl	8002e94 <HAL_GetTick>
 8007b24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b26:	4b39      	ldr	r3, [pc, #228]	; (8007c0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	015b      	lsls	r3, r3, #5
 8007b2c:	0d1b      	lsrs	r3, r3, #20
 8007b2e:	69fa      	ldr	r2, [r7, #28]
 8007b30:	fb02 f303 	mul.w	r3, r2, r3
 8007b34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b36:	e054      	b.n	8007be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3e:	d050      	beq.n	8007be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b40:	f7fb f9a8 	bl	8002e94 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	69fa      	ldr	r2, [r7, #28]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d902      	bls.n	8007b56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d13d      	bne.n	8007bd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b6e:	d111      	bne.n	8007b94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b78:	d004      	beq.n	8007b84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b82:	d107      	bne.n	8007b94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b9c:	d10f      	bne.n	8007bbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e017      	b.n	8007c02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4013      	ands	r3, r2
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	bf0c      	ite	eq
 8007bf2:	2301      	moveq	r3, #1
 8007bf4:	2300      	movne	r3, #0
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d19b      	bne.n	8007b38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3720      	adds	r7, #32
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	2000000c 	.word	0x2000000c

08007c10 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08a      	sub	sp, #40	; 0x28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007c22:	f7fb f937 	bl	8002e94 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2a:	1a9b      	subs	r3, r3, r2
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	4413      	add	r3, r2
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007c32:	f7fb f92f 	bl	8002e94 <HAL_GetTick>
 8007c36:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	330c      	adds	r3, #12
 8007c3e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c40:	4b3d      	ldr	r3, [pc, #244]	; (8007d38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	4613      	mov	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	00da      	lsls	r2, r3, #3
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	0d1b      	lsrs	r3, r3, #20
 8007c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c52:	fb02 f303 	mul.w	r3, r2, r3
 8007c56:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007c58:	e060      	b.n	8007d1c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007c60:	d107      	bne.n	8007c72 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d104      	bne.n	8007c72 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c78:	d050      	beq.n	8007d1c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c7a:	f7fb f90b 	bl	8002e94 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d902      	bls.n	8007c90 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d13d      	bne.n	8007d0c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ca8:	d111      	bne.n	8007cce <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb2:	d004      	beq.n	8007cbe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cbc:	d107      	bne.n	8007cce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ccc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd6:	d10f      	bne.n	8007cf8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cf6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e010      	b.n	8007d2e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689a      	ldr	r2, [r3, #8]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	4013      	ands	r3, r2
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d196      	bne.n	8007c5a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3728      	adds	r7, #40	; 0x28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	2000000c 	.word	0x2000000c

08007d3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d50:	d111      	bne.n	8007d76 <SPI_EndRxTransaction+0x3a>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d5a:	d004      	beq.n	8007d66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d64:	d107      	bne.n	8007d76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d74:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2180      	movs	r1, #128	; 0x80
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7ff febd 	bl	8007b00 <SPI_WaitFlagStateUntilTimeout>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d007      	beq.n	8007d9c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d90:	f043 0220 	orr.w	r2, r3, #32
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e023      	b.n	8007de4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007da4:	d11d      	bne.n	8007de2 <SPI_EndRxTransaction+0xa6>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dae:	d004      	beq.n	8007dba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db8:	d113      	bne.n	8007de2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f7ff ff22 	bl	8007c10 <SPI_WaitFifoStateUntilTimeout>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d007      	beq.n	8007de2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd6:	f043 0220 	orr.w	r2, r3, #32
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e000      	b.n	8007de4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af02      	add	r7, sp, #8
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f7ff ff03 	bl	8007c10 <SPI_WaitFifoStateUntilTimeout>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d007      	beq.n	8007e20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e14:	f043 0220 	orr.w	r2, r3, #32
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e027      	b.n	8007e70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2200      	movs	r2, #0
 8007e28:	2180      	movs	r1, #128	; 0x80
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f7ff fe68 	bl	8007b00 <SPI_WaitFlagStateUntilTimeout>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d007      	beq.n	8007e46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e3a:	f043 0220 	orr.w	r2, r3, #32
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e014      	b.n	8007e70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff fedc 	bl	8007c10 <SPI_WaitFifoStateUntilTimeout>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d007      	beq.n	8007e6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e62:	f043 0220 	orr.w	r2, r3, #32
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e000      	b.n	8007e70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e049      	b.n	8007f1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d106      	bne.n	8007ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7fa fc98 	bl	80027d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	f000 fce2 	bl	8008880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
	...

08007f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d001      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e04f      	b.n	8007fe0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f042 0201 	orr.w	r2, r2, #1
 8007f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a23      	ldr	r2, [pc, #140]	; (8007fec <HAL_TIM_Base_Start_IT+0xc4>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d01d      	beq.n	8007f9e <HAL_TIM_Base_Start_IT+0x76>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6a:	d018      	beq.n	8007f9e <HAL_TIM_Base_Start_IT+0x76>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a1f      	ldr	r2, [pc, #124]	; (8007ff0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d013      	beq.n	8007f9e <HAL_TIM_Base_Start_IT+0x76>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a1e      	ldr	r2, [pc, #120]	; (8007ff4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d00e      	beq.n	8007f9e <HAL_TIM_Base_Start_IT+0x76>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a1c      	ldr	r2, [pc, #112]	; (8007ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d009      	beq.n	8007f9e <HAL_TIM_Base_Start_IT+0x76>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a1b      	ldr	r2, [pc, #108]	; (8007ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d004      	beq.n	8007f9e <HAL_TIM_Base_Start_IT+0x76>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a19      	ldr	r2, [pc, #100]	; (8008000 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d115      	bne.n	8007fca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	4b17      	ldr	r3, [pc, #92]	; (8008004 <HAL_TIM_Base_Start_IT+0xdc>)
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b06      	cmp	r3, #6
 8007fae:	d015      	beq.n	8007fdc <HAL_TIM_Base_Start_IT+0xb4>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb6:	d011      	beq.n	8007fdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f042 0201 	orr.w	r2, r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fc8:	e008      	b.n	8007fdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f042 0201 	orr.w	r2, r2, #1
 8007fd8:	601a      	str	r2, [r3, #0]
 8007fda:	e000      	b.n	8007fde <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	40012c00 	.word	0x40012c00
 8007ff0:	40000400 	.word	0x40000400
 8007ff4:	40000800 	.word	0x40000800
 8007ff8:	40000c00 	.word	0x40000c00
 8007ffc:	40013400 	.word	0x40013400
 8008000:	40014000 	.word	0x40014000
 8008004:	00010007 	.word	0x00010007

08008008 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e049      	b.n	80080ae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d106      	bne.n	8008034 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f841 	bl	80080b6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3304      	adds	r3, #4
 8008044:	4619      	mov	r1, r3
 8008046:	4610      	mov	r0, r2
 8008048:	f000 fc1a 	bl	8008880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
	...

080080cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d104      	bne.n	80080ea <HAL_TIM_IC_Start_IT+0x1e>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	e023      	b.n	8008132 <HAL_TIM_IC_Start_IT+0x66>
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b04      	cmp	r3, #4
 80080ee:	d104      	bne.n	80080fa <HAL_TIM_IC_Start_IT+0x2e>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	e01b      	b.n	8008132 <HAL_TIM_IC_Start_IT+0x66>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b08      	cmp	r3, #8
 80080fe:	d104      	bne.n	800810a <HAL_TIM_IC_Start_IT+0x3e>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008106:	b2db      	uxtb	r3, r3
 8008108:	e013      	b.n	8008132 <HAL_TIM_IC_Start_IT+0x66>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b0c      	cmp	r3, #12
 800810e:	d104      	bne.n	800811a <HAL_TIM_IC_Start_IT+0x4e>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008116:	b2db      	uxtb	r3, r3
 8008118:	e00b      	b.n	8008132 <HAL_TIM_IC_Start_IT+0x66>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b10      	cmp	r3, #16
 800811e:	d104      	bne.n	800812a <HAL_TIM_IC_Start_IT+0x5e>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008126:	b2db      	uxtb	r3, r3
 8008128:	e003      	b.n	8008132 <HAL_TIM_IC_Start_IT+0x66>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008130:	b2db      	uxtb	r3, r3
 8008132:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d104      	bne.n	8008144 <HAL_TIM_IC_Start_IT+0x78>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008140:	b2db      	uxtb	r3, r3
 8008142:	e013      	b.n	800816c <HAL_TIM_IC_Start_IT+0xa0>
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2b04      	cmp	r3, #4
 8008148:	d104      	bne.n	8008154 <HAL_TIM_IC_Start_IT+0x88>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008150:	b2db      	uxtb	r3, r3
 8008152:	e00b      	b.n	800816c <HAL_TIM_IC_Start_IT+0xa0>
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2b08      	cmp	r3, #8
 8008158:	d104      	bne.n	8008164 <HAL_TIM_IC_Start_IT+0x98>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008160:	b2db      	uxtb	r3, r3
 8008162:	e003      	b.n	800816c <HAL_TIM_IC_Start_IT+0xa0>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800816a:	b2db      	uxtb	r3, r3
 800816c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800816e:	7bbb      	ldrb	r3, [r7, #14]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d102      	bne.n	800817a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008174:	7b7b      	ldrb	r3, [r7, #13]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d001      	beq.n	800817e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e0dd      	b.n	800833a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d104      	bne.n	800818e <HAL_TIM_IC_Start_IT+0xc2>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2202      	movs	r2, #2
 8008188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800818c:	e023      	b.n	80081d6 <HAL_TIM_IC_Start_IT+0x10a>
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b04      	cmp	r3, #4
 8008192:	d104      	bne.n	800819e <HAL_TIM_IC_Start_IT+0xd2>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2202      	movs	r2, #2
 8008198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800819c:	e01b      	b.n	80081d6 <HAL_TIM_IC_Start_IT+0x10a>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b08      	cmp	r3, #8
 80081a2:	d104      	bne.n	80081ae <HAL_TIM_IC_Start_IT+0xe2>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081ac:	e013      	b.n	80081d6 <HAL_TIM_IC_Start_IT+0x10a>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b0c      	cmp	r3, #12
 80081b2:	d104      	bne.n	80081be <HAL_TIM_IC_Start_IT+0xf2>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081bc:	e00b      	b.n	80081d6 <HAL_TIM_IC_Start_IT+0x10a>
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	2b10      	cmp	r3, #16
 80081c2:	d104      	bne.n	80081ce <HAL_TIM_IC_Start_IT+0x102>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2202      	movs	r2, #2
 80081c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081cc:	e003      	b.n	80081d6 <HAL_TIM_IC_Start_IT+0x10a>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2202      	movs	r2, #2
 80081d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d104      	bne.n	80081e6 <HAL_TIM_IC_Start_IT+0x11a>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081e4:	e013      	b.n	800820e <HAL_TIM_IC_Start_IT+0x142>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2b04      	cmp	r3, #4
 80081ea:	d104      	bne.n	80081f6 <HAL_TIM_IC_Start_IT+0x12a>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081f4:	e00b      	b.n	800820e <HAL_TIM_IC_Start_IT+0x142>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b08      	cmp	r3, #8
 80081fa:	d104      	bne.n	8008206 <HAL_TIM_IC_Start_IT+0x13a>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008204:	e003      	b.n	800820e <HAL_TIM_IC_Start_IT+0x142>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2202      	movs	r2, #2
 800820a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b0c      	cmp	r3, #12
 8008212:	d841      	bhi.n	8008298 <HAL_TIM_IC_Start_IT+0x1cc>
 8008214:	a201      	add	r2, pc, #4	; (adr r2, 800821c <HAL_TIM_IC_Start_IT+0x150>)
 8008216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821a:	bf00      	nop
 800821c:	08008251 	.word	0x08008251
 8008220:	08008299 	.word	0x08008299
 8008224:	08008299 	.word	0x08008299
 8008228:	08008299 	.word	0x08008299
 800822c:	08008263 	.word	0x08008263
 8008230:	08008299 	.word	0x08008299
 8008234:	08008299 	.word	0x08008299
 8008238:	08008299 	.word	0x08008299
 800823c:	08008275 	.word	0x08008275
 8008240:	08008299 	.word	0x08008299
 8008244:	08008299 	.word	0x08008299
 8008248:	08008299 	.word	0x08008299
 800824c:	08008287 	.word	0x08008287
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68da      	ldr	r2, [r3, #12]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0202 	orr.w	r2, r2, #2
 800825e:	60da      	str	r2, [r3, #12]
      break;
 8008260:	e01d      	b.n	800829e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f042 0204 	orr.w	r2, r2, #4
 8008270:	60da      	str	r2, [r3, #12]
      break;
 8008272:	e014      	b.n	800829e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f042 0208 	orr.w	r2, r2, #8
 8008282:	60da      	str	r2, [r3, #12]
      break;
 8008284:	e00b      	b.n	800829e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f042 0210 	orr.w	r2, r2, #16
 8008294:	60da      	str	r2, [r3, #12]
      break;
 8008296:	e002      	b.n	800829e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	73fb      	strb	r3, [r7, #15]
      break;
 800829c:	bf00      	nop
  }

  if (status == HAL_OK)
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d149      	bne.n	8008338 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2201      	movs	r2, #1
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 fd3f 	bl	8008d30 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a23      	ldr	r2, [pc, #140]	; (8008344 <HAL_TIM_IC_Start_IT+0x278>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d01d      	beq.n	80082f8 <HAL_TIM_IC_Start_IT+0x22c>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082c4:	d018      	beq.n	80082f8 <HAL_TIM_IC_Start_IT+0x22c>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a1f      	ldr	r2, [pc, #124]	; (8008348 <HAL_TIM_IC_Start_IT+0x27c>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d013      	beq.n	80082f8 <HAL_TIM_IC_Start_IT+0x22c>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a1d      	ldr	r2, [pc, #116]	; (800834c <HAL_TIM_IC_Start_IT+0x280>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d00e      	beq.n	80082f8 <HAL_TIM_IC_Start_IT+0x22c>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a1c      	ldr	r2, [pc, #112]	; (8008350 <HAL_TIM_IC_Start_IT+0x284>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d009      	beq.n	80082f8 <HAL_TIM_IC_Start_IT+0x22c>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a1a      	ldr	r2, [pc, #104]	; (8008354 <HAL_TIM_IC_Start_IT+0x288>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d004      	beq.n	80082f8 <HAL_TIM_IC_Start_IT+0x22c>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a19      	ldr	r2, [pc, #100]	; (8008358 <HAL_TIM_IC_Start_IT+0x28c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d115      	bne.n	8008324 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689a      	ldr	r2, [r3, #8]
 80082fe:	4b17      	ldr	r3, [pc, #92]	; (800835c <HAL_TIM_IC_Start_IT+0x290>)
 8008300:	4013      	ands	r3, r2
 8008302:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2b06      	cmp	r3, #6
 8008308:	d015      	beq.n	8008336 <HAL_TIM_IC_Start_IT+0x26a>
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008310:	d011      	beq.n	8008336 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f042 0201 	orr.w	r2, r2, #1
 8008320:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008322:	e008      	b.n	8008336 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f042 0201 	orr.w	r2, r2, #1
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	e000      	b.n	8008338 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008336:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008338:	7bfb      	ldrb	r3, [r7, #15]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	40012c00 	.word	0x40012c00
 8008348:	40000400 	.word	0x40000400
 800834c:	40000800 	.word	0x40000800
 8008350:	40000c00 	.word	0x40000c00
 8008354:	40013400 	.word	0x40013400
 8008358:	40014000 	.word	0x40014000
 800835c:	00010007 	.word	0x00010007

08008360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d020      	beq.n	80083c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d01b      	beq.n	80083c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f06f 0202 	mvn.w	r2, #2
 8008394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	f003 0303 	and.w	r3, r3, #3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa49 	bl	8008842 <HAL_TIM_IC_CaptureCallback>
 80083b0:	e005      	b.n	80083be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fa3b 	bl	800882e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fa4c 	bl	8008856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f003 0304 	and.w	r3, r3, #4
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d020      	beq.n	8008410 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f003 0304 	and.w	r3, r3, #4
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d01b      	beq.n	8008410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f06f 0204 	mvn.w	r2, #4
 80083e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2202      	movs	r2, #2
 80083e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fa23 	bl	8008842 <HAL_TIM_IC_CaptureCallback>
 80083fc:	e005      	b.n	800840a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fa15 	bl	800882e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fa26 	bl	8008856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f003 0308 	and.w	r3, r3, #8
 8008416:	2b00      	cmp	r3, #0
 8008418:	d020      	beq.n	800845c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f003 0308 	and.w	r3, r3, #8
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01b      	beq.n	800845c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f06f 0208 	mvn.w	r2, #8
 800842c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2204      	movs	r2, #4
 8008432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	f003 0303 	and.w	r3, r3, #3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f9fd 	bl	8008842 <HAL_TIM_IC_CaptureCallback>
 8008448:	e005      	b.n	8008456 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f9ef 	bl	800882e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fa00 	bl	8008856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	f003 0310 	and.w	r3, r3, #16
 8008462:	2b00      	cmp	r3, #0
 8008464:	d020      	beq.n	80084a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f003 0310 	and.w	r3, r3, #16
 800846c:	2b00      	cmp	r3, #0
 800846e:	d01b      	beq.n	80084a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f06f 0210 	mvn.w	r2, #16
 8008478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2208      	movs	r2, #8
 800847e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f9d7 	bl	8008842 <HAL_TIM_IC_CaptureCallback>
 8008494:	e005      	b.n	80084a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f9c9 	bl	800882e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f9da 	bl	8008856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00c      	beq.n	80084cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d007      	beq.n	80084cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f06f 0201 	mvn.w	r2, #1
 80084c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7fa fae4 	bl	8002a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00c      	beq.n	80084f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d007      	beq.n	80084f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fcd8 	bl	8008ea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00c      	beq.n	8008514 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008500:	2b00      	cmp	r3, #0
 8008502:	d007      	beq.n	8008514 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800850c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fcd0 	bl	8008eb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00c      	beq.n	8008538 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008524:	2b00      	cmp	r3, #0
 8008526:	d007      	beq.n	8008538 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f999 	bl	800886a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f003 0320 	and.w	r3, r3, #32
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00c      	beq.n	800855c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f003 0320 	and.w	r3, r3, #32
 8008548:	2b00      	cmp	r3, #0
 800854a:	d007      	beq.n	800855c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f06f 0220 	mvn.w	r2, #32
 8008554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fc98 	bl	8008e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800855c:	bf00      	nop
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800857a:	2b01      	cmp	r3, #1
 800857c:	d101      	bne.n	8008582 <HAL_TIM_IC_ConfigChannel+0x1e>
 800857e:	2302      	movs	r3, #2
 8008580:	e088      	b.n	8008694 <HAL_TIM_IC_ConfigChannel+0x130>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d11b      	bne.n	80085c8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80085a0:	f000 fa08 	bl	80089b4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	699a      	ldr	r2, [r3, #24]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 020c 	bic.w	r2, r2, #12
 80085b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6999      	ldr	r1, [r3, #24]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	689a      	ldr	r2, [r3, #8]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	619a      	str	r2, [r3, #24]
 80085c6:	e060      	b.n	800868a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	d11c      	bne.n	8008608 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80085de:	f000 fa86 	bl	8008aee <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	699a      	ldr	r2, [r3, #24]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80085f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6999      	ldr	r1, [r3, #24]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	021a      	lsls	r2, r3, #8
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	619a      	str	r2, [r3, #24]
 8008606:	e040      	b.n	800868a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b08      	cmp	r3, #8
 800860c:	d11b      	bne.n	8008646 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800861e:	f000 fad3 	bl	8008bc8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69da      	ldr	r2, [r3, #28]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 020c 	bic.w	r2, r2, #12
 8008630:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69d9      	ldr	r1, [r3, #28]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	61da      	str	r2, [r3, #28]
 8008644:	e021      	b.n	800868a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b0c      	cmp	r3, #12
 800864a:	d11c      	bne.n	8008686 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800865c:	f000 faf0 	bl	8008c40 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	69da      	ldr	r2, [r3, #28]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800866e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	69d9      	ldr	r1, [r3, #28]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	021a      	lsls	r2, r3, #8
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	430a      	orrs	r2, r1
 8008682:	61da      	str	r2, [r3, #28]
 8008684:	e001      	b.n	800868a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008692:	7dfb      	ldrb	r3, [r7, #23]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3718      	adds	r7, #24
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d101      	bne.n	80086b8 <HAL_TIM_ConfigClockSource+0x1c>
 80086b4:	2302      	movs	r3, #2
 80086b6:	e0b6      	b.n	8008826 <HAL_TIM_ConfigClockSource+0x18a>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2202      	movs	r2, #2
 80086c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80086da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086f4:	d03e      	beq.n	8008774 <HAL_TIM_ConfigClockSource+0xd8>
 80086f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086fa:	f200 8087 	bhi.w	800880c <HAL_TIM_ConfigClockSource+0x170>
 80086fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008702:	f000 8086 	beq.w	8008812 <HAL_TIM_ConfigClockSource+0x176>
 8008706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800870a:	d87f      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x170>
 800870c:	2b70      	cmp	r3, #112	; 0x70
 800870e:	d01a      	beq.n	8008746 <HAL_TIM_ConfigClockSource+0xaa>
 8008710:	2b70      	cmp	r3, #112	; 0x70
 8008712:	d87b      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x170>
 8008714:	2b60      	cmp	r3, #96	; 0x60
 8008716:	d050      	beq.n	80087ba <HAL_TIM_ConfigClockSource+0x11e>
 8008718:	2b60      	cmp	r3, #96	; 0x60
 800871a:	d877      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x170>
 800871c:	2b50      	cmp	r3, #80	; 0x50
 800871e:	d03c      	beq.n	800879a <HAL_TIM_ConfigClockSource+0xfe>
 8008720:	2b50      	cmp	r3, #80	; 0x50
 8008722:	d873      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x170>
 8008724:	2b40      	cmp	r3, #64	; 0x40
 8008726:	d058      	beq.n	80087da <HAL_TIM_ConfigClockSource+0x13e>
 8008728:	2b40      	cmp	r3, #64	; 0x40
 800872a:	d86f      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x170>
 800872c:	2b30      	cmp	r3, #48	; 0x30
 800872e:	d064      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x15e>
 8008730:	2b30      	cmp	r3, #48	; 0x30
 8008732:	d86b      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x170>
 8008734:	2b20      	cmp	r3, #32
 8008736:	d060      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x15e>
 8008738:	2b20      	cmp	r3, #32
 800873a:	d867      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x170>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d05c      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x15e>
 8008740:	2b10      	cmp	r3, #16
 8008742:	d05a      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x15e>
 8008744:	e062      	b.n	800880c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008756:	f000 facb 	bl	8008cf0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008768:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	609a      	str	r2, [r3, #8]
      break;
 8008772:	e04f      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008784:	f000 fab4 	bl	8008cf0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689a      	ldr	r2, [r3, #8]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008796:	609a      	str	r2, [r3, #8]
      break;
 8008798:	e03c      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087a6:	461a      	mov	r2, r3
 80087a8:	f000 f972 	bl	8008a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2150      	movs	r1, #80	; 0x50
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 fa81 	bl	8008cba <TIM_ITRx_SetConfig>
      break;
 80087b8:	e02c      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087c6:	461a      	mov	r2, r3
 80087c8:	f000 f9ce 	bl	8008b68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2160      	movs	r1, #96	; 0x60
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fa71 	bl	8008cba <TIM_ITRx_SetConfig>
      break;
 80087d8:	e01c      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087e6:	461a      	mov	r2, r3
 80087e8:	f000 f952 	bl	8008a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2140      	movs	r1, #64	; 0x40
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 fa61 	bl	8008cba <TIM_ITRx_SetConfig>
      break;
 80087f8:	e00c      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4619      	mov	r1, r3
 8008804:	4610      	mov	r0, r2
 8008806:	f000 fa58 	bl	8008cba <TIM_ITRx_SetConfig>
      break;
 800880a:	e003      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	73fb      	strb	r3, [r7, #15]
      break;
 8008810:	e000      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008812:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008824:	7bfb      	ldrb	r3, [r7, #15]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800882e:	b480      	push	{r7}
 8008830:	b083      	sub	sp, #12
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008836:	bf00      	nop
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008842:	b480      	push	{r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800884a:	bf00      	nop
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800885e:	bf00      	nop
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
	...

08008880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a40      	ldr	r2, [pc, #256]	; (8008994 <TIM_Base_SetConfig+0x114>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d013      	beq.n	80088c0 <TIM_Base_SetConfig+0x40>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889e:	d00f      	beq.n	80088c0 <TIM_Base_SetConfig+0x40>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a3d      	ldr	r2, [pc, #244]	; (8008998 <TIM_Base_SetConfig+0x118>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d00b      	beq.n	80088c0 <TIM_Base_SetConfig+0x40>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a3c      	ldr	r2, [pc, #240]	; (800899c <TIM_Base_SetConfig+0x11c>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d007      	beq.n	80088c0 <TIM_Base_SetConfig+0x40>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a3b      	ldr	r2, [pc, #236]	; (80089a0 <TIM_Base_SetConfig+0x120>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d003      	beq.n	80088c0 <TIM_Base_SetConfig+0x40>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a3a      	ldr	r2, [pc, #232]	; (80089a4 <TIM_Base_SetConfig+0x124>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d108      	bne.n	80088d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a2f      	ldr	r2, [pc, #188]	; (8008994 <TIM_Base_SetConfig+0x114>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d01f      	beq.n	800891a <TIM_Base_SetConfig+0x9a>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088e0:	d01b      	beq.n	800891a <TIM_Base_SetConfig+0x9a>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a2c      	ldr	r2, [pc, #176]	; (8008998 <TIM_Base_SetConfig+0x118>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d017      	beq.n	800891a <TIM_Base_SetConfig+0x9a>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a2b      	ldr	r2, [pc, #172]	; (800899c <TIM_Base_SetConfig+0x11c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d013      	beq.n	800891a <TIM_Base_SetConfig+0x9a>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a2a      	ldr	r2, [pc, #168]	; (80089a0 <TIM_Base_SetConfig+0x120>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d00f      	beq.n	800891a <TIM_Base_SetConfig+0x9a>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a29      	ldr	r2, [pc, #164]	; (80089a4 <TIM_Base_SetConfig+0x124>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d00b      	beq.n	800891a <TIM_Base_SetConfig+0x9a>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a28      	ldr	r2, [pc, #160]	; (80089a8 <TIM_Base_SetConfig+0x128>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d007      	beq.n	800891a <TIM_Base_SetConfig+0x9a>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a27      	ldr	r2, [pc, #156]	; (80089ac <TIM_Base_SetConfig+0x12c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d003      	beq.n	800891a <TIM_Base_SetConfig+0x9a>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a26      	ldr	r2, [pc, #152]	; (80089b0 <TIM_Base_SetConfig+0x130>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d108      	bne.n	800892c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	4313      	orrs	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	689a      	ldr	r2, [r3, #8]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a10      	ldr	r2, [pc, #64]	; (8008994 <TIM_Base_SetConfig+0x114>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d00f      	beq.n	8008978 <TIM_Base_SetConfig+0xf8>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a12      	ldr	r2, [pc, #72]	; (80089a4 <TIM_Base_SetConfig+0x124>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d00b      	beq.n	8008978 <TIM_Base_SetConfig+0xf8>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a11      	ldr	r2, [pc, #68]	; (80089a8 <TIM_Base_SetConfig+0x128>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d007      	beq.n	8008978 <TIM_Base_SetConfig+0xf8>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a10      	ldr	r2, [pc, #64]	; (80089ac <TIM_Base_SetConfig+0x12c>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d003      	beq.n	8008978 <TIM_Base_SetConfig+0xf8>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a0f      	ldr	r2, [pc, #60]	; (80089b0 <TIM_Base_SetConfig+0x130>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d103      	bne.n	8008980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	691a      	ldr	r2, [r3, #16]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	615a      	str	r2, [r3, #20]
}
 8008986:	bf00      	nop
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	40012c00 	.word	0x40012c00
 8008998:	40000400 	.word	0x40000400
 800899c:	40000800 	.word	0x40000800
 80089a0:	40000c00 	.word	0x40000c00
 80089a4:	40013400 	.word	0x40013400
 80089a8:	40014000 	.word	0x40014000
 80089ac:	40014400 	.word	0x40014400
 80089b0:	40014800 	.word	0x40014800

080089b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	f023 0201 	bic.w	r2, r3, #1
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	4a26      	ldr	r2, [pc, #152]	; (8008a78 <TIM_TI1_SetConfig+0xc4>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d017      	beq.n	8008a12 <TIM_TI1_SetConfig+0x5e>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e8:	d013      	beq.n	8008a12 <TIM_TI1_SetConfig+0x5e>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	4a23      	ldr	r2, [pc, #140]	; (8008a7c <TIM_TI1_SetConfig+0xc8>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d00f      	beq.n	8008a12 <TIM_TI1_SetConfig+0x5e>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	4a22      	ldr	r2, [pc, #136]	; (8008a80 <TIM_TI1_SetConfig+0xcc>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d00b      	beq.n	8008a12 <TIM_TI1_SetConfig+0x5e>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	4a21      	ldr	r2, [pc, #132]	; (8008a84 <TIM_TI1_SetConfig+0xd0>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d007      	beq.n	8008a12 <TIM_TI1_SetConfig+0x5e>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	4a20      	ldr	r2, [pc, #128]	; (8008a88 <TIM_TI1_SetConfig+0xd4>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d003      	beq.n	8008a12 <TIM_TI1_SetConfig+0x5e>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4a1f      	ldr	r2, [pc, #124]	; (8008a8c <TIM_TI1_SetConfig+0xd8>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d101      	bne.n	8008a16 <TIM_TI1_SetConfig+0x62>
 8008a12:	2301      	movs	r3, #1
 8008a14:	e000      	b.n	8008a18 <TIM_TI1_SetConfig+0x64>
 8008a16:	2300      	movs	r3, #0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d008      	beq.n	8008a2e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f023 0303 	bic.w	r3, r3, #3
 8008a22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]
 8008a2c:	e003      	b.n	8008a36 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f043 0301 	orr.w	r3, r3, #1
 8008a34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	011b      	lsls	r3, r3, #4
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	f023 030a 	bic.w	r3, r3, #10
 8008a50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	f003 030a 	and.w	r3, r3, #10
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	621a      	str	r2, [r3, #32]
}
 8008a6a:	bf00      	nop
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	40012c00 	.word	0x40012c00
 8008a7c:	40000400 	.word	0x40000400
 8008a80:	40000800 	.word	0x40000800
 8008a84:	40000c00 	.word	0x40000c00
 8008a88:	40013400 	.word	0x40013400
 8008a8c:	40014000 	.word	0x40014000

08008a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b087      	sub	sp, #28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	f023 0201 	bic.w	r2, r3, #1
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	011b      	lsls	r3, r3, #4
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f023 030a 	bic.w	r3, r3, #10
 8008acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	621a      	str	r2, [r3, #32]
}
 8008ae2:	bf00      	nop
 8008ae4:	371c      	adds	r7, #28
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008aee:	b480      	push	{r7}
 8008af0:	b087      	sub	sp, #28
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	607a      	str	r2, [r7, #4]
 8008afa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	f023 0210 	bic.w	r2, r3, #16
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	021b      	lsls	r3, r3, #8
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	031b      	lsls	r3, r3, #12
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b40:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	011b      	lsls	r3, r3, #4
 8008b46:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008b4a:	697a      	ldr	r2, [r7, #20]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	693a      	ldr	r2, [r7, #16]
 8008b54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	621a      	str	r2, [r3, #32]
}
 8008b5c:	bf00      	nop
 8008b5e:	371c      	adds	r7, #28
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	f023 0210 	bic.w	r2, r3, #16
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	031b      	lsls	r3, r3, #12
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	011b      	lsls	r3, r3, #4
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	621a      	str	r2, [r3, #32]
}
 8008bbc:	bf00      	nop
 8008bbe:	371c      	adds	r7, #28
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	f023 0303 	bic.w	r3, r3, #3
 8008bf4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c04:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	011b      	lsls	r3, r3, #4
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008c18:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	021b      	lsls	r3, r3, #8
 8008c1e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	697a      	ldr	r2, [r7, #20]
 8008c32:	621a      	str	r2, [r3, #32]
}
 8008c34:	bf00      	nop
 8008c36:	371c      	adds	r7, #28
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	021b      	lsls	r3, r3, #8
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c7e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	031b      	lsls	r3, r3, #12
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008c92:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	031b      	lsls	r3, r3, #12
 8008c98:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	621a      	str	r2, [r3, #32]
}
 8008cae:	bf00      	nop
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b085      	sub	sp, #20
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	f043 0307 	orr.w	r3, r3, #7
 8008cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	609a      	str	r2, [r3, #8]
}
 8008ce4:	bf00      	nop
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b087      	sub	sp, #28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	021a      	lsls	r2, r3, #8
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	431a      	orrs	r2, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	609a      	str	r2, [r3, #8]
}
 8008d24:	bf00      	nop
 8008d26:	371c      	adds	r7, #28
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	f003 031f 	and.w	r3, r3, #31
 8008d42:	2201      	movs	r2, #1
 8008d44:	fa02 f303 	lsl.w	r3, r2, r3
 8008d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6a1a      	ldr	r2, [r3, #32]
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	43db      	mvns	r3, r3
 8008d52:	401a      	ands	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6a1a      	ldr	r2, [r3, #32]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	f003 031f 	and.w	r3, r3, #31
 8008d62:	6879      	ldr	r1, [r7, #4]
 8008d64:	fa01 f303 	lsl.w	r3, r1, r3
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	621a      	str	r2, [r3, #32]
}
 8008d6e:	bf00      	nop
 8008d70:	371c      	adds	r7, #28
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
	...

08008d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d101      	bne.n	8008d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d90:	2302      	movs	r3, #2
 8008d92:	e068      	b.n	8008e66 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a2e      	ldr	r2, [pc, #184]	; (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d004      	beq.n	8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a2d      	ldr	r2, [pc, #180]	; (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d108      	bne.n	8008dda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008dce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a1e      	ldr	r2, [pc, #120]	; (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d01d      	beq.n	8008e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e06:	d018      	beq.n	8008e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a1b      	ldr	r2, [pc, #108]	; (8008e7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d013      	beq.n	8008e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a1a      	ldr	r2, [pc, #104]	; (8008e80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d00e      	beq.n	8008e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a18      	ldr	r2, [pc, #96]	; (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d009      	beq.n	8008e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a13      	ldr	r2, [pc, #76]	; (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d004      	beq.n	8008e3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a14      	ldr	r2, [pc, #80]	; (8008e88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d10c      	bne.n	8008e54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	40012c00 	.word	0x40012c00
 8008e78:	40013400 	.word	0x40013400
 8008e7c:	40000400 	.word	0x40000400
 8008e80:	40000800 	.word	0x40000800
 8008e84:	40000c00 	.word	0x40000c00
 8008e88:	40014000 	.word	0x40014000

08008e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e042      	b.n	8008f60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d106      	bne.n	8008ef2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f7f9 fb47 	bl	8002580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2224      	movs	r2, #36	; 0x24
 8008ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f022 0201 	bic.w	r2, r2, #1
 8008f08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fbb4 	bl	8009680 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f8b5 	bl	8009088 <UART_SetConfig>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d101      	bne.n	8008f28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e01b      	b.n	8008f60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	689a      	ldr	r2, [r3, #8]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0201 	orr.w	r2, r2, #1
 8008f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fc33 	bl	80097c4 <UART_CheckIdleState>
 8008f5e:	4603      	mov	r3, r0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08a      	sub	sp, #40	; 0x28
 8008f6c:	af02      	add	r7, sp, #8
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	603b      	str	r3, [r7, #0]
 8008f74:	4613      	mov	r3, r2
 8008f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f7e:	2b20      	cmp	r3, #32
 8008f80:	d17c      	bne.n	800907c <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <HAL_UART_Transmit+0x26>
 8008f88:	88fb      	ldrh	r3, [r7, #6]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e075      	b.n	800907e <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2221      	movs	r2, #33	; 0x21
 8008f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fa2:	f7f9 ff77 	bl	8002e94 <HAL_GetTick>
 8008fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	88fa      	ldrh	r2, [r7, #6]
 8008fac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	88fa      	ldrh	r2, [r7, #6]
 8008fb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fc0:	d108      	bne.n	8008fd4 <HAL_UART_Transmit+0x6c>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d104      	bne.n	8008fd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	61bb      	str	r3, [r7, #24]
 8008fd2:	e003      	b.n	8008fdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008fdc:	e031      	b.n	8009042 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2180      	movs	r1, #128	; 0x80
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 fc95 	bl	8009918 <UART_WaitOnFlagUntilTimeout>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d005      	beq.n	8009000 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e03e      	b.n	800907e <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10b      	bne.n	800901e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	881a      	ldrh	r2, [r3, #0]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009012:	b292      	uxth	r2, r2
 8009014:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	3302      	adds	r3, #2
 800901a:	61bb      	str	r3, [r7, #24]
 800901c:	e008      	b.n	8009030 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	781a      	ldrb	r2, [r3, #0]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	b292      	uxth	r2, r2
 8009028:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	3301      	adds	r3, #1
 800902e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009036:	b29b      	uxth	r3, r3
 8009038:	3b01      	subs	r3, #1
 800903a:	b29a      	uxth	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009048:	b29b      	uxth	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1c7      	bne.n	8008fde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2200      	movs	r2, #0
 8009056:	2140      	movs	r1, #64	; 0x40
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f000 fc5d 	bl	8009918 <UART_WaitOnFlagUntilTimeout>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d005      	beq.n	8009070 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2220      	movs	r2, #32
 8009068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800906c:	2303      	movs	r3, #3
 800906e:	e006      	b.n	800907e <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2220      	movs	r2, #32
 8009074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	e000      	b.n	800907e <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800907c:	2302      	movs	r3, #2
  }
}
 800907e:	4618      	mov	r0, r3
 8009080:	3720      	adds	r7, #32
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
	...

08009088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800908c:	b08c      	sub	sp, #48	; 0x30
 800908e:	af00      	add	r7, sp, #0
 8009090:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	431a      	orrs	r2, r3
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	695b      	ldr	r3, [r3, #20]
 80090a6:	431a      	orrs	r2, r3
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	4baa      	ldr	r3, [pc, #680]	; (8009360 <UART_SetConfig+0x2d8>)
 80090b8:	4013      	ands	r3, r2
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	6812      	ldr	r2, [r2, #0]
 80090be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090c0:	430b      	orrs	r3, r1
 80090c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	68da      	ldr	r2, [r3, #12]
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	430a      	orrs	r2, r1
 80090d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a9f      	ldr	r2, [pc, #636]	; (8009364 <UART_SetConfig+0x2dc>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d004      	beq.n	80090f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090f0:	4313      	orrs	r3, r2
 80090f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80090fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	6812      	ldr	r2, [r2, #0]
 8009106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009108:	430b      	orrs	r3, r1
 800910a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009112:	f023 010f 	bic.w	r1, r3, #15
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	430a      	orrs	r2, r1
 8009120:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a90      	ldr	r2, [pc, #576]	; (8009368 <UART_SetConfig+0x2e0>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d125      	bne.n	8009178 <UART_SetConfig+0xf0>
 800912c:	4b8f      	ldr	r3, [pc, #572]	; (800936c <UART_SetConfig+0x2e4>)
 800912e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	2b03      	cmp	r3, #3
 8009138:	d81a      	bhi.n	8009170 <UART_SetConfig+0xe8>
 800913a:	a201      	add	r2, pc, #4	; (adr r2, 8009140 <UART_SetConfig+0xb8>)
 800913c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009140:	08009151 	.word	0x08009151
 8009144:	08009161 	.word	0x08009161
 8009148:	08009159 	.word	0x08009159
 800914c:	08009169 	.word	0x08009169
 8009150:	2301      	movs	r3, #1
 8009152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009156:	e116      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009158:	2302      	movs	r3, #2
 800915a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800915e:	e112      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009160:	2304      	movs	r3, #4
 8009162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009166:	e10e      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009168:	2308      	movs	r3, #8
 800916a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800916e:	e10a      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009170:	2310      	movs	r3, #16
 8009172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009176:	e106      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a7c      	ldr	r2, [pc, #496]	; (8009370 <UART_SetConfig+0x2e8>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d138      	bne.n	80091f4 <UART_SetConfig+0x16c>
 8009182:	4b7a      	ldr	r3, [pc, #488]	; (800936c <UART_SetConfig+0x2e4>)
 8009184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009188:	f003 030c 	and.w	r3, r3, #12
 800918c:	2b0c      	cmp	r3, #12
 800918e:	d82d      	bhi.n	80091ec <UART_SetConfig+0x164>
 8009190:	a201      	add	r2, pc, #4	; (adr r2, 8009198 <UART_SetConfig+0x110>)
 8009192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009196:	bf00      	nop
 8009198:	080091cd 	.word	0x080091cd
 800919c:	080091ed 	.word	0x080091ed
 80091a0:	080091ed 	.word	0x080091ed
 80091a4:	080091ed 	.word	0x080091ed
 80091a8:	080091dd 	.word	0x080091dd
 80091ac:	080091ed 	.word	0x080091ed
 80091b0:	080091ed 	.word	0x080091ed
 80091b4:	080091ed 	.word	0x080091ed
 80091b8:	080091d5 	.word	0x080091d5
 80091bc:	080091ed 	.word	0x080091ed
 80091c0:	080091ed 	.word	0x080091ed
 80091c4:	080091ed 	.word	0x080091ed
 80091c8:	080091e5 	.word	0x080091e5
 80091cc:	2300      	movs	r3, #0
 80091ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091d2:	e0d8      	b.n	8009386 <UART_SetConfig+0x2fe>
 80091d4:	2302      	movs	r3, #2
 80091d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091da:	e0d4      	b.n	8009386 <UART_SetConfig+0x2fe>
 80091dc:	2304      	movs	r3, #4
 80091de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091e2:	e0d0      	b.n	8009386 <UART_SetConfig+0x2fe>
 80091e4:	2308      	movs	r3, #8
 80091e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091ea:	e0cc      	b.n	8009386 <UART_SetConfig+0x2fe>
 80091ec:	2310      	movs	r3, #16
 80091ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091f2:	e0c8      	b.n	8009386 <UART_SetConfig+0x2fe>
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a5e      	ldr	r2, [pc, #376]	; (8009374 <UART_SetConfig+0x2ec>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d125      	bne.n	800924a <UART_SetConfig+0x1c2>
 80091fe:	4b5b      	ldr	r3, [pc, #364]	; (800936c <UART_SetConfig+0x2e4>)
 8009200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009204:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009208:	2b30      	cmp	r3, #48	; 0x30
 800920a:	d016      	beq.n	800923a <UART_SetConfig+0x1b2>
 800920c:	2b30      	cmp	r3, #48	; 0x30
 800920e:	d818      	bhi.n	8009242 <UART_SetConfig+0x1ba>
 8009210:	2b20      	cmp	r3, #32
 8009212:	d00a      	beq.n	800922a <UART_SetConfig+0x1a2>
 8009214:	2b20      	cmp	r3, #32
 8009216:	d814      	bhi.n	8009242 <UART_SetConfig+0x1ba>
 8009218:	2b00      	cmp	r3, #0
 800921a:	d002      	beq.n	8009222 <UART_SetConfig+0x19a>
 800921c:	2b10      	cmp	r3, #16
 800921e:	d008      	beq.n	8009232 <UART_SetConfig+0x1aa>
 8009220:	e00f      	b.n	8009242 <UART_SetConfig+0x1ba>
 8009222:	2300      	movs	r3, #0
 8009224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009228:	e0ad      	b.n	8009386 <UART_SetConfig+0x2fe>
 800922a:	2302      	movs	r3, #2
 800922c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009230:	e0a9      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009232:	2304      	movs	r3, #4
 8009234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009238:	e0a5      	b.n	8009386 <UART_SetConfig+0x2fe>
 800923a:	2308      	movs	r3, #8
 800923c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009240:	e0a1      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009242:	2310      	movs	r3, #16
 8009244:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009248:	e09d      	b.n	8009386 <UART_SetConfig+0x2fe>
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a4a      	ldr	r2, [pc, #296]	; (8009378 <UART_SetConfig+0x2f0>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d125      	bne.n	80092a0 <UART_SetConfig+0x218>
 8009254:	4b45      	ldr	r3, [pc, #276]	; (800936c <UART_SetConfig+0x2e4>)
 8009256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800925a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800925e:	2bc0      	cmp	r3, #192	; 0xc0
 8009260:	d016      	beq.n	8009290 <UART_SetConfig+0x208>
 8009262:	2bc0      	cmp	r3, #192	; 0xc0
 8009264:	d818      	bhi.n	8009298 <UART_SetConfig+0x210>
 8009266:	2b80      	cmp	r3, #128	; 0x80
 8009268:	d00a      	beq.n	8009280 <UART_SetConfig+0x1f8>
 800926a:	2b80      	cmp	r3, #128	; 0x80
 800926c:	d814      	bhi.n	8009298 <UART_SetConfig+0x210>
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <UART_SetConfig+0x1f0>
 8009272:	2b40      	cmp	r3, #64	; 0x40
 8009274:	d008      	beq.n	8009288 <UART_SetConfig+0x200>
 8009276:	e00f      	b.n	8009298 <UART_SetConfig+0x210>
 8009278:	2300      	movs	r3, #0
 800927a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800927e:	e082      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009280:	2302      	movs	r3, #2
 8009282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009286:	e07e      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009288:	2304      	movs	r3, #4
 800928a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800928e:	e07a      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009290:	2308      	movs	r3, #8
 8009292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009296:	e076      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009298:	2310      	movs	r3, #16
 800929a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800929e:	e072      	b.n	8009386 <UART_SetConfig+0x2fe>
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a35      	ldr	r2, [pc, #212]	; (800937c <UART_SetConfig+0x2f4>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d12a      	bne.n	8009300 <UART_SetConfig+0x278>
 80092aa:	4b30      	ldr	r3, [pc, #192]	; (800936c <UART_SetConfig+0x2e4>)
 80092ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092b8:	d01a      	beq.n	80092f0 <UART_SetConfig+0x268>
 80092ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092be:	d81b      	bhi.n	80092f8 <UART_SetConfig+0x270>
 80092c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092c4:	d00c      	beq.n	80092e0 <UART_SetConfig+0x258>
 80092c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092ca:	d815      	bhi.n	80092f8 <UART_SetConfig+0x270>
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <UART_SetConfig+0x250>
 80092d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d4:	d008      	beq.n	80092e8 <UART_SetConfig+0x260>
 80092d6:	e00f      	b.n	80092f8 <UART_SetConfig+0x270>
 80092d8:	2300      	movs	r3, #0
 80092da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092de:	e052      	b.n	8009386 <UART_SetConfig+0x2fe>
 80092e0:	2302      	movs	r3, #2
 80092e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092e6:	e04e      	b.n	8009386 <UART_SetConfig+0x2fe>
 80092e8:	2304      	movs	r3, #4
 80092ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092ee:	e04a      	b.n	8009386 <UART_SetConfig+0x2fe>
 80092f0:	2308      	movs	r3, #8
 80092f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092f6:	e046      	b.n	8009386 <UART_SetConfig+0x2fe>
 80092f8:	2310      	movs	r3, #16
 80092fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092fe:	e042      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a17      	ldr	r2, [pc, #92]	; (8009364 <UART_SetConfig+0x2dc>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d13a      	bne.n	8009380 <UART_SetConfig+0x2f8>
 800930a:	4b18      	ldr	r3, [pc, #96]	; (800936c <UART_SetConfig+0x2e4>)
 800930c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009310:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009314:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009318:	d01a      	beq.n	8009350 <UART_SetConfig+0x2c8>
 800931a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800931e:	d81b      	bhi.n	8009358 <UART_SetConfig+0x2d0>
 8009320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009324:	d00c      	beq.n	8009340 <UART_SetConfig+0x2b8>
 8009326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800932a:	d815      	bhi.n	8009358 <UART_SetConfig+0x2d0>
 800932c:	2b00      	cmp	r3, #0
 800932e:	d003      	beq.n	8009338 <UART_SetConfig+0x2b0>
 8009330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009334:	d008      	beq.n	8009348 <UART_SetConfig+0x2c0>
 8009336:	e00f      	b.n	8009358 <UART_SetConfig+0x2d0>
 8009338:	2300      	movs	r3, #0
 800933a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800933e:	e022      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009340:	2302      	movs	r3, #2
 8009342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009346:	e01e      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009348:	2304      	movs	r3, #4
 800934a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800934e:	e01a      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009350:	2308      	movs	r3, #8
 8009352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009356:	e016      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009358:	2310      	movs	r3, #16
 800935a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800935e:	e012      	b.n	8009386 <UART_SetConfig+0x2fe>
 8009360:	cfff69f3 	.word	0xcfff69f3
 8009364:	40008000 	.word	0x40008000
 8009368:	40013800 	.word	0x40013800
 800936c:	40021000 	.word	0x40021000
 8009370:	40004400 	.word	0x40004400
 8009374:	40004800 	.word	0x40004800
 8009378:	40004c00 	.word	0x40004c00
 800937c:	40005000 	.word	0x40005000
 8009380:	2310      	movs	r3, #16
 8009382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4aae      	ldr	r2, [pc, #696]	; (8009644 <UART_SetConfig+0x5bc>)
 800938c:	4293      	cmp	r3, r2
 800938e:	f040 8097 	bne.w	80094c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009392:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009396:	2b08      	cmp	r3, #8
 8009398:	d823      	bhi.n	80093e2 <UART_SetConfig+0x35a>
 800939a:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <UART_SetConfig+0x318>)
 800939c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a0:	080093c5 	.word	0x080093c5
 80093a4:	080093e3 	.word	0x080093e3
 80093a8:	080093cd 	.word	0x080093cd
 80093ac:	080093e3 	.word	0x080093e3
 80093b0:	080093d3 	.word	0x080093d3
 80093b4:	080093e3 	.word	0x080093e3
 80093b8:	080093e3 	.word	0x080093e3
 80093bc:	080093e3 	.word	0x080093e3
 80093c0:	080093db 	.word	0x080093db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093c4:	f7fd f826 	bl	8006414 <HAL_RCC_GetPCLK1Freq>
 80093c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093ca:	e010      	b.n	80093ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093cc:	4b9e      	ldr	r3, [pc, #632]	; (8009648 <UART_SetConfig+0x5c0>)
 80093ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80093d0:	e00d      	b.n	80093ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093d2:	f7fc ff87 	bl	80062e4 <HAL_RCC_GetSysClockFreq>
 80093d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093d8:	e009      	b.n	80093ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80093e0:	e005      	b.n	80093ee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80093e2:	2300      	movs	r3, #0
 80093e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80093ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 8130 	beq.w	8009656 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fa:	4a94      	ldr	r2, [pc, #592]	; (800964c <UART_SetConfig+0x5c4>)
 80093fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009400:	461a      	mov	r2, r3
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	fbb3 f3f2 	udiv	r3, r3, r2
 8009408:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	4613      	mov	r3, r2
 8009410:	005b      	lsls	r3, r3, #1
 8009412:	4413      	add	r3, r2
 8009414:	69ba      	ldr	r2, [r7, #24]
 8009416:	429a      	cmp	r2, r3
 8009418:	d305      	bcc.n	8009426 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	429a      	cmp	r2, r3
 8009424:	d903      	bls.n	800942e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800942c:	e113      	b.n	8009656 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800942e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009430:	2200      	movs	r2, #0
 8009432:	60bb      	str	r3, [r7, #8]
 8009434:	60fa      	str	r2, [r7, #12]
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	4a84      	ldr	r2, [pc, #528]	; (800964c <UART_SetConfig+0x5c4>)
 800943c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009440:	b29b      	uxth	r3, r3
 8009442:	2200      	movs	r2, #0
 8009444:	603b      	str	r3, [r7, #0]
 8009446:	607a      	str	r2, [r7, #4]
 8009448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800944c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009450:	f7f7 fc12 	bl	8000c78 <__aeabi_uldivmod>
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	4610      	mov	r0, r2
 800945a:	4619      	mov	r1, r3
 800945c:	f04f 0200 	mov.w	r2, #0
 8009460:	f04f 0300 	mov.w	r3, #0
 8009464:	020b      	lsls	r3, r1, #8
 8009466:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800946a:	0202      	lsls	r2, r0, #8
 800946c:	6979      	ldr	r1, [r7, #20]
 800946e:	6849      	ldr	r1, [r1, #4]
 8009470:	0849      	lsrs	r1, r1, #1
 8009472:	2000      	movs	r0, #0
 8009474:	460c      	mov	r4, r1
 8009476:	4605      	mov	r5, r0
 8009478:	eb12 0804 	adds.w	r8, r2, r4
 800947c:	eb43 0905 	adc.w	r9, r3, r5
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	469a      	mov	sl, r3
 8009488:	4693      	mov	fp, r2
 800948a:	4652      	mov	r2, sl
 800948c:	465b      	mov	r3, fp
 800948e:	4640      	mov	r0, r8
 8009490:	4649      	mov	r1, r9
 8009492:	f7f7 fbf1 	bl	8000c78 <__aeabi_uldivmod>
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	4613      	mov	r3, r2
 800949c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094a4:	d308      	bcc.n	80094b8 <UART_SetConfig+0x430>
 80094a6:	6a3b      	ldr	r3, [r7, #32]
 80094a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094ac:	d204      	bcs.n	80094b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6a3a      	ldr	r2, [r7, #32]
 80094b4:	60da      	str	r2, [r3, #12]
 80094b6:	e0ce      	b.n	8009656 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80094be:	e0ca      	b.n	8009656 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	69db      	ldr	r3, [r3, #28]
 80094c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094c8:	d166      	bne.n	8009598 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80094ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094ce:	2b08      	cmp	r3, #8
 80094d0:	d827      	bhi.n	8009522 <UART_SetConfig+0x49a>
 80094d2:	a201      	add	r2, pc, #4	; (adr r2, 80094d8 <UART_SetConfig+0x450>)
 80094d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d8:	080094fd 	.word	0x080094fd
 80094dc:	08009505 	.word	0x08009505
 80094e0:	0800950d 	.word	0x0800950d
 80094e4:	08009523 	.word	0x08009523
 80094e8:	08009513 	.word	0x08009513
 80094ec:	08009523 	.word	0x08009523
 80094f0:	08009523 	.word	0x08009523
 80094f4:	08009523 	.word	0x08009523
 80094f8:	0800951b 	.word	0x0800951b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094fc:	f7fc ff8a 	bl	8006414 <HAL_RCC_GetPCLK1Freq>
 8009500:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009502:	e014      	b.n	800952e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009504:	f7fc ff9c 	bl	8006440 <HAL_RCC_GetPCLK2Freq>
 8009508:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800950a:	e010      	b.n	800952e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800950c:	4b4e      	ldr	r3, [pc, #312]	; (8009648 <UART_SetConfig+0x5c0>)
 800950e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009510:	e00d      	b.n	800952e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009512:	f7fc fee7 	bl	80062e4 <HAL_RCC_GetSysClockFreq>
 8009516:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009518:	e009      	b.n	800952e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800951a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800951e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009520:	e005      	b.n	800952e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800952c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 8090 	beq.w	8009656 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953a:	4a44      	ldr	r2, [pc, #272]	; (800964c <UART_SetConfig+0x5c4>)
 800953c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009540:	461a      	mov	r2, r3
 8009542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009544:	fbb3 f3f2 	udiv	r3, r3, r2
 8009548:	005a      	lsls	r2, r3, #1
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	085b      	lsrs	r3, r3, #1
 8009550:	441a      	add	r2, r3
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	fbb2 f3f3 	udiv	r3, r2, r3
 800955a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800955c:	6a3b      	ldr	r3, [r7, #32]
 800955e:	2b0f      	cmp	r3, #15
 8009560:	d916      	bls.n	8009590 <UART_SetConfig+0x508>
 8009562:	6a3b      	ldr	r3, [r7, #32]
 8009564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009568:	d212      	bcs.n	8009590 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	b29b      	uxth	r3, r3
 800956e:	f023 030f 	bic.w	r3, r3, #15
 8009572:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	085b      	lsrs	r3, r3, #1
 8009578:	b29b      	uxth	r3, r3
 800957a:	f003 0307 	and.w	r3, r3, #7
 800957e:	b29a      	uxth	r2, r3
 8009580:	8bfb      	ldrh	r3, [r7, #30]
 8009582:	4313      	orrs	r3, r2
 8009584:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	8bfa      	ldrh	r2, [r7, #30]
 800958c:	60da      	str	r2, [r3, #12]
 800958e:	e062      	b.n	8009656 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009596:	e05e      	b.n	8009656 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009598:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800959c:	2b08      	cmp	r3, #8
 800959e:	d828      	bhi.n	80095f2 <UART_SetConfig+0x56a>
 80095a0:	a201      	add	r2, pc, #4	; (adr r2, 80095a8 <UART_SetConfig+0x520>)
 80095a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a6:	bf00      	nop
 80095a8:	080095cd 	.word	0x080095cd
 80095ac:	080095d5 	.word	0x080095d5
 80095b0:	080095dd 	.word	0x080095dd
 80095b4:	080095f3 	.word	0x080095f3
 80095b8:	080095e3 	.word	0x080095e3
 80095bc:	080095f3 	.word	0x080095f3
 80095c0:	080095f3 	.word	0x080095f3
 80095c4:	080095f3 	.word	0x080095f3
 80095c8:	080095eb 	.word	0x080095eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095cc:	f7fc ff22 	bl	8006414 <HAL_RCC_GetPCLK1Freq>
 80095d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80095d2:	e014      	b.n	80095fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095d4:	f7fc ff34 	bl	8006440 <HAL_RCC_GetPCLK2Freq>
 80095d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80095da:	e010      	b.n	80095fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095dc:	4b1a      	ldr	r3, [pc, #104]	; (8009648 <UART_SetConfig+0x5c0>)
 80095de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80095e0:	e00d      	b.n	80095fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095e2:	f7fc fe7f 	bl	80062e4 <HAL_RCC_GetSysClockFreq>
 80095e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80095e8:	e009      	b.n	80095fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80095f0:	e005      	b.n	80095fe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80095f2:	2300      	movs	r3, #0
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80095fc:	bf00      	nop
    }

    if (pclk != 0U)
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	2b00      	cmp	r3, #0
 8009602:	d028      	beq.n	8009656 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	4a10      	ldr	r2, [pc, #64]	; (800964c <UART_SetConfig+0x5c4>)
 800960a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800960e:	461a      	mov	r2, r3
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	fbb3 f2f2 	udiv	r2, r3, r2
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	085b      	lsrs	r3, r3, #1
 800961c:	441a      	add	r2, r3
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	fbb2 f3f3 	udiv	r3, r2, r3
 8009626:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	2b0f      	cmp	r3, #15
 800962c:	d910      	bls.n	8009650 <UART_SetConfig+0x5c8>
 800962e:	6a3b      	ldr	r3, [r7, #32]
 8009630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009634:	d20c      	bcs.n	8009650 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009636:	6a3b      	ldr	r3, [r7, #32]
 8009638:	b29a      	uxth	r2, r3
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	60da      	str	r2, [r3, #12]
 8009640:	e009      	b.n	8009656 <UART_SetConfig+0x5ce>
 8009642:	bf00      	nop
 8009644:	40008000 	.word	0x40008000
 8009648:	00f42400 	.word	0x00f42400
 800964c:	0800c860 	.word	0x0800c860
      }
      else
      {
        ret = HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2201      	movs	r2, #1
 800965a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2201      	movs	r2, #1
 8009662:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	2200      	movs	r2, #0
 800966a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	2200      	movs	r2, #0
 8009670:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009672:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009676:	4618      	mov	r0, r3
 8009678:	3730      	adds	r7, #48	; 0x30
 800967a:	46bd      	mov	sp, r7
 800967c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968c:	f003 0308 	and.w	r3, r3, #8
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00a      	beq.n	80096aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	430a      	orrs	r2, r1
 80096a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	430a      	orrs	r2, r1
 80096ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00a      	beq.n	80096ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	430a      	orrs	r2, r1
 80096ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f2:	f003 0304 	and.w	r3, r3, #4
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00a      	beq.n	8009710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	430a      	orrs	r2, r1
 800970e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009714:	f003 0310 	and.w	r3, r3, #16
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00a      	beq.n	8009732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009736:	f003 0320 	and.w	r3, r3, #32
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00a      	beq.n	8009754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	430a      	orrs	r2, r1
 8009752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975c:	2b00      	cmp	r3, #0
 800975e:	d01a      	beq.n	8009796 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	430a      	orrs	r2, r1
 8009774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800977a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800977e:	d10a      	bne.n	8009796 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	430a      	orrs	r2, r1
 8009794:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00a      	beq.n	80097b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	430a      	orrs	r2, r1
 80097b6:	605a      	str	r2, [r3, #4]
  }
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b098      	sub	sp, #96	; 0x60
 80097c8:	af02      	add	r7, sp, #8
 80097ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097d4:	f7f9 fb5e 	bl	8002e94 <HAL_GetTick>
 80097d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0308 	and.w	r3, r3, #8
 80097e4:	2b08      	cmp	r3, #8
 80097e6:	d12f      	bne.n	8009848 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097f0:	2200      	movs	r2, #0
 80097f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f88e 	bl	8009918 <UART_WaitOnFlagUntilTimeout>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d022      	beq.n	8009848 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	e853 3f00 	ldrex	r3, [r3]
 800980e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009816:	653b      	str	r3, [r7, #80]	; 0x50
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	461a      	mov	r2, r3
 800981e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009820:	647b      	str	r3, [r7, #68]	; 0x44
 8009822:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009824:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009828:	e841 2300 	strex	r3, r2, [r1]
 800982c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800982e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1e6      	bne.n	8009802 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2220      	movs	r2, #32
 8009838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009844:	2303      	movs	r3, #3
 8009846:	e063      	b.n	8009910 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0304 	and.w	r3, r3, #4
 8009852:	2b04      	cmp	r3, #4
 8009854:	d149      	bne.n	80098ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009856:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800985e:	2200      	movs	r2, #0
 8009860:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f857 	bl	8009918 <UART_WaitOnFlagUntilTimeout>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d03c      	beq.n	80098ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	e853 3f00 	ldrex	r3, [r3]
 800987c:	623b      	str	r3, [r7, #32]
   return(result);
 800987e:	6a3b      	ldr	r3, [r7, #32]
 8009880:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009884:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800988e:	633b      	str	r3, [r7, #48]	; 0x30
 8009890:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009896:	e841 2300 	strex	r3, r2, [r1]
 800989a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1e6      	bne.n	8009870 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3308      	adds	r3, #8
 80098a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	e853 3f00 	ldrex	r3, [r3]
 80098b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f023 0301 	bic.w	r3, r3, #1
 80098b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3308      	adds	r3, #8
 80098c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098c2:	61fa      	str	r2, [r7, #28]
 80098c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c6:	69b9      	ldr	r1, [r7, #24]
 80098c8:	69fa      	ldr	r2, [r7, #28]
 80098ca:	e841 2300 	strex	r3, r2, [r1]
 80098ce:	617b      	str	r3, [r7, #20]
   return(result);
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1e5      	bne.n	80098a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2220      	movs	r2, #32
 80098da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e012      	b.n	8009910 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2220      	movs	r2, #32
 80098ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2220      	movs	r2, #32
 80098f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3758      	adds	r7, #88	; 0x58
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	603b      	str	r3, [r7, #0]
 8009924:	4613      	mov	r3, r2
 8009926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009928:	e049      	b.n	80099be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009930:	d045      	beq.n	80099be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009932:	f7f9 faaf 	bl	8002e94 <HAL_GetTick>
 8009936:	4602      	mov	r2, r0
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	69ba      	ldr	r2, [r7, #24]
 800993e:	429a      	cmp	r2, r3
 8009940:	d302      	bcc.n	8009948 <UART_WaitOnFlagUntilTimeout+0x30>
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d101      	bne.n	800994c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e048      	b.n	80099de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0304 	and.w	r3, r3, #4
 8009956:	2b00      	cmp	r3, #0
 8009958:	d031      	beq.n	80099be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	69db      	ldr	r3, [r3, #28]
 8009960:	f003 0308 	and.w	r3, r3, #8
 8009964:	2b08      	cmp	r3, #8
 8009966:	d110      	bne.n	800998a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2208      	movs	r2, #8
 800996e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f000 f838 	bl	80099e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2208      	movs	r2, #8
 800997a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e029      	b.n	80099de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009998:	d111      	bne.n	80099be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 f81e 	bl	80099e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2220      	movs	r2, #32
 80099ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e00f      	b.n	80099de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	69da      	ldr	r2, [r3, #28]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	4013      	ands	r3, r2
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	bf0c      	ite	eq
 80099ce:	2301      	moveq	r3, #1
 80099d0:	2300      	movne	r3, #0
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	461a      	mov	r2, r3
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d0a6      	beq.n	800992a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b095      	sub	sp, #84	; 0x54
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f6:	e853 3f00 	ldrex	r3, [r3]
 80099fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8009a0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a14:	e841 2300 	strex	r3, r2, [r1]
 8009a18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e6      	bne.n	80099ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	3308      	adds	r3, #8
 8009a26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a28:	6a3b      	ldr	r3, [r7, #32]
 8009a2a:	e853 3f00 	ldrex	r3, [r3]
 8009a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a36:	f023 0301 	bic.w	r3, r3, #1
 8009a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3308      	adds	r3, #8
 8009a42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a4c:	e841 2300 	strex	r3, r2, [r1]
 8009a50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1e3      	bne.n	8009a20 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d118      	bne.n	8009a92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	e853 3f00 	ldrex	r3, [r3]
 8009a6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	f023 0310 	bic.w	r3, r3, #16
 8009a74:	647b      	str	r3, [r7, #68]	; 0x44
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a7e:	61bb      	str	r3, [r7, #24]
 8009a80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	6979      	ldr	r1, [r7, #20]
 8009a84:	69ba      	ldr	r2, [r7, #24]
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e6      	bne.n	8009a60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2220      	movs	r2, #32
 8009a96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009aa6:	bf00      	nop
 8009aa8:	3754      	adds	r7, #84	; 0x54
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b085      	sub	sp, #20
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d101      	bne.n	8009ac8 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	e027      	b.n	8009b18 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2224      	movs	r2, #36	; 0x24
 8009ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f022 0201 	bic.w	r2, r2, #1
 8009aee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009af6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3714      	adds	r7, #20
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d101      	bne.n	8009b3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b38:	2302      	movs	r3, #2
 8009b3a:	e02d      	b.n	8009b98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2224      	movs	r2, #36	; 0x24
 8009b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f022 0201 	bic.w	r2, r2, #1
 8009b62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	430a      	orrs	r2, r1
 8009b76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f84f 	bl	8009c1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2220      	movs	r2, #32
 8009b8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d101      	bne.n	8009bb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e02d      	b.n	8009c14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2224      	movs	r2, #36	; 0x24
 8009bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f022 0201 	bic.w	r2, r2, #1
 8009bde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	430a      	orrs	r2, r1
 8009bf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f811 	bl	8009c1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2220      	movs	r2, #32
 8009c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d108      	bne.n	8009c3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c3c:	e031      	b.n	8009ca2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c3e:	2308      	movs	r3, #8
 8009c40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c42:	2308      	movs	r3, #8
 8009c44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	0e5b      	lsrs	r3, r3, #25
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	f003 0307 	and.w	r3, r3, #7
 8009c54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	0f5b      	lsrs	r3, r3, #29
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	f003 0307 	and.w	r3, r3, #7
 8009c64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c66:	7bbb      	ldrb	r3, [r7, #14]
 8009c68:	7b3a      	ldrb	r2, [r7, #12]
 8009c6a:	4911      	ldr	r1, [pc, #68]	; (8009cb0 <UARTEx_SetNbDataToProcess+0x94>)
 8009c6c:	5c8a      	ldrb	r2, [r1, r2]
 8009c6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c72:	7b3a      	ldrb	r2, [r7, #12]
 8009c74:	490f      	ldr	r1, [pc, #60]	; (8009cb4 <UARTEx_SetNbDataToProcess+0x98>)
 8009c76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c78:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
 8009c86:	7b7a      	ldrb	r2, [r7, #13]
 8009c88:	4909      	ldr	r1, [pc, #36]	; (8009cb0 <UARTEx_SetNbDataToProcess+0x94>)
 8009c8a:	5c8a      	ldrb	r2, [r1, r2]
 8009c8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c90:	7b7a      	ldrb	r2, [r7, #13]
 8009c92:	4908      	ldr	r1, [pc, #32]	; (8009cb4 <UARTEx_SetNbDataToProcess+0x98>)
 8009c94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c96:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009ca2:	bf00      	nop
 8009ca4:	3714      	adds	r7, #20
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	0800c878 	.word	0x0800c878
 8009cb4:	0800c880 	.word	0x0800c880

08009cb8 <__cvt>:
 8009cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cbc:	ec55 4b10 	vmov	r4, r5, d0
 8009cc0:	2d00      	cmp	r5, #0
 8009cc2:	460e      	mov	r6, r1
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	462b      	mov	r3, r5
 8009cc8:	bfbb      	ittet	lt
 8009cca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009cce:	461d      	movlt	r5, r3
 8009cd0:	2300      	movge	r3, #0
 8009cd2:	232d      	movlt	r3, #45	; 0x2d
 8009cd4:	700b      	strb	r3, [r1, #0]
 8009cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009cdc:	4691      	mov	r9, r2
 8009cde:	f023 0820 	bic.w	r8, r3, #32
 8009ce2:	bfbc      	itt	lt
 8009ce4:	4622      	movlt	r2, r4
 8009ce6:	4614      	movlt	r4, r2
 8009ce8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009cec:	d005      	beq.n	8009cfa <__cvt+0x42>
 8009cee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009cf2:	d100      	bne.n	8009cf6 <__cvt+0x3e>
 8009cf4:	3601      	adds	r6, #1
 8009cf6:	2102      	movs	r1, #2
 8009cf8:	e000      	b.n	8009cfc <__cvt+0x44>
 8009cfa:	2103      	movs	r1, #3
 8009cfc:	ab03      	add	r3, sp, #12
 8009cfe:	9301      	str	r3, [sp, #4]
 8009d00:	ab02      	add	r3, sp, #8
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	ec45 4b10 	vmov	d0, r4, r5
 8009d08:	4653      	mov	r3, sl
 8009d0a:	4632      	mov	r2, r6
 8009d0c:	f000 ff4c 	bl	800aba8 <_dtoa_r>
 8009d10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d14:	4607      	mov	r7, r0
 8009d16:	d102      	bne.n	8009d1e <__cvt+0x66>
 8009d18:	f019 0f01 	tst.w	r9, #1
 8009d1c:	d022      	beq.n	8009d64 <__cvt+0xac>
 8009d1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d22:	eb07 0906 	add.w	r9, r7, r6
 8009d26:	d110      	bne.n	8009d4a <__cvt+0x92>
 8009d28:	783b      	ldrb	r3, [r7, #0]
 8009d2a:	2b30      	cmp	r3, #48	; 0x30
 8009d2c:	d10a      	bne.n	8009d44 <__cvt+0x8c>
 8009d2e:	2200      	movs	r2, #0
 8009d30:	2300      	movs	r3, #0
 8009d32:	4620      	mov	r0, r4
 8009d34:	4629      	mov	r1, r5
 8009d36:	f7f6 fedf 	bl	8000af8 <__aeabi_dcmpeq>
 8009d3a:	b918      	cbnz	r0, 8009d44 <__cvt+0x8c>
 8009d3c:	f1c6 0601 	rsb	r6, r6, #1
 8009d40:	f8ca 6000 	str.w	r6, [sl]
 8009d44:	f8da 3000 	ldr.w	r3, [sl]
 8009d48:	4499      	add	r9, r3
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4620      	mov	r0, r4
 8009d50:	4629      	mov	r1, r5
 8009d52:	f7f6 fed1 	bl	8000af8 <__aeabi_dcmpeq>
 8009d56:	b108      	cbz	r0, 8009d5c <__cvt+0xa4>
 8009d58:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d5c:	2230      	movs	r2, #48	; 0x30
 8009d5e:	9b03      	ldr	r3, [sp, #12]
 8009d60:	454b      	cmp	r3, r9
 8009d62:	d307      	bcc.n	8009d74 <__cvt+0xbc>
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d68:	1bdb      	subs	r3, r3, r7
 8009d6a:	4638      	mov	r0, r7
 8009d6c:	6013      	str	r3, [r2, #0]
 8009d6e:	b004      	add	sp, #16
 8009d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d74:	1c59      	adds	r1, r3, #1
 8009d76:	9103      	str	r1, [sp, #12]
 8009d78:	701a      	strb	r2, [r3, #0]
 8009d7a:	e7f0      	b.n	8009d5e <__cvt+0xa6>

08009d7c <__exponent>:
 8009d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2900      	cmp	r1, #0
 8009d82:	bfb8      	it	lt
 8009d84:	4249      	neglt	r1, r1
 8009d86:	f803 2b02 	strb.w	r2, [r3], #2
 8009d8a:	bfb4      	ite	lt
 8009d8c:	222d      	movlt	r2, #45	; 0x2d
 8009d8e:	222b      	movge	r2, #43	; 0x2b
 8009d90:	2909      	cmp	r1, #9
 8009d92:	7042      	strb	r2, [r0, #1]
 8009d94:	dd2a      	ble.n	8009dec <__exponent+0x70>
 8009d96:	f10d 0207 	add.w	r2, sp, #7
 8009d9a:	4617      	mov	r7, r2
 8009d9c:	260a      	movs	r6, #10
 8009d9e:	4694      	mov	ip, r2
 8009da0:	fb91 f5f6 	sdiv	r5, r1, r6
 8009da4:	fb06 1415 	mls	r4, r6, r5, r1
 8009da8:	3430      	adds	r4, #48	; 0x30
 8009daa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009dae:	460c      	mov	r4, r1
 8009db0:	2c63      	cmp	r4, #99	; 0x63
 8009db2:	f102 32ff 	add.w	r2, r2, #4294967295
 8009db6:	4629      	mov	r1, r5
 8009db8:	dcf1      	bgt.n	8009d9e <__exponent+0x22>
 8009dba:	3130      	adds	r1, #48	; 0x30
 8009dbc:	f1ac 0402 	sub.w	r4, ip, #2
 8009dc0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009dc4:	1c41      	adds	r1, r0, #1
 8009dc6:	4622      	mov	r2, r4
 8009dc8:	42ba      	cmp	r2, r7
 8009dca:	d30a      	bcc.n	8009de2 <__exponent+0x66>
 8009dcc:	f10d 0209 	add.w	r2, sp, #9
 8009dd0:	eba2 020c 	sub.w	r2, r2, ip
 8009dd4:	42bc      	cmp	r4, r7
 8009dd6:	bf88      	it	hi
 8009dd8:	2200      	movhi	r2, #0
 8009dda:	4413      	add	r3, r2
 8009ddc:	1a18      	subs	r0, r3, r0
 8009dde:	b003      	add	sp, #12
 8009de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009de2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009de6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009dea:	e7ed      	b.n	8009dc8 <__exponent+0x4c>
 8009dec:	2330      	movs	r3, #48	; 0x30
 8009dee:	3130      	adds	r1, #48	; 0x30
 8009df0:	7083      	strb	r3, [r0, #2]
 8009df2:	70c1      	strb	r1, [r0, #3]
 8009df4:	1d03      	adds	r3, r0, #4
 8009df6:	e7f1      	b.n	8009ddc <__exponent+0x60>

08009df8 <_printf_float>:
 8009df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfc:	ed2d 8b02 	vpush	{d8}
 8009e00:	b08d      	sub	sp, #52	; 0x34
 8009e02:	460c      	mov	r4, r1
 8009e04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009e08:	4616      	mov	r6, r2
 8009e0a:	461f      	mov	r7, r3
 8009e0c:	4605      	mov	r5, r0
 8009e0e:	f000 fdc9 	bl	800a9a4 <_localeconv_r>
 8009e12:	f8d0 a000 	ldr.w	sl, [r0]
 8009e16:	4650      	mov	r0, sl
 8009e18:	f7f6 fa42 	bl	80002a0 <strlen>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	9305      	str	r3, [sp, #20]
 8009e24:	f8d8 3000 	ldr.w	r3, [r8]
 8009e28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009e2c:	3307      	adds	r3, #7
 8009e2e:	f023 0307 	bic.w	r3, r3, #7
 8009e32:	f103 0208 	add.w	r2, r3, #8
 8009e36:	f8c8 2000 	str.w	r2, [r8]
 8009e3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e42:	9307      	str	r3, [sp, #28]
 8009e44:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e48:	ee08 0a10 	vmov	s16, r0
 8009e4c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009e50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e54:	4b9e      	ldr	r3, [pc, #632]	; (800a0d0 <_printf_float+0x2d8>)
 8009e56:	f04f 32ff 	mov.w	r2, #4294967295
 8009e5a:	f7f6 fe7f 	bl	8000b5c <__aeabi_dcmpun>
 8009e5e:	bb88      	cbnz	r0, 8009ec4 <_printf_float+0xcc>
 8009e60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e64:	4b9a      	ldr	r3, [pc, #616]	; (800a0d0 <_printf_float+0x2d8>)
 8009e66:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6a:	f7f6 fe59 	bl	8000b20 <__aeabi_dcmple>
 8009e6e:	bb48      	cbnz	r0, 8009ec4 <_printf_float+0xcc>
 8009e70:	2200      	movs	r2, #0
 8009e72:	2300      	movs	r3, #0
 8009e74:	4640      	mov	r0, r8
 8009e76:	4649      	mov	r1, r9
 8009e78:	f7f6 fe48 	bl	8000b0c <__aeabi_dcmplt>
 8009e7c:	b110      	cbz	r0, 8009e84 <_printf_float+0x8c>
 8009e7e:	232d      	movs	r3, #45	; 0x2d
 8009e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e84:	4a93      	ldr	r2, [pc, #588]	; (800a0d4 <_printf_float+0x2dc>)
 8009e86:	4b94      	ldr	r3, [pc, #592]	; (800a0d8 <_printf_float+0x2e0>)
 8009e88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009e8c:	bf94      	ite	ls
 8009e8e:	4690      	movls	r8, r2
 8009e90:	4698      	movhi	r8, r3
 8009e92:	2303      	movs	r3, #3
 8009e94:	6123      	str	r3, [r4, #16]
 8009e96:	9b05      	ldr	r3, [sp, #20]
 8009e98:	f023 0304 	bic.w	r3, r3, #4
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	f04f 0900 	mov.w	r9, #0
 8009ea2:	9700      	str	r7, [sp, #0]
 8009ea4:	4633      	mov	r3, r6
 8009ea6:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ea8:	4621      	mov	r1, r4
 8009eaa:	4628      	mov	r0, r5
 8009eac:	f000 f9da 	bl	800a264 <_printf_common>
 8009eb0:	3001      	adds	r0, #1
 8009eb2:	f040 8090 	bne.w	8009fd6 <_printf_float+0x1de>
 8009eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eba:	b00d      	add	sp, #52	; 0x34
 8009ebc:	ecbd 8b02 	vpop	{d8}
 8009ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec4:	4642      	mov	r2, r8
 8009ec6:	464b      	mov	r3, r9
 8009ec8:	4640      	mov	r0, r8
 8009eca:	4649      	mov	r1, r9
 8009ecc:	f7f6 fe46 	bl	8000b5c <__aeabi_dcmpun>
 8009ed0:	b140      	cbz	r0, 8009ee4 <_printf_float+0xec>
 8009ed2:	464b      	mov	r3, r9
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	bfbc      	itt	lt
 8009ed8:	232d      	movlt	r3, #45	; 0x2d
 8009eda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009ede:	4a7f      	ldr	r2, [pc, #508]	; (800a0dc <_printf_float+0x2e4>)
 8009ee0:	4b7f      	ldr	r3, [pc, #508]	; (800a0e0 <_printf_float+0x2e8>)
 8009ee2:	e7d1      	b.n	8009e88 <_printf_float+0x90>
 8009ee4:	6863      	ldr	r3, [r4, #4]
 8009ee6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009eea:	9206      	str	r2, [sp, #24]
 8009eec:	1c5a      	adds	r2, r3, #1
 8009eee:	d13f      	bne.n	8009f70 <_printf_float+0x178>
 8009ef0:	2306      	movs	r3, #6
 8009ef2:	6063      	str	r3, [r4, #4]
 8009ef4:	9b05      	ldr	r3, [sp, #20]
 8009ef6:	6861      	ldr	r1, [r4, #4]
 8009ef8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009efc:	2300      	movs	r3, #0
 8009efe:	9303      	str	r3, [sp, #12]
 8009f00:	ab0a      	add	r3, sp, #40	; 0x28
 8009f02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009f06:	ab09      	add	r3, sp, #36	; 0x24
 8009f08:	ec49 8b10 	vmov	d0, r8, r9
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	6022      	str	r2, [r4, #0]
 8009f10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f14:	4628      	mov	r0, r5
 8009f16:	f7ff fecf 	bl	8009cb8 <__cvt>
 8009f1a:	9b06      	ldr	r3, [sp, #24]
 8009f1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f1e:	2b47      	cmp	r3, #71	; 0x47
 8009f20:	4680      	mov	r8, r0
 8009f22:	d108      	bne.n	8009f36 <_printf_float+0x13e>
 8009f24:	1cc8      	adds	r0, r1, #3
 8009f26:	db02      	blt.n	8009f2e <_printf_float+0x136>
 8009f28:	6863      	ldr	r3, [r4, #4]
 8009f2a:	4299      	cmp	r1, r3
 8009f2c:	dd41      	ble.n	8009fb2 <_printf_float+0x1ba>
 8009f2e:	f1ab 0302 	sub.w	r3, fp, #2
 8009f32:	fa5f fb83 	uxtb.w	fp, r3
 8009f36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f3a:	d820      	bhi.n	8009f7e <_printf_float+0x186>
 8009f3c:	3901      	subs	r1, #1
 8009f3e:	465a      	mov	r2, fp
 8009f40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f44:	9109      	str	r1, [sp, #36]	; 0x24
 8009f46:	f7ff ff19 	bl	8009d7c <__exponent>
 8009f4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f4c:	1813      	adds	r3, r2, r0
 8009f4e:	2a01      	cmp	r2, #1
 8009f50:	4681      	mov	r9, r0
 8009f52:	6123      	str	r3, [r4, #16]
 8009f54:	dc02      	bgt.n	8009f5c <_printf_float+0x164>
 8009f56:	6822      	ldr	r2, [r4, #0]
 8009f58:	07d2      	lsls	r2, r2, #31
 8009f5a:	d501      	bpl.n	8009f60 <_printf_float+0x168>
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	6123      	str	r3, [r4, #16]
 8009f60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d09c      	beq.n	8009ea2 <_printf_float+0xaa>
 8009f68:	232d      	movs	r3, #45	; 0x2d
 8009f6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f6e:	e798      	b.n	8009ea2 <_printf_float+0xaa>
 8009f70:	9a06      	ldr	r2, [sp, #24]
 8009f72:	2a47      	cmp	r2, #71	; 0x47
 8009f74:	d1be      	bne.n	8009ef4 <_printf_float+0xfc>
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1bc      	bne.n	8009ef4 <_printf_float+0xfc>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e7b9      	b.n	8009ef2 <_printf_float+0xfa>
 8009f7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009f82:	d118      	bne.n	8009fb6 <_printf_float+0x1be>
 8009f84:	2900      	cmp	r1, #0
 8009f86:	6863      	ldr	r3, [r4, #4]
 8009f88:	dd0b      	ble.n	8009fa2 <_printf_float+0x1aa>
 8009f8a:	6121      	str	r1, [r4, #16]
 8009f8c:	b913      	cbnz	r3, 8009f94 <_printf_float+0x19c>
 8009f8e:	6822      	ldr	r2, [r4, #0]
 8009f90:	07d0      	lsls	r0, r2, #31
 8009f92:	d502      	bpl.n	8009f9a <_printf_float+0x1a2>
 8009f94:	3301      	adds	r3, #1
 8009f96:	440b      	add	r3, r1
 8009f98:	6123      	str	r3, [r4, #16]
 8009f9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009f9c:	f04f 0900 	mov.w	r9, #0
 8009fa0:	e7de      	b.n	8009f60 <_printf_float+0x168>
 8009fa2:	b913      	cbnz	r3, 8009faa <_printf_float+0x1b2>
 8009fa4:	6822      	ldr	r2, [r4, #0]
 8009fa6:	07d2      	lsls	r2, r2, #31
 8009fa8:	d501      	bpl.n	8009fae <_printf_float+0x1b6>
 8009faa:	3302      	adds	r3, #2
 8009fac:	e7f4      	b.n	8009f98 <_printf_float+0x1a0>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e7f2      	b.n	8009f98 <_printf_float+0x1a0>
 8009fb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb8:	4299      	cmp	r1, r3
 8009fba:	db05      	blt.n	8009fc8 <_printf_float+0x1d0>
 8009fbc:	6823      	ldr	r3, [r4, #0]
 8009fbe:	6121      	str	r1, [r4, #16]
 8009fc0:	07d8      	lsls	r0, r3, #31
 8009fc2:	d5ea      	bpl.n	8009f9a <_printf_float+0x1a2>
 8009fc4:	1c4b      	adds	r3, r1, #1
 8009fc6:	e7e7      	b.n	8009f98 <_printf_float+0x1a0>
 8009fc8:	2900      	cmp	r1, #0
 8009fca:	bfd4      	ite	le
 8009fcc:	f1c1 0202 	rsble	r2, r1, #2
 8009fd0:	2201      	movgt	r2, #1
 8009fd2:	4413      	add	r3, r2
 8009fd4:	e7e0      	b.n	8009f98 <_printf_float+0x1a0>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	055a      	lsls	r2, r3, #21
 8009fda:	d407      	bmi.n	8009fec <_printf_float+0x1f4>
 8009fdc:	6923      	ldr	r3, [r4, #16]
 8009fde:	4642      	mov	r2, r8
 8009fe0:	4631      	mov	r1, r6
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	47b8      	blx	r7
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	d12c      	bne.n	800a044 <_printf_float+0x24c>
 8009fea:	e764      	b.n	8009eb6 <_printf_float+0xbe>
 8009fec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ff0:	f240 80e0 	bls.w	800a1b4 <_printf_float+0x3bc>
 8009ff4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f7f6 fd7c 	bl	8000af8 <__aeabi_dcmpeq>
 800a000:	2800      	cmp	r0, #0
 800a002:	d034      	beq.n	800a06e <_printf_float+0x276>
 800a004:	4a37      	ldr	r2, [pc, #220]	; (800a0e4 <_printf_float+0x2ec>)
 800a006:	2301      	movs	r3, #1
 800a008:	4631      	mov	r1, r6
 800a00a:	4628      	mov	r0, r5
 800a00c:	47b8      	blx	r7
 800a00e:	3001      	adds	r0, #1
 800a010:	f43f af51 	beq.w	8009eb6 <_printf_float+0xbe>
 800a014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a018:	429a      	cmp	r2, r3
 800a01a:	db02      	blt.n	800a022 <_printf_float+0x22a>
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	07d8      	lsls	r0, r3, #31
 800a020:	d510      	bpl.n	800a044 <_printf_float+0x24c>
 800a022:	ee18 3a10 	vmov	r3, s16
 800a026:	4652      	mov	r2, sl
 800a028:	4631      	mov	r1, r6
 800a02a:	4628      	mov	r0, r5
 800a02c:	47b8      	blx	r7
 800a02e:	3001      	adds	r0, #1
 800a030:	f43f af41 	beq.w	8009eb6 <_printf_float+0xbe>
 800a034:	f04f 0800 	mov.w	r8, #0
 800a038:	f104 091a 	add.w	r9, r4, #26
 800a03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a03e:	3b01      	subs	r3, #1
 800a040:	4543      	cmp	r3, r8
 800a042:	dc09      	bgt.n	800a058 <_printf_float+0x260>
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	079b      	lsls	r3, r3, #30
 800a048:	f100 8107 	bmi.w	800a25a <_printf_float+0x462>
 800a04c:	68e0      	ldr	r0, [r4, #12]
 800a04e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a050:	4298      	cmp	r0, r3
 800a052:	bfb8      	it	lt
 800a054:	4618      	movlt	r0, r3
 800a056:	e730      	b.n	8009eba <_printf_float+0xc2>
 800a058:	2301      	movs	r3, #1
 800a05a:	464a      	mov	r2, r9
 800a05c:	4631      	mov	r1, r6
 800a05e:	4628      	mov	r0, r5
 800a060:	47b8      	blx	r7
 800a062:	3001      	adds	r0, #1
 800a064:	f43f af27 	beq.w	8009eb6 <_printf_float+0xbe>
 800a068:	f108 0801 	add.w	r8, r8, #1
 800a06c:	e7e6      	b.n	800a03c <_printf_float+0x244>
 800a06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a070:	2b00      	cmp	r3, #0
 800a072:	dc39      	bgt.n	800a0e8 <_printf_float+0x2f0>
 800a074:	4a1b      	ldr	r2, [pc, #108]	; (800a0e4 <_printf_float+0x2ec>)
 800a076:	2301      	movs	r3, #1
 800a078:	4631      	mov	r1, r6
 800a07a:	4628      	mov	r0, r5
 800a07c:	47b8      	blx	r7
 800a07e:	3001      	adds	r0, #1
 800a080:	f43f af19 	beq.w	8009eb6 <_printf_float+0xbe>
 800a084:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a088:	4313      	orrs	r3, r2
 800a08a:	d102      	bne.n	800a092 <_printf_float+0x29a>
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	07d9      	lsls	r1, r3, #31
 800a090:	d5d8      	bpl.n	800a044 <_printf_float+0x24c>
 800a092:	ee18 3a10 	vmov	r3, s16
 800a096:	4652      	mov	r2, sl
 800a098:	4631      	mov	r1, r6
 800a09a:	4628      	mov	r0, r5
 800a09c:	47b8      	blx	r7
 800a09e:	3001      	adds	r0, #1
 800a0a0:	f43f af09 	beq.w	8009eb6 <_printf_float+0xbe>
 800a0a4:	f04f 0900 	mov.w	r9, #0
 800a0a8:	f104 0a1a 	add.w	sl, r4, #26
 800a0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ae:	425b      	negs	r3, r3
 800a0b0:	454b      	cmp	r3, r9
 800a0b2:	dc01      	bgt.n	800a0b8 <_printf_float+0x2c0>
 800a0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0b6:	e792      	b.n	8009fde <_printf_float+0x1e6>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	4652      	mov	r2, sl
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4628      	mov	r0, r5
 800a0c0:	47b8      	blx	r7
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	f43f aef7 	beq.w	8009eb6 <_printf_float+0xbe>
 800a0c8:	f109 0901 	add.w	r9, r9, #1
 800a0cc:	e7ee      	b.n	800a0ac <_printf_float+0x2b4>
 800a0ce:	bf00      	nop
 800a0d0:	7fefffff 	.word	0x7fefffff
 800a0d4:	0800c888 	.word	0x0800c888
 800a0d8:	0800c88c 	.word	0x0800c88c
 800a0dc:	0800c890 	.word	0x0800c890
 800a0e0:	0800c894 	.word	0x0800c894
 800a0e4:	0800c898 	.word	0x0800c898
 800a0e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	bfa8      	it	ge
 800a0f0:	461a      	movge	r2, r3
 800a0f2:	2a00      	cmp	r2, #0
 800a0f4:	4691      	mov	r9, r2
 800a0f6:	dc37      	bgt.n	800a168 <_printf_float+0x370>
 800a0f8:	f04f 0b00 	mov.w	fp, #0
 800a0fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a100:	f104 021a 	add.w	r2, r4, #26
 800a104:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a106:	9305      	str	r3, [sp, #20]
 800a108:	eba3 0309 	sub.w	r3, r3, r9
 800a10c:	455b      	cmp	r3, fp
 800a10e:	dc33      	bgt.n	800a178 <_printf_float+0x380>
 800a110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a114:	429a      	cmp	r2, r3
 800a116:	db3b      	blt.n	800a190 <_printf_float+0x398>
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	07da      	lsls	r2, r3, #31
 800a11c:	d438      	bmi.n	800a190 <_printf_float+0x398>
 800a11e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a122:	eba2 0903 	sub.w	r9, r2, r3
 800a126:	9b05      	ldr	r3, [sp, #20]
 800a128:	1ad2      	subs	r2, r2, r3
 800a12a:	4591      	cmp	r9, r2
 800a12c:	bfa8      	it	ge
 800a12e:	4691      	movge	r9, r2
 800a130:	f1b9 0f00 	cmp.w	r9, #0
 800a134:	dc35      	bgt.n	800a1a2 <_printf_float+0x3aa>
 800a136:	f04f 0800 	mov.w	r8, #0
 800a13a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a13e:	f104 0a1a 	add.w	sl, r4, #26
 800a142:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a146:	1a9b      	subs	r3, r3, r2
 800a148:	eba3 0309 	sub.w	r3, r3, r9
 800a14c:	4543      	cmp	r3, r8
 800a14e:	f77f af79 	ble.w	800a044 <_printf_float+0x24c>
 800a152:	2301      	movs	r3, #1
 800a154:	4652      	mov	r2, sl
 800a156:	4631      	mov	r1, r6
 800a158:	4628      	mov	r0, r5
 800a15a:	47b8      	blx	r7
 800a15c:	3001      	adds	r0, #1
 800a15e:	f43f aeaa 	beq.w	8009eb6 <_printf_float+0xbe>
 800a162:	f108 0801 	add.w	r8, r8, #1
 800a166:	e7ec      	b.n	800a142 <_printf_float+0x34a>
 800a168:	4613      	mov	r3, r2
 800a16a:	4631      	mov	r1, r6
 800a16c:	4642      	mov	r2, r8
 800a16e:	4628      	mov	r0, r5
 800a170:	47b8      	blx	r7
 800a172:	3001      	adds	r0, #1
 800a174:	d1c0      	bne.n	800a0f8 <_printf_float+0x300>
 800a176:	e69e      	b.n	8009eb6 <_printf_float+0xbe>
 800a178:	2301      	movs	r3, #1
 800a17a:	4631      	mov	r1, r6
 800a17c:	4628      	mov	r0, r5
 800a17e:	9205      	str	r2, [sp, #20]
 800a180:	47b8      	blx	r7
 800a182:	3001      	adds	r0, #1
 800a184:	f43f ae97 	beq.w	8009eb6 <_printf_float+0xbe>
 800a188:	9a05      	ldr	r2, [sp, #20]
 800a18a:	f10b 0b01 	add.w	fp, fp, #1
 800a18e:	e7b9      	b.n	800a104 <_printf_float+0x30c>
 800a190:	ee18 3a10 	vmov	r3, s16
 800a194:	4652      	mov	r2, sl
 800a196:	4631      	mov	r1, r6
 800a198:	4628      	mov	r0, r5
 800a19a:	47b8      	blx	r7
 800a19c:	3001      	adds	r0, #1
 800a19e:	d1be      	bne.n	800a11e <_printf_float+0x326>
 800a1a0:	e689      	b.n	8009eb6 <_printf_float+0xbe>
 800a1a2:	9a05      	ldr	r2, [sp, #20]
 800a1a4:	464b      	mov	r3, r9
 800a1a6:	4442      	add	r2, r8
 800a1a8:	4631      	mov	r1, r6
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	47b8      	blx	r7
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	d1c1      	bne.n	800a136 <_printf_float+0x33e>
 800a1b2:	e680      	b.n	8009eb6 <_printf_float+0xbe>
 800a1b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1b6:	2a01      	cmp	r2, #1
 800a1b8:	dc01      	bgt.n	800a1be <_printf_float+0x3c6>
 800a1ba:	07db      	lsls	r3, r3, #31
 800a1bc:	d53a      	bpl.n	800a234 <_printf_float+0x43c>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4642      	mov	r2, r8
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	47b8      	blx	r7
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	f43f ae74 	beq.w	8009eb6 <_printf_float+0xbe>
 800a1ce:	ee18 3a10 	vmov	r3, s16
 800a1d2:	4652      	mov	r2, sl
 800a1d4:	4631      	mov	r1, r6
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	47b8      	blx	r7
 800a1da:	3001      	adds	r0, #1
 800a1dc:	f43f ae6b 	beq.w	8009eb6 <_printf_float+0xbe>
 800a1e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a1ec:	f7f6 fc84 	bl	8000af8 <__aeabi_dcmpeq>
 800a1f0:	b9d8      	cbnz	r0, 800a22a <_printf_float+0x432>
 800a1f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a1f6:	f108 0201 	add.w	r2, r8, #1
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	47b8      	blx	r7
 800a200:	3001      	adds	r0, #1
 800a202:	d10e      	bne.n	800a222 <_printf_float+0x42a>
 800a204:	e657      	b.n	8009eb6 <_printf_float+0xbe>
 800a206:	2301      	movs	r3, #1
 800a208:	4652      	mov	r2, sl
 800a20a:	4631      	mov	r1, r6
 800a20c:	4628      	mov	r0, r5
 800a20e:	47b8      	blx	r7
 800a210:	3001      	adds	r0, #1
 800a212:	f43f ae50 	beq.w	8009eb6 <_printf_float+0xbe>
 800a216:	f108 0801 	add.w	r8, r8, #1
 800a21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a21c:	3b01      	subs	r3, #1
 800a21e:	4543      	cmp	r3, r8
 800a220:	dcf1      	bgt.n	800a206 <_printf_float+0x40e>
 800a222:	464b      	mov	r3, r9
 800a224:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a228:	e6da      	b.n	8009fe0 <_printf_float+0x1e8>
 800a22a:	f04f 0800 	mov.w	r8, #0
 800a22e:	f104 0a1a 	add.w	sl, r4, #26
 800a232:	e7f2      	b.n	800a21a <_printf_float+0x422>
 800a234:	2301      	movs	r3, #1
 800a236:	4642      	mov	r2, r8
 800a238:	e7df      	b.n	800a1fa <_printf_float+0x402>
 800a23a:	2301      	movs	r3, #1
 800a23c:	464a      	mov	r2, r9
 800a23e:	4631      	mov	r1, r6
 800a240:	4628      	mov	r0, r5
 800a242:	47b8      	blx	r7
 800a244:	3001      	adds	r0, #1
 800a246:	f43f ae36 	beq.w	8009eb6 <_printf_float+0xbe>
 800a24a:	f108 0801 	add.w	r8, r8, #1
 800a24e:	68e3      	ldr	r3, [r4, #12]
 800a250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a252:	1a5b      	subs	r3, r3, r1
 800a254:	4543      	cmp	r3, r8
 800a256:	dcf0      	bgt.n	800a23a <_printf_float+0x442>
 800a258:	e6f8      	b.n	800a04c <_printf_float+0x254>
 800a25a:	f04f 0800 	mov.w	r8, #0
 800a25e:	f104 0919 	add.w	r9, r4, #25
 800a262:	e7f4      	b.n	800a24e <_printf_float+0x456>

0800a264 <_printf_common>:
 800a264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a268:	4616      	mov	r6, r2
 800a26a:	4699      	mov	r9, r3
 800a26c:	688a      	ldr	r2, [r1, #8]
 800a26e:	690b      	ldr	r3, [r1, #16]
 800a270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a274:	4293      	cmp	r3, r2
 800a276:	bfb8      	it	lt
 800a278:	4613      	movlt	r3, r2
 800a27a:	6033      	str	r3, [r6, #0]
 800a27c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a280:	4607      	mov	r7, r0
 800a282:	460c      	mov	r4, r1
 800a284:	b10a      	cbz	r2, 800a28a <_printf_common+0x26>
 800a286:	3301      	adds	r3, #1
 800a288:	6033      	str	r3, [r6, #0]
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	0699      	lsls	r1, r3, #26
 800a28e:	bf42      	ittt	mi
 800a290:	6833      	ldrmi	r3, [r6, #0]
 800a292:	3302      	addmi	r3, #2
 800a294:	6033      	strmi	r3, [r6, #0]
 800a296:	6825      	ldr	r5, [r4, #0]
 800a298:	f015 0506 	ands.w	r5, r5, #6
 800a29c:	d106      	bne.n	800a2ac <_printf_common+0x48>
 800a29e:	f104 0a19 	add.w	sl, r4, #25
 800a2a2:	68e3      	ldr	r3, [r4, #12]
 800a2a4:	6832      	ldr	r2, [r6, #0]
 800a2a6:	1a9b      	subs	r3, r3, r2
 800a2a8:	42ab      	cmp	r3, r5
 800a2aa:	dc26      	bgt.n	800a2fa <_printf_common+0x96>
 800a2ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2b0:	1e13      	subs	r3, r2, #0
 800a2b2:	6822      	ldr	r2, [r4, #0]
 800a2b4:	bf18      	it	ne
 800a2b6:	2301      	movne	r3, #1
 800a2b8:	0692      	lsls	r2, r2, #26
 800a2ba:	d42b      	bmi.n	800a314 <_printf_common+0xb0>
 800a2bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	4638      	mov	r0, r7
 800a2c4:	47c0      	blx	r8
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	d01e      	beq.n	800a308 <_printf_common+0xa4>
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	6922      	ldr	r2, [r4, #16]
 800a2ce:	f003 0306 	and.w	r3, r3, #6
 800a2d2:	2b04      	cmp	r3, #4
 800a2d4:	bf02      	ittt	eq
 800a2d6:	68e5      	ldreq	r5, [r4, #12]
 800a2d8:	6833      	ldreq	r3, [r6, #0]
 800a2da:	1aed      	subeq	r5, r5, r3
 800a2dc:	68a3      	ldr	r3, [r4, #8]
 800a2de:	bf0c      	ite	eq
 800a2e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2e4:	2500      	movne	r5, #0
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	bfc4      	itt	gt
 800a2ea:	1a9b      	subgt	r3, r3, r2
 800a2ec:	18ed      	addgt	r5, r5, r3
 800a2ee:	2600      	movs	r6, #0
 800a2f0:	341a      	adds	r4, #26
 800a2f2:	42b5      	cmp	r5, r6
 800a2f4:	d11a      	bne.n	800a32c <_printf_common+0xc8>
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	e008      	b.n	800a30c <_printf_common+0xa8>
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	4652      	mov	r2, sl
 800a2fe:	4649      	mov	r1, r9
 800a300:	4638      	mov	r0, r7
 800a302:	47c0      	blx	r8
 800a304:	3001      	adds	r0, #1
 800a306:	d103      	bne.n	800a310 <_printf_common+0xac>
 800a308:	f04f 30ff 	mov.w	r0, #4294967295
 800a30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a310:	3501      	adds	r5, #1
 800a312:	e7c6      	b.n	800a2a2 <_printf_common+0x3e>
 800a314:	18e1      	adds	r1, r4, r3
 800a316:	1c5a      	adds	r2, r3, #1
 800a318:	2030      	movs	r0, #48	; 0x30
 800a31a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a31e:	4422      	add	r2, r4
 800a320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a328:	3302      	adds	r3, #2
 800a32a:	e7c7      	b.n	800a2bc <_printf_common+0x58>
 800a32c:	2301      	movs	r3, #1
 800a32e:	4622      	mov	r2, r4
 800a330:	4649      	mov	r1, r9
 800a332:	4638      	mov	r0, r7
 800a334:	47c0      	blx	r8
 800a336:	3001      	adds	r0, #1
 800a338:	d0e6      	beq.n	800a308 <_printf_common+0xa4>
 800a33a:	3601      	adds	r6, #1
 800a33c:	e7d9      	b.n	800a2f2 <_printf_common+0x8e>
	...

0800a340 <_printf_i>:
 800a340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a344:	7e0f      	ldrb	r7, [r1, #24]
 800a346:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a348:	2f78      	cmp	r7, #120	; 0x78
 800a34a:	4691      	mov	r9, r2
 800a34c:	4680      	mov	r8, r0
 800a34e:	460c      	mov	r4, r1
 800a350:	469a      	mov	sl, r3
 800a352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a356:	d807      	bhi.n	800a368 <_printf_i+0x28>
 800a358:	2f62      	cmp	r7, #98	; 0x62
 800a35a:	d80a      	bhi.n	800a372 <_printf_i+0x32>
 800a35c:	2f00      	cmp	r7, #0
 800a35e:	f000 80d4 	beq.w	800a50a <_printf_i+0x1ca>
 800a362:	2f58      	cmp	r7, #88	; 0x58
 800a364:	f000 80c0 	beq.w	800a4e8 <_printf_i+0x1a8>
 800a368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a36c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a370:	e03a      	b.n	800a3e8 <_printf_i+0xa8>
 800a372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a376:	2b15      	cmp	r3, #21
 800a378:	d8f6      	bhi.n	800a368 <_printf_i+0x28>
 800a37a:	a101      	add	r1, pc, #4	; (adr r1, 800a380 <_printf_i+0x40>)
 800a37c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a380:	0800a3d9 	.word	0x0800a3d9
 800a384:	0800a3ed 	.word	0x0800a3ed
 800a388:	0800a369 	.word	0x0800a369
 800a38c:	0800a369 	.word	0x0800a369
 800a390:	0800a369 	.word	0x0800a369
 800a394:	0800a369 	.word	0x0800a369
 800a398:	0800a3ed 	.word	0x0800a3ed
 800a39c:	0800a369 	.word	0x0800a369
 800a3a0:	0800a369 	.word	0x0800a369
 800a3a4:	0800a369 	.word	0x0800a369
 800a3a8:	0800a369 	.word	0x0800a369
 800a3ac:	0800a4f1 	.word	0x0800a4f1
 800a3b0:	0800a419 	.word	0x0800a419
 800a3b4:	0800a4ab 	.word	0x0800a4ab
 800a3b8:	0800a369 	.word	0x0800a369
 800a3bc:	0800a369 	.word	0x0800a369
 800a3c0:	0800a513 	.word	0x0800a513
 800a3c4:	0800a369 	.word	0x0800a369
 800a3c8:	0800a419 	.word	0x0800a419
 800a3cc:	0800a369 	.word	0x0800a369
 800a3d0:	0800a369 	.word	0x0800a369
 800a3d4:	0800a4b3 	.word	0x0800a4b3
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	1d1a      	adds	r2, r3, #4
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	602a      	str	r2, [r5, #0]
 800a3e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e09f      	b.n	800a52c <_printf_i+0x1ec>
 800a3ec:	6820      	ldr	r0, [r4, #0]
 800a3ee:	682b      	ldr	r3, [r5, #0]
 800a3f0:	0607      	lsls	r7, r0, #24
 800a3f2:	f103 0104 	add.w	r1, r3, #4
 800a3f6:	6029      	str	r1, [r5, #0]
 800a3f8:	d501      	bpl.n	800a3fe <_printf_i+0xbe>
 800a3fa:	681e      	ldr	r6, [r3, #0]
 800a3fc:	e003      	b.n	800a406 <_printf_i+0xc6>
 800a3fe:	0646      	lsls	r6, r0, #25
 800a400:	d5fb      	bpl.n	800a3fa <_printf_i+0xba>
 800a402:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a406:	2e00      	cmp	r6, #0
 800a408:	da03      	bge.n	800a412 <_printf_i+0xd2>
 800a40a:	232d      	movs	r3, #45	; 0x2d
 800a40c:	4276      	negs	r6, r6
 800a40e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a412:	485a      	ldr	r0, [pc, #360]	; (800a57c <_printf_i+0x23c>)
 800a414:	230a      	movs	r3, #10
 800a416:	e012      	b.n	800a43e <_printf_i+0xfe>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	6820      	ldr	r0, [r4, #0]
 800a41c:	1d19      	adds	r1, r3, #4
 800a41e:	6029      	str	r1, [r5, #0]
 800a420:	0605      	lsls	r5, r0, #24
 800a422:	d501      	bpl.n	800a428 <_printf_i+0xe8>
 800a424:	681e      	ldr	r6, [r3, #0]
 800a426:	e002      	b.n	800a42e <_printf_i+0xee>
 800a428:	0641      	lsls	r1, r0, #25
 800a42a:	d5fb      	bpl.n	800a424 <_printf_i+0xe4>
 800a42c:	881e      	ldrh	r6, [r3, #0]
 800a42e:	4853      	ldr	r0, [pc, #332]	; (800a57c <_printf_i+0x23c>)
 800a430:	2f6f      	cmp	r7, #111	; 0x6f
 800a432:	bf0c      	ite	eq
 800a434:	2308      	moveq	r3, #8
 800a436:	230a      	movne	r3, #10
 800a438:	2100      	movs	r1, #0
 800a43a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a43e:	6865      	ldr	r5, [r4, #4]
 800a440:	60a5      	str	r5, [r4, #8]
 800a442:	2d00      	cmp	r5, #0
 800a444:	bfa2      	ittt	ge
 800a446:	6821      	ldrge	r1, [r4, #0]
 800a448:	f021 0104 	bicge.w	r1, r1, #4
 800a44c:	6021      	strge	r1, [r4, #0]
 800a44e:	b90e      	cbnz	r6, 800a454 <_printf_i+0x114>
 800a450:	2d00      	cmp	r5, #0
 800a452:	d04b      	beq.n	800a4ec <_printf_i+0x1ac>
 800a454:	4615      	mov	r5, r2
 800a456:	fbb6 f1f3 	udiv	r1, r6, r3
 800a45a:	fb03 6711 	mls	r7, r3, r1, r6
 800a45e:	5dc7      	ldrb	r7, [r0, r7]
 800a460:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a464:	4637      	mov	r7, r6
 800a466:	42bb      	cmp	r3, r7
 800a468:	460e      	mov	r6, r1
 800a46a:	d9f4      	bls.n	800a456 <_printf_i+0x116>
 800a46c:	2b08      	cmp	r3, #8
 800a46e:	d10b      	bne.n	800a488 <_printf_i+0x148>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	07de      	lsls	r6, r3, #31
 800a474:	d508      	bpl.n	800a488 <_printf_i+0x148>
 800a476:	6923      	ldr	r3, [r4, #16]
 800a478:	6861      	ldr	r1, [r4, #4]
 800a47a:	4299      	cmp	r1, r3
 800a47c:	bfde      	ittt	le
 800a47e:	2330      	movle	r3, #48	; 0x30
 800a480:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a484:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a488:	1b52      	subs	r2, r2, r5
 800a48a:	6122      	str	r2, [r4, #16]
 800a48c:	f8cd a000 	str.w	sl, [sp]
 800a490:	464b      	mov	r3, r9
 800a492:	aa03      	add	r2, sp, #12
 800a494:	4621      	mov	r1, r4
 800a496:	4640      	mov	r0, r8
 800a498:	f7ff fee4 	bl	800a264 <_printf_common>
 800a49c:	3001      	adds	r0, #1
 800a49e:	d14a      	bne.n	800a536 <_printf_i+0x1f6>
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a4:	b004      	add	sp, #16
 800a4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4aa:	6823      	ldr	r3, [r4, #0]
 800a4ac:	f043 0320 	orr.w	r3, r3, #32
 800a4b0:	6023      	str	r3, [r4, #0]
 800a4b2:	4833      	ldr	r0, [pc, #204]	; (800a580 <_printf_i+0x240>)
 800a4b4:	2778      	movs	r7, #120	; 0x78
 800a4b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a4ba:	6823      	ldr	r3, [r4, #0]
 800a4bc:	6829      	ldr	r1, [r5, #0]
 800a4be:	061f      	lsls	r7, r3, #24
 800a4c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4c4:	d402      	bmi.n	800a4cc <_printf_i+0x18c>
 800a4c6:	065f      	lsls	r7, r3, #25
 800a4c8:	bf48      	it	mi
 800a4ca:	b2b6      	uxthmi	r6, r6
 800a4cc:	07df      	lsls	r7, r3, #31
 800a4ce:	bf48      	it	mi
 800a4d0:	f043 0320 	orrmi.w	r3, r3, #32
 800a4d4:	6029      	str	r1, [r5, #0]
 800a4d6:	bf48      	it	mi
 800a4d8:	6023      	strmi	r3, [r4, #0]
 800a4da:	b91e      	cbnz	r6, 800a4e4 <_printf_i+0x1a4>
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	f023 0320 	bic.w	r3, r3, #32
 800a4e2:	6023      	str	r3, [r4, #0]
 800a4e4:	2310      	movs	r3, #16
 800a4e6:	e7a7      	b.n	800a438 <_printf_i+0xf8>
 800a4e8:	4824      	ldr	r0, [pc, #144]	; (800a57c <_printf_i+0x23c>)
 800a4ea:	e7e4      	b.n	800a4b6 <_printf_i+0x176>
 800a4ec:	4615      	mov	r5, r2
 800a4ee:	e7bd      	b.n	800a46c <_printf_i+0x12c>
 800a4f0:	682b      	ldr	r3, [r5, #0]
 800a4f2:	6826      	ldr	r6, [r4, #0]
 800a4f4:	6961      	ldr	r1, [r4, #20]
 800a4f6:	1d18      	adds	r0, r3, #4
 800a4f8:	6028      	str	r0, [r5, #0]
 800a4fa:	0635      	lsls	r5, r6, #24
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	d501      	bpl.n	800a504 <_printf_i+0x1c4>
 800a500:	6019      	str	r1, [r3, #0]
 800a502:	e002      	b.n	800a50a <_printf_i+0x1ca>
 800a504:	0670      	lsls	r0, r6, #25
 800a506:	d5fb      	bpl.n	800a500 <_printf_i+0x1c0>
 800a508:	8019      	strh	r1, [r3, #0]
 800a50a:	2300      	movs	r3, #0
 800a50c:	6123      	str	r3, [r4, #16]
 800a50e:	4615      	mov	r5, r2
 800a510:	e7bc      	b.n	800a48c <_printf_i+0x14c>
 800a512:	682b      	ldr	r3, [r5, #0]
 800a514:	1d1a      	adds	r2, r3, #4
 800a516:	602a      	str	r2, [r5, #0]
 800a518:	681d      	ldr	r5, [r3, #0]
 800a51a:	6862      	ldr	r2, [r4, #4]
 800a51c:	2100      	movs	r1, #0
 800a51e:	4628      	mov	r0, r5
 800a520:	f7f5 fe6e 	bl	8000200 <memchr>
 800a524:	b108      	cbz	r0, 800a52a <_printf_i+0x1ea>
 800a526:	1b40      	subs	r0, r0, r5
 800a528:	6060      	str	r0, [r4, #4]
 800a52a:	6863      	ldr	r3, [r4, #4]
 800a52c:	6123      	str	r3, [r4, #16]
 800a52e:	2300      	movs	r3, #0
 800a530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a534:	e7aa      	b.n	800a48c <_printf_i+0x14c>
 800a536:	6923      	ldr	r3, [r4, #16]
 800a538:	462a      	mov	r2, r5
 800a53a:	4649      	mov	r1, r9
 800a53c:	4640      	mov	r0, r8
 800a53e:	47d0      	blx	sl
 800a540:	3001      	adds	r0, #1
 800a542:	d0ad      	beq.n	800a4a0 <_printf_i+0x160>
 800a544:	6823      	ldr	r3, [r4, #0]
 800a546:	079b      	lsls	r3, r3, #30
 800a548:	d413      	bmi.n	800a572 <_printf_i+0x232>
 800a54a:	68e0      	ldr	r0, [r4, #12]
 800a54c:	9b03      	ldr	r3, [sp, #12]
 800a54e:	4298      	cmp	r0, r3
 800a550:	bfb8      	it	lt
 800a552:	4618      	movlt	r0, r3
 800a554:	e7a6      	b.n	800a4a4 <_printf_i+0x164>
 800a556:	2301      	movs	r3, #1
 800a558:	4632      	mov	r2, r6
 800a55a:	4649      	mov	r1, r9
 800a55c:	4640      	mov	r0, r8
 800a55e:	47d0      	blx	sl
 800a560:	3001      	adds	r0, #1
 800a562:	d09d      	beq.n	800a4a0 <_printf_i+0x160>
 800a564:	3501      	adds	r5, #1
 800a566:	68e3      	ldr	r3, [r4, #12]
 800a568:	9903      	ldr	r1, [sp, #12]
 800a56a:	1a5b      	subs	r3, r3, r1
 800a56c:	42ab      	cmp	r3, r5
 800a56e:	dcf2      	bgt.n	800a556 <_printf_i+0x216>
 800a570:	e7eb      	b.n	800a54a <_printf_i+0x20a>
 800a572:	2500      	movs	r5, #0
 800a574:	f104 0619 	add.w	r6, r4, #25
 800a578:	e7f5      	b.n	800a566 <_printf_i+0x226>
 800a57a:	bf00      	nop
 800a57c:	0800c89a 	.word	0x0800c89a
 800a580:	0800c8ab 	.word	0x0800c8ab

0800a584 <std>:
 800a584:	2300      	movs	r3, #0
 800a586:	b510      	push	{r4, lr}
 800a588:	4604      	mov	r4, r0
 800a58a:	e9c0 3300 	strd	r3, r3, [r0]
 800a58e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a592:	6083      	str	r3, [r0, #8]
 800a594:	8181      	strh	r1, [r0, #12]
 800a596:	6643      	str	r3, [r0, #100]	; 0x64
 800a598:	81c2      	strh	r2, [r0, #14]
 800a59a:	6183      	str	r3, [r0, #24]
 800a59c:	4619      	mov	r1, r3
 800a59e:	2208      	movs	r2, #8
 800a5a0:	305c      	adds	r0, #92	; 0x5c
 800a5a2:	f000 f9f7 	bl	800a994 <memset>
 800a5a6:	4b0d      	ldr	r3, [pc, #52]	; (800a5dc <std+0x58>)
 800a5a8:	6263      	str	r3, [r4, #36]	; 0x24
 800a5aa:	4b0d      	ldr	r3, [pc, #52]	; (800a5e0 <std+0x5c>)
 800a5ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5ae:	4b0d      	ldr	r3, [pc, #52]	; (800a5e4 <std+0x60>)
 800a5b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5b2:	4b0d      	ldr	r3, [pc, #52]	; (800a5e8 <std+0x64>)
 800a5b4:	6323      	str	r3, [r4, #48]	; 0x30
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	; (800a5ec <std+0x68>)
 800a5b8:	6224      	str	r4, [r4, #32]
 800a5ba:	429c      	cmp	r4, r3
 800a5bc:	d006      	beq.n	800a5cc <std+0x48>
 800a5be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a5c2:	4294      	cmp	r4, r2
 800a5c4:	d002      	beq.n	800a5cc <std+0x48>
 800a5c6:	33d0      	adds	r3, #208	; 0xd0
 800a5c8:	429c      	cmp	r4, r3
 800a5ca:	d105      	bne.n	800a5d8 <std+0x54>
 800a5cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5d4:	f000 ba5a 	b.w	800aa8c <__retarget_lock_init_recursive>
 800a5d8:	bd10      	pop	{r4, pc}
 800a5da:	bf00      	nop
 800a5dc:	0800a7e5 	.word	0x0800a7e5
 800a5e0:	0800a807 	.word	0x0800a807
 800a5e4:	0800a83f 	.word	0x0800a83f
 800a5e8:	0800a863 	.word	0x0800a863
 800a5ec:	200006c8 	.word	0x200006c8

0800a5f0 <stdio_exit_handler>:
 800a5f0:	4a02      	ldr	r2, [pc, #8]	; (800a5fc <stdio_exit_handler+0xc>)
 800a5f2:	4903      	ldr	r1, [pc, #12]	; (800a600 <stdio_exit_handler+0x10>)
 800a5f4:	4803      	ldr	r0, [pc, #12]	; (800a604 <stdio_exit_handler+0x14>)
 800a5f6:	f000 b869 	b.w	800a6cc <_fwalk_sglue>
 800a5fa:	bf00      	nop
 800a5fc:	20000018 	.word	0x20000018
 800a600:	0800c419 	.word	0x0800c419
 800a604:	20000024 	.word	0x20000024

0800a608 <cleanup_stdio>:
 800a608:	6841      	ldr	r1, [r0, #4]
 800a60a:	4b0c      	ldr	r3, [pc, #48]	; (800a63c <cleanup_stdio+0x34>)
 800a60c:	4299      	cmp	r1, r3
 800a60e:	b510      	push	{r4, lr}
 800a610:	4604      	mov	r4, r0
 800a612:	d001      	beq.n	800a618 <cleanup_stdio+0x10>
 800a614:	f001 ff00 	bl	800c418 <_fflush_r>
 800a618:	68a1      	ldr	r1, [r4, #8]
 800a61a:	4b09      	ldr	r3, [pc, #36]	; (800a640 <cleanup_stdio+0x38>)
 800a61c:	4299      	cmp	r1, r3
 800a61e:	d002      	beq.n	800a626 <cleanup_stdio+0x1e>
 800a620:	4620      	mov	r0, r4
 800a622:	f001 fef9 	bl	800c418 <_fflush_r>
 800a626:	68e1      	ldr	r1, [r4, #12]
 800a628:	4b06      	ldr	r3, [pc, #24]	; (800a644 <cleanup_stdio+0x3c>)
 800a62a:	4299      	cmp	r1, r3
 800a62c:	d004      	beq.n	800a638 <cleanup_stdio+0x30>
 800a62e:	4620      	mov	r0, r4
 800a630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a634:	f001 bef0 	b.w	800c418 <_fflush_r>
 800a638:	bd10      	pop	{r4, pc}
 800a63a:	bf00      	nop
 800a63c:	200006c8 	.word	0x200006c8
 800a640:	20000730 	.word	0x20000730
 800a644:	20000798 	.word	0x20000798

0800a648 <global_stdio_init.part.0>:
 800a648:	b510      	push	{r4, lr}
 800a64a:	4b0b      	ldr	r3, [pc, #44]	; (800a678 <global_stdio_init.part.0+0x30>)
 800a64c:	4c0b      	ldr	r4, [pc, #44]	; (800a67c <global_stdio_init.part.0+0x34>)
 800a64e:	4a0c      	ldr	r2, [pc, #48]	; (800a680 <global_stdio_init.part.0+0x38>)
 800a650:	601a      	str	r2, [r3, #0]
 800a652:	4620      	mov	r0, r4
 800a654:	2200      	movs	r2, #0
 800a656:	2104      	movs	r1, #4
 800a658:	f7ff ff94 	bl	800a584 <std>
 800a65c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a660:	2201      	movs	r2, #1
 800a662:	2109      	movs	r1, #9
 800a664:	f7ff ff8e 	bl	800a584 <std>
 800a668:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a66c:	2202      	movs	r2, #2
 800a66e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a672:	2112      	movs	r1, #18
 800a674:	f7ff bf86 	b.w	800a584 <std>
 800a678:	20000800 	.word	0x20000800
 800a67c:	200006c8 	.word	0x200006c8
 800a680:	0800a5f1 	.word	0x0800a5f1

0800a684 <__sfp_lock_acquire>:
 800a684:	4801      	ldr	r0, [pc, #4]	; (800a68c <__sfp_lock_acquire+0x8>)
 800a686:	f000 ba02 	b.w	800aa8e <__retarget_lock_acquire_recursive>
 800a68a:	bf00      	nop
 800a68c:	20000809 	.word	0x20000809

0800a690 <__sfp_lock_release>:
 800a690:	4801      	ldr	r0, [pc, #4]	; (800a698 <__sfp_lock_release+0x8>)
 800a692:	f000 b9fd 	b.w	800aa90 <__retarget_lock_release_recursive>
 800a696:	bf00      	nop
 800a698:	20000809 	.word	0x20000809

0800a69c <__sinit>:
 800a69c:	b510      	push	{r4, lr}
 800a69e:	4604      	mov	r4, r0
 800a6a0:	f7ff fff0 	bl	800a684 <__sfp_lock_acquire>
 800a6a4:	6a23      	ldr	r3, [r4, #32]
 800a6a6:	b11b      	cbz	r3, 800a6b0 <__sinit+0x14>
 800a6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6ac:	f7ff bff0 	b.w	800a690 <__sfp_lock_release>
 800a6b0:	4b04      	ldr	r3, [pc, #16]	; (800a6c4 <__sinit+0x28>)
 800a6b2:	6223      	str	r3, [r4, #32]
 800a6b4:	4b04      	ldr	r3, [pc, #16]	; (800a6c8 <__sinit+0x2c>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1f5      	bne.n	800a6a8 <__sinit+0xc>
 800a6bc:	f7ff ffc4 	bl	800a648 <global_stdio_init.part.0>
 800a6c0:	e7f2      	b.n	800a6a8 <__sinit+0xc>
 800a6c2:	bf00      	nop
 800a6c4:	0800a609 	.word	0x0800a609
 800a6c8:	20000800 	.word	0x20000800

0800a6cc <_fwalk_sglue>:
 800a6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d0:	4607      	mov	r7, r0
 800a6d2:	4688      	mov	r8, r1
 800a6d4:	4614      	mov	r4, r2
 800a6d6:	2600      	movs	r6, #0
 800a6d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6dc:	f1b9 0901 	subs.w	r9, r9, #1
 800a6e0:	d505      	bpl.n	800a6ee <_fwalk_sglue+0x22>
 800a6e2:	6824      	ldr	r4, [r4, #0]
 800a6e4:	2c00      	cmp	r4, #0
 800a6e6:	d1f7      	bne.n	800a6d8 <_fwalk_sglue+0xc>
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ee:	89ab      	ldrh	r3, [r5, #12]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d907      	bls.n	800a704 <_fwalk_sglue+0x38>
 800a6f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	d003      	beq.n	800a704 <_fwalk_sglue+0x38>
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	4638      	mov	r0, r7
 800a700:	47c0      	blx	r8
 800a702:	4306      	orrs	r6, r0
 800a704:	3568      	adds	r5, #104	; 0x68
 800a706:	e7e9      	b.n	800a6dc <_fwalk_sglue+0x10>

0800a708 <iprintf>:
 800a708:	b40f      	push	{r0, r1, r2, r3}
 800a70a:	b507      	push	{r0, r1, r2, lr}
 800a70c:	4906      	ldr	r1, [pc, #24]	; (800a728 <iprintf+0x20>)
 800a70e:	ab04      	add	r3, sp, #16
 800a710:	6808      	ldr	r0, [r1, #0]
 800a712:	f853 2b04 	ldr.w	r2, [r3], #4
 800a716:	6881      	ldr	r1, [r0, #8]
 800a718:	9301      	str	r3, [sp, #4]
 800a71a:	f001 fcdd 	bl	800c0d8 <_vfiprintf_r>
 800a71e:	b003      	add	sp, #12
 800a720:	f85d eb04 	ldr.w	lr, [sp], #4
 800a724:	b004      	add	sp, #16
 800a726:	4770      	bx	lr
 800a728:	20000070 	.word	0x20000070

0800a72c <_puts_r>:
 800a72c:	6a03      	ldr	r3, [r0, #32]
 800a72e:	b570      	push	{r4, r5, r6, lr}
 800a730:	6884      	ldr	r4, [r0, #8]
 800a732:	4605      	mov	r5, r0
 800a734:	460e      	mov	r6, r1
 800a736:	b90b      	cbnz	r3, 800a73c <_puts_r+0x10>
 800a738:	f7ff ffb0 	bl	800a69c <__sinit>
 800a73c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a73e:	07db      	lsls	r3, r3, #31
 800a740:	d405      	bmi.n	800a74e <_puts_r+0x22>
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	0598      	lsls	r0, r3, #22
 800a746:	d402      	bmi.n	800a74e <_puts_r+0x22>
 800a748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a74a:	f000 f9a0 	bl	800aa8e <__retarget_lock_acquire_recursive>
 800a74e:	89a3      	ldrh	r3, [r4, #12]
 800a750:	0719      	lsls	r1, r3, #28
 800a752:	d513      	bpl.n	800a77c <_puts_r+0x50>
 800a754:	6923      	ldr	r3, [r4, #16]
 800a756:	b18b      	cbz	r3, 800a77c <_puts_r+0x50>
 800a758:	3e01      	subs	r6, #1
 800a75a:	68a3      	ldr	r3, [r4, #8]
 800a75c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a760:	3b01      	subs	r3, #1
 800a762:	60a3      	str	r3, [r4, #8]
 800a764:	b9e9      	cbnz	r1, 800a7a2 <_puts_r+0x76>
 800a766:	2b00      	cmp	r3, #0
 800a768:	da2e      	bge.n	800a7c8 <_puts_r+0x9c>
 800a76a:	4622      	mov	r2, r4
 800a76c:	210a      	movs	r1, #10
 800a76e:	4628      	mov	r0, r5
 800a770:	f000 f87b 	bl	800a86a <__swbuf_r>
 800a774:	3001      	adds	r0, #1
 800a776:	d007      	beq.n	800a788 <_puts_r+0x5c>
 800a778:	250a      	movs	r5, #10
 800a77a:	e007      	b.n	800a78c <_puts_r+0x60>
 800a77c:	4621      	mov	r1, r4
 800a77e:	4628      	mov	r0, r5
 800a780:	f000 f8b0 	bl	800a8e4 <__swsetup_r>
 800a784:	2800      	cmp	r0, #0
 800a786:	d0e7      	beq.n	800a758 <_puts_r+0x2c>
 800a788:	f04f 35ff 	mov.w	r5, #4294967295
 800a78c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a78e:	07da      	lsls	r2, r3, #31
 800a790:	d405      	bmi.n	800a79e <_puts_r+0x72>
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	059b      	lsls	r3, r3, #22
 800a796:	d402      	bmi.n	800a79e <_puts_r+0x72>
 800a798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a79a:	f000 f979 	bl	800aa90 <__retarget_lock_release_recursive>
 800a79e:	4628      	mov	r0, r5
 800a7a0:	bd70      	pop	{r4, r5, r6, pc}
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	da04      	bge.n	800a7b0 <_puts_r+0x84>
 800a7a6:	69a2      	ldr	r2, [r4, #24]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	dc06      	bgt.n	800a7ba <_puts_r+0x8e>
 800a7ac:	290a      	cmp	r1, #10
 800a7ae:	d004      	beq.n	800a7ba <_puts_r+0x8e>
 800a7b0:	6823      	ldr	r3, [r4, #0]
 800a7b2:	1c5a      	adds	r2, r3, #1
 800a7b4:	6022      	str	r2, [r4, #0]
 800a7b6:	7019      	strb	r1, [r3, #0]
 800a7b8:	e7cf      	b.n	800a75a <_puts_r+0x2e>
 800a7ba:	4622      	mov	r2, r4
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f000 f854 	bl	800a86a <__swbuf_r>
 800a7c2:	3001      	adds	r0, #1
 800a7c4:	d1c9      	bne.n	800a75a <_puts_r+0x2e>
 800a7c6:	e7df      	b.n	800a788 <_puts_r+0x5c>
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	250a      	movs	r5, #10
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	6022      	str	r2, [r4, #0]
 800a7d0:	701d      	strb	r5, [r3, #0]
 800a7d2:	e7db      	b.n	800a78c <_puts_r+0x60>

0800a7d4 <puts>:
 800a7d4:	4b02      	ldr	r3, [pc, #8]	; (800a7e0 <puts+0xc>)
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	6818      	ldr	r0, [r3, #0]
 800a7da:	f7ff bfa7 	b.w	800a72c <_puts_r>
 800a7de:	bf00      	nop
 800a7e0:	20000070 	.word	0x20000070

0800a7e4 <__sread>:
 800a7e4:	b510      	push	{r4, lr}
 800a7e6:	460c      	mov	r4, r1
 800a7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ec:	f000 f900 	bl	800a9f0 <_read_r>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	bfab      	itete	ge
 800a7f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a7f8:	181b      	addge	r3, r3, r0
 800a7fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7fe:	bfac      	ite	ge
 800a800:	6563      	strge	r3, [r4, #84]	; 0x54
 800a802:	81a3      	strhlt	r3, [r4, #12]
 800a804:	bd10      	pop	{r4, pc}

0800a806 <__swrite>:
 800a806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a80a:	461f      	mov	r7, r3
 800a80c:	898b      	ldrh	r3, [r1, #12]
 800a80e:	05db      	lsls	r3, r3, #23
 800a810:	4605      	mov	r5, r0
 800a812:	460c      	mov	r4, r1
 800a814:	4616      	mov	r6, r2
 800a816:	d505      	bpl.n	800a824 <__swrite+0x1e>
 800a818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a81c:	2302      	movs	r3, #2
 800a81e:	2200      	movs	r2, #0
 800a820:	f000 f8d4 	bl	800a9cc <_lseek_r>
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a82a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a82e:	81a3      	strh	r3, [r4, #12]
 800a830:	4632      	mov	r2, r6
 800a832:	463b      	mov	r3, r7
 800a834:	4628      	mov	r0, r5
 800a836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a83a:	f000 b8eb 	b.w	800aa14 <_write_r>

0800a83e <__sseek>:
 800a83e:	b510      	push	{r4, lr}
 800a840:	460c      	mov	r4, r1
 800a842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a846:	f000 f8c1 	bl	800a9cc <_lseek_r>
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	bf15      	itete	ne
 800a850:	6560      	strne	r0, [r4, #84]	; 0x54
 800a852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a85a:	81a3      	strheq	r3, [r4, #12]
 800a85c:	bf18      	it	ne
 800a85e:	81a3      	strhne	r3, [r4, #12]
 800a860:	bd10      	pop	{r4, pc}

0800a862 <__sclose>:
 800a862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a866:	f000 b8a1 	b.w	800a9ac <_close_r>

0800a86a <__swbuf_r>:
 800a86a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86c:	460e      	mov	r6, r1
 800a86e:	4614      	mov	r4, r2
 800a870:	4605      	mov	r5, r0
 800a872:	b118      	cbz	r0, 800a87c <__swbuf_r+0x12>
 800a874:	6a03      	ldr	r3, [r0, #32]
 800a876:	b90b      	cbnz	r3, 800a87c <__swbuf_r+0x12>
 800a878:	f7ff ff10 	bl	800a69c <__sinit>
 800a87c:	69a3      	ldr	r3, [r4, #24]
 800a87e:	60a3      	str	r3, [r4, #8]
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	071a      	lsls	r2, r3, #28
 800a884:	d525      	bpl.n	800a8d2 <__swbuf_r+0x68>
 800a886:	6923      	ldr	r3, [r4, #16]
 800a888:	b31b      	cbz	r3, 800a8d2 <__swbuf_r+0x68>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	6922      	ldr	r2, [r4, #16]
 800a88e:	1a98      	subs	r0, r3, r2
 800a890:	6963      	ldr	r3, [r4, #20]
 800a892:	b2f6      	uxtb	r6, r6
 800a894:	4283      	cmp	r3, r0
 800a896:	4637      	mov	r7, r6
 800a898:	dc04      	bgt.n	800a8a4 <__swbuf_r+0x3a>
 800a89a:	4621      	mov	r1, r4
 800a89c:	4628      	mov	r0, r5
 800a89e:	f001 fdbb 	bl	800c418 <_fflush_r>
 800a8a2:	b9e0      	cbnz	r0, 800a8de <__swbuf_r+0x74>
 800a8a4:	68a3      	ldr	r3, [r4, #8]
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	60a3      	str	r3, [r4, #8]
 800a8aa:	6823      	ldr	r3, [r4, #0]
 800a8ac:	1c5a      	adds	r2, r3, #1
 800a8ae:	6022      	str	r2, [r4, #0]
 800a8b0:	701e      	strb	r6, [r3, #0]
 800a8b2:	6962      	ldr	r2, [r4, #20]
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d004      	beq.n	800a8c4 <__swbuf_r+0x5a>
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	07db      	lsls	r3, r3, #31
 800a8be:	d506      	bpl.n	800a8ce <__swbuf_r+0x64>
 800a8c0:	2e0a      	cmp	r6, #10
 800a8c2:	d104      	bne.n	800a8ce <__swbuf_r+0x64>
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f001 fda6 	bl	800c418 <_fflush_r>
 800a8cc:	b938      	cbnz	r0, 800a8de <__swbuf_r+0x74>
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d2:	4621      	mov	r1, r4
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	f000 f805 	bl	800a8e4 <__swsetup_r>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d0d5      	beq.n	800a88a <__swbuf_r+0x20>
 800a8de:	f04f 37ff 	mov.w	r7, #4294967295
 800a8e2:	e7f4      	b.n	800a8ce <__swbuf_r+0x64>

0800a8e4 <__swsetup_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4b2a      	ldr	r3, [pc, #168]	; (800a990 <__swsetup_r+0xac>)
 800a8e8:	4605      	mov	r5, r0
 800a8ea:	6818      	ldr	r0, [r3, #0]
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	b118      	cbz	r0, 800a8f8 <__swsetup_r+0x14>
 800a8f0:	6a03      	ldr	r3, [r0, #32]
 800a8f2:	b90b      	cbnz	r3, 800a8f8 <__swsetup_r+0x14>
 800a8f4:	f7ff fed2 	bl	800a69c <__sinit>
 800a8f8:	89a3      	ldrh	r3, [r4, #12]
 800a8fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8fe:	0718      	lsls	r0, r3, #28
 800a900:	d422      	bmi.n	800a948 <__swsetup_r+0x64>
 800a902:	06d9      	lsls	r1, r3, #27
 800a904:	d407      	bmi.n	800a916 <__swsetup_r+0x32>
 800a906:	2309      	movs	r3, #9
 800a908:	602b      	str	r3, [r5, #0]
 800a90a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a90e:	81a3      	strh	r3, [r4, #12]
 800a910:	f04f 30ff 	mov.w	r0, #4294967295
 800a914:	e034      	b.n	800a980 <__swsetup_r+0x9c>
 800a916:	0758      	lsls	r0, r3, #29
 800a918:	d512      	bpl.n	800a940 <__swsetup_r+0x5c>
 800a91a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a91c:	b141      	cbz	r1, 800a930 <__swsetup_r+0x4c>
 800a91e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a922:	4299      	cmp	r1, r3
 800a924:	d002      	beq.n	800a92c <__swsetup_r+0x48>
 800a926:	4628      	mov	r0, r5
 800a928:	f000 ff30 	bl	800b78c <_free_r>
 800a92c:	2300      	movs	r3, #0
 800a92e:	6363      	str	r3, [r4, #52]	; 0x34
 800a930:	89a3      	ldrh	r3, [r4, #12]
 800a932:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a936:	81a3      	strh	r3, [r4, #12]
 800a938:	2300      	movs	r3, #0
 800a93a:	6063      	str	r3, [r4, #4]
 800a93c:	6923      	ldr	r3, [r4, #16]
 800a93e:	6023      	str	r3, [r4, #0]
 800a940:	89a3      	ldrh	r3, [r4, #12]
 800a942:	f043 0308 	orr.w	r3, r3, #8
 800a946:	81a3      	strh	r3, [r4, #12]
 800a948:	6923      	ldr	r3, [r4, #16]
 800a94a:	b94b      	cbnz	r3, 800a960 <__swsetup_r+0x7c>
 800a94c:	89a3      	ldrh	r3, [r4, #12]
 800a94e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a956:	d003      	beq.n	800a960 <__swsetup_r+0x7c>
 800a958:	4621      	mov	r1, r4
 800a95a:	4628      	mov	r0, r5
 800a95c:	f001 fdaa 	bl	800c4b4 <__smakebuf_r>
 800a960:	89a0      	ldrh	r0, [r4, #12]
 800a962:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a966:	f010 0301 	ands.w	r3, r0, #1
 800a96a:	d00a      	beq.n	800a982 <__swsetup_r+0x9e>
 800a96c:	2300      	movs	r3, #0
 800a96e:	60a3      	str	r3, [r4, #8]
 800a970:	6963      	ldr	r3, [r4, #20]
 800a972:	425b      	negs	r3, r3
 800a974:	61a3      	str	r3, [r4, #24]
 800a976:	6923      	ldr	r3, [r4, #16]
 800a978:	b943      	cbnz	r3, 800a98c <__swsetup_r+0xa8>
 800a97a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a97e:	d1c4      	bne.n	800a90a <__swsetup_r+0x26>
 800a980:	bd38      	pop	{r3, r4, r5, pc}
 800a982:	0781      	lsls	r1, r0, #30
 800a984:	bf58      	it	pl
 800a986:	6963      	ldrpl	r3, [r4, #20]
 800a988:	60a3      	str	r3, [r4, #8]
 800a98a:	e7f4      	b.n	800a976 <__swsetup_r+0x92>
 800a98c:	2000      	movs	r0, #0
 800a98e:	e7f7      	b.n	800a980 <__swsetup_r+0x9c>
 800a990:	20000070 	.word	0x20000070

0800a994 <memset>:
 800a994:	4402      	add	r2, r0
 800a996:	4603      	mov	r3, r0
 800a998:	4293      	cmp	r3, r2
 800a99a:	d100      	bne.n	800a99e <memset+0xa>
 800a99c:	4770      	bx	lr
 800a99e:	f803 1b01 	strb.w	r1, [r3], #1
 800a9a2:	e7f9      	b.n	800a998 <memset+0x4>

0800a9a4 <_localeconv_r>:
 800a9a4:	4800      	ldr	r0, [pc, #0]	; (800a9a8 <_localeconv_r+0x4>)
 800a9a6:	4770      	bx	lr
 800a9a8:	20000164 	.word	0x20000164

0800a9ac <_close_r>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	4d06      	ldr	r5, [pc, #24]	; (800a9c8 <_close_r+0x1c>)
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	4608      	mov	r0, r1
 800a9b6:	602b      	str	r3, [r5, #0]
 800a9b8:	f7f8 f95d 	bl	8002c76 <_close>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	d102      	bne.n	800a9c6 <_close_r+0x1a>
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	b103      	cbz	r3, 800a9c6 <_close_r+0x1a>
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	bd38      	pop	{r3, r4, r5, pc}
 800a9c8:	20000804 	.word	0x20000804

0800a9cc <_lseek_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4d07      	ldr	r5, [pc, #28]	; (800a9ec <_lseek_r+0x20>)
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	4608      	mov	r0, r1
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	602a      	str	r2, [r5, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	f7f8 f972 	bl	8002cc4 <_lseek>
 800a9e0:	1c43      	adds	r3, r0, #1
 800a9e2:	d102      	bne.n	800a9ea <_lseek_r+0x1e>
 800a9e4:	682b      	ldr	r3, [r5, #0]
 800a9e6:	b103      	cbz	r3, 800a9ea <_lseek_r+0x1e>
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	bd38      	pop	{r3, r4, r5, pc}
 800a9ec:	20000804 	.word	0x20000804

0800a9f0 <_read_r>:
 800a9f0:	b538      	push	{r3, r4, r5, lr}
 800a9f2:	4d07      	ldr	r5, [pc, #28]	; (800aa10 <_read_r+0x20>)
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	4608      	mov	r0, r1
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	602a      	str	r2, [r5, #0]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	f7f8 f900 	bl	8002c04 <_read>
 800aa04:	1c43      	adds	r3, r0, #1
 800aa06:	d102      	bne.n	800aa0e <_read_r+0x1e>
 800aa08:	682b      	ldr	r3, [r5, #0]
 800aa0a:	b103      	cbz	r3, 800aa0e <_read_r+0x1e>
 800aa0c:	6023      	str	r3, [r4, #0]
 800aa0e:	bd38      	pop	{r3, r4, r5, pc}
 800aa10:	20000804 	.word	0x20000804

0800aa14 <_write_r>:
 800aa14:	b538      	push	{r3, r4, r5, lr}
 800aa16:	4d07      	ldr	r5, [pc, #28]	; (800aa34 <_write_r+0x20>)
 800aa18:	4604      	mov	r4, r0
 800aa1a:	4608      	mov	r0, r1
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	2200      	movs	r2, #0
 800aa20:	602a      	str	r2, [r5, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	f7f8 f90b 	bl	8002c3e <_write>
 800aa28:	1c43      	adds	r3, r0, #1
 800aa2a:	d102      	bne.n	800aa32 <_write_r+0x1e>
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	b103      	cbz	r3, 800aa32 <_write_r+0x1e>
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	20000804 	.word	0x20000804

0800aa38 <__errno>:
 800aa38:	4b01      	ldr	r3, [pc, #4]	; (800aa40 <__errno+0x8>)
 800aa3a:	6818      	ldr	r0, [r3, #0]
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	20000070 	.word	0x20000070

0800aa44 <__libc_init_array>:
 800aa44:	b570      	push	{r4, r5, r6, lr}
 800aa46:	4d0d      	ldr	r5, [pc, #52]	; (800aa7c <__libc_init_array+0x38>)
 800aa48:	4c0d      	ldr	r4, [pc, #52]	; (800aa80 <__libc_init_array+0x3c>)
 800aa4a:	1b64      	subs	r4, r4, r5
 800aa4c:	10a4      	asrs	r4, r4, #2
 800aa4e:	2600      	movs	r6, #0
 800aa50:	42a6      	cmp	r6, r4
 800aa52:	d109      	bne.n	800aa68 <__libc_init_array+0x24>
 800aa54:	4d0b      	ldr	r5, [pc, #44]	; (800aa84 <__libc_init_array+0x40>)
 800aa56:	4c0c      	ldr	r4, [pc, #48]	; (800aa88 <__libc_init_array+0x44>)
 800aa58:	f001 fe5a 	bl	800c710 <_init>
 800aa5c:	1b64      	subs	r4, r4, r5
 800aa5e:	10a4      	asrs	r4, r4, #2
 800aa60:	2600      	movs	r6, #0
 800aa62:	42a6      	cmp	r6, r4
 800aa64:	d105      	bne.n	800aa72 <__libc_init_array+0x2e>
 800aa66:	bd70      	pop	{r4, r5, r6, pc}
 800aa68:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa6c:	4798      	blx	r3
 800aa6e:	3601      	adds	r6, #1
 800aa70:	e7ee      	b.n	800aa50 <__libc_init_array+0xc>
 800aa72:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa76:	4798      	blx	r3
 800aa78:	3601      	adds	r6, #1
 800aa7a:	e7f2      	b.n	800aa62 <__libc_init_array+0x1e>
 800aa7c:	0800cc04 	.word	0x0800cc04
 800aa80:	0800cc04 	.word	0x0800cc04
 800aa84:	0800cc04 	.word	0x0800cc04
 800aa88:	0800cc08 	.word	0x0800cc08

0800aa8c <__retarget_lock_init_recursive>:
 800aa8c:	4770      	bx	lr

0800aa8e <__retarget_lock_acquire_recursive>:
 800aa8e:	4770      	bx	lr

0800aa90 <__retarget_lock_release_recursive>:
 800aa90:	4770      	bx	lr

0800aa92 <quorem>:
 800aa92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa96:	6903      	ldr	r3, [r0, #16]
 800aa98:	690c      	ldr	r4, [r1, #16]
 800aa9a:	42a3      	cmp	r3, r4
 800aa9c:	4607      	mov	r7, r0
 800aa9e:	db7e      	blt.n	800ab9e <quorem+0x10c>
 800aaa0:	3c01      	subs	r4, #1
 800aaa2:	f101 0814 	add.w	r8, r1, #20
 800aaa6:	f100 0514 	add.w	r5, r0, #20
 800aaaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aaae:	9301      	str	r3, [sp, #4]
 800aab0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aab4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aab8:	3301      	adds	r3, #1
 800aaba:	429a      	cmp	r2, r3
 800aabc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aac0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aac4:	fbb2 f6f3 	udiv	r6, r2, r3
 800aac8:	d331      	bcc.n	800ab2e <quorem+0x9c>
 800aaca:	f04f 0e00 	mov.w	lr, #0
 800aace:	4640      	mov	r0, r8
 800aad0:	46ac      	mov	ip, r5
 800aad2:	46f2      	mov	sl, lr
 800aad4:	f850 2b04 	ldr.w	r2, [r0], #4
 800aad8:	b293      	uxth	r3, r2
 800aada:	fb06 e303 	mla	r3, r6, r3, lr
 800aade:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aae2:	0c1a      	lsrs	r2, r3, #16
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	ebaa 0303 	sub.w	r3, sl, r3
 800aaea:	f8dc a000 	ldr.w	sl, [ip]
 800aaee:	fa13 f38a 	uxtah	r3, r3, sl
 800aaf2:	fb06 220e 	mla	r2, r6, lr, r2
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	9b00      	ldr	r3, [sp, #0]
 800aafa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aafe:	b292      	uxth	r2, r2
 800ab00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ab04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab08:	f8bd 3000 	ldrh.w	r3, [sp]
 800ab0c:	4581      	cmp	r9, r0
 800ab0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab12:	f84c 3b04 	str.w	r3, [ip], #4
 800ab16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ab1a:	d2db      	bcs.n	800aad4 <quorem+0x42>
 800ab1c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ab20:	b92b      	cbnz	r3, 800ab2e <quorem+0x9c>
 800ab22:	9b01      	ldr	r3, [sp, #4]
 800ab24:	3b04      	subs	r3, #4
 800ab26:	429d      	cmp	r5, r3
 800ab28:	461a      	mov	r2, r3
 800ab2a:	d32c      	bcc.n	800ab86 <quorem+0xf4>
 800ab2c:	613c      	str	r4, [r7, #16]
 800ab2e:	4638      	mov	r0, r7
 800ab30:	f001 f9a8 	bl	800be84 <__mcmp>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	db22      	blt.n	800ab7e <quorem+0xec>
 800ab38:	3601      	adds	r6, #1
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab42:	f8d1 c000 	ldr.w	ip, [r1]
 800ab46:	b293      	uxth	r3, r2
 800ab48:	1ac3      	subs	r3, r0, r3
 800ab4a:	0c12      	lsrs	r2, r2, #16
 800ab4c:	fa13 f38c 	uxtah	r3, r3, ip
 800ab50:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ab54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab5e:	45c1      	cmp	r9, r8
 800ab60:	f841 3b04 	str.w	r3, [r1], #4
 800ab64:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ab68:	d2e9      	bcs.n	800ab3e <quorem+0xac>
 800ab6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab72:	b922      	cbnz	r2, 800ab7e <quorem+0xec>
 800ab74:	3b04      	subs	r3, #4
 800ab76:	429d      	cmp	r5, r3
 800ab78:	461a      	mov	r2, r3
 800ab7a:	d30a      	bcc.n	800ab92 <quorem+0x100>
 800ab7c:	613c      	str	r4, [r7, #16]
 800ab7e:	4630      	mov	r0, r6
 800ab80:	b003      	add	sp, #12
 800ab82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab86:	6812      	ldr	r2, [r2, #0]
 800ab88:	3b04      	subs	r3, #4
 800ab8a:	2a00      	cmp	r2, #0
 800ab8c:	d1ce      	bne.n	800ab2c <quorem+0x9a>
 800ab8e:	3c01      	subs	r4, #1
 800ab90:	e7c9      	b.n	800ab26 <quorem+0x94>
 800ab92:	6812      	ldr	r2, [r2, #0]
 800ab94:	3b04      	subs	r3, #4
 800ab96:	2a00      	cmp	r2, #0
 800ab98:	d1f0      	bne.n	800ab7c <quorem+0xea>
 800ab9a:	3c01      	subs	r4, #1
 800ab9c:	e7eb      	b.n	800ab76 <quorem+0xe4>
 800ab9e:	2000      	movs	r0, #0
 800aba0:	e7ee      	b.n	800ab80 <quorem+0xee>
 800aba2:	0000      	movs	r0, r0
 800aba4:	0000      	movs	r0, r0
	...

0800aba8 <_dtoa_r>:
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	ed2d 8b04 	vpush	{d8-d9}
 800abb0:	69c5      	ldr	r5, [r0, #28]
 800abb2:	b093      	sub	sp, #76	; 0x4c
 800abb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800abb8:	ec57 6b10 	vmov	r6, r7, d0
 800abbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800abc0:	9107      	str	r1, [sp, #28]
 800abc2:	4604      	mov	r4, r0
 800abc4:	920a      	str	r2, [sp, #40]	; 0x28
 800abc6:	930d      	str	r3, [sp, #52]	; 0x34
 800abc8:	b975      	cbnz	r5, 800abe8 <_dtoa_r+0x40>
 800abca:	2010      	movs	r0, #16
 800abcc:	f000 fe2a 	bl	800b824 <malloc>
 800abd0:	4602      	mov	r2, r0
 800abd2:	61e0      	str	r0, [r4, #28]
 800abd4:	b920      	cbnz	r0, 800abe0 <_dtoa_r+0x38>
 800abd6:	4bae      	ldr	r3, [pc, #696]	; (800ae90 <_dtoa_r+0x2e8>)
 800abd8:	21ef      	movs	r1, #239	; 0xef
 800abda:	48ae      	ldr	r0, [pc, #696]	; (800ae94 <_dtoa_r+0x2ec>)
 800abdc:	f001 fce6 	bl	800c5ac <__assert_func>
 800abe0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800abe4:	6005      	str	r5, [r0, #0]
 800abe6:	60c5      	str	r5, [r0, #12]
 800abe8:	69e3      	ldr	r3, [r4, #28]
 800abea:	6819      	ldr	r1, [r3, #0]
 800abec:	b151      	cbz	r1, 800ac04 <_dtoa_r+0x5c>
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	604a      	str	r2, [r1, #4]
 800abf2:	2301      	movs	r3, #1
 800abf4:	4093      	lsls	r3, r2
 800abf6:	608b      	str	r3, [r1, #8]
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 ff07 	bl	800ba0c <_Bfree>
 800abfe:	69e3      	ldr	r3, [r4, #28]
 800ac00:	2200      	movs	r2, #0
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	1e3b      	subs	r3, r7, #0
 800ac06:	bfbb      	ittet	lt
 800ac08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ac0c:	9303      	strlt	r3, [sp, #12]
 800ac0e:	2300      	movge	r3, #0
 800ac10:	2201      	movlt	r2, #1
 800ac12:	bfac      	ite	ge
 800ac14:	f8c8 3000 	strge.w	r3, [r8]
 800ac18:	f8c8 2000 	strlt.w	r2, [r8]
 800ac1c:	4b9e      	ldr	r3, [pc, #632]	; (800ae98 <_dtoa_r+0x2f0>)
 800ac1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ac22:	ea33 0308 	bics.w	r3, r3, r8
 800ac26:	d11b      	bne.n	800ac60 <_dtoa_r+0xb8>
 800ac28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac2a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ac34:	4333      	orrs	r3, r6
 800ac36:	f000 8593 	beq.w	800b760 <_dtoa_r+0xbb8>
 800ac3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac3c:	b963      	cbnz	r3, 800ac58 <_dtoa_r+0xb0>
 800ac3e:	4b97      	ldr	r3, [pc, #604]	; (800ae9c <_dtoa_r+0x2f4>)
 800ac40:	e027      	b.n	800ac92 <_dtoa_r+0xea>
 800ac42:	4b97      	ldr	r3, [pc, #604]	; (800aea0 <_dtoa_r+0x2f8>)
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	3308      	adds	r3, #8
 800ac48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac4a:	6013      	str	r3, [r2, #0]
 800ac4c:	9800      	ldr	r0, [sp, #0]
 800ac4e:	b013      	add	sp, #76	; 0x4c
 800ac50:	ecbd 8b04 	vpop	{d8-d9}
 800ac54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac58:	4b90      	ldr	r3, [pc, #576]	; (800ae9c <_dtoa_r+0x2f4>)
 800ac5a:	9300      	str	r3, [sp, #0]
 800ac5c:	3303      	adds	r3, #3
 800ac5e:	e7f3      	b.n	800ac48 <_dtoa_r+0xa0>
 800ac60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac64:	2200      	movs	r2, #0
 800ac66:	ec51 0b17 	vmov	r0, r1, d7
 800ac6a:	eeb0 8a47 	vmov.f32	s16, s14
 800ac6e:	eef0 8a67 	vmov.f32	s17, s15
 800ac72:	2300      	movs	r3, #0
 800ac74:	f7f5 ff40 	bl	8000af8 <__aeabi_dcmpeq>
 800ac78:	4681      	mov	r9, r0
 800ac7a:	b160      	cbz	r0, 800ac96 <_dtoa_r+0xee>
 800ac7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac7e:	2301      	movs	r3, #1
 800ac80:	6013      	str	r3, [r2, #0]
 800ac82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f000 8568 	beq.w	800b75a <_dtoa_r+0xbb2>
 800ac8a:	4b86      	ldr	r3, [pc, #536]	; (800aea4 <_dtoa_r+0x2fc>)
 800ac8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac8e:	6013      	str	r3, [r2, #0]
 800ac90:	3b01      	subs	r3, #1
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	e7da      	b.n	800ac4c <_dtoa_r+0xa4>
 800ac96:	aa10      	add	r2, sp, #64	; 0x40
 800ac98:	a911      	add	r1, sp, #68	; 0x44
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	eeb0 0a48 	vmov.f32	s0, s16
 800aca0:	eef0 0a68 	vmov.f32	s1, s17
 800aca4:	f001 f994 	bl	800bfd0 <__d2b>
 800aca8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800acac:	4682      	mov	sl, r0
 800acae:	2d00      	cmp	r5, #0
 800acb0:	d07f      	beq.n	800adb2 <_dtoa_r+0x20a>
 800acb2:	ee18 3a90 	vmov	r3, s17
 800acb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800acbe:	ec51 0b18 	vmov	r0, r1, d8
 800acc2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800acc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800acca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800acce:	4619      	mov	r1, r3
 800acd0:	2200      	movs	r2, #0
 800acd2:	4b75      	ldr	r3, [pc, #468]	; (800aea8 <_dtoa_r+0x300>)
 800acd4:	f7f5 faf0 	bl	80002b8 <__aeabi_dsub>
 800acd8:	a367      	add	r3, pc, #412	; (adr r3, 800ae78 <_dtoa_r+0x2d0>)
 800acda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acde:	f7f5 fca3 	bl	8000628 <__aeabi_dmul>
 800ace2:	a367      	add	r3, pc, #412	; (adr r3, 800ae80 <_dtoa_r+0x2d8>)
 800ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace8:	f7f5 fae8 	bl	80002bc <__adddf3>
 800acec:	4606      	mov	r6, r0
 800acee:	4628      	mov	r0, r5
 800acf0:	460f      	mov	r7, r1
 800acf2:	f7f5 fc2f 	bl	8000554 <__aeabi_i2d>
 800acf6:	a364      	add	r3, pc, #400	; (adr r3, 800ae88 <_dtoa_r+0x2e0>)
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	f7f5 fc94 	bl	8000628 <__aeabi_dmul>
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
 800ad04:	4630      	mov	r0, r6
 800ad06:	4639      	mov	r1, r7
 800ad08:	f7f5 fad8 	bl	80002bc <__adddf3>
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	460f      	mov	r7, r1
 800ad10:	f7f5 ff3a 	bl	8000b88 <__aeabi_d2iz>
 800ad14:	2200      	movs	r2, #0
 800ad16:	4683      	mov	fp, r0
 800ad18:	2300      	movs	r3, #0
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	4639      	mov	r1, r7
 800ad1e:	f7f5 fef5 	bl	8000b0c <__aeabi_dcmplt>
 800ad22:	b148      	cbz	r0, 800ad38 <_dtoa_r+0x190>
 800ad24:	4658      	mov	r0, fp
 800ad26:	f7f5 fc15 	bl	8000554 <__aeabi_i2d>
 800ad2a:	4632      	mov	r2, r6
 800ad2c:	463b      	mov	r3, r7
 800ad2e:	f7f5 fee3 	bl	8000af8 <__aeabi_dcmpeq>
 800ad32:	b908      	cbnz	r0, 800ad38 <_dtoa_r+0x190>
 800ad34:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad38:	f1bb 0f16 	cmp.w	fp, #22
 800ad3c:	d857      	bhi.n	800adee <_dtoa_r+0x246>
 800ad3e:	4b5b      	ldr	r3, [pc, #364]	; (800aeac <_dtoa_r+0x304>)
 800ad40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad48:	ec51 0b18 	vmov	r0, r1, d8
 800ad4c:	f7f5 fede 	bl	8000b0c <__aeabi_dcmplt>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	d04e      	beq.n	800adf2 <_dtoa_r+0x24a>
 800ad54:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad58:	2300      	movs	r3, #0
 800ad5a:	930c      	str	r3, [sp, #48]	; 0x30
 800ad5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad5e:	1b5b      	subs	r3, r3, r5
 800ad60:	1e5a      	subs	r2, r3, #1
 800ad62:	bf45      	ittet	mi
 800ad64:	f1c3 0301 	rsbmi	r3, r3, #1
 800ad68:	9305      	strmi	r3, [sp, #20]
 800ad6a:	2300      	movpl	r3, #0
 800ad6c:	2300      	movmi	r3, #0
 800ad6e:	9206      	str	r2, [sp, #24]
 800ad70:	bf54      	ite	pl
 800ad72:	9305      	strpl	r3, [sp, #20]
 800ad74:	9306      	strmi	r3, [sp, #24]
 800ad76:	f1bb 0f00 	cmp.w	fp, #0
 800ad7a:	db3c      	blt.n	800adf6 <_dtoa_r+0x24e>
 800ad7c:	9b06      	ldr	r3, [sp, #24]
 800ad7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ad82:	445b      	add	r3, fp
 800ad84:	9306      	str	r3, [sp, #24]
 800ad86:	2300      	movs	r3, #0
 800ad88:	9308      	str	r3, [sp, #32]
 800ad8a:	9b07      	ldr	r3, [sp, #28]
 800ad8c:	2b09      	cmp	r3, #9
 800ad8e:	d868      	bhi.n	800ae62 <_dtoa_r+0x2ba>
 800ad90:	2b05      	cmp	r3, #5
 800ad92:	bfc4      	itt	gt
 800ad94:	3b04      	subgt	r3, #4
 800ad96:	9307      	strgt	r3, [sp, #28]
 800ad98:	9b07      	ldr	r3, [sp, #28]
 800ad9a:	f1a3 0302 	sub.w	r3, r3, #2
 800ad9e:	bfcc      	ite	gt
 800ada0:	2500      	movgt	r5, #0
 800ada2:	2501      	movle	r5, #1
 800ada4:	2b03      	cmp	r3, #3
 800ada6:	f200 8085 	bhi.w	800aeb4 <_dtoa_r+0x30c>
 800adaa:	e8df f003 	tbb	[pc, r3]
 800adae:	3b2e      	.short	0x3b2e
 800adb0:	5839      	.short	0x5839
 800adb2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800adb6:	441d      	add	r5, r3
 800adb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800adbc:	2b20      	cmp	r3, #32
 800adbe:	bfc1      	itttt	gt
 800adc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800adc4:	fa08 f803 	lslgt.w	r8, r8, r3
 800adc8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800adcc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800add0:	bfd6      	itet	le
 800add2:	f1c3 0320 	rsble	r3, r3, #32
 800add6:	ea48 0003 	orrgt.w	r0, r8, r3
 800adda:	fa06 f003 	lslle.w	r0, r6, r3
 800adde:	f7f5 fba9 	bl	8000534 <__aeabi_ui2d>
 800ade2:	2201      	movs	r2, #1
 800ade4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ade8:	3d01      	subs	r5, #1
 800adea:	920e      	str	r2, [sp, #56]	; 0x38
 800adec:	e76f      	b.n	800acce <_dtoa_r+0x126>
 800adee:	2301      	movs	r3, #1
 800adf0:	e7b3      	b.n	800ad5a <_dtoa_r+0x1b2>
 800adf2:	900c      	str	r0, [sp, #48]	; 0x30
 800adf4:	e7b2      	b.n	800ad5c <_dtoa_r+0x1b4>
 800adf6:	9b05      	ldr	r3, [sp, #20]
 800adf8:	eba3 030b 	sub.w	r3, r3, fp
 800adfc:	9305      	str	r3, [sp, #20]
 800adfe:	f1cb 0300 	rsb	r3, fp, #0
 800ae02:	9308      	str	r3, [sp, #32]
 800ae04:	2300      	movs	r3, #0
 800ae06:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae08:	e7bf      	b.n	800ad8a <_dtoa_r+0x1e2>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	dc52      	bgt.n	800aeba <_dtoa_r+0x312>
 800ae14:	2301      	movs	r3, #1
 800ae16:	9301      	str	r3, [sp, #4]
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	920a      	str	r2, [sp, #40]	; 0x28
 800ae1e:	e00b      	b.n	800ae38 <_dtoa_r+0x290>
 800ae20:	2301      	movs	r3, #1
 800ae22:	e7f3      	b.n	800ae0c <_dtoa_r+0x264>
 800ae24:	2300      	movs	r3, #0
 800ae26:	9309      	str	r3, [sp, #36]	; 0x24
 800ae28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae2a:	445b      	add	r3, fp
 800ae2c:	9301      	str	r3, [sp, #4]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	9304      	str	r3, [sp, #16]
 800ae34:	bfb8      	it	lt
 800ae36:	2301      	movlt	r3, #1
 800ae38:	69e0      	ldr	r0, [r4, #28]
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	2204      	movs	r2, #4
 800ae3e:	f102 0614 	add.w	r6, r2, #20
 800ae42:	429e      	cmp	r6, r3
 800ae44:	d93d      	bls.n	800aec2 <_dtoa_r+0x31a>
 800ae46:	6041      	str	r1, [r0, #4]
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f000 fd9f 	bl	800b98c <_Balloc>
 800ae4e:	9000      	str	r0, [sp, #0]
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d139      	bne.n	800aec8 <_dtoa_r+0x320>
 800ae54:	4b16      	ldr	r3, [pc, #88]	; (800aeb0 <_dtoa_r+0x308>)
 800ae56:	4602      	mov	r2, r0
 800ae58:	f240 11af 	movw	r1, #431	; 0x1af
 800ae5c:	e6bd      	b.n	800abda <_dtoa_r+0x32>
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e7e1      	b.n	800ae26 <_dtoa_r+0x27e>
 800ae62:	2501      	movs	r5, #1
 800ae64:	2300      	movs	r3, #0
 800ae66:	9307      	str	r3, [sp, #28]
 800ae68:	9509      	str	r5, [sp, #36]	; 0x24
 800ae6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae6e:	9301      	str	r3, [sp, #4]
 800ae70:	9304      	str	r3, [sp, #16]
 800ae72:	2200      	movs	r2, #0
 800ae74:	2312      	movs	r3, #18
 800ae76:	e7d1      	b.n	800ae1c <_dtoa_r+0x274>
 800ae78:	636f4361 	.word	0x636f4361
 800ae7c:	3fd287a7 	.word	0x3fd287a7
 800ae80:	8b60c8b3 	.word	0x8b60c8b3
 800ae84:	3fc68a28 	.word	0x3fc68a28
 800ae88:	509f79fb 	.word	0x509f79fb
 800ae8c:	3fd34413 	.word	0x3fd34413
 800ae90:	0800c8c9 	.word	0x0800c8c9
 800ae94:	0800c8e0 	.word	0x0800c8e0
 800ae98:	7ff00000 	.word	0x7ff00000
 800ae9c:	0800c8c5 	.word	0x0800c8c5
 800aea0:	0800c8bc 	.word	0x0800c8bc
 800aea4:	0800c899 	.word	0x0800c899
 800aea8:	3ff80000 	.word	0x3ff80000
 800aeac:	0800c9d0 	.word	0x0800c9d0
 800aeb0:	0800c938 	.word	0x0800c938
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb8:	e7d7      	b.n	800ae6a <_dtoa_r+0x2c2>
 800aeba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aebc:	9301      	str	r3, [sp, #4]
 800aebe:	9304      	str	r3, [sp, #16]
 800aec0:	e7ba      	b.n	800ae38 <_dtoa_r+0x290>
 800aec2:	3101      	adds	r1, #1
 800aec4:	0052      	lsls	r2, r2, #1
 800aec6:	e7ba      	b.n	800ae3e <_dtoa_r+0x296>
 800aec8:	69e3      	ldr	r3, [r4, #28]
 800aeca:	9a00      	ldr	r2, [sp, #0]
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	9b04      	ldr	r3, [sp, #16]
 800aed0:	2b0e      	cmp	r3, #14
 800aed2:	f200 80a8 	bhi.w	800b026 <_dtoa_r+0x47e>
 800aed6:	2d00      	cmp	r5, #0
 800aed8:	f000 80a5 	beq.w	800b026 <_dtoa_r+0x47e>
 800aedc:	f1bb 0f00 	cmp.w	fp, #0
 800aee0:	dd38      	ble.n	800af54 <_dtoa_r+0x3ac>
 800aee2:	4bc0      	ldr	r3, [pc, #768]	; (800b1e4 <_dtoa_r+0x63c>)
 800aee4:	f00b 020f 	and.w	r2, fp, #15
 800aee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aeec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aef0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aef4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800aef8:	d019      	beq.n	800af2e <_dtoa_r+0x386>
 800aefa:	4bbb      	ldr	r3, [pc, #748]	; (800b1e8 <_dtoa_r+0x640>)
 800aefc:	ec51 0b18 	vmov	r0, r1, d8
 800af00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af04:	f7f5 fcba 	bl	800087c <__aeabi_ddiv>
 800af08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af0c:	f008 080f 	and.w	r8, r8, #15
 800af10:	2503      	movs	r5, #3
 800af12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b1e8 <_dtoa_r+0x640>
 800af16:	f1b8 0f00 	cmp.w	r8, #0
 800af1a:	d10a      	bne.n	800af32 <_dtoa_r+0x38a>
 800af1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af20:	4632      	mov	r2, r6
 800af22:	463b      	mov	r3, r7
 800af24:	f7f5 fcaa 	bl	800087c <__aeabi_ddiv>
 800af28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af2c:	e02b      	b.n	800af86 <_dtoa_r+0x3de>
 800af2e:	2502      	movs	r5, #2
 800af30:	e7ef      	b.n	800af12 <_dtoa_r+0x36a>
 800af32:	f018 0f01 	tst.w	r8, #1
 800af36:	d008      	beq.n	800af4a <_dtoa_r+0x3a2>
 800af38:	4630      	mov	r0, r6
 800af3a:	4639      	mov	r1, r7
 800af3c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800af40:	f7f5 fb72 	bl	8000628 <__aeabi_dmul>
 800af44:	3501      	adds	r5, #1
 800af46:	4606      	mov	r6, r0
 800af48:	460f      	mov	r7, r1
 800af4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800af4e:	f109 0908 	add.w	r9, r9, #8
 800af52:	e7e0      	b.n	800af16 <_dtoa_r+0x36e>
 800af54:	f000 809f 	beq.w	800b096 <_dtoa_r+0x4ee>
 800af58:	f1cb 0600 	rsb	r6, fp, #0
 800af5c:	4ba1      	ldr	r3, [pc, #644]	; (800b1e4 <_dtoa_r+0x63c>)
 800af5e:	4fa2      	ldr	r7, [pc, #648]	; (800b1e8 <_dtoa_r+0x640>)
 800af60:	f006 020f 	and.w	r2, r6, #15
 800af64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	ec51 0b18 	vmov	r0, r1, d8
 800af70:	f7f5 fb5a 	bl	8000628 <__aeabi_dmul>
 800af74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af78:	1136      	asrs	r6, r6, #4
 800af7a:	2300      	movs	r3, #0
 800af7c:	2502      	movs	r5, #2
 800af7e:	2e00      	cmp	r6, #0
 800af80:	d17e      	bne.n	800b080 <_dtoa_r+0x4d8>
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1d0      	bne.n	800af28 <_dtoa_r+0x380>
 800af86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 8084 	beq.w	800b09a <_dtoa_r+0x4f2>
 800af92:	4b96      	ldr	r3, [pc, #600]	; (800b1ec <_dtoa_r+0x644>)
 800af94:	2200      	movs	r2, #0
 800af96:	4640      	mov	r0, r8
 800af98:	4649      	mov	r1, r9
 800af9a:	f7f5 fdb7 	bl	8000b0c <__aeabi_dcmplt>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	d07b      	beq.n	800b09a <_dtoa_r+0x4f2>
 800afa2:	9b04      	ldr	r3, [sp, #16]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d078      	beq.n	800b09a <_dtoa_r+0x4f2>
 800afa8:	9b01      	ldr	r3, [sp, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	dd39      	ble.n	800b022 <_dtoa_r+0x47a>
 800afae:	4b90      	ldr	r3, [pc, #576]	; (800b1f0 <_dtoa_r+0x648>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	4640      	mov	r0, r8
 800afb4:	4649      	mov	r1, r9
 800afb6:	f7f5 fb37 	bl	8000628 <__aeabi_dmul>
 800afba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afbe:	9e01      	ldr	r6, [sp, #4]
 800afc0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800afc4:	3501      	adds	r5, #1
 800afc6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800afca:	4628      	mov	r0, r5
 800afcc:	f7f5 fac2 	bl	8000554 <__aeabi_i2d>
 800afd0:	4642      	mov	r2, r8
 800afd2:	464b      	mov	r3, r9
 800afd4:	f7f5 fb28 	bl	8000628 <__aeabi_dmul>
 800afd8:	4b86      	ldr	r3, [pc, #536]	; (800b1f4 <_dtoa_r+0x64c>)
 800afda:	2200      	movs	r2, #0
 800afdc:	f7f5 f96e 	bl	80002bc <__adddf3>
 800afe0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800afe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afe8:	9303      	str	r3, [sp, #12]
 800afea:	2e00      	cmp	r6, #0
 800afec:	d158      	bne.n	800b0a0 <_dtoa_r+0x4f8>
 800afee:	4b82      	ldr	r3, [pc, #520]	; (800b1f8 <_dtoa_r+0x650>)
 800aff0:	2200      	movs	r2, #0
 800aff2:	4640      	mov	r0, r8
 800aff4:	4649      	mov	r1, r9
 800aff6:	f7f5 f95f 	bl	80002b8 <__aeabi_dsub>
 800affa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800affe:	4680      	mov	r8, r0
 800b000:	4689      	mov	r9, r1
 800b002:	f7f5 fda1 	bl	8000b48 <__aeabi_dcmpgt>
 800b006:	2800      	cmp	r0, #0
 800b008:	f040 8296 	bne.w	800b538 <_dtoa_r+0x990>
 800b00c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b010:	4640      	mov	r0, r8
 800b012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b016:	4649      	mov	r1, r9
 800b018:	f7f5 fd78 	bl	8000b0c <__aeabi_dcmplt>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	f040 8289 	bne.w	800b534 <_dtoa_r+0x98c>
 800b022:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b026:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f2c0 814e 	blt.w	800b2ca <_dtoa_r+0x722>
 800b02e:	f1bb 0f0e 	cmp.w	fp, #14
 800b032:	f300 814a 	bgt.w	800b2ca <_dtoa_r+0x722>
 800b036:	4b6b      	ldr	r3, [pc, #428]	; (800b1e4 <_dtoa_r+0x63c>)
 800b038:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b03c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b042:	2b00      	cmp	r3, #0
 800b044:	f280 80dc 	bge.w	800b200 <_dtoa_r+0x658>
 800b048:	9b04      	ldr	r3, [sp, #16]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f300 80d8 	bgt.w	800b200 <_dtoa_r+0x658>
 800b050:	f040 826f 	bne.w	800b532 <_dtoa_r+0x98a>
 800b054:	4b68      	ldr	r3, [pc, #416]	; (800b1f8 <_dtoa_r+0x650>)
 800b056:	2200      	movs	r2, #0
 800b058:	4640      	mov	r0, r8
 800b05a:	4649      	mov	r1, r9
 800b05c:	f7f5 fae4 	bl	8000628 <__aeabi_dmul>
 800b060:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b064:	f7f5 fd66 	bl	8000b34 <__aeabi_dcmpge>
 800b068:	9e04      	ldr	r6, [sp, #16]
 800b06a:	4637      	mov	r7, r6
 800b06c:	2800      	cmp	r0, #0
 800b06e:	f040 8245 	bne.w	800b4fc <_dtoa_r+0x954>
 800b072:	9d00      	ldr	r5, [sp, #0]
 800b074:	2331      	movs	r3, #49	; 0x31
 800b076:	f805 3b01 	strb.w	r3, [r5], #1
 800b07a:	f10b 0b01 	add.w	fp, fp, #1
 800b07e:	e241      	b.n	800b504 <_dtoa_r+0x95c>
 800b080:	07f2      	lsls	r2, r6, #31
 800b082:	d505      	bpl.n	800b090 <_dtoa_r+0x4e8>
 800b084:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b088:	f7f5 face 	bl	8000628 <__aeabi_dmul>
 800b08c:	3501      	adds	r5, #1
 800b08e:	2301      	movs	r3, #1
 800b090:	1076      	asrs	r6, r6, #1
 800b092:	3708      	adds	r7, #8
 800b094:	e773      	b.n	800af7e <_dtoa_r+0x3d6>
 800b096:	2502      	movs	r5, #2
 800b098:	e775      	b.n	800af86 <_dtoa_r+0x3de>
 800b09a:	9e04      	ldr	r6, [sp, #16]
 800b09c:	465f      	mov	r7, fp
 800b09e:	e792      	b.n	800afc6 <_dtoa_r+0x41e>
 800b0a0:	9900      	ldr	r1, [sp, #0]
 800b0a2:	4b50      	ldr	r3, [pc, #320]	; (800b1e4 <_dtoa_r+0x63c>)
 800b0a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0a8:	4431      	add	r1, r6
 800b0aa:	9102      	str	r1, [sp, #8]
 800b0ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0ae:	eeb0 9a47 	vmov.f32	s18, s14
 800b0b2:	eef0 9a67 	vmov.f32	s19, s15
 800b0b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b0ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b0be:	2900      	cmp	r1, #0
 800b0c0:	d044      	beq.n	800b14c <_dtoa_r+0x5a4>
 800b0c2:	494e      	ldr	r1, [pc, #312]	; (800b1fc <_dtoa_r+0x654>)
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	f7f5 fbd9 	bl	800087c <__aeabi_ddiv>
 800b0ca:	ec53 2b19 	vmov	r2, r3, d9
 800b0ce:	f7f5 f8f3 	bl	80002b8 <__aeabi_dsub>
 800b0d2:	9d00      	ldr	r5, [sp, #0]
 800b0d4:	ec41 0b19 	vmov	d9, r0, r1
 800b0d8:	4649      	mov	r1, r9
 800b0da:	4640      	mov	r0, r8
 800b0dc:	f7f5 fd54 	bl	8000b88 <__aeabi_d2iz>
 800b0e0:	4606      	mov	r6, r0
 800b0e2:	f7f5 fa37 	bl	8000554 <__aeabi_i2d>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	4640      	mov	r0, r8
 800b0ec:	4649      	mov	r1, r9
 800b0ee:	f7f5 f8e3 	bl	80002b8 <__aeabi_dsub>
 800b0f2:	3630      	adds	r6, #48	; 0x30
 800b0f4:	f805 6b01 	strb.w	r6, [r5], #1
 800b0f8:	ec53 2b19 	vmov	r2, r3, d9
 800b0fc:	4680      	mov	r8, r0
 800b0fe:	4689      	mov	r9, r1
 800b100:	f7f5 fd04 	bl	8000b0c <__aeabi_dcmplt>
 800b104:	2800      	cmp	r0, #0
 800b106:	d164      	bne.n	800b1d2 <_dtoa_r+0x62a>
 800b108:	4642      	mov	r2, r8
 800b10a:	464b      	mov	r3, r9
 800b10c:	4937      	ldr	r1, [pc, #220]	; (800b1ec <_dtoa_r+0x644>)
 800b10e:	2000      	movs	r0, #0
 800b110:	f7f5 f8d2 	bl	80002b8 <__aeabi_dsub>
 800b114:	ec53 2b19 	vmov	r2, r3, d9
 800b118:	f7f5 fcf8 	bl	8000b0c <__aeabi_dcmplt>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	f040 80b6 	bne.w	800b28e <_dtoa_r+0x6e6>
 800b122:	9b02      	ldr	r3, [sp, #8]
 800b124:	429d      	cmp	r5, r3
 800b126:	f43f af7c 	beq.w	800b022 <_dtoa_r+0x47a>
 800b12a:	4b31      	ldr	r3, [pc, #196]	; (800b1f0 <_dtoa_r+0x648>)
 800b12c:	ec51 0b19 	vmov	r0, r1, d9
 800b130:	2200      	movs	r2, #0
 800b132:	f7f5 fa79 	bl	8000628 <__aeabi_dmul>
 800b136:	4b2e      	ldr	r3, [pc, #184]	; (800b1f0 <_dtoa_r+0x648>)
 800b138:	ec41 0b19 	vmov	d9, r0, r1
 800b13c:	2200      	movs	r2, #0
 800b13e:	4640      	mov	r0, r8
 800b140:	4649      	mov	r1, r9
 800b142:	f7f5 fa71 	bl	8000628 <__aeabi_dmul>
 800b146:	4680      	mov	r8, r0
 800b148:	4689      	mov	r9, r1
 800b14a:	e7c5      	b.n	800b0d8 <_dtoa_r+0x530>
 800b14c:	ec51 0b17 	vmov	r0, r1, d7
 800b150:	f7f5 fa6a 	bl	8000628 <__aeabi_dmul>
 800b154:	9b02      	ldr	r3, [sp, #8]
 800b156:	9d00      	ldr	r5, [sp, #0]
 800b158:	930f      	str	r3, [sp, #60]	; 0x3c
 800b15a:	ec41 0b19 	vmov	d9, r0, r1
 800b15e:	4649      	mov	r1, r9
 800b160:	4640      	mov	r0, r8
 800b162:	f7f5 fd11 	bl	8000b88 <__aeabi_d2iz>
 800b166:	4606      	mov	r6, r0
 800b168:	f7f5 f9f4 	bl	8000554 <__aeabi_i2d>
 800b16c:	3630      	adds	r6, #48	; 0x30
 800b16e:	4602      	mov	r2, r0
 800b170:	460b      	mov	r3, r1
 800b172:	4640      	mov	r0, r8
 800b174:	4649      	mov	r1, r9
 800b176:	f7f5 f89f 	bl	80002b8 <__aeabi_dsub>
 800b17a:	f805 6b01 	strb.w	r6, [r5], #1
 800b17e:	9b02      	ldr	r3, [sp, #8]
 800b180:	429d      	cmp	r5, r3
 800b182:	4680      	mov	r8, r0
 800b184:	4689      	mov	r9, r1
 800b186:	f04f 0200 	mov.w	r2, #0
 800b18a:	d124      	bne.n	800b1d6 <_dtoa_r+0x62e>
 800b18c:	4b1b      	ldr	r3, [pc, #108]	; (800b1fc <_dtoa_r+0x654>)
 800b18e:	ec51 0b19 	vmov	r0, r1, d9
 800b192:	f7f5 f893 	bl	80002bc <__adddf3>
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	4640      	mov	r0, r8
 800b19c:	4649      	mov	r1, r9
 800b19e:	f7f5 fcd3 	bl	8000b48 <__aeabi_dcmpgt>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d173      	bne.n	800b28e <_dtoa_r+0x6e6>
 800b1a6:	ec53 2b19 	vmov	r2, r3, d9
 800b1aa:	4914      	ldr	r1, [pc, #80]	; (800b1fc <_dtoa_r+0x654>)
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	f7f5 f883 	bl	80002b8 <__aeabi_dsub>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	4640      	mov	r0, r8
 800b1b8:	4649      	mov	r1, r9
 800b1ba:	f7f5 fca7 	bl	8000b0c <__aeabi_dcmplt>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	f43f af2f 	beq.w	800b022 <_dtoa_r+0x47a>
 800b1c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b1c6:	1e6b      	subs	r3, r5, #1
 800b1c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b1ce:	2b30      	cmp	r3, #48	; 0x30
 800b1d0:	d0f8      	beq.n	800b1c4 <_dtoa_r+0x61c>
 800b1d2:	46bb      	mov	fp, r7
 800b1d4:	e04a      	b.n	800b26c <_dtoa_r+0x6c4>
 800b1d6:	4b06      	ldr	r3, [pc, #24]	; (800b1f0 <_dtoa_r+0x648>)
 800b1d8:	f7f5 fa26 	bl	8000628 <__aeabi_dmul>
 800b1dc:	4680      	mov	r8, r0
 800b1de:	4689      	mov	r9, r1
 800b1e0:	e7bd      	b.n	800b15e <_dtoa_r+0x5b6>
 800b1e2:	bf00      	nop
 800b1e4:	0800c9d0 	.word	0x0800c9d0
 800b1e8:	0800c9a8 	.word	0x0800c9a8
 800b1ec:	3ff00000 	.word	0x3ff00000
 800b1f0:	40240000 	.word	0x40240000
 800b1f4:	401c0000 	.word	0x401c0000
 800b1f8:	40140000 	.word	0x40140000
 800b1fc:	3fe00000 	.word	0x3fe00000
 800b200:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b204:	9d00      	ldr	r5, [sp, #0]
 800b206:	4642      	mov	r2, r8
 800b208:	464b      	mov	r3, r9
 800b20a:	4630      	mov	r0, r6
 800b20c:	4639      	mov	r1, r7
 800b20e:	f7f5 fb35 	bl	800087c <__aeabi_ddiv>
 800b212:	f7f5 fcb9 	bl	8000b88 <__aeabi_d2iz>
 800b216:	9001      	str	r0, [sp, #4]
 800b218:	f7f5 f99c 	bl	8000554 <__aeabi_i2d>
 800b21c:	4642      	mov	r2, r8
 800b21e:	464b      	mov	r3, r9
 800b220:	f7f5 fa02 	bl	8000628 <__aeabi_dmul>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	4630      	mov	r0, r6
 800b22a:	4639      	mov	r1, r7
 800b22c:	f7f5 f844 	bl	80002b8 <__aeabi_dsub>
 800b230:	9e01      	ldr	r6, [sp, #4]
 800b232:	9f04      	ldr	r7, [sp, #16]
 800b234:	3630      	adds	r6, #48	; 0x30
 800b236:	f805 6b01 	strb.w	r6, [r5], #1
 800b23a:	9e00      	ldr	r6, [sp, #0]
 800b23c:	1bae      	subs	r6, r5, r6
 800b23e:	42b7      	cmp	r7, r6
 800b240:	4602      	mov	r2, r0
 800b242:	460b      	mov	r3, r1
 800b244:	d134      	bne.n	800b2b0 <_dtoa_r+0x708>
 800b246:	f7f5 f839 	bl	80002bc <__adddf3>
 800b24a:	4642      	mov	r2, r8
 800b24c:	464b      	mov	r3, r9
 800b24e:	4606      	mov	r6, r0
 800b250:	460f      	mov	r7, r1
 800b252:	f7f5 fc79 	bl	8000b48 <__aeabi_dcmpgt>
 800b256:	b9c8      	cbnz	r0, 800b28c <_dtoa_r+0x6e4>
 800b258:	4642      	mov	r2, r8
 800b25a:	464b      	mov	r3, r9
 800b25c:	4630      	mov	r0, r6
 800b25e:	4639      	mov	r1, r7
 800b260:	f7f5 fc4a 	bl	8000af8 <__aeabi_dcmpeq>
 800b264:	b110      	cbz	r0, 800b26c <_dtoa_r+0x6c4>
 800b266:	9b01      	ldr	r3, [sp, #4]
 800b268:	07db      	lsls	r3, r3, #31
 800b26a:	d40f      	bmi.n	800b28c <_dtoa_r+0x6e4>
 800b26c:	4651      	mov	r1, sl
 800b26e:	4620      	mov	r0, r4
 800b270:	f000 fbcc 	bl	800ba0c <_Bfree>
 800b274:	2300      	movs	r3, #0
 800b276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b278:	702b      	strb	r3, [r5, #0]
 800b27a:	f10b 0301 	add.w	r3, fp, #1
 800b27e:	6013      	str	r3, [r2, #0]
 800b280:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b282:	2b00      	cmp	r3, #0
 800b284:	f43f ace2 	beq.w	800ac4c <_dtoa_r+0xa4>
 800b288:	601d      	str	r5, [r3, #0]
 800b28a:	e4df      	b.n	800ac4c <_dtoa_r+0xa4>
 800b28c:	465f      	mov	r7, fp
 800b28e:	462b      	mov	r3, r5
 800b290:	461d      	mov	r5, r3
 800b292:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b296:	2a39      	cmp	r2, #57	; 0x39
 800b298:	d106      	bne.n	800b2a8 <_dtoa_r+0x700>
 800b29a:	9a00      	ldr	r2, [sp, #0]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d1f7      	bne.n	800b290 <_dtoa_r+0x6e8>
 800b2a0:	9900      	ldr	r1, [sp, #0]
 800b2a2:	2230      	movs	r2, #48	; 0x30
 800b2a4:	3701      	adds	r7, #1
 800b2a6:	700a      	strb	r2, [r1, #0]
 800b2a8:	781a      	ldrb	r2, [r3, #0]
 800b2aa:	3201      	adds	r2, #1
 800b2ac:	701a      	strb	r2, [r3, #0]
 800b2ae:	e790      	b.n	800b1d2 <_dtoa_r+0x62a>
 800b2b0:	4ba3      	ldr	r3, [pc, #652]	; (800b540 <_dtoa_r+0x998>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f7f5 f9b8 	bl	8000628 <__aeabi_dmul>
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	4606      	mov	r6, r0
 800b2be:	460f      	mov	r7, r1
 800b2c0:	f7f5 fc1a 	bl	8000af8 <__aeabi_dcmpeq>
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	d09e      	beq.n	800b206 <_dtoa_r+0x65e>
 800b2c8:	e7d0      	b.n	800b26c <_dtoa_r+0x6c4>
 800b2ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2cc:	2a00      	cmp	r2, #0
 800b2ce:	f000 80ca 	beq.w	800b466 <_dtoa_r+0x8be>
 800b2d2:	9a07      	ldr	r2, [sp, #28]
 800b2d4:	2a01      	cmp	r2, #1
 800b2d6:	f300 80ad 	bgt.w	800b434 <_dtoa_r+0x88c>
 800b2da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2dc:	2a00      	cmp	r2, #0
 800b2de:	f000 80a5 	beq.w	800b42c <_dtoa_r+0x884>
 800b2e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b2e6:	9e08      	ldr	r6, [sp, #32]
 800b2e8:	9d05      	ldr	r5, [sp, #20]
 800b2ea:	9a05      	ldr	r2, [sp, #20]
 800b2ec:	441a      	add	r2, r3
 800b2ee:	9205      	str	r2, [sp, #20]
 800b2f0:	9a06      	ldr	r2, [sp, #24]
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	441a      	add	r2, r3
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	9206      	str	r2, [sp, #24]
 800b2fa:	f000 fc3d 	bl	800bb78 <__i2b>
 800b2fe:	4607      	mov	r7, r0
 800b300:	b165      	cbz	r5, 800b31c <_dtoa_r+0x774>
 800b302:	9b06      	ldr	r3, [sp, #24]
 800b304:	2b00      	cmp	r3, #0
 800b306:	dd09      	ble.n	800b31c <_dtoa_r+0x774>
 800b308:	42ab      	cmp	r3, r5
 800b30a:	9a05      	ldr	r2, [sp, #20]
 800b30c:	bfa8      	it	ge
 800b30e:	462b      	movge	r3, r5
 800b310:	1ad2      	subs	r2, r2, r3
 800b312:	9205      	str	r2, [sp, #20]
 800b314:	9a06      	ldr	r2, [sp, #24]
 800b316:	1aed      	subs	r5, r5, r3
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	9306      	str	r3, [sp, #24]
 800b31c:	9b08      	ldr	r3, [sp, #32]
 800b31e:	b1f3      	cbz	r3, 800b35e <_dtoa_r+0x7b6>
 800b320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b322:	2b00      	cmp	r3, #0
 800b324:	f000 80a3 	beq.w	800b46e <_dtoa_r+0x8c6>
 800b328:	2e00      	cmp	r6, #0
 800b32a:	dd10      	ble.n	800b34e <_dtoa_r+0x7a6>
 800b32c:	4639      	mov	r1, r7
 800b32e:	4632      	mov	r2, r6
 800b330:	4620      	mov	r0, r4
 800b332:	f000 fce1 	bl	800bcf8 <__pow5mult>
 800b336:	4652      	mov	r2, sl
 800b338:	4601      	mov	r1, r0
 800b33a:	4607      	mov	r7, r0
 800b33c:	4620      	mov	r0, r4
 800b33e:	f000 fc31 	bl	800bba4 <__multiply>
 800b342:	4651      	mov	r1, sl
 800b344:	4680      	mov	r8, r0
 800b346:	4620      	mov	r0, r4
 800b348:	f000 fb60 	bl	800ba0c <_Bfree>
 800b34c:	46c2      	mov	sl, r8
 800b34e:	9b08      	ldr	r3, [sp, #32]
 800b350:	1b9a      	subs	r2, r3, r6
 800b352:	d004      	beq.n	800b35e <_dtoa_r+0x7b6>
 800b354:	4651      	mov	r1, sl
 800b356:	4620      	mov	r0, r4
 800b358:	f000 fcce 	bl	800bcf8 <__pow5mult>
 800b35c:	4682      	mov	sl, r0
 800b35e:	2101      	movs	r1, #1
 800b360:	4620      	mov	r0, r4
 800b362:	f000 fc09 	bl	800bb78 <__i2b>
 800b366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b368:	2b00      	cmp	r3, #0
 800b36a:	4606      	mov	r6, r0
 800b36c:	f340 8081 	ble.w	800b472 <_dtoa_r+0x8ca>
 800b370:	461a      	mov	r2, r3
 800b372:	4601      	mov	r1, r0
 800b374:	4620      	mov	r0, r4
 800b376:	f000 fcbf 	bl	800bcf8 <__pow5mult>
 800b37a:	9b07      	ldr	r3, [sp, #28]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	4606      	mov	r6, r0
 800b380:	dd7a      	ble.n	800b478 <_dtoa_r+0x8d0>
 800b382:	f04f 0800 	mov.w	r8, #0
 800b386:	6933      	ldr	r3, [r6, #16]
 800b388:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b38c:	6918      	ldr	r0, [r3, #16]
 800b38e:	f000 fba5 	bl	800badc <__hi0bits>
 800b392:	f1c0 0020 	rsb	r0, r0, #32
 800b396:	9b06      	ldr	r3, [sp, #24]
 800b398:	4418      	add	r0, r3
 800b39a:	f010 001f 	ands.w	r0, r0, #31
 800b39e:	f000 8094 	beq.w	800b4ca <_dtoa_r+0x922>
 800b3a2:	f1c0 0320 	rsb	r3, r0, #32
 800b3a6:	2b04      	cmp	r3, #4
 800b3a8:	f340 8085 	ble.w	800b4b6 <_dtoa_r+0x90e>
 800b3ac:	9b05      	ldr	r3, [sp, #20]
 800b3ae:	f1c0 001c 	rsb	r0, r0, #28
 800b3b2:	4403      	add	r3, r0
 800b3b4:	9305      	str	r3, [sp, #20]
 800b3b6:	9b06      	ldr	r3, [sp, #24]
 800b3b8:	4403      	add	r3, r0
 800b3ba:	4405      	add	r5, r0
 800b3bc:	9306      	str	r3, [sp, #24]
 800b3be:	9b05      	ldr	r3, [sp, #20]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	dd05      	ble.n	800b3d0 <_dtoa_r+0x828>
 800b3c4:	4651      	mov	r1, sl
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f000 fcef 	bl	800bdac <__lshift>
 800b3ce:	4682      	mov	sl, r0
 800b3d0:	9b06      	ldr	r3, [sp, #24]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	dd05      	ble.n	800b3e2 <_dtoa_r+0x83a>
 800b3d6:	4631      	mov	r1, r6
 800b3d8:	461a      	mov	r2, r3
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f000 fce6 	bl	800bdac <__lshift>
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d072      	beq.n	800b4ce <_dtoa_r+0x926>
 800b3e8:	4631      	mov	r1, r6
 800b3ea:	4650      	mov	r0, sl
 800b3ec:	f000 fd4a 	bl	800be84 <__mcmp>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	da6c      	bge.n	800b4ce <_dtoa_r+0x926>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	4651      	mov	r1, sl
 800b3f8:	220a      	movs	r2, #10
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 fb28 	bl	800ba50 <__multadd>
 800b400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b402:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b406:	4682      	mov	sl, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 81b0 	beq.w	800b76e <_dtoa_r+0xbc6>
 800b40e:	2300      	movs	r3, #0
 800b410:	4639      	mov	r1, r7
 800b412:	220a      	movs	r2, #10
 800b414:	4620      	mov	r0, r4
 800b416:	f000 fb1b 	bl	800ba50 <__multadd>
 800b41a:	9b01      	ldr	r3, [sp, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	4607      	mov	r7, r0
 800b420:	f300 8096 	bgt.w	800b550 <_dtoa_r+0x9a8>
 800b424:	9b07      	ldr	r3, [sp, #28]
 800b426:	2b02      	cmp	r3, #2
 800b428:	dc59      	bgt.n	800b4de <_dtoa_r+0x936>
 800b42a:	e091      	b.n	800b550 <_dtoa_r+0x9a8>
 800b42c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b42e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b432:	e758      	b.n	800b2e6 <_dtoa_r+0x73e>
 800b434:	9b04      	ldr	r3, [sp, #16]
 800b436:	1e5e      	subs	r6, r3, #1
 800b438:	9b08      	ldr	r3, [sp, #32]
 800b43a:	42b3      	cmp	r3, r6
 800b43c:	bfbf      	itttt	lt
 800b43e:	9b08      	ldrlt	r3, [sp, #32]
 800b440:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b442:	9608      	strlt	r6, [sp, #32]
 800b444:	1af3      	sublt	r3, r6, r3
 800b446:	bfb4      	ite	lt
 800b448:	18d2      	addlt	r2, r2, r3
 800b44a:	1b9e      	subge	r6, r3, r6
 800b44c:	9b04      	ldr	r3, [sp, #16]
 800b44e:	bfbc      	itt	lt
 800b450:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b452:	2600      	movlt	r6, #0
 800b454:	2b00      	cmp	r3, #0
 800b456:	bfb7      	itett	lt
 800b458:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b45c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b460:	1a9d      	sublt	r5, r3, r2
 800b462:	2300      	movlt	r3, #0
 800b464:	e741      	b.n	800b2ea <_dtoa_r+0x742>
 800b466:	9e08      	ldr	r6, [sp, #32]
 800b468:	9d05      	ldr	r5, [sp, #20]
 800b46a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b46c:	e748      	b.n	800b300 <_dtoa_r+0x758>
 800b46e:	9a08      	ldr	r2, [sp, #32]
 800b470:	e770      	b.n	800b354 <_dtoa_r+0x7ac>
 800b472:	9b07      	ldr	r3, [sp, #28]
 800b474:	2b01      	cmp	r3, #1
 800b476:	dc19      	bgt.n	800b4ac <_dtoa_r+0x904>
 800b478:	9b02      	ldr	r3, [sp, #8]
 800b47a:	b9bb      	cbnz	r3, 800b4ac <_dtoa_r+0x904>
 800b47c:	9b03      	ldr	r3, [sp, #12]
 800b47e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b482:	b99b      	cbnz	r3, 800b4ac <_dtoa_r+0x904>
 800b484:	9b03      	ldr	r3, [sp, #12]
 800b486:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b48a:	0d1b      	lsrs	r3, r3, #20
 800b48c:	051b      	lsls	r3, r3, #20
 800b48e:	b183      	cbz	r3, 800b4b2 <_dtoa_r+0x90a>
 800b490:	9b05      	ldr	r3, [sp, #20]
 800b492:	3301      	adds	r3, #1
 800b494:	9305      	str	r3, [sp, #20]
 800b496:	9b06      	ldr	r3, [sp, #24]
 800b498:	3301      	adds	r3, #1
 800b49a:	9306      	str	r3, [sp, #24]
 800b49c:	f04f 0801 	mov.w	r8, #1
 800b4a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f47f af6f 	bne.w	800b386 <_dtoa_r+0x7de>
 800b4a8:	2001      	movs	r0, #1
 800b4aa:	e774      	b.n	800b396 <_dtoa_r+0x7ee>
 800b4ac:	f04f 0800 	mov.w	r8, #0
 800b4b0:	e7f6      	b.n	800b4a0 <_dtoa_r+0x8f8>
 800b4b2:	4698      	mov	r8, r3
 800b4b4:	e7f4      	b.n	800b4a0 <_dtoa_r+0x8f8>
 800b4b6:	d082      	beq.n	800b3be <_dtoa_r+0x816>
 800b4b8:	9a05      	ldr	r2, [sp, #20]
 800b4ba:	331c      	adds	r3, #28
 800b4bc:	441a      	add	r2, r3
 800b4be:	9205      	str	r2, [sp, #20]
 800b4c0:	9a06      	ldr	r2, [sp, #24]
 800b4c2:	441a      	add	r2, r3
 800b4c4:	441d      	add	r5, r3
 800b4c6:	9206      	str	r2, [sp, #24]
 800b4c8:	e779      	b.n	800b3be <_dtoa_r+0x816>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	e7f4      	b.n	800b4b8 <_dtoa_r+0x910>
 800b4ce:	9b04      	ldr	r3, [sp, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	dc37      	bgt.n	800b544 <_dtoa_r+0x99c>
 800b4d4:	9b07      	ldr	r3, [sp, #28]
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	dd34      	ble.n	800b544 <_dtoa_r+0x99c>
 800b4da:	9b04      	ldr	r3, [sp, #16]
 800b4dc:	9301      	str	r3, [sp, #4]
 800b4de:	9b01      	ldr	r3, [sp, #4]
 800b4e0:	b963      	cbnz	r3, 800b4fc <_dtoa_r+0x954>
 800b4e2:	4631      	mov	r1, r6
 800b4e4:	2205      	movs	r2, #5
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f000 fab2 	bl	800ba50 <__multadd>
 800b4ec:	4601      	mov	r1, r0
 800b4ee:	4606      	mov	r6, r0
 800b4f0:	4650      	mov	r0, sl
 800b4f2:	f000 fcc7 	bl	800be84 <__mcmp>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	f73f adbb 	bgt.w	800b072 <_dtoa_r+0x4ca>
 800b4fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4fe:	9d00      	ldr	r5, [sp, #0]
 800b500:	ea6f 0b03 	mvn.w	fp, r3
 800b504:	f04f 0800 	mov.w	r8, #0
 800b508:	4631      	mov	r1, r6
 800b50a:	4620      	mov	r0, r4
 800b50c:	f000 fa7e 	bl	800ba0c <_Bfree>
 800b510:	2f00      	cmp	r7, #0
 800b512:	f43f aeab 	beq.w	800b26c <_dtoa_r+0x6c4>
 800b516:	f1b8 0f00 	cmp.w	r8, #0
 800b51a:	d005      	beq.n	800b528 <_dtoa_r+0x980>
 800b51c:	45b8      	cmp	r8, r7
 800b51e:	d003      	beq.n	800b528 <_dtoa_r+0x980>
 800b520:	4641      	mov	r1, r8
 800b522:	4620      	mov	r0, r4
 800b524:	f000 fa72 	bl	800ba0c <_Bfree>
 800b528:	4639      	mov	r1, r7
 800b52a:	4620      	mov	r0, r4
 800b52c:	f000 fa6e 	bl	800ba0c <_Bfree>
 800b530:	e69c      	b.n	800b26c <_dtoa_r+0x6c4>
 800b532:	2600      	movs	r6, #0
 800b534:	4637      	mov	r7, r6
 800b536:	e7e1      	b.n	800b4fc <_dtoa_r+0x954>
 800b538:	46bb      	mov	fp, r7
 800b53a:	4637      	mov	r7, r6
 800b53c:	e599      	b.n	800b072 <_dtoa_r+0x4ca>
 800b53e:	bf00      	nop
 800b540:	40240000 	.word	0x40240000
 800b544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b546:	2b00      	cmp	r3, #0
 800b548:	f000 80c8 	beq.w	800b6dc <_dtoa_r+0xb34>
 800b54c:	9b04      	ldr	r3, [sp, #16]
 800b54e:	9301      	str	r3, [sp, #4]
 800b550:	2d00      	cmp	r5, #0
 800b552:	dd05      	ble.n	800b560 <_dtoa_r+0x9b8>
 800b554:	4639      	mov	r1, r7
 800b556:	462a      	mov	r2, r5
 800b558:	4620      	mov	r0, r4
 800b55a:	f000 fc27 	bl	800bdac <__lshift>
 800b55e:	4607      	mov	r7, r0
 800b560:	f1b8 0f00 	cmp.w	r8, #0
 800b564:	d05b      	beq.n	800b61e <_dtoa_r+0xa76>
 800b566:	6879      	ldr	r1, [r7, #4]
 800b568:	4620      	mov	r0, r4
 800b56a:	f000 fa0f 	bl	800b98c <_Balloc>
 800b56e:	4605      	mov	r5, r0
 800b570:	b928      	cbnz	r0, 800b57e <_dtoa_r+0x9d6>
 800b572:	4b83      	ldr	r3, [pc, #524]	; (800b780 <_dtoa_r+0xbd8>)
 800b574:	4602      	mov	r2, r0
 800b576:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b57a:	f7ff bb2e 	b.w	800abda <_dtoa_r+0x32>
 800b57e:	693a      	ldr	r2, [r7, #16]
 800b580:	3202      	adds	r2, #2
 800b582:	0092      	lsls	r2, r2, #2
 800b584:	f107 010c 	add.w	r1, r7, #12
 800b588:	300c      	adds	r0, #12
 800b58a:	f001 f801 	bl	800c590 <memcpy>
 800b58e:	2201      	movs	r2, #1
 800b590:	4629      	mov	r1, r5
 800b592:	4620      	mov	r0, r4
 800b594:	f000 fc0a 	bl	800bdac <__lshift>
 800b598:	9b00      	ldr	r3, [sp, #0]
 800b59a:	3301      	adds	r3, #1
 800b59c:	9304      	str	r3, [sp, #16]
 800b59e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	9308      	str	r3, [sp, #32]
 800b5a6:	9b02      	ldr	r3, [sp, #8]
 800b5a8:	f003 0301 	and.w	r3, r3, #1
 800b5ac:	46b8      	mov	r8, r7
 800b5ae:	9306      	str	r3, [sp, #24]
 800b5b0:	4607      	mov	r7, r0
 800b5b2:	9b04      	ldr	r3, [sp, #16]
 800b5b4:	4631      	mov	r1, r6
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	4650      	mov	r0, sl
 800b5ba:	9301      	str	r3, [sp, #4]
 800b5bc:	f7ff fa69 	bl	800aa92 <quorem>
 800b5c0:	4641      	mov	r1, r8
 800b5c2:	9002      	str	r0, [sp, #8]
 800b5c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b5c8:	4650      	mov	r0, sl
 800b5ca:	f000 fc5b 	bl	800be84 <__mcmp>
 800b5ce:	463a      	mov	r2, r7
 800b5d0:	9005      	str	r0, [sp, #20]
 800b5d2:	4631      	mov	r1, r6
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f000 fc71 	bl	800bebc <__mdiff>
 800b5da:	68c2      	ldr	r2, [r0, #12]
 800b5dc:	4605      	mov	r5, r0
 800b5de:	bb02      	cbnz	r2, 800b622 <_dtoa_r+0xa7a>
 800b5e0:	4601      	mov	r1, r0
 800b5e2:	4650      	mov	r0, sl
 800b5e4:	f000 fc4e 	bl	800be84 <__mcmp>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b5f0:	f000 fa0c 	bl	800ba0c <_Bfree>
 800b5f4:	9b07      	ldr	r3, [sp, #28]
 800b5f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5f8:	9d04      	ldr	r5, [sp, #16]
 800b5fa:	ea43 0102 	orr.w	r1, r3, r2
 800b5fe:	9b06      	ldr	r3, [sp, #24]
 800b600:	4319      	orrs	r1, r3
 800b602:	d110      	bne.n	800b626 <_dtoa_r+0xa7e>
 800b604:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b608:	d029      	beq.n	800b65e <_dtoa_r+0xab6>
 800b60a:	9b05      	ldr	r3, [sp, #20]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	dd02      	ble.n	800b616 <_dtoa_r+0xa6e>
 800b610:	9b02      	ldr	r3, [sp, #8]
 800b612:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b616:	9b01      	ldr	r3, [sp, #4]
 800b618:	f883 9000 	strb.w	r9, [r3]
 800b61c:	e774      	b.n	800b508 <_dtoa_r+0x960>
 800b61e:	4638      	mov	r0, r7
 800b620:	e7ba      	b.n	800b598 <_dtoa_r+0x9f0>
 800b622:	2201      	movs	r2, #1
 800b624:	e7e1      	b.n	800b5ea <_dtoa_r+0xa42>
 800b626:	9b05      	ldr	r3, [sp, #20]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	db04      	blt.n	800b636 <_dtoa_r+0xa8e>
 800b62c:	9907      	ldr	r1, [sp, #28]
 800b62e:	430b      	orrs	r3, r1
 800b630:	9906      	ldr	r1, [sp, #24]
 800b632:	430b      	orrs	r3, r1
 800b634:	d120      	bne.n	800b678 <_dtoa_r+0xad0>
 800b636:	2a00      	cmp	r2, #0
 800b638:	dded      	ble.n	800b616 <_dtoa_r+0xa6e>
 800b63a:	4651      	mov	r1, sl
 800b63c:	2201      	movs	r2, #1
 800b63e:	4620      	mov	r0, r4
 800b640:	f000 fbb4 	bl	800bdac <__lshift>
 800b644:	4631      	mov	r1, r6
 800b646:	4682      	mov	sl, r0
 800b648:	f000 fc1c 	bl	800be84 <__mcmp>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	dc03      	bgt.n	800b658 <_dtoa_r+0xab0>
 800b650:	d1e1      	bne.n	800b616 <_dtoa_r+0xa6e>
 800b652:	f019 0f01 	tst.w	r9, #1
 800b656:	d0de      	beq.n	800b616 <_dtoa_r+0xa6e>
 800b658:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b65c:	d1d8      	bne.n	800b610 <_dtoa_r+0xa68>
 800b65e:	9a01      	ldr	r2, [sp, #4]
 800b660:	2339      	movs	r3, #57	; 0x39
 800b662:	7013      	strb	r3, [r2, #0]
 800b664:	462b      	mov	r3, r5
 800b666:	461d      	mov	r5, r3
 800b668:	3b01      	subs	r3, #1
 800b66a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b66e:	2a39      	cmp	r2, #57	; 0x39
 800b670:	d06c      	beq.n	800b74c <_dtoa_r+0xba4>
 800b672:	3201      	adds	r2, #1
 800b674:	701a      	strb	r2, [r3, #0]
 800b676:	e747      	b.n	800b508 <_dtoa_r+0x960>
 800b678:	2a00      	cmp	r2, #0
 800b67a:	dd07      	ble.n	800b68c <_dtoa_r+0xae4>
 800b67c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b680:	d0ed      	beq.n	800b65e <_dtoa_r+0xab6>
 800b682:	9a01      	ldr	r2, [sp, #4]
 800b684:	f109 0301 	add.w	r3, r9, #1
 800b688:	7013      	strb	r3, [r2, #0]
 800b68a:	e73d      	b.n	800b508 <_dtoa_r+0x960>
 800b68c:	9b04      	ldr	r3, [sp, #16]
 800b68e:	9a08      	ldr	r2, [sp, #32]
 800b690:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b694:	4293      	cmp	r3, r2
 800b696:	d043      	beq.n	800b720 <_dtoa_r+0xb78>
 800b698:	4651      	mov	r1, sl
 800b69a:	2300      	movs	r3, #0
 800b69c:	220a      	movs	r2, #10
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f000 f9d6 	bl	800ba50 <__multadd>
 800b6a4:	45b8      	cmp	r8, r7
 800b6a6:	4682      	mov	sl, r0
 800b6a8:	f04f 0300 	mov.w	r3, #0
 800b6ac:	f04f 020a 	mov.w	r2, #10
 800b6b0:	4641      	mov	r1, r8
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	d107      	bne.n	800b6c6 <_dtoa_r+0xb1e>
 800b6b6:	f000 f9cb 	bl	800ba50 <__multadd>
 800b6ba:	4680      	mov	r8, r0
 800b6bc:	4607      	mov	r7, r0
 800b6be:	9b04      	ldr	r3, [sp, #16]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	9304      	str	r3, [sp, #16]
 800b6c4:	e775      	b.n	800b5b2 <_dtoa_r+0xa0a>
 800b6c6:	f000 f9c3 	bl	800ba50 <__multadd>
 800b6ca:	4639      	mov	r1, r7
 800b6cc:	4680      	mov	r8, r0
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	220a      	movs	r2, #10
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f000 f9bc 	bl	800ba50 <__multadd>
 800b6d8:	4607      	mov	r7, r0
 800b6da:	e7f0      	b.n	800b6be <_dtoa_r+0xb16>
 800b6dc:	9b04      	ldr	r3, [sp, #16]
 800b6de:	9301      	str	r3, [sp, #4]
 800b6e0:	9d00      	ldr	r5, [sp, #0]
 800b6e2:	4631      	mov	r1, r6
 800b6e4:	4650      	mov	r0, sl
 800b6e6:	f7ff f9d4 	bl	800aa92 <quorem>
 800b6ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b6ee:	9b00      	ldr	r3, [sp, #0]
 800b6f0:	f805 9b01 	strb.w	r9, [r5], #1
 800b6f4:	1aea      	subs	r2, r5, r3
 800b6f6:	9b01      	ldr	r3, [sp, #4]
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	dd07      	ble.n	800b70c <_dtoa_r+0xb64>
 800b6fc:	4651      	mov	r1, sl
 800b6fe:	2300      	movs	r3, #0
 800b700:	220a      	movs	r2, #10
 800b702:	4620      	mov	r0, r4
 800b704:	f000 f9a4 	bl	800ba50 <__multadd>
 800b708:	4682      	mov	sl, r0
 800b70a:	e7ea      	b.n	800b6e2 <_dtoa_r+0xb3a>
 800b70c:	9b01      	ldr	r3, [sp, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	bfc8      	it	gt
 800b712:	461d      	movgt	r5, r3
 800b714:	9b00      	ldr	r3, [sp, #0]
 800b716:	bfd8      	it	le
 800b718:	2501      	movle	r5, #1
 800b71a:	441d      	add	r5, r3
 800b71c:	f04f 0800 	mov.w	r8, #0
 800b720:	4651      	mov	r1, sl
 800b722:	2201      	movs	r2, #1
 800b724:	4620      	mov	r0, r4
 800b726:	f000 fb41 	bl	800bdac <__lshift>
 800b72a:	4631      	mov	r1, r6
 800b72c:	4682      	mov	sl, r0
 800b72e:	f000 fba9 	bl	800be84 <__mcmp>
 800b732:	2800      	cmp	r0, #0
 800b734:	dc96      	bgt.n	800b664 <_dtoa_r+0xabc>
 800b736:	d102      	bne.n	800b73e <_dtoa_r+0xb96>
 800b738:	f019 0f01 	tst.w	r9, #1
 800b73c:	d192      	bne.n	800b664 <_dtoa_r+0xabc>
 800b73e:	462b      	mov	r3, r5
 800b740:	461d      	mov	r5, r3
 800b742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b746:	2a30      	cmp	r2, #48	; 0x30
 800b748:	d0fa      	beq.n	800b740 <_dtoa_r+0xb98>
 800b74a:	e6dd      	b.n	800b508 <_dtoa_r+0x960>
 800b74c:	9a00      	ldr	r2, [sp, #0]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d189      	bne.n	800b666 <_dtoa_r+0xabe>
 800b752:	f10b 0b01 	add.w	fp, fp, #1
 800b756:	2331      	movs	r3, #49	; 0x31
 800b758:	e796      	b.n	800b688 <_dtoa_r+0xae0>
 800b75a:	4b0a      	ldr	r3, [pc, #40]	; (800b784 <_dtoa_r+0xbdc>)
 800b75c:	f7ff ba99 	b.w	800ac92 <_dtoa_r+0xea>
 800b760:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b762:	2b00      	cmp	r3, #0
 800b764:	f47f aa6d 	bne.w	800ac42 <_dtoa_r+0x9a>
 800b768:	4b07      	ldr	r3, [pc, #28]	; (800b788 <_dtoa_r+0xbe0>)
 800b76a:	f7ff ba92 	b.w	800ac92 <_dtoa_r+0xea>
 800b76e:	9b01      	ldr	r3, [sp, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	dcb5      	bgt.n	800b6e0 <_dtoa_r+0xb38>
 800b774:	9b07      	ldr	r3, [sp, #28]
 800b776:	2b02      	cmp	r3, #2
 800b778:	f73f aeb1 	bgt.w	800b4de <_dtoa_r+0x936>
 800b77c:	e7b0      	b.n	800b6e0 <_dtoa_r+0xb38>
 800b77e:	bf00      	nop
 800b780:	0800c938 	.word	0x0800c938
 800b784:	0800c898 	.word	0x0800c898
 800b788:	0800c8bc 	.word	0x0800c8bc

0800b78c <_free_r>:
 800b78c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b78e:	2900      	cmp	r1, #0
 800b790:	d044      	beq.n	800b81c <_free_r+0x90>
 800b792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b796:	9001      	str	r0, [sp, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	f1a1 0404 	sub.w	r4, r1, #4
 800b79e:	bfb8      	it	lt
 800b7a0:	18e4      	addlt	r4, r4, r3
 800b7a2:	f000 f8e7 	bl	800b974 <__malloc_lock>
 800b7a6:	4a1e      	ldr	r2, [pc, #120]	; (800b820 <_free_r+0x94>)
 800b7a8:	9801      	ldr	r0, [sp, #4]
 800b7aa:	6813      	ldr	r3, [r2, #0]
 800b7ac:	b933      	cbnz	r3, 800b7bc <_free_r+0x30>
 800b7ae:	6063      	str	r3, [r4, #4]
 800b7b0:	6014      	str	r4, [r2, #0]
 800b7b2:	b003      	add	sp, #12
 800b7b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7b8:	f000 b8e2 	b.w	800b980 <__malloc_unlock>
 800b7bc:	42a3      	cmp	r3, r4
 800b7be:	d908      	bls.n	800b7d2 <_free_r+0x46>
 800b7c0:	6825      	ldr	r5, [r4, #0]
 800b7c2:	1961      	adds	r1, r4, r5
 800b7c4:	428b      	cmp	r3, r1
 800b7c6:	bf01      	itttt	eq
 800b7c8:	6819      	ldreq	r1, [r3, #0]
 800b7ca:	685b      	ldreq	r3, [r3, #4]
 800b7cc:	1949      	addeq	r1, r1, r5
 800b7ce:	6021      	streq	r1, [r4, #0]
 800b7d0:	e7ed      	b.n	800b7ae <_free_r+0x22>
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	b10b      	cbz	r3, 800b7dc <_free_r+0x50>
 800b7d8:	42a3      	cmp	r3, r4
 800b7da:	d9fa      	bls.n	800b7d2 <_free_r+0x46>
 800b7dc:	6811      	ldr	r1, [r2, #0]
 800b7de:	1855      	adds	r5, r2, r1
 800b7e0:	42a5      	cmp	r5, r4
 800b7e2:	d10b      	bne.n	800b7fc <_free_r+0x70>
 800b7e4:	6824      	ldr	r4, [r4, #0]
 800b7e6:	4421      	add	r1, r4
 800b7e8:	1854      	adds	r4, r2, r1
 800b7ea:	42a3      	cmp	r3, r4
 800b7ec:	6011      	str	r1, [r2, #0]
 800b7ee:	d1e0      	bne.n	800b7b2 <_free_r+0x26>
 800b7f0:	681c      	ldr	r4, [r3, #0]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	6053      	str	r3, [r2, #4]
 800b7f6:	440c      	add	r4, r1
 800b7f8:	6014      	str	r4, [r2, #0]
 800b7fa:	e7da      	b.n	800b7b2 <_free_r+0x26>
 800b7fc:	d902      	bls.n	800b804 <_free_r+0x78>
 800b7fe:	230c      	movs	r3, #12
 800b800:	6003      	str	r3, [r0, #0]
 800b802:	e7d6      	b.n	800b7b2 <_free_r+0x26>
 800b804:	6825      	ldr	r5, [r4, #0]
 800b806:	1961      	adds	r1, r4, r5
 800b808:	428b      	cmp	r3, r1
 800b80a:	bf04      	itt	eq
 800b80c:	6819      	ldreq	r1, [r3, #0]
 800b80e:	685b      	ldreq	r3, [r3, #4]
 800b810:	6063      	str	r3, [r4, #4]
 800b812:	bf04      	itt	eq
 800b814:	1949      	addeq	r1, r1, r5
 800b816:	6021      	streq	r1, [r4, #0]
 800b818:	6054      	str	r4, [r2, #4]
 800b81a:	e7ca      	b.n	800b7b2 <_free_r+0x26>
 800b81c:	b003      	add	sp, #12
 800b81e:	bd30      	pop	{r4, r5, pc}
 800b820:	2000080c 	.word	0x2000080c

0800b824 <malloc>:
 800b824:	4b02      	ldr	r3, [pc, #8]	; (800b830 <malloc+0xc>)
 800b826:	4601      	mov	r1, r0
 800b828:	6818      	ldr	r0, [r3, #0]
 800b82a:	f000 b823 	b.w	800b874 <_malloc_r>
 800b82e:	bf00      	nop
 800b830:	20000070 	.word	0x20000070

0800b834 <sbrk_aligned>:
 800b834:	b570      	push	{r4, r5, r6, lr}
 800b836:	4e0e      	ldr	r6, [pc, #56]	; (800b870 <sbrk_aligned+0x3c>)
 800b838:	460c      	mov	r4, r1
 800b83a:	6831      	ldr	r1, [r6, #0]
 800b83c:	4605      	mov	r5, r0
 800b83e:	b911      	cbnz	r1, 800b846 <sbrk_aligned+0x12>
 800b840:	f000 fe96 	bl	800c570 <_sbrk_r>
 800b844:	6030      	str	r0, [r6, #0]
 800b846:	4621      	mov	r1, r4
 800b848:	4628      	mov	r0, r5
 800b84a:	f000 fe91 	bl	800c570 <_sbrk_r>
 800b84e:	1c43      	adds	r3, r0, #1
 800b850:	d00a      	beq.n	800b868 <sbrk_aligned+0x34>
 800b852:	1cc4      	adds	r4, r0, #3
 800b854:	f024 0403 	bic.w	r4, r4, #3
 800b858:	42a0      	cmp	r0, r4
 800b85a:	d007      	beq.n	800b86c <sbrk_aligned+0x38>
 800b85c:	1a21      	subs	r1, r4, r0
 800b85e:	4628      	mov	r0, r5
 800b860:	f000 fe86 	bl	800c570 <_sbrk_r>
 800b864:	3001      	adds	r0, #1
 800b866:	d101      	bne.n	800b86c <sbrk_aligned+0x38>
 800b868:	f04f 34ff 	mov.w	r4, #4294967295
 800b86c:	4620      	mov	r0, r4
 800b86e:	bd70      	pop	{r4, r5, r6, pc}
 800b870:	20000810 	.word	0x20000810

0800b874 <_malloc_r>:
 800b874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b878:	1ccd      	adds	r5, r1, #3
 800b87a:	f025 0503 	bic.w	r5, r5, #3
 800b87e:	3508      	adds	r5, #8
 800b880:	2d0c      	cmp	r5, #12
 800b882:	bf38      	it	cc
 800b884:	250c      	movcc	r5, #12
 800b886:	2d00      	cmp	r5, #0
 800b888:	4607      	mov	r7, r0
 800b88a:	db01      	blt.n	800b890 <_malloc_r+0x1c>
 800b88c:	42a9      	cmp	r1, r5
 800b88e:	d905      	bls.n	800b89c <_malloc_r+0x28>
 800b890:	230c      	movs	r3, #12
 800b892:	603b      	str	r3, [r7, #0]
 800b894:	2600      	movs	r6, #0
 800b896:	4630      	mov	r0, r6
 800b898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b89c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b970 <_malloc_r+0xfc>
 800b8a0:	f000 f868 	bl	800b974 <__malloc_lock>
 800b8a4:	f8d8 3000 	ldr.w	r3, [r8]
 800b8a8:	461c      	mov	r4, r3
 800b8aa:	bb5c      	cbnz	r4, 800b904 <_malloc_r+0x90>
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	f7ff ffc0 	bl	800b834 <sbrk_aligned>
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	d155      	bne.n	800b966 <_malloc_r+0xf2>
 800b8ba:	f8d8 4000 	ldr.w	r4, [r8]
 800b8be:	4626      	mov	r6, r4
 800b8c0:	2e00      	cmp	r6, #0
 800b8c2:	d145      	bne.n	800b950 <_malloc_r+0xdc>
 800b8c4:	2c00      	cmp	r4, #0
 800b8c6:	d048      	beq.n	800b95a <_malloc_r+0xe6>
 800b8c8:	6823      	ldr	r3, [r4, #0]
 800b8ca:	4631      	mov	r1, r6
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	eb04 0903 	add.w	r9, r4, r3
 800b8d2:	f000 fe4d 	bl	800c570 <_sbrk_r>
 800b8d6:	4581      	cmp	r9, r0
 800b8d8:	d13f      	bne.n	800b95a <_malloc_r+0xe6>
 800b8da:	6821      	ldr	r1, [r4, #0]
 800b8dc:	1a6d      	subs	r5, r5, r1
 800b8de:	4629      	mov	r1, r5
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	f7ff ffa7 	bl	800b834 <sbrk_aligned>
 800b8e6:	3001      	adds	r0, #1
 800b8e8:	d037      	beq.n	800b95a <_malloc_r+0xe6>
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	442b      	add	r3, r5
 800b8ee:	6023      	str	r3, [r4, #0]
 800b8f0:	f8d8 3000 	ldr.w	r3, [r8]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d038      	beq.n	800b96a <_malloc_r+0xf6>
 800b8f8:	685a      	ldr	r2, [r3, #4]
 800b8fa:	42a2      	cmp	r2, r4
 800b8fc:	d12b      	bne.n	800b956 <_malloc_r+0xe2>
 800b8fe:	2200      	movs	r2, #0
 800b900:	605a      	str	r2, [r3, #4]
 800b902:	e00f      	b.n	800b924 <_malloc_r+0xb0>
 800b904:	6822      	ldr	r2, [r4, #0]
 800b906:	1b52      	subs	r2, r2, r5
 800b908:	d41f      	bmi.n	800b94a <_malloc_r+0xd6>
 800b90a:	2a0b      	cmp	r2, #11
 800b90c:	d917      	bls.n	800b93e <_malloc_r+0xca>
 800b90e:	1961      	adds	r1, r4, r5
 800b910:	42a3      	cmp	r3, r4
 800b912:	6025      	str	r5, [r4, #0]
 800b914:	bf18      	it	ne
 800b916:	6059      	strne	r1, [r3, #4]
 800b918:	6863      	ldr	r3, [r4, #4]
 800b91a:	bf08      	it	eq
 800b91c:	f8c8 1000 	streq.w	r1, [r8]
 800b920:	5162      	str	r2, [r4, r5]
 800b922:	604b      	str	r3, [r1, #4]
 800b924:	4638      	mov	r0, r7
 800b926:	f104 060b 	add.w	r6, r4, #11
 800b92a:	f000 f829 	bl	800b980 <__malloc_unlock>
 800b92e:	f026 0607 	bic.w	r6, r6, #7
 800b932:	1d23      	adds	r3, r4, #4
 800b934:	1af2      	subs	r2, r6, r3
 800b936:	d0ae      	beq.n	800b896 <_malloc_r+0x22>
 800b938:	1b9b      	subs	r3, r3, r6
 800b93a:	50a3      	str	r3, [r4, r2]
 800b93c:	e7ab      	b.n	800b896 <_malloc_r+0x22>
 800b93e:	42a3      	cmp	r3, r4
 800b940:	6862      	ldr	r2, [r4, #4]
 800b942:	d1dd      	bne.n	800b900 <_malloc_r+0x8c>
 800b944:	f8c8 2000 	str.w	r2, [r8]
 800b948:	e7ec      	b.n	800b924 <_malloc_r+0xb0>
 800b94a:	4623      	mov	r3, r4
 800b94c:	6864      	ldr	r4, [r4, #4]
 800b94e:	e7ac      	b.n	800b8aa <_malloc_r+0x36>
 800b950:	4634      	mov	r4, r6
 800b952:	6876      	ldr	r6, [r6, #4]
 800b954:	e7b4      	b.n	800b8c0 <_malloc_r+0x4c>
 800b956:	4613      	mov	r3, r2
 800b958:	e7cc      	b.n	800b8f4 <_malloc_r+0x80>
 800b95a:	230c      	movs	r3, #12
 800b95c:	603b      	str	r3, [r7, #0]
 800b95e:	4638      	mov	r0, r7
 800b960:	f000 f80e 	bl	800b980 <__malloc_unlock>
 800b964:	e797      	b.n	800b896 <_malloc_r+0x22>
 800b966:	6025      	str	r5, [r4, #0]
 800b968:	e7dc      	b.n	800b924 <_malloc_r+0xb0>
 800b96a:	605b      	str	r3, [r3, #4]
 800b96c:	deff      	udf	#255	; 0xff
 800b96e:	bf00      	nop
 800b970:	2000080c 	.word	0x2000080c

0800b974 <__malloc_lock>:
 800b974:	4801      	ldr	r0, [pc, #4]	; (800b97c <__malloc_lock+0x8>)
 800b976:	f7ff b88a 	b.w	800aa8e <__retarget_lock_acquire_recursive>
 800b97a:	bf00      	nop
 800b97c:	20000808 	.word	0x20000808

0800b980 <__malloc_unlock>:
 800b980:	4801      	ldr	r0, [pc, #4]	; (800b988 <__malloc_unlock+0x8>)
 800b982:	f7ff b885 	b.w	800aa90 <__retarget_lock_release_recursive>
 800b986:	bf00      	nop
 800b988:	20000808 	.word	0x20000808

0800b98c <_Balloc>:
 800b98c:	b570      	push	{r4, r5, r6, lr}
 800b98e:	69c6      	ldr	r6, [r0, #28]
 800b990:	4604      	mov	r4, r0
 800b992:	460d      	mov	r5, r1
 800b994:	b976      	cbnz	r6, 800b9b4 <_Balloc+0x28>
 800b996:	2010      	movs	r0, #16
 800b998:	f7ff ff44 	bl	800b824 <malloc>
 800b99c:	4602      	mov	r2, r0
 800b99e:	61e0      	str	r0, [r4, #28]
 800b9a0:	b920      	cbnz	r0, 800b9ac <_Balloc+0x20>
 800b9a2:	4b18      	ldr	r3, [pc, #96]	; (800ba04 <_Balloc+0x78>)
 800b9a4:	4818      	ldr	r0, [pc, #96]	; (800ba08 <_Balloc+0x7c>)
 800b9a6:	216b      	movs	r1, #107	; 0x6b
 800b9a8:	f000 fe00 	bl	800c5ac <__assert_func>
 800b9ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9b0:	6006      	str	r6, [r0, #0]
 800b9b2:	60c6      	str	r6, [r0, #12]
 800b9b4:	69e6      	ldr	r6, [r4, #28]
 800b9b6:	68f3      	ldr	r3, [r6, #12]
 800b9b8:	b183      	cbz	r3, 800b9dc <_Balloc+0x50>
 800b9ba:	69e3      	ldr	r3, [r4, #28]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b9c2:	b9b8      	cbnz	r0, 800b9f4 <_Balloc+0x68>
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	fa01 f605 	lsl.w	r6, r1, r5
 800b9ca:	1d72      	adds	r2, r6, #5
 800b9cc:	0092      	lsls	r2, r2, #2
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f000 fe0a 	bl	800c5e8 <_calloc_r>
 800b9d4:	b160      	cbz	r0, 800b9f0 <_Balloc+0x64>
 800b9d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b9da:	e00e      	b.n	800b9fa <_Balloc+0x6e>
 800b9dc:	2221      	movs	r2, #33	; 0x21
 800b9de:	2104      	movs	r1, #4
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	f000 fe01 	bl	800c5e8 <_calloc_r>
 800b9e6:	69e3      	ldr	r3, [r4, #28]
 800b9e8:	60f0      	str	r0, [r6, #12]
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1e4      	bne.n	800b9ba <_Balloc+0x2e>
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	bd70      	pop	{r4, r5, r6, pc}
 800b9f4:	6802      	ldr	r2, [r0, #0]
 800b9f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba00:	e7f7      	b.n	800b9f2 <_Balloc+0x66>
 800ba02:	bf00      	nop
 800ba04:	0800c8c9 	.word	0x0800c8c9
 800ba08:	0800c949 	.word	0x0800c949

0800ba0c <_Bfree>:
 800ba0c:	b570      	push	{r4, r5, r6, lr}
 800ba0e:	69c6      	ldr	r6, [r0, #28]
 800ba10:	4605      	mov	r5, r0
 800ba12:	460c      	mov	r4, r1
 800ba14:	b976      	cbnz	r6, 800ba34 <_Bfree+0x28>
 800ba16:	2010      	movs	r0, #16
 800ba18:	f7ff ff04 	bl	800b824 <malloc>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	61e8      	str	r0, [r5, #28]
 800ba20:	b920      	cbnz	r0, 800ba2c <_Bfree+0x20>
 800ba22:	4b09      	ldr	r3, [pc, #36]	; (800ba48 <_Bfree+0x3c>)
 800ba24:	4809      	ldr	r0, [pc, #36]	; (800ba4c <_Bfree+0x40>)
 800ba26:	218f      	movs	r1, #143	; 0x8f
 800ba28:	f000 fdc0 	bl	800c5ac <__assert_func>
 800ba2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba30:	6006      	str	r6, [r0, #0]
 800ba32:	60c6      	str	r6, [r0, #12]
 800ba34:	b13c      	cbz	r4, 800ba46 <_Bfree+0x3a>
 800ba36:	69eb      	ldr	r3, [r5, #28]
 800ba38:	6862      	ldr	r2, [r4, #4]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba40:	6021      	str	r1, [r4, #0]
 800ba42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba46:	bd70      	pop	{r4, r5, r6, pc}
 800ba48:	0800c8c9 	.word	0x0800c8c9
 800ba4c:	0800c949 	.word	0x0800c949

0800ba50 <__multadd>:
 800ba50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba54:	690d      	ldr	r5, [r1, #16]
 800ba56:	4607      	mov	r7, r0
 800ba58:	460c      	mov	r4, r1
 800ba5a:	461e      	mov	r6, r3
 800ba5c:	f101 0c14 	add.w	ip, r1, #20
 800ba60:	2000      	movs	r0, #0
 800ba62:	f8dc 3000 	ldr.w	r3, [ip]
 800ba66:	b299      	uxth	r1, r3
 800ba68:	fb02 6101 	mla	r1, r2, r1, r6
 800ba6c:	0c1e      	lsrs	r6, r3, #16
 800ba6e:	0c0b      	lsrs	r3, r1, #16
 800ba70:	fb02 3306 	mla	r3, r2, r6, r3
 800ba74:	b289      	uxth	r1, r1
 800ba76:	3001      	adds	r0, #1
 800ba78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba7c:	4285      	cmp	r5, r0
 800ba7e:	f84c 1b04 	str.w	r1, [ip], #4
 800ba82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba86:	dcec      	bgt.n	800ba62 <__multadd+0x12>
 800ba88:	b30e      	cbz	r6, 800bace <__multadd+0x7e>
 800ba8a:	68a3      	ldr	r3, [r4, #8]
 800ba8c:	42ab      	cmp	r3, r5
 800ba8e:	dc19      	bgt.n	800bac4 <__multadd+0x74>
 800ba90:	6861      	ldr	r1, [r4, #4]
 800ba92:	4638      	mov	r0, r7
 800ba94:	3101      	adds	r1, #1
 800ba96:	f7ff ff79 	bl	800b98c <_Balloc>
 800ba9a:	4680      	mov	r8, r0
 800ba9c:	b928      	cbnz	r0, 800baaa <__multadd+0x5a>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	4b0c      	ldr	r3, [pc, #48]	; (800bad4 <__multadd+0x84>)
 800baa2:	480d      	ldr	r0, [pc, #52]	; (800bad8 <__multadd+0x88>)
 800baa4:	21ba      	movs	r1, #186	; 0xba
 800baa6:	f000 fd81 	bl	800c5ac <__assert_func>
 800baaa:	6922      	ldr	r2, [r4, #16]
 800baac:	3202      	adds	r2, #2
 800baae:	f104 010c 	add.w	r1, r4, #12
 800bab2:	0092      	lsls	r2, r2, #2
 800bab4:	300c      	adds	r0, #12
 800bab6:	f000 fd6b 	bl	800c590 <memcpy>
 800baba:	4621      	mov	r1, r4
 800babc:	4638      	mov	r0, r7
 800babe:	f7ff ffa5 	bl	800ba0c <_Bfree>
 800bac2:	4644      	mov	r4, r8
 800bac4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bac8:	3501      	adds	r5, #1
 800baca:	615e      	str	r6, [r3, #20]
 800bacc:	6125      	str	r5, [r4, #16]
 800bace:	4620      	mov	r0, r4
 800bad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bad4:	0800c938 	.word	0x0800c938
 800bad8:	0800c949 	.word	0x0800c949

0800badc <__hi0bits>:
 800badc:	0c03      	lsrs	r3, r0, #16
 800bade:	041b      	lsls	r3, r3, #16
 800bae0:	b9d3      	cbnz	r3, 800bb18 <__hi0bits+0x3c>
 800bae2:	0400      	lsls	r0, r0, #16
 800bae4:	2310      	movs	r3, #16
 800bae6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800baea:	bf04      	itt	eq
 800baec:	0200      	lsleq	r0, r0, #8
 800baee:	3308      	addeq	r3, #8
 800baf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800baf4:	bf04      	itt	eq
 800baf6:	0100      	lsleq	r0, r0, #4
 800baf8:	3304      	addeq	r3, #4
 800bafa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bafe:	bf04      	itt	eq
 800bb00:	0080      	lsleq	r0, r0, #2
 800bb02:	3302      	addeq	r3, #2
 800bb04:	2800      	cmp	r0, #0
 800bb06:	db05      	blt.n	800bb14 <__hi0bits+0x38>
 800bb08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bb0c:	f103 0301 	add.w	r3, r3, #1
 800bb10:	bf08      	it	eq
 800bb12:	2320      	moveq	r3, #32
 800bb14:	4618      	mov	r0, r3
 800bb16:	4770      	bx	lr
 800bb18:	2300      	movs	r3, #0
 800bb1a:	e7e4      	b.n	800bae6 <__hi0bits+0xa>

0800bb1c <__lo0bits>:
 800bb1c:	6803      	ldr	r3, [r0, #0]
 800bb1e:	f013 0207 	ands.w	r2, r3, #7
 800bb22:	d00c      	beq.n	800bb3e <__lo0bits+0x22>
 800bb24:	07d9      	lsls	r1, r3, #31
 800bb26:	d422      	bmi.n	800bb6e <__lo0bits+0x52>
 800bb28:	079a      	lsls	r2, r3, #30
 800bb2a:	bf49      	itett	mi
 800bb2c:	085b      	lsrmi	r3, r3, #1
 800bb2e:	089b      	lsrpl	r3, r3, #2
 800bb30:	6003      	strmi	r3, [r0, #0]
 800bb32:	2201      	movmi	r2, #1
 800bb34:	bf5c      	itt	pl
 800bb36:	6003      	strpl	r3, [r0, #0]
 800bb38:	2202      	movpl	r2, #2
 800bb3a:	4610      	mov	r0, r2
 800bb3c:	4770      	bx	lr
 800bb3e:	b299      	uxth	r1, r3
 800bb40:	b909      	cbnz	r1, 800bb46 <__lo0bits+0x2a>
 800bb42:	0c1b      	lsrs	r3, r3, #16
 800bb44:	2210      	movs	r2, #16
 800bb46:	b2d9      	uxtb	r1, r3
 800bb48:	b909      	cbnz	r1, 800bb4e <__lo0bits+0x32>
 800bb4a:	3208      	adds	r2, #8
 800bb4c:	0a1b      	lsrs	r3, r3, #8
 800bb4e:	0719      	lsls	r1, r3, #28
 800bb50:	bf04      	itt	eq
 800bb52:	091b      	lsreq	r3, r3, #4
 800bb54:	3204      	addeq	r2, #4
 800bb56:	0799      	lsls	r1, r3, #30
 800bb58:	bf04      	itt	eq
 800bb5a:	089b      	lsreq	r3, r3, #2
 800bb5c:	3202      	addeq	r2, #2
 800bb5e:	07d9      	lsls	r1, r3, #31
 800bb60:	d403      	bmi.n	800bb6a <__lo0bits+0x4e>
 800bb62:	085b      	lsrs	r3, r3, #1
 800bb64:	f102 0201 	add.w	r2, r2, #1
 800bb68:	d003      	beq.n	800bb72 <__lo0bits+0x56>
 800bb6a:	6003      	str	r3, [r0, #0]
 800bb6c:	e7e5      	b.n	800bb3a <__lo0bits+0x1e>
 800bb6e:	2200      	movs	r2, #0
 800bb70:	e7e3      	b.n	800bb3a <__lo0bits+0x1e>
 800bb72:	2220      	movs	r2, #32
 800bb74:	e7e1      	b.n	800bb3a <__lo0bits+0x1e>
	...

0800bb78 <__i2b>:
 800bb78:	b510      	push	{r4, lr}
 800bb7a:	460c      	mov	r4, r1
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	f7ff ff05 	bl	800b98c <_Balloc>
 800bb82:	4602      	mov	r2, r0
 800bb84:	b928      	cbnz	r0, 800bb92 <__i2b+0x1a>
 800bb86:	4b05      	ldr	r3, [pc, #20]	; (800bb9c <__i2b+0x24>)
 800bb88:	4805      	ldr	r0, [pc, #20]	; (800bba0 <__i2b+0x28>)
 800bb8a:	f240 1145 	movw	r1, #325	; 0x145
 800bb8e:	f000 fd0d 	bl	800c5ac <__assert_func>
 800bb92:	2301      	movs	r3, #1
 800bb94:	6144      	str	r4, [r0, #20]
 800bb96:	6103      	str	r3, [r0, #16]
 800bb98:	bd10      	pop	{r4, pc}
 800bb9a:	bf00      	nop
 800bb9c:	0800c938 	.word	0x0800c938
 800bba0:	0800c949 	.word	0x0800c949

0800bba4 <__multiply>:
 800bba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba8:	4691      	mov	r9, r2
 800bbaa:	690a      	ldr	r2, [r1, #16]
 800bbac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	bfb8      	it	lt
 800bbb4:	460b      	movlt	r3, r1
 800bbb6:	460c      	mov	r4, r1
 800bbb8:	bfbc      	itt	lt
 800bbba:	464c      	movlt	r4, r9
 800bbbc:	4699      	movlt	r9, r3
 800bbbe:	6927      	ldr	r7, [r4, #16]
 800bbc0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bbc4:	68a3      	ldr	r3, [r4, #8]
 800bbc6:	6861      	ldr	r1, [r4, #4]
 800bbc8:	eb07 060a 	add.w	r6, r7, sl
 800bbcc:	42b3      	cmp	r3, r6
 800bbce:	b085      	sub	sp, #20
 800bbd0:	bfb8      	it	lt
 800bbd2:	3101      	addlt	r1, #1
 800bbd4:	f7ff feda 	bl	800b98c <_Balloc>
 800bbd8:	b930      	cbnz	r0, 800bbe8 <__multiply+0x44>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	4b44      	ldr	r3, [pc, #272]	; (800bcf0 <__multiply+0x14c>)
 800bbde:	4845      	ldr	r0, [pc, #276]	; (800bcf4 <__multiply+0x150>)
 800bbe0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bbe4:	f000 fce2 	bl	800c5ac <__assert_func>
 800bbe8:	f100 0514 	add.w	r5, r0, #20
 800bbec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bbf0:	462b      	mov	r3, r5
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	4543      	cmp	r3, r8
 800bbf6:	d321      	bcc.n	800bc3c <__multiply+0x98>
 800bbf8:	f104 0314 	add.w	r3, r4, #20
 800bbfc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bc00:	f109 0314 	add.w	r3, r9, #20
 800bc04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bc08:	9202      	str	r2, [sp, #8]
 800bc0a:	1b3a      	subs	r2, r7, r4
 800bc0c:	3a15      	subs	r2, #21
 800bc0e:	f022 0203 	bic.w	r2, r2, #3
 800bc12:	3204      	adds	r2, #4
 800bc14:	f104 0115 	add.w	r1, r4, #21
 800bc18:	428f      	cmp	r7, r1
 800bc1a:	bf38      	it	cc
 800bc1c:	2204      	movcc	r2, #4
 800bc1e:	9201      	str	r2, [sp, #4]
 800bc20:	9a02      	ldr	r2, [sp, #8]
 800bc22:	9303      	str	r3, [sp, #12]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d80c      	bhi.n	800bc42 <__multiply+0x9e>
 800bc28:	2e00      	cmp	r6, #0
 800bc2a:	dd03      	ble.n	800bc34 <__multiply+0x90>
 800bc2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d05b      	beq.n	800bcec <__multiply+0x148>
 800bc34:	6106      	str	r6, [r0, #16]
 800bc36:	b005      	add	sp, #20
 800bc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc3c:	f843 2b04 	str.w	r2, [r3], #4
 800bc40:	e7d8      	b.n	800bbf4 <__multiply+0x50>
 800bc42:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc46:	f1ba 0f00 	cmp.w	sl, #0
 800bc4a:	d024      	beq.n	800bc96 <__multiply+0xf2>
 800bc4c:	f104 0e14 	add.w	lr, r4, #20
 800bc50:	46a9      	mov	r9, r5
 800bc52:	f04f 0c00 	mov.w	ip, #0
 800bc56:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc5a:	f8d9 1000 	ldr.w	r1, [r9]
 800bc5e:	fa1f fb82 	uxth.w	fp, r2
 800bc62:	b289      	uxth	r1, r1
 800bc64:	fb0a 110b 	mla	r1, sl, fp, r1
 800bc68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc6c:	f8d9 2000 	ldr.w	r2, [r9]
 800bc70:	4461      	add	r1, ip
 800bc72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc76:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc7e:	b289      	uxth	r1, r1
 800bc80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc84:	4577      	cmp	r7, lr
 800bc86:	f849 1b04 	str.w	r1, [r9], #4
 800bc8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc8e:	d8e2      	bhi.n	800bc56 <__multiply+0xb2>
 800bc90:	9a01      	ldr	r2, [sp, #4]
 800bc92:	f845 c002 	str.w	ip, [r5, r2]
 800bc96:	9a03      	ldr	r2, [sp, #12]
 800bc98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc9c:	3304      	adds	r3, #4
 800bc9e:	f1b9 0f00 	cmp.w	r9, #0
 800bca2:	d021      	beq.n	800bce8 <__multiply+0x144>
 800bca4:	6829      	ldr	r1, [r5, #0]
 800bca6:	f104 0c14 	add.w	ip, r4, #20
 800bcaa:	46ae      	mov	lr, r5
 800bcac:	f04f 0a00 	mov.w	sl, #0
 800bcb0:	f8bc b000 	ldrh.w	fp, [ip]
 800bcb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bcb8:	fb09 220b 	mla	r2, r9, fp, r2
 800bcbc:	4452      	add	r2, sl
 800bcbe:	b289      	uxth	r1, r1
 800bcc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bcc4:	f84e 1b04 	str.w	r1, [lr], #4
 800bcc8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bccc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bcd0:	f8be 1000 	ldrh.w	r1, [lr]
 800bcd4:	fb09 110a 	mla	r1, r9, sl, r1
 800bcd8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bcdc:	4567      	cmp	r7, ip
 800bcde:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bce2:	d8e5      	bhi.n	800bcb0 <__multiply+0x10c>
 800bce4:	9a01      	ldr	r2, [sp, #4]
 800bce6:	50a9      	str	r1, [r5, r2]
 800bce8:	3504      	adds	r5, #4
 800bcea:	e799      	b.n	800bc20 <__multiply+0x7c>
 800bcec:	3e01      	subs	r6, #1
 800bcee:	e79b      	b.n	800bc28 <__multiply+0x84>
 800bcf0:	0800c938 	.word	0x0800c938
 800bcf4:	0800c949 	.word	0x0800c949

0800bcf8 <__pow5mult>:
 800bcf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcfc:	4615      	mov	r5, r2
 800bcfe:	f012 0203 	ands.w	r2, r2, #3
 800bd02:	4606      	mov	r6, r0
 800bd04:	460f      	mov	r7, r1
 800bd06:	d007      	beq.n	800bd18 <__pow5mult+0x20>
 800bd08:	4c25      	ldr	r4, [pc, #148]	; (800bda0 <__pow5mult+0xa8>)
 800bd0a:	3a01      	subs	r2, #1
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd12:	f7ff fe9d 	bl	800ba50 <__multadd>
 800bd16:	4607      	mov	r7, r0
 800bd18:	10ad      	asrs	r5, r5, #2
 800bd1a:	d03d      	beq.n	800bd98 <__pow5mult+0xa0>
 800bd1c:	69f4      	ldr	r4, [r6, #28]
 800bd1e:	b97c      	cbnz	r4, 800bd40 <__pow5mult+0x48>
 800bd20:	2010      	movs	r0, #16
 800bd22:	f7ff fd7f 	bl	800b824 <malloc>
 800bd26:	4602      	mov	r2, r0
 800bd28:	61f0      	str	r0, [r6, #28]
 800bd2a:	b928      	cbnz	r0, 800bd38 <__pow5mult+0x40>
 800bd2c:	4b1d      	ldr	r3, [pc, #116]	; (800bda4 <__pow5mult+0xac>)
 800bd2e:	481e      	ldr	r0, [pc, #120]	; (800bda8 <__pow5mult+0xb0>)
 800bd30:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bd34:	f000 fc3a 	bl	800c5ac <__assert_func>
 800bd38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd3c:	6004      	str	r4, [r0, #0]
 800bd3e:	60c4      	str	r4, [r0, #12]
 800bd40:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bd44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd48:	b94c      	cbnz	r4, 800bd5e <__pow5mult+0x66>
 800bd4a:	f240 2171 	movw	r1, #625	; 0x271
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f7ff ff12 	bl	800bb78 <__i2b>
 800bd54:	2300      	movs	r3, #0
 800bd56:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	6003      	str	r3, [r0, #0]
 800bd5e:	f04f 0900 	mov.w	r9, #0
 800bd62:	07eb      	lsls	r3, r5, #31
 800bd64:	d50a      	bpl.n	800bd7c <__pow5mult+0x84>
 800bd66:	4639      	mov	r1, r7
 800bd68:	4622      	mov	r2, r4
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	f7ff ff1a 	bl	800bba4 <__multiply>
 800bd70:	4639      	mov	r1, r7
 800bd72:	4680      	mov	r8, r0
 800bd74:	4630      	mov	r0, r6
 800bd76:	f7ff fe49 	bl	800ba0c <_Bfree>
 800bd7a:	4647      	mov	r7, r8
 800bd7c:	106d      	asrs	r5, r5, #1
 800bd7e:	d00b      	beq.n	800bd98 <__pow5mult+0xa0>
 800bd80:	6820      	ldr	r0, [r4, #0]
 800bd82:	b938      	cbnz	r0, 800bd94 <__pow5mult+0x9c>
 800bd84:	4622      	mov	r2, r4
 800bd86:	4621      	mov	r1, r4
 800bd88:	4630      	mov	r0, r6
 800bd8a:	f7ff ff0b 	bl	800bba4 <__multiply>
 800bd8e:	6020      	str	r0, [r4, #0]
 800bd90:	f8c0 9000 	str.w	r9, [r0]
 800bd94:	4604      	mov	r4, r0
 800bd96:	e7e4      	b.n	800bd62 <__pow5mult+0x6a>
 800bd98:	4638      	mov	r0, r7
 800bd9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd9e:	bf00      	nop
 800bda0:	0800ca98 	.word	0x0800ca98
 800bda4:	0800c8c9 	.word	0x0800c8c9
 800bda8:	0800c949 	.word	0x0800c949

0800bdac <__lshift>:
 800bdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb0:	460c      	mov	r4, r1
 800bdb2:	6849      	ldr	r1, [r1, #4]
 800bdb4:	6923      	ldr	r3, [r4, #16]
 800bdb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bdba:	68a3      	ldr	r3, [r4, #8]
 800bdbc:	4607      	mov	r7, r0
 800bdbe:	4691      	mov	r9, r2
 800bdc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bdc4:	f108 0601 	add.w	r6, r8, #1
 800bdc8:	42b3      	cmp	r3, r6
 800bdca:	db0b      	blt.n	800bde4 <__lshift+0x38>
 800bdcc:	4638      	mov	r0, r7
 800bdce:	f7ff fddd 	bl	800b98c <_Balloc>
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	b948      	cbnz	r0, 800bdea <__lshift+0x3e>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	4b28      	ldr	r3, [pc, #160]	; (800be7c <__lshift+0xd0>)
 800bdda:	4829      	ldr	r0, [pc, #164]	; (800be80 <__lshift+0xd4>)
 800bddc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bde0:	f000 fbe4 	bl	800c5ac <__assert_func>
 800bde4:	3101      	adds	r1, #1
 800bde6:	005b      	lsls	r3, r3, #1
 800bde8:	e7ee      	b.n	800bdc8 <__lshift+0x1c>
 800bdea:	2300      	movs	r3, #0
 800bdec:	f100 0114 	add.w	r1, r0, #20
 800bdf0:	f100 0210 	add.w	r2, r0, #16
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	4553      	cmp	r3, sl
 800bdf8:	db33      	blt.n	800be62 <__lshift+0xb6>
 800bdfa:	6920      	ldr	r0, [r4, #16]
 800bdfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be00:	f104 0314 	add.w	r3, r4, #20
 800be04:	f019 091f 	ands.w	r9, r9, #31
 800be08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be10:	d02b      	beq.n	800be6a <__lshift+0xbe>
 800be12:	f1c9 0e20 	rsb	lr, r9, #32
 800be16:	468a      	mov	sl, r1
 800be18:	2200      	movs	r2, #0
 800be1a:	6818      	ldr	r0, [r3, #0]
 800be1c:	fa00 f009 	lsl.w	r0, r0, r9
 800be20:	4310      	orrs	r0, r2
 800be22:	f84a 0b04 	str.w	r0, [sl], #4
 800be26:	f853 2b04 	ldr.w	r2, [r3], #4
 800be2a:	459c      	cmp	ip, r3
 800be2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800be30:	d8f3      	bhi.n	800be1a <__lshift+0x6e>
 800be32:	ebac 0304 	sub.w	r3, ip, r4
 800be36:	3b15      	subs	r3, #21
 800be38:	f023 0303 	bic.w	r3, r3, #3
 800be3c:	3304      	adds	r3, #4
 800be3e:	f104 0015 	add.w	r0, r4, #21
 800be42:	4584      	cmp	ip, r0
 800be44:	bf38      	it	cc
 800be46:	2304      	movcc	r3, #4
 800be48:	50ca      	str	r2, [r1, r3]
 800be4a:	b10a      	cbz	r2, 800be50 <__lshift+0xa4>
 800be4c:	f108 0602 	add.w	r6, r8, #2
 800be50:	3e01      	subs	r6, #1
 800be52:	4638      	mov	r0, r7
 800be54:	612e      	str	r6, [r5, #16]
 800be56:	4621      	mov	r1, r4
 800be58:	f7ff fdd8 	bl	800ba0c <_Bfree>
 800be5c:	4628      	mov	r0, r5
 800be5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be62:	f842 0f04 	str.w	r0, [r2, #4]!
 800be66:	3301      	adds	r3, #1
 800be68:	e7c5      	b.n	800bdf6 <__lshift+0x4a>
 800be6a:	3904      	subs	r1, #4
 800be6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800be70:	f841 2f04 	str.w	r2, [r1, #4]!
 800be74:	459c      	cmp	ip, r3
 800be76:	d8f9      	bhi.n	800be6c <__lshift+0xc0>
 800be78:	e7ea      	b.n	800be50 <__lshift+0xa4>
 800be7a:	bf00      	nop
 800be7c:	0800c938 	.word	0x0800c938
 800be80:	0800c949 	.word	0x0800c949

0800be84 <__mcmp>:
 800be84:	b530      	push	{r4, r5, lr}
 800be86:	6902      	ldr	r2, [r0, #16]
 800be88:	690c      	ldr	r4, [r1, #16]
 800be8a:	1b12      	subs	r2, r2, r4
 800be8c:	d10e      	bne.n	800beac <__mcmp+0x28>
 800be8e:	f100 0314 	add.w	r3, r0, #20
 800be92:	3114      	adds	r1, #20
 800be94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bea0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bea4:	42a5      	cmp	r5, r4
 800bea6:	d003      	beq.n	800beb0 <__mcmp+0x2c>
 800bea8:	d305      	bcc.n	800beb6 <__mcmp+0x32>
 800beaa:	2201      	movs	r2, #1
 800beac:	4610      	mov	r0, r2
 800beae:	bd30      	pop	{r4, r5, pc}
 800beb0:	4283      	cmp	r3, r0
 800beb2:	d3f3      	bcc.n	800be9c <__mcmp+0x18>
 800beb4:	e7fa      	b.n	800beac <__mcmp+0x28>
 800beb6:	f04f 32ff 	mov.w	r2, #4294967295
 800beba:	e7f7      	b.n	800beac <__mcmp+0x28>

0800bebc <__mdiff>:
 800bebc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec0:	460c      	mov	r4, r1
 800bec2:	4606      	mov	r6, r0
 800bec4:	4611      	mov	r1, r2
 800bec6:	4620      	mov	r0, r4
 800bec8:	4690      	mov	r8, r2
 800beca:	f7ff ffdb 	bl	800be84 <__mcmp>
 800bece:	1e05      	subs	r5, r0, #0
 800bed0:	d110      	bne.n	800bef4 <__mdiff+0x38>
 800bed2:	4629      	mov	r1, r5
 800bed4:	4630      	mov	r0, r6
 800bed6:	f7ff fd59 	bl	800b98c <_Balloc>
 800beda:	b930      	cbnz	r0, 800beea <__mdiff+0x2e>
 800bedc:	4b3a      	ldr	r3, [pc, #232]	; (800bfc8 <__mdiff+0x10c>)
 800bede:	4602      	mov	r2, r0
 800bee0:	f240 2137 	movw	r1, #567	; 0x237
 800bee4:	4839      	ldr	r0, [pc, #228]	; (800bfcc <__mdiff+0x110>)
 800bee6:	f000 fb61 	bl	800c5ac <__assert_func>
 800beea:	2301      	movs	r3, #1
 800beec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef4:	bfa4      	itt	ge
 800bef6:	4643      	movge	r3, r8
 800bef8:	46a0      	movge	r8, r4
 800befa:	4630      	mov	r0, r6
 800befc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bf00:	bfa6      	itte	ge
 800bf02:	461c      	movge	r4, r3
 800bf04:	2500      	movge	r5, #0
 800bf06:	2501      	movlt	r5, #1
 800bf08:	f7ff fd40 	bl	800b98c <_Balloc>
 800bf0c:	b920      	cbnz	r0, 800bf18 <__mdiff+0x5c>
 800bf0e:	4b2e      	ldr	r3, [pc, #184]	; (800bfc8 <__mdiff+0x10c>)
 800bf10:	4602      	mov	r2, r0
 800bf12:	f240 2145 	movw	r1, #581	; 0x245
 800bf16:	e7e5      	b.n	800bee4 <__mdiff+0x28>
 800bf18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf1c:	6926      	ldr	r6, [r4, #16]
 800bf1e:	60c5      	str	r5, [r0, #12]
 800bf20:	f104 0914 	add.w	r9, r4, #20
 800bf24:	f108 0514 	add.w	r5, r8, #20
 800bf28:	f100 0e14 	add.w	lr, r0, #20
 800bf2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bf30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf34:	f108 0210 	add.w	r2, r8, #16
 800bf38:	46f2      	mov	sl, lr
 800bf3a:	2100      	movs	r1, #0
 800bf3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf44:	fa11 f88b 	uxtah	r8, r1, fp
 800bf48:	b299      	uxth	r1, r3
 800bf4a:	0c1b      	lsrs	r3, r3, #16
 800bf4c:	eba8 0801 	sub.w	r8, r8, r1
 800bf50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf58:	fa1f f888 	uxth.w	r8, r8
 800bf5c:	1419      	asrs	r1, r3, #16
 800bf5e:	454e      	cmp	r6, r9
 800bf60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf64:	f84a 3b04 	str.w	r3, [sl], #4
 800bf68:	d8e8      	bhi.n	800bf3c <__mdiff+0x80>
 800bf6a:	1b33      	subs	r3, r6, r4
 800bf6c:	3b15      	subs	r3, #21
 800bf6e:	f023 0303 	bic.w	r3, r3, #3
 800bf72:	3304      	adds	r3, #4
 800bf74:	3415      	adds	r4, #21
 800bf76:	42a6      	cmp	r6, r4
 800bf78:	bf38      	it	cc
 800bf7a:	2304      	movcc	r3, #4
 800bf7c:	441d      	add	r5, r3
 800bf7e:	4473      	add	r3, lr
 800bf80:	469e      	mov	lr, r3
 800bf82:	462e      	mov	r6, r5
 800bf84:	4566      	cmp	r6, ip
 800bf86:	d30e      	bcc.n	800bfa6 <__mdiff+0xea>
 800bf88:	f10c 0203 	add.w	r2, ip, #3
 800bf8c:	1b52      	subs	r2, r2, r5
 800bf8e:	f022 0203 	bic.w	r2, r2, #3
 800bf92:	3d03      	subs	r5, #3
 800bf94:	45ac      	cmp	ip, r5
 800bf96:	bf38      	it	cc
 800bf98:	2200      	movcc	r2, #0
 800bf9a:	4413      	add	r3, r2
 800bf9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bfa0:	b17a      	cbz	r2, 800bfc2 <__mdiff+0x106>
 800bfa2:	6107      	str	r7, [r0, #16]
 800bfa4:	e7a4      	b.n	800bef0 <__mdiff+0x34>
 800bfa6:	f856 8b04 	ldr.w	r8, [r6], #4
 800bfaa:	fa11 f288 	uxtah	r2, r1, r8
 800bfae:	1414      	asrs	r4, r2, #16
 800bfb0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bfb4:	b292      	uxth	r2, r2
 800bfb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bfba:	f84e 2b04 	str.w	r2, [lr], #4
 800bfbe:	1421      	asrs	r1, r4, #16
 800bfc0:	e7e0      	b.n	800bf84 <__mdiff+0xc8>
 800bfc2:	3f01      	subs	r7, #1
 800bfc4:	e7ea      	b.n	800bf9c <__mdiff+0xe0>
 800bfc6:	bf00      	nop
 800bfc8:	0800c938 	.word	0x0800c938
 800bfcc:	0800c949 	.word	0x0800c949

0800bfd0 <__d2b>:
 800bfd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bfd4:	460f      	mov	r7, r1
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	ec59 8b10 	vmov	r8, r9, d0
 800bfdc:	4616      	mov	r6, r2
 800bfde:	f7ff fcd5 	bl	800b98c <_Balloc>
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	b930      	cbnz	r0, 800bff4 <__d2b+0x24>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	4b24      	ldr	r3, [pc, #144]	; (800c07c <__d2b+0xac>)
 800bfea:	4825      	ldr	r0, [pc, #148]	; (800c080 <__d2b+0xb0>)
 800bfec:	f240 310f 	movw	r1, #783	; 0x30f
 800bff0:	f000 fadc 	bl	800c5ac <__assert_func>
 800bff4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bff8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bffc:	bb2d      	cbnz	r5, 800c04a <__d2b+0x7a>
 800bffe:	9301      	str	r3, [sp, #4]
 800c000:	f1b8 0300 	subs.w	r3, r8, #0
 800c004:	d026      	beq.n	800c054 <__d2b+0x84>
 800c006:	4668      	mov	r0, sp
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	f7ff fd87 	bl	800bb1c <__lo0bits>
 800c00e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c012:	b1e8      	cbz	r0, 800c050 <__d2b+0x80>
 800c014:	f1c0 0320 	rsb	r3, r0, #32
 800c018:	fa02 f303 	lsl.w	r3, r2, r3
 800c01c:	430b      	orrs	r3, r1
 800c01e:	40c2      	lsrs	r2, r0
 800c020:	6163      	str	r3, [r4, #20]
 800c022:	9201      	str	r2, [sp, #4]
 800c024:	9b01      	ldr	r3, [sp, #4]
 800c026:	61a3      	str	r3, [r4, #24]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	bf14      	ite	ne
 800c02c:	2202      	movne	r2, #2
 800c02e:	2201      	moveq	r2, #1
 800c030:	6122      	str	r2, [r4, #16]
 800c032:	b1bd      	cbz	r5, 800c064 <__d2b+0x94>
 800c034:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c038:	4405      	add	r5, r0
 800c03a:	603d      	str	r5, [r7, #0]
 800c03c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c040:	6030      	str	r0, [r6, #0]
 800c042:	4620      	mov	r0, r4
 800c044:	b003      	add	sp, #12
 800c046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c04a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c04e:	e7d6      	b.n	800bffe <__d2b+0x2e>
 800c050:	6161      	str	r1, [r4, #20]
 800c052:	e7e7      	b.n	800c024 <__d2b+0x54>
 800c054:	a801      	add	r0, sp, #4
 800c056:	f7ff fd61 	bl	800bb1c <__lo0bits>
 800c05a:	9b01      	ldr	r3, [sp, #4]
 800c05c:	6163      	str	r3, [r4, #20]
 800c05e:	3020      	adds	r0, #32
 800c060:	2201      	movs	r2, #1
 800c062:	e7e5      	b.n	800c030 <__d2b+0x60>
 800c064:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c068:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c06c:	6038      	str	r0, [r7, #0]
 800c06e:	6918      	ldr	r0, [r3, #16]
 800c070:	f7ff fd34 	bl	800badc <__hi0bits>
 800c074:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c078:	e7e2      	b.n	800c040 <__d2b+0x70>
 800c07a:	bf00      	nop
 800c07c:	0800c938 	.word	0x0800c938
 800c080:	0800c949 	.word	0x0800c949

0800c084 <__sfputc_r>:
 800c084:	6893      	ldr	r3, [r2, #8]
 800c086:	3b01      	subs	r3, #1
 800c088:	2b00      	cmp	r3, #0
 800c08a:	b410      	push	{r4}
 800c08c:	6093      	str	r3, [r2, #8]
 800c08e:	da08      	bge.n	800c0a2 <__sfputc_r+0x1e>
 800c090:	6994      	ldr	r4, [r2, #24]
 800c092:	42a3      	cmp	r3, r4
 800c094:	db01      	blt.n	800c09a <__sfputc_r+0x16>
 800c096:	290a      	cmp	r1, #10
 800c098:	d103      	bne.n	800c0a2 <__sfputc_r+0x1e>
 800c09a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c09e:	f7fe bbe4 	b.w	800a86a <__swbuf_r>
 800c0a2:	6813      	ldr	r3, [r2, #0]
 800c0a4:	1c58      	adds	r0, r3, #1
 800c0a6:	6010      	str	r0, [r2, #0]
 800c0a8:	7019      	strb	r1, [r3, #0]
 800c0aa:	4608      	mov	r0, r1
 800c0ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0b0:	4770      	bx	lr

0800c0b2 <__sfputs_r>:
 800c0b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	460f      	mov	r7, r1
 800c0b8:	4614      	mov	r4, r2
 800c0ba:	18d5      	adds	r5, r2, r3
 800c0bc:	42ac      	cmp	r4, r5
 800c0be:	d101      	bne.n	800c0c4 <__sfputs_r+0x12>
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	e007      	b.n	800c0d4 <__sfputs_r+0x22>
 800c0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0c8:	463a      	mov	r2, r7
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	f7ff ffda 	bl	800c084 <__sfputc_r>
 800c0d0:	1c43      	adds	r3, r0, #1
 800c0d2:	d1f3      	bne.n	800c0bc <__sfputs_r+0xa>
 800c0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c0d8 <_vfiprintf_r>:
 800c0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0dc:	460d      	mov	r5, r1
 800c0de:	b09d      	sub	sp, #116	; 0x74
 800c0e0:	4614      	mov	r4, r2
 800c0e2:	4698      	mov	r8, r3
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	b118      	cbz	r0, 800c0f0 <_vfiprintf_r+0x18>
 800c0e8:	6a03      	ldr	r3, [r0, #32]
 800c0ea:	b90b      	cbnz	r3, 800c0f0 <_vfiprintf_r+0x18>
 800c0ec:	f7fe fad6 	bl	800a69c <__sinit>
 800c0f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0f2:	07d9      	lsls	r1, r3, #31
 800c0f4:	d405      	bmi.n	800c102 <_vfiprintf_r+0x2a>
 800c0f6:	89ab      	ldrh	r3, [r5, #12]
 800c0f8:	059a      	lsls	r2, r3, #22
 800c0fa:	d402      	bmi.n	800c102 <_vfiprintf_r+0x2a>
 800c0fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0fe:	f7fe fcc6 	bl	800aa8e <__retarget_lock_acquire_recursive>
 800c102:	89ab      	ldrh	r3, [r5, #12]
 800c104:	071b      	lsls	r3, r3, #28
 800c106:	d501      	bpl.n	800c10c <_vfiprintf_r+0x34>
 800c108:	692b      	ldr	r3, [r5, #16]
 800c10a:	b99b      	cbnz	r3, 800c134 <_vfiprintf_r+0x5c>
 800c10c:	4629      	mov	r1, r5
 800c10e:	4630      	mov	r0, r6
 800c110:	f7fe fbe8 	bl	800a8e4 <__swsetup_r>
 800c114:	b170      	cbz	r0, 800c134 <_vfiprintf_r+0x5c>
 800c116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c118:	07dc      	lsls	r4, r3, #31
 800c11a:	d504      	bpl.n	800c126 <_vfiprintf_r+0x4e>
 800c11c:	f04f 30ff 	mov.w	r0, #4294967295
 800c120:	b01d      	add	sp, #116	; 0x74
 800c122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c126:	89ab      	ldrh	r3, [r5, #12]
 800c128:	0598      	lsls	r0, r3, #22
 800c12a:	d4f7      	bmi.n	800c11c <_vfiprintf_r+0x44>
 800c12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c12e:	f7fe fcaf 	bl	800aa90 <__retarget_lock_release_recursive>
 800c132:	e7f3      	b.n	800c11c <_vfiprintf_r+0x44>
 800c134:	2300      	movs	r3, #0
 800c136:	9309      	str	r3, [sp, #36]	; 0x24
 800c138:	2320      	movs	r3, #32
 800c13a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c13e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c142:	2330      	movs	r3, #48	; 0x30
 800c144:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c2f8 <_vfiprintf_r+0x220>
 800c148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c14c:	f04f 0901 	mov.w	r9, #1
 800c150:	4623      	mov	r3, r4
 800c152:	469a      	mov	sl, r3
 800c154:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c158:	b10a      	cbz	r2, 800c15e <_vfiprintf_r+0x86>
 800c15a:	2a25      	cmp	r2, #37	; 0x25
 800c15c:	d1f9      	bne.n	800c152 <_vfiprintf_r+0x7a>
 800c15e:	ebba 0b04 	subs.w	fp, sl, r4
 800c162:	d00b      	beq.n	800c17c <_vfiprintf_r+0xa4>
 800c164:	465b      	mov	r3, fp
 800c166:	4622      	mov	r2, r4
 800c168:	4629      	mov	r1, r5
 800c16a:	4630      	mov	r0, r6
 800c16c:	f7ff ffa1 	bl	800c0b2 <__sfputs_r>
 800c170:	3001      	adds	r0, #1
 800c172:	f000 80a9 	beq.w	800c2c8 <_vfiprintf_r+0x1f0>
 800c176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c178:	445a      	add	r2, fp
 800c17a:	9209      	str	r2, [sp, #36]	; 0x24
 800c17c:	f89a 3000 	ldrb.w	r3, [sl]
 800c180:	2b00      	cmp	r3, #0
 800c182:	f000 80a1 	beq.w	800c2c8 <_vfiprintf_r+0x1f0>
 800c186:	2300      	movs	r3, #0
 800c188:	f04f 32ff 	mov.w	r2, #4294967295
 800c18c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c190:	f10a 0a01 	add.w	sl, sl, #1
 800c194:	9304      	str	r3, [sp, #16]
 800c196:	9307      	str	r3, [sp, #28]
 800c198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c19c:	931a      	str	r3, [sp, #104]	; 0x68
 800c19e:	4654      	mov	r4, sl
 800c1a0:	2205      	movs	r2, #5
 800c1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1a6:	4854      	ldr	r0, [pc, #336]	; (800c2f8 <_vfiprintf_r+0x220>)
 800c1a8:	f7f4 f82a 	bl	8000200 <memchr>
 800c1ac:	9a04      	ldr	r2, [sp, #16]
 800c1ae:	b9d8      	cbnz	r0, 800c1e8 <_vfiprintf_r+0x110>
 800c1b0:	06d1      	lsls	r1, r2, #27
 800c1b2:	bf44      	itt	mi
 800c1b4:	2320      	movmi	r3, #32
 800c1b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1ba:	0713      	lsls	r3, r2, #28
 800c1bc:	bf44      	itt	mi
 800c1be:	232b      	movmi	r3, #43	; 0x2b
 800c1c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c1c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c1ca:	d015      	beq.n	800c1f8 <_vfiprintf_r+0x120>
 800c1cc:	9a07      	ldr	r2, [sp, #28]
 800c1ce:	4654      	mov	r4, sl
 800c1d0:	2000      	movs	r0, #0
 800c1d2:	f04f 0c0a 	mov.w	ip, #10
 800c1d6:	4621      	mov	r1, r4
 800c1d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1dc:	3b30      	subs	r3, #48	; 0x30
 800c1de:	2b09      	cmp	r3, #9
 800c1e0:	d94d      	bls.n	800c27e <_vfiprintf_r+0x1a6>
 800c1e2:	b1b0      	cbz	r0, 800c212 <_vfiprintf_r+0x13a>
 800c1e4:	9207      	str	r2, [sp, #28]
 800c1e6:	e014      	b.n	800c212 <_vfiprintf_r+0x13a>
 800c1e8:	eba0 0308 	sub.w	r3, r0, r8
 800c1ec:	fa09 f303 	lsl.w	r3, r9, r3
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	9304      	str	r3, [sp, #16]
 800c1f4:	46a2      	mov	sl, r4
 800c1f6:	e7d2      	b.n	800c19e <_vfiprintf_r+0xc6>
 800c1f8:	9b03      	ldr	r3, [sp, #12]
 800c1fa:	1d19      	adds	r1, r3, #4
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	9103      	str	r1, [sp, #12]
 800c200:	2b00      	cmp	r3, #0
 800c202:	bfbb      	ittet	lt
 800c204:	425b      	neglt	r3, r3
 800c206:	f042 0202 	orrlt.w	r2, r2, #2
 800c20a:	9307      	strge	r3, [sp, #28]
 800c20c:	9307      	strlt	r3, [sp, #28]
 800c20e:	bfb8      	it	lt
 800c210:	9204      	strlt	r2, [sp, #16]
 800c212:	7823      	ldrb	r3, [r4, #0]
 800c214:	2b2e      	cmp	r3, #46	; 0x2e
 800c216:	d10c      	bne.n	800c232 <_vfiprintf_r+0x15a>
 800c218:	7863      	ldrb	r3, [r4, #1]
 800c21a:	2b2a      	cmp	r3, #42	; 0x2a
 800c21c:	d134      	bne.n	800c288 <_vfiprintf_r+0x1b0>
 800c21e:	9b03      	ldr	r3, [sp, #12]
 800c220:	1d1a      	adds	r2, r3, #4
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	9203      	str	r2, [sp, #12]
 800c226:	2b00      	cmp	r3, #0
 800c228:	bfb8      	it	lt
 800c22a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c22e:	3402      	adds	r4, #2
 800c230:	9305      	str	r3, [sp, #20]
 800c232:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c308 <_vfiprintf_r+0x230>
 800c236:	7821      	ldrb	r1, [r4, #0]
 800c238:	2203      	movs	r2, #3
 800c23a:	4650      	mov	r0, sl
 800c23c:	f7f3 ffe0 	bl	8000200 <memchr>
 800c240:	b138      	cbz	r0, 800c252 <_vfiprintf_r+0x17a>
 800c242:	9b04      	ldr	r3, [sp, #16]
 800c244:	eba0 000a 	sub.w	r0, r0, sl
 800c248:	2240      	movs	r2, #64	; 0x40
 800c24a:	4082      	lsls	r2, r0
 800c24c:	4313      	orrs	r3, r2
 800c24e:	3401      	adds	r4, #1
 800c250:	9304      	str	r3, [sp, #16]
 800c252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c256:	4829      	ldr	r0, [pc, #164]	; (800c2fc <_vfiprintf_r+0x224>)
 800c258:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c25c:	2206      	movs	r2, #6
 800c25e:	f7f3 ffcf 	bl	8000200 <memchr>
 800c262:	2800      	cmp	r0, #0
 800c264:	d03f      	beq.n	800c2e6 <_vfiprintf_r+0x20e>
 800c266:	4b26      	ldr	r3, [pc, #152]	; (800c300 <_vfiprintf_r+0x228>)
 800c268:	bb1b      	cbnz	r3, 800c2b2 <_vfiprintf_r+0x1da>
 800c26a:	9b03      	ldr	r3, [sp, #12]
 800c26c:	3307      	adds	r3, #7
 800c26e:	f023 0307 	bic.w	r3, r3, #7
 800c272:	3308      	adds	r3, #8
 800c274:	9303      	str	r3, [sp, #12]
 800c276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c278:	443b      	add	r3, r7
 800c27a:	9309      	str	r3, [sp, #36]	; 0x24
 800c27c:	e768      	b.n	800c150 <_vfiprintf_r+0x78>
 800c27e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c282:	460c      	mov	r4, r1
 800c284:	2001      	movs	r0, #1
 800c286:	e7a6      	b.n	800c1d6 <_vfiprintf_r+0xfe>
 800c288:	2300      	movs	r3, #0
 800c28a:	3401      	adds	r4, #1
 800c28c:	9305      	str	r3, [sp, #20]
 800c28e:	4619      	mov	r1, r3
 800c290:	f04f 0c0a 	mov.w	ip, #10
 800c294:	4620      	mov	r0, r4
 800c296:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c29a:	3a30      	subs	r2, #48	; 0x30
 800c29c:	2a09      	cmp	r2, #9
 800c29e:	d903      	bls.n	800c2a8 <_vfiprintf_r+0x1d0>
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d0c6      	beq.n	800c232 <_vfiprintf_r+0x15a>
 800c2a4:	9105      	str	r1, [sp, #20]
 800c2a6:	e7c4      	b.n	800c232 <_vfiprintf_r+0x15a>
 800c2a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e7f0      	b.n	800c294 <_vfiprintf_r+0x1bc>
 800c2b2:	ab03      	add	r3, sp, #12
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	462a      	mov	r2, r5
 800c2b8:	4b12      	ldr	r3, [pc, #72]	; (800c304 <_vfiprintf_r+0x22c>)
 800c2ba:	a904      	add	r1, sp, #16
 800c2bc:	4630      	mov	r0, r6
 800c2be:	f7fd fd9b 	bl	8009df8 <_printf_float>
 800c2c2:	4607      	mov	r7, r0
 800c2c4:	1c78      	adds	r0, r7, #1
 800c2c6:	d1d6      	bne.n	800c276 <_vfiprintf_r+0x19e>
 800c2c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2ca:	07d9      	lsls	r1, r3, #31
 800c2cc:	d405      	bmi.n	800c2da <_vfiprintf_r+0x202>
 800c2ce:	89ab      	ldrh	r3, [r5, #12]
 800c2d0:	059a      	lsls	r2, r3, #22
 800c2d2:	d402      	bmi.n	800c2da <_vfiprintf_r+0x202>
 800c2d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2d6:	f7fe fbdb 	bl	800aa90 <__retarget_lock_release_recursive>
 800c2da:	89ab      	ldrh	r3, [r5, #12]
 800c2dc:	065b      	lsls	r3, r3, #25
 800c2de:	f53f af1d 	bmi.w	800c11c <_vfiprintf_r+0x44>
 800c2e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2e4:	e71c      	b.n	800c120 <_vfiprintf_r+0x48>
 800c2e6:	ab03      	add	r3, sp, #12
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	462a      	mov	r2, r5
 800c2ec:	4b05      	ldr	r3, [pc, #20]	; (800c304 <_vfiprintf_r+0x22c>)
 800c2ee:	a904      	add	r1, sp, #16
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f7fe f825 	bl	800a340 <_printf_i>
 800c2f6:	e7e4      	b.n	800c2c2 <_vfiprintf_r+0x1ea>
 800c2f8:	0800caa4 	.word	0x0800caa4
 800c2fc:	0800caae 	.word	0x0800caae
 800c300:	08009df9 	.word	0x08009df9
 800c304:	0800c0b3 	.word	0x0800c0b3
 800c308:	0800caaa 	.word	0x0800caaa

0800c30c <__sflush_r>:
 800c30c:	898a      	ldrh	r2, [r1, #12]
 800c30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c312:	4605      	mov	r5, r0
 800c314:	0710      	lsls	r0, r2, #28
 800c316:	460c      	mov	r4, r1
 800c318:	d458      	bmi.n	800c3cc <__sflush_r+0xc0>
 800c31a:	684b      	ldr	r3, [r1, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	dc05      	bgt.n	800c32c <__sflush_r+0x20>
 800c320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c322:	2b00      	cmp	r3, #0
 800c324:	dc02      	bgt.n	800c32c <__sflush_r+0x20>
 800c326:	2000      	movs	r0, #0
 800c328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c32c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c32e:	2e00      	cmp	r6, #0
 800c330:	d0f9      	beq.n	800c326 <__sflush_r+0x1a>
 800c332:	2300      	movs	r3, #0
 800c334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c338:	682f      	ldr	r7, [r5, #0]
 800c33a:	6a21      	ldr	r1, [r4, #32]
 800c33c:	602b      	str	r3, [r5, #0]
 800c33e:	d032      	beq.n	800c3a6 <__sflush_r+0x9a>
 800c340:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c342:	89a3      	ldrh	r3, [r4, #12]
 800c344:	075a      	lsls	r2, r3, #29
 800c346:	d505      	bpl.n	800c354 <__sflush_r+0x48>
 800c348:	6863      	ldr	r3, [r4, #4]
 800c34a:	1ac0      	subs	r0, r0, r3
 800c34c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c34e:	b10b      	cbz	r3, 800c354 <__sflush_r+0x48>
 800c350:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c352:	1ac0      	subs	r0, r0, r3
 800c354:	2300      	movs	r3, #0
 800c356:	4602      	mov	r2, r0
 800c358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c35a:	6a21      	ldr	r1, [r4, #32]
 800c35c:	4628      	mov	r0, r5
 800c35e:	47b0      	blx	r6
 800c360:	1c43      	adds	r3, r0, #1
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	d106      	bne.n	800c374 <__sflush_r+0x68>
 800c366:	6829      	ldr	r1, [r5, #0]
 800c368:	291d      	cmp	r1, #29
 800c36a:	d82b      	bhi.n	800c3c4 <__sflush_r+0xb8>
 800c36c:	4a29      	ldr	r2, [pc, #164]	; (800c414 <__sflush_r+0x108>)
 800c36e:	410a      	asrs	r2, r1
 800c370:	07d6      	lsls	r6, r2, #31
 800c372:	d427      	bmi.n	800c3c4 <__sflush_r+0xb8>
 800c374:	2200      	movs	r2, #0
 800c376:	6062      	str	r2, [r4, #4]
 800c378:	04d9      	lsls	r1, r3, #19
 800c37a:	6922      	ldr	r2, [r4, #16]
 800c37c:	6022      	str	r2, [r4, #0]
 800c37e:	d504      	bpl.n	800c38a <__sflush_r+0x7e>
 800c380:	1c42      	adds	r2, r0, #1
 800c382:	d101      	bne.n	800c388 <__sflush_r+0x7c>
 800c384:	682b      	ldr	r3, [r5, #0]
 800c386:	b903      	cbnz	r3, 800c38a <__sflush_r+0x7e>
 800c388:	6560      	str	r0, [r4, #84]	; 0x54
 800c38a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c38c:	602f      	str	r7, [r5, #0]
 800c38e:	2900      	cmp	r1, #0
 800c390:	d0c9      	beq.n	800c326 <__sflush_r+0x1a>
 800c392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c396:	4299      	cmp	r1, r3
 800c398:	d002      	beq.n	800c3a0 <__sflush_r+0x94>
 800c39a:	4628      	mov	r0, r5
 800c39c:	f7ff f9f6 	bl	800b78c <_free_r>
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	6360      	str	r0, [r4, #52]	; 0x34
 800c3a4:	e7c0      	b.n	800c328 <__sflush_r+0x1c>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	47b0      	blx	r6
 800c3ac:	1c41      	adds	r1, r0, #1
 800c3ae:	d1c8      	bne.n	800c342 <__sflush_r+0x36>
 800c3b0:	682b      	ldr	r3, [r5, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d0c5      	beq.n	800c342 <__sflush_r+0x36>
 800c3b6:	2b1d      	cmp	r3, #29
 800c3b8:	d001      	beq.n	800c3be <__sflush_r+0xb2>
 800c3ba:	2b16      	cmp	r3, #22
 800c3bc:	d101      	bne.n	800c3c2 <__sflush_r+0xb6>
 800c3be:	602f      	str	r7, [r5, #0]
 800c3c0:	e7b1      	b.n	800c326 <__sflush_r+0x1a>
 800c3c2:	89a3      	ldrh	r3, [r4, #12]
 800c3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3c8:	81a3      	strh	r3, [r4, #12]
 800c3ca:	e7ad      	b.n	800c328 <__sflush_r+0x1c>
 800c3cc:	690f      	ldr	r7, [r1, #16]
 800c3ce:	2f00      	cmp	r7, #0
 800c3d0:	d0a9      	beq.n	800c326 <__sflush_r+0x1a>
 800c3d2:	0793      	lsls	r3, r2, #30
 800c3d4:	680e      	ldr	r6, [r1, #0]
 800c3d6:	bf08      	it	eq
 800c3d8:	694b      	ldreq	r3, [r1, #20]
 800c3da:	600f      	str	r7, [r1, #0]
 800c3dc:	bf18      	it	ne
 800c3de:	2300      	movne	r3, #0
 800c3e0:	eba6 0807 	sub.w	r8, r6, r7
 800c3e4:	608b      	str	r3, [r1, #8]
 800c3e6:	f1b8 0f00 	cmp.w	r8, #0
 800c3ea:	dd9c      	ble.n	800c326 <__sflush_r+0x1a>
 800c3ec:	6a21      	ldr	r1, [r4, #32]
 800c3ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3f0:	4643      	mov	r3, r8
 800c3f2:	463a      	mov	r2, r7
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	47b0      	blx	r6
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	dc06      	bgt.n	800c40a <__sflush_r+0xfe>
 800c3fc:	89a3      	ldrh	r3, [r4, #12]
 800c3fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c402:	81a3      	strh	r3, [r4, #12]
 800c404:	f04f 30ff 	mov.w	r0, #4294967295
 800c408:	e78e      	b.n	800c328 <__sflush_r+0x1c>
 800c40a:	4407      	add	r7, r0
 800c40c:	eba8 0800 	sub.w	r8, r8, r0
 800c410:	e7e9      	b.n	800c3e6 <__sflush_r+0xda>
 800c412:	bf00      	nop
 800c414:	dfbffffe 	.word	0xdfbffffe

0800c418 <_fflush_r>:
 800c418:	b538      	push	{r3, r4, r5, lr}
 800c41a:	690b      	ldr	r3, [r1, #16]
 800c41c:	4605      	mov	r5, r0
 800c41e:	460c      	mov	r4, r1
 800c420:	b913      	cbnz	r3, 800c428 <_fflush_r+0x10>
 800c422:	2500      	movs	r5, #0
 800c424:	4628      	mov	r0, r5
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	b118      	cbz	r0, 800c432 <_fflush_r+0x1a>
 800c42a:	6a03      	ldr	r3, [r0, #32]
 800c42c:	b90b      	cbnz	r3, 800c432 <_fflush_r+0x1a>
 800c42e:	f7fe f935 	bl	800a69c <__sinit>
 800c432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d0f3      	beq.n	800c422 <_fflush_r+0xa>
 800c43a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c43c:	07d0      	lsls	r0, r2, #31
 800c43e:	d404      	bmi.n	800c44a <_fflush_r+0x32>
 800c440:	0599      	lsls	r1, r3, #22
 800c442:	d402      	bmi.n	800c44a <_fflush_r+0x32>
 800c444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c446:	f7fe fb22 	bl	800aa8e <__retarget_lock_acquire_recursive>
 800c44a:	4628      	mov	r0, r5
 800c44c:	4621      	mov	r1, r4
 800c44e:	f7ff ff5d 	bl	800c30c <__sflush_r>
 800c452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c454:	07da      	lsls	r2, r3, #31
 800c456:	4605      	mov	r5, r0
 800c458:	d4e4      	bmi.n	800c424 <_fflush_r+0xc>
 800c45a:	89a3      	ldrh	r3, [r4, #12]
 800c45c:	059b      	lsls	r3, r3, #22
 800c45e:	d4e1      	bmi.n	800c424 <_fflush_r+0xc>
 800c460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c462:	f7fe fb15 	bl	800aa90 <__retarget_lock_release_recursive>
 800c466:	e7dd      	b.n	800c424 <_fflush_r+0xc>

0800c468 <__swhatbuf_r>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	460c      	mov	r4, r1
 800c46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c470:	2900      	cmp	r1, #0
 800c472:	b096      	sub	sp, #88	; 0x58
 800c474:	4615      	mov	r5, r2
 800c476:	461e      	mov	r6, r3
 800c478:	da0d      	bge.n	800c496 <__swhatbuf_r+0x2e>
 800c47a:	89a3      	ldrh	r3, [r4, #12]
 800c47c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c480:	f04f 0100 	mov.w	r1, #0
 800c484:	bf0c      	ite	eq
 800c486:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c48a:	2340      	movne	r3, #64	; 0x40
 800c48c:	2000      	movs	r0, #0
 800c48e:	6031      	str	r1, [r6, #0]
 800c490:	602b      	str	r3, [r5, #0]
 800c492:	b016      	add	sp, #88	; 0x58
 800c494:	bd70      	pop	{r4, r5, r6, pc}
 800c496:	466a      	mov	r2, sp
 800c498:	f000 f848 	bl	800c52c <_fstat_r>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	dbec      	blt.n	800c47a <__swhatbuf_r+0x12>
 800c4a0:	9901      	ldr	r1, [sp, #4]
 800c4a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c4a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c4aa:	4259      	negs	r1, r3
 800c4ac:	4159      	adcs	r1, r3
 800c4ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4b2:	e7eb      	b.n	800c48c <__swhatbuf_r+0x24>

0800c4b4 <__smakebuf_r>:
 800c4b4:	898b      	ldrh	r3, [r1, #12]
 800c4b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4b8:	079d      	lsls	r5, r3, #30
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	460c      	mov	r4, r1
 800c4be:	d507      	bpl.n	800c4d0 <__smakebuf_r+0x1c>
 800c4c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	6123      	str	r3, [r4, #16]
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	6163      	str	r3, [r4, #20]
 800c4cc:	b002      	add	sp, #8
 800c4ce:	bd70      	pop	{r4, r5, r6, pc}
 800c4d0:	ab01      	add	r3, sp, #4
 800c4d2:	466a      	mov	r2, sp
 800c4d4:	f7ff ffc8 	bl	800c468 <__swhatbuf_r>
 800c4d8:	9900      	ldr	r1, [sp, #0]
 800c4da:	4605      	mov	r5, r0
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f7ff f9c9 	bl	800b874 <_malloc_r>
 800c4e2:	b948      	cbnz	r0, 800c4f8 <__smakebuf_r+0x44>
 800c4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4e8:	059a      	lsls	r2, r3, #22
 800c4ea:	d4ef      	bmi.n	800c4cc <__smakebuf_r+0x18>
 800c4ec:	f023 0303 	bic.w	r3, r3, #3
 800c4f0:	f043 0302 	orr.w	r3, r3, #2
 800c4f4:	81a3      	strh	r3, [r4, #12]
 800c4f6:	e7e3      	b.n	800c4c0 <__smakebuf_r+0xc>
 800c4f8:	89a3      	ldrh	r3, [r4, #12]
 800c4fa:	6020      	str	r0, [r4, #0]
 800c4fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c500:	81a3      	strh	r3, [r4, #12]
 800c502:	9b00      	ldr	r3, [sp, #0]
 800c504:	6163      	str	r3, [r4, #20]
 800c506:	9b01      	ldr	r3, [sp, #4]
 800c508:	6120      	str	r0, [r4, #16]
 800c50a:	b15b      	cbz	r3, 800c524 <__smakebuf_r+0x70>
 800c50c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c510:	4630      	mov	r0, r6
 800c512:	f000 f81d 	bl	800c550 <_isatty_r>
 800c516:	b128      	cbz	r0, 800c524 <__smakebuf_r+0x70>
 800c518:	89a3      	ldrh	r3, [r4, #12]
 800c51a:	f023 0303 	bic.w	r3, r3, #3
 800c51e:	f043 0301 	orr.w	r3, r3, #1
 800c522:	81a3      	strh	r3, [r4, #12]
 800c524:	89a3      	ldrh	r3, [r4, #12]
 800c526:	431d      	orrs	r5, r3
 800c528:	81a5      	strh	r5, [r4, #12]
 800c52a:	e7cf      	b.n	800c4cc <__smakebuf_r+0x18>

0800c52c <_fstat_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d07      	ldr	r5, [pc, #28]	; (800c54c <_fstat_r+0x20>)
 800c530:	2300      	movs	r3, #0
 800c532:	4604      	mov	r4, r0
 800c534:	4608      	mov	r0, r1
 800c536:	4611      	mov	r1, r2
 800c538:	602b      	str	r3, [r5, #0]
 800c53a:	f7f6 fba8 	bl	8002c8e <_fstat>
 800c53e:	1c43      	adds	r3, r0, #1
 800c540:	d102      	bne.n	800c548 <_fstat_r+0x1c>
 800c542:	682b      	ldr	r3, [r5, #0]
 800c544:	b103      	cbz	r3, 800c548 <_fstat_r+0x1c>
 800c546:	6023      	str	r3, [r4, #0]
 800c548:	bd38      	pop	{r3, r4, r5, pc}
 800c54a:	bf00      	nop
 800c54c:	20000804 	.word	0x20000804

0800c550 <_isatty_r>:
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	4d06      	ldr	r5, [pc, #24]	; (800c56c <_isatty_r+0x1c>)
 800c554:	2300      	movs	r3, #0
 800c556:	4604      	mov	r4, r0
 800c558:	4608      	mov	r0, r1
 800c55a:	602b      	str	r3, [r5, #0]
 800c55c:	f7f6 fba7 	bl	8002cae <_isatty>
 800c560:	1c43      	adds	r3, r0, #1
 800c562:	d102      	bne.n	800c56a <_isatty_r+0x1a>
 800c564:	682b      	ldr	r3, [r5, #0]
 800c566:	b103      	cbz	r3, 800c56a <_isatty_r+0x1a>
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
 800c56c:	20000804 	.word	0x20000804

0800c570 <_sbrk_r>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	4d06      	ldr	r5, [pc, #24]	; (800c58c <_sbrk_r+0x1c>)
 800c574:	2300      	movs	r3, #0
 800c576:	4604      	mov	r4, r0
 800c578:	4608      	mov	r0, r1
 800c57a:	602b      	str	r3, [r5, #0]
 800c57c:	f7f6 fbb0 	bl	8002ce0 <_sbrk>
 800c580:	1c43      	adds	r3, r0, #1
 800c582:	d102      	bne.n	800c58a <_sbrk_r+0x1a>
 800c584:	682b      	ldr	r3, [r5, #0]
 800c586:	b103      	cbz	r3, 800c58a <_sbrk_r+0x1a>
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	bd38      	pop	{r3, r4, r5, pc}
 800c58c:	20000804 	.word	0x20000804

0800c590 <memcpy>:
 800c590:	440a      	add	r2, r1
 800c592:	4291      	cmp	r1, r2
 800c594:	f100 33ff 	add.w	r3, r0, #4294967295
 800c598:	d100      	bne.n	800c59c <memcpy+0xc>
 800c59a:	4770      	bx	lr
 800c59c:	b510      	push	{r4, lr}
 800c59e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5a6:	4291      	cmp	r1, r2
 800c5a8:	d1f9      	bne.n	800c59e <memcpy+0xe>
 800c5aa:	bd10      	pop	{r4, pc}

0800c5ac <__assert_func>:
 800c5ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5ae:	4614      	mov	r4, r2
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	4b09      	ldr	r3, [pc, #36]	; (800c5d8 <__assert_func+0x2c>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4605      	mov	r5, r0
 800c5b8:	68d8      	ldr	r0, [r3, #12]
 800c5ba:	b14c      	cbz	r4, 800c5d0 <__assert_func+0x24>
 800c5bc:	4b07      	ldr	r3, [pc, #28]	; (800c5dc <__assert_func+0x30>)
 800c5be:	9100      	str	r1, [sp, #0]
 800c5c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5c4:	4906      	ldr	r1, [pc, #24]	; (800c5e0 <__assert_func+0x34>)
 800c5c6:	462b      	mov	r3, r5
 800c5c8:	f000 f844 	bl	800c654 <fiprintf>
 800c5cc:	f000 f854 	bl	800c678 <abort>
 800c5d0:	4b04      	ldr	r3, [pc, #16]	; (800c5e4 <__assert_func+0x38>)
 800c5d2:	461c      	mov	r4, r3
 800c5d4:	e7f3      	b.n	800c5be <__assert_func+0x12>
 800c5d6:	bf00      	nop
 800c5d8:	20000070 	.word	0x20000070
 800c5dc:	0800cabf 	.word	0x0800cabf
 800c5e0:	0800cacc 	.word	0x0800cacc
 800c5e4:	0800cafa 	.word	0x0800cafa

0800c5e8 <_calloc_r>:
 800c5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5ea:	fba1 2402 	umull	r2, r4, r1, r2
 800c5ee:	b94c      	cbnz	r4, 800c604 <_calloc_r+0x1c>
 800c5f0:	4611      	mov	r1, r2
 800c5f2:	9201      	str	r2, [sp, #4]
 800c5f4:	f7ff f93e 	bl	800b874 <_malloc_r>
 800c5f8:	9a01      	ldr	r2, [sp, #4]
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	b930      	cbnz	r0, 800c60c <_calloc_r+0x24>
 800c5fe:	4628      	mov	r0, r5
 800c600:	b003      	add	sp, #12
 800c602:	bd30      	pop	{r4, r5, pc}
 800c604:	220c      	movs	r2, #12
 800c606:	6002      	str	r2, [r0, #0]
 800c608:	2500      	movs	r5, #0
 800c60a:	e7f8      	b.n	800c5fe <_calloc_r+0x16>
 800c60c:	4621      	mov	r1, r4
 800c60e:	f7fe f9c1 	bl	800a994 <memset>
 800c612:	e7f4      	b.n	800c5fe <_calloc_r+0x16>

0800c614 <__ascii_mbtowc>:
 800c614:	b082      	sub	sp, #8
 800c616:	b901      	cbnz	r1, 800c61a <__ascii_mbtowc+0x6>
 800c618:	a901      	add	r1, sp, #4
 800c61a:	b142      	cbz	r2, 800c62e <__ascii_mbtowc+0x1a>
 800c61c:	b14b      	cbz	r3, 800c632 <__ascii_mbtowc+0x1e>
 800c61e:	7813      	ldrb	r3, [r2, #0]
 800c620:	600b      	str	r3, [r1, #0]
 800c622:	7812      	ldrb	r2, [r2, #0]
 800c624:	1e10      	subs	r0, r2, #0
 800c626:	bf18      	it	ne
 800c628:	2001      	movne	r0, #1
 800c62a:	b002      	add	sp, #8
 800c62c:	4770      	bx	lr
 800c62e:	4610      	mov	r0, r2
 800c630:	e7fb      	b.n	800c62a <__ascii_mbtowc+0x16>
 800c632:	f06f 0001 	mvn.w	r0, #1
 800c636:	e7f8      	b.n	800c62a <__ascii_mbtowc+0x16>

0800c638 <__ascii_wctomb>:
 800c638:	b149      	cbz	r1, 800c64e <__ascii_wctomb+0x16>
 800c63a:	2aff      	cmp	r2, #255	; 0xff
 800c63c:	bf85      	ittet	hi
 800c63e:	238a      	movhi	r3, #138	; 0x8a
 800c640:	6003      	strhi	r3, [r0, #0]
 800c642:	700a      	strbls	r2, [r1, #0]
 800c644:	f04f 30ff 	movhi.w	r0, #4294967295
 800c648:	bf98      	it	ls
 800c64a:	2001      	movls	r0, #1
 800c64c:	4770      	bx	lr
 800c64e:	4608      	mov	r0, r1
 800c650:	4770      	bx	lr
	...

0800c654 <fiprintf>:
 800c654:	b40e      	push	{r1, r2, r3}
 800c656:	b503      	push	{r0, r1, lr}
 800c658:	4601      	mov	r1, r0
 800c65a:	ab03      	add	r3, sp, #12
 800c65c:	4805      	ldr	r0, [pc, #20]	; (800c674 <fiprintf+0x20>)
 800c65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c662:	6800      	ldr	r0, [r0, #0]
 800c664:	9301      	str	r3, [sp, #4]
 800c666:	f7ff fd37 	bl	800c0d8 <_vfiprintf_r>
 800c66a:	b002      	add	sp, #8
 800c66c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c670:	b003      	add	sp, #12
 800c672:	4770      	bx	lr
 800c674:	20000070 	.word	0x20000070

0800c678 <abort>:
 800c678:	b508      	push	{r3, lr}
 800c67a:	2006      	movs	r0, #6
 800c67c:	f000 f82c 	bl	800c6d8 <raise>
 800c680:	2001      	movs	r0, #1
 800c682:	f7f6 fab5 	bl	8002bf0 <_exit>

0800c686 <_raise_r>:
 800c686:	291f      	cmp	r1, #31
 800c688:	b538      	push	{r3, r4, r5, lr}
 800c68a:	4604      	mov	r4, r0
 800c68c:	460d      	mov	r5, r1
 800c68e:	d904      	bls.n	800c69a <_raise_r+0x14>
 800c690:	2316      	movs	r3, #22
 800c692:	6003      	str	r3, [r0, #0]
 800c694:	f04f 30ff 	mov.w	r0, #4294967295
 800c698:	bd38      	pop	{r3, r4, r5, pc}
 800c69a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c69c:	b112      	cbz	r2, 800c6a4 <_raise_r+0x1e>
 800c69e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6a2:	b94b      	cbnz	r3, 800c6b8 <_raise_r+0x32>
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f000 f831 	bl	800c70c <_getpid_r>
 800c6aa:	462a      	mov	r2, r5
 800c6ac:	4601      	mov	r1, r0
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6b4:	f000 b818 	b.w	800c6e8 <_kill_r>
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d00a      	beq.n	800c6d2 <_raise_r+0x4c>
 800c6bc:	1c59      	adds	r1, r3, #1
 800c6be:	d103      	bne.n	800c6c8 <_raise_r+0x42>
 800c6c0:	2316      	movs	r3, #22
 800c6c2:	6003      	str	r3, [r0, #0]
 800c6c4:	2001      	movs	r0, #1
 800c6c6:	e7e7      	b.n	800c698 <_raise_r+0x12>
 800c6c8:	2400      	movs	r4, #0
 800c6ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	4798      	blx	r3
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	e7e0      	b.n	800c698 <_raise_r+0x12>
	...

0800c6d8 <raise>:
 800c6d8:	4b02      	ldr	r3, [pc, #8]	; (800c6e4 <raise+0xc>)
 800c6da:	4601      	mov	r1, r0
 800c6dc:	6818      	ldr	r0, [r3, #0]
 800c6de:	f7ff bfd2 	b.w	800c686 <_raise_r>
 800c6e2:	bf00      	nop
 800c6e4:	20000070 	.word	0x20000070

0800c6e8 <_kill_r>:
 800c6e8:	b538      	push	{r3, r4, r5, lr}
 800c6ea:	4d07      	ldr	r5, [pc, #28]	; (800c708 <_kill_r+0x20>)
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	4608      	mov	r0, r1
 800c6f2:	4611      	mov	r1, r2
 800c6f4:	602b      	str	r3, [r5, #0]
 800c6f6:	f7f6 fa6b 	bl	8002bd0 <_kill>
 800c6fa:	1c43      	adds	r3, r0, #1
 800c6fc:	d102      	bne.n	800c704 <_kill_r+0x1c>
 800c6fe:	682b      	ldr	r3, [r5, #0]
 800c700:	b103      	cbz	r3, 800c704 <_kill_r+0x1c>
 800c702:	6023      	str	r3, [r4, #0]
 800c704:	bd38      	pop	{r3, r4, r5, pc}
 800c706:	bf00      	nop
 800c708:	20000804 	.word	0x20000804

0800c70c <_getpid_r>:
 800c70c:	f7f6 ba58 	b.w	8002bc0 <_getpid>

0800c710 <_init>:
 800c710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c712:	bf00      	nop
 800c714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c716:	bc08      	pop	{r3}
 800c718:	469e      	mov	lr, r3
 800c71a:	4770      	bx	lr

0800c71c <_fini>:
 800c71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71e:	bf00      	nop
 800c720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c722:	bc08      	pop	{r3}
 800c724:	469e      	mov	lr, r3
 800c726:	4770      	bx	lr
