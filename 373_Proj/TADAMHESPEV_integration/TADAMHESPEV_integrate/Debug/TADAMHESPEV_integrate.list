
TADAMHESPEV_integrate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f60  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800a120  0800a120  0001a120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a57c  0800a57c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a57c  0800a57c  0001a57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a584  0800a584  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a584  0800a584  0001a584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a588  0800a588  0001a588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a58c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  200001d8  0800a764  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  0800a764  00020718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000191f5  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003060  00000000  00000000  00039440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e8  00000000  00000000  0003c4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001148  00000000  00000000  0003da88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ca16  00000000  00000000  0003ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b55e  00000000  00000000  0006b5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f4f4  00000000  00000000  00086b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e28  00000000  00000000  00196038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  0019ce60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a108 	.word	0x0800a108

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	0800a108 	.word	0x0800a108

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <setupAccModule>:
#define OUT_Z_L_A 0x2C
#define OUT_Z_H_A 0x2D

extern I2C_HandleTypeDef hi2c1;

void setupAccModule(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
	uint8_t buf[10]= {ACC_IR_CTRL1, CTR1_SETUP};
 8000f7a:	f249 7320 	movw	r3, #38688	; 0x9720
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	809a      	strh	r2, [r3, #4]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDR << 1, buf, 2, 1000);
 8000f8a:	1d3a      	adds	r2, r7, #4
 8000f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2302      	movs	r3, #2
 8000f94:	2132      	movs	r1, #50	; 0x32
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <setupAccModule+0x48>)
 8000f98:	f001 fe30 	bl	8002bfc <HAL_I2C_Master_Transmit>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
	if(ret == 0){
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d103      	bne.n	8000fae <setupAccModule+0x3a>
		printf("We gucci\n");
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <setupAccModule+0x4c>)
 8000fa8:	f007 f912 	bl	80081d0 <puts>
	}
	else{
		printf("we not gucci\n");
	}
}
 8000fac:	e002      	b.n	8000fb4 <setupAccModule+0x40>
		printf("we not gucci\n");
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <setupAccModule+0x50>)
 8000fb0:	f007 f90e 	bl	80081d0 <puts>
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000284 	.word	0x20000284
 8000fc0:	0800a120 	.word	0x0800a120
 8000fc4:	0800a12c 	.word	0x0800a12c

08000fc8 <setupLEDS>:
uint8_t clearLEDs[NUM_MSG_BYTES];
uint8_t BLANK_LED[4] = {0xE0, 0x00, 0x00, 0x00};

extern SPI_HandleTypeDef hspi2;

void setupLEDS(){
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
	float acc_inc = MAX_ACCEL/NUM_LEDS;
 8000fce:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <setupLEDS+0xb8>)
 8000fd0:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < NUM_LEDS; ++i){
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	e028      	b.n	800102a <setupLEDS+0x62>
		//setup LED_INDEX_THRESHOLD
		LED_INDEX_THRESHOLD[i] = i*acc_inc;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fea:	4a26      	ldr	r2, [pc, #152]	; (8001084 <setupLEDS+0xbc>)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	edc3 7a00 	vstr	s15, [r3]

		//setup LED_COLOR_ARR
		if(i < NUM_GREEN){
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	dc05      	bgt.n	8001008 <setupLEDS+0x40>
			LED_COLOR_ARR[i] = 0; // 0 = green
 8000ffc:	4a22      	ldr	r2, [pc, #136]	; (8001088 <setupLEDS+0xc0>)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4413      	add	r3, r2
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e00d      	b.n	8001024 <setupLEDS+0x5c>
		}
		else if(i < NUM_GREEN + NUM_YELLOW){
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b0a      	cmp	r3, #10
 800100c:	dc05      	bgt.n	800101a <setupLEDS+0x52>
			LED_COLOR_ARR[i] = 1; // 1 = yellow
 800100e:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <setupLEDS+0xc0>)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
 8001018:	e004      	b.n	8001024 <setupLEDS+0x5c>
		}
		else{
			LED_COLOR_ARR[i] = 2; // 2 = red
 800101a:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <setupLEDS+0xc0>)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	2202      	movs	r2, #2
 8001022:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_LEDS; ++i){
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b0e      	cmp	r3, #14
 800102e:	ddd3      	ble.n	8000fd8 <setupLEDS+0x10>
		}
	}

	//initialize a blank LED strip array
	for(int j = 0; j < NUM_MSG_BYTES; ++j){
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	e01a      	b.n	800106c <setupLEDS+0xa4>
		if(j < 4){
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	2b03      	cmp	r3, #3
 800103a:	dc05      	bgt.n	8001048 <setupLEDS+0x80>
			clearLEDs[j] = 0;
 800103c:	4a13      	ldr	r2, [pc, #76]	; (800108c <setupLEDS+0xc4>)
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	4413      	add	r3, r2
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	e00e      	b.n	8001066 <setupLEDS+0x9e>
		}
		else if(j < (NUM_MSG_BYTES - 1)){
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	2b3f      	cmp	r3, #63	; 0x3f
 800104c:	dc06      	bgt.n	800105c <setupLEDS+0x94>
			memcpy(&clearLEDs[j],BLANK_LED,sizeof(BLANK_LED));
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <setupLEDS+0xc4>)
 8001052:	4413      	add	r3, r2
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <setupLEDS+0xc8>)
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e004      	b.n	8001066 <setupLEDS+0x9e>
		}
		else{
			clearLEDs[j] = 0;
 800105c:	4a0b      	ldr	r2, [pc, #44]	; (800108c <setupLEDS+0xc4>)
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	4413      	add	r3, r2
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < NUM_MSG_BYTES; ++j){
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	3301      	adds	r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	2b40      	cmp	r3, #64	; 0x40
 8001070:	dde1      	ble.n	8001036 <setupLEDS+0x6e>
		}
	}
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	3e088889 	.word	0x3e088889
 8001084:	200001f4 	.word	0x200001f4
 8001088:	20000230 	.word	0x20000230
 800108c:	20000240 	.word	0x20000240
 8001090:	20000000 	.word	0x20000000

08001094 <read_Temperature>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile struct TelData teldata;
uint8_t buf[20];

uint16_t read_Temperature(uint16_t GPIO_PIN) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
	uint16_t spi_buf[2];
	// Set the CS1 pin to low
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN, GPIO_PIN_RESET);
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	481e      	ldr	r0, [pc, #120]	; (8001120 <read_Temperature+0x8c>)
 80010a6:	f001 fcf5 	bl	8002a94 <HAL_GPIO_WritePin>

	// Receive the data
	HAL_SPI_Receive(&hspi1, spi_buf, sizeof(spi_buf), 100);
 80010aa:	f107 010c 	add.w	r1, r7, #12
 80010ae:	2364      	movs	r3, #100	; 0x64
 80010b0:	2204      	movs	r2, #4
 80010b2:	481c      	ldr	r0, [pc, #112]	; (8001124 <read_Temperature+0x90>)
 80010b4:	f003 fec9 	bl	8004e4a <HAL_SPI_Receive>

	// Set the CS pin back to high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN, GPIO_PIN_SET);
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	2201      	movs	r2, #1
 80010bc:	4619      	mov	r1, r3
 80010be:	4818      	ldr	r0, [pc, #96]	; (8001120 <read_Temperature+0x8c>)
 80010c0:	f001 fce8 	bl	8002a94 <HAL_GPIO_WritePin>
//	HAL_Delay(1000);

	// handle the data
	// spi_buf[0] contains the first 16 bits of data
	// spi_buf[1] contains the last 16 bits of data
	uint16_t external_temp = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	82fb      	strh	r3, [r7, #22]
	uint16_t internal_temp = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	82bb      	strh	r3, [r7, #20]
	uint8_t fault = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	74fb      	strb	r3, [r7, #19]
	external_temp |= (spi_buf[0] >> 2) & 0xFFFF; // keep all data values
 80010d0:	89bb      	ldrh	r3, [r7, #12]
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	8afb      	ldrh	r3, [r7, #22]
 80010d8:	4313      	orrs	r3, r2
 80010da:	82fb      	strh	r3, [r7, #22]
	internal_temp |= (spi_buf[1] >> 4) & 0xFFFF; // keep all data values
 80010dc:	89fb      	ldrh	r3, [r7, #14]
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	8abb      	ldrh	r3, [r7, #20]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	82bb      	strh	r3, [r7, #20]
	fault |= spi_buf[0] & 0x01; // only want the LSB
 80010e8:	89bb      	ldrh	r3, [r7, #12]
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	b25a      	sxtb	r2, r3
 80010f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	74fb      	strb	r3, [r7, #19]
//	printf("External Temperature of %d: %d \n\r", GPIO_PIN, (external_temp/4));
//	printf("Internal Temperature of %d: %d \n\r", GPIO_PIN, (internal_temp/16));
	if(fault) {
 80010fc:	7cfb      	ldrb	r3, [r7, #19]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <read_Temperature+0x74>
		printf("ERROR \n\r");
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <read_Temperature+0x94>)
 8001104:	f006 fffe 	bl	8008104 <iprintf>
	}


	// reset spi_buffer
	spi_buf[0] = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	81bb      	strh	r3, [r7, #12]
	spi_buf[1] = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	81fb      	strh	r3, [r7, #14]

	return external_temp/4;
 8001110:	8afb      	ldrh	r3, [r7, #22]
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	b29b      	uxth	r3, r3
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	48000400 	.word	0x48000400
 8001124:	20000400 	.word	0x20000400
 8001128:	0800a15c 	.word	0x0800a15c

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001130:	f001 f997 	bl	8002462 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001134:	f000 f838 	bl	80011a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001138:	f000 fabc 	bl	80016b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800113c:	f000 f87a 	bl	8001234 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001140:	f000 f94e 	bl	80013e0 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001144:	f000 f9c8 	bl	80014d8 <MX_TIM3_Init>
  MX_TIM15_Init();
 8001148:	f000 fa16 	bl	8001578 <MX_TIM15_Init>
  MX_TIM17_Init();
 800114c:	f000 fa66 	bl	800161c <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8001150:	f000 f8fa 	bl	8001348 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 8001154:	f000 f8ac 	bl	80012b0 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8001158:	f000 f980 	bl	800145c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	// CS for all sensors should be high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2120      	movs	r1, #32
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <main+0x6c>)
 8001162:	f001 fc97 	bl	8002a94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2104      	movs	r1, #4
 800116a:	480b      	ldr	r0, [pc, #44]	; (8001198 <main+0x6c>)
 800116c:	f001 fc92 	bl	8002a94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	2140      	movs	r1, #64	; 0x40
 8001174:	4808      	ldr	r0, [pc, #32]	; (8001198 <main+0x6c>)
 8001176:	f001 fc8d 	bl	8002a94 <HAL_GPIO_WritePin>

	setupAccModule();
 800117a:	f7ff fefb 	bl	8000f74 <setupAccModule>
	setupLEDS();
 800117e:	f7ff ff23 	bl	8000fc8 <setupLEDS>

	// Start Timer
	HAL_TIM_Base_Start_IT(&htim3);
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <main+0x70>)
 8001184:	f004 fbce 	bl	8005924 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim15);
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <main+0x74>)
 800118a:	f004 fbcb 	bl	8005924 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim17,TIM_CHANNEL_1);
 800118e:	2100      	movs	r1, #0
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <main+0x78>)
 8001192:	f004 fc99 	bl	8005ac8 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001196:	e7fe      	b.n	8001196 <main+0x6a>
 8001198:	48000400 	.word	0x48000400
 800119c:	200004c8 	.word	0x200004c8
 80011a0:	20000514 	.word	0x20000514
 80011a4:	20000560 	.word	0x20000560

080011a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b096      	sub	sp, #88	; 0x58
 80011ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	2244      	movs	r2, #68	; 0x44
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f007 f812 	bl	80081e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011ce:	f002 f8f5 	bl	80033bc <HAL_PWREx_ControlVoltageScaling>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011d8:	f000 fc9a 	bl	8001b10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011dc:	2310      	movs	r3, #16
 80011de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011e0:	2301      	movs	r3, #1
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011e8:	2360      	movs	r3, #96	; 0x60
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4618      	mov	r0, r3
 80011f6:	f002 f995 	bl	8003524 <HAL_RCC_OscConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001200:	f000 fc86 	bl	8001b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001204:	230f      	movs	r3, #15
 8001206:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f002 fd9b 	bl	8003d58 <HAL_RCC_ClockConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001228:	f000 fc72 	bl	8001b10 <Error_Handler>
  }
}
 800122c:	bf00      	nop
 800122e:	3758      	adds	r7, #88	; 0x58
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_I2C1_Init+0x74>)
 800123a:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <MX_I2C1_Init+0x78>)
 800123c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_I2C1_Init+0x74>)
 8001240:	f640 6214 	movw	r2, #3604	; 0xe14
 8001244:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_I2C1_Init+0x74>)
 800124e:	2201      	movs	r2, #1
 8001250:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_I2C1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_I2C1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <MX_I2C1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_I2C1_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001270:	480d      	ldr	r0, [pc, #52]	; (80012a8 <MX_I2C1_Init+0x74>)
 8001272:	f001 fc27 	bl	8002ac4 <HAL_I2C_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800127c:	f000 fc48 	bl	8001b10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001280:	2100      	movs	r1, #0
 8001282:	4809      	ldr	r0, [pc, #36]	; (80012a8 <MX_I2C1_Init+0x74>)
 8001284:	f001 ffe2 	bl	800324c <HAL_I2CEx_ConfigAnalogFilter>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800128e:	f000 fc3f 	bl	8001b10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001292:	2100      	movs	r1, #0
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_I2C1_Init+0x74>)
 8001296:	f002 f824 	bl	80032e2 <HAL_I2CEx_ConfigDigitalFilter>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80012a0:	f000 fc36 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000284 	.word	0x20000284
 80012ac:	40005400 	.word	0x40005400

080012b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <MX_LPUART1_UART_Init+0x90>)
 80012b6:	4a23      	ldr	r2, [pc, #140]	; (8001344 <MX_LPUART1_UART_Init+0x94>)
 80012b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <MX_LPUART1_UART_Init+0x90>)
 80012bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <MX_LPUART1_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <MX_LPUART1_UART_Init+0x90>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_LPUART1_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_LPUART1_UART_Init+0x90>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_LPUART1_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_LPUART1_UART_Init+0x90>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <MX_LPUART1_UART_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_LPUART1_UART_Init+0x90>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MX_LPUART1_UART_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012f8:	4811      	ldr	r0, [pc, #68]	; (8001340 <MX_LPUART1_UART_Init+0x90>)
 80012fa:	f005 fae3 	bl	80068c4 <HAL_UART_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001304:	f000 fc04 	bl	8001b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001308:	2100      	movs	r1, #0
 800130a:	480d      	ldr	r0, [pc, #52]	; (8001340 <MX_LPUART1_UART_Init+0x90>)
 800130c:	f006 f908 	bl	8007520 <HAL_UARTEx_SetTxFifoThreshold>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001316:	f000 fbfb 	bl	8001b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800131a:	2100      	movs	r1, #0
 800131c:	4808      	ldr	r0, [pc, #32]	; (8001340 <MX_LPUART1_UART_Init+0x90>)
 800131e:	f006 f93d 	bl	800759c <HAL_UARTEx_SetRxFifoThreshold>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001328:	f000 fbf2 	bl	8001b10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_LPUART1_UART_Init+0x90>)
 800132e:	f006 f8be 	bl	80074ae <HAL_UARTEx_DisableFifoMode>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001338:	f000 fbea 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200002d8 	.word	0x200002d8
 8001344:	40008000 	.word	0x40008000

08001348 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <MX_USART1_UART_Init+0x90>)
 800134e:	4a23      	ldr	r2, [pc, #140]	; (80013dc <MX_USART1_UART_Init+0x94>)
 8001350:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <MX_USART1_UART_Init+0x90>)
 8001354:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001358:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <MX_USART1_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <MX_USART1_UART_Init+0x90>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <MX_USART1_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <MX_USART1_UART_Init+0x90>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <MX_USART1_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_USART1_UART_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <MX_USART1_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_USART1_UART_Init+0x90>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <MX_USART1_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001390:	4811      	ldr	r0, [pc, #68]	; (80013d8 <MX_USART1_UART_Init+0x90>)
 8001392:	f005 fa97 	bl	80068c4 <HAL_UART_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800139c:	f000 fbb8 	bl	8001b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a0:	2100      	movs	r1, #0
 80013a2:	480d      	ldr	r0, [pc, #52]	; (80013d8 <MX_USART1_UART_Init+0x90>)
 80013a4:	f006 f8bc 	bl	8007520 <HAL_UARTEx_SetTxFifoThreshold>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013ae:	f000 fbaf 	bl	8001b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b2:	2100      	movs	r1, #0
 80013b4:	4808      	ldr	r0, [pc, #32]	; (80013d8 <MX_USART1_UART_Init+0x90>)
 80013b6:	f006 f8f1 	bl	800759c <HAL_UARTEx_SetRxFifoThreshold>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013c0:	f000 fba6 	bl	8001b10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <MX_USART1_UART_Init+0x90>)
 80013c6:	f006 f872 	bl	80074ae <HAL_UARTEx_DisableFifoMode>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013d0:	f000 fb9e 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000036c 	.word	0x2000036c
 80013dc:	40013800 	.word	0x40013800

080013e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <MX_SPI1_Init+0x74>)
 80013e6:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <MX_SPI1_Init+0x78>)
 80013e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_SPI1_Init+0x74>)
 80013ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_SPI1_Init+0x74>)
 80013f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013f8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_SPI1_Init+0x74>)
 80013fc:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001400:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_SPI1_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_SPI1_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_SPI1_Init+0x74>)
 8001410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001414:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_SPI1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <MX_SPI1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_SPI1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <MX_SPI1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_SPI1_Init+0x74>)
 8001430:	2207      	movs	r2, #7
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <MX_SPI1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_SPI1_Init+0x74>)
 800143c:	2208      	movs	r2, #8
 800143e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_SPI1_Init+0x74>)
 8001442:	f003 fc5f 	bl	8004d04 <HAL_SPI_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800144c:	f000 fb60 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000400 	.word	0x20000400
 8001458:	40013000 	.word	0x40013000

0800145c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <MX_SPI2_Init+0x74>)
 8001462:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <MX_SPI2_Init+0x78>)
 8001464:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_SPI2_Init+0x74>)
 8001468:	f44f 7282 	mov.w	r2, #260	; 0x104
 800146c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <MX_SPI2_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001474:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <MX_SPI2_Init+0x74>)
 8001476:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800147a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_SPI2_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <MX_SPI2_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_SPI2_Init+0x74>)
 800148a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_SPI2_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_SPI2_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_SPI2_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_SPI2_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_SPI2_Init+0x74>)
 80014aa:	2207      	movs	r2, #7
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_SPI2_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_SPI2_Init+0x74>)
 80014b6:	2208      	movs	r2, #8
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_SPI2_Init+0x74>)
 80014bc:	f003 fc22 	bl	8004d04 <HAL_SPI_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80014c6:	f000 fb23 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000464 	.word	0x20000464
 80014d4:	40003800 	.word	0x40003800

080014d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014de:	f107 0310 	add.w	r3, r7, #16
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <MX_TIM3_Init+0x98>)
 80014f8:	4a1e      	ldr	r2, [pc, #120]	; (8001574 <MX_TIM3_Init+0x9c>)
 80014fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3999;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_TIM3_Init+0x98>)
 80014fe:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001502:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_TIM3_Init+0x98>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <MX_TIM3_Init+0x98>)
 800150c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001510:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_TIM3_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_TIM3_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <MX_TIM3_Init+0x98>)
 8001520:	f004 f9a8 	bl	8005874 <HAL_TIM_Base_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800152a:	f000 faf1 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001532:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4619      	mov	r1, r3
 800153a:	480d      	ldr	r0, [pc, #52]	; (8001570 <MX_TIM3_Init+0x98>)
 800153c:	f004 fdac 	bl	8006098 <HAL_TIM_ConfigClockSource>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001546:	f000 fae3 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <MX_TIM3_Init+0x98>)
 8001558:	f005 f90e 	bl	8006778 <HAL_TIMEx_MasterConfigSynchronization>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001562:	f000 fad5 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200004c8 	.word	0x200004c8
 8001574:	40000400 	.word	0x40000400

08001578 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <MX_TIM15_Init+0x9c>)
 8001598:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <MX_TIM15_Init+0xa0>)
 800159a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3999;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <MX_TIM15_Init+0x9c>)
 800159e:	f640 729f 	movw	r2, #3999	; 0xf9f
 80015a2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <MX_TIM15_Init+0x9c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19;
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <MX_TIM15_Init+0x9c>)
 80015ac:	2213      	movs	r2, #19
 80015ae:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <MX_TIM15_Init+0x9c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_TIM15_Init+0x9c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_TIM15_Init+0x9c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80015c2:	4814      	ldr	r0, [pc, #80]	; (8001614 <MX_TIM15_Init+0x9c>)
 80015c4:	f004 f956 	bl	8005874 <HAL_TIM_Base_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80015ce:	f000 fa9f 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	4619      	mov	r1, r3
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_TIM15_Init+0x9c>)
 80015e0:	f004 fd5a 	bl	8006098 <HAL_TIM_ConfigClockSource>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80015ea:	f000 fa91 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <MX_TIM15_Init+0x9c>)
 80015fc:	f005 f8bc 	bl	8006778 <HAL_TIMEx_MasterConfigSynchronization>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001606:	f000 fa83 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000514 	.word	0x20000514
 8001618:	40014000 	.word	0x40014000

0800161c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001622:	463b      	mov	r3, r7
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_TIM17_Init+0x90>)
 8001630:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <MX_TIM17_Init+0x94>)
 8001632:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3999;
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <MX_TIM17_Init+0x90>)
 8001636:	f640 729f 	movw	r2, #3999	; 0xf9f
 800163a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <MX_TIM17_Init+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_TIM17_Init+0x90>)
 8001644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001648:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <MX_TIM17_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_TIM17_Init+0x90>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <MX_TIM17_Init+0x90>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800165c:	4813      	ldr	r0, [pc, #76]	; (80016ac <MX_TIM17_Init+0x90>)
 800165e:	f004 f909 	bl	8005874 <HAL_TIM_Base_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM17_Init+0x50>
  {
    Error_Handler();
 8001668:	f000 fa52 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 800166c:	480f      	ldr	r0, [pc, #60]	; (80016ac <MX_TIM17_Init+0x90>)
 800166e:	f004 f9c9 	bl	8005a04 <HAL_TIM_IC_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001678:	f000 fa4a 	bl	8001b10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800167c:	2302      	movs	r3, #2
 800167e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001680:	2301      	movs	r3, #1
 8001682:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001688:	230f      	movs	r3, #15
 800168a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	2200      	movs	r2, #0
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	; (80016ac <MX_TIM17_Init+0x90>)
 8001694:	f004 fc64 	bl	8005f60 <HAL_TIM_IC_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM17_Init+0x86>
  {
    Error_Handler();
 800169e:	f000 fa37 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000560 	.word	0x20000560
 80016b0:	40014800 	.word	0x40014800

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08e      	sub	sp, #56	; 0x38
 80016b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ca:	4bb3      	ldr	r3, [pc, #716]	; (8001998 <MX_GPIO_Init+0x2e4>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	4ab2      	ldr	r2, [pc, #712]	; (8001998 <MX_GPIO_Init+0x2e4>)
 80016d0:	f043 0310 	orr.w	r3, r3, #16
 80016d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d6:	4bb0      	ldr	r3, [pc, #704]	; (8001998 <MX_GPIO_Init+0x2e4>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	623b      	str	r3, [r7, #32]
 80016e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	4bad      	ldr	r3, [pc, #692]	; (8001998 <MX_GPIO_Init+0x2e4>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	4aac      	ldr	r2, [pc, #688]	; (8001998 <MX_GPIO_Init+0x2e4>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ee:	4baa      	ldr	r3, [pc, #680]	; (8001998 <MX_GPIO_Init+0x2e4>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fa:	4ba7      	ldr	r3, [pc, #668]	; (8001998 <MX_GPIO_Init+0x2e4>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	4aa6      	ldr	r2, [pc, #664]	; (8001998 <MX_GPIO_Init+0x2e4>)
 8001700:	f043 0320 	orr.w	r3, r3, #32
 8001704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001706:	4ba4      	ldr	r3, [pc, #656]	; (8001998 <MX_GPIO_Init+0x2e4>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	61bb      	str	r3, [r7, #24]
 8001710:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001712:	4ba1      	ldr	r3, [pc, #644]	; (8001998 <MX_GPIO_Init+0x2e4>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	4aa0      	ldr	r2, [pc, #640]	; (8001998 <MX_GPIO_Init+0x2e4>)
 8001718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171e:	4b9e      	ldr	r3, [pc, #632]	; (8001998 <MX_GPIO_Init+0x2e4>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	4b9b      	ldr	r3, [pc, #620]	; (8001998 <MX_GPIO_Init+0x2e4>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	4a9a      	ldr	r2, [pc, #616]	; (8001998 <MX_GPIO_Init+0x2e4>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001736:	4b98      	ldr	r3, [pc, #608]	; (8001998 <MX_GPIO_Init+0x2e4>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	4b95      	ldr	r3, [pc, #596]	; (8001998 <MX_GPIO_Init+0x2e4>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	4a94      	ldr	r2, [pc, #592]	; (8001998 <MX_GPIO_Init+0x2e4>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174e:	4b92      	ldr	r3, [pc, #584]	; (8001998 <MX_GPIO_Init+0x2e4>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800175a:	4b8f      	ldr	r3, [pc, #572]	; (8001998 <MX_GPIO_Init+0x2e4>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	4a8e      	ldr	r2, [pc, #568]	; (8001998 <MX_GPIO_Init+0x2e4>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001766:	4b8c      	ldr	r3, [pc, #560]	; (8001998 <MX_GPIO_Init+0x2e4>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001772:	4b89      	ldr	r3, [pc, #548]	; (8001998 <MX_GPIO_Init+0x2e4>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	4a88      	ldr	r2, [pc, #544]	; (8001998 <MX_GPIO_Init+0x2e4>)
 8001778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800177c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177e:	4b86      	ldr	r3, [pc, #536]	; (8001998 <MX_GPIO_Init+0x2e4>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800178a:	f001 febb 	bl	8003504 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001796:	f001 f97d 	bl	8002a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2164      	movs	r1, #100	; 0x64
 800179e:	487f      	ldr	r0, [pc, #508]	; (800199c <MX_GPIO_Init+0x2e8>)
 80017a0:	f001 f978 	bl	8002a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017a4:	230c      	movs	r3, #12
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80017b4:	230d      	movs	r3, #13
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017bc:	4619      	mov	r1, r3
 80017be:	4878      	ldr	r0, [pc, #480]	; (80019a0 <MX_GPIO_Init+0x2ec>)
 80017c0:	f000 ffd6 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80017c4:	2307      	movs	r3, #7
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c8:	2312      	movs	r3, #18
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017d4:	2304      	movs	r3, #4
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017dc:	4619      	mov	r1, r3
 80017de:	4871      	ldr	r0, [pc, #452]	; (80019a4 <MX_GPIO_Init+0x2f0>)
 80017e0:	f000 ffc6 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80017f4:	230d      	movs	r3, #13
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	4869      	ldr	r0, [pc, #420]	; (80019a4 <MX_GPIO_Init+0x2f0>)
 8001800:	f000 ffb6 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001804:	233f      	movs	r3, #63	; 0x3f
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001808:	230b      	movs	r3, #11
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	4619      	mov	r1, r3
 8001816:	4864      	ldr	r0, [pc, #400]	; (80019a8 <MX_GPIO_Init+0x2f4>)
 8001818:	f000 ffaa 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800181c:	2301      	movs	r3, #1
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800182c:	2301      	movs	r3, #1
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001834:	4619      	mov	r1, r3
 8001836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183a:	f000 ff99 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800183e:	230a      	movs	r3, #10
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001842:	230b      	movs	r3, #11
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001854:	f000 ff8c 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	4619      	mov	r1, r3
 800186e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001872:	f000 ff7d 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001876:	2302      	movs	r3, #2
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800187a:	230b      	movs	r3, #11
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001886:	4619      	mov	r1, r3
 8001888:	4844      	ldr	r0, [pc, #272]	; (800199c <MX_GPIO_Init+0x2e8>)
 800188a:	f000 ff71 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800188e:	2364      	movs	r3, #100	; 0x64
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a2:	4619      	mov	r1, r3
 80018a4:	483d      	ldr	r0, [pc, #244]	; (800199c <MX_GPIO_Init+0x2e8>)
 80018a6:	f000 ff63 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80018aa:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018bc:	2301      	movs	r3, #1
 80018be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	4836      	ldr	r0, [pc, #216]	; (80019a0 <MX_GPIO_Init+0x2ec>)
 80018c8:	f000 ff52 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80018de:	2303      	movs	r3, #3
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	482d      	ldr	r0, [pc, #180]	; (80019a0 <MX_GPIO_Init+0x2ec>)
 80018ea:	f000 ff41 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001900:	2301      	movs	r3, #1
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	4824      	ldr	r0, [pc, #144]	; (800199c <MX_GPIO_Init+0x2e8>)
 800190c:	f000 ff30 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001910:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001922:	230d      	movs	r3, #13
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192a:	4619      	mov	r1, r3
 800192c:	481b      	ldr	r0, [pc, #108]	; (800199c <MX_GPIO_Init+0x2e8>)
 800192e:	f000 ff1f 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001932:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001944:	2307      	movs	r3, #7
 8001946:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194c:	4619      	mov	r1, r3
 800194e:	4817      	ldr	r0, [pc, #92]	; (80019ac <MX_GPIO_Init+0x2f8>)
 8001950:	f000 ff0e 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001954:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001966:	2302      	movs	r3, #2
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800196a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196e:	4619      	mov	r1, r3
 8001970:	480e      	ldr	r0, [pc, #56]	; (80019ac <MX_GPIO_Init+0x2f8>)
 8001972:	f000 fefd 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001976:	2340      	movs	r3, #64	; 0x40
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001986:	230d      	movs	r3, #13
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_GPIO_Init+0x2f4>)
 8001992:	f000 feed 	bl	8002770 <HAL_GPIO_Init>
 8001996:	e00b      	b.n	80019b0 <MX_GPIO_Init+0x2fc>
 8001998:	40021000 	.word	0x40021000
 800199c:	48000400 	.word	0x48000400
 80019a0:	48001000 	.word	0x48001000
 80019a4:	48001400 	.word	0x48001400
 80019a8:	48000800 	.word	0x48000800
 80019ac:	48000c00 	.word	0x48000c00

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80019b0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80019c2:	230c      	movs	r3, #12
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ca:	4619      	mov	r1, r3
 80019cc:	4843      	ldr	r0, [pc, #268]	; (8001adc <MX_GPIO_Init+0x428>)
 80019ce:	f000 fecf 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80019d2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019e4:	230a      	movs	r3, #10
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ec:	4619      	mov	r1, r3
 80019ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f2:	f000 febd 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0e:	f000 feaf 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a12:	2301      	movs	r3, #1
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a22:	2309      	movs	r3, #9
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	482c      	ldr	r0, [pc, #176]	; (8001ae0 <MX_GPIO_Init+0x42c>)
 8001a2e:	f000 fe9f 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a32:	2304      	movs	r3, #4
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a42:	230c      	movs	r3, #12
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4824      	ldr	r0, [pc, #144]	; (8001ae0 <MX_GPIO_Init+0x42c>)
 8001a4e:	f000 fe8f 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a52:	2320      	movs	r3, #32
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a62:	2307      	movs	r3, #7
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	481c      	ldr	r0, [pc, #112]	; (8001ae0 <MX_GPIO_Init+0x42c>)
 8001a6e:	f000 fe7f 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a72:	2340      	movs	r3, #64	; 0x40
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001a82:	2305      	movs	r3, #5
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4814      	ldr	r0, [pc, #80]	; (8001ae0 <MX_GPIO_Init+0x42c>)
 8001a8e:	f000 fe6f 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001a92:	2318      	movs	r3, #24
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001aa2:	2306      	movs	r3, #6
 8001aa4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <MX_GPIO_Init+0x430>)
 8001aae:	f000 fe5f 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aca:	4619      	mov	r1, r3
 8001acc:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <MX_GPIO_Init+0x434>)
 8001ace:	f000 fe4f 	bl	8002770 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3738      	adds	r7, #56	; 0x38
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	48000c00 	.word	0x48000c00
 8001ae4:	48000400 	.word	0x48000400
 8001ae8:	48001000 	.word	0x48001000

08001aec <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001af4:	1d39      	adds	r1, r7, #4
 8001af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001afa:	2201      	movs	r2, #1
 8001afc:	4803      	ldr	r0, [pc, #12]	; (8001b0c <__io_putchar+0x20>)
 8001afe:	f004 ff31 	bl	8006964 <HAL_UART_Transmit>
  return ch;
 8001b02:	687b      	ldr	r3, [r7, #4]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200002d8 	.word	0x200002d8

08001b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <Error_Handler+0x8>
	...

08001b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_MspInit+0x44>)
 8001b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_MspInit+0x44>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_MspInit+0x44>)
 8001b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_MspInit+0x44>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_MspInit+0x44>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6593      	str	r3, [r2, #88]	; 0x58
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_MspInit+0x44>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001b52:	2005      	movs	r0, #5
 8001b54:	f000 fdca 	bl	80026ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000

08001b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b0ae      	sub	sp, #184	; 0xb8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	2294      	movs	r2, #148	; 0x94
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f006 fb2b 	bl	80081e0 <memset>
  if(hi2c->Instance==I2C1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a21      	ldr	r2, [pc, #132]	; (8001c14 <HAL_I2C_MspInit+0xb0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d13b      	bne.n	8001c0c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b94:	2340      	movs	r3, #64	; 0x40
 8001b96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 fb97 	bl	80042d4 <HAL_RCCEx_PeriphCLKConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001bac:	f7ff ffb0 	bl	8001b10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_I2C_MspInit+0xb4>)
 8001bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb4:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <HAL_I2C_MspInit+0xb4>)
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_I2C_MspInit+0xb4>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd0:	2312      	movs	r3, #18
 8001bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be2:	2304      	movs	r3, #4
 8001be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bec:	4619      	mov	r1, r3
 8001bee:	480b      	ldr	r0, [pc, #44]	; (8001c1c <HAL_I2C_MspInit+0xb8>)
 8001bf0:	f000 fdbe 	bl	8002770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_I2C_MspInit+0xb4>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <HAL_I2C_MspInit+0xb4>)
 8001bfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_I2C_MspInit+0xb4>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	37b8      	adds	r7, #184	; 0xb8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40005400 	.word	0x40005400
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48000400 	.word	0x48000400

08001c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0b0      	sub	sp, #192	; 0xc0
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c38:	f107 0318 	add.w	r3, r7, #24
 8001c3c:	2294      	movs	r2, #148	; 0x94
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f006 facd 	bl	80081e0 <memset>
  if(huart->Instance==LPUART1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a44      	ldr	r2, [pc, #272]	; (8001d5c <HAL_UART_MspInit+0x13c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d13e      	bne.n	8001cce <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001c50:	2320      	movs	r3, #32
 8001c52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c58:	f107 0318 	add.w	r3, r7, #24
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 fb39 	bl	80042d4 <HAL_RCCEx_PeriphCLKConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c68:	f7ff ff52 	bl	8001b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c6c:	4b3c      	ldr	r3, [pc, #240]	; (8001d60 <HAL_UART_MspInit+0x140>)
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c70:	4a3b      	ldr	r2, [pc, #236]	; (8001d60 <HAL_UART_MspInit+0x140>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001c78:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <HAL_UART_MspInit+0x140>)
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c84:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <HAL_UART_MspInit+0x140>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	4a35      	ldr	r2, [pc, #212]	; (8001d60 <HAL_UART_MspInit+0x140>)
 8001c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c90:	4b33      	ldr	r3, [pc, #204]	; (8001d60 <HAL_UART_MspInit+0x140>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001c9c:	f001 fc32 	bl	8003504 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001ca0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001cba:	2308      	movs	r3, #8
 8001cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cc0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4827      	ldr	r0, [pc, #156]	; (8001d64 <HAL_UART_MspInit+0x144>)
 8001cc8:	f000 fd52 	bl	8002770 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ccc:	e042      	b.n	8001d54 <HAL_UART_MspInit+0x134>
  else if(huart->Instance==USART1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a25      	ldr	r2, [pc, #148]	; (8001d68 <HAL_UART_MspInit+0x148>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d13d      	bne.n	8001d54 <HAL_UART_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce0:	f107 0318 	add.w	r3, r7, #24
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 faf5 	bl	80042d4 <HAL_RCCEx_PeriphCLKConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001cf0:	f7ff ff0e 	bl	8001b10 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_UART_MspInit+0x140>)
 8001cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_UART_MspInit+0x140>)
 8001cfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfe:	6613      	str	r3, [r2, #96]	; 0x60
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_UART_MspInit+0x140>)
 8001d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_UART_MspInit+0x140>)
 8001d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d10:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <HAL_UART_MspInit+0x140>)
 8001d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_UART_MspInit+0x140>)
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001d24:	f001 fbee 	bl	8003504 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d28:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d42:	2307      	movs	r3, #7
 8001d44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <HAL_UART_MspInit+0x144>)
 8001d50:	f000 fd0e 	bl	8002770 <HAL_GPIO_Init>
}
 8001d54:	bf00      	nop
 8001d56:	37c0      	adds	r7, #192	; 0xc0
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40008000 	.word	0x40008000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48001800 	.word	0x48001800
 8001d68:	40013800 	.word	0x40013800

08001d6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	; 0x30
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a36      	ldr	r2, [pc, #216]	; (8001e64 <HAL_SPI_MspInit+0xf8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d129      	bne.n	8001de2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d8e:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d92:	4a35      	ldr	r2, [pc, #212]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d98:	6613      	str	r3, [r2, #96]	; 0x60
 8001d9a:	4b33      	ldr	r3, [pc, #204]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	4a2f      	ldr	r2, [pc, #188]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db2:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001dbe:	2370      	movs	r3, #112	; 0x70
 8001dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dce:	2305      	movs	r3, #5
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 031c 	add.w	r3, r7, #28
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ddc:	f000 fcc8 	bl	8002770 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001de0:	e03c      	b.n	8001e5c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a21      	ldr	r2, [pc, #132]	; (8001e6c <HAL_SPI_MspInit+0x100>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d137      	bne.n	8001e5c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	4a1d      	ldr	r2, [pc, #116]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df6:	6593      	str	r3, [r2, #88]	; 0x58
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e04:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e08:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001e0a:	f043 0308 	orr.w	r3, r3, #8
 8001e0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_SPI_MspInit+0xfc>)
 8001e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e1c:	2308      	movs	r3, #8
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	480e      	ldr	r0, [pc, #56]	; (8001e70 <HAL_SPI_MspInit+0x104>)
 8001e38:	f000 fc9a 	bl	8002770 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e3c:	2310      	movs	r3, #16
 8001e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e4c:	2305      	movs	r3, #5
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	4806      	ldr	r0, [pc, #24]	; (8001e70 <HAL_SPI_MspInit+0x104>)
 8001e58:	f000 fc8a 	bl	8002770 <HAL_GPIO_Init>
}
 8001e5c:	bf00      	nop
 8001e5e:	3730      	adds	r7, #48	; 0x30
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40013000 	.word	0x40013000
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40003800 	.word	0x40003800
 8001e70:	48000c00 	.word	0x48000c00

08001e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	; 0x38
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a5f      	ldr	r2, [pc, #380]	; (8002010 <HAL_TIM_Base_MspInit+0x19c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d14c      	bne.n	8001f30 <HAL_TIM_Base_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e96:	4b5f      	ldr	r3, [pc, #380]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	4a5e      	ldr	r2, [pc, #376]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea2:	4b5c      	ldr	r3, [pc, #368]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	4a58      	ldr	r2, [pc, #352]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eba:	4b56      	ldr	r3, [pc, #344]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec6:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	4a52      	ldr	r2, [pc, #328]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001ecc:	f043 0304 	orr.w	r3, r3, #4
 8001ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed2:	4b50      	ldr	r3, [pc, #320]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4847      	ldr	r0, [pc, #284]	; (8002018 <HAL_TIM_Base_MspInit+0x1a4>)
 8001efa:	f000 fc39 	bl	8002770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f16:	4619      	mov	r1, r3
 8001f18:	4840      	ldr	r0, [pc, #256]	; (800201c <HAL_TIM_Base_MspInit+0x1a8>)
 8001f1a:	f000 fc29 	bl	8002770 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 1);
 8001f1e:	2201      	movs	r2, #1
 8001f20:	2101      	movs	r1, #1
 8001f22:	201d      	movs	r0, #29
 8001f24:	f000 fbed 	bl	8002702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f28:	201d      	movs	r0, #29
 8001f2a:	f000 fc06 	bl	800273a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001f2e:	e06b      	b.n	8002008 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM15)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a3a      	ldr	r2, [pc, #232]	; (8002020 <HAL_TIM_Base_MspInit+0x1ac>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d131      	bne.n	8001f9e <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f3a:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3e:	4a35      	ldr	r2, [pc, #212]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f44:	6613      	str	r3, [r2, #96]	; 0x60
 8001f46:	4b33      	ldr	r3, [pc, #204]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	4b30      	ldr	r3, [pc, #192]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	4a2f      	ldr	r2, [pc, #188]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5e:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001f7c:	230e      	movs	r3, #14
 8001f7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f84:	4619      	mov	r1, r3
 8001f86:	4824      	ldr	r0, [pc, #144]	; (8002018 <HAL_TIM_Base_MspInit+0x1a4>)
 8001f88:	f000 fbf2 	bl	8002770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2101      	movs	r1, #1
 8001f90:	2018      	movs	r0, #24
 8001f92:	f000 fbb6 	bl	8002702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001f96:	2018      	movs	r0, #24
 8001f98:	f000 fbcf 	bl	800273a <HAL_NVIC_EnableIRQ>
}
 8001f9c:	e034      	b.n	8002008 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM17)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a20      	ldr	r2, [pc, #128]	; (8002024 <HAL_TIM_Base_MspInit+0x1b0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d12f      	bne.n	8002008 <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fac:	4a19      	ldr	r2, [pc, #100]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb2:	6613      	str	r3, [r2, #96]	; 0x60
 8001fb4:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc4:	4a13      	ldr	r2, [pc, #76]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001fc6:	f043 0310 	orr.w	r3, r3, #16
 8001fca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_TIM_Base_MspInit+0x1a0>)
 8001fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8001fe8:	230e      	movs	r3, #14
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480d      	ldr	r0, [pc, #52]	; (8002028 <HAL_TIM_Base_MspInit+0x1b4>)
 8001ff4:	f000 fbbc 	bl	8002770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	201a      	movs	r0, #26
 8001ffe:	f000 fb80 	bl	8002702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002002:	201a      	movs	r0, #26
 8002004:	f000 fb99 	bl	800273a <HAL_NVIC_EnableIRQ>
}
 8002008:	bf00      	nop
 800200a:	3738      	adds	r7, #56	; 0x38
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40000400 	.word	0x40000400
 8002014:	40021000 	.word	0x40021000
 8002018:	48000400 	.word	0x48000400
 800201c:	48000800 	.word	0x48000800
 8002020:	40014000 	.word	0x40014000
 8002024:	40014800 	.word	0x40014800
 8002028:	48001000 	.word	0x48001000

0800202c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <NMI_Handler+0x4>

08002032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <HardFault_Handler+0x4>

08002038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <MemManage_Handler+0x4>

0800203e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <BusFault_Handler+0x4>

08002044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <UsageFault_Handler+0x4>

0800204a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002078:	f000 fa48 	bl	800250c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002086:	f003 fe69 	bl	8005d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
//  acc = ReadAccData();
//  teldata.accel = acc;
//  printLEDs(acc);
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000514 	.word	0x20000514

08002094 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002098:	4816      	ldr	r0, [pc, #88]	; (80020f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 800209a:	f003 fe5f 	bl	8005d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
	curTime = TIM17->CCR1; //get current time value
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 80020a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <TIM1_TRG_COM_TIM17_IRQHandler+0x68>)
 80020a6:	801a      	strh	r2, [r3, #0]
	TIM17->CNT = 0;
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24

	teldata.speed = (float)(veloMultiplier / curTime);
 80020ae:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002100 <TIM1_TRG_COM_TIM17_IRQHandler+0x6c>
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <TIM1_TRG_COM_TIM17_IRQHandler+0x68>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <TIM1_TRG_COM_TIM17_IRQHandler+0x70>)
 80020c4:	edc3 7a02 	vstr	s15, [r3, #8]
	printf("Speed: %f\n",(veloMultiplier / curTime));
 80020c8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002100 <TIM1_TRG_COM_TIM17_IRQHandler+0x6c>
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <TIM1_TRG_COM_TIM17_IRQHandler+0x68>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020dc:	ee16 0a90 	vmov	r0, s13
 80020e0:	f7fe fa4a 	bl	8000578 <__aeabi_f2d>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4807      	ldr	r0, [pc, #28]	; (8002108 <TIM1_TRG_COM_TIM17_IRQHandler+0x74>)
 80020ea:	f006 f80b 	bl	8008104 <iprintf>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000560 	.word	0x20000560
 80020f8:	40014800 	.word	0x40014800
 80020fc:	200005c0 	.word	0x200005c0
 8002100:	455267a3 	.word	0x455267a3
 8002104:	200005ac 	.word	0x200005ac
 8002108:	0800a168 	.word	0x0800a168

0800210c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <TIM3_IRQHandler+0x10>)
 8002112:	f003 fe23 	bl	8005d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200004c8 	.word	0x200004c8

08002120 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a49      	ldr	r2, [pc, #292]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800212c:	4293      	cmp	r3, r2
 800212e:	f040 808b 	bne.w	8002248 <HAL_TIM_PeriodElapsedCallback+0x128>
		uint16_t temp1sum = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t temp2sum = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t temp3sum = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	847b      	strh	r3, [r7, #34]	; 0x22

		// run a loop for 5 reads from the
		for (int i = 0; i < 5; i++) {
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	e01a      	b.n	800217a <HAL_TIM_PeriodElapsedCallback+0x5a>
			temp1sum += read_Temperature(GPIO_PIN_5); // read for the first temp sensor
 8002144:	2020      	movs	r0, #32
 8002146:	f7fe ffa5 	bl	8001094 <read_Temperature>
 800214a:	4603      	mov	r3, r0
 800214c:	b29a      	uxth	r2, r3
 800214e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002150:	4413      	add	r3, r2
 8002152:	84fb      	strh	r3, [r7, #38]	; 0x26
			temp2sum += read_Temperature(GPIO_PIN_2); // read for the second temp sensor
 8002154:	2004      	movs	r0, #4
 8002156:	f7fe ff9d 	bl	8001094 <read_Temperature>
 800215a:	4603      	mov	r3, r0
 800215c:	b29a      	uxth	r2, r3
 800215e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002160:	4413      	add	r3, r2
 8002162:	84bb      	strh	r3, [r7, #36]	; 0x24
			temp3sum += read_Temperature(GPIO_PIN_6); // read for the third temp sensor
 8002164:	2040      	movs	r0, #64	; 0x40
 8002166:	f7fe ff95 	bl	8001094 <read_Temperature>
 800216a:	4603      	mov	r3, r0
 800216c:	b29a      	uxth	r2, r3
 800216e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002170:	4413      	add	r3, r2
 8002172:	847b      	strh	r3, [r7, #34]	; 0x22
		for (int i = 0; i < 5; i++) {
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	3301      	adds	r3, #1
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	2b04      	cmp	r3, #4
 800217e:	dde1      	ble.n	8002144 <HAL_TIM_PeriodElapsedCallback+0x24>
		}
		float temp1 = temp1sum / 5.0; // take the average of the temp sensor values
 8002180:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f9e6 	bl	8000554 <__aeabi_i2d>
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	4b31      	ldr	r3, [pc, #196]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800218e:	f7fe fb75 	bl	800087c <__aeabi_ddiv>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f7fe fd1d 	bl	8000bd8 <__aeabi_d2f>
 800219e:	4603      	mov	r3, r0
 80021a0:	61bb      	str	r3, [r7, #24]
		float temp2 = temp2sum / 5.0;
 80021a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f9d5 	bl	8000554 <__aeabi_i2d>
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80021b0:	f7fe fb64 	bl	800087c <__aeabi_ddiv>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	f7fe fd0c 	bl	8000bd8 <__aeabi_d2f>
 80021c0:	4603      	mov	r3, r0
 80021c2:	617b      	str	r3, [r7, #20]
		float temp3 = temp3sum / 5.0;
 80021c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f9c4 	bl	8000554 <__aeabi_i2d>
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80021d2:	f7fe fb53 	bl	800087c <__aeabi_ddiv>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f7fe fcfb 	bl	8000bd8 <__aeabi_d2f>
 80021e2:	4603      	mov	r3, r0
 80021e4:	613b      	str	r3, [r7, #16]

		float average = (temp1 + temp2 + temp3) / 3.0;
 80021e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80021ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80021ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80021f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021fa:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80021fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002202:	edc7 7a03 	vstr	s15, [r7, #12]
		teldata.temp = average;
 8002206:	4a14      	ldr	r2, [pc, #80]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6053      	str	r3, [r2, #4]

		// send this average to display

		printf("Average External Temperature: %.2f \n\r", average);
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f7fe f9b3 	bl	8000578 <__aeabi_f2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4811      	ldr	r0, [pc, #68]	; (800225c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002218:	f005 ff74 	bl	8008104 <iprintf>

		if (average > 24) {
 800221c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002220:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222c:	dd06      	ble.n	800223c <HAL_TIM_PeriodElapsedCallback+0x11c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800222e:	2201      	movs	r2, #1
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002236:	f000 fc2d 	bl	8002a94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
		}
	}
}
 800223a:	e005      	b.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x128>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800223c:	2200      	movs	r2, #0
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002244:	f000 fc26 	bl	8002a94 <HAL_GPIO_WritePin>
}
 8002248:	bf00      	nop
 800224a:	3728      	adds	r7, #40	; 0x28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	200004c8 	.word	0x200004c8
 8002254:	40140000 	.word	0x40140000
 8002258:	200005ac 	.word	0x200005ac
 800225c:	0800a174 	.word	0x0800a174

08002260 <_getpid>:
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
 8002264:	2301      	movs	r3, #1
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_kill>:
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	f005 ffbd 	bl	80081f8 <__errno>
 800227e:	4603      	mov	r3, r0
 8002280:	2216      	movs	r2, #22
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <_exit>:
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ffe7 	bl	8002270 <_kill>
 80022a2:	e7fe      	b.n	80022a2 <_exit+0x12>

080022a4 <_read>:
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e00a      	b.n	80022cc <_read+0x28>
 80022b6:	f3af 8000 	nop.w
 80022ba:	4601      	mov	r1, r0
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	60ba      	str	r2, [r7, #8]
 80022c2:	b2ca      	uxtb	r2, r1
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3301      	adds	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dbf0      	blt.n	80022b6 <_read+0x12>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <_write>:
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e009      	b.n	8002304 <_write+0x26>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	60ba      	str	r2, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fbf7 	bl	8001aec <__io_putchar>
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	dbf1      	blt.n	80022f0 <_write+0x12>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_close>:
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_fstat>:
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	2300      	movs	r3, #0
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_isatty>:
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	2301      	movs	r3, #1
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_lseek>:
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	2300      	movs	r3, #0
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <_sbrk>:
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <_sbrk+0x5c>)
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <_sbrk+0x60>)
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <_sbrk+0x22>
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <_sbrk+0x64>)
 800239e:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <_sbrk+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d207      	bcs.n	80023c0 <_sbrk+0x40>
 80023b0:	f005 ff22 	bl	80081f8 <__errno>
 80023b4:	4603      	mov	r3, r0
 80023b6:	220c      	movs	r2, #12
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023be:	e009      	b.n	80023d4 <_sbrk+0x54>
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <_sbrk+0x64>)
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	200a0000 	.word	0x200a0000
 80023e0:	00000400 	.word	0x00000400
 80023e4:	200005c4 	.word	0x200005c4
 80023e8:	20000718 	.word	0x20000718

080023ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <SystemInit+0x20>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <SystemInit+0x20>)
 80023f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002448 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002414:	f7ff ffea 	bl	80023ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <LoopForever+0x6>)
  ldr r1, =_edata
 800241a:	490d      	ldr	r1, [pc, #52]	; (8002450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <LoopForever+0xe>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002420:	e002      	b.n	8002428 <LoopCopyDataInit>

08002422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002426:	3304      	adds	r3, #4

08002428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800242c:	d3f9      	bcc.n	8002422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002430:	4c0a      	ldr	r4, [pc, #40]	; (800245c <LoopForever+0x16>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002434:	e001      	b.n	800243a <LoopFillZerobss>

08002436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002438:	3204      	adds	r2, #4

0800243a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800243c:	d3fb      	bcc.n	8002436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800243e:	f005 fee1 	bl	8008204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002442:	f7fe fe73 	bl	800112c <main>

08002446 <LoopForever>:

LoopForever:
    b LoopForever
 8002446:	e7fe      	b.n	8002446 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002448:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800244c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002450:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002454:	0800a58c 	.word	0x0800a58c
  ldr r2, =_sbss
 8002458:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800245c:	20000718 	.word	0x20000718

08002460 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002460:	e7fe      	b.n	8002460 <ADC1_IRQHandler>

08002462 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800246c:	2003      	movs	r0, #3
 800246e:	f000 f93d 	bl	80026ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002472:	2000      	movs	r0, #0
 8002474:	f000 f80e 	bl	8002494 <HAL_InitTick>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	71fb      	strb	r3, [r7, #7]
 8002482:	e001      	b.n	8002488 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002484:	f7ff fb4a 	bl	8001b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002488:	79fb      	ldrb	r3, [r7, #7]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024a0:	4b17      	ldr	r3, [pc, #92]	; (8002500 <HAL_InitTick+0x6c>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d023      	beq.n	80024f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <HAL_InitTick+0x70>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_InitTick+0x6c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	4619      	mov	r1, r3
 80024b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f949 	bl	8002756 <HAL_SYSTICK_Config>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10f      	bne.n	80024ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b0f      	cmp	r3, #15
 80024ce:	d809      	bhi.n	80024e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d0:	2200      	movs	r2, #0
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024d8:	f000 f913 	bl	8002702 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024dc:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <HAL_InitTick+0x74>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e007      	b.n	80024f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	e004      	b.n	80024f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	e001      	b.n	80024f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	2000000c 	.word	0x2000000c
 8002504:	20000004 	.word	0x20000004
 8002508:	20000008 	.word	0x20000008

0800250c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_IncTick+0x20>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_IncTick+0x24>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4413      	add	r3, r2
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <HAL_IncTick+0x24>)
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	2000000c 	.word	0x2000000c
 8002530:	200005c8 	.word	0x200005c8

08002534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return uwTick;
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <HAL_GetTick+0x14>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	200005c8 	.word	0x200005c8

0800254c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257e:	4a04      	ldr	r2, [pc, #16]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	60d3      	str	r3, [r2, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <__NVIC_GetPriorityGrouping+0x18>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 0307 	and.w	r3, r3, #7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db0b      	blt.n	80025da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <__NVIC_EnableIRQ+0x38>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2001      	movs	r0, #1
 80025d2:	fa00 f202 	lsl.w	r2, r0, r2
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100

080025ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db0a      	blt.n	8002616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	490c      	ldr	r1, [pc, #48]	; (8002638 <__NVIC_SetPriority+0x4c>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	440b      	add	r3, r1
 8002610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002614:	e00a      	b.n	800262c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4908      	ldr	r1, [pc, #32]	; (800263c <__NVIC_SetPriority+0x50>)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	3b04      	subs	r3, #4
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	440b      	add	r3, r1
 800262a:	761a      	strb	r2, [r3, #24]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f1c3 0307 	rsb	r3, r3, #7
 800265a:	2b04      	cmp	r3, #4
 800265c:	bf28      	it	cs
 800265e:	2304      	movcs	r3, #4
 8002660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3304      	adds	r3, #4
 8002666:	2b06      	cmp	r3, #6
 8002668:	d902      	bls.n	8002670 <NVIC_EncodePriority+0x30>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3b03      	subs	r3, #3
 800266e:	e000      	b.n	8002672 <NVIC_EncodePriority+0x32>
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	401a      	ands	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	43d9      	mvns	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	4313      	orrs	r3, r2
         );
}
 800269a:	4618      	mov	r0, r3
 800269c:	3724      	adds	r7, #36	; 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b8:	d301      	bcc.n	80026be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00f      	b.n	80026de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <SysTick_Config+0x40>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c6:	210f      	movs	r1, #15
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026cc:	f7ff ff8e 	bl	80025ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <SysTick_Config+0x40>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <SysTick_Config+0x40>)
 80026d8:	2207      	movs	r2, #7
 80026da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	e000e010 	.word	0xe000e010

080026ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ff29 	bl	800254c <__NVIC_SetPriorityGrouping>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002714:	f7ff ff3e 	bl	8002594 <__NVIC_GetPriorityGrouping>
 8002718:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	6978      	ldr	r0, [r7, #20]
 8002720:	f7ff ff8e 	bl	8002640 <NVIC_EncodePriority>
 8002724:	4602      	mov	r2, r0
 8002726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff5d 	bl	80025ec <__NVIC_SetPriority>
}
 8002732:	bf00      	nop
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff31 	bl	80025b0 <__NVIC_EnableIRQ>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ffa2 	bl	80026a8 <SysTick_Config>
 8002764:	4603      	mov	r3, r0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800277e:	e166      	b.n	8002a4e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	4013      	ands	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8158 	beq.w	8002a48 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d005      	beq.n	80027b0 <HAL_GPIO_Init+0x40>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d130      	bne.n	8002812 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027e6:	2201      	movs	r2, #1
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f003 0201 	and.w	r2, r3, #1
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b03      	cmp	r3, #3
 800281c:	d017      	beq.n	800284e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	2203      	movs	r2, #3
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d123      	bne.n	80028a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	08da      	lsrs	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3208      	adds	r2, #8
 8002862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	220f      	movs	r2, #15
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	08da      	lsrs	r2, r3, #3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3208      	adds	r2, #8
 800289c:	6939      	ldr	r1, [r7, #16]
 800289e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	2203      	movs	r2, #3
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0203 	and.w	r2, r3, #3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80b2 	beq.w	8002a48 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e4:	4b61      	ldr	r3, [pc, #388]	; (8002a6c <HAL_GPIO_Init+0x2fc>)
 80028e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e8:	4a60      	ldr	r2, [pc, #384]	; (8002a6c <HAL_GPIO_Init+0x2fc>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6613      	str	r3, [r2, #96]	; 0x60
 80028f0:	4b5e      	ldr	r3, [pc, #376]	; (8002a6c <HAL_GPIO_Init+0x2fc>)
 80028f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028fc:	4a5c      	ldr	r2, [pc, #368]	; (8002a70 <HAL_GPIO_Init+0x300>)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	089b      	lsrs	r3, r3, #2
 8002902:	3302      	adds	r3, #2
 8002904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002908:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	220f      	movs	r2, #15
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002926:	d02b      	beq.n	8002980 <HAL_GPIO_Init+0x210>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a52      	ldr	r2, [pc, #328]	; (8002a74 <HAL_GPIO_Init+0x304>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d025      	beq.n	800297c <HAL_GPIO_Init+0x20c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a51      	ldr	r2, [pc, #324]	; (8002a78 <HAL_GPIO_Init+0x308>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d01f      	beq.n	8002978 <HAL_GPIO_Init+0x208>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a50      	ldr	r2, [pc, #320]	; (8002a7c <HAL_GPIO_Init+0x30c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d019      	beq.n	8002974 <HAL_GPIO_Init+0x204>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a4f      	ldr	r2, [pc, #316]	; (8002a80 <HAL_GPIO_Init+0x310>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d013      	beq.n	8002970 <HAL_GPIO_Init+0x200>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a4e      	ldr	r2, [pc, #312]	; (8002a84 <HAL_GPIO_Init+0x314>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d00d      	beq.n	800296c <HAL_GPIO_Init+0x1fc>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a4d      	ldr	r2, [pc, #308]	; (8002a88 <HAL_GPIO_Init+0x318>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d007      	beq.n	8002968 <HAL_GPIO_Init+0x1f8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a4c      	ldr	r2, [pc, #304]	; (8002a8c <HAL_GPIO_Init+0x31c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_GPIO_Init+0x1f4>
 8002960:	2307      	movs	r3, #7
 8002962:	e00e      	b.n	8002982 <HAL_GPIO_Init+0x212>
 8002964:	2308      	movs	r3, #8
 8002966:	e00c      	b.n	8002982 <HAL_GPIO_Init+0x212>
 8002968:	2306      	movs	r3, #6
 800296a:	e00a      	b.n	8002982 <HAL_GPIO_Init+0x212>
 800296c:	2305      	movs	r3, #5
 800296e:	e008      	b.n	8002982 <HAL_GPIO_Init+0x212>
 8002970:	2304      	movs	r3, #4
 8002972:	e006      	b.n	8002982 <HAL_GPIO_Init+0x212>
 8002974:	2303      	movs	r3, #3
 8002976:	e004      	b.n	8002982 <HAL_GPIO_Init+0x212>
 8002978:	2302      	movs	r3, #2
 800297a:	e002      	b.n	8002982 <HAL_GPIO_Init+0x212>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_GPIO_Init+0x212>
 8002980:	2300      	movs	r3, #0
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	f002 0203 	and.w	r2, r2, #3
 8002988:	0092      	lsls	r2, r2, #2
 800298a:	4093      	lsls	r3, r2
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002992:	4937      	ldr	r1, [pc, #220]	; (8002a70 <HAL_GPIO_Init+0x300>)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029a0:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <HAL_GPIO_Init+0x320>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029c4:	4a32      	ldr	r2, [pc, #200]	; (8002a90 <HAL_GPIO_Init+0x320>)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029ca:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_GPIO_Init+0x320>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029ee:	4a28      	ldr	r2, [pc, #160]	; (8002a90 <HAL_GPIO_Init+0x320>)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029f4:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <HAL_GPIO_Init+0x320>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a18:	4a1d      	ldr	r2, [pc, #116]	; (8002a90 <HAL_GPIO_Init+0x320>)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <HAL_GPIO_Init+0x320>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a42:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <HAL_GPIO_Init+0x320>)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f47f ae91 	bne.w	8002780 <HAL_GPIO_Init+0x10>
  }
}
 8002a5e:	bf00      	nop
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40010000 	.word	0x40010000
 8002a74:	48000400 	.word	0x48000400
 8002a78:	48000800 	.word	0x48000800
 8002a7c:	48000c00 	.word	0x48000c00
 8002a80:	48001000 	.word	0x48001000
 8002a84:	48001400 	.word	0x48001400
 8002a88:	48001800 	.word	0x48001800
 8002a8c:	48001c00 	.word	0x48001c00
 8002a90:	40010400 	.word	0x40010400

08002a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa4:	787b      	ldrb	r3, [r7, #1]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aaa:	887a      	ldrh	r2, [r7, #2]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ab0:	e002      	b.n	8002ab8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e08d      	b.n	8002bf2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff f83a 	bl	8001b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2224      	movs	r2, #36	; 0x24
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d107      	bne.n	8002b3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	e006      	b.n	8002b4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d108      	bne.n	8002b66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	e007      	b.n	8002b76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69d9      	ldr	r1, [r3, #28]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	461a      	mov	r2, r3
 8002c08:	460b      	mov	r3, r1
 8002c0a:	817b      	strh	r3, [r7, #10]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	f040 80fd 	bne.w	8002e18 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_I2C_Master_Transmit+0x30>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e0f6      	b.n	8002e1a <HAL_I2C_Master_Transmit+0x21e>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c34:	f7ff fc7e 	bl	8002534 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2319      	movs	r3, #25
 8002c40:	2201      	movs	r2, #1
 8002c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f914 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0e1      	b.n	8002e1a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2221      	movs	r2, #33	; 0x21
 8002c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2210      	movs	r2, #16
 8002c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	893a      	ldrh	r2, [r7, #8]
 8002c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2bff      	cmp	r3, #255	; 0xff
 8002c86:	d906      	bls.n	8002c96 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	22ff      	movs	r2, #255	; 0xff
 8002c8c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002c8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	e007      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002ca0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ca4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d024      	beq.n	8002cf8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	8979      	ldrh	r1, [r7, #10]
 8002cea:	4b4e      	ldr	r3, [pc, #312]	; (8002e24 <HAL_I2C_Master_Transmit+0x228>)
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fa79 	bl	80031e8 <I2C_TransferConfig>
 8002cf6:	e066      	b.n	8002dc6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	8979      	ldrh	r1, [r7, #10]
 8002d00:	4b48      	ldr	r3, [pc, #288]	; (8002e24 <HAL_I2C_Master_Transmit+0x228>)
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fa6e 	bl	80031e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d0c:	e05b      	b.n	8002dc6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	6a39      	ldr	r1, [r7, #32]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f8fd 	bl	8002f12 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e07b      	b.n	8002e1a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	781a      	ldrb	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d034      	beq.n	8002dc6 <HAL_I2C_Master_Transmit+0x1ca>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d130      	bne.n	8002dc6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2180      	movs	r1, #128	; 0x80
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f880 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e04d      	b.n	8002e1a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2bff      	cmp	r3, #255	; 0xff
 8002d86:	d90e      	bls.n	8002da6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	22ff      	movs	r2, #255	; 0xff
 8002d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	8979      	ldrh	r1, [r7, #10]
 8002d96:	2300      	movs	r3, #0
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fa22 	bl	80031e8 <I2C_TransferConfig>
 8002da4:	e00f      	b.n	8002dc6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	8979      	ldrh	r1, [r7, #10]
 8002db8:	2300      	movs	r3, #0
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fa11 	bl	80031e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d19e      	bne.n	8002d0e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	6a39      	ldr	r1, [r7, #32]
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f8e3 	bl	8002fa0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e01a      	b.n	8002e1a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2220      	movs	r2, #32
 8002dea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_I2C_Master_Transmit+0x22c>)
 8002df8:	400b      	ands	r3, r1
 8002dfa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	80002000 	.word	0x80002000
 8002e28:	fe00e800 	.word	0xfe00e800

08002e2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d103      	bne.n	8002e4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2200      	movs	r2, #0
 8002e48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d007      	beq.n	8002e68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	619a      	str	r2, [r3, #24]
  }
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e84:	e031      	b.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e8c:	d02d      	beq.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7ff fb51 	bl	8002534 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d122      	bne.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4013      	ands	r3, r2
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d113      	bne.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f043 0220 	orr.w	r2, r3, #32
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00f      	b.n	8002f0a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d0be      	beq.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f1e:	e033      	b.n	8002f88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f87f 	bl	8003028 <I2C_IsErrorOccurred>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e031      	b.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f3a:	d025      	beq.n	8002f88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3c:	f7ff fafa 	bl	8002534 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d302      	bcc.n	8002f52 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d11a      	bne.n	8002f88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d013      	beq.n	8002f88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e007      	b.n	8002f98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d1c4      	bne.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fac:	e02f      	b.n	800300e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f838 	bl	8003028 <I2C_IsErrorOccurred>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e02d      	b.n	800301e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc2:	f7ff fab7 	bl	8002534 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11a      	bne.n	800300e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d013      	beq.n	800300e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f043 0220 	orr.w	r2, r3, #32
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e007      	b.n	800301e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b20      	cmp	r3, #32
 800301a:	d1c8      	bne.n	8002fae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	; 0x28
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d068      	beq.n	8003126 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2210      	movs	r2, #16
 800305a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800305c:	e049      	b.n	80030f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003064:	d045      	beq.n	80030f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7ff fa65 	bl	8002534 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <I2C_IsErrorOccurred+0x54>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d13a      	bne.n	80030f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003086:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800308e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800309a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309e:	d121      	bne.n	80030e4 <I2C_IsErrorOccurred+0xbc>
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030a6:	d01d      	beq.n	80030e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030a8:	7cfb      	ldrb	r3, [r7, #19]
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	d01a      	beq.n	80030e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030be:	f7ff fa39 	bl	8002534 <HAL_GetTick>
 80030c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030c4:	e00e      	b.n	80030e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030c6:	f7ff fa35 	bl	8002534 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b19      	cmp	r3, #25
 80030d2:	d907      	bls.n	80030e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	f043 0320 	orr.w	r3, r3, #32
 80030da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80030e2:	e006      	b.n	80030f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d1e9      	bne.n	80030c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d003      	beq.n	8003108 <I2C_IsErrorOccurred+0xe0>
 8003100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0aa      	beq.n	800305e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2220      	movs	r2, #32
 8003116:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	f043 0304 	orr.w	r3, r3, #4
 800311e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00b      	beq.n	8003150 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003148:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	f043 0308 	orr.w	r3, r3, #8
 8003160:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800316a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00b      	beq.n	8003194 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	f043 0302 	orr.w	r3, r3, #2
 8003182:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01c      	beq.n	80031d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f7ff fe45 	bl	8002e2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <I2C_IsErrorOccurred+0x1bc>)
 80031ae:	400b      	ands	r3, r1
 80031b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80031d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3728      	adds	r7, #40	; 0x28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	fe00e800 	.word	0xfe00e800

080031e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	817b      	strh	r3, [r7, #10]
 80031f6:	4613      	mov	r3, r2
 80031f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031fa:	897b      	ldrh	r3, [r7, #10]
 80031fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003200:	7a7b      	ldrb	r3, [r7, #9]
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003208:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	4313      	orrs	r3, r2
 8003212:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003216:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	0d5b      	lsrs	r3, r3, #21
 8003222:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003226:	4b08      	ldr	r3, [pc, #32]	; (8003248 <I2C_TransferConfig+0x60>)
 8003228:	430b      	orrs	r3, r1
 800322a:	43db      	mvns	r3, r3
 800322c:	ea02 0103 	and.w	r1, r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	03ff63ff 	.word	0x03ff63ff

0800324c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b20      	cmp	r3, #32
 8003260:	d138      	bne.n	80032d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800326c:	2302      	movs	r3, #2
 800326e:	e032      	b.n	80032d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2224      	movs	r2, #36	; 0x24
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800329e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6819      	ldr	r1, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e000      	b.n	80032d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032d4:	2302      	movs	r3, #2
  }
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d139      	bne.n	800336c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003302:	2302      	movs	r3, #2
 8003304:	e033      	b.n	800336e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2224      	movs	r2, #36	; 0x24
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003334:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	e000      	b.n	800336e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800336c:	2302      	movs	r3, #2
  }
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003380:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338c:	d102      	bne.n	8003394 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800338e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003392:	e00b      	b.n	80033ac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a2:	d102      	bne.n	80033aa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80033a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a8:	e000      	b.n	80033ac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80033aa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40007000 	.word	0x40007000

080033bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d141      	bne.n	800344e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033ca:	4b4b      	ldr	r3, [pc, #300]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d6:	d131      	bne.n	800343c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033d8:	4b47      	ldr	r3, [pc, #284]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033de:	4a46      	ldr	r2, [pc, #280]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033e8:	4b43      	ldr	r3, [pc, #268]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033f0:	4a41      	ldr	r2, [pc, #260]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80033f8:	4b40      	ldr	r3, [pc, #256]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2232      	movs	r2, #50	; 0x32
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	4a3f      	ldr	r2, [pc, #252]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	0c9b      	lsrs	r3, r3, #18
 800340a:	3301      	adds	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800340e:	e002      	b.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3b01      	subs	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003416:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003422:	d102      	bne.n	800342a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f2      	bne.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800342a:	4b33      	ldr	r3, [pc, #204]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003436:	d158      	bne.n	80034ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e057      	b.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800343c:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003442:	4a2d      	ldr	r2, [pc, #180]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003448:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800344c:	e04d      	b.n	80034ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003454:	d141      	bne.n	80034da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003456:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003462:	d131      	bne.n	80034c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003464:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800346a:	4a23      	ldr	r2, [pc, #140]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003470:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003474:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800347c:	4a1e      	ldr	r2, [pc, #120]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003482:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003484:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2232      	movs	r2, #50	; 0x32
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	0c9b      	lsrs	r3, r3, #18
 8003496:	3301      	adds	r3, #1
 8003498:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800349a:	e002      	b.n	80034a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3b01      	subs	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ae:	d102      	bne.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f2      	bne.n	800349c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034b6:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c2:	d112      	bne.n	80034ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e011      	b.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ce:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034d8:	e007      	b.n	80034ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034da:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034e2:	4a05      	ldr	r2, [pc, #20]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034e8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40007000 	.word	0x40007000
 80034fc:	20000004 	.word	0x20000004
 8003500:	431bde83 	.word	0x431bde83

08003504 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_PWREx_EnableVddIO2+0x1c>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	4a04      	ldr	r2, [pc, #16]	; (8003520 <HAL_PWREx_EnableVddIO2+0x1c>)
 800350e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003512:	6053      	str	r3, [r2, #4]
}
 8003514:	bf00      	nop
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40007000 	.word	0x40007000

08003524 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f000 bc08 	b.w	8003d48 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003538:	4b96      	ldr	r3, [pc, #600]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 030c 	and.w	r3, r3, #12
 8003540:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003542:	4b94      	ldr	r3, [pc, #592]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80e4 	beq.w	8003722 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d007      	beq.n	8003570 <HAL_RCC_OscConfig+0x4c>
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2b0c      	cmp	r3, #12
 8003564:	f040 808b 	bne.w	800367e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2b01      	cmp	r3, #1
 800356c:	f040 8087 	bne.w	800367e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003570:	4b88      	ldr	r3, [pc, #544]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_OscConfig+0x64>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e3df      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1a      	ldr	r2, [r3, #32]
 800358c:	4b81      	ldr	r3, [pc, #516]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d004      	beq.n	80035a2 <HAL_RCC_OscConfig+0x7e>
 8003598:	4b7e      	ldr	r3, [pc, #504]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a0:	e005      	b.n	80035ae <HAL_RCC_OscConfig+0x8a>
 80035a2:	4b7c      	ldr	r3, [pc, #496]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d223      	bcs.n	80035fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fdcc 	bl	8004154 <RCC_SetFlashLatencyFromMSIRange>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e3c0      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035c6:	4b73      	ldr	r3, [pc, #460]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a72      	ldr	r2, [pc, #456]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035cc:	f043 0308 	orr.w	r3, r3, #8
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	4b70      	ldr	r3, [pc, #448]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	496d      	ldr	r1, [pc, #436]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035e4:	4b6b      	ldr	r3, [pc, #428]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	4968      	ldr	r1, [pc, #416]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]
 80035f8:	e025      	b.n	8003646 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035fa:	4b66      	ldr	r3, [pc, #408]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a65      	ldr	r2, [pc, #404]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003600:	f043 0308 	orr.w	r3, r3, #8
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b63      	ldr	r3, [pc, #396]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	4960      	ldr	r1, [pc, #384]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003618:	4b5e      	ldr	r3, [pc, #376]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	495b      	ldr	r1, [pc, #364]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fd8c 	bl	8004154 <RCC_SetFlashLatencyFromMSIRange>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e380      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003646:	f000 fcc1 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 800364a:	4602      	mov	r2, r0
 800364c:	4b51      	ldr	r3, [pc, #324]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	4950      	ldr	r1, [pc, #320]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003658:	5ccb      	ldrb	r3, [r1, r3]
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	fa22 f303 	lsr.w	r3, r2, r3
 8003662:	4a4e      	ldr	r2, [pc, #312]	; (800379c <HAL_RCC_OscConfig+0x278>)
 8003664:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003666:	4b4e      	ldr	r3, [pc, #312]	; (80037a0 <HAL_RCC_OscConfig+0x27c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe ff12 	bl	8002494 <HAL_InitTick>
 8003670:	4603      	mov	r3, r0
 8003672:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d052      	beq.n	8003720 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	e364      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d032      	beq.n	80036ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003686:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a42      	ldr	r2, [pc, #264]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003692:	f7fe ff4f 	bl	8002534 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800369a:	f7fe ff4b 	bl	8002534 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e34d      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036ac:	4b39      	ldr	r3, [pc, #228]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036b8:	4b36      	ldr	r3, [pc, #216]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a35      	ldr	r2, [pc, #212]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036be:	f043 0308 	orr.w	r3, r3, #8
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4b33      	ldr	r3, [pc, #204]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	4930      	ldr	r1, [pc, #192]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	492b      	ldr	r1, [pc, #172]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
 80036ea:	e01a      	b.n	8003722 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036ec:	4b29      	ldr	r3, [pc, #164]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a28      	ldr	r2, [pc, #160]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036f8:	f7fe ff1c 	bl	8002534 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003700:	f7fe ff18 	bl	8002534 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e31a      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x1dc>
 800371e:	e000      	b.n	8003722 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003720:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d073      	beq.n	8003816 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d005      	beq.n	8003740 <HAL_RCC_OscConfig+0x21c>
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b0c      	cmp	r3, #12
 8003738:	d10e      	bne.n	8003758 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d10b      	bne.n	8003758 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d063      	beq.n	8003814 <HAL_RCC_OscConfig+0x2f0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d15f      	bne.n	8003814 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e2f7      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003760:	d106      	bne.n	8003770 <HAL_RCC_OscConfig+0x24c>
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e025      	b.n	80037bc <HAL_RCC_OscConfig+0x298>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003778:	d114      	bne.n	80037a4 <HAL_RCC_OscConfig+0x280>
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a05      	ldr	r2, [pc, #20]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a02      	ldr	r2, [pc, #8]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e013      	b.n	80037bc <HAL_RCC_OscConfig+0x298>
 8003794:	40021000 	.word	0x40021000
 8003798:	0800a19c 	.word	0x0800a19c
 800379c:	20000004 	.word	0x20000004
 80037a0:	20000008 	.word	0x20000008
 80037a4:	4ba0      	ldr	r3, [pc, #640]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a9f      	ldr	r2, [pc, #636]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80037aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b9d      	ldr	r3, [pc, #628]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a9c      	ldr	r2, [pc, #624]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80037b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d013      	beq.n	80037ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fe feb6 	bl	8002534 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fe feb2 	bl	8002534 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	; 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e2b4      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037de:	4b92      	ldr	r3, [pc, #584]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x2a8>
 80037ea:	e014      	b.n	8003816 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe fea2 	bl	8002534 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fe fe9e 	bl	8002534 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e2a0      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003806:	4b88      	ldr	r3, [pc, #544]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x2d0>
 8003812:	e000      	b.n	8003816 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d060      	beq.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b04      	cmp	r3, #4
 8003826:	d005      	beq.n	8003834 <HAL_RCC_OscConfig+0x310>
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b0c      	cmp	r3, #12
 800382c:	d119      	bne.n	8003862 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d116      	bne.n	8003862 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003834:	4b7c      	ldr	r3, [pc, #496]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_OscConfig+0x328>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e27d      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384c:	4b76      	ldr	r3, [pc, #472]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	061b      	lsls	r3, r3, #24
 800385a:	4973      	ldr	r1, [pc, #460]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003860:	e040      	b.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d023      	beq.n	80038b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800386a:	4b6f      	ldr	r3, [pc, #444]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a6e      	ldr	r2, [pc, #440]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fe fe5d 	bl	8002534 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387e:	f7fe fe59 	bl	8002534 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e25b      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003890:	4b65      	ldr	r3, [pc, #404]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0f0      	beq.n	800387e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389c:	4b62      	ldr	r3, [pc, #392]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	061b      	lsls	r3, r3, #24
 80038aa:	495f      	ldr	r1, [pc, #380]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	604b      	str	r3, [r1, #4]
 80038b0:	e018      	b.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b2:	4b5d      	ldr	r3, [pc, #372]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a5c      	ldr	r2, [pc, #368]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80038b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7fe fe39 	bl	8002534 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c6:	f7fe fe35 	bl	8002534 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e237      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038d8:	4b53      	ldr	r3, [pc, #332]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d03c      	beq.n	800396a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01c      	beq.n	8003932 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f8:	4b4b      	ldr	r3, [pc, #300]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80038fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fe:	4a4a      	ldr	r2, [pc, #296]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003908:	f7fe fe14 	bl	8002534 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003910:	f7fe fe10 	bl	8002534 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e212      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003922:	4b41      	ldr	r3, [pc, #260]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ef      	beq.n	8003910 <HAL_RCC_OscConfig+0x3ec>
 8003930:	e01b      	b.n	800396a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003932:	4b3d      	ldr	r3, [pc, #244]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003938:	4a3b      	ldr	r2, [pc, #236]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003942:	f7fe fdf7 	bl	8002534 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800394a:	f7fe fdf3 	bl	8002534 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e1f5      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800395c:	4b32      	ldr	r3, [pc, #200]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800395e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1ef      	bne.n	800394a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80a6 	beq.w	8003ac4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003978:	2300      	movs	r3, #0
 800397a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800397c:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10d      	bne.n	80039a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	4a26      	ldr	r2, [pc, #152]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800398e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003992:	6593      	str	r3, [r2, #88]	; 0x58
 8003994:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a0:	2301      	movs	r3, #1
 80039a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a4:	4b21      	ldr	r3, [pc, #132]	; (8003a2c <HAL_RCC_OscConfig+0x508>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d118      	bne.n	80039e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b0:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <HAL_RCC_OscConfig+0x508>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a1d      	ldr	r2, [pc, #116]	; (8003a2c <HAL_RCC_OscConfig+0x508>)
 80039b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039bc:	f7fe fdba 	bl	8002534 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c4:	f7fe fdb6 	bl	8002534 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e1b8      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d6:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <HAL_RCC_OscConfig+0x508>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d108      	bne.n	80039fc <HAL_RCC_OscConfig+0x4d8>
 80039ea:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f0:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039fa:	e029      	b.n	8003a50 <HAL_RCC_OscConfig+0x52c>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b05      	cmp	r3, #5
 8003a02:	d115      	bne.n	8003a30 <HAL_RCC_OscConfig+0x50c>
 8003a04:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	4a07      	ldr	r2, [pc, #28]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a14:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	4a03      	ldr	r2, [pc, #12]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a24:	e014      	b.n	8003a50 <HAL_RCC_OscConfig+0x52c>
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40007000 	.word	0x40007000
 8003a30:	4b9d      	ldr	r3, [pc, #628]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	4a9c      	ldr	r2, [pc, #624]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a40:	4b99      	ldr	r3, [pc, #612]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a46:	4a98      	ldr	r2, [pc, #608]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003a48:	f023 0304 	bic.w	r3, r3, #4
 8003a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d016      	beq.n	8003a86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fe fd6c 	bl	8002534 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fe fd68 	bl	8002534 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e168      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a76:	4b8c      	ldr	r3, [pc, #560]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ed      	beq.n	8003a60 <HAL_RCC_OscConfig+0x53c>
 8003a84:	e015      	b.n	8003ab2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a86:	f7fe fd55 	bl	8002534 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fe fd51 	bl	8002534 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e151      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aa4:	4b80      	ldr	r3, [pc, #512]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1ed      	bne.n	8003a8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ab2:	7ffb      	ldrb	r3, [r7, #31]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d105      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab8:	4b7b      	ldr	r3, [pc, #492]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	4a7a      	ldr	r2, [pc, #488]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d03c      	beq.n	8003b4a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01c      	beq.n	8003b12 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ad8:	4b73      	ldr	r3, [pc, #460]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ade:	4a72      	ldr	r2, [pc, #456]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fe fd24 	bl	8002534 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003af0:	f7fe fd20 	bl	8002534 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e122      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b02:	4b69      	ldr	r3, [pc, #420]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ef      	beq.n	8003af0 <HAL_RCC_OscConfig+0x5cc>
 8003b10:	e01b      	b.n	8003b4a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b12:	4b65      	ldr	r3, [pc, #404]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b18:	4a63      	ldr	r2, [pc, #396]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b22:	f7fe fd07 	bl	8002534 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b2a:	f7fe fd03 	bl	8002534 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e105      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b3c:	4b5a      	ldr	r3, [pc, #360]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1ef      	bne.n	8003b2a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80f9 	beq.w	8003d46 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	f040 80cf 	bne.w	8003cfc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b5e:	4b52      	ldr	r3, [pc, #328]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f003 0203 	and.w	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d12c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d123      	bne.n	8003bcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d11b      	bne.n	8003bcc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d113      	bne.n	8003bcc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bae:	085b      	lsrs	r3, r3, #1
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d109      	bne.n	8003bcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	085b      	lsrs	r3, r3, #1
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d071      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	d068      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bd2:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d105      	bne.n	8003bea <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bde:	4b32      	ldr	r3, [pc, #200]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e0ac      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bee:	4b2e      	ldr	r3, [pc, #184]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2d      	ldr	r2, [pc, #180]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bfa:	f7fe fc9b 	bl	8002534 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c02:	f7fe fc97 	bl	8002534 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e099      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c14:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1f0      	bne.n	8003c02 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c20:	4b21      	ldr	r3, [pc, #132]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	4b21      	ldr	r3, [pc, #132]	; (8003cac <HAL_RCC_OscConfig+0x788>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c30:	3a01      	subs	r2, #1
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	4311      	orrs	r1, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c3a:	0212      	lsls	r2, r2, #8
 8003c3c:	4311      	orrs	r1, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c42:	0852      	lsrs	r2, r2, #1
 8003c44:	3a01      	subs	r2, #1
 8003c46:	0552      	lsls	r2, r2, #21
 8003c48:	4311      	orrs	r1, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c4e:	0852      	lsrs	r2, r2, #1
 8003c50:	3a01      	subs	r2, #1
 8003c52:	0652      	lsls	r2, r2, #25
 8003c54:	4311      	orrs	r1, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c5a:	06d2      	lsls	r2, r2, #27
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	4912      	ldr	r1, [pc, #72]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c64:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0f      	ldr	r2, [pc, #60]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c70:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c7c:	f7fe fc5a 	bl	8002534 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fe fc56 	bl	8002534 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e058      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c96:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ca2:	e050      	b.n	8003d46 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e04f      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb0:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <HAL_RCC_OscConfig+0x82c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d144      	bne.n	8003d46 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cbc:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <HAL_RCC_OscConfig+0x82c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a23      	ldr	r2, [pc, #140]	; (8003d50 <HAL_RCC_OscConfig+0x82c>)
 8003cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cc8:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <HAL_RCC_OscConfig+0x82c>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4a20      	ldr	r2, [pc, #128]	; (8003d50 <HAL_RCC_OscConfig+0x82c>)
 8003cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cd4:	f7fe fc2e 	bl	8002534 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fe fc2a 	bl	8002534 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e02c      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cee:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <HAL_RCC_OscConfig+0x82c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x7b8>
 8003cfa:	e024      	b.n	8003d46 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b0c      	cmp	r3, #12
 8003d00:	d01f      	beq.n	8003d42 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d02:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <HAL_RCC_OscConfig+0x82c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <HAL_RCC_OscConfig+0x82c>)
 8003d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7fe fc11 	bl	8002534 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d16:	f7fe fc0d 	bl	8002534 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e00f      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCC_OscConfig+0x82c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f0      	bne.n	8003d16 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_RCC_OscConfig+0x82c>)
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	4905      	ldr	r1, [pc, #20]	; (8003d50 <HAL_RCC_OscConfig+0x82c>)
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_RCC_OscConfig+0x830>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	60cb      	str	r3, [r1, #12]
 8003d40:	e001      	b.n	8003d46 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000
 8003d54:	feeefffc 	.word	0xfeeefffc

08003d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e11d      	b.n	8003fac <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d70:	4b90      	ldr	r3, [pc, #576]	; (8003fb4 <HAL_RCC_ClockConfig+0x25c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d910      	bls.n	8003da0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7e:	4b8d      	ldr	r3, [pc, #564]	; (8003fb4 <HAL_RCC_ClockConfig+0x25c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 020f 	bic.w	r2, r3, #15
 8003d86:	498b      	ldr	r1, [pc, #556]	; (8003fb4 <HAL_RCC_ClockConfig+0x25c>)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b89      	ldr	r3, [pc, #548]	; (8003fb4 <HAL_RCC_ClockConfig+0x25c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e105      	b.n	8003fac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d010      	beq.n	8003dce <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	4b81      	ldr	r3, [pc, #516]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d908      	bls.n	8003dce <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dbc:	4b7e      	ldr	r3, [pc, #504]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	497b      	ldr	r1, [pc, #492]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d079      	beq.n	8003ece <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d11e      	bne.n	8003e20 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de2:	4b75      	ldr	r3, [pc, #468]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e0dc      	b.n	8003fac <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003df2:	f000 fa09 	bl	8004208 <RCC_GetSysClockFreqFromPLLSource>
 8003df6:	4603      	mov	r3, r0
 8003df8:	4a70      	ldr	r2, [pc, #448]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d946      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003dfe:	4b6e      	ldr	r3, [pc, #440]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d140      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e0a:	4b6b      	ldr	r3, [pc, #428]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e12:	4a69      	ldr	r2, [pc, #420]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	e035      	b.n	8003e8c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d107      	bne.n	8003e38 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e28:	4b63      	ldr	r3, [pc, #396]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d115      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0b9      	b.n	8003fac <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d107      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e40:	4b5d      	ldr	r3, [pc, #372]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d109      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0ad      	b.n	8003fac <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e50:	4b59      	ldr	r3, [pc, #356]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0a5      	b.n	8003fac <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003e60:	f000 f8b4 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4a55      	ldr	r2, [pc, #340]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d90f      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e6c:	4b52      	ldr	r3, [pc, #328]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d109      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e78:	4b4f      	ldr	r3, [pc, #316]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e80:	4a4d      	ldr	r2, [pc, #308]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e86:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e8c:	4b4a      	ldr	r3, [pc, #296]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f023 0203 	bic.w	r2, r3, #3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4947      	ldr	r1, [pc, #284]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9e:	f7fe fb49 	bl	8002534 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea6:	f7fe fb45 	bl	8002534 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e077      	b.n	8003fac <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ebc:	4b3e      	ldr	r3, [pc, #248]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 020c 	and.w	r2, r3, #12
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d1eb      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b80      	cmp	r3, #128	; 0x80
 8003ed2:	d105      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ed4:	4b38      	ldr	r3, [pc, #224]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a37      	ldr	r2, [pc, #220]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ede:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d010      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d208      	bcs.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003efc:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	492b      	ldr	r1, [pc, #172]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f0e:	4b29      	ldr	r3, [pc, #164]	; (8003fb4 <HAL_RCC_ClockConfig+0x25c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d210      	bcs.n	8003f3e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1c:	4b25      	ldr	r3, [pc, #148]	; (8003fb4 <HAL_RCC_ClockConfig+0x25c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f023 020f 	bic.w	r2, r3, #15
 8003f24:	4923      	ldr	r1, [pc, #140]	; (8003fb4 <HAL_RCC_ClockConfig+0x25c>)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2c:	4b21      	ldr	r3, [pc, #132]	; (8003fb4 <HAL_RCC_ClockConfig+0x25c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d001      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e036      	b.n	8003fac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f4a:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	4918      	ldr	r1, [pc, #96]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d009      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4910      	ldr	r1, [pc, #64]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f7c:	f000 f826 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	490c      	ldr	r1, [pc, #48]	; (8003fc0 <HAL_RCC_ClockConfig+0x268>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
 8003f98:	4a0a      	ldr	r2, [pc, #40]	; (8003fc4 <HAL_RCC_ClockConfig+0x26c>)
 8003f9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <HAL_RCC_ClockConfig+0x270>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe fa77 	bl	8002494 <HAL_InitTick>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	73fb      	strb	r3, [r7, #15]

  return status;
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40022000 	.word	0x40022000
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	04c4b400 	.word	0x04c4b400
 8003fc0:	0800a19c 	.word	0x0800a19c
 8003fc4:	20000004 	.word	0x20000004
 8003fc8:	20000008 	.word	0x20000008

08003fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b089      	sub	sp, #36	; 0x24
 8003fd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fda:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fe4:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_GetSysClockFreq+0x34>
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	2b0c      	cmp	r3, #12
 8003ff8:	d121      	bne.n	800403e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d11e      	bne.n	800403e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004000:	4b34      	ldr	r3, [pc, #208]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d107      	bne.n	800401c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800400c:	4b31      	ldr	r3, [pc, #196]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800400e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004012:	0a1b      	lsrs	r3, r3, #8
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	e005      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800401c:	4b2d      	ldr	r3, [pc, #180]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004028:	4a2b      	ldr	r2, [pc, #172]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004030:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10d      	bne.n	8004054 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800403c:	e00a      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b04      	cmp	r3, #4
 8004042:	d102      	bne.n	800404a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004044:	4b25      	ldr	r3, [pc, #148]	; (80040dc <HAL_RCC_GetSysClockFreq+0x110>)
 8004046:	61bb      	str	r3, [r7, #24]
 8004048:	e004      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d101      	bne.n	8004054 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004050:	4b23      	ldr	r3, [pc, #140]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004052:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	2b0c      	cmp	r3, #12
 8004058:	d134      	bne.n	80040c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800405a:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d003      	beq.n	8004072 <HAL_RCC_GetSysClockFreq+0xa6>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d003      	beq.n	8004078 <HAL_RCC_GetSysClockFreq+0xac>
 8004070:	e005      	b.n	800407e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004072:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <HAL_RCC_GetSysClockFreq+0x110>)
 8004074:	617b      	str	r3, [r7, #20]
      break;
 8004076:	e005      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800407a:	617b      	str	r3, [r7, #20]
      break;
 800407c:	e002      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	617b      	str	r3, [r7, #20]
      break;
 8004082:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004084:	4b13      	ldr	r3, [pc, #76]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	091b      	lsrs	r3, r3, #4
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	3301      	adds	r3, #1
 8004090:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004092:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	fb03 f202 	mul.w	r2, r3, r2
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	0e5b      	lsrs	r3, r3, #25
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	3301      	adds	r3, #1
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040c4:	69bb      	ldr	r3, [r7, #24]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3724      	adds	r7, #36	; 0x24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40021000 	.word	0x40021000
 80040d8:	0800a1b4 	.word	0x0800a1b4
 80040dc:	00f42400 	.word	0x00f42400
 80040e0:	007a1200 	.word	0x007a1200

080040e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e8:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040ea:	681b      	ldr	r3, [r3, #0]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000004 	.word	0x20000004

080040fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004100:	f7ff fff0 	bl	80040e4 <HAL_RCC_GetHCLKFreq>
 8004104:	4602      	mov	r2, r0
 8004106:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	0a1b      	lsrs	r3, r3, #8
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	4904      	ldr	r1, [pc, #16]	; (8004124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004112:	5ccb      	ldrb	r3, [r1, r3]
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	0800a1ac 	.word	0x0800a1ac

08004128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800412c:	f7ff ffda 	bl	80040e4 <HAL_RCC_GetHCLKFreq>
 8004130:	4602      	mov	r2, r0
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	0adb      	lsrs	r3, r3, #11
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	4904      	ldr	r1, [pc, #16]	; (8004150 <HAL_RCC_GetPCLK2Freq+0x28>)
 800413e:	5ccb      	ldrb	r3, [r1, r3]
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004148:	4618      	mov	r0, r3
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000
 8004150:	0800a1ac 	.word	0x0800a1ac

08004154 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800415c:	2300      	movs	r3, #0
 800415e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004160:	4b27      	ldr	r3, [pc, #156]	; (8004200 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800416c:	f7ff f906 	bl	800337c <HAL_PWREx_GetVoltageRange>
 8004170:	6178      	str	r0, [r7, #20]
 8004172:	e014      	b.n	800419e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004174:	4b22      	ldr	r3, [pc, #136]	; (8004200 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004178:	4a21      	ldr	r2, [pc, #132]	; (8004200 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800417a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417e:	6593      	str	r3, [r2, #88]	; 0x58
 8004180:	4b1f      	ldr	r3, [pc, #124]	; (8004200 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800418c:	f7ff f8f6 	bl	800337c <HAL_PWREx_GetVoltageRange>
 8004190:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004192:	4b1b      	ldr	r3, [pc, #108]	; (8004200 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004196:	4a1a      	ldr	r2, [pc, #104]	; (8004200 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a4:	d10b      	bne.n	80041be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b80      	cmp	r3, #128	; 0x80
 80041aa:	d913      	bls.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2ba0      	cmp	r3, #160	; 0xa0
 80041b0:	d902      	bls.n	80041b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041b2:	2302      	movs	r3, #2
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	e00d      	b.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041b8:	2301      	movs	r3, #1
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	e00a      	b.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b7f      	cmp	r3, #127	; 0x7f
 80041c2:	d902      	bls.n	80041ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80041c4:	2302      	movs	r3, #2
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	e004      	b.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b70      	cmp	r3, #112	; 0x70
 80041ce:	d101      	bne.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041d0:	2301      	movs	r3, #1
 80041d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f023 020f 	bic.w	r2, r3, #15
 80041dc:	4909      	ldr	r1, [pc, #36]	; (8004204 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041e4:	4b07      	ldr	r3, [pc, #28]	; (8004204 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d001      	beq.n	80041f6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40021000 	.word	0x40021000
 8004204:	40022000 	.word	0x40022000

08004208 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800420e:	4b2d      	ldr	r3, [pc, #180]	; (80042c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b03      	cmp	r3, #3
 800421c:	d00b      	beq.n	8004236 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d825      	bhi.n	8004270 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d008      	beq.n	800423c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d11f      	bne.n	8004270 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004230:	4b25      	ldr	r3, [pc, #148]	; (80042c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004232:	613b      	str	r3, [r7, #16]
    break;
 8004234:	e01f      	b.n	8004276 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004236:	4b25      	ldr	r3, [pc, #148]	; (80042cc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004238:	613b      	str	r3, [r7, #16]
    break;
 800423a:	e01c      	b.n	8004276 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800423c:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b00      	cmp	r3, #0
 8004246:	d107      	bne.n	8004258 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004248:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800424a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424e:	0a1b      	lsrs	r3, r3, #8
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	e005      	b.n	8004264 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004258:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004264:	4a1a      	ldr	r2, [pc, #104]	; (80042d0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800426c:	613b      	str	r3, [r7, #16]
    break;
 800426e:	e002      	b.n	8004276 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]
    break;
 8004274:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004276:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	091b      	lsrs	r3, r3, #4
 800427c:	f003 030f 	and.w	r3, r3, #15
 8004280:	3301      	adds	r3, #1
 8004282:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	0a1b      	lsrs	r3, r3, #8
 800428a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	fb03 f202 	mul.w	r2, r3, r2
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800429c:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	0e5b      	lsrs	r3, r3, #25
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	3301      	adds	r3, #1
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80042b6:	683b      	ldr	r3, [r7, #0]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40021000 	.word	0x40021000
 80042c8:	00f42400 	.word	0x00f42400
 80042cc:	007a1200 	.word	0x007a1200
 80042d0:	0800a1b4 	.word	0x0800a1b4

080042d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042dc:	2300      	movs	r3, #0
 80042de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042e0:	2300      	movs	r3, #0
 80042e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d040      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042f4:	2b80      	cmp	r3, #128	; 0x80
 80042f6:	d02a      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80042f8:	2b80      	cmp	r3, #128	; 0x80
 80042fa:	d825      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80042fc:	2b60      	cmp	r3, #96	; 0x60
 80042fe:	d026      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004300:	2b60      	cmp	r3, #96	; 0x60
 8004302:	d821      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004304:	2b40      	cmp	r3, #64	; 0x40
 8004306:	d006      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004308:	2b40      	cmp	r3, #64	; 0x40
 800430a:	d81d      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d009      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d010      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004314:	e018      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004316:	4b89      	ldr	r3, [pc, #548]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	4a88      	ldr	r2, [pc, #544]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004320:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004322:	e015      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	2100      	movs	r1, #0
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fb02 	bl	8004934 <RCCEx_PLLSAI1_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004334:	e00c      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3320      	adds	r3, #32
 800433a:	2100      	movs	r1, #0
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fbed 	bl	8004b1c <RCCEx_PLLSAI2_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004346:	e003      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	74fb      	strb	r3, [r7, #19]
      break;
 800434c:	e000      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800434e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10b      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004356:	4b79      	ldr	r3, [pc, #484]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004358:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800435c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004364:	4975      	ldr	r1, [pc, #468]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800436c:	e001      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436e:	7cfb      	ldrb	r3, [r7, #19]
 8004370:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d047      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004386:	d030      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438c:	d82a      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800438e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004392:	d02a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004398:	d824      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800439a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800439e:	d008      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80043a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a4:	d81e      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80043aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ae:	d010      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80043b0:	e018      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043b2:	4b62      	ldr	r3, [pc, #392]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	4a61      	ldr	r2, [pc, #388]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043be:	e015      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fab4 	bl	8004934 <RCCEx_PLLSAI1_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043d0:	e00c      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3320      	adds	r3, #32
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fb9f 	bl	8004b1c <RCCEx_PLLSAI2_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043e2:	e003      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	74fb      	strb	r3, [r7, #19]
      break;
 80043e8:	e000      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80043ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ec:	7cfb      	ldrb	r3, [r7, #19]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10b      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043f2:	4b52      	ldr	r3, [pc, #328]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	494e      	ldr	r1, [pc, #312]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004408:	e001      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440a:	7cfb      	ldrb	r3, [r7, #19]
 800440c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 809f 	beq.w	800455a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800441c:	2300      	movs	r3, #0
 800441e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004420:	4b46      	ldr	r3, [pc, #280]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004430:	2300      	movs	r3, #0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00d      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004436:	4b41      	ldr	r3, [pc, #260]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443a:	4a40      	ldr	r2, [pc, #256]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800443c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004440:	6593      	str	r3, [r2, #88]	; 0x58
 8004442:	4b3e      	ldr	r3, [pc, #248]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800444e:	2301      	movs	r3, #1
 8004450:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004452:	4b3b      	ldr	r3, [pc, #236]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a3a      	ldr	r2, [pc, #232]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800445e:	f7fe f869 	bl	8002534 <HAL_GetTick>
 8004462:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004464:	e009      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004466:	f7fe f865 	bl	8002534 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d902      	bls.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	74fb      	strb	r3, [r7, #19]
        break;
 8004478:	e005      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800447a:	4b31      	ldr	r3, [pc, #196]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0ef      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004486:	7cfb      	ldrb	r3, [r7, #19]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d15b      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800448c:	4b2b      	ldr	r3, [pc, #172]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004496:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d01f      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d019      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044aa:	4b24      	ldr	r3, [pc, #144]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044b6:	4b21      	ldr	r3, [pc, #132]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044bc:	4a1f      	ldr	r2, [pc, #124]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044c6:	4b1d      	ldr	r3, [pc, #116]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	4a1b      	ldr	r2, [pc, #108]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044d6:	4a19      	ldr	r2, [pc, #100]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d016      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7fe f824 	bl	8002534 <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ee:	e00b      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f0:	f7fe f820 	bl	8002534 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d902      	bls.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	74fb      	strb	r3, [r7, #19]
            break;
 8004506:	e006      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0ec      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004516:	7cfb      	ldrb	r3, [r7, #19]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10c      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800451c:	4b07      	ldr	r3, [pc, #28]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452c:	4903      	ldr	r1, [pc, #12]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004534:	e008      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004536:	7cfb      	ldrb	r3, [r7, #19]
 8004538:	74bb      	strb	r3, [r7, #18]
 800453a:	e005      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800453c:	40021000 	.word	0x40021000
 8004540:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004548:	7c7b      	ldrb	r3, [r7, #17]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d105      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454e:	4ba0      	ldr	r3, [pc, #640]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	4a9f      	ldr	r2, [pc, #636]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004558:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004566:	4b9a      	ldr	r3, [pc, #616]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	f023 0203 	bic.w	r2, r3, #3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004574:	4996      	ldr	r1, [pc, #600]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004588:	4b91      	ldr	r3, [pc, #580]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	f023 020c 	bic.w	r2, r3, #12
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	498e      	ldr	r1, [pc, #568]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045aa:	4b89      	ldr	r3, [pc, #548]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b8:	4985      	ldr	r1, [pc, #532]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045cc:	4b80      	ldr	r3, [pc, #512]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045da:	497d      	ldr	r1, [pc, #500]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045ee:	4b78      	ldr	r3, [pc, #480]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fc:	4974      	ldr	r1, [pc, #464]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004610:	4b6f      	ldr	r3, [pc, #444]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461e:	496c      	ldr	r1, [pc, #432]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004632:	4b67      	ldr	r3, [pc, #412]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004640:	4963      	ldr	r1, [pc, #396]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004654:	4b5e      	ldr	r3, [pc, #376]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004662:	495b      	ldr	r1, [pc, #364]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004676:	4b56      	ldr	r3, [pc, #344]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004684:	4952      	ldr	r1, [pc, #328]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004698:	4b4d      	ldr	r3, [pc, #308]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a6:	494a      	ldr	r1, [pc, #296]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046ba:	4b45      	ldr	r3, [pc, #276]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	4941      	ldr	r1, [pc, #260]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046dc:	4b3c      	ldr	r3, [pc, #240]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046e2:	f023 0203 	bic.w	r2, r3, #3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ea:	4939      	ldr	r1, [pc, #228]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d028      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046fe:	4b34      	ldr	r3, [pc, #208]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004704:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470c:	4930      	ldr	r1, [pc, #192]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004718:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800471c:	d106      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800471e:	4b2c      	ldr	r3, [pc, #176]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	4a2b      	ldr	r2, [pc, #172]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004728:	60d3      	str	r3, [r2, #12]
 800472a:	e011      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004730:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004734:	d10c      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
 800473a:	2101      	movs	r1, #1
 800473c:	4618      	mov	r0, r3
 800473e:	f000 f8f9 	bl	8004934 <RCCEx_PLLSAI1_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004746:	7cfb      	ldrb	r3, [r7, #19]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800474c:	7cfb      	ldrb	r3, [r7, #19]
 800474e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d04d      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004764:	d108      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004766:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004768:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800476c:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800476e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004772:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004776:	e012      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004778:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800477a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800477e:	4a14      	ldr	r2, [pc, #80]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004780:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004784:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004788:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004796:	490e      	ldr	r1, [pc, #56]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a6:	d106      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a8:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a08      	ldr	r2, [pc, #32]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b2:	60d3      	str	r3, [r2, #12]
 80047b4:	e020      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047be:	d109      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047c0:	4b03      	ldr	r3, [pc, #12]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4a02      	ldr	r2, [pc, #8]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ca:	60d3      	str	r3, [r2, #12]
 80047cc:	e014      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3304      	adds	r3, #4
 80047e2:	2101      	movs	r1, #1
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 f8a5 	bl	8004934 <RCCEx_PLLSAI1_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ee:	7cfb      	ldrb	r3, [r7, #19]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80047f4:	7cfb      	ldrb	r3, [r7, #19]
 80047f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d028      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004804:	4b4a      	ldr	r3, [pc, #296]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004812:	4947      	ldr	r1, [pc, #284]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800481e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004822:	d106      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004824:	4b42      	ldr	r3, [pc, #264]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4a41      	ldr	r2, [pc, #260]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800482a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800482e:	60d3      	str	r3, [r2, #12]
 8004830:	e011      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004836:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800483a:	d10c      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3304      	adds	r3, #4
 8004840:	2101      	movs	r1, #1
 8004842:	4618      	mov	r0, r3
 8004844:	f000 f876 	bl	8004934 <RCCEx_PLLSAI1_Config>
 8004848:	4603      	mov	r3, r0
 800484a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800484c:	7cfb      	ldrb	r3, [r7, #19]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004852:	7cfb      	ldrb	r3, [r7, #19]
 8004854:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01e      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004862:	4b33      	ldr	r3, [pc, #204]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004872:	492f      	ldr	r1, [pc, #188]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004884:	d10c      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3304      	adds	r3, #4
 800488a:	2102      	movs	r1, #2
 800488c:	4618      	mov	r0, r3
 800488e:	f000 f851 	bl	8004934 <RCCEx_PLLSAI1_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800489c:	7cfb      	ldrb	r3, [r7, #19]
 800489e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00b      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048ac:	4b20      	ldr	r3, [pc, #128]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048b2:	f023 0204 	bic.w	r2, r3, #4
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048bc:	491c      	ldr	r1, [pc, #112]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048d0:	4b17      	ldr	r3, [pc, #92]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048d6:	f023 0218 	bic.w	r2, r3, #24
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	4913      	ldr	r1, [pc, #76]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d017      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80048f4:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004904:	490a      	ldr	r1, [pc, #40]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004916:	d105      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4a04      	ldr	r2, [pc, #16]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800491e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004922:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004924:	7cbb      	ldrb	r3, [r7, #18]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000

08004934 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004942:	4b72      	ldr	r3, [pc, #456]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00e      	beq.n	800496c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800494e:	4b6f      	ldr	r3, [pc, #444]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0203 	and.w	r2, r3, #3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d103      	bne.n	8004966 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
       ||
 8004962:	2b00      	cmp	r3, #0
 8004964:	d142      	bne.n	80049ec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	73fb      	strb	r3, [r7, #15]
 800496a:	e03f      	b.n	80049ec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d018      	beq.n	80049a6 <RCCEx_PLLSAI1_Config+0x72>
 8004974:	2b03      	cmp	r3, #3
 8004976:	d825      	bhi.n	80049c4 <RCCEx_PLLSAI1_Config+0x90>
 8004978:	2b01      	cmp	r3, #1
 800497a:	d002      	beq.n	8004982 <RCCEx_PLLSAI1_Config+0x4e>
 800497c:	2b02      	cmp	r3, #2
 800497e:	d009      	beq.n	8004994 <RCCEx_PLLSAI1_Config+0x60>
 8004980:	e020      	b.n	80049c4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004982:	4b62      	ldr	r3, [pc, #392]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d11d      	bne.n	80049ca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004992:	e01a      	b.n	80049ca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004994:	4b5d      	ldr	r3, [pc, #372]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499c:	2b00      	cmp	r3, #0
 800499e:	d116      	bne.n	80049ce <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a4:	e013      	b.n	80049ce <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049a6:	4b59      	ldr	r3, [pc, #356]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10f      	bne.n	80049d2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049b2:	4b56      	ldr	r3, [pc, #344]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049c2:	e006      	b.n	80049d2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      break;
 80049c8:	e004      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80049ca:	bf00      	nop
 80049cc:	e002      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80049ce:	bf00      	nop
 80049d0:	e000      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80049d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d108      	bne.n	80049ec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80049da:	4b4c      	ldr	r3, [pc, #304]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f023 0203 	bic.w	r2, r3, #3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4949      	ldr	r1, [pc, #292]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 8086 	bne.w	8004b00 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049f4:	4b45      	ldr	r3, [pc, #276]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a44      	ldr	r2, [pc, #272]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a00:	f7fd fd98 	bl	8002534 <HAL_GetTick>
 8004a04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a06:	e009      	b.n	8004a1c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a08:	f7fd fd94 	bl	8002534 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d902      	bls.n	8004a1c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	73fb      	strb	r3, [r7, #15]
        break;
 8004a1a:	e005      	b.n	8004a28 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a1c:	4b3b      	ldr	r3, [pc, #236]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1ef      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d168      	bne.n	8004b00 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d113      	bne.n	8004a5c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a34:	4b35      	ldr	r3, [pc, #212]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	4b35      	ldr	r3, [pc, #212]	; (8004b10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6892      	ldr	r2, [r2, #8]
 8004a40:	0211      	lsls	r1, r2, #8
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68d2      	ldr	r2, [r2, #12]
 8004a46:	06d2      	lsls	r2, r2, #27
 8004a48:	4311      	orrs	r1, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6852      	ldr	r2, [r2, #4]
 8004a4e:	3a01      	subs	r2, #1
 8004a50:	0112      	lsls	r2, r2, #4
 8004a52:	430a      	orrs	r2, r1
 8004a54:	492d      	ldr	r1, [pc, #180]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	610b      	str	r3, [r1, #16]
 8004a5a:	e02d      	b.n	8004ab8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d115      	bne.n	8004a8e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a62:	4b2a      	ldr	r3, [pc, #168]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6892      	ldr	r2, [r2, #8]
 8004a6e:	0211      	lsls	r1, r2, #8
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6912      	ldr	r2, [r2, #16]
 8004a74:	0852      	lsrs	r2, r2, #1
 8004a76:	3a01      	subs	r2, #1
 8004a78:	0552      	lsls	r2, r2, #21
 8004a7a:	4311      	orrs	r1, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6852      	ldr	r2, [r2, #4]
 8004a80:	3a01      	subs	r2, #1
 8004a82:	0112      	lsls	r2, r2, #4
 8004a84:	430a      	orrs	r2, r1
 8004a86:	4921      	ldr	r1, [pc, #132]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	610b      	str	r3, [r1, #16]
 8004a8c:	e014      	b.n	8004ab8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a8e:	4b1f      	ldr	r3, [pc, #124]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	4b21      	ldr	r3, [pc, #132]	; (8004b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6892      	ldr	r2, [r2, #8]
 8004a9a:	0211      	lsls	r1, r2, #8
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6952      	ldr	r2, [r2, #20]
 8004aa0:	0852      	lsrs	r2, r2, #1
 8004aa2:	3a01      	subs	r2, #1
 8004aa4:	0652      	lsls	r2, r2, #25
 8004aa6:	4311      	orrs	r1, r2
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6852      	ldr	r2, [r2, #4]
 8004aac:	3a01      	subs	r2, #1
 8004aae:	0112      	lsls	r2, r2, #4
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	4916      	ldr	r1, [pc, #88]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ab8:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a13      	ldr	r2, [pc, #76]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004abe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ac2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac4:	f7fd fd36 	bl	8002534 <HAL_GetTick>
 8004ac8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aca:	e009      	b.n	8004ae0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004acc:	f7fd fd32 	bl	8002534 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d902      	bls.n	8004ae0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	73fb      	strb	r3, [r7, #15]
          break;
 8004ade:	e005      	b.n	8004aec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0ef      	beq.n	8004acc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	4904      	ldr	r1, [pc, #16]	; (8004b0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	07ff800f 	.word	0x07ff800f
 8004b14:	ff9f800f 	.word	0xff9f800f
 8004b18:	f9ff800f 	.word	0xf9ff800f

08004b1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b2a:	4b72      	ldr	r3, [pc, #456]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00e      	beq.n	8004b54 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b36:	4b6f      	ldr	r3, [pc, #444]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0203 	and.w	r2, r3, #3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d103      	bne.n	8004b4e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
       ||
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d142      	bne.n	8004bd4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
 8004b52:	e03f      	b.n	8004bd4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d018      	beq.n	8004b8e <RCCEx_PLLSAI2_Config+0x72>
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d825      	bhi.n	8004bac <RCCEx_PLLSAI2_Config+0x90>
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d002      	beq.n	8004b6a <RCCEx_PLLSAI2_Config+0x4e>
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d009      	beq.n	8004b7c <RCCEx_PLLSAI2_Config+0x60>
 8004b68:	e020      	b.n	8004bac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b6a:	4b62      	ldr	r3, [pc, #392]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d11d      	bne.n	8004bb2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b7a:	e01a      	b.n	8004bb2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b7c:	4b5d      	ldr	r3, [pc, #372]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d116      	bne.n	8004bb6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b8c:	e013      	b.n	8004bb6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b8e:	4b59      	ldr	r3, [pc, #356]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10f      	bne.n	8004bba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b9a:	4b56      	ldr	r3, [pc, #344]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d109      	bne.n	8004bba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004baa:	e006      	b.n	8004bba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb0:	e004      	b.n	8004bbc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004bb2:	bf00      	nop
 8004bb4:	e002      	b.n	8004bbc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004bb6:	bf00      	nop
 8004bb8:	e000      	b.n	8004bbc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004bba:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d108      	bne.n	8004bd4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004bc2:	4b4c      	ldr	r3, [pc, #304]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f023 0203 	bic.w	r2, r3, #3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4949      	ldr	r1, [pc, #292]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f040 8086 	bne.w	8004ce8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bdc:	4b45      	ldr	r3, [pc, #276]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a44      	ldr	r2, [pc, #272]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be8:	f7fd fca4 	bl	8002534 <HAL_GetTick>
 8004bec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bee:	e009      	b.n	8004c04 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bf0:	f7fd fca0 	bl	8002534 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d902      	bls.n	8004c04 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	73fb      	strb	r3, [r7, #15]
        break;
 8004c02:	e005      	b.n	8004c10 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c04:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1ef      	bne.n	8004bf0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d168      	bne.n	8004ce8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d113      	bne.n	8004c44 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c1c:	4b35      	ldr	r3, [pc, #212]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	4b35      	ldr	r3, [pc, #212]	; (8004cf8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6892      	ldr	r2, [r2, #8]
 8004c28:	0211      	lsls	r1, r2, #8
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68d2      	ldr	r2, [r2, #12]
 8004c2e:	06d2      	lsls	r2, r2, #27
 8004c30:	4311      	orrs	r1, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6852      	ldr	r2, [r2, #4]
 8004c36:	3a01      	subs	r2, #1
 8004c38:	0112      	lsls	r2, r2, #4
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	492d      	ldr	r1, [pc, #180]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	614b      	str	r3, [r1, #20]
 8004c42:	e02d      	b.n	8004ca0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d115      	bne.n	8004c76 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c4a:	4b2a      	ldr	r3, [pc, #168]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	4b2b      	ldr	r3, [pc, #172]	; (8004cfc <RCCEx_PLLSAI2_Config+0x1e0>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6892      	ldr	r2, [r2, #8]
 8004c56:	0211      	lsls	r1, r2, #8
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6912      	ldr	r2, [r2, #16]
 8004c5c:	0852      	lsrs	r2, r2, #1
 8004c5e:	3a01      	subs	r2, #1
 8004c60:	0552      	lsls	r2, r2, #21
 8004c62:	4311      	orrs	r1, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6852      	ldr	r2, [r2, #4]
 8004c68:	3a01      	subs	r2, #1
 8004c6a:	0112      	lsls	r2, r2, #4
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	4921      	ldr	r1, [pc, #132]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	614b      	str	r3, [r1, #20]
 8004c74:	e014      	b.n	8004ca0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c76:	4b1f      	ldr	r3, [pc, #124]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c78:	695a      	ldr	r2, [r3, #20]
 8004c7a:	4b21      	ldr	r3, [pc, #132]	; (8004d00 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6892      	ldr	r2, [r2, #8]
 8004c82:	0211      	lsls	r1, r2, #8
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6952      	ldr	r2, [r2, #20]
 8004c88:	0852      	lsrs	r2, r2, #1
 8004c8a:	3a01      	subs	r2, #1
 8004c8c:	0652      	lsls	r2, r2, #25
 8004c8e:	4311      	orrs	r1, r2
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6852      	ldr	r2, [r2, #4]
 8004c94:	3a01      	subs	r2, #1
 8004c96:	0112      	lsls	r2, r2, #4
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	4916      	ldr	r1, [pc, #88]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ca0:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a13      	ldr	r2, [pc, #76]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004caa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cac:	f7fd fc42 	bl	8002534 <HAL_GetTick>
 8004cb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cb2:	e009      	b.n	8004cc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cb4:	f7fd fc3e 	bl	8002534 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d902      	bls.n	8004cc8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	73fb      	strb	r3, [r7, #15]
          break;
 8004cc6:	e005      	b.n	8004cd4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0ef      	beq.n	8004cb4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004cda:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cdc:	695a      	ldr	r2, [r3, #20]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	4904      	ldr	r1, [pc, #16]	; (8004cf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	07ff800f 	.word	0x07ff800f
 8004cfc:	ff9f800f 	.word	0xff9f800f
 8004d00:	f9ff800f 	.word	0xf9ff800f

08004d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e095      	b.n	8004e42 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d108      	bne.n	8004d30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d26:	d009      	beq.n	8004d3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	61da      	str	r2, [r3, #28]
 8004d2e:	e005      	b.n	8004d3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d106      	bne.n	8004d5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fd f808 	bl	8001d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d7c:	d902      	bls.n	8004d84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	e002      	b.n	8004d8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d92:	d007      	beq.n	8004da4 <HAL_SPI_Init+0xa0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d9c:	d002      	beq.n	8004da4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de6:	ea42 0103 	orr.w	r1, r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	0c1b      	lsrs	r3, r3, #16
 8004e00:	f003 0204 	and.w	r2, r3, #4
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e20:	ea42 0103 	orr.w	r1, r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b088      	sub	sp, #32
 8004e4e:	af02      	add	r7, sp, #8
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	603b      	str	r3, [r7, #0]
 8004e56:	4613      	mov	r3, r2
 8004e58:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d002      	beq.n	8004e70 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e6e:	e11a      	b.n	80050a6 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e78:	d112      	bne.n	8004ea0 <HAL_SPI_Receive+0x56>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10e      	bne.n	8004ea0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2204      	movs	r2, #4
 8004e86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e8a:	88fa      	ldrh	r2, [r7, #6]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f90e 	bl	80050b8 <HAL_SPI_TransmitReceive>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	e107      	b.n	80050b0 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_SPI_Receive+0x64>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e100      	b.n	80050b0 <HAL_SPI_Receive+0x266>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eb6:	f7fd fb3d 	bl	8002534 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_SPI_Receive+0x7e>
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ecc:	e0eb      	b.n	80050a6 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	88fa      	ldrh	r2, [r7, #6]
 8004ee6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	88fa      	ldrh	r2, [r7, #6]
 8004eee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f18:	d908      	bls.n	8004f2c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f28:	605a      	str	r2, [r3, #4]
 8004f2a:	e007      	b.n	8004f3c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f3a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f44:	d10f      	bne.n	8004f66 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f70:	2b40      	cmp	r3, #64	; 0x40
 8004f72:	d007      	beq.n	8004f84 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f8c:	d86f      	bhi.n	800506e <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f8e:	e034      	b.n	8004ffa <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d117      	bne.n	8004fce <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f103 020c 	add.w	r2, r3, #12
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	7812      	ldrb	r2, [r2, #0]
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004fcc:	e015      	b.n	8004ffa <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fce:	f7fd fab1 	bl	8002534 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d803      	bhi.n	8004fe6 <HAL_SPI_Receive+0x19c>
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fe4:	d102      	bne.n	8004fec <HAL_SPI_Receive+0x1a2>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d106      	bne.n	8004ffa <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004ff8:	e055      	b.n	80050a6 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1c4      	bne.n	8004f90 <HAL_SPI_Receive+0x146>
 8005006:	e038      	b.n	800507a <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b01      	cmp	r3, #1
 8005014:	d115      	bne.n	8005042 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	b292      	uxth	r2, r2
 8005022:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	1c9a      	adds	r2, r3, #2
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005040:	e015      	b.n	800506e <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005042:	f7fd fa77 	bl	8002534 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d803      	bhi.n	800505a <HAL_SPI_Receive+0x210>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005058:	d102      	bne.n	8005060 <HAL_SPI_Receive+0x216>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d106      	bne.n	800506e <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800506c:	e01b      	b.n	80050a6 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1c6      	bne.n	8005008 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	6839      	ldr	r1, [r7, #0]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 fb5a 	bl	8005738 <SPI_EndRxTransaction>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2220      	movs	r2, #32
 800508e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	75fb      	strb	r3, [r7, #23]
 800509c:	e003      	b.n	80050a6 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08a      	sub	sp, #40	; 0x28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050c6:	2301      	movs	r3, #1
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_SPI_TransmitReceive+0x26>
 80050da:	2302      	movs	r3, #2
 80050dc:	e20a      	b.n	80054f4 <HAL_SPI_TransmitReceive+0x43c>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050e6:	f7fd fa25 	bl	8002534 <HAL_GetTick>
 80050ea:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050f2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80050fa:	887b      	ldrh	r3, [r7, #2]
 80050fc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80050fe:	887b      	ldrh	r3, [r7, #2]
 8005100:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005102:	7efb      	ldrb	r3, [r7, #27]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d00e      	beq.n	8005126 <HAL_SPI_TransmitReceive+0x6e>
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510e:	d106      	bne.n	800511e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d102      	bne.n	800511e <HAL_SPI_TransmitReceive+0x66>
 8005118:	7efb      	ldrb	r3, [r7, #27]
 800511a:	2b04      	cmp	r3, #4
 800511c:	d003      	beq.n	8005126 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800511e:	2302      	movs	r3, #2
 8005120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005124:	e1e0      	b.n	80054e8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x80>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x80>
 8005132:	887b      	ldrh	r3, [r7, #2]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d103      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800513e:	e1d3      	b.n	80054e8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b04      	cmp	r3, #4
 800514a:	d003      	beq.n	8005154 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2205      	movs	r2, #5
 8005150:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	887a      	ldrh	r2, [r7, #2]
 8005164:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	887a      	ldrh	r2, [r7, #2]
 800516c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	887a      	ldrh	r2, [r7, #2]
 800517a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	887a      	ldrh	r2, [r7, #2]
 8005180:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005196:	d802      	bhi.n	800519e <HAL_SPI_TransmitReceive+0xe6>
 8005198:	8a3b      	ldrh	r3, [r7, #16]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d908      	bls.n	80051b0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051ac:	605a      	str	r2, [r3, #4]
 80051ae:	e007      	b.n	80051c0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051be:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ca:	2b40      	cmp	r3, #64	; 0x40
 80051cc:	d007      	beq.n	80051de <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051e6:	f240 8081 	bls.w	80052ec <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_SPI_TransmitReceive+0x140>
 80051f2:	8a7b      	ldrh	r3, [r7, #18]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d16d      	bne.n	80052d4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	881a      	ldrh	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	1c9a      	adds	r2, r3, #2
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800521c:	e05a      	b.n	80052d4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b02      	cmp	r3, #2
 800522a:	d11b      	bne.n	8005264 <HAL_SPI_TransmitReceive+0x1ac>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d016      	beq.n	8005264 <HAL_SPI_TransmitReceive+0x1ac>
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	2b01      	cmp	r3, #1
 800523a:	d113      	bne.n	8005264 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	881a      	ldrh	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	1c9a      	adds	r2, r3, #2
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b01      	cmp	r3, #1
 8005270:	d11c      	bne.n	80052ac <HAL_SPI_TransmitReceive+0x1f4>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d016      	beq.n	80052ac <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	b292      	uxth	r2, r2
 800528a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	1c9a      	adds	r2, r3, #2
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052a8:	2301      	movs	r3, #1
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052ac:	f7fd f942 	bl	8002534 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d80b      	bhi.n	80052d4 <HAL_SPI_TransmitReceive+0x21c>
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052c2:	d007      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80052d2:	e109      	b.n	80054e8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d19f      	bne.n	800521e <HAL_SPI_TransmitReceive+0x166>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d199      	bne.n	800521e <HAL_SPI_TransmitReceive+0x166>
 80052ea:	e0e3      	b.n	80054b4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_SPI_TransmitReceive+0x244>
 80052f4:	8a7b      	ldrh	r3, [r7, #18]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	f040 80cf 	bne.w	800549a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b01      	cmp	r3, #1
 8005304:	d912      	bls.n	800532c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	881a      	ldrh	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	1c9a      	adds	r2, r3, #2
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b02      	subs	r3, #2
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	87da      	strh	r2, [r3, #62]	; 0x3e
 800532a:	e0b6      	b.n	800549a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	330c      	adds	r3, #12
 8005336:	7812      	ldrb	r2, [r2, #0]
 8005338:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005348:	b29b      	uxth	r3, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005352:	e0a2      	b.n	800549a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b02      	cmp	r3, #2
 8005360:	d134      	bne.n	80053cc <HAL_SPI_TransmitReceive+0x314>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005366:	b29b      	uxth	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d02f      	beq.n	80053cc <HAL_SPI_TransmitReceive+0x314>
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	2b01      	cmp	r3, #1
 8005370:	d12c      	bne.n	80053cc <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	d912      	bls.n	80053a2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	881a      	ldrh	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	1c9a      	adds	r2, r3, #2
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b02      	subs	r3, #2
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053a0:	e012      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	7812      	ldrb	r2, [r2, #0]
 80053ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d148      	bne.n	800546c <HAL_SPI_TransmitReceive+0x3b4>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d042      	beq.n	800546c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d923      	bls.n	800543a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	b292      	uxth	r2, r2
 80053fe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	1c9a      	adds	r2, r3, #2
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b02      	subs	r3, #2
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	d81f      	bhi.n	8005468 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005436:	605a      	str	r2, [r3, #4]
 8005438:	e016      	b.n	8005468 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f103 020c 	add.w	r2, r3, #12
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	7812      	ldrb	r2, [r2, #0]
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005468:	2301      	movs	r3, #1
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800546c:	f7fd f862 	bl	8002534 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005478:	429a      	cmp	r2, r3
 800547a:	d803      	bhi.n	8005484 <HAL_SPI_TransmitReceive+0x3cc>
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005482:	d102      	bne.n	800548a <HAL_SPI_TransmitReceive+0x3d2>
 8005484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005486:	2b00      	cmp	r3, #0
 8005488:	d107      	bne.n	800549a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005498:	e026      	b.n	80054e8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f47f af57 	bne.w	8005354 <HAL_SPI_TransmitReceive+0x29c>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f47f af50 	bne.w	8005354 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f995 	bl	80057e8 <SPI_EndRxTxTransaction>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054de:	e003      	b.n	80054e8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3728      	adds	r7, #40	; 0x28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	4613      	mov	r3, r2
 800550a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800550c:	f7fd f812 	bl	8002534 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	1a9b      	subs	r3, r3, r2
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	4413      	add	r3, r2
 800551a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800551c:	f7fd f80a 	bl	8002534 <HAL_GetTick>
 8005520:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005522:	4b39      	ldr	r3, [pc, #228]	; (8005608 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	015b      	lsls	r3, r3, #5
 8005528:	0d1b      	lsrs	r3, r3, #20
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	fb02 f303 	mul.w	r3, r2, r3
 8005530:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005532:	e054      	b.n	80055de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800553a:	d050      	beq.n	80055de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800553c:	f7fc fffa 	bl	8002534 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	429a      	cmp	r2, r3
 800554a:	d902      	bls.n	8005552 <SPI_WaitFlagStateUntilTimeout+0x56>
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d13d      	bne.n	80055ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005560:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800556a:	d111      	bne.n	8005590 <SPI_WaitFlagStateUntilTimeout+0x94>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005574:	d004      	beq.n	8005580 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800557e:	d107      	bne.n	8005590 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800558e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005598:	d10f      	bne.n	80055ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e017      	b.n	80055fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	3b01      	subs	r3, #1
 80055dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4013      	ands	r3, r2
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	bf0c      	ite	eq
 80055ee:	2301      	moveq	r3, #1
 80055f0:	2300      	movne	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d19b      	bne.n	8005534 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000004 	.word	0x20000004

0800560c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08a      	sub	sp, #40	; 0x28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800561a:	2300      	movs	r3, #0
 800561c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800561e:	f7fc ff89 	bl	8002534 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	4413      	add	r3, r2
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800562e:	f7fc ff81 	bl	8002534 <HAL_GetTick>
 8005632:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	330c      	adds	r3, #12
 800563a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800563c:	4b3d      	ldr	r3, [pc, #244]	; (8005734 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	00da      	lsls	r2, r3, #3
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	0d1b      	lsrs	r3, r3, #20
 800564c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564e:	fb02 f303 	mul.w	r3, r2, r3
 8005652:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005654:	e060      	b.n	8005718 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800565c:	d107      	bne.n	800566e <SPI_WaitFifoStateUntilTimeout+0x62>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800566c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005674:	d050      	beq.n	8005718 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005676:	f7fc ff5d 	bl	8002534 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005682:	429a      	cmp	r2, r3
 8005684:	d902      	bls.n	800568c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	2b00      	cmp	r3, #0
 800568a:	d13d      	bne.n	8005708 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800569a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a4:	d111      	bne.n	80056ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ae:	d004      	beq.n	80056ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b8:	d107      	bne.n	80056ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d2:	d10f      	bne.n	80056f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e010      	b.n	800572a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	3b01      	subs	r3, #1
 8005716:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4013      	ands	r3, r2
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	429a      	cmp	r2, r3
 8005726:	d196      	bne.n	8005656 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3728      	adds	r7, #40	; 0x28
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000004 	.word	0x20000004

08005738 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800574c:	d111      	bne.n	8005772 <SPI_EndRxTransaction+0x3a>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005756:	d004      	beq.n	8005762 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005760:	d107      	bne.n	8005772 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005770:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2200      	movs	r2, #0
 800577a:	2180      	movs	r1, #128	; 0x80
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7ff febd 	bl	80054fc <SPI_WaitFlagStateUntilTimeout>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d007      	beq.n	8005798 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578c:	f043 0220 	orr.w	r2, r3, #32
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e023      	b.n	80057e0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057a0:	d11d      	bne.n	80057de <SPI_EndRxTransaction+0xa6>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057aa:	d004      	beq.n	80057b6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b4:	d113      	bne.n	80057de <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2200      	movs	r2, #0
 80057be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7ff ff22 	bl	800560c <SPI_WaitFifoStateUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d2:	f043 0220 	orr.w	r2, r3, #32
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e000      	b.n	80057e0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff ff03 	bl	800560c <SPI_WaitFifoStateUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005810:	f043 0220 	orr.w	r2, r3, #32
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e027      	b.n	800586c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2200      	movs	r2, #0
 8005824:	2180      	movs	r1, #128	; 0x80
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f7ff fe68 	bl	80054fc <SPI_WaitFlagStateUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005836:	f043 0220 	orr.w	r2, r3, #32
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e014      	b.n	800586c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2200      	movs	r2, #0
 800584a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f7ff fedc 	bl	800560c <SPI_WaitFifoStateUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585e:	f043 0220 	orr.w	r2, r3, #32
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e000      	b.n	800586c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e049      	b.n	800591a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fc faea 	bl	8001e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f000 fce2 	bl	800627c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	d001      	beq.n	800593c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e04f      	b.n	80059dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0201 	orr.w	r2, r2, #1
 8005952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a23      	ldr	r2, [pc, #140]	; (80059e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d01d      	beq.n	800599a <HAL_TIM_Base_Start_IT+0x76>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005966:	d018      	beq.n	800599a <HAL_TIM_Base_Start_IT+0x76>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a1f      	ldr	r2, [pc, #124]	; (80059ec <HAL_TIM_Base_Start_IT+0xc8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <HAL_TIM_Base_Start_IT+0x76>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1e      	ldr	r2, [pc, #120]	; (80059f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00e      	beq.n	800599a <HAL_TIM_Base_Start_IT+0x76>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a1c      	ldr	r2, [pc, #112]	; (80059f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d009      	beq.n	800599a <HAL_TIM_Base_Start_IT+0x76>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a1b      	ldr	r2, [pc, #108]	; (80059f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d004      	beq.n	800599a <HAL_TIM_Base_Start_IT+0x76>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a19      	ldr	r2, [pc, #100]	; (80059fc <HAL_TIM_Base_Start_IT+0xd8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d115      	bne.n	80059c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	4b17      	ldr	r3, [pc, #92]	; (8005a00 <HAL_TIM_Base_Start_IT+0xdc>)
 80059a2:	4013      	ands	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b06      	cmp	r3, #6
 80059aa:	d015      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0xb4>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b2:	d011      	beq.n	80059d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c4:	e008      	b.n	80059d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0201 	orr.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	e000      	b.n	80059da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40012c00 	.word	0x40012c00
 80059ec:	40000400 	.word	0x40000400
 80059f0:	40000800 	.word	0x40000800
 80059f4:	40000c00 	.word	0x40000c00
 80059f8:	40013400 	.word	0x40013400
 80059fc:	40014000 	.word	0x40014000
 8005a00:	00010007 	.word	0x00010007

08005a04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e049      	b.n	8005aaa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f841 	bl	8005ab2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	4619      	mov	r1, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	f000 fc1a 	bl	800627c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
	...

08005ac8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_TIM_IC_Start_IT+0x1e>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	e023      	b.n	8005b2e <HAL_TIM_IC_Start_IT+0x66>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d104      	bne.n	8005af6 <HAL_TIM_IC_Start_IT+0x2e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	e01b      	b.n	8005b2e <HAL_TIM_IC_Start_IT+0x66>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d104      	bne.n	8005b06 <HAL_TIM_IC_Start_IT+0x3e>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	e013      	b.n	8005b2e <HAL_TIM_IC_Start_IT+0x66>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b0c      	cmp	r3, #12
 8005b0a:	d104      	bne.n	8005b16 <HAL_TIM_IC_Start_IT+0x4e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	e00b      	b.n	8005b2e <HAL_TIM_IC_Start_IT+0x66>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b10      	cmp	r3, #16
 8005b1a:	d104      	bne.n	8005b26 <HAL_TIM_IC_Start_IT+0x5e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	e003      	b.n	8005b2e <HAL_TIM_IC_Start_IT+0x66>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d104      	bne.n	8005b40 <HAL_TIM_IC_Start_IT+0x78>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	e013      	b.n	8005b68 <HAL_TIM_IC_Start_IT+0xa0>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d104      	bne.n	8005b50 <HAL_TIM_IC_Start_IT+0x88>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	e00b      	b.n	8005b68 <HAL_TIM_IC_Start_IT+0xa0>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d104      	bne.n	8005b60 <HAL_TIM_IC_Start_IT+0x98>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	e003      	b.n	8005b68 <HAL_TIM_IC_Start_IT+0xa0>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d102      	bne.n	8005b76 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b70:	7b7b      	ldrb	r3, [r7, #13]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d001      	beq.n	8005b7a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e0dd      	b.n	8005d36 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d104      	bne.n	8005b8a <HAL_TIM_IC_Start_IT+0xc2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b88:	e023      	b.n	8005bd2 <HAL_TIM_IC_Start_IT+0x10a>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d104      	bne.n	8005b9a <HAL_TIM_IC_Start_IT+0xd2>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b98:	e01b      	b.n	8005bd2 <HAL_TIM_IC_Start_IT+0x10a>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d104      	bne.n	8005baa <HAL_TIM_IC_Start_IT+0xe2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ba8:	e013      	b.n	8005bd2 <HAL_TIM_IC_Start_IT+0x10a>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b0c      	cmp	r3, #12
 8005bae:	d104      	bne.n	8005bba <HAL_TIM_IC_Start_IT+0xf2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bb8:	e00b      	b.n	8005bd2 <HAL_TIM_IC_Start_IT+0x10a>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b10      	cmp	r3, #16
 8005bbe:	d104      	bne.n	8005bca <HAL_TIM_IC_Start_IT+0x102>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bc8:	e003      	b.n	8005bd2 <HAL_TIM_IC_Start_IT+0x10a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d104      	bne.n	8005be2 <HAL_TIM_IC_Start_IT+0x11a>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005be0:	e013      	b.n	8005c0a <HAL_TIM_IC_Start_IT+0x142>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d104      	bne.n	8005bf2 <HAL_TIM_IC_Start_IT+0x12a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bf0:	e00b      	b.n	8005c0a <HAL_TIM_IC_Start_IT+0x142>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d104      	bne.n	8005c02 <HAL_TIM_IC_Start_IT+0x13a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c00:	e003      	b.n	8005c0a <HAL_TIM_IC_Start_IT+0x142>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b0c      	cmp	r3, #12
 8005c0e:	d841      	bhi.n	8005c94 <HAL_TIM_IC_Start_IT+0x1cc>
 8005c10:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <HAL_TIM_IC_Start_IT+0x150>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005c4d 	.word	0x08005c4d
 8005c1c:	08005c95 	.word	0x08005c95
 8005c20:	08005c95 	.word	0x08005c95
 8005c24:	08005c95 	.word	0x08005c95
 8005c28:	08005c5f 	.word	0x08005c5f
 8005c2c:	08005c95 	.word	0x08005c95
 8005c30:	08005c95 	.word	0x08005c95
 8005c34:	08005c95 	.word	0x08005c95
 8005c38:	08005c71 	.word	0x08005c71
 8005c3c:	08005c95 	.word	0x08005c95
 8005c40:	08005c95 	.word	0x08005c95
 8005c44:	08005c95 	.word	0x08005c95
 8005c48:	08005c83 	.word	0x08005c83
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0202 	orr.w	r2, r2, #2
 8005c5a:	60da      	str	r2, [r3, #12]
      break;
 8005c5c:	e01d      	b.n	8005c9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 0204 	orr.w	r2, r2, #4
 8005c6c:	60da      	str	r2, [r3, #12]
      break;
 8005c6e:	e014      	b.n	8005c9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0208 	orr.w	r2, r2, #8
 8005c7e:	60da      	str	r2, [r3, #12]
      break;
 8005c80:	e00b      	b.n	8005c9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0210 	orr.w	r2, r2, #16
 8005c90:	60da      	str	r2, [r3, #12]
      break;
 8005c92:	e002      	b.n	8005c9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
      break;
 8005c98:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d149      	bne.n	8005d34 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 fd3f 	bl	800672c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a23      	ldr	r2, [pc, #140]	; (8005d40 <HAL_TIM_IC_Start_IT+0x278>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d01d      	beq.n	8005cf4 <HAL_TIM_IC_Start_IT+0x22c>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc0:	d018      	beq.n	8005cf4 <HAL_TIM_IC_Start_IT+0x22c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1f      	ldr	r2, [pc, #124]	; (8005d44 <HAL_TIM_IC_Start_IT+0x27c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d013      	beq.n	8005cf4 <HAL_TIM_IC_Start_IT+0x22c>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1d      	ldr	r2, [pc, #116]	; (8005d48 <HAL_TIM_IC_Start_IT+0x280>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00e      	beq.n	8005cf4 <HAL_TIM_IC_Start_IT+0x22c>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1c      	ldr	r2, [pc, #112]	; (8005d4c <HAL_TIM_IC_Start_IT+0x284>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d009      	beq.n	8005cf4 <HAL_TIM_IC_Start_IT+0x22c>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a1a      	ldr	r2, [pc, #104]	; (8005d50 <HAL_TIM_IC_Start_IT+0x288>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d004      	beq.n	8005cf4 <HAL_TIM_IC_Start_IT+0x22c>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a19      	ldr	r2, [pc, #100]	; (8005d54 <HAL_TIM_IC_Start_IT+0x28c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d115      	bne.n	8005d20 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <HAL_TIM_IC_Start_IT+0x290>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b06      	cmp	r3, #6
 8005d04:	d015      	beq.n	8005d32 <HAL_TIM_IC_Start_IT+0x26a>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0c:	d011      	beq.n	8005d32 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 0201 	orr.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1e:	e008      	b.n	8005d32 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	e000      	b.n	8005d34 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d32:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	40012c00 	.word	0x40012c00
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	40000c00 	.word	0x40000c00
 8005d50:	40013400 	.word	0x40013400
 8005d54:	40014000 	.word	0x40014000
 8005d58:	00010007 	.word	0x00010007

08005d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d020      	beq.n	8005dc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01b      	beq.n	8005dc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0202 	mvn.w	r2, #2
 8005d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa49 	bl	800623e <HAL_TIM_IC_CaptureCallback>
 8005dac:	e005      	b.n	8005dba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fa3b 	bl	800622a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fa4c 	bl	8006252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d020      	beq.n	8005e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01b      	beq.n	8005e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f06f 0204 	mvn.w	r2, #4
 8005ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2202      	movs	r2, #2
 8005de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fa23 	bl	800623e <HAL_TIM_IC_CaptureCallback>
 8005df8:	e005      	b.n	8005e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa15 	bl	800622a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fa26 	bl	8006252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d020      	beq.n	8005e58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01b      	beq.n	8005e58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0208 	mvn.w	r2, #8
 8005e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f9fd 	bl	800623e <HAL_TIM_IC_CaptureCallback>
 8005e44:	e005      	b.n	8005e52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f9ef 	bl	800622a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fa00 	bl	8006252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f003 0310 	and.w	r3, r3, #16
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d020      	beq.n	8005ea4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f003 0310 	and.w	r3, r3, #16
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01b      	beq.n	8005ea4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0210 	mvn.w	r2, #16
 8005e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f9d7 	bl	800623e <HAL_TIM_IC_CaptureCallback>
 8005e90:	e005      	b.n	8005e9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f9c9 	bl	800622a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f9da 	bl	8006252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00c      	beq.n	8005ec8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d007      	beq.n	8005ec8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0201 	mvn.w	r2, #1
 8005ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fc f92c 	bl	8002120 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00c      	beq.n	8005eec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fcd8 	bl	800689c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00c      	beq.n	8005f10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d007      	beq.n	8005f10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fcd0 	bl	80068b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00c      	beq.n	8005f34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d007      	beq.n	8005f34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f999 	bl	8006266 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00c      	beq.n	8005f58 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0220 	mvn.w	r2, #32
 8005f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fc98 	bl	8006888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f58:	bf00      	nop
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d101      	bne.n	8005f7e <HAL_TIM_IC_ConfigChannel+0x1e>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e088      	b.n	8006090 <HAL_TIM_IC_ConfigChannel+0x130>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d11b      	bne.n	8005fc4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005f9c:	f000 fa08 	bl	80063b0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 020c 	bic.w	r2, r2, #12
 8005fae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6999      	ldr	r1, [r3, #24]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	619a      	str	r2, [r3, #24]
 8005fc2:	e060      	b.n	8006086 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d11c      	bne.n	8006004 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005fda:	f000 fa86 	bl	80064ea <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699a      	ldr	r2, [r3, #24]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005fec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6999      	ldr	r1, [r3, #24]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	021a      	lsls	r2, r3, #8
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	619a      	str	r2, [r3, #24]
 8006002:	e040      	b.n	8006086 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b08      	cmp	r3, #8
 8006008:	d11b      	bne.n	8006042 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800601a:	f000 fad3 	bl	80065c4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69da      	ldr	r2, [r3, #28]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 020c 	bic.w	r2, r2, #12
 800602c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69d9      	ldr	r1, [r3, #28]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	61da      	str	r2, [r3, #28]
 8006040:	e021      	b.n	8006086 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b0c      	cmp	r3, #12
 8006046:	d11c      	bne.n	8006082 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006058:	f000 faf0 	bl	800663c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	69da      	ldr	r2, [r3, #28]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800606a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69d9      	ldr	r1, [r3, #28]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	021a      	lsls	r2, r3, #8
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	61da      	str	r2, [r3, #28]
 8006080:	e001      	b.n	8006086 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800608e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d101      	bne.n	80060b4 <HAL_TIM_ConfigClockSource+0x1c>
 80060b0:	2302      	movs	r3, #2
 80060b2:	e0b6      	b.n	8006222 <HAL_TIM_ConfigClockSource+0x18a>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f0:	d03e      	beq.n	8006170 <HAL_TIM_ConfigClockSource+0xd8>
 80060f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f6:	f200 8087 	bhi.w	8006208 <HAL_TIM_ConfigClockSource+0x170>
 80060fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fe:	f000 8086 	beq.w	800620e <HAL_TIM_ConfigClockSource+0x176>
 8006102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006106:	d87f      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x170>
 8006108:	2b70      	cmp	r3, #112	; 0x70
 800610a:	d01a      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0xaa>
 800610c:	2b70      	cmp	r3, #112	; 0x70
 800610e:	d87b      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x170>
 8006110:	2b60      	cmp	r3, #96	; 0x60
 8006112:	d050      	beq.n	80061b6 <HAL_TIM_ConfigClockSource+0x11e>
 8006114:	2b60      	cmp	r3, #96	; 0x60
 8006116:	d877      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x170>
 8006118:	2b50      	cmp	r3, #80	; 0x50
 800611a:	d03c      	beq.n	8006196 <HAL_TIM_ConfigClockSource+0xfe>
 800611c:	2b50      	cmp	r3, #80	; 0x50
 800611e:	d873      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x170>
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	d058      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x13e>
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	d86f      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x170>
 8006128:	2b30      	cmp	r3, #48	; 0x30
 800612a:	d064      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x15e>
 800612c:	2b30      	cmp	r3, #48	; 0x30
 800612e:	d86b      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x170>
 8006130:	2b20      	cmp	r3, #32
 8006132:	d060      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x15e>
 8006134:	2b20      	cmp	r3, #32
 8006136:	d867      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x170>
 8006138:	2b00      	cmp	r3, #0
 800613a:	d05c      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x15e>
 800613c:	2b10      	cmp	r3, #16
 800613e:	d05a      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x15e>
 8006140:	e062      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006152:	f000 facb 	bl	80066ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	609a      	str	r2, [r3, #8]
      break;
 800616e:	e04f      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006180:	f000 fab4 	bl	80066ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006192:	609a      	str	r2, [r3, #8]
      break;
 8006194:	e03c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a2:	461a      	mov	r2, r3
 80061a4:	f000 f972 	bl	800648c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2150      	movs	r1, #80	; 0x50
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fa81 	bl	80066b6 <TIM_ITRx_SetConfig>
      break;
 80061b4:	e02c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061c2:	461a      	mov	r2, r3
 80061c4:	f000 f9ce 	bl	8006564 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2160      	movs	r1, #96	; 0x60
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fa71 	bl	80066b6 <TIM_ITRx_SetConfig>
      break;
 80061d4:	e01c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e2:	461a      	mov	r2, r3
 80061e4:	f000 f952 	bl	800648c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2140      	movs	r1, #64	; 0x40
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fa61 	bl	80066b6 <TIM_ITRx_SetConfig>
      break;
 80061f4:	e00c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f000 fa58 	bl	80066b6 <TIM_ITRx_SetConfig>
      break;
 8006206:	e003      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	73fb      	strb	r3, [r7, #15]
      break;
 800620c:	e000      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800620e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006220:	7bfb      	ldrb	r3, [r7, #15]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
	...

0800627c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a40      	ldr	r2, [pc, #256]	; (8006390 <TIM_Base_SetConfig+0x114>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d013      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629a:	d00f      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a3d      	ldr	r2, [pc, #244]	; (8006394 <TIM_Base_SetConfig+0x118>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00b      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3c      	ldr	r2, [pc, #240]	; (8006398 <TIM_Base_SetConfig+0x11c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d007      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a3b      	ldr	r2, [pc, #236]	; (800639c <TIM_Base_SetConfig+0x120>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d003      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a3a      	ldr	r2, [pc, #232]	; (80063a0 <TIM_Base_SetConfig+0x124>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d108      	bne.n	80062ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2f      	ldr	r2, [pc, #188]	; (8006390 <TIM_Base_SetConfig+0x114>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d01f      	beq.n	8006316 <TIM_Base_SetConfig+0x9a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062dc:	d01b      	beq.n	8006316 <TIM_Base_SetConfig+0x9a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2c      	ldr	r2, [pc, #176]	; (8006394 <TIM_Base_SetConfig+0x118>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d017      	beq.n	8006316 <TIM_Base_SetConfig+0x9a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2b      	ldr	r2, [pc, #172]	; (8006398 <TIM_Base_SetConfig+0x11c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d013      	beq.n	8006316 <TIM_Base_SetConfig+0x9a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2a      	ldr	r2, [pc, #168]	; (800639c <TIM_Base_SetConfig+0x120>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00f      	beq.n	8006316 <TIM_Base_SetConfig+0x9a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a29      	ldr	r2, [pc, #164]	; (80063a0 <TIM_Base_SetConfig+0x124>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d00b      	beq.n	8006316 <TIM_Base_SetConfig+0x9a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a28      	ldr	r2, [pc, #160]	; (80063a4 <TIM_Base_SetConfig+0x128>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d007      	beq.n	8006316 <TIM_Base_SetConfig+0x9a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a27      	ldr	r2, [pc, #156]	; (80063a8 <TIM_Base_SetConfig+0x12c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d003      	beq.n	8006316 <TIM_Base_SetConfig+0x9a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a26      	ldr	r2, [pc, #152]	; (80063ac <TIM_Base_SetConfig+0x130>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d108      	bne.n	8006328 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800631c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a10      	ldr	r2, [pc, #64]	; (8006390 <TIM_Base_SetConfig+0x114>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00f      	beq.n	8006374 <TIM_Base_SetConfig+0xf8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a12      	ldr	r2, [pc, #72]	; (80063a0 <TIM_Base_SetConfig+0x124>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00b      	beq.n	8006374 <TIM_Base_SetConfig+0xf8>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a11      	ldr	r2, [pc, #68]	; (80063a4 <TIM_Base_SetConfig+0x128>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d007      	beq.n	8006374 <TIM_Base_SetConfig+0xf8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a10      	ldr	r2, [pc, #64]	; (80063a8 <TIM_Base_SetConfig+0x12c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_Base_SetConfig+0xf8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a0f      	ldr	r2, [pc, #60]	; (80063ac <TIM_Base_SetConfig+0x130>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d103      	bne.n	800637c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	615a      	str	r2, [r3, #20]
}
 8006382:	bf00      	nop
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40013400 	.word	0x40013400
 80063a4:	40014000 	.word	0x40014000
 80063a8:	40014400 	.word	0x40014400
 80063ac:	40014800 	.word	0x40014800

080063b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	f023 0201 	bic.w	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4a26      	ldr	r2, [pc, #152]	; (8006474 <TIM_TI1_SetConfig+0xc4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d017      	beq.n	800640e <TIM_TI1_SetConfig+0x5e>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e4:	d013      	beq.n	800640e <TIM_TI1_SetConfig+0x5e>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4a23      	ldr	r2, [pc, #140]	; (8006478 <TIM_TI1_SetConfig+0xc8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00f      	beq.n	800640e <TIM_TI1_SetConfig+0x5e>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a22      	ldr	r2, [pc, #136]	; (800647c <TIM_TI1_SetConfig+0xcc>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d00b      	beq.n	800640e <TIM_TI1_SetConfig+0x5e>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4a21      	ldr	r2, [pc, #132]	; (8006480 <TIM_TI1_SetConfig+0xd0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d007      	beq.n	800640e <TIM_TI1_SetConfig+0x5e>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4a20      	ldr	r2, [pc, #128]	; (8006484 <TIM_TI1_SetConfig+0xd4>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d003      	beq.n	800640e <TIM_TI1_SetConfig+0x5e>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4a1f      	ldr	r2, [pc, #124]	; (8006488 <TIM_TI1_SetConfig+0xd8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d101      	bne.n	8006412 <TIM_TI1_SetConfig+0x62>
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <TIM_TI1_SetConfig+0x64>
 8006412:	2300      	movs	r3, #0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d008      	beq.n	800642a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 0303 	bic.w	r3, r3, #3
 800641e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	e003      	b.n	8006432 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f043 0301 	orr.w	r3, r3, #1
 8006430:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	b2db      	uxtb	r3, r3
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f023 030a 	bic.w	r3, r3, #10
 800644c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f003 030a 	and.w	r3, r3, #10
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4313      	orrs	r3, r2
 8006458:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40012c00 	.word	0x40012c00
 8006478:	40000400 	.word	0x40000400
 800647c:	40000800 	.word	0x40000800
 8006480:	40000c00 	.word	0x40000c00
 8006484:	40013400 	.word	0x40013400
 8006488:	40014000 	.word	0x40014000

0800648c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f023 0201 	bic.w	r2, r3, #1
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f023 030a 	bic.w	r3, r3, #10
 80064c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	621a      	str	r2, [r3, #32]
}
 80064de:	bf00      	nop
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b087      	sub	sp, #28
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f023 0210 	bic.w	r2, r3, #16
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	021b      	lsls	r3, r3, #8
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006528:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	031b      	lsls	r3, r3, #12
 800652e:	b29b      	uxth	r3, r3
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800653c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	621a      	str	r2, [r3, #32]
}
 8006558:	bf00      	nop
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f023 0210 	bic.w	r2, r3, #16
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800658e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	031b      	lsls	r3, r3, #12
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4313      	orrs	r3, r2
 8006598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	621a      	str	r2, [r3, #32]
}
 80065b8:	bf00      	nop
 80065ba:	371c      	adds	r7, #28
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f023 0303 	bic.w	r3, r3, #3
 80065f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006600:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	b2db      	uxtb	r3, r3
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006614:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	021b      	lsls	r3, r3, #8
 800661a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	621a      	str	r2, [r3, #32]
}
 8006630:	bf00      	nop
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006668:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800667a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	031b      	lsls	r3, r3, #12
 8006680:	b29b      	uxth	r3, r3
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800668e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	031b      	lsls	r3, r3, #12
 8006694:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	4313      	orrs	r3, r2
 800669c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	621a      	str	r2, [r3, #32]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b085      	sub	sp, #20
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f043 0307 	orr.w	r3, r3, #7
 80066d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	609a      	str	r2, [r3, #8]
}
 80066e0:	bf00      	nop
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006706:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	021a      	lsls	r2, r3, #8
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	431a      	orrs	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4313      	orrs	r3, r2
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	609a      	str	r2, [r3, #8]
}
 8006720:	bf00      	nop
 8006722:	371c      	adds	r7, #28
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f003 031f 	and.w	r3, r3, #31
 800673e:	2201      	movs	r2, #1
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a1a      	ldr	r2, [r3, #32]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	43db      	mvns	r3, r3
 800674e:	401a      	ands	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a1a      	ldr	r2, [r3, #32]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f003 031f 	and.w	r3, r3, #31
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	fa01 f303 	lsl.w	r3, r1, r3
 8006764:	431a      	orrs	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	621a      	str	r2, [r3, #32]
}
 800676a:	bf00      	nop
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
	...

08006778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800678c:	2302      	movs	r3, #2
 800678e:	e068      	b.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a2e      	ldr	r2, [pc, #184]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d004      	beq.n	80067c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a2d      	ldr	r2, [pc, #180]	; (8006874 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d108      	bne.n	80067d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1e      	ldr	r2, [pc, #120]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d01d      	beq.n	8006836 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006802:	d018      	beq.n	8006836 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1b      	ldr	r2, [pc, #108]	; (8006878 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d013      	beq.n	8006836 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a1a      	ldr	r2, [pc, #104]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00e      	beq.n	8006836 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a18      	ldr	r2, [pc, #96]	; (8006880 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d009      	beq.n	8006836 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a13      	ldr	r2, [pc, #76]	; (8006874 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d004      	beq.n	8006836 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a14      	ldr	r2, [pc, #80]	; (8006884 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d10c      	bne.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800683c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	4313      	orrs	r3, r2
 8006846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40012c00 	.word	0x40012c00
 8006874:	40013400 	.word	0x40013400
 8006878:	40000400 	.word	0x40000400
 800687c:	40000800 	.word	0x40000800
 8006880:	40000c00 	.word	0x40000c00
 8006884:	40014000 	.word	0x40014000

08006888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e042      	b.n	800695c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d106      	bne.n	80068ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7fb f999 	bl	8001c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2224      	movs	r2, #36	; 0x24
 80068f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0201 	bic.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fbb4 	bl	800707c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f8b5 	bl	8006a84 <UART_SetConfig>
 800691a:	4603      	mov	r3, r0
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e01b      	b.n	800695c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006932:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006942:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0201 	orr.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fc33 	bl	80071c0 <UART_CheckIdleState>
 800695a:	4603      	mov	r3, r0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	; 0x28
 8006968:	af02      	add	r7, sp, #8
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	4613      	mov	r3, r2
 8006972:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697a:	2b20      	cmp	r3, #32
 800697c:	d17c      	bne.n	8006a78 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <HAL_UART_Transmit+0x26>
 8006984:	88fb      	ldrh	r3, [r7, #6]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e075      	b.n	8006a7a <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2221      	movs	r2, #33	; 0x21
 800699a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800699e:	f7fb fdc9 	bl	8002534 <HAL_GetTick>
 80069a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	88fa      	ldrh	r2, [r7, #6]
 80069a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	88fa      	ldrh	r2, [r7, #6]
 80069b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069bc:	d108      	bne.n	80069d0 <HAL_UART_Transmit+0x6c>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d104      	bne.n	80069d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	61bb      	str	r3, [r7, #24]
 80069ce:	e003      	b.n	80069d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069d4:	2300      	movs	r3, #0
 80069d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069d8:	e031      	b.n	8006a3e <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2200      	movs	r2, #0
 80069e2:	2180      	movs	r1, #128	; 0x80
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 fc95 	bl	8007314 <UART_WaitOnFlagUntilTimeout>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e03e      	b.n	8006a7a <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10b      	bne.n	8006a1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	881a      	ldrh	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a0e:	b292      	uxth	r2, r2
 8006a10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	3302      	adds	r3, #2
 8006a16:	61bb      	str	r3, [r7, #24]
 8006a18:	e008      	b.n	8006a2c <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	781a      	ldrb	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	b292      	uxth	r2, r2
 8006a24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1c7      	bne.n	80069da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2200      	movs	r2, #0
 8006a52:	2140      	movs	r1, #64	; 0x40
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 fc5d 	bl	8007314 <UART_WaitOnFlagUntilTimeout>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e006      	b.n	8006a7a <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	e000      	b.n	8006a7a <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8006a78:	2302      	movs	r3, #2
  }
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3720      	adds	r7, #32
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a88:	b08c      	sub	sp, #48	; 0x30
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4baa      	ldr	r3, [pc, #680]	; (8006d5c <UART_SetConfig+0x2d8>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006abc:	430b      	orrs	r3, r1
 8006abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a9f      	ldr	r2, [pc, #636]	; (8006d60 <UART_SetConfig+0x2dc>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d004      	beq.n	8006af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aec:	4313      	orrs	r3, r2
 8006aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006afa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	6812      	ldr	r2, [r2, #0]
 8006b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b04:	430b      	orrs	r3, r1
 8006b06:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	f023 010f 	bic.w	r1, r3, #15
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a90      	ldr	r2, [pc, #576]	; (8006d64 <UART_SetConfig+0x2e0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d125      	bne.n	8006b74 <UART_SetConfig+0xf0>
 8006b28:	4b8f      	ldr	r3, [pc, #572]	; (8006d68 <UART_SetConfig+0x2e4>)
 8006b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d81a      	bhi.n	8006b6c <UART_SetConfig+0xe8>
 8006b36:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <UART_SetConfig+0xb8>)
 8006b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3c:	08006b4d 	.word	0x08006b4d
 8006b40:	08006b5d 	.word	0x08006b5d
 8006b44:	08006b55 	.word	0x08006b55
 8006b48:	08006b65 	.word	0x08006b65
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b52:	e116      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006b54:	2302      	movs	r3, #2
 8006b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b5a:	e112      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006b5c:	2304      	movs	r3, #4
 8006b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b62:	e10e      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006b64:	2308      	movs	r3, #8
 8006b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b6a:	e10a      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b72:	e106      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a7c      	ldr	r2, [pc, #496]	; (8006d6c <UART_SetConfig+0x2e8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d138      	bne.n	8006bf0 <UART_SetConfig+0x16c>
 8006b7e:	4b7a      	ldr	r3, [pc, #488]	; (8006d68 <UART_SetConfig+0x2e4>)
 8006b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b84:	f003 030c 	and.w	r3, r3, #12
 8006b88:	2b0c      	cmp	r3, #12
 8006b8a:	d82d      	bhi.n	8006be8 <UART_SetConfig+0x164>
 8006b8c:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <UART_SetConfig+0x110>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006bc9 	.word	0x08006bc9
 8006b98:	08006be9 	.word	0x08006be9
 8006b9c:	08006be9 	.word	0x08006be9
 8006ba0:	08006be9 	.word	0x08006be9
 8006ba4:	08006bd9 	.word	0x08006bd9
 8006ba8:	08006be9 	.word	0x08006be9
 8006bac:	08006be9 	.word	0x08006be9
 8006bb0:	08006be9 	.word	0x08006be9
 8006bb4:	08006bd1 	.word	0x08006bd1
 8006bb8:	08006be9 	.word	0x08006be9
 8006bbc:	08006be9 	.word	0x08006be9
 8006bc0:	08006be9 	.word	0x08006be9
 8006bc4:	08006be1 	.word	0x08006be1
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bce:	e0d8      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd6:	e0d4      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bde:	e0d0      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006be0:	2308      	movs	r3, #8
 8006be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006be6:	e0cc      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006be8:	2310      	movs	r3, #16
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bee:	e0c8      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a5e      	ldr	r2, [pc, #376]	; (8006d70 <UART_SetConfig+0x2ec>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d125      	bne.n	8006c46 <UART_SetConfig+0x1c2>
 8006bfa:	4b5b      	ldr	r3, [pc, #364]	; (8006d68 <UART_SetConfig+0x2e4>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c04:	2b30      	cmp	r3, #48	; 0x30
 8006c06:	d016      	beq.n	8006c36 <UART_SetConfig+0x1b2>
 8006c08:	2b30      	cmp	r3, #48	; 0x30
 8006c0a:	d818      	bhi.n	8006c3e <UART_SetConfig+0x1ba>
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d00a      	beq.n	8006c26 <UART_SetConfig+0x1a2>
 8006c10:	2b20      	cmp	r3, #32
 8006c12:	d814      	bhi.n	8006c3e <UART_SetConfig+0x1ba>
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <UART_SetConfig+0x19a>
 8006c18:	2b10      	cmp	r3, #16
 8006c1a:	d008      	beq.n	8006c2e <UART_SetConfig+0x1aa>
 8006c1c:	e00f      	b.n	8006c3e <UART_SetConfig+0x1ba>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c24:	e0ad      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c26:	2302      	movs	r3, #2
 8006c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c2c:	e0a9      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c2e:	2304      	movs	r3, #4
 8006c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c34:	e0a5      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c36:	2308      	movs	r3, #8
 8006c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c3c:	e0a1      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c3e:	2310      	movs	r3, #16
 8006c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c44:	e09d      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a4a      	ldr	r2, [pc, #296]	; (8006d74 <UART_SetConfig+0x2f0>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d125      	bne.n	8006c9c <UART_SetConfig+0x218>
 8006c50:	4b45      	ldr	r3, [pc, #276]	; (8006d68 <UART_SetConfig+0x2e4>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c5c:	d016      	beq.n	8006c8c <UART_SetConfig+0x208>
 8006c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c60:	d818      	bhi.n	8006c94 <UART_SetConfig+0x210>
 8006c62:	2b80      	cmp	r3, #128	; 0x80
 8006c64:	d00a      	beq.n	8006c7c <UART_SetConfig+0x1f8>
 8006c66:	2b80      	cmp	r3, #128	; 0x80
 8006c68:	d814      	bhi.n	8006c94 <UART_SetConfig+0x210>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <UART_SetConfig+0x1f0>
 8006c6e:	2b40      	cmp	r3, #64	; 0x40
 8006c70:	d008      	beq.n	8006c84 <UART_SetConfig+0x200>
 8006c72:	e00f      	b.n	8006c94 <UART_SetConfig+0x210>
 8006c74:	2300      	movs	r3, #0
 8006c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7a:	e082      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c82:	e07e      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c84:	2304      	movs	r3, #4
 8006c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c8a:	e07a      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c8c:	2308      	movs	r3, #8
 8006c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c92:	e076      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c94:	2310      	movs	r3, #16
 8006c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c9a:	e072      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a35      	ldr	r2, [pc, #212]	; (8006d78 <UART_SetConfig+0x2f4>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d12a      	bne.n	8006cfc <UART_SetConfig+0x278>
 8006ca6:	4b30      	ldr	r3, [pc, #192]	; (8006d68 <UART_SetConfig+0x2e4>)
 8006ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb4:	d01a      	beq.n	8006cec <UART_SetConfig+0x268>
 8006cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cba:	d81b      	bhi.n	8006cf4 <UART_SetConfig+0x270>
 8006cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc0:	d00c      	beq.n	8006cdc <UART_SetConfig+0x258>
 8006cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc6:	d815      	bhi.n	8006cf4 <UART_SetConfig+0x270>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <UART_SetConfig+0x250>
 8006ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cd0:	d008      	beq.n	8006ce4 <UART_SetConfig+0x260>
 8006cd2:	e00f      	b.n	8006cf4 <UART_SetConfig+0x270>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cda:	e052      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce2:	e04e      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cea:	e04a      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006cec:	2308      	movs	r3, #8
 8006cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cf2:	e046      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cfa:	e042      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a17      	ldr	r2, [pc, #92]	; (8006d60 <UART_SetConfig+0x2dc>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d13a      	bne.n	8006d7c <UART_SetConfig+0x2f8>
 8006d06:	4b18      	ldr	r3, [pc, #96]	; (8006d68 <UART_SetConfig+0x2e4>)
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d14:	d01a      	beq.n	8006d4c <UART_SetConfig+0x2c8>
 8006d16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d1a:	d81b      	bhi.n	8006d54 <UART_SetConfig+0x2d0>
 8006d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d20:	d00c      	beq.n	8006d3c <UART_SetConfig+0x2b8>
 8006d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d26:	d815      	bhi.n	8006d54 <UART_SetConfig+0x2d0>
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <UART_SetConfig+0x2b0>
 8006d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d30:	d008      	beq.n	8006d44 <UART_SetConfig+0x2c0>
 8006d32:	e00f      	b.n	8006d54 <UART_SetConfig+0x2d0>
 8006d34:	2300      	movs	r3, #0
 8006d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d3a:	e022      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d42:	e01e      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006d44:	2304      	movs	r3, #4
 8006d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d4a:	e01a      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006d4c:	2308      	movs	r3, #8
 8006d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d52:	e016      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006d54:	2310      	movs	r3, #16
 8006d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d5a:	e012      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006d5c:	cfff69f3 	.word	0xcfff69f3
 8006d60:	40008000 	.word	0x40008000
 8006d64:	40013800 	.word	0x40013800
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	40004400 	.word	0x40004400
 8006d70:	40004800 	.word	0x40004800
 8006d74:	40004c00 	.word	0x40004c00
 8006d78:	40005000 	.word	0x40005000
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4aae      	ldr	r2, [pc, #696]	; (8007040 <UART_SetConfig+0x5bc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	f040 8097 	bne.w	8006ebc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d92:	2b08      	cmp	r3, #8
 8006d94:	d823      	bhi.n	8006dde <UART_SetConfig+0x35a>
 8006d96:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <UART_SetConfig+0x318>)
 8006d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9c:	08006dc1 	.word	0x08006dc1
 8006da0:	08006ddf 	.word	0x08006ddf
 8006da4:	08006dc9 	.word	0x08006dc9
 8006da8:	08006ddf 	.word	0x08006ddf
 8006dac:	08006dcf 	.word	0x08006dcf
 8006db0:	08006ddf 	.word	0x08006ddf
 8006db4:	08006ddf 	.word	0x08006ddf
 8006db8:	08006ddf 	.word	0x08006ddf
 8006dbc:	08006dd7 	.word	0x08006dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc0:	f7fd f99c 	bl	80040fc <HAL_RCC_GetPCLK1Freq>
 8006dc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006dc6:	e010      	b.n	8006dea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dc8:	4b9e      	ldr	r3, [pc, #632]	; (8007044 <UART_SetConfig+0x5c0>)
 8006dca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006dcc:	e00d      	b.n	8006dea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dce:	f7fd f8fd 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8006dd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006dd4:	e009      	b.n	8006dea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ddc:	e005      	b.n	8006dea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006de8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 8130 	beq.w	8007052 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	4a94      	ldr	r2, [pc, #592]	; (8007048 <UART_SetConfig+0x5c4>)
 8006df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	4413      	add	r3, r2
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d305      	bcc.n	8006e22 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d903      	bls.n	8006e2a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e28:	e113      	b.n	8007052 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	60bb      	str	r3, [r7, #8]
 8006e30:	60fa      	str	r2, [r7, #12]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	4a84      	ldr	r2, [pc, #528]	; (8007048 <UART_SetConfig+0x5c4>)
 8006e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	2200      	movs	r2, #0
 8006e40:	603b      	str	r3, [r7, #0]
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e4c:	f7f9 ff14 	bl	8000c78 <__aeabi_uldivmod>
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	4610      	mov	r0, r2
 8006e56:	4619      	mov	r1, r3
 8006e58:	f04f 0200 	mov.w	r2, #0
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	020b      	lsls	r3, r1, #8
 8006e62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e66:	0202      	lsls	r2, r0, #8
 8006e68:	6979      	ldr	r1, [r7, #20]
 8006e6a:	6849      	ldr	r1, [r1, #4]
 8006e6c:	0849      	lsrs	r1, r1, #1
 8006e6e:	2000      	movs	r0, #0
 8006e70:	460c      	mov	r4, r1
 8006e72:	4605      	mov	r5, r0
 8006e74:	eb12 0804 	adds.w	r8, r2, r4
 8006e78:	eb43 0905 	adc.w	r9, r3, r5
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	469a      	mov	sl, r3
 8006e84:	4693      	mov	fp, r2
 8006e86:	4652      	mov	r2, sl
 8006e88:	465b      	mov	r3, fp
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	f7f9 fef3 	bl	8000c78 <__aeabi_uldivmod>
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	4613      	mov	r3, r2
 8006e98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ea0:	d308      	bcc.n	8006eb4 <UART_SetConfig+0x430>
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ea8:	d204      	bcs.n	8006eb4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6a3a      	ldr	r2, [r7, #32]
 8006eb0:	60da      	str	r2, [r3, #12]
 8006eb2:	e0ce      	b.n	8007052 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006eba:	e0ca      	b.n	8007052 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec4:	d166      	bne.n	8006f94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d827      	bhi.n	8006f1e <UART_SetConfig+0x49a>
 8006ece:	a201      	add	r2, pc, #4	; (adr r2, 8006ed4 <UART_SetConfig+0x450>)
 8006ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed4:	08006ef9 	.word	0x08006ef9
 8006ed8:	08006f01 	.word	0x08006f01
 8006edc:	08006f09 	.word	0x08006f09
 8006ee0:	08006f1f 	.word	0x08006f1f
 8006ee4:	08006f0f 	.word	0x08006f0f
 8006ee8:	08006f1f 	.word	0x08006f1f
 8006eec:	08006f1f 	.word	0x08006f1f
 8006ef0:	08006f1f 	.word	0x08006f1f
 8006ef4:	08006f17 	.word	0x08006f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ef8:	f7fd f900 	bl	80040fc <HAL_RCC_GetPCLK1Freq>
 8006efc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006efe:	e014      	b.n	8006f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f00:	f7fd f912 	bl	8004128 <HAL_RCC_GetPCLK2Freq>
 8006f04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f06:	e010      	b.n	8006f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f08:	4b4e      	ldr	r3, [pc, #312]	; (8007044 <UART_SetConfig+0x5c0>)
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f0c:	e00d      	b.n	8006f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f0e:	f7fd f85d 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8006f12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f14:	e009      	b.n	8006f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f1c:	e005      	b.n	8006f2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 8090 	beq.w	8007052 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	4a44      	ldr	r2, [pc, #272]	; (8007048 <UART_SetConfig+0x5c4>)
 8006f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f44:	005a      	lsls	r2, r3, #1
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	085b      	lsrs	r3, r3, #1
 8006f4c:	441a      	add	r2, r3
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f56:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	2b0f      	cmp	r3, #15
 8006f5c:	d916      	bls.n	8006f8c <UART_SetConfig+0x508>
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f64:	d212      	bcs.n	8006f8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f023 030f 	bic.w	r3, r3, #15
 8006f6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	085b      	lsrs	r3, r3, #1
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	8bfb      	ldrh	r3, [r7, #30]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	8bfa      	ldrh	r2, [r7, #30]
 8006f88:	60da      	str	r2, [r3, #12]
 8006f8a:	e062      	b.n	8007052 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f92:	e05e      	b.n	8007052 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d828      	bhi.n	8006fee <UART_SetConfig+0x56a>
 8006f9c:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <UART_SetConfig+0x520>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006fc9 	.word	0x08006fc9
 8006fa8:	08006fd1 	.word	0x08006fd1
 8006fac:	08006fd9 	.word	0x08006fd9
 8006fb0:	08006fef 	.word	0x08006fef
 8006fb4:	08006fdf 	.word	0x08006fdf
 8006fb8:	08006fef 	.word	0x08006fef
 8006fbc:	08006fef 	.word	0x08006fef
 8006fc0:	08006fef 	.word	0x08006fef
 8006fc4:	08006fe7 	.word	0x08006fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fc8:	f7fd f898 	bl	80040fc <HAL_RCC_GetPCLK1Freq>
 8006fcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fce:	e014      	b.n	8006ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fd0:	f7fd f8aa 	bl	8004128 <HAL_RCC_GetPCLK2Freq>
 8006fd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fd6:	e010      	b.n	8006ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fd8:	4b1a      	ldr	r3, [pc, #104]	; (8007044 <UART_SetConfig+0x5c0>)
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fdc:	e00d      	b.n	8006ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fde:	f7fc fff5 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8006fe2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fe4:	e009      	b.n	8006ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fec:	e005      	b.n	8006ffa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ff8:	bf00      	nop
    }

    if (pclk != 0U)
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d028      	beq.n	8007052 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	4a10      	ldr	r2, [pc, #64]	; (8007048 <UART_SetConfig+0x5c4>)
 8007006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800700a:	461a      	mov	r2, r3
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	085b      	lsrs	r3, r3, #1
 8007018:	441a      	add	r2, r3
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007022:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	2b0f      	cmp	r3, #15
 8007028:	d910      	bls.n	800704c <UART_SetConfig+0x5c8>
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007030:	d20c      	bcs.n	800704c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	b29a      	uxth	r2, r3
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60da      	str	r2, [r3, #12]
 800703c:	e009      	b.n	8007052 <UART_SetConfig+0x5ce>
 800703e:	bf00      	nop
 8007040:	40008000 	.word	0x40008000
 8007044:	00f42400 	.word	0x00f42400
 8007048:	0800a1e4 	.word	0x0800a1e4
      }
      else
      {
        ret = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2201      	movs	r2, #1
 8007056:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2201      	movs	r2, #1
 800705e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2200      	movs	r2, #0
 8007066:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2200      	movs	r2, #0
 800706c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800706e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007072:	4618      	mov	r0, r3
 8007074:	3730      	adds	r7, #48	; 0x30
 8007076:	46bd      	mov	sp, r7
 8007078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800707c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007088:	f003 0308 	and.w	r3, r3, #8
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00a      	beq.n	80070ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	f003 0304 	and.w	r3, r3, #4
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007110:	f003 0310 	and.w	r3, r3, #16
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00a      	beq.n	800712e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01a      	beq.n	8007192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800717a:	d10a      	bne.n	8007192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	605a      	str	r2, [r3, #4]
  }
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b098      	sub	sp, #96	; 0x60
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071d0:	f7fb f9b0 	bl	8002534 <HAL_GetTick>
 80071d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0308 	and.w	r3, r3, #8
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d12f      	bne.n	8007244 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071ec:	2200      	movs	r2, #0
 80071ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f88e 	bl	8007314 <UART_WaitOnFlagUntilTimeout>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d022      	beq.n	8007244 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800720c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007212:	653b      	str	r3, [r7, #80]	; 0x50
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800721c:	647b      	str	r3, [r7, #68]	; 0x44
 800721e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800722a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e6      	bne.n	80071fe <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e063      	b.n	800730c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0304 	and.w	r3, r3, #4
 800724e:	2b04      	cmp	r3, #4
 8007250:	d149      	bne.n	80072e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007252:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800725a:	2200      	movs	r2, #0
 800725c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f857 	bl	8007314 <UART_WaitOnFlagUntilTimeout>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d03c      	beq.n	80072e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	623b      	str	r3, [r7, #32]
   return(result);
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007280:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800728a:	633b      	str	r3, [r7, #48]	; 0x30
 800728c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1e6      	bne.n	800726c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3308      	adds	r3, #8
 80072a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	e853 3f00 	ldrex	r3, [r3]
 80072ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f023 0301 	bic.w	r3, r3, #1
 80072b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3308      	adds	r3, #8
 80072bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072be:	61fa      	str	r2, [r7, #28]
 80072c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	69b9      	ldr	r1, [r7, #24]
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	617b      	str	r3, [r7, #20]
   return(result);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e5      	bne.n	800729e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e012      	b.n	800730c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3758      	adds	r7, #88	; 0x58
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	603b      	str	r3, [r7, #0]
 8007320:	4613      	mov	r3, r2
 8007322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007324:	e049      	b.n	80073ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800732c:	d045      	beq.n	80073ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732e:	f7fb f901 	bl	8002534 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	429a      	cmp	r2, r3
 800733c:	d302      	bcc.n	8007344 <UART_WaitOnFlagUntilTimeout+0x30>
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e048      	b.n	80073da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0304 	and.w	r3, r3, #4
 8007352:	2b00      	cmp	r3, #0
 8007354:	d031      	beq.n	80073ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b08      	cmp	r3, #8
 8007362:	d110      	bne.n	8007386 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2208      	movs	r2, #8
 800736a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 f838 	bl	80073e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2208      	movs	r2, #8
 8007376:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e029      	b.n	80073da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007394:	d111      	bne.n	80073ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800739e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f81e 	bl	80073e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e00f      	b.n	80073da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69da      	ldr	r2, [r3, #28]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	4013      	ands	r3, r2
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	bf0c      	ite	eq
 80073ca:	2301      	moveq	r3, #1
 80073cc:	2300      	movne	r3, #0
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	79fb      	ldrb	r3, [r7, #7]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d0a6      	beq.n	8007326 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b095      	sub	sp, #84	; 0x54
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	461a      	mov	r2, r3
 8007406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007408:	643b      	str	r3, [r7, #64]	; 0x40
 800740a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800740e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007410:	e841 2300 	strex	r3, r2, [r1]
 8007414:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e6      	bne.n	80073ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3308      	adds	r3, #8
 8007422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	61fb      	str	r3, [r7, #28]
   return(result);
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007432:	f023 0301 	bic.w	r3, r3, #1
 8007436:	64bb      	str	r3, [r7, #72]	; 0x48
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3308      	adds	r3, #8
 800743e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007440:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007448:	e841 2300 	strex	r3, r2, [r1]
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e3      	bne.n	800741c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007458:	2b01      	cmp	r3, #1
 800745a:	d118      	bne.n	800748e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	60bb      	str	r3, [r7, #8]
   return(result);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f023 0310 	bic.w	r3, r3, #16
 8007470:	647b      	str	r3, [r7, #68]	; 0x44
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800747a:	61bb      	str	r3, [r7, #24]
 800747c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	6979      	ldr	r1, [r7, #20]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	613b      	str	r3, [r7, #16]
   return(result);
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e6      	bne.n	800745c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2220      	movs	r2, #32
 8007492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80074a2:	bf00      	nop
 80074a4:	3754      	adds	r7, #84	; 0x54
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b085      	sub	sp, #20
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80074c0:	2302      	movs	r3, #2
 80074c2:	e027      	b.n	8007514 <HAL_UARTEx_DisableFifoMode+0x66>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2224      	movs	r2, #36	; 0x24
 80074d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0201 	bic.w	r2, r2, #1
 80074ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2220      	movs	r2, #32
 8007506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007534:	2302      	movs	r3, #2
 8007536:	e02d      	b.n	8007594 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2224      	movs	r2, #36	; 0x24
 8007544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0201 	bic.w	r2, r2, #1
 800755e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f84f 	bl	8007618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2220      	movs	r2, #32
 8007586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d101      	bne.n	80075b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075b0:	2302      	movs	r3, #2
 80075b2:	e02d      	b.n	8007610 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2224      	movs	r2, #36	; 0x24
 80075c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0201 	bic.w	r2, r2, #1
 80075da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f811 	bl	8007618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007624:	2b00      	cmp	r3, #0
 8007626:	d108      	bne.n	800763a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007638:	e031      	b.n	800769e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800763a:	2308      	movs	r3, #8
 800763c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800763e:	2308      	movs	r3, #8
 8007640:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	0e5b      	lsrs	r3, r3, #25
 800764a:	b2db      	uxtb	r3, r3
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	0f5b      	lsrs	r3, r3, #29
 800765a:	b2db      	uxtb	r3, r3
 800765c:	f003 0307 	and.w	r3, r3, #7
 8007660:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	7b3a      	ldrb	r2, [r7, #12]
 8007666:	4911      	ldr	r1, [pc, #68]	; (80076ac <UARTEx_SetNbDataToProcess+0x94>)
 8007668:	5c8a      	ldrb	r2, [r1, r2]
 800766a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800766e:	7b3a      	ldrb	r2, [r7, #12]
 8007670:	490f      	ldr	r1, [pc, #60]	; (80076b0 <UARTEx_SetNbDataToProcess+0x98>)
 8007672:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007674:	fb93 f3f2 	sdiv	r3, r3, r2
 8007678:	b29a      	uxth	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	7b7a      	ldrb	r2, [r7, #13]
 8007684:	4909      	ldr	r1, [pc, #36]	; (80076ac <UARTEx_SetNbDataToProcess+0x94>)
 8007686:	5c8a      	ldrb	r2, [r1, r2]
 8007688:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800768c:	7b7a      	ldrb	r2, [r7, #13]
 800768e:	4908      	ldr	r1, [pc, #32]	; (80076b0 <UARTEx_SetNbDataToProcess+0x98>)
 8007690:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007692:	fb93 f3f2 	sdiv	r3, r3, r2
 8007696:	b29a      	uxth	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800769e:	bf00      	nop
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	0800a1fc 	.word	0x0800a1fc
 80076b0:	0800a204 	.word	0x0800a204

080076b4 <__cvt>:
 80076b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076b8:	ec55 4b10 	vmov	r4, r5, d0
 80076bc:	2d00      	cmp	r5, #0
 80076be:	460e      	mov	r6, r1
 80076c0:	4619      	mov	r1, r3
 80076c2:	462b      	mov	r3, r5
 80076c4:	bfbb      	ittet	lt
 80076c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076ca:	461d      	movlt	r5, r3
 80076cc:	2300      	movge	r3, #0
 80076ce:	232d      	movlt	r3, #45	; 0x2d
 80076d0:	700b      	strb	r3, [r1, #0]
 80076d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076d8:	4691      	mov	r9, r2
 80076da:	f023 0820 	bic.w	r8, r3, #32
 80076de:	bfbc      	itt	lt
 80076e0:	4622      	movlt	r2, r4
 80076e2:	4614      	movlt	r4, r2
 80076e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076e8:	d005      	beq.n	80076f6 <__cvt+0x42>
 80076ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076ee:	d100      	bne.n	80076f2 <__cvt+0x3e>
 80076f0:	3601      	adds	r6, #1
 80076f2:	2102      	movs	r1, #2
 80076f4:	e000      	b.n	80076f8 <__cvt+0x44>
 80076f6:	2103      	movs	r1, #3
 80076f8:	ab03      	add	r3, sp, #12
 80076fa:	9301      	str	r3, [sp, #4]
 80076fc:	ab02      	add	r3, sp, #8
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	ec45 4b10 	vmov	d0, r4, r5
 8007704:	4653      	mov	r3, sl
 8007706:	4632      	mov	r2, r6
 8007708:	f000 fe2e 	bl	8008368 <_dtoa_r>
 800770c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007710:	4607      	mov	r7, r0
 8007712:	d102      	bne.n	800771a <__cvt+0x66>
 8007714:	f019 0f01 	tst.w	r9, #1
 8007718:	d022      	beq.n	8007760 <__cvt+0xac>
 800771a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800771e:	eb07 0906 	add.w	r9, r7, r6
 8007722:	d110      	bne.n	8007746 <__cvt+0x92>
 8007724:	783b      	ldrb	r3, [r7, #0]
 8007726:	2b30      	cmp	r3, #48	; 0x30
 8007728:	d10a      	bne.n	8007740 <__cvt+0x8c>
 800772a:	2200      	movs	r2, #0
 800772c:	2300      	movs	r3, #0
 800772e:	4620      	mov	r0, r4
 8007730:	4629      	mov	r1, r5
 8007732:	f7f9 f9e1 	bl	8000af8 <__aeabi_dcmpeq>
 8007736:	b918      	cbnz	r0, 8007740 <__cvt+0x8c>
 8007738:	f1c6 0601 	rsb	r6, r6, #1
 800773c:	f8ca 6000 	str.w	r6, [sl]
 8007740:	f8da 3000 	ldr.w	r3, [sl]
 8007744:	4499      	add	r9, r3
 8007746:	2200      	movs	r2, #0
 8007748:	2300      	movs	r3, #0
 800774a:	4620      	mov	r0, r4
 800774c:	4629      	mov	r1, r5
 800774e:	f7f9 f9d3 	bl	8000af8 <__aeabi_dcmpeq>
 8007752:	b108      	cbz	r0, 8007758 <__cvt+0xa4>
 8007754:	f8cd 900c 	str.w	r9, [sp, #12]
 8007758:	2230      	movs	r2, #48	; 0x30
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	454b      	cmp	r3, r9
 800775e:	d307      	bcc.n	8007770 <__cvt+0xbc>
 8007760:	9b03      	ldr	r3, [sp, #12]
 8007762:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007764:	1bdb      	subs	r3, r3, r7
 8007766:	4638      	mov	r0, r7
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	b004      	add	sp, #16
 800776c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007770:	1c59      	adds	r1, r3, #1
 8007772:	9103      	str	r1, [sp, #12]
 8007774:	701a      	strb	r2, [r3, #0]
 8007776:	e7f0      	b.n	800775a <__cvt+0xa6>

08007778 <__exponent>:
 8007778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800777a:	4603      	mov	r3, r0
 800777c:	2900      	cmp	r1, #0
 800777e:	bfb8      	it	lt
 8007780:	4249      	neglt	r1, r1
 8007782:	f803 2b02 	strb.w	r2, [r3], #2
 8007786:	bfb4      	ite	lt
 8007788:	222d      	movlt	r2, #45	; 0x2d
 800778a:	222b      	movge	r2, #43	; 0x2b
 800778c:	2909      	cmp	r1, #9
 800778e:	7042      	strb	r2, [r0, #1]
 8007790:	dd2a      	ble.n	80077e8 <__exponent+0x70>
 8007792:	f10d 0207 	add.w	r2, sp, #7
 8007796:	4617      	mov	r7, r2
 8007798:	260a      	movs	r6, #10
 800779a:	4694      	mov	ip, r2
 800779c:	fb91 f5f6 	sdiv	r5, r1, r6
 80077a0:	fb06 1415 	mls	r4, r6, r5, r1
 80077a4:	3430      	adds	r4, #48	; 0x30
 80077a6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80077aa:	460c      	mov	r4, r1
 80077ac:	2c63      	cmp	r4, #99	; 0x63
 80077ae:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80077b2:	4629      	mov	r1, r5
 80077b4:	dcf1      	bgt.n	800779a <__exponent+0x22>
 80077b6:	3130      	adds	r1, #48	; 0x30
 80077b8:	f1ac 0402 	sub.w	r4, ip, #2
 80077bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80077c0:	1c41      	adds	r1, r0, #1
 80077c2:	4622      	mov	r2, r4
 80077c4:	42ba      	cmp	r2, r7
 80077c6:	d30a      	bcc.n	80077de <__exponent+0x66>
 80077c8:	f10d 0209 	add.w	r2, sp, #9
 80077cc:	eba2 020c 	sub.w	r2, r2, ip
 80077d0:	42bc      	cmp	r4, r7
 80077d2:	bf88      	it	hi
 80077d4:	2200      	movhi	r2, #0
 80077d6:	4413      	add	r3, r2
 80077d8:	1a18      	subs	r0, r3, r0
 80077da:	b003      	add	sp, #12
 80077dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077de:	f812 5b01 	ldrb.w	r5, [r2], #1
 80077e2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80077e6:	e7ed      	b.n	80077c4 <__exponent+0x4c>
 80077e8:	2330      	movs	r3, #48	; 0x30
 80077ea:	3130      	adds	r1, #48	; 0x30
 80077ec:	7083      	strb	r3, [r0, #2]
 80077ee:	70c1      	strb	r1, [r0, #3]
 80077f0:	1d03      	adds	r3, r0, #4
 80077f2:	e7f1      	b.n	80077d8 <__exponent+0x60>

080077f4 <_printf_float>:
 80077f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f8:	ed2d 8b02 	vpush	{d8}
 80077fc:	b08d      	sub	sp, #52	; 0x34
 80077fe:	460c      	mov	r4, r1
 8007800:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007804:	4616      	mov	r6, r2
 8007806:	461f      	mov	r7, r3
 8007808:	4605      	mov	r5, r0
 800780a:	f000 fcf1 	bl	80081f0 <_localeconv_r>
 800780e:	f8d0 a000 	ldr.w	sl, [r0]
 8007812:	4650      	mov	r0, sl
 8007814:	f7f8 fd44 	bl	80002a0 <strlen>
 8007818:	2300      	movs	r3, #0
 800781a:	930a      	str	r3, [sp, #40]	; 0x28
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	9305      	str	r3, [sp, #20]
 8007820:	f8d8 3000 	ldr.w	r3, [r8]
 8007824:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007828:	3307      	adds	r3, #7
 800782a:	f023 0307 	bic.w	r3, r3, #7
 800782e:	f103 0208 	add.w	r2, r3, #8
 8007832:	f8c8 2000 	str.w	r2, [r8]
 8007836:	e9d3 8900 	ldrd	r8, r9, [r3]
 800783a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800783e:	9307      	str	r3, [sp, #28]
 8007840:	f8cd 8018 	str.w	r8, [sp, #24]
 8007844:	ee08 0a10 	vmov	s16, r0
 8007848:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800784c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007850:	4b9e      	ldr	r3, [pc, #632]	; (8007acc <_printf_float+0x2d8>)
 8007852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007856:	f7f9 f981 	bl	8000b5c <__aeabi_dcmpun>
 800785a:	bb88      	cbnz	r0, 80078c0 <_printf_float+0xcc>
 800785c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007860:	4b9a      	ldr	r3, [pc, #616]	; (8007acc <_printf_float+0x2d8>)
 8007862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007866:	f7f9 f95b 	bl	8000b20 <__aeabi_dcmple>
 800786a:	bb48      	cbnz	r0, 80078c0 <_printf_float+0xcc>
 800786c:	2200      	movs	r2, #0
 800786e:	2300      	movs	r3, #0
 8007870:	4640      	mov	r0, r8
 8007872:	4649      	mov	r1, r9
 8007874:	f7f9 f94a 	bl	8000b0c <__aeabi_dcmplt>
 8007878:	b110      	cbz	r0, 8007880 <_printf_float+0x8c>
 800787a:	232d      	movs	r3, #45	; 0x2d
 800787c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007880:	4a93      	ldr	r2, [pc, #588]	; (8007ad0 <_printf_float+0x2dc>)
 8007882:	4b94      	ldr	r3, [pc, #592]	; (8007ad4 <_printf_float+0x2e0>)
 8007884:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007888:	bf94      	ite	ls
 800788a:	4690      	movls	r8, r2
 800788c:	4698      	movhi	r8, r3
 800788e:	2303      	movs	r3, #3
 8007890:	6123      	str	r3, [r4, #16]
 8007892:	9b05      	ldr	r3, [sp, #20]
 8007894:	f023 0304 	bic.w	r3, r3, #4
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	f04f 0900 	mov.w	r9, #0
 800789e:	9700      	str	r7, [sp, #0]
 80078a0:	4633      	mov	r3, r6
 80078a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80078a4:	4621      	mov	r1, r4
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 f9da 	bl	8007c60 <_printf_common>
 80078ac:	3001      	adds	r0, #1
 80078ae:	f040 8090 	bne.w	80079d2 <_printf_float+0x1de>
 80078b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078b6:	b00d      	add	sp, #52	; 0x34
 80078b8:	ecbd 8b02 	vpop	{d8}
 80078bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c0:	4642      	mov	r2, r8
 80078c2:	464b      	mov	r3, r9
 80078c4:	4640      	mov	r0, r8
 80078c6:	4649      	mov	r1, r9
 80078c8:	f7f9 f948 	bl	8000b5c <__aeabi_dcmpun>
 80078cc:	b140      	cbz	r0, 80078e0 <_printf_float+0xec>
 80078ce:	464b      	mov	r3, r9
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	bfbc      	itt	lt
 80078d4:	232d      	movlt	r3, #45	; 0x2d
 80078d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078da:	4a7f      	ldr	r2, [pc, #508]	; (8007ad8 <_printf_float+0x2e4>)
 80078dc:	4b7f      	ldr	r3, [pc, #508]	; (8007adc <_printf_float+0x2e8>)
 80078de:	e7d1      	b.n	8007884 <_printf_float+0x90>
 80078e0:	6863      	ldr	r3, [r4, #4]
 80078e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078e6:	9206      	str	r2, [sp, #24]
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	d13f      	bne.n	800796c <_printf_float+0x178>
 80078ec:	2306      	movs	r3, #6
 80078ee:	6063      	str	r3, [r4, #4]
 80078f0:	9b05      	ldr	r3, [sp, #20]
 80078f2:	6861      	ldr	r1, [r4, #4]
 80078f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078f8:	2300      	movs	r3, #0
 80078fa:	9303      	str	r3, [sp, #12]
 80078fc:	ab0a      	add	r3, sp, #40	; 0x28
 80078fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007902:	ab09      	add	r3, sp, #36	; 0x24
 8007904:	ec49 8b10 	vmov	d0, r8, r9
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	6022      	str	r2, [r4, #0]
 800790c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007910:	4628      	mov	r0, r5
 8007912:	f7ff fecf 	bl	80076b4 <__cvt>
 8007916:	9b06      	ldr	r3, [sp, #24]
 8007918:	9909      	ldr	r1, [sp, #36]	; 0x24
 800791a:	2b47      	cmp	r3, #71	; 0x47
 800791c:	4680      	mov	r8, r0
 800791e:	d108      	bne.n	8007932 <_printf_float+0x13e>
 8007920:	1cc8      	adds	r0, r1, #3
 8007922:	db02      	blt.n	800792a <_printf_float+0x136>
 8007924:	6863      	ldr	r3, [r4, #4]
 8007926:	4299      	cmp	r1, r3
 8007928:	dd41      	ble.n	80079ae <_printf_float+0x1ba>
 800792a:	f1ab 0302 	sub.w	r3, fp, #2
 800792e:	fa5f fb83 	uxtb.w	fp, r3
 8007932:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007936:	d820      	bhi.n	800797a <_printf_float+0x186>
 8007938:	3901      	subs	r1, #1
 800793a:	465a      	mov	r2, fp
 800793c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007940:	9109      	str	r1, [sp, #36]	; 0x24
 8007942:	f7ff ff19 	bl	8007778 <__exponent>
 8007946:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007948:	1813      	adds	r3, r2, r0
 800794a:	2a01      	cmp	r2, #1
 800794c:	4681      	mov	r9, r0
 800794e:	6123      	str	r3, [r4, #16]
 8007950:	dc02      	bgt.n	8007958 <_printf_float+0x164>
 8007952:	6822      	ldr	r2, [r4, #0]
 8007954:	07d2      	lsls	r2, r2, #31
 8007956:	d501      	bpl.n	800795c <_printf_float+0x168>
 8007958:	3301      	adds	r3, #1
 800795a:	6123      	str	r3, [r4, #16]
 800795c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007960:	2b00      	cmp	r3, #0
 8007962:	d09c      	beq.n	800789e <_printf_float+0xaa>
 8007964:	232d      	movs	r3, #45	; 0x2d
 8007966:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800796a:	e798      	b.n	800789e <_printf_float+0xaa>
 800796c:	9a06      	ldr	r2, [sp, #24]
 800796e:	2a47      	cmp	r2, #71	; 0x47
 8007970:	d1be      	bne.n	80078f0 <_printf_float+0xfc>
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1bc      	bne.n	80078f0 <_printf_float+0xfc>
 8007976:	2301      	movs	r3, #1
 8007978:	e7b9      	b.n	80078ee <_printf_float+0xfa>
 800797a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800797e:	d118      	bne.n	80079b2 <_printf_float+0x1be>
 8007980:	2900      	cmp	r1, #0
 8007982:	6863      	ldr	r3, [r4, #4]
 8007984:	dd0b      	ble.n	800799e <_printf_float+0x1aa>
 8007986:	6121      	str	r1, [r4, #16]
 8007988:	b913      	cbnz	r3, 8007990 <_printf_float+0x19c>
 800798a:	6822      	ldr	r2, [r4, #0]
 800798c:	07d0      	lsls	r0, r2, #31
 800798e:	d502      	bpl.n	8007996 <_printf_float+0x1a2>
 8007990:	3301      	adds	r3, #1
 8007992:	440b      	add	r3, r1
 8007994:	6123      	str	r3, [r4, #16]
 8007996:	65a1      	str	r1, [r4, #88]	; 0x58
 8007998:	f04f 0900 	mov.w	r9, #0
 800799c:	e7de      	b.n	800795c <_printf_float+0x168>
 800799e:	b913      	cbnz	r3, 80079a6 <_printf_float+0x1b2>
 80079a0:	6822      	ldr	r2, [r4, #0]
 80079a2:	07d2      	lsls	r2, r2, #31
 80079a4:	d501      	bpl.n	80079aa <_printf_float+0x1b6>
 80079a6:	3302      	adds	r3, #2
 80079a8:	e7f4      	b.n	8007994 <_printf_float+0x1a0>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e7f2      	b.n	8007994 <_printf_float+0x1a0>
 80079ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80079b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079b4:	4299      	cmp	r1, r3
 80079b6:	db05      	blt.n	80079c4 <_printf_float+0x1d0>
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	6121      	str	r1, [r4, #16]
 80079bc:	07d8      	lsls	r0, r3, #31
 80079be:	d5ea      	bpl.n	8007996 <_printf_float+0x1a2>
 80079c0:	1c4b      	adds	r3, r1, #1
 80079c2:	e7e7      	b.n	8007994 <_printf_float+0x1a0>
 80079c4:	2900      	cmp	r1, #0
 80079c6:	bfd4      	ite	le
 80079c8:	f1c1 0202 	rsble	r2, r1, #2
 80079cc:	2201      	movgt	r2, #1
 80079ce:	4413      	add	r3, r2
 80079d0:	e7e0      	b.n	8007994 <_printf_float+0x1a0>
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	055a      	lsls	r2, r3, #21
 80079d6:	d407      	bmi.n	80079e8 <_printf_float+0x1f4>
 80079d8:	6923      	ldr	r3, [r4, #16]
 80079da:	4642      	mov	r2, r8
 80079dc:	4631      	mov	r1, r6
 80079de:	4628      	mov	r0, r5
 80079e0:	47b8      	blx	r7
 80079e2:	3001      	adds	r0, #1
 80079e4:	d12c      	bne.n	8007a40 <_printf_float+0x24c>
 80079e6:	e764      	b.n	80078b2 <_printf_float+0xbe>
 80079e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079ec:	f240 80e0 	bls.w	8007bb0 <_printf_float+0x3bc>
 80079f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079f4:	2200      	movs	r2, #0
 80079f6:	2300      	movs	r3, #0
 80079f8:	f7f9 f87e 	bl	8000af8 <__aeabi_dcmpeq>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d034      	beq.n	8007a6a <_printf_float+0x276>
 8007a00:	4a37      	ldr	r2, [pc, #220]	; (8007ae0 <_printf_float+0x2ec>)
 8007a02:	2301      	movs	r3, #1
 8007a04:	4631      	mov	r1, r6
 8007a06:	4628      	mov	r0, r5
 8007a08:	47b8      	blx	r7
 8007a0a:	3001      	adds	r0, #1
 8007a0c:	f43f af51 	beq.w	80078b2 <_printf_float+0xbe>
 8007a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a14:	429a      	cmp	r2, r3
 8007a16:	db02      	blt.n	8007a1e <_printf_float+0x22a>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	07d8      	lsls	r0, r3, #31
 8007a1c:	d510      	bpl.n	8007a40 <_printf_float+0x24c>
 8007a1e:	ee18 3a10 	vmov	r3, s16
 8007a22:	4652      	mov	r2, sl
 8007a24:	4631      	mov	r1, r6
 8007a26:	4628      	mov	r0, r5
 8007a28:	47b8      	blx	r7
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	f43f af41 	beq.w	80078b2 <_printf_float+0xbe>
 8007a30:	f04f 0800 	mov.w	r8, #0
 8007a34:	f104 091a 	add.w	r9, r4, #26
 8007a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	4543      	cmp	r3, r8
 8007a3e:	dc09      	bgt.n	8007a54 <_printf_float+0x260>
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	079b      	lsls	r3, r3, #30
 8007a44:	f100 8107 	bmi.w	8007c56 <_printf_float+0x462>
 8007a48:	68e0      	ldr	r0, [r4, #12]
 8007a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a4c:	4298      	cmp	r0, r3
 8007a4e:	bfb8      	it	lt
 8007a50:	4618      	movlt	r0, r3
 8007a52:	e730      	b.n	80078b6 <_printf_float+0xc2>
 8007a54:	2301      	movs	r3, #1
 8007a56:	464a      	mov	r2, r9
 8007a58:	4631      	mov	r1, r6
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	47b8      	blx	r7
 8007a5e:	3001      	adds	r0, #1
 8007a60:	f43f af27 	beq.w	80078b2 <_printf_float+0xbe>
 8007a64:	f108 0801 	add.w	r8, r8, #1
 8007a68:	e7e6      	b.n	8007a38 <_printf_float+0x244>
 8007a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	dc39      	bgt.n	8007ae4 <_printf_float+0x2f0>
 8007a70:	4a1b      	ldr	r2, [pc, #108]	; (8007ae0 <_printf_float+0x2ec>)
 8007a72:	2301      	movs	r3, #1
 8007a74:	4631      	mov	r1, r6
 8007a76:	4628      	mov	r0, r5
 8007a78:	47b8      	blx	r7
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	f43f af19 	beq.w	80078b2 <_printf_float+0xbe>
 8007a80:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007a84:	4313      	orrs	r3, r2
 8007a86:	d102      	bne.n	8007a8e <_printf_float+0x29a>
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	07d9      	lsls	r1, r3, #31
 8007a8c:	d5d8      	bpl.n	8007a40 <_printf_float+0x24c>
 8007a8e:	ee18 3a10 	vmov	r3, s16
 8007a92:	4652      	mov	r2, sl
 8007a94:	4631      	mov	r1, r6
 8007a96:	4628      	mov	r0, r5
 8007a98:	47b8      	blx	r7
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	f43f af09 	beq.w	80078b2 <_printf_float+0xbe>
 8007aa0:	f04f 0900 	mov.w	r9, #0
 8007aa4:	f104 0a1a 	add.w	sl, r4, #26
 8007aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aaa:	425b      	negs	r3, r3
 8007aac:	454b      	cmp	r3, r9
 8007aae:	dc01      	bgt.n	8007ab4 <_printf_float+0x2c0>
 8007ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab2:	e792      	b.n	80079da <_printf_float+0x1e6>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	4652      	mov	r2, sl
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b8      	blx	r7
 8007abe:	3001      	adds	r0, #1
 8007ac0:	f43f aef7 	beq.w	80078b2 <_printf_float+0xbe>
 8007ac4:	f109 0901 	add.w	r9, r9, #1
 8007ac8:	e7ee      	b.n	8007aa8 <_printf_float+0x2b4>
 8007aca:	bf00      	nop
 8007acc:	7fefffff 	.word	0x7fefffff
 8007ad0:	0800a20c 	.word	0x0800a20c
 8007ad4:	0800a210 	.word	0x0800a210
 8007ad8:	0800a214 	.word	0x0800a214
 8007adc:	0800a218 	.word	0x0800a218
 8007ae0:	0800a21c 	.word	0x0800a21c
 8007ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ae6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	bfa8      	it	ge
 8007aec:	461a      	movge	r2, r3
 8007aee:	2a00      	cmp	r2, #0
 8007af0:	4691      	mov	r9, r2
 8007af2:	dc37      	bgt.n	8007b64 <_printf_float+0x370>
 8007af4:	f04f 0b00 	mov.w	fp, #0
 8007af8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007afc:	f104 021a 	add.w	r2, r4, #26
 8007b00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b02:	9305      	str	r3, [sp, #20]
 8007b04:	eba3 0309 	sub.w	r3, r3, r9
 8007b08:	455b      	cmp	r3, fp
 8007b0a:	dc33      	bgt.n	8007b74 <_printf_float+0x380>
 8007b0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b10:	429a      	cmp	r2, r3
 8007b12:	db3b      	blt.n	8007b8c <_printf_float+0x398>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	07da      	lsls	r2, r3, #31
 8007b18:	d438      	bmi.n	8007b8c <_printf_float+0x398>
 8007b1a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b1e:	eba2 0903 	sub.w	r9, r2, r3
 8007b22:	9b05      	ldr	r3, [sp, #20]
 8007b24:	1ad2      	subs	r2, r2, r3
 8007b26:	4591      	cmp	r9, r2
 8007b28:	bfa8      	it	ge
 8007b2a:	4691      	movge	r9, r2
 8007b2c:	f1b9 0f00 	cmp.w	r9, #0
 8007b30:	dc35      	bgt.n	8007b9e <_printf_float+0x3aa>
 8007b32:	f04f 0800 	mov.w	r8, #0
 8007b36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b3a:	f104 0a1a 	add.w	sl, r4, #26
 8007b3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b42:	1a9b      	subs	r3, r3, r2
 8007b44:	eba3 0309 	sub.w	r3, r3, r9
 8007b48:	4543      	cmp	r3, r8
 8007b4a:	f77f af79 	ble.w	8007a40 <_printf_float+0x24c>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4652      	mov	r2, sl
 8007b52:	4631      	mov	r1, r6
 8007b54:	4628      	mov	r0, r5
 8007b56:	47b8      	blx	r7
 8007b58:	3001      	adds	r0, #1
 8007b5a:	f43f aeaa 	beq.w	80078b2 <_printf_float+0xbe>
 8007b5e:	f108 0801 	add.w	r8, r8, #1
 8007b62:	e7ec      	b.n	8007b3e <_printf_float+0x34a>
 8007b64:	4613      	mov	r3, r2
 8007b66:	4631      	mov	r1, r6
 8007b68:	4642      	mov	r2, r8
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	47b8      	blx	r7
 8007b6e:	3001      	adds	r0, #1
 8007b70:	d1c0      	bne.n	8007af4 <_printf_float+0x300>
 8007b72:	e69e      	b.n	80078b2 <_printf_float+0xbe>
 8007b74:	2301      	movs	r3, #1
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	9205      	str	r2, [sp, #20]
 8007b7c:	47b8      	blx	r7
 8007b7e:	3001      	adds	r0, #1
 8007b80:	f43f ae97 	beq.w	80078b2 <_printf_float+0xbe>
 8007b84:	9a05      	ldr	r2, [sp, #20]
 8007b86:	f10b 0b01 	add.w	fp, fp, #1
 8007b8a:	e7b9      	b.n	8007b00 <_printf_float+0x30c>
 8007b8c:	ee18 3a10 	vmov	r3, s16
 8007b90:	4652      	mov	r2, sl
 8007b92:	4631      	mov	r1, r6
 8007b94:	4628      	mov	r0, r5
 8007b96:	47b8      	blx	r7
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d1be      	bne.n	8007b1a <_printf_float+0x326>
 8007b9c:	e689      	b.n	80078b2 <_printf_float+0xbe>
 8007b9e:	9a05      	ldr	r2, [sp, #20]
 8007ba0:	464b      	mov	r3, r9
 8007ba2:	4442      	add	r2, r8
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	47b8      	blx	r7
 8007baa:	3001      	adds	r0, #1
 8007bac:	d1c1      	bne.n	8007b32 <_printf_float+0x33e>
 8007bae:	e680      	b.n	80078b2 <_printf_float+0xbe>
 8007bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bb2:	2a01      	cmp	r2, #1
 8007bb4:	dc01      	bgt.n	8007bba <_printf_float+0x3c6>
 8007bb6:	07db      	lsls	r3, r3, #31
 8007bb8:	d53a      	bpl.n	8007c30 <_printf_float+0x43c>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	4642      	mov	r2, r8
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	47b8      	blx	r7
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	f43f ae74 	beq.w	80078b2 <_printf_float+0xbe>
 8007bca:	ee18 3a10 	vmov	r3, s16
 8007bce:	4652      	mov	r2, sl
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	47b8      	blx	r7
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	f43f ae6b 	beq.w	80078b2 <_printf_float+0xbe>
 8007bdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007be0:	2200      	movs	r2, #0
 8007be2:	2300      	movs	r3, #0
 8007be4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007be8:	f7f8 ff86 	bl	8000af8 <__aeabi_dcmpeq>
 8007bec:	b9d8      	cbnz	r0, 8007c26 <_printf_float+0x432>
 8007bee:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007bf2:	f108 0201 	add.w	r2, r8, #1
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	47b8      	blx	r7
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d10e      	bne.n	8007c1e <_printf_float+0x42a>
 8007c00:	e657      	b.n	80078b2 <_printf_float+0xbe>
 8007c02:	2301      	movs	r3, #1
 8007c04:	4652      	mov	r2, sl
 8007c06:	4631      	mov	r1, r6
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b8      	blx	r7
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	f43f ae50 	beq.w	80078b2 <_printf_float+0xbe>
 8007c12:	f108 0801 	add.w	r8, r8, #1
 8007c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	4543      	cmp	r3, r8
 8007c1c:	dcf1      	bgt.n	8007c02 <_printf_float+0x40e>
 8007c1e:	464b      	mov	r3, r9
 8007c20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c24:	e6da      	b.n	80079dc <_printf_float+0x1e8>
 8007c26:	f04f 0800 	mov.w	r8, #0
 8007c2a:	f104 0a1a 	add.w	sl, r4, #26
 8007c2e:	e7f2      	b.n	8007c16 <_printf_float+0x422>
 8007c30:	2301      	movs	r3, #1
 8007c32:	4642      	mov	r2, r8
 8007c34:	e7df      	b.n	8007bf6 <_printf_float+0x402>
 8007c36:	2301      	movs	r3, #1
 8007c38:	464a      	mov	r2, r9
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	47b8      	blx	r7
 8007c40:	3001      	adds	r0, #1
 8007c42:	f43f ae36 	beq.w	80078b2 <_printf_float+0xbe>
 8007c46:	f108 0801 	add.w	r8, r8, #1
 8007c4a:	68e3      	ldr	r3, [r4, #12]
 8007c4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c4e:	1a5b      	subs	r3, r3, r1
 8007c50:	4543      	cmp	r3, r8
 8007c52:	dcf0      	bgt.n	8007c36 <_printf_float+0x442>
 8007c54:	e6f8      	b.n	8007a48 <_printf_float+0x254>
 8007c56:	f04f 0800 	mov.w	r8, #0
 8007c5a:	f104 0919 	add.w	r9, r4, #25
 8007c5e:	e7f4      	b.n	8007c4a <_printf_float+0x456>

08007c60 <_printf_common>:
 8007c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c64:	4616      	mov	r6, r2
 8007c66:	4699      	mov	r9, r3
 8007c68:	688a      	ldr	r2, [r1, #8]
 8007c6a:	690b      	ldr	r3, [r1, #16]
 8007c6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c70:	4293      	cmp	r3, r2
 8007c72:	bfb8      	it	lt
 8007c74:	4613      	movlt	r3, r2
 8007c76:	6033      	str	r3, [r6, #0]
 8007c78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	460c      	mov	r4, r1
 8007c80:	b10a      	cbz	r2, 8007c86 <_printf_common+0x26>
 8007c82:	3301      	adds	r3, #1
 8007c84:	6033      	str	r3, [r6, #0]
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	0699      	lsls	r1, r3, #26
 8007c8a:	bf42      	ittt	mi
 8007c8c:	6833      	ldrmi	r3, [r6, #0]
 8007c8e:	3302      	addmi	r3, #2
 8007c90:	6033      	strmi	r3, [r6, #0]
 8007c92:	6825      	ldr	r5, [r4, #0]
 8007c94:	f015 0506 	ands.w	r5, r5, #6
 8007c98:	d106      	bne.n	8007ca8 <_printf_common+0x48>
 8007c9a:	f104 0a19 	add.w	sl, r4, #25
 8007c9e:	68e3      	ldr	r3, [r4, #12]
 8007ca0:	6832      	ldr	r2, [r6, #0]
 8007ca2:	1a9b      	subs	r3, r3, r2
 8007ca4:	42ab      	cmp	r3, r5
 8007ca6:	dc26      	bgt.n	8007cf6 <_printf_common+0x96>
 8007ca8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cac:	1e13      	subs	r3, r2, #0
 8007cae:	6822      	ldr	r2, [r4, #0]
 8007cb0:	bf18      	it	ne
 8007cb2:	2301      	movne	r3, #1
 8007cb4:	0692      	lsls	r2, r2, #26
 8007cb6:	d42b      	bmi.n	8007d10 <_printf_common+0xb0>
 8007cb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cbc:	4649      	mov	r1, r9
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	47c0      	blx	r8
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	d01e      	beq.n	8007d04 <_printf_common+0xa4>
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	6922      	ldr	r2, [r4, #16]
 8007cca:	f003 0306 	and.w	r3, r3, #6
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	bf02      	ittt	eq
 8007cd2:	68e5      	ldreq	r5, [r4, #12]
 8007cd4:	6833      	ldreq	r3, [r6, #0]
 8007cd6:	1aed      	subeq	r5, r5, r3
 8007cd8:	68a3      	ldr	r3, [r4, #8]
 8007cda:	bf0c      	ite	eq
 8007cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ce0:	2500      	movne	r5, #0
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	bfc4      	itt	gt
 8007ce6:	1a9b      	subgt	r3, r3, r2
 8007ce8:	18ed      	addgt	r5, r5, r3
 8007cea:	2600      	movs	r6, #0
 8007cec:	341a      	adds	r4, #26
 8007cee:	42b5      	cmp	r5, r6
 8007cf0:	d11a      	bne.n	8007d28 <_printf_common+0xc8>
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	e008      	b.n	8007d08 <_printf_common+0xa8>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	4652      	mov	r2, sl
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	4638      	mov	r0, r7
 8007cfe:	47c0      	blx	r8
 8007d00:	3001      	adds	r0, #1
 8007d02:	d103      	bne.n	8007d0c <_printf_common+0xac>
 8007d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d0c:	3501      	adds	r5, #1
 8007d0e:	e7c6      	b.n	8007c9e <_printf_common+0x3e>
 8007d10:	18e1      	adds	r1, r4, r3
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	2030      	movs	r0, #48	; 0x30
 8007d16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d1a:	4422      	add	r2, r4
 8007d1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d24:	3302      	adds	r3, #2
 8007d26:	e7c7      	b.n	8007cb8 <_printf_common+0x58>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	4622      	mov	r2, r4
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	4638      	mov	r0, r7
 8007d30:	47c0      	blx	r8
 8007d32:	3001      	adds	r0, #1
 8007d34:	d0e6      	beq.n	8007d04 <_printf_common+0xa4>
 8007d36:	3601      	adds	r6, #1
 8007d38:	e7d9      	b.n	8007cee <_printf_common+0x8e>
	...

08007d3c <_printf_i>:
 8007d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d40:	7e0f      	ldrb	r7, [r1, #24]
 8007d42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d44:	2f78      	cmp	r7, #120	; 0x78
 8007d46:	4691      	mov	r9, r2
 8007d48:	4680      	mov	r8, r0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	469a      	mov	sl, r3
 8007d4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d52:	d807      	bhi.n	8007d64 <_printf_i+0x28>
 8007d54:	2f62      	cmp	r7, #98	; 0x62
 8007d56:	d80a      	bhi.n	8007d6e <_printf_i+0x32>
 8007d58:	2f00      	cmp	r7, #0
 8007d5a:	f000 80d4 	beq.w	8007f06 <_printf_i+0x1ca>
 8007d5e:	2f58      	cmp	r7, #88	; 0x58
 8007d60:	f000 80c0 	beq.w	8007ee4 <_printf_i+0x1a8>
 8007d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d6c:	e03a      	b.n	8007de4 <_printf_i+0xa8>
 8007d6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d72:	2b15      	cmp	r3, #21
 8007d74:	d8f6      	bhi.n	8007d64 <_printf_i+0x28>
 8007d76:	a101      	add	r1, pc, #4	; (adr r1, 8007d7c <_printf_i+0x40>)
 8007d78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d7c:	08007dd5 	.word	0x08007dd5
 8007d80:	08007de9 	.word	0x08007de9
 8007d84:	08007d65 	.word	0x08007d65
 8007d88:	08007d65 	.word	0x08007d65
 8007d8c:	08007d65 	.word	0x08007d65
 8007d90:	08007d65 	.word	0x08007d65
 8007d94:	08007de9 	.word	0x08007de9
 8007d98:	08007d65 	.word	0x08007d65
 8007d9c:	08007d65 	.word	0x08007d65
 8007da0:	08007d65 	.word	0x08007d65
 8007da4:	08007d65 	.word	0x08007d65
 8007da8:	08007eed 	.word	0x08007eed
 8007dac:	08007e15 	.word	0x08007e15
 8007db0:	08007ea7 	.word	0x08007ea7
 8007db4:	08007d65 	.word	0x08007d65
 8007db8:	08007d65 	.word	0x08007d65
 8007dbc:	08007f0f 	.word	0x08007f0f
 8007dc0:	08007d65 	.word	0x08007d65
 8007dc4:	08007e15 	.word	0x08007e15
 8007dc8:	08007d65 	.word	0x08007d65
 8007dcc:	08007d65 	.word	0x08007d65
 8007dd0:	08007eaf 	.word	0x08007eaf
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	1d1a      	adds	r2, r3, #4
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	602a      	str	r2, [r5, #0]
 8007ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007de0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007de4:	2301      	movs	r3, #1
 8007de6:	e09f      	b.n	8007f28 <_printf_i+0x1ec>
 8007de8:	6820      	ldr	r0, [r4, #0]
 8007dea:	682b      	ldr	r3, [r5, #0]
 8007dec:	0607      	lsls	r7, r0, #24
 8007dee:	f103 0104 	add.w	r1, r3, #4
 8007df2:	6029      	str	r1, [r5, #0]
 8007df4:	d501      	bpl.n	8007dfa <_printf_i+0xbe>
 8007df6:	681e      	ldr	r6, [r3, #0]
 8007df8:	e003      	b.n	8007e02 <_printf_i+0xc6>
 8007dfa:	0646      	lsls	r6, r0, #25
 8007dfc:	d5fb      	bpl.n	8007df6 <_printf_i+0xba>
 8007dfe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e02:	2e00      	cmp	r6, #0
 8007e04:	da03      	bge.n	8007e0e <_printf_i+0xd2>
 8007e06:	232d      	movs	r3, #45	; 0x2d
 8007e08:	4276      	negs	r6, r6
 8007e0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e0e:	485a      	ldr	r0, [pc, #360]	; (8007f78 <_printf_i+0x23c>)
 8007e10:	230a      	movs	r3, #10
 8007e12:	e012      	b.n	8007e3a <_printf_i+0xfe>
 8007e14:	682b      	ldr	r3, [r5, #0]
 8007e16:	6820      	ldr	r0, [r4, #0]
 8007e18:	1d19      	adds	r1, r3, #4
 8007e1a:	6029      	str	r1, [r5, #0]
 8007e1c:	0605      	lsls	r5, r0, #24
 8007e1e:	d501      	bpl.n	8007e24 <_printf_i+0xe8>
 8007e20:	681e      	ldr	r6, [r3, #0]
 8007e22:	e002      	b.n	8007e2a <_printf_i+0xee>
 8007e24:	0641      	lsls	r1, r0, #25
 8007e26:	d5fb      	bpl.n	8007e20 <_printf_i+0xe4>
 8007e28:	881e      	ldrh	r6, [r3, #0]
 8007e2a:	4853      	ldr	r0, [pc, #332]	; (8007f78 <_printf_i+0x23c>)
 8007e2c:	2f6f      	cmp	r7, #111	; 0x6f
 8007e2e:	bf0c      	ite	eq
 8007e30:	2308      	moveq	r3, #8
 8007e32:	230a      	movne	r3, #10
 8007e34:	2100      	movs	r1, #0
 8007e36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e3a:	6865      	ldr	r5, [r4, #4]
 8007e3c:	60a5      	str	r5, [r4, #8]
 8007e3e:	2d00      	cmp	r5, #0
 8007e40:	bfa2      	ittt	ge
 8007e42:	6821      	ldrge	r1, [r4, #0]
 8007e44:	f021 0104 	bicge.w	r1, r1, #4
 8007e48:	6021      	strge	r1, [r4, #0]
 8007e4a:	b90e      	cbnz	r6, 8007e50 <_printf_i+0x114>
 8007e4c:	2d00      	cmp	r5, #0
 8007e4e:	d04b      	beq.n	8007ee8 <_printf_i+0x1ac>
 8007e50:	4615      	mov	r5, r2
 8007e52:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e56:	fb03 6711 	mls	r7, r3, r1, r6
 8007e5a:	5dc7      	ldrb	r7, [r0, r7]
 8007e5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e60:	4637      	mov	r7, r6
 8007e62:	42bb      	cmp	r3, r7
 8007e64:	460e      	mov	r6, r1
 8007e66:	d9f4      	bls.n	8007e52 <_printf_i+0x116>
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d10b      	bne.n	8007e84 <_printf_i+0x148>
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	07de      	lsls	r6, r3, #31
 8007e70:	d508      	bpl.n	8007e84 <_printf_i+0x148>
 8007e72:	6923      	ldr	r3, [r4, #16]
 8007e74:	6861      	ldr	r1, [r4, #4]
 8007e76:	4299      	cmp	r1, r3
 8007e78:	bfde      	ittt	le
 8007e7a:	2330      	movle	r3, #48	; 0x30
 8007e7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007e84:	1b52      	subs	r2, r2, r5
 8007e86:	6122      	str	r2, [r4, #16]
 8007e88:	f8cd a000 	str.w	sl, [sp]
 8007e8c:	464b      	mov	r3, r9
 8007e8e:	aa03      	add	r2, sp, #12
 8007e90:	4621      	mov	r1, r4
 8007e92:	4640      	mov	r0, r8
 8007e94:	f7ff fee4 	bl	8007c60 <_printf_common>
 8007e98:	3001      	adds	r0, #1
 8007e9a:	d14a      	bne.n	8007f32 <_printf_i+0x1f6>
 8007e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ea0:	b004      	add	sp, #16
 8007ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	f043 0320 	orr.w	r3, r3, #32
 8007eac:	6023      	str	r3, [r4, #0]
 8007eae:	4833      	ldr	r0, [pc, #204]	; (8007f7c <_printf_i+0x240>)
 8007eb0:	2778      	movs	r7, #120	; 0x78
 8007eb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	6829      	ldr	r1, [r5, #0]
 8007eba:	061f      	lsls	r7, r3, #24
 8007ebc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ec0:	d402      	bmi.n	8007ec8 <_printf_i+0x18c>
 8007ec2:	065f      	lsls	r7, r3, #25
 8007ec4:	bf48      	it	mi
 8007ec6:	b2b6      	uxthmi	r6, r6
 8007ec8:	07df      	lsls	r7, r3, #31
 8007eca:	bf48      	it	mi
 8007ecc:	f043 0320 	orrmi.w	r3, r3, #32
 8007ed0:	6029      	str	r1, [r5, #0]
 8007ed2:	bf48      	it	mi
 8007ed4:	6023      	strmi	r3, [r4, #0]
 8007ed6:	b91e      	cbnz	r6, 8007ee0 <_printf_i+0x1a4>
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	f023 0320 	bic.w	r3, r3, #32
 8007ede:	6023      	str	r3, [r4, #0]
 8007ee0:	2310      	movs	r3, #16
 8007ee2:	e7a7      	b.n	8007e34 <_printf_i+0xf8>
 8007ee4:	4824      	ldr	r0, [pc, #144]	; (8007f78 <_printf_i+0x23c>)
 8007ee6:	e7e4      	b.n	8007eb2 <_printf_i+0x176>
 8007ee8:	4615      	mov	r5, r2
 8007eea:	e7bd      	b.n	8007e68 <_printf_i+0x12c>
 8007eec:	682b      	ldr	r3, [r5, #0]
 8007eee:	6826      	ldr	r6, [r4, #0]
 8007ef0:	6961      	ldr	r1, [r4, #20]
 8007ef2:	1d18      	adds	r0, r3, #4
 8007ef4:	6028      	str	r0, [r5, #0]
 8007ef6:	0635      	lsls	r5, r6, #24
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	d501      	bpl.n	8007f00 <_printf_i+0x1c4>
 8007efc:	6019      	str	r1, [r3, #0]
 8007efe:	e002      	b.n	8007f06 <_printf_i+0x1ca>
 8007f00:	0670      	lsls	r0, r6, #25
 8007f02:	d5fb      	bpl.n	8007efc <_printf_i+0x1c0>
 8007f04:	8019      	strh	r1, [r3, #0]
 8007f06:	2300      	movs	r3, #0
 8007f08:	6123      	str	r3, [r4, #16]
 8007f0a:	4615      	mov	r5, r2
 8007f0c:	e7bc      	b.n	8007e88 <_printf_i+0x14c>
 8007f0e:	682b      	ldr	r3, [r5, #0]
 8007f10:	1d1a      	adds	r2, r3, #4
 8007f12:	602a      	str	r2, [r5, #0]
 8007f14:	681d      	ldr	r5, [r3, #0]
 8007f16:	6862      	ldr	r2, [r4, #4]
 8007f18:	2100      	movs	r1, #0
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f7f8 f970 	bl	8000200 <memchr>
 8007f20:	b108      	cbz	r0, 8007f26 <_printf_i+0x1ea>
 8007f22:	1b40      	subs	r0, r0, r5
 8007f24:	6060      	str	r0, [r4, #4]
 8007f26:	6863      	ldr	r3, [r4, #4]
 8007f28:	6123      	str	r3, [r4, #16]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f30:	e7aa      	b.n	8007e88 <_printf_i+0x14c>
 8007f32:	6923      	ldr	r3, [r4, #16]
 8007f34:	462a      	mov	r2, r5
 8007f36:	4649      	mov	r1, r9
 8007f38:	4640      	mov	r0, r8
 8007f3a:	47d0      	blx	sl
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	d0ad      	beq.n	8007e9c <_printf_i+0x160>
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	079b      	lsls	r3, r3, #30
 8007f44:	d413      	bmi.n	8007f6e <_printf_i+0x232>
 8007f46:	68e0      	ldr	r0, [r4, #12]
 8007f48:	9b03      	ldr	r3, [sp, #12]
 8007f4a:	4298      	cmp	r0, r3
 8007f4c:	bfb8      	it	lt
 8007f4e:	4618      	movlt	r0, r3
 8007f50:	e7a6      	b.n	8007ea0 <_printf_i+0x164>
 8007f52:	2301      	movs	r3, #1
 8007f54:	4632      	mov	r2, r6
 8007f56:	4649      	mov	r1, r9
 8007f58:	4640      	mov	r0, r8
 8007f5a:	47d0      	blx	sl
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d09d      	beq.n	8007e9c <_printf_i+0x160>
 8007f60:	3501      	adds	r5, #1
 8007f62:	68e3      	ldr	r3, [r4, #12]
 8007f64:	9903      	ldr	r1, [sp, #12]
 8007f66:	1a5b      	subs	r3, r3, r1
 8007f68:	42ab      	cmp	r3, r5
 8007f6a:	dcf2      	bgt.n	8007f52 <_printf_i+0x216>
 8007f6c:	e7eb      	b.n	8007f46 <_printf_i+0x20a>
 8007f6e:	2500      	movs	r5, #0
 8007f70:	f104 0619 	add.w	r6, r4, #25
 8007f74:	e7f5      	b.n	8007f62 <_printf_i+0x226>
 8007f76:	bf00      	nop
 8007f78:	0800a21e 	.word	0x0800a21e
 8007f7c:	0800a22f 	.word	0x0800a22f

08007f80 <std>:
 8007f80:	2300      	movs	r3, #0
 8007f82:	b510      	push	{r4, lr}
 8007f84:	4604      	mov	r4, r0
 8007f86:	e9c0 3300 	strd	r3, r3, [r0]
 8007f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f8e:	6083      	str	r3, [r0, #8]
 8007f90:	8181      	strh	r1, [r0, #12]
 8007f92:	6643      	str	r3, [r0, #100]	; 0x64
 8007f94:	81c2      	strh	r2, [r0, #14]
 8007f96:	6183      	str	r3, [r0, #24]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	2208      	movs	r2, #8
 8007f9c:	305c      	adds	r0, #92	; 0x5c
 8007f9e:	f000 f91f 	bl	80081e0 <memset>
 8007fa2:	4b0d      	ldr	r3, [pc, #52]	; (8007fd8 <std+0x58>)
 8007fa4:	6263      	str	r3, [r4, #36]	; 0x24
 8007fa6:	4b0d      	ldr	r3, [pc, #52]	; (8007fdc <std+0x5c>)
 8007fa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007faa:	4b0d      	ldr	r3, [pc, #52]	; (8007fe0 <std+0x60>)
 8007fac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fae:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <std+0x64>)
 8007fb0:	6323      	str	r3, [r4, #48]	; 0x30
 8007fb2:	4b0d      	ldr	r3, [pc, #52]	; (8007fe8 <std+0x68>)
 8007fb4:	6224      	str	r4, [r4, #32]
 8007fb6:	429c      	cmp	r4, r3
 8007fb8:	d006      	beq.n	8007fc8 <std+0x48>
 8007fba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007fbe:	4294      	cmp	r4, r2
 8007fc0:	d002      	beq.n	8007fc8 <std+0x48>
 8007fc2:	33d0      	adds	r3, #208	; 0xd0
 8007fc4:	429c      	cmp	r4, r3
 8007fc6:	d105      	bne.n	8007fd4 <std+0x54>
 8007fc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fd0:	f000 b93c 	b.w	800824c <__retarget_lock_init_recursive>
 8007fd4:	bd10      	pop	{r4, pc}
 8007fd6:	bf00      	nop
 8007fd8:	08009b91 	.word	0x08009b91
 8007fdc:	08009bb3 	.word	0x08009bb3
 8007fe0:	08009beb 	.word	0x08009beb
 8007fe4:	08009c0f 	.word	0x08009c0f
 8007fe8:	200005cc 	.word	0x200005cc

08007fec <stdio_exit_handler>:
 8007fec:	4a02      	ldr	r2, [pc, #8]	; (8007ff8 <stdio_exit_handler+0xc>)
 8007fee:	4903      	ldr	r1, [pc, #12]	; (8007ffc <stdio_exit_handler+0x10>)
 8007ff0:	4803      	ldr	r0, [pc, #12]	; (8008000 <stdio_exit_handler+0x14>)
 8007ff2:	f000 b869 	b.w	80080c8 <_fwalk_sglue>
 8007ff6:	bf00      	nop
 8007ff8:	20000010 	.word	0x20000010
 8007ffc:	08009431 	.word	0x08009431
 8008000:	2000001c 	.word	0x2000001c

08008004 <cleanup_stdio>:
 8008004:	6841      	ldr	r1, [r0, #4]
 8008006:	4b0c      	ldr	r3, [pc, #48]	; (8008038 <cleanup_stdio+0x34>)
 8008008:	4299      	cmp	r1, r3
 800800a:	b510      	push	{r4, lr}
 800800c:	4604      	mov	r4, r0
 800800e:	d001      	beq.n	8008014 <cleanup_stdio+0x10>
 8008010:	f001 fa0e 	bl	8009430 <_fflush_r>
 8008014:	68a1      	ldr	r1, [r4, #8]
 8008016:	4b09      	ldr	r3, [pc, #36]	; (800803c <cleanup_stdio+0x38>)
 8008018:	4299      	cmp	r1, r3
 800801a:	d002      	beq.n	8008022 <cleanup_stdio+0x1e>
 800801c:	4620      	mov	r0, r4
 800801e:	f001 fa07 	bl	8009430 <_fflush_r>
 8008022:	68e1      	ldr	r1, [r4, #12]
 8008024:	4b06      	ldr	r3, [pc, #24]	; (8008040 <cleanup_stdio+0x3c>)
 8008026:	4299      	cmp	r1, r3
 8008028:	d004      	beq.n	8008034 <cleanup_stdio+0x30>
 800802a:	4620      	mov	r0, r4
 800802c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008030:	f001 b9fe 	b.w	8009430 <_fflush_r>
 8008034:	bd10      	pop	{r4, pc}
 8008036:	bf00      	nop
 8008038:	200005cc 	.word	0x200005cc
 800803c:	20000634 	.word	0x20000634
 8008040:	2000069c 	.word	0x2000069c

08008044 <global_stdio_init.part.0>:
 8008044:	b510      	push	{r4, lr}
 8008046:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <global_stdio_init.part.0+0x30>)
 8008048:	4c0b      	ldr	r4, [pc, #44]	; (8008078 <global_stdio_init.part.0+0x34>)
 800804a:	4a0c      	ldr	r2, [pc, #48]	; (800807c <global_stdio_init.part.0+0x38>)
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	4620      	mov	r0, r4
 8008050:	2200      	movs	r2, #0
 8008052:	2104      	movs	r1, #4
 8008054:	f7ff ff94 	bl	8007f80 <std>
 8008058:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800805c:	2201      	movs	r2, #1
 800805e:	2109      	movs	r1, #9
 8008060:	f7ff ff8e 	bl	8007f80 <std>
 8008064:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008068:	2202      	movs	r2, #2
 800806a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800806e:	2112      	movs	r1, #18
 8008070:	f7ff bf86 	b.w	8007f80 <std>
 8008074:	20000704 	.word	0x20000704
 8008078:	200005cc 	.word	0x200005cc
 800807c:	08007fed 	.word	0x08007fed

08008080 <__sfp_lock_acquire>:
 8008080:	4801      	ldr	r0, [pc, #4]	; (8008088 <__sfp_lock_acquire+0x8>)
 8008082:	f000 b8e4 	b.w	800824e <__retarget_lock_acquire_recursive>
 8008086:	bf00      	nop
 8008088:	20000709 	.word	0x20000709

0800808c <__sfp_lock_release>:
 800808c:	4801      	ldr	r0, [pc, #4]	; (8008094 <__sfp_lock_release+0x8>)
 800808e:	f000 b8df 	b.w	8008250 <__retarget_lock_release_recursive>
 8008092:	bf00      	nop
 8008094:	20000709 	.word	0x20000709

08008098 <__sinit>:
 8008098:	b510      	push	{r4, lr}
 800809a:	4604      	mov	r4, r0
 800809c:	f7ff fff0 	bl	8008080 <__sfp_lock_acquire>
 80080a0:	6a23      	ldr	r3, [r4, #32]
 80080a2:	b11b      	cbz	r3, 80080ac <__sinit+0x14>
 80080a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080a8:	f7ff bff0 	b.w	800808c <__sfp_lock_release>
 80080ac:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <__sinit+0x28>)
 80080ae:	6223      	str	r3, [r4, #32]
 80080b0:	4b04      	ldr	r3, [pc, #16]	; (80080c4 <__sinit+0x2c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1f5      	bne.n	80080a4 <__sinit+0xc>
 80080b8:	f7ff ffc4 	bl	8008044 <global_stdio_init.part.0>
 80080bc:	e7f2      	b.n	80080a4 <__sinit+0xc>
 80080be:	bf00      	nop
 80080c0:	08008005 	.word	0x08008005
 80080c4:	20000704 	.word	0x20000704

080080c8 <_fwalk_sglue>:
 80080c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080cc:	4607      	mov	r7, r0
 80080ce:	4688      	mov	r8, r1
 80080d0:	4614      	mov	r4, r2
 80080d2:	2600      	movs	r6, #0
 80080d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080d8:	f1b9 0901 	subs.w	r9, r9, #1
 80080dc:	d505      	bpl.n	80080ea <_fwalk_sglue+0x22>
 80080de:	6824      	ldr	r4, [r4, #0]
 80080e0:	2c00      	cmp	r4, #0
 80080e2:	d1f7      	bne.n	80080d4 <_fwalk_sglue+0xc>
 80080e4:	4630      	mov	r0, r6
 80080e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ea:	89ab      	ldrh	r3, [r5, #12]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d907      	bls.n	8008100 <_fwalk_sglue+0x38>
 80080f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080f4:	3301      	adds	r3, #1
 80080f6:	d003      	beq.n	8008100 <_fwalk_sglue+0x38>
 80080f8:	4629      	mov	r1, r5
 80080fa:	4638      	mov	r0, r7
 80080fc:	47c0      	blx	r8
 80080fe:	4306      	orrs	r6, r0
 8008100:	3568      	adds	r5, #104	; 0x68
 8008102:	e7e9      	b.n	80080d8 <_fwalk_sglue+0x10>

08008104 <iprintf>:
 8008104:	b40f      	push	{r0, r1, r2, r3}
 8008106:	b507      	push	{r0, r1, r2, lr}
 8008108:	4906      	ldr	r1, [pc, #24]	; (8008124 <iprintf+0x20>)
 800810a:	ab04      	add	r3, sp, #16
 800810c:	6808      	ldr	r0, [r1, #0]
 800810e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008112:	6881      	ldr	r1, [r0, #8]
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	f000 ff43 	bl	8008fa0 <_vfiprintf_r>
 800811a:	b003      	add	sp, #12
 800811c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008120:	b004      	add	sp, #16
 8008122:	4770      	bx	lr
 8008124:	20000068 	.word	0x20000068

08008128 <_puts_r>:
 8008128:	6a03      	ldr	r3, [r0, #32]
 800812a:	b570      	push	{r4, r5, r6, lr}
 800812c:	6884      	ldr	r4, [r0, #8]
 800812e:	4605      	mov	r5, r0
 8008130:	460e      	mov	r6, r1
 8008132:	b90b      	cbnz	r3, 8008138 <_puts_r+0x10>
 8008134:	f7ff ffb0 	bl	8008098 <__sinit>
 8008138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800813a:	07db      	lsls	r3, r3, #31
 800813c:	d405      	bmi.n	800814a <_puts_r+0x22>
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	0598      	lsls	r0, r3, #22
 8008142:	d402      	bmi.n	800814a <_puts_r+0x22>
 8008144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008146:	f000 f882 	bl	800824e <__retarget_lock_acquire_recursive>
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	0719      	lsls	r1, r3, #28
 800814e:	d513      	bpl.n	8008178 <_puts_r+0x50>
 8008150:	6923      	ldr	r3, [r4, #16]
 8008152:	b18b      	cbz	r3, 8008178 <_puts_r+0x50>
 8008154:	3e01      	subs	r6, #1
 8008156:	68a3      	ldr	r3, [r4, #8]
 8008158:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800815c:	3b01      	subs	r3, #1
 800815e:	60a3      	str	r3, [r4, #8]
 8008160:	b9e9      	cbnz	r1, 800819e <_puts_r+0x76>
 8008162:	2b00      	cmp	r3, #0
 8008164:	da2e      	bge.n	80081c4 <_puts_r+0x9c>
 8008166:	4622      	mov	r2, r4
 8008168:	210a      	movs	r1, #10
 800816a:	4628      	mov	r0, r5
 800816c:	f001 fd53 	bl	8009c16 <__swbuf_r>
 8008170:	3001      	adds	r0, #1
 8008172:	d007      	beq.n	8008184 <_puts_r+0x5c>
 8008174:	250a      	movs	r5, #10
 8008176:	e007      	b.n	8008188 <_puts_r+0x60>
 8008178:	4621      	mov	r1, r4
 800817a:	4628      	mov	r0, r5
 800817c:	f001 fd88 	bl	8009c90 <__swsetup_r>
 8008180:	2800      	cmp	r0, #0
 8008182:	d0e7      	beq.n	8008154 <_puts_r+0x2c>
 8008184:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800818a:	07da      	lsls	r2, r3, #31
 800818c:	d405      	bmi.n	800819a <_puts_r+0x72>
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	059b      	lsls	r3, r3, #22
 8008192:	d402      	bmi.n	800819a <_puts_r+0x72>
 8008194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008196:	f000 f85b 	bl	8008250 <__retarget_lock_release_recursive>
 800819a:	4628      	mov	r0, r5
 800819c:	bd70      	pop	{r4, r5, r6, pc}
 800819e:	2b00      	cmp	r3, #0
 80081a0:	da04      	bge.n	80081ac <_puts_r+0x84>
 80081a2:	69a2      	ldr	r2, [r4, #24]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	dc06      	bgt.n	80081b6 <_puts_r+0x8e>
 80081a8:	290a      	cmp	r1, #10
 80081aa:	d004      	beq.n	80081b6 <_puts_r+0x8e>
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	6022      	str	r2, [r4, #0]
 80081b2:	7019      	strb	r1, [r3, #0]
 80081b4:	e7cf      	b.n	8008156 <_puts_r+0x2e>
 80081b6:	4622      	mov	r2, r4
 80081b8:	4628      	mov	r0, r5
 80081ba:	f001 fd2c 	bl	8009c16 <__swbuf_r>
 80081be:	3001      	adds	r0, #1
 80081c0:	d1c9      	bne.n	8008156 <_puts_r+0x2e>
 80081c2:	e7df      	b.n	8008184 <_puts_r+0x5c>
 80081c4:	6823      	ldr	r3, [r4, #0]
 80081c6:	250a      	movs	r5, #10
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	6022      	str	r2, [r4, #0]
 80081cc:	701d      	strb	r5, [r3, #0]
 80081ce:	e7db      	b.n	8008188 <_puts_r+0x60>

080081d0 <puts>:
 80081d0:	4b02      	ldr	r3, [pc, #8]	; (80081dc <puts+0xc>)
 80081d2:	4601      	mov	r1, r0
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	f7ff bfa7 	b.w	8008128 <_puts_r>
 80081da:	bf00      	nop
 80081dc:	20000068 	.word	0x20000068

080081e0 <memset>:
 80081e0:	4402      	add	r2, r0
 80081e2:	4603      	mov	r3, r0
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d100      	bne.n	80081ea <memset+0xa>
 80081e8:	4770      	bx	lr
 80081ea:	f803 1b01 	strb.w	r1, [r3], #1
 80081ee:	e7f9      	b.n	80081e4 <memset+0x4>

080081f0 <_localeconv_r>:
 80081f0:	4800      	ldr	r0, [pc, #0]	; (80081f4 <_localeconv_r+0x4>)
 80081f2:	4770      	bx	lr
 80081f4:	2000015c 	.word	0x2000015c

080081f8 <__errno>:
 80081f8:	4b01      	ldr	r3, [pc, #4]	; (8008200 <__errno+0x8>)
 80081fa:	6818      	ldr	r0, [r3, #0]
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	20000068 	.word	0x20000068

08008204 <__libc_init_array>:
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	4d0d      	ldr	r5, [pc, #52]	; (800823c <__libc_init_array+0x38>)
 8008208:	4c0d      	ldr	r4, [pc, #52]	; (8008240 <__libc_init_array+0x3c>)
 800820a:	1b64      	subs	r4, r4, r5
 800820c:	10a4      	asrs	r4, r4, #2
 800820e:	2600      	movs	r6, #0
 8008210:	42a6      	cmp	r6, r4
 8008212:	d109      	bne.n	8008228 <__libc_init_array+0x24>
 8008214:	4d0b      	ldr	r5, [pc, #44]	; (8008244 <__libc_init_array+0x40>)
 8008216:	4c0c      	ldr	r4, [pc, #48]	; (8008248 <__libc_init_array+0x44>)
 8008218:	f001 ff76 	bl	800a108 <_init>
 800821c:	1b64      	subs	r4, r4, r5
 800821e:	10a4      	asrs	r4, r4, #2
 8008220:	2600      	movs	r6, #0
 8008222:	42a6      	cmp	r6, r4
 8008224:	d105      	bne.n	8008232 <__libc_init_array+0x2e>
 8008226:	bd70      	pop	{r4, r5, r6, pc}
 8008228:	f855 3b04 	ldr.w	r3, [r5], #4
 800822c:	4798      	blx	r3
 800822e:	3601      	adds	r6, #1
 8008230:	e7ee      	b.n	8008210 <__libc_init_array+0xc>
 8008232:	f855 3b04 	ldr.w	r3, [r5], #4
 8008236:	4798      	blx	r3
 8008238:	3601      	adds	r6, #1
 800823a:	e7f2      	b.n	8008222 <__libc_init_array+0x1e>
 800823c:	0800a584 	.word	0x0800a584
 8008240:	0800a584 	.word	0x0800a584
 8008244:	0800a584 	.word	0x0800a584
 8008248:	0800a588 	.word	0x0800a588

0800824c <__retarget_lock_init_recursive>:
 800824c:	4770      	bx	lr

0800824e <__retarget_lock_acquire_recursive>:
 800824e:	4770      	bx	lr

08008250 <__retarget_lock_release_recursive>:
 8008250:	4770      	bx	lr

08008252 <quorem>:
 8008252:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008256:	6903      	ldr	r3, [r0, #16]
 8008258:	690c      	ldr	r4, [r1, #16]
 800825a:	42a3      	cmp	r3, r4
 800825c:	4607      	mov	r7, r0
 800825e:	db7e      	blt.n	800835e <quorem+0x10c>
 8008260:	3c01      	subs	r4, #1
 8008262:	f101 0814 	add.w	r8, r1, #20
 8008266:	f100 0514 	add.w	r5, r0, #20
 800826a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800826e:	9301      	str	r3, [sp, #4]
 8008270:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008274:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008278:	3301      	adds	r3, #1
 800827a:	429a      	cmp	r2, r3
 800827c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008280:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008284:	fbb2 f6f3 	udiv	r6, r2, r3
 8008288:	d331      	bcc.n	80082ee <quorem+0x9c>
 800828a:	f04f 0e00 	mov.w	lr, #0
 800828e:	4640      	mov	r0, r8
 8008290:	46ac      	mov	ip, r5
 8008292:	46f2      	mov	sl, lr
 8008294:	f850 2b04 	ldr.w	r2, [r0], #4
 8008298:	b293      	uxth	r3, r2
 800829a:	fb06 e303 	mla	r3, r6, r3, lr
 800829e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082a2:	0c1a      	lsrs	r2, r3, #16
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	ebaa 0303 	sub.w	r3, sl, r3
 80082aa:	f8dc a000 	ldr.w	sl, [ip]
 80082ae:	fa13 f38a 	uxtah	r3, r3, sl
 80082b2:	fb06 220e 	mla	r2, r6, lr, r2
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	9b00      	ldr	r3, [sp, #0]
 80082ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082be:	b292      	uxth	r2, r2
 80082c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80082cc:	4581      	cmp	r9, r0
 80082ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082d2:	f84c 3b04 	str.w	r3, [ip], #4
 80082d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082da:	d2db      	bcs.n	8008294 <quorem+0x42>
 80082dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80082e0:	b92b      	cbnz	r3, 80082ee <quorem+0x9c>
 80082e2:	9b01      	ldr	r3, [sp, #4]
 80082e4:	3b04      	subs	r3, #4
 80082e6:	429d      	cmp	r5, r3
 80082e8:	461a      	mov	r2, r3
 80082ea:	d32c      	bcc.n	8008346 <quorem+0xf4>
 80082ec:	613c      	str	r4, [r7, #16]
 80082ee:	4638      	mov	r0, r7
 80082f0:	f001 fb4e 	bl	8009990 <__mcmp>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	db22      	blt.n	800833e <quorem+0xec>
 80082f8:	3601      	adds	r6, #1
 80082fa:	4629      	mov	r1, r5
 80082fc:	2000      	movs	r0, #0
 80082fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8008302:	f8d1 c000 	ldr.w	ip, [r1]
 8008306:	b293      	uxth	r3, r2
 8008308:	1ac3      	subs	r3, r0, r3
 800830a:	0c12      	lsrs	r2, r2, #16
 800830c:	fa13 f38c 	uxtah	r3, r3, ip
 8008310:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008314:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008318:	b29b      	uxth	r3, r3
 800831a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800831e:	45c1      	cmp	r9, r8
 8008320:	f841 3b04 	str.w	r3, [r1], #4
 8008324:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008328:	d2e9      	bcs.n	80082fe <quorem+0xac>
 800832a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800832e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008332:	b922      	cbnz	r2, 800833e <quorem+0xec>
 8008334:	3b04      	subs	r3, #4
 8008336:	429d      	cmp	r5, r3
 8008338:	461a      	mov	r2, r3
 800833a:	d30a      	bcc.n	8008352 <quorem+0x100>
 800833c:	613c      	str	r4, [r7, #16]
 800833e:	4630      	mov	r0, r6
 8008340:	b003      	add	sp, #12
 8008342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008346:	6812      	ldr	r2, [r2, #0]
 8008348:	3b04      	subs	r3, #4
 800834a:	2a00      	cmp	r2, #0
 800834c:	d1ce      	bne.n	80082ec <quorem+0x9a>
 800834e:	3c01      	subs	r4, #1
 8008350:	e7c9      	b.n	80082e6 <quorem+0x94>
 8008352:	6812      	ldr	r2, [r2, #0]
 8008354:	3b04      	subs	r3, #4
 8008356:	2a00      	cmp	r2, #0
 8008358:	d1f0      	bne.n	800833c <quorem+0xea>
 800835a:	3c01      	subs	r4, #1
 800835c:	e7eb      	b.n	8008336 <quorem+0xe4>
 800835e:	2000      	movs	r0, #0
 8008360:	e7ee      	b.n	8008340 <quorem+0xee>
 8008362:	0000      	movs	r0, r0
 8008364:	0000      	movs	r0, r0
	...

08008368 <_dtoa_r>:
 8008368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836c:	ed2d 8b04 	vpush	{d8-d9}
 8008370:	69c5      	ldr	r5, [r0, #28]
 8008372:	b093      	sub	sp, #76	; 0x4c
 8008374:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008378:	ec57 6b10 	vmov	r6, r7, d0
 800837c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008380:	9107      	str	r1, [sp, #28]
 8008382:	4604      	mov	r4, r0
 8008384:	920a      	str	r2, [sp, #40]	; 0x28
 8008386:	930d      	str	r3, [sp, #52]	; 0x34
 8008388:	b975      	cbnz	r5, 80083a8 <_dtoa_r+0x40>
 800838a:	2010      	movs	r0, #16
 800838c:	f000 ff22 	bl	80091d4 <malloc>
 8008390:	4602      	mov	r2, r0
 8008392:	61e0      	str	r0, [r4, #28]
 8008394:	b920      	cbnz	r0, 80083a0 <_dtoa_r+0x38>
 8008396:	4bae      	ldr	r3, [pc, #696]	; (8008650 <_dtoa_r+0x2e8>)
 8008398:	21ef      	movs	r1, #239	; 0xef
 800839a:	48ae      	ldr	r0, [pc, #696]	; (8008654 <_dtoa_r+0x2ec>)
 800839c:	f001 fdb8 	bl	8009f10 <__assert_func>
 80083a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083a4:	6005      	str	r5, [r0, #0]
 80083a6:	60c5      	str	r5, [r0, #12]
 80083a8:	69e3      	ldr	r3, [r4, #28]
 80083aa:	6819      	ldr	r1, [r3, #0]
 80083ac:	b151      	cbz	r1, 80083c4 <_dtoa_r+0x5c>
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	604a      	str	r2, [r1, #4]
 80083b2:	2301      	movs	r3, #1
 80083b4:	4093      	lsls	r3, r2
 80083b6:	608b      	str	r3, [r1, #8]
 80083b8:	4620      	mov	r0, r4
 80083ba:	f001 f8ad 	bl	8009518 <_Bfree>
 80083be:	69e3      	ldr	r3, [r4, #28]
 80083c0:	2200      	movs	r2, #0
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	1e3b      	subs	r3, r7, #0
 80083c6:	bfbb      	ittet	lt
 80083c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083cc:	9303      	strlt	r3, [sp, #12]
 80083ce:	2300      	movge	r3, #0
 80083d0:	2201      	movlt	r2, #1
 80083d2:	bfac      	ite	ge
 80083d4:	f8c8 3000 	strge.w	r3, [r8]
 80083d8:	f8c8 2000 	strlt.w	r2, [r8]
 80083dc:	4b9e      	ldr	r3, [pc, #632]	; (8008658 <_dtoa_r+0x2f0>)
 80083de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80083e2:	ea33 0308 	bics.w	r3, r3, r8
 80083e6:	d11b      	bne.n	8008420 <_dtoa_r+0xb8>
 80083e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80083f4:	4333      	orrs	r3, r6
 80083f6:	f000 8593 	beq.w	8008f20 <_dtoa_r+0xbb8>
 80083fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083fc:	b963      	cbnz	r3, 8008418 <_dtoa_r+0xb0>
 80083fe:	4b97      	ldr	r3, [pc, #604]	; (800865c <_dtoa_r+0x2f4>)
 8008400:	e027      	b.n	8008452 <_dtoa_r+0xea>
 8008402:	4b97      	ldr	r3, [pc, #604]	; (8008660 <_dtoa_r+0x2f8>)
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	3308      	adds	r3, #8
 8008408:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	9800      	ldr	r0, [sp, #0]
 800840e:	b013      	add	sp, #76	; 0x4c
 8008410:	ecbd 8b04 	vpop	{d8-d9}
 8008414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008418:	4b90      	ldr	r3, [pc, #576]	; (800865c <_dtoa_r+0x2f4>)
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	3303      	adds	r3, #3
 800841e:	e7f3      	b.n	8008408 <_dtoa_r+0xa0>
 8008420:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008424:	2200      	movs	r2, #0
 8008426:	ec51 0b17 	vmov	r0, r1, d7
 800842a:	eeb0 8a47 	vmov.f32	s16, s14
 800842e:	eef0 8a67 	vmov.f32	s17, s15
 8008432:	2300      	movs	r3, #0
 8008434:	f7f8 fb60 	bl	8000af8 <__aeabi_dcmpeq>
 8008438:	4681      	mov	r9, r0
 800843a:	b160      	cbz	r0, 8008456 <_dtoa_r+0xee>
 800843c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800843e:	2301      	movs	r3, #1
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 8568 	beq.w	8008f1a <_dtoa_r+0xbb2>
 800844a:	4b86      	ldr	r3, [pc, #536]	; (8008664 <_dtoa_r+0x2fc>)
 800844c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	3b01      	subs	r3, #1
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	e7da      	b.n	800840c <_dtoa_r+0xa4>
 8008456:	aa10      	add	r2, sp, #64	; 0x40
 8008458:	a911      	add	r1, sp, #68	; 0x44
 800845a:	4620      	mov	r0, r4
 800845c:	eeb0 0a48 	vmov.f32	s0, s16
 8008460:	eef0 0a68 	vmov.f32	s1, s17
 8008464:	f001 fb3a 	bl	8009adc <__d2b>
 8008468:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800846c:	4682      	mov	sl, r0
 800846e:	2d00      	cmp	r5, #0
 8008470:	d07f      	beq.n	8008572 <_dtoa_r+0x20a>
 8008472:	ee18 3a90 	vmov	r3, s17
 8008476:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800847a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800847e:	ec51 0b18 	vmov	r0, r1, d8
 8008482:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800848a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800848e:	4619      	mov	r1, r3
 8008490:	2200      	movs	r2, #0
 8008492:	4b75      	ldr	r3, [pc, #468]	; (8008668 <_dtoa_r+0x300>)
 8008494:	f7f7 ff10 	bl	80002b8 <__aeabi_dsub>
 8008498:	a367      	add	r3, pc, #412	; (adr r3, 8008638 <_dtoa_r+0x2d0>)
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	f7f8 f8c3 	bl	8000628 <__aeabi_dmul>
 80084a2:	a367      	add	r3, pc, #412	; (adr r3, 8008640 <_dtoa_r+0x2d8>)
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	f7f7 ff08 	bl	80002bc <__adddf3>
 80084ac:	4606      	mov	r6, r0
 80084ae:	4628      	mov	r0, r5
 80084b0:	460f      	mov	r7, r1
 80084b2:	f7f8 f84f 	bl	8000554 <__aeabi_i2d>
 80084b6:	a364      	add	r3, pc, #400	; (adr r3, 8008648 <_dtoa_r+0x2e0>)
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	f7f8 f8b4 	bl	8000628 <__aeabi_dmul>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4630      	mov	r0, r6
 80084c6:	4639      	mov	r1, r7
 80084c8:	f7f7 fef8 	bl	80002bc <__adddf3>
 80084cc:	4606      	mov	r6, r0
 80084ce:	460f      	mov	r7, r1
 80084d0:	f7f8 fb5a 	bl	8000b88 <__aeabi_d2iz>
 80084d4:	2200      	movs	r2, #0
 80084d6:	4683      	mov	fp, r0
 80084d8:	2300      	movs	r3, #0
 80084da:	4630      	mov	r0, r6
 80084dc:	4639      	mov	r1, r7
 80084de:	f7f8 fb15 	bl	8000b0c <__aeabi_dcmplt>
 80084e2:	b148      	cbz	r0, 80084f8 <_dtoa_r+0x190>
 80084e4:	4658      	mov	r0, fp
 80084e6:	f7f8 f835 	bl	8000554 <__aeabi_i2d>
 80084ea:	4632      	mov	r2, r6
 80084ec:	463b      	mov	r3, r7
 80084ee:	f7f8 fb03 	bl	8000af8 <__aeabi_dcmpeq>
 80084f2:	b908      	cbnz	r0, 80084f8 <_dtoa_r+0x190>
 80084f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80084f8:	f1bb 0f16 	cmp.w	fp, #22
 80084fc:	d857      	bhi.n	80085ae <_dtoa_r+0x246>
 80084fe:	4b5b      	ldr	r3, [pc, #364]	; (800866c <_dtoa_r+0x304>)
 8008500:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008508:	ec51 0b18 	vmov	r0, r1, d8
 800850c:	f7f8 fafe 	bl	8000b0c <__aeabi_dcmplt>
 8008510:	2800      	cmp	r0, #0
 8008512:	d04e      	beq.n	80085b2 <_dtoa_r+0x24a>
 8008514:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008518:	2300      	movs	r3, #0
 800851a:	930c      	str	r3, [sp, #48]	; 0x30
 800851c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800851e:	1b5b      	subs	r3, r3, r5
 8008520:	1e5a      	subs	r2, r3, #1
 8008522:	bf45      	ittet	mi
 8008524:	f1c3 0301 	rsbmi	r3, r3, #1
 8008528:	9305      	strmi	r3, [sp, #20]
 800852a:	2300      	movpl	r3, #0
 800852c:	2300      	movmi	r3, #0
 800852e:	9206      	str	r2, [sp, #24]
 8008530:	bf54      	ite	pl
 8008532:	9305      	strpl	r3, [sp, #20]
 8008534:	9306      	strmi	r3, [sp, #24]
 8008536:	f1bb 0f00 	cmp.w	fp, #0
 800853a:	db3c      	blt.n	80085b6 <_dtoa_r+0x24e>
 800853c:	9b06      	ldr	r3, [sp, #24]
 800853e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008542:	445b      	add	r3, fp
 8008544:	9306      	str	r3, [sp, #24]
 8008546:	2300      	movs	r3, #0
 8008548:	9308      	str	r3, [sp, #32]
 800854a:	9b07      	ldr	r3, [sp, #28]
 800854c:	2b09      	cmp	r3, #9
 800854e:	d868      	bhi.n	8008622 <_dtoa_r+0x2ba>
 8008550:	2b05      	cmp	r3, #5
 8008552:	bfc4      	itt	gt
 8008554:	3b04      	subgt	r3, #4
 8008556:	9307      	strgt	r3, [sp, #28]
 8008558:	9b07      	ldr	r3, [sp, #28]
 800855a:	f1a3 0302 	sub.w	r3, r3, #2
 800855e:	bfcc      	ite	gt
 8008560:	2500      	movgt	r5, #0
 8008562:	2501      	movle	r5, #1
 8008564:	2b03      	cmp	r3, #3
 8008566:	f200 8085 	bhi.w	8008674 <_dtoa_r+0x30c>
 800856a:	e8df f003 	tbb	[pc, r3]
 800856e:	3b2e      	.short	0x3b2e
 8008570:	5839      	.short	0x5839
 8008572:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008576:	441d      	add	r5, r3
 8008578:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800857c:	2b20      	cmp	r3, #32
 800857e:	bfc1      	itttt	gt
 8008580:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008584:	fa08 f803 	lslgt.w	r8, r8, r3
 8008588:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800858c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008590:	bfd6      	itet	le
 8008592:	f1c3 0320 	rsble	r3, r3, #32
 8008596:	ea48 0003 	orrgt.w	r0, r8, r3
 800859a:	fa06 f003 	lslle.w	r0, r6, r3
 800859e:	f7f7 ffc9 	bl	8000534 <__aeabi_ui2d>
 80085a2:	2201      	movs	r2, #1
 80085a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80085a8:	3d01      	subs	r5, #1
 80085aa:	920e      	str	r2, [sp, #56]	; 0x38
 80085ac:	e76f      	b.n	800848e <_dtoa_r+0x126>
 80085ae:	2301      	movs	r3, #1
 80085b0:	e7b3      	b.n	800851a <_dtoa_r+0x1b2>
 80085b2:	900c      	str	r0, [sp, #48]	; 0x30
 80085b4:	e7b2      	b.n	800851c <_dtoa_r+0x1b4>
 80085b6:	9b05      	ldr	r3, [sp, #20]
 80085b8:	eba3 030b 	sub.w	r3, r3, fp
 80085bc:	9305      	str	r3, [sp, #20]
 80085be:	f1cb 0300 	rsb	r3, fp, #0
 80085c2:	9308      	str	r3, [sp, #32]
 80085c4:	2300      	movs	r3, #0
 80085c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80085c8:	e7bf      	b.n	800854a <_dtoa_r+0x1e2>
 80085ca:	2300      	movs	r3, #0
 80085cc:	9309      	str	r3, [sp, #36]	; 0x24
 80085ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	dc52      	bgt.n	800867a <_dtoa_r+0x312>
 80085d4:	2301      	movs	r3, #1
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	9304      	str	r3, [sp, #16]
 80085da:	461a      	mov	r2, r3
 80085dc:	920a      	str	r2, [sp, #40]	; 0x28
 80085de:	e00b      	b.n	80085f8 <_dtoa_r+0x290>
 80085e0:	2301      	movs	r3, #1
 80085e2:	e7f3      	b.n	80085cc <_dtoa_r+0x264>
 80085e4:	2300      	movs	r3, #0
 80085e6:	9309      	str	r3, [sp, #36]	; 0x24
 80085e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ea:	445b      	add	r3, fp
 80085ec:	9301      	str	r3, [sp, #4]
 80085ee:	3301      	adds	r3, #1
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	9304      	str	r3, [sp, #16]
 80085f4:	bfb8      	it	lt
 80085f6:	2301      	movlt	r3, #1
 80085f8:	69e0      	ldr	r0, [r4, #28]
 80085fa:	2100      	movs	r1, #0
 80085fc:	2204      	movs	r2, #4
 80085fe:	f102 0614 	add.w	r6, r2, #20
 8008602:	429e      	cmp	r6, r3
 8008604:	d93d      	bls.n	8008682 <_dtoa_r+0x31a>
 8008606:	6041      	str	r1, [r0, #4]
 8008608:	4620      	mov	r0, r4
 800860a:	f000 ff45 	bl	8009498 <_Balloc>
 800860e:	9000      	str	r0, [sp, #0]
 8008610:	2800      	cmp	r0, #0
 8008612:	d139      	bne.n	8008688 <_dtoa_r+0x320>
 8008614:	4b16      	ldr	r3, [pc, #88]	; (8008670 <_dtoa_r+0x308>)
 8008616:	4602      	mov	r2, r0
 8008618:	f240 11af 	movw	r1, #431	; 0x1af
 800861c:	e6bd      	b.n	800839a <_dtoa_r+0x32>
 800861e:	2301      	movs	r3, #1
 8008620:	e7e1      	b.n	80085e6 <_dtoa_r+0x27e>
 8008622:	2501      	movs	r5, #1
 8008624:	2300      	movs	r3, #0
 8008626:	9307      	str	r3, [sp, #28]
 8008628:	9509      	str	r5, [sp, #36]	; 0x24
 800862a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800862e:	9301      	str	r3, [sp, #4]
 8008630:	9304      	str	r3, [sp, #16]
 8008632:	2200      	movs	r2, #0
 8008634:	2312      	movs	r3, #18
 8008636:	e7d1      	b.n	80085dc <_dtoa_r+0x274>
 8008638:	636f4361 	.word	0x636f4361
 800863c:	3fd287a7 	.word	0x3fd287a7
 8008640:	8b60c8b3 	.word	0x8b60c8b3
 8008644:	3fc68a28 	.word	0x3fc68a28
 8008648:	509f79fb 	.word	0x509f79fb
 800864c:	3fd34413 	.word	0x3fd34413
 8008650:	0800a24d 	.word	0x0800a24d
 8008654:	0800a264 	.word	0x0800a264
 8008658:	7ff00000 	.word	0x7ff00000
 800865c:	0800a249 	.word	0x0800a249
 8008660:	0800a240 	.word	0x0800a240
 8008664:	0800a21d 	.word	0x0800a21d
 8008668:	3ff80000 	.word	0x3ff80000
 800866c:	0800a360 	.word	0x0800a360
 8008670:	0800a2bc 	.word	0x0800a2bc
 8008674:	2301      	movs	r3, #1
 8008676:	9309      	str	r3, [sp, #36]	; 0x24
 8008678:	e7d7      	b.n	800862a <_dtoa_r+0x2c2>
 800867a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	9304      	str	r3, [sp, #16]
 8008680:	e7ba      	b.n	80085f8 <_dtoa_r+0x290>
 8008682:	3101      	adds	r1, #1
 8008684:	0052      	lsls	r2, r2, #1
 8008686:	e7ba      	b.n	80085fe <_dtoa_r+0x296>
 8008688:	69e3      	ldr	r3, [r4, #28]
 800868a:	9a00      	ldr	r2, [sp, #0]
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	9b04      	ldr	r3, [sp, #16]
 8008690:	2b0e      	cmp	r3, #14
 8008692:	f200 80a8 	bhi.w	80087e6 <_dtoa_r+0x47e>
 8008696:	2d00      	cmp	r5, #0
 8008698:	f000 80a5 	beq.w	80087e6 <_dtoa_r+0x47e>
 800869c:	f1bb 0f00 	cmp.w	fp, #0
 80086a0:	dd38      	ble.n	8008714 <_dtoa_r+0x3ac>
 80086a2:	4bc0      	ldr	r3, [pc, #768]	; (80089a4 <_dtoa_r+0x63c>)
 80086a4:	f00b 020f 	and.w	r2, fp, #15
 80086a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80086b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80086b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80086b8:	d019      	beq.n	80086ee <_dtoa_r+0x386>
 80086ba:	4bbb      	ldr	r3, [pc, #748]	; (80089a8 <_dtoa_r+0x640>)
 80086bc:	ec51 0b18 	vmov	r0, r1, d8
 80086c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086c4:	f7f8 f8da 	bl	800087c <__aeabi_ddiv>
 80086c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086cc:	f008 080f 	and.w	r8, r8, #15
 80086d0:	2503      	movs	r5, #3
 80086d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80089a8 <_dtoa_r+0x640>
 80086d6:	f1b8 0f00 	cmp.w	r8, #0
 80086da:	d10a      	bne.n	80086f2 <_dtoa_r+0x38a>
 80086dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086e0:	4632      	mov	r2, r6
 80086e2:	463b      	mov	r3, r7
 80086e4:	f7f8 f8ca 	bl	800087c <__aeabi_ddiv>
 80086e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086ec:	e02b      	b.n	8008746 <_dtoa_r+0x3de>
 80086ee:	2502      	movs	r5, #2
 80086f0:	e7ef      	b.n	80086d2 <_dtoa_r+0x36a>
 80086f2:	f018 0f01 	tst.w	r8, #1
 80086f6:	d008      	beq.n	800870a <_dtoa_r+0x3a2>
 80086f8:	4630      	mov	r0, r6
 80086fa:	4639      	mov	r1, r7
 80086fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008700:	f7f7 ff92 	bl	8000628 <__aeabi_dmul>
 8008704:	3501      	adds	r5, #1
 8008706:	4606      	mov	r6, r0
 8008708:	460f      	mov	r7, r1
 800870a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800870e:	f109 0908 	add.w	r9, r9, #8
 8008712:	e7e0      	b.n	80086d6 <_dtoa_r+0x36e>
 8008714:	f000 809f 	beq.w	8008856 <_dtoa_r+0x4ee>
 8008718:	f1cb 0600 	rsb	r6, fp, #0
 800871c:	4ba1      	ldr	r3, [pc, #644]	; (80089a4 <_dtoa_r+0x63c>)
 800871e:	4fa2      	ldr	r7, [pc, #648]	; (80089a8 <_dtoa_r+0x640>)
 8008720:	f006 020f 	and.w	r2, r6, #15
 8008724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872c:	ec51 0b18 	vmov	r0, r1, d8
 8008730:	f7f7 ff7a 	bl	8000628 <__aeabi_dmul>
 8008734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008738:	1136      	asrs	r6, r6, #4
 800873a:	2300      	movs	r3, #0
 800873c:	2502      	movs	r5, #2
 800873e:	2e00      	cmp	r6, #0
 8008740:	d17e      	bne.n	8008840 <_dtoa_r+0x4d8>
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1d0      	bne.n	80086e8 <_dtoa_r+0x380>
 8008746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008748:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 8084 	beq.w	800885a <_dtoa_r+0x4f2>
 8008752:	4b96      	ldr	r3, [pc, #600]	; (80089ac <_dtoa_r+0x644>)
 8008754:	2200      	movs	r2, #0
 8008756:	4640      	mov	r0, r8
 8008758:	4649      	mov	r1, r9
 800875a:	f7f8 f9d7 	bl	8000b0c <__aeabi_dcmplt>
 800875e:	2800      	cmp	r0, #0
 8008760:	d07b      	beq.n	800885a <_dtoa_r+0x4f2>
 8008762:	9b04      	ldr	r3, [sp, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d078      	beq.n	800885a <_dtoa_r+0x4f2>
 8008768:	9b01      	ldr	r3, [sp, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	dd39      	ble.n	80087e2 <_dtoa_r+0x47a>
 800876e:	4b90      	ldr	r3, [pc, #576]	; (80089b0 <_dtoa_r+0x648>)
 8008770:	2200      	movs	r2, #0
 8008772:	4640      	mov	r0, r8
 8008774:	4649      	mov	r1, r9
 8008776:	f7f7 ff57 	bl	8000628 <__aeabi_dmul>
 800877a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800877e:	9e01      	ldr	r6, [sp, #4]
 8008780:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008784:	3501      	adds	r5, #1
 8008786:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800878a:	4628      	mov	r0, r5
 800878c:	f7f7 fee2 	bl	8000554 <__aeabi_i2d>
 8008790:	4642      	mov	r2, r8
 8008792:	464b      	mov	r3, r9
 8008794:	f7f7 ff48 	bl	8000628 <__aeabi_dmul>
 8008798:	4b86      	ldr	r3, [pc, #536]	; (80089b4 <_dtoa_r+0x64c>)
 800879a:	2200      	movs	r2, #0
 800879c:	f7f7 fd8e 	bl	80002bc <__adddf3>
 80087a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80087a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087a8:	9303      	str	r3, [sp, #12]
 80087aa:	2e00      	cmp	r6, #0
 80087ac:	d158      	bne.n	8008860 <_dtoa_r+0x4f8>
 80087ae:	4b82      	ldr	r3, [pc, #520]	; (80089b8 <_dtoa_r+0x650>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	4640      	mov	r0, r8
 80087b4:	4649      	mov	r1, r9
 80087b6:	f7f7 fd7f 	bl	80002b8 <__aeabi_dsub>
 80087ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087be:	4680      	mov	r8, r0
 80087c0:	4689      	mov	r9, r1
 80087c2:	f7f8 f9c1 	bl	8000b48 <__aeabi_dcmpgt>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	f040 8296 	bne.w	8008cf8 <_dtoa_r+0x990>
 80087cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80087d0:	4640      	mov	r0, r8
 80087d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087d6:	4649      	mov	r1, r9
 80087d8:	f7f8 f998 	bl	8000b0c <__aeabi_dcmplt>
 80087dc:	2800      	cmp	r0, #0
 80087de:	f040 8289 	bne.w	8008cf4 <_dtoa_r+0x98c>
 80087e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80087e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f2c0 814e 	blt.w	8008a8a <_dtoa_r+0x722>
 80087ee:	f1bb 0f0e 	cmp.w	fp, #14
 80087f2:	f300 814a 	bgt.w	8008a8a <_dtoa_r+0x722>
 80087f6:	4b6b      	ldr	r3, [pc, #428]	; (80089a4 <_dtoa_r+0x63c>)
 80087f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008802:	2b00      	cmp	r3, #0
 8008804:	f280 80dc 	bge.w	80089c0 <_dtoa_r+0x658>
 8008808:	9b04      	ldr	r3, [sp, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	f300 80d8 	bgt.w	80089c0 <_dtoa_r+0x658>
 8008810:	f040 826f 	bne.w	8008cf2 <_dtoa_r+0x98a>
 8008814:	4b68      	ldr	r3, [pc, #416]	; (80089b8 <_dtoa_r+0x650>)
 8008816:	2200      	movs	r2, #0
 8008818:	4640      	mov	r0, r8
 800881a:	4649      	mov	r1, r9
 800881c:	f7f7 ff04 	bl	8000628 <__aeabi_dmul>
 8008820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008824:	f7f8 f986 	bl	8000b34 <__aeabi_dcmpge>
 8008828:	9e04      	ldr	r6, [sp, #16]
 800882a:	4637      	mov	r7, r6
 800882c:	2800      	cmp	r0, #0
 800882e:	f040 8245 	bne.w	8008cbc <_dtoa_r+0x954>
 8008832:	9d00      	ldr	r5, [sp, #0]
 8008834:	2331      	movs	r3, #49	; 0x31
 8008836:	f805 3b01 	strb.w	r3, [r5], #1
 800883a:	f10b 0b01 	add.w	fp, fp, #1
 800883e:	e241      	b.n	8008cc4 <_dtoa_r+0x95c>
 8008840:	07f2      	lsls	r2, r6, #31
 8008842:	d505      	bpl.n	8008850 <_dtoa_r+0x4e8>
 8008844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008848:	f7f7 feee 	bl	8000628 <__aeabi_dmul>
 800884c:	3501      	adds	r5, #1
 800884e:	2301      	movs	r3, #1
 8008850:	1076      	asrs	r6, r6, #1
 8008852:	3708      	adds	r7, #8
 8008854:	e773      	b.n	800873e <_dtoa_r+0x3d6>
 8008856:	2502      	movs	r5, #2
 8008858:	e775      	b.n	8008746 <_dtoa_r+0x3de>
 800885a:	9e04      	ldr	r6, [sp, #16]
 800885c:	465f      	mov	r7, fp
 800885e:	e792      	b.n	8008786 <_dtoa_r+0x41e>
 8008860:	9900      	ldr	r1, [sp, #0]
 8008862:	4b50      	ldr	r3, [pc, #320]	; (80089a4 <_dtoa_r+0x63c>)
 8008864:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008868:	4431      	add	r1, r6
 800886a:	9102      	str	r1, [sp, #8]
 800886c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800886e:	eeb0 9a47 	vmov.f32	s18, s14
 8008872:	eef0 9a67 	vmov.f32	s19, s15
 8008876:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800887a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800887e:	2900      	cmp	r1, #0
 8008880:	d044      	beq.n	800890c <_dtoa_r+0x5a4>
 8008882:	494e      	ldr	r1, [pc, #312]	; (80089bc <_dtoa_r+0x654>)
 8008884:	2000      	movs	r0, #0
 8008886:	f7f7 fff9 	bl	800087c <__aeabi_ddiv>
 800888a:	ec53 2b19 	vmov	r2, r3, d9
 800888e:	f7f7 fd13 	bl	80002b8 <__aeabi_dsub>
 8008892:	9d00      	ldr	r5, [sp, #0]
 8008894:	ec41 0b19 	vmov	d9, r0, r1
 8008898:	4649      	mov	r1, r9
 800889a:	4640      	mov	r0, r8
 800889c:	f7f8 f974 	bl	8000b88 <__aeabi_d2iz>
 80088a0:	4606      	mov	r6, r0
 80088a2:	f7f7 fe57 	bl	8000554 <__aeabi_i2d>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4640      	mov	r0, r8
 80088ac:	4649      	mov	r1, r9
 80088ae:	f7f7 fd03 	bl	80002b8 <__aeabi_dsub>
 80088b2:	3630      	adds	r6, #48	; 0x30
 80088b4:	f805 6b01 	strb.w	r6, [r5], #1
 80088b8:	ec53 2b19 	vmov	r2, r3, d9
 80088bc:	4680      	mov	r8, r0
 80088be:	4689      	mov	r9, r1
 80088c0:	f7f8 f924 	bl	8000b0c <__aeabi_dcmplt>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d164      	bne.n	8008992 <_dtoa_r+0x62a>
 80088c8:	4642      	mov	r2, r8
 80088ca:	464b      	mov	r3, r9
 80088cc:	4937      	ldr	r1, [pc, #220]	; (80089ac <_dtoa_r+0x644>)
 80088ce:	2000      	movs	r0, #0
 80088d0:	f7f7 fcf2 	bl	80002b8 <__aeabi_dsub>
 80088d4:	ec53 2b19 	vmov	r2, r3, d9
 80088d8:	f7f8 f918 	bl	8000b0c <__aeabi_dcmplt>
 80088dc:	2800      	cmp	r0, #0
 80088de:	f040 80b6 	bne.w	8008a4e <_dtoa_r+0x6e6>
 80088e2:	9b02      	ldr	r3, [sp, #8]
 80088e4:	429d      	cmp	r5, r3
 80088e6:	f43f af7c 	beq.w	80087e2 <_dtoa_r+0x47a>
 80088ea:	4b31      	ldr	r3, [pc, #196]	; (80089b0 <_dtoa_r+0x648>)
 80088ec:	ec51 0b19 	vmov	r0, r1, d9
 80088f0:	2200      	movs	r2, #0
 80088f2:	f7f7 fe99 	bl	8000628 <__aeabi_dmul>
 80088f6:	4b2e      	ldr	r3, [pc, #184]	; (80089b0 <_dtoa_r+0x648>)
 80088f8:	ec41 0b19 	vmov	d9, r0, r1
 80088fc:	2200      	movs	r2, #0
 80088fe:	4640      	mov	r0, r8
 8008900:	4649      	mov	r1, r9
 8008902:	f7f7 fe91 	bl	8000628 <__aeabi_dmul>
 8008906:	4680      	mov	r8, r0
 8008908:	4689      	mov	r9, r1
 800890a:	e7c5      	b.n	8008898 <_dtoa_r+0x530>
 800890c:	ec51 0b17 	vmov	r0, r1, d7
 8008910:	f7f7 fe8a 	bl	8000628 <__aeabi_dmul>
 8008914:	9b02      	ldr	r3, [sp, #8]
 8008916:	9d00      	ldr	r5, [sp, #0]
 8008918:	930f      	str	r3, [sp, #60]	; 0x3c
 800891a:	ec41 0b19 	vmov	d9, r0, r1
 800891e:	4649      	mov	r1, r9
 8008920:	4640      	mov	r0, r8
 8008922:	f7f8 f931 	bl	8000b88 <__aeabi_d2iz>
 8008926:	4606      	mov	r6, r0
 8008928:	f7f7 fe14 	bl	8000554 <__aeabi_i2d>
 800892c:	3630      	adds	r6, #48	; 0x30
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	4640      	mov	r0, r8
 8008934:	4649      	mov	r1, r9
 8008936:	f7f7 fcbf 	bl	80002b8 <__aeabi_dsub>
 800893a:	f805 6b01 	strb.w	r6, [r5], #1
 800893e:	9b02      	ldr	r3, [sp, #8]
 8008940:	429d      	cmp	r5, r3
 8008942:	4680      	mov	r8, r0
 8008944:	4689      	mov	r9, r1
 8008946:	f04f 0200 	mov.w	r2, #0
 800894a:	d124      	bne.n	8008996 <_dtoa_r+0x62e>
 800894c:	4b1b      	ldr	r3, [pc, #108]	; (80089bc <_dtoa_r+0x654>)
 800894e:	ec51 0b19 	vmov	r0, r1, d9
 8008952:	f7f7 fcb3 	bl	80002bc <__adddf3>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	4640      	mov	r0, r8
 800895c:	4649      	mov	r1, r9
 800895e:	f7f8 f8f3 	bl	8000b48 <__aeabi_dcmpgt>
 8008962:	2800      	cmp	r0, #0
 8008964:	d173      	bne.n	8008a4e <_dtoa_r+0x6e6>
 8008966:	ec53 2b19 	vmov	r2, r3, d9
 800896a:	4914      	ldr	r1, [pc, #80]	; (80089bc <_dtoa_r+0x654>)
 800896c:	2000      	movs	r0, #0
 800896e:	f7f7 fca3 	bl	80002b8 <__aeabi_dsub>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	4640      	mov	r0, r8
 8008978:	4649      	mov	r1, r9
 800897a:	f7f8 f8c7 	bl	8000b0c <__aeabi_dcmplt>
 800897e:	2800      	cmp	r0, #0
 8008980:	f43f af2f 	beq.w	80087e2 <_dtoa_r+0x47a>
 8008984:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008986:	1e6b      	subs	r3, r5, #1
 8008988:	930f      	str	r3, [sp, #60]	; 0x3c
 800898a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800898e:	2b30      	cmp	r3, #48	; 0x30
 8008990:	d0f8      	beq.n	8008984 <_dtoa_r+0x61c>
 8008992:	46bb      	mov	fp, r7
 8008994:	e04a      	b.n	8008a2c <_dtoa_r+0x6c4>
 8008996:	4b06      	ldr	r3, [pc, #24]	; (80089b0 <_dtoa_r+0x648>)
 8008998:	f7f7 fe46 	bl	8000628 <__aeabi_dmul>
 800899c:	4680      	mov	r8, r0
 800899e:	4689      	mov	r9, r1
 80089a0:	e7bd      	b.n	800891e <_dtoa_r+0x5b6>
 80089a2:	bf00      	nop
 80089a4:	0800a360 	.word	0x0800a360
 80089a8:	0800a338 	.word	0x0800a338
 80089ac:	3ff00000 	.word	0x3ff00000
 80089b0:	40240000 	.word	0x40240000
 80089b4:	401c0000 	.word	0x401c0000
 80089b8:	40140000 	.word	0x40140000
 80089bc:	3fe00000 	.word	0x3fe00000
 80089c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80089c4:	9d00      	ldr	r5, [sp, #0]
 80089c6:	4642      	mov	r2, r8
 80089c8:	464b      	mov	r3, r9
 80089ca:	4630      	mov	r0, r6
 80089cc:	4639      	mov	r1, r7
 80089ce:	f7f7 ff55 	bl	800087c <__aeabi_ddiv>
 80089d2:	f7f8 f8d9 	bl	8000b88 <__aeabi_d2iz>
 80089d6:	9001      	str	r0, [sp, #4]
 80089d8:	f7f7 fdbc 	bl	8000554 <__aeabi_i2d>
 80089dc:	4642      	mov	r2, r8
 80089de:	464b      	mov	r3, r9
 80089e0:	f7f7 fe22 	bl	8000628 <__aeabi_dmul>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	4630      	mov	r0, r6
 80089ea:	4639      	mov	r1, r7
 80089ec:	f7f7 fc64 	bl	80002b8 <__aeabi_dsub>
 80089f0:	9e01      	ldr	r6, [sp, #4]
 80089f2:	9f04      	ldr	r7, [sp, #16]
 80089f4:	3630      	adds	r6, #48	; 0x30
 80089f6:	f805 6b01 	strb.w	r6, [r5], #1
 80089fa:	9e00      	ldr	r6, [sp, #0]
 80089fc:	1bae      	subs	r6, r5, r6
 80089fe:	42b7      	cmp	r7, r6
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	d134      	bne.n	8008a70 <_dtoa_r+0x708>
 8008a06:	f7f7 fc59 	bl	80002bc <__adddf3>
 8008a0a:	4642      	mov	r2, r8
 8008a0c:	464b      	mov	r3, r9
 8008a0e:	4606      	mov	r6, r0
 8008a10:	460f      	mov	r7, r1
 8008a12:	f7f8 f899 	bl	8000b48 <__aeabi_dcmpgt>
 8008a16:	b9c8      	cbnz	r0, 8008a4c <_dtoa_r+0x6e4>
 8008a18:	4642      	mov	r2, r8
 8008a1a:	464b      	mov	r3, r9
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	4639      	mov	r1, r7
 8008a20:	f7f8 f86a 	bl	8000af8 <__aeabi_dcmpeq>
 8008a24:	b110      	cbz	r0, 8008a2c <_dtoa_r+0x6c4>
 8008a26:	9b01      	ldr	r3, [sp, #4]
 8008a28:	07db      	lsls	r3, r3, #31
 8008a2a:	d40f      	bmi.n	8008a4c <_dtoa_r+0x6e4>
 8008a2c:	4651      	mov	r1, sl
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 fd72 	bl	8009518 <_Bfree>
 8008a34:	2300      	movs	r3, #0
 8008a36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a38:	702b      	strb	r3, [r5, #0]
 8008a3a:	f10b 0301 	add.w	r3, fp, #1
 8008a3e:	6013      	str	r3, [r2, #0]
 8008a40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f43f ace2 	beq.w	800840c <_dtoa_r+0xa4>
 8008a48:	601d      	str	r5, [r3, #0]
 8008a4a:	e4df      	b.n	800840c <_dtoa_r+0xa4>
 8008a4c:	465f      	mov	r7, fp
 8008a4e:	462b      	mov	r3, r5
 8008a50:	461d      	mov	r5, r3
 8008a52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a56:	2a39      	cmp	r2, #57	; 0x39
 8008a58:	d106      	bne.n	8008a68 <_dtoa_r+0x700>
 8008a5a:	9a00      	ldr	r2, [sp, #0]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d1f7      	bne.n	8008a50 <_dtoa_r+0x6e8>
 8008a60:	9900      	ldr	r1, [sp, #0]
 8008a62:	2230      	movs	r2, #48	; 0x30
 8008a64:	3701      	adds	r7, #1
 8008a66:	700a      	strb	r2, [r1, #0]
 8008a68:	781a      	ldrb	r2, [r3, #0]
 8008a6a:	3201      	adds	r2, #1
 8008a6c:	701a      	strb	r2, [r3, #0]
 8008a6e:	e790      	b.n	8008992 <_dtoa_r+0x62a>
 8008a70:	4ba3      	ldr	r3, [pc, #652]	; (8008d00 <_dtoa_r+0x998>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	f7f7 fdd8 	bl	8000628 <__aeabi_dmul>
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	4606      	mov	r6, r0
 8008a7e:	460f      	mov	r7, r1
 8008a80:	f7f8 f83a 	bl	8000af8 <__aeabi_dcmpeq>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d09e      	beq.n	80089c6 <_dtoa_r+0x65e>
 8008a88:	e7d0      	b.n	8008a2c <_dtoa_r+0x6c4>
 8008a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a8c:	2a00      	cmp	r2, #0
 8008a8e:	f000 80ca 	beq.w	8008c26 <_dtoa_r+0x8be>
 8008a92:	9a07      	ldr	r2, [sp, #28]
 8008a94:	2a01      	cmp	r2, #1
 8008a96:	f300 80ad 	bgt.w	8008bf4 <_dtoa_r+0x88c>
 8008a9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a9c:	2a00      	cmp	r2, #0
 8008a9e:	f000 80a5 	beq.w	8008bec <_dtoa_r+0x884>
 8008aa2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008aa6:	9e08      	ldr	r6, [sp, #32]
 8008aa8:	9d05      	ldr	r5, [sp, #20]
 8008aaa:	9a05      	ldr	r2, [sp, #20]
 8008aac:	441a      	add	r2, r3
 8008aae:	9205      	str	r2, [sp, #20]
 8008ab0:	9a06      	ldr	r2, [sp, #24]
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	441a      	add	r2, r3
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	9206      	str	r2, [sp, #24]
 8008aba:	f000 fde3 	bl	8009684 <__i2b>
 8008abe:	4607      	mov	r7, r0
 8008ac0:	b165      	cbz	r5, 8008adc <_dtoa_r+0x774>
 8008ac2:	9b06      	ldr	r3, [sp, #24]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	dd09      	ble.n	8008adc <_dtoa_r+0x774>
 8008ac8:	42ab      	cmp	r3, r5
 8008aca:	9a05      	ldr	r2, [sp, #20]
 8008acc:	bfa8      	it	ge
 8008ace:	462b      	movge	r3, r5
 8008ad0:	1ad2      	subs	r2, r2, r3
 8008ad2:	9205      	str	r2, [sp, #20]
 8008ad4:	9a06      	ldr	r2, [sp, #24]
 8008ad6:	1aed      	subs	r5, r5, r3
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	9306      	str	r3, [sp, #24]
 8008adc:	9b08      	ldr	r3, [sp, #32]
 8008ade:	b1f3      	cbz	r3, 8008b1e <_dtoa_r+0x7b6>
 8008ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f000 80a3 	beq.w	8008c2e <_dtoa_r+0x8c6>
 8008ae8:	2e00      	cmp	r6, #0
 8008aea:	dd10      	ble.n	8008b0e <_dtoa_r+0x7a6>
 8008aec:	4639      	mov	r1, r7
 8008aee:	4632      	mov	r2, r6
 8008af0:	4620      	mov	r0, r4
 8008af2:	f000 fe87 	bl	8009804 <__pow5mult>
 8008af6:	4652      	mov	r2, sl
 8008af8:	4601      	mov	r1, r0
 8008afa:	4607      	mov	r7, r0
 8008afc:	4620      	mov	r0, r4
 8008afe:	f000 fdd7 	bl	80096b0 <__multiply>
 8008b02:	4651      	mov	r1, sl
 8008b04:	4680      	mov	r8, r0
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 fd06 	bl	8009518 <_Bfree>
 8008b0c:	46c2      	mov	sl, r8
 8008b0e:	9b08      	ldr	r3, [sp, #32]
 8008b10:	1b9a      	subs	r2, r3, r6
 8008b12:	d004      	beq.n	8008b1e <_dtoa_r+0x7b6>
 8008b14:	4651      	mov	r1, sl
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 fe74 	bl	8009804 <__pow5mult>
 8008b1c:	4682      	mov	sl, r0
 8008b1e:	2101      	movs	r1, #1
 8008b20:	4620      	mov	r0, r4
 8008b22:	f000 fdaf 	bl	8009684 <__i2b>
 8008b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	f340 8081 	ble.w	8008c32 <_dtoa_r+0x8ca>
 8008b30:	461a      	mov	r2, r3
 8008b32:	4601      	mov	r1, r0
 8008b34:	4620      	mov	r0, r4
 8008b36:	f000 fe65 	bl	8009804 <__pow5mult>
 8008b3a:	9b07      	ldr	r3, [sp, #28]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	4606      	mov	r6, r0
 8008b40:	dd7a      	ble.n	8008c38 <_dtoa_r+0x8d0>
 8008b42:	f04f 0800 	mov.w	r8, #0
 8008b46:	6933      	ldr	r3, [r6, #16]
 8008b48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b4c:	6918      	ldr	r0, [r3, #16]
 8008b4e:	f000 fd4b 	bl	80095e8 <__hi0bits>
 8008b52:	f1c0 0020 	rsb	r0, r0, #32
 8008b56:	9b06      	ldr	r3, [sp, #24]
 8008b58:	4418      	add	r0, r3
 8008b5a:	f010 001f 	ands.w	r0, r0, #31
 8008b5e:	f000 8094 	beq.w	8008c8a <_dtoa_r+0x922>
 8008b62:	f1c0 0320 	rsb	r3, r0, #32
 8008b66:	2b04      	cmp	r3, #4
 8008b68:	f340 8085 	ble.w	8008c76 <_dtoa_r+0x90e>
 8008b6c:	9b05      	ldr	r3, [sp, #20]
 8008b6e:	f1c0 001c 	rsb	r0, r0, #28
 8008b72:	4403      	add	r3, r0
 8008b74:	9305      	str	r3, [sp, #20]
 8008b76:	9b06      	ldr	r3, [sp, #24]
 8008b78:	4403      	add	r3, r0
 8008b7a:	4405      	add	r5, r0
 8008b7c:	9306      	str	r3, [sp, #24]
 8008b7e:	9b05      	ldr	r3, [sp, #20]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	dd05      	ble.n	8008b90 <_dtoa_r+0x828>
 8008b84:	4651      	mov	r1, sl
 8008b86:	461a      	mov	r2, r3
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f000 fe95 	bl	80098b8 <__lshift>
 8008b8e:	4682      	mov	sl, r0
 8008b90:	9b06      	ldr	r3, [sp, #24]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	dd05      	ble.n	8008ba2 <_dtoa_r+0x83a>
 8008b96:	4631      	mov	r1, r6
 8008b98:	461a      	mov	r2, r3
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 fe8c 	bl	80098b8 <__lshift>
 8008ba0:	4606      	mov	r6, r0
 8008ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d072      	beq.n	8008c8e <_dtoa_r+0x926>
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4650      	mov	r0, sl
 8008bac:	f000 fef0 	bl	8009990 <__mcmp>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	da6c      	bge.n	8008c8e <_dtoa_r+0x926>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4651      	mov	r1, sl
 8008bb8:	220a      	movs	r2, #10
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f000 fcce 	bl	800955c <__multadd>
 8008bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008bc6:	4682      	mov	sl, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 81b0 	beq.w	8008f2e <_dtoa_r+0xbc6>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	4639      	mov	r1, r7
 8008bd2:	220a      	movs	r2, #10
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f000 fcc1 	bl	800955c <__multadd>
 8008bda:	9b01      	ldr	r3, [sp, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	4607      	mov	r7, r0
 8008be0:	f300 8096 	bgt.w	8008d10 <_dtoa_r+0x9a8>
 8008be4:	9b07      	ldr	r3, [sp, #28]
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	dc59      	bgt.n	8008c9e <_dtoa_r+0x936>
 8008bea:	e091      	b.n	8008d10 <_dtoa_r+0x9a8>
 8008bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008bf2:	e758      	b.n	8008aa6 <_dtoa_r+0x73e>
 8008bf4:	9b04      	ldr	r3, [sp, #16]
 8008bf6:	1e5e      	subs	r6, r3, #1
 8008bf8:	9b08      	ldr	r3, [sp, #32]
 8008bfa:	42b3      	cmp	r3, r6
 8008bfc:	bfbf      	itttt	lt
 8008bfe:	9b08      	ldrlt	r3, [sp, #32]
 8008c00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008c02:	9608      	strlt	r6, [sp, #32]
 8008c04:	1af3      	sublt	r3, r6, r3
 8008c06:	bfb4      	ite	lt
 8008c08:	18d2      	addlt	r2, r2, r3
 8008c0a:	1b9e      	subge	r6, r3, r6
 8008c0c:	9b04      	ldr	r3, [sp, #16]
 8008c0e:	bfbc      	itt	lt
 8008c10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008c12:	2600      	movlt	r6, #0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	bfb7      	itett	lt
 8008c18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008c1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008c20:	1a9d      	sublt	r5, r3, r2
 8008c22:	2300      	movlt	r3, #0
 8008c24:	e741      	b.n	8008aaa <_dtoa_r+0x742>
 8008c26:	9e08      	ldr	r6, [sp, #32]
 8008c28:	9d05      	ldr	r5, [sp, #20]
 8008c2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c2c:	e748      	b.n	8008ac0 <_dtoa_r+0x758>
 8008c2e:	9a08      	ldr	r2, [sp, #32]
 8008c30:	e770      	b.n	8008b14 <_dtoa_r+0x7ac>
 8008c32:	9b07      	ldr	r3, [sp, #28]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	dc19      	bgt.n	8008c6c <_dtoa_r+0x904>
 8008c38:	9b02      	ldr	r3, [sp, #8]
 8008c3a:	b9bb      	cbnz	r3, 8008c6c <_dtoa_r+0x904>
 8008c3c:	9b03      	ldr	r3, [sp, #12]
 8008c3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c42:	b99b      	cbnz	r3, 8008c6c <_dtoa_r+0x904>
 8008c44:	9b03      	ldr	r3, [sp, #12]
 8008c46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c4a:	0d1b      	lsrs	r3, r3, #20
 8008c4c:	051b      	lsls	r3, r3, #20
 8008c4e:	b183      	cbz	r3, 8008c72 <_dtoa_r+0x90a>
 8008c50:	9b05      	ldr	r3, [sp, #20]
 8008c52:	3301      	adds	r3, #1
 8008c54:	9305      	str	r3, [sp, #20]
 8008c56:	9b06      	ldr	r3, [sp, #24]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	9306      	str	r3, [sp, #24]
 8008c5c:	f04f 0801 	mov.w	r8, #1
 8008c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f47f af6f 	bne.w	8008b46 <_dtoa_r+0x7de>
 8008c68:	2001      	movs	r0, #1
 8008c6a:	e774      	b.n	8008b56 <_dtoa_r+0x7ee>
 8008c6c:	f04f 0800 	mov.w	r8, #0
 8008c70:	e7f6      	b.n	8008c60 <_dtoa_r+0x8f8>
 8008c72:	4698      	mov	r8, r3
 8008c74:	e7f4      	b.n	8008c60 <_dtoa_r+0x8f8>
 8008c76:	d082      	beq.n	8008b7e <_dtoa_r+0x816>
 8008c78:	9a05      	ldr	r2, [sp, #20]
 8008c7a:	331c      	adds	r3, #28
 8008c7c:	441a      	add	r2, r3
 8008c7e:	9205      	str	r2, [sp, #20]
 8008c80:	9a06      	ldr	r2, [sp, #24]
 8008c82:	441a      	add	r2, r3
 8008c84:	441d      	add	r5, r3
 8008c86:	9206      	str	r2, [sp, #24]
 8008c88:	e779      	b.n	8008b7e <_dtoa_r+0x816>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	e7f4      	b.n	8008c78 <_dtoa_r+0x910>
 8008c8e:	9b04      	ldr	r3, [sp, #16]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	dc37      	bgt.n	8008d04 <_dtoa_r+0x99c>
 8008c94:	9b07      	ldr	r3, [sp, #28]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	dd34      	ble.n	8008d04 <_dtoa_r+0x99c>
 8008c9a:	9b04      	ldr	r3, [sp, #16]
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	9b01      	ldr	r3, [sp, #4]
 8008ca0:	b963      	cbnz	r3, 8008cbc <_dtoa_r+0x954>
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	2205      	movs	r2, #5
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f000 fc58 	bl	800955c <__multadd>
 8008cac:	4601      	mov	r1, r0
 8008cae:	4606      	mov	r6, r0
 8008cb0:	4650      	mov	r0, sl
 8008cb2:	f000 fe6d 	bl	8009990 <__mcmp>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	f73f adbb 	bgt.w	8008832 <_dtoa_r+0x4ca>
 8008cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cbe:	9d00      	ldr	r5, [sp, #0]
 8008cc0:	ea6f 0b03 	mvn.w	fp, r3
 8008cc4:	f04f 0800 	mov.w	r8, #0
 8008cc8:	4631      	mov	r1, r6
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f000 fc24 	bl	8009518 <_Bfree>
 8008cd0:	2f00      	cmp	r7, #0
 8008cd2:	f43f aeab 	beq.w	8008a2c <_dtoa_r+0x6c4>
 8008cd6:	f1b8 0f00 	cmp.w	r8, #0
 8008cda:	d005      	beq.n	8008ce8 <_dtoa_r+0x980>
 8008cdc:	45b8      	cmp	r8, r7
 8008cde:	d003      	beq.n	8008ce8 <_dtoa_r+0x980>
 8008ce0:	4641      	mov	r1, r8
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 fc18 	bl	8009518 <_Bfree>
 8008ce8:	4639      	mov	r1, r7
 8008cea:	4620      	mov	r0, r4
 8008cec:	f000 fc14 	bl	8009518 <_Bfree>
 8008cf0:	e69c      	b.n	8008a2c <_dtoa_r+0x6c4>
 8008cf2:	2600      	movs	r6, #0
 8008cf4:	4637      	mov	r7, r6
 8008cf6:	e7e1      	b.n	8008cbc <_dtoa_r+0x954>
 8008cf8:	46bb      	mov	fp, r7
 8008cfa:	4637      	mov	r7, r6
 8008cfc:	e599      	b.n	8008832 <_dtoa_r+0x4ca>
 8008cfe:	bf00      	nop
 8008d00:	40240000 	.word	0x40240000
 8008d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 80c8 	beq.w	8008e9c <_dtoa_r+0xb34>
 8008d0c:	9b04      	ldr	r3, [sp, #16]
 8008d0e:	9301      	str	r3, [sp, #4]
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	dd05      	ble.n	8008d20 <_dtoa_r+0x9b8>
 8008d14:	4639      	mov	r1, r7
 8008d16:	462a      	mov	r2, r5
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f000 fdcd 	bl	80098b8 <__lshift>
 8008d1e:	4607      	mov	r7, r0
 8008d20:	f1b8 0f00 	cmp.w	r8, #0
 8008d24:	d05b      	beq.n	8008dde <_dtoa_r+0xa76>
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 fbb5 	bl	8009498 <_Balloc>
 8008d2e:	4605      	mov	r5, r0
 8008d30:	b928      	cbnz	r0, 8008d3e <_dtoa_r+0x9d6>
 8008d32:	4b83      	ldr	r3, [pc, #524]	; (8008f40 <_dtoa_r+0xbd8>)
 8008d34:	4602      	mov	r2, r0
 8008d36:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008d3a:	f7ff bb2e 	b.w	800839a <_dtoa_r+0x32>
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	3202      	adds	r2, #2
 8008d42:	0092      	lsls	r2, r2, #2
 8008d44:	f107 010c 	add.w	r1, r7, #12
 8008d48:	300c      	adds	r0, #12
 8008d4a:	f001 f8d3 	bl	8009ef4 <memcpy>
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4629      	mov	r1, r5
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 fdb0 	bl	80098b8 <__lshift>
 8008d58:	9b00      	ldr	r3, [sp, #0]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	9304      	str	r3, [sp, #16]
 8008d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d62:	4413      	add	r3, r2
 8008d64:	9308      	str	r3, [sp, #32]
 8008d66:	9b02      	ldr	r3, [sp, #8]
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	46b8      	mov	r8, r7
 8008d6e:	9306      	str	r3, [sp, #24]
 8008d70:	4607      	mov	r7, r0
 8008d72:	9b04      	ldr	r3, [sp, #16]
 8008d74:	4631      	mov	r1, r6
 8008d76:	3b01      	subs	r3, #1
 8008d78:	4650      	mov	r0, sl
 8008d7a:	9301      	str	r3, [sp, #4]
 8008d7c:	f7ff fa69 	bl	8008252 <quorem>
 8008d80:	4641      	mov	r1, r8
 8008d82:	9002      	str	r0, [sp, #8]
 8008d84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d88:	4650      	mov	r0, sl
 8008d8a:	f000 fe01 	bl	8009990 <__mcmp>
 8008d8e:	463a      	mov	r2, r7
 8008d90:	9005      	str	r0, [sp, #20]
 8008d92:	4631      	mov	r1, r6
 8008d94:	4620      	mov	r0, r4
 8008d96:	f000 fe17 	bl	80099c8 <__mdiff>
 8008d9a:	68c2      	ldr	r2, [r0, #12]
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	bb02      	cbnz	r2, 8008de2 <_dtoa_r+0xa7a>
 8008da0:	4601      	mov	r1, r0
 8008da2:	4650      	mov	r0, sl
 8008da4:	f000 fdf4 	bl	8009990 <__mcmp>
 8008da8:	4602      	mov	r2, r0
 8008daa:	4629      	mov	r1, r5
 8008dac:	4620      	mov	r0, r4
 8008dae:	9209      	str	r2, [sp, #36]	; 0x24
 8008db0:	f000 fbb2 	bl	8009518 <_Bfree>
 8008db4:	9b07      	ldr	r3, [sp, #28]
 8008db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008db8:	9d04      	ldr	r5, [sp, #16]
 8008dba:	ea43 0102 	orr.w	r1, r3, r2
 8008dbe:	9b06      	ldr	r3, [sp, #24]
 8008dc0:	4319      	orrs	r1, r3
 8008dc2:	d110      	bne.n	8008de6 <_dtoa_r+0xa7e>
 8008dc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008dc8:	d029      	beq.n	8008e1e <_dtoa_r+0xab6>
 8008dca:	9b05      	ldr	r3, [sp, #20]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	dd02      	ble.n	8008dd6 <_dtoa_r+0xa6e>
 8008dd0:	9b02      	ldr	r3, [sp, #8]
 8008dd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008dd6:	9b01      	ldr	r3, [sp, #4]
 8008dd8:	f883 9000 	strb.w	r9, [r3]
 8008ddc:	e774      	b.n	8008cc8 <_dtoa_r+0x960>
 8008dde:	4638      	mov	r0, r7
 8008de0:	e7ba      	b.n	8008d58 <_dtoa_r+0x9f0>
 8008de2:	2201      	movs	r2, #1
 8008de4:	e7e1      	b.n	8008daa <_dtoa_r+0xa42>
 8008de6:	9b05      	ldr	r3, [sp, #20]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	db04      	blt.n	8008df6 <_dtoa_r+0xa8e>
 8008dec:	9907      	ldr	r1, [sp, #28]
 8008dee:	430b      	orrs	r3, r1
 8008df0:	9906      	ldr	r1, [sp, #24]
 8008df2:	430b      	orrs	r3, r1
 8008df4:	d120      	bne.n	8008e38 <_dtoa_r+0xad0>
 8008df6:	2a00      	cmp	r2, #0
 8008df8:	dded      	ble.n	8008dd6 <_dtoa_r+0xa6e>
 8008dfa:	4651      	mov	r1, sl
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f000 fd5a 	bl	80098b8 <__lshift>
 8008e04:	4631      	mov	r1, r6
 8008e06:	4682      	mov	sl, r0
 8008e08:	f000 fdc2 	bl	8009990 <__mcmp>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	dc03      	bgt.n	8008e18 <_dtoa_r+0xab0>
 8008e10:	d1e1      	bne.n	8008dd6 <_dtoa_r+0xa6e>
 8008e12:	f019 0f01 	tst.w	r9, #1
 8008e16:	d0de      	beq.n	8008dd6 <_dtoa_r+0xa6e>
 8008e18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e1c:	d1d8      	bne.n	8008dd0 <_dtoa_r+0xa68>
 8008e1e:	9a01      	ldr	r2, [sp, #4]
 8008e20:	2339      	movs	r3, #57	; 0x39
 8008e22:	7013      	strb	r3, [r2, #0]
 8008e24:	462b      	mov	r3, r5
 8008e26:	461d      	mov	r5, r3
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e2e:	2a39      	cmp	r2, #57	; 0x39
 8008e30:	d06c      	beq.n	8008f0c <_dtoa_r+0xba4>
 8008e32:	3201      	adds	r2, #1
 8008e34:	701a      	strb	r2, [r3, #0]
 8008e36:	e747      	b.n	8008cc8 <_dtoa_r+0x960>
 8008e38:	2a00      	cmp	r2, #0
 8008e3a:	dd07      	ble.n	8008e4c <_dtoa_r+0xae4>
 8008e3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e40:	d0ed      	beq.n	8008e1e <_dtoa_r+0xab6>
 8008e42:	9a01      	ldr	r2, [sp, #4]
 8008e44:	f109 0301 	add.w	r3, r9, #1
 8008e48:	7013      	strb	r3, [r2, #0]
 8008e4a:	e73d      	b.n	8008cc8 <_dtoa_r+0x960>
 8008e4c:	9b04      	ldr	r3, [sp, #16]
 8008e4e:	9a08      	ldr	r2, [sp, #32]
 8008e50:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d043      	beq.n	8008ee0 <_dtoa_r+0xb78>
 8008e58:	4651      	mov	r1, sl
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	220a      	movs	r2, #10
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f000 fb7c 	bl	800955c <__multadd>
 8008e64:	45b8      	cmp	r8, r7
 8008e66:	4682      	mov	sl, r0
 8008e68:	f04f 0300 	mov.w	r3, #0
 8008e6c:	f04f 020a 	mov.w	r2, #10
 8008e70:	4641      	mov	r1, r8
 8008e72:	4620      	mov	r0, r4
 8008e74:	d107      	bne.n	8008e86 <_dtoa_r+0xb1e>
 8008e76:	f000 fb71 	bl	800955c <__multadd>
 8008e7a:	4680      	mov	r8, r0
 8008e7c:	4607      	mov	r7, r0
 8008e7e:	9b04      	ldr	r3, [sp, #16]
 8008e80:	3301      	adds	r3, #1
 8008e82:	9304      	str	r3, [sp, #16]
 8008e84:	e775      	b.n	8008d72 <_dtoa_r+0xa0a>
 8008e86:	f000 fb69 	bl	800955c <__multadd>
 8008e8a:	4639      	mov	r1, r7
 8008e8c:	4680      	mov	r8, r0
 8008e8e:	2300      	movs	r3, #0
 8008e90:	220a      	movs	r2, #10
 8008e92:	4620      	mov	r0, r4
 8008e94:	f000 fb62 	bl	800955c <__multadd>
 8008e98:	4607      	mov	r7, r0
 8008e9a:	e7f0      	b.n	8008e7e <_dtoa_r+0xb16>
 8008e9c:	9b04      	ldr	r3, [sp, #16]
 8008e9e:	9301      	str	r3, [sp, #4]
 8008ea0:	9d00      	ldr	r5, [sp, #0]
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	4650      	mov	r0, sl
 8008ea6:	f7ff f9d4 	bl	8008252 <quorem>
 8008eaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008eae:	9b00      	ldr	r3, [sp, #0]
 8008eb0:	f805 9b01 	strb.w	r9, [r5], #1
 8008eb4:	1aea      	subs	r2, r5, r3
 8008eb6:	9b01      	ldr	r3, [sp, #4]
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	dd07      	ble.n	8008ecc <_dtoa_r+0xb64>
 8008ebc:	4651      	mov	r1, sl
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	220a      	movs	r2, #10
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f000 fb4a 	bl	800955c <__multadd>
 8008ec8:	4682      	mov	sl, r0
 8008eca:	e7ea      	b.n	8008ea2 <_dtoa_r+0xb3a>
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	bfc8      	it	gt
 8008ed2:	461d      	movgt	r5, r3
 8008ed4:	9b00      	ldr	r3, [sp, #0]
 8008ed6:	bfd8      	it	le
 8008ed8:	2501      	movle	r5, #1
 8008eda:	441d      	add	r5, r3
 8008edc:	f04f 0800 	mov.w	r8, #0
 8008ee0:	4651      	mov	r1, sl
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f000 fce7 	bl	80098b8 <__lshift>
 8008eea:	4631      	mov	r1, r6
 8008eec:	4682      	mov	sl, r0
 8008eee:	f000 fd4f 	bl	8009990 <__mcmp>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	dc96      	bgt.n	8008e24 <_dtoa_r+0xabc>
 8008ef6:	d102      	bne.n	8008efe <_dtoa_r+0xb96>
 8008ef8:	f019 0f01 	tst.w	r9, #1
 8008efc:	d192      	bne.n	8008e24 <_dtoa_r+0xabc>
 8008efe:	462b      	mov	r3, r5
 8008f00:	461d      	mov	r5, r3
 8008f02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f06:	2a30      	cmp	r2, #48	; 0x30
 8008f08:	d0fa      	beq.n	8008f00 <_dtoa_r+0xb98>
 8008f0a:	e6dd      	b.n	8008cc8 <_dtoa_r+0x960>
 8008f0c:	9a00      	ldr	r2, [sp, #0]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d189      	bne.n	8008e26 <_dtoa_r+0xabe>
 8008f12:	f10b 0b01 	add.w	fp, fp, #1
 8008f16:	2331      	movs	r3, #49	; 0x31
 8008f18:	e796      	b.n	8008e48 <_dtoa_r+0xae0>
 8008f1a:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <_dtoa_r+0xbdc>)
 8008f1c:	f7ff ba99 	b.w	8008452 <_dtoa_r+0xea>
 8008f20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f47f aa6d 	bne.w	8008402 <_dtoa_r+0x9a>
 8008f28:	4b07      	ldr	r3, [pc, #28]	; (8008f48 <_dtoa_r+0xbe0>)
 8008f2a:	f7ff ba92 	b.w	8008452 <_dtoa_r+0xea>
 8008f2e:	9b01      	ldr	r3, [sp, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	dcb5      	bgt.n	8008ea0 <_dtoa_r+0xb38>
 8008f34:	9b07      	ldr	r3, [sp, #28]
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	f73f aeb1 	bgt.w	8008c9e <_dtoa_r+0x936>
 8008f3c:	e7b0      	b.n	8008ea0 <_dtoa_r+0xb38>
 8008f3e:	bf00      	nop
 8008f40:	0800a2bc 	.word	0x0800a2bc
 8008f44:	0800a21c 	.word	0x0800a21c
 8008f48:	0800a240 	.word	0x0800a240

08008f4c <__sfputc_r>:
 8008f4c:	6893      	ldr	r3, [r2, #8]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	b410      	push	{r4}
 8008f54:	6093      	str	r3, [r2, #8]
 8008f56:	da08      	bge.n	8008f6a <__sfputc_r+0x1e>
 8008f58:	6994      	ldr	r4, [r2, #24]
 8008f5a:	42a3      	cmp	r3, r4
 8008f5c:	db01      	blt.n	8008f62 <__sfputc_r+0x16>
 8008f5e:	290a      	cmp	r1, #10
 8008f60:	d103      	bne.n	8008f6a <__sfputc_r+0x1e>
 8008f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f66:	f000 be56 	b.w	8009c16 <__swbuf_r>
 8008f6a:	6813      	ldr	r3, [r2, #0]
 8008f6c:	1c58      	adds	r0, r3, #1
 8008f6e:	6010      	str	r0, [r2, #0]
 8008f70:	7019      	strb	r1, [r3, #0]
 8008f72:	4608      	mov	r0, r1
 8008f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <__sfputs_r>:
 8008f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7c:	4606      	mov	r6, r0
 8008f7e:	460f      	mov	r7, r1
 8008f80:	4614      	mov	r4, r2
 8008f82:	18d5      	adds	r5, r2, r3
 8008f84:	42ac      	cmp	r4, r5
 8008f86:	d101      	bne.n	8008f8c <__sfputs_r+0x12>
 8008f88:	2000      	movs	r0, #0
 8008f8a:	e007      	b.n	8008f9c <__sfputs_r+0x22>
 8008f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f90:	463a      	mov	r2, r7
 8008f92:	4630      	mov	r0, r6
 8008f94:	f7ff ffda 	bl	8008f4c <__sfputc_r>
 8008f98:	1c43      	adds	r3, r0, #1
 8008f9a:	d1f3      	bne.n	8008f84 <__sfputs_r+0xa>
 8008f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fa0 <_vfiprintf_r>:
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	460d      	mov	r5, r1
 8008fa6:	b09d      	sub	sp, #116	; 0x74
 8008fa8:	4614      	mov	r4, r2
 8008faa:	4698      	mov	r8, r3
 8008fac:	4606      	mov	r6, r0
 8008fae:	b118      	cbz	r0, 8008fb8 <_vfiprintf_r+0x18>
 8008fb0:	6a03      	ldr	r3, [r0, #32]
 8008fb2:	b90b      	cbnz	r3, 8008fb8 <_vfiprintf_r+0x18>
 8008fb4:	f7ff f870 	bl	8008098 <__sinit>
 8008fb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fba:	07d9      	lsls	r1, r3, #31
 8008fbc:	d405      	bmi.n	8008fca <_vfiprintf_r+0x2a>
 8008fbe:	89ab      	ldrh	r3, [r5, #12]
 8008fc0:	059a      	lsls	r2, r3, #22
 8008fc2:	d402      	bmi.n	8008fca <_vfiprintf_r+0x2a>
 8008fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fc6:	f7ff f942 	bl	800824e <__retarget_lock_acquire_recursive>
 8008fca:	89ab      	ldrh	r3, [r5, #12]
 8008fcc:	071b      	lsls	r3, r3, #28
 8008fce:	d501      	bpl.n	8008fd4 <_vfiprintf_r+0x34>
 8008fd0:	692b      	ldr	r3, [r5, #16]
 8008fd2:	b99b      	cbnz	r3, 8008ffc <_vfiprintf_r+0x5c>
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f000 fe5a 	bl	8009c90 <__swsetup_r>
 8008fdc:	b170      	cbz	r0, 8008ffc <_vfiprintf_r+0x5c>
 8008fde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fe0:	07dc      	lsls	r4, r3, #31
 8008fe2:	d504      	bpl.n	8008fee <_vfiprintf_r+0x4e>
 8008fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fe8:	b01d      	add	sp, #116	; 0x74
 8008fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fee:	89ab      	ldrh	r3, [r5, #12]
 8008ff0:	0598      	lsls	r0, r3, #22
 8008ff2:	d4f7      	bmi.n	8008fe4 <_vfiprintf_r+0x44>
 8008ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ff6:	f7ff f92b 	bl	8008250 <__retarget_lock_release_recursive>
 8008ffa:	e7f3      	b.n	8008fe4 <_vfiprintf_r+0x44>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8009000:	2320      	movs	r3, #32
 8009002:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009006:	f8cd 800c 	str.w	r8, [sp, #12]
 800900a:	2330      	movs	r3, #48	; 0x30
 800900c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80091c0 <_vfiprintf_r+0x220>
 8009010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009014:	f04f 0901 	mov.w	r9, #1
 8009018:	4623      	mov	r3, r4
 800901a:	469a      	mov	sl, r3
 800901c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009020:	b10a      	cbz	r2, 8009026 <_vfiprintf_r+0x86>
 8009022:	2a25      	cmp	r2, #37	; 0x25
 8009024:	d1f9      	bne.n	800901a <_vfiprintf_r+0x7a>
 8009026:	ebba 0b04 	subs.w	fp, sl, r4
 800902a:	d00b      	beq.n	8009044 <_vfiprintf_r+0xa4>
 800902c:	465b      	mov	r3, fp
 800902e:	4622      	mov	r2, r4
 8009030:	4629      	mov	r1, r5
 8009032:	4630      	mov	r0, r6
 8009034:	f7ff ffa1 	bl	8008f7a <__sfputs_r>
 8009038:	3001      	adds	r0, #1
 800903a:	f000 80a9 	beq.w	8009190 <_vfiprintf_r+0x1f0>
 800903e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009040:	445a      	add	r2, fp
 8009042:	9209      	str	r2, [sp, #36]	; 0x24
 8009044:	f89a 3000 	ldrb.w	r3, [sl]
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 80a1 	beq.w	8009190 <_vfiprintf_r+0x1f0>
 800904e:	2300      	movs	r3, #0
 8009050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009058:	f10a 0a01 	add.w	sl, sl, #1
 800905c:	9304      	str	r3, [sp, #16]
 800905e:	9307      	str	r3, [sp, #28]
 8009060:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009064:	931a      	str	r3, [sp, #104]	; 0x68
 8009066:	4654      	mov	r4, sl
 8009068:	2205      	movs	r2, #5
 800906a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800906e:	4854      	ldr	r0, [pc, #336]	; (80091c0 <_vfiprintf_r+0x220>)
 8009070:	f7f7 f8c6 	bl	8000200 <memchr>
 8009074:	9a04      	ldr	r2, [sp, #16]
 8009076:	b9d8      	cbnz	r0, 80090b0 <_vfiprintf_r+0x110>
 8009078:	06d1      	lsls	r1, r2, #27
 800907a:	bf44      	itt	mi
 800907c:	2320      	movmi	r3, #32
 800907e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009082:	0713      	lsls	r3, r2, #28
 8009084:	bf44      	itt	mi
 8009086:	232b      	movmi	r3, #43	; 0x2b
 8009088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800908c:	f89a 3000 	ldrb.w	r3, [sl]
 8009090:	2b2a      	cmp	r3, #42	; 0x2a
 8009092:	d015      	beq.n	80090c0 <_vfiprintf_r+0x120>
 8009094:	9a07      	ldr	r2, [sp, #28]
 8009096:	4654      	mov	r4, sl
 8009098:	2000      	movs	r0, #0
 800909a:	f04f 0c0a 	mov.w	ip, #10
 800909e:	4621      	mov	r1, r4
 80090a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090a4:	3b30      	subs	r3, #48	; 0x30
 80090a6:	2b09      	cmp	r3, #9
 80090a8:	d94d      	bls.n	8009146 <_vfiprintf_r+0x1a6>
 80090aa:	b1b0      	cbz	r0, 80090da <_vfiprintf_r+0x13a>
 80090ac:	9207      	str	r2, [sp, #28]
 80090ae:	e014      	b.n	80090da <_vfiprintf_r+0x13a>
 80090b0:	eba0 0308 	sub.w	r3, r0, r8
 80090b4:	fa09 f303 	lsl.w	r3, r9, r3
 80090b8:	4313      	orrs	r3, r2
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	46a2      	mov	sl, r4
 80090be:	e7d2      	b.n	8009066 <_vfiprintf_r+0xc6>
 80090c0:	9b03      	ldr	r3, [sp, #12]
 80090c2:	1d19      	adds	r1, r3, #4
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	9103      	str	r1, [sp, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	bfbb      	ittet	lt
 80090cc:	425b      	neglt	r3, r3
 80090ce:	f042 0202 	orrlt.w	r2, r2, #2
 80090d2:	9307      	strge	r3, [sp, #28]
 80090d4:	9307      	strlt	r3, [sp, #28]
 80090d6:	bfb8      	it	lt
 80090d8:	9204      	strlt	r2, [sp, #16]
 80090da:	7823      	ldrb	r3, [r4, #0]
 80090dc:	2b2e      	cmp	r3, #46	; 0x2e
 80090de:	d10c      	bne.n	80090fa <_vfiprintf_r+0x15a>
 80090e0:	7863      	ldrb	r3, [r4, #1]
 80090e2:	2b2a      	cmp	r3, #42	; 0x2a
 80090e4:	d134      	bne.n	8009150 <_vfiprintf_r+0x1b0>
 80090e6:	9b03      	ldr	r3, [sp, #12]
 80090e8:	1d1a      	adds	r2, r3, #4
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	9203      	str	r2, [sp, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	bfb8      	it	lt
 80090f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80090f6:	3402      	adds	r4, #2
 80090f8:	9305      	str	r3, [sp, #20]
 80090fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80091d0 <_vfiprintf_r+0x230>
 80090fe:	7821      	ldrb	r1, [r4, #0]
 8009100:	2203      	movs	r2, #3
 8009102:	4650      	mov	r0, sl
 8009104:	f7f7 f87c 	bl	8000200 <memchr>
 8009108:	b138      	cbz	r0, 800911a <_vfiprintf_r+0x17a>
 800910a:	9b04      	ldr	r3, [sp, #16]
 800910c:	eba0 000a 	sub.w	r0, r0, sl
 8009110:	2240      	movs	r2, #64	; 0x40
 8009112:	4082      	lsls	r2, r0
 8009114:	4313      	orrs	r3, r2
 8009116:	3401      	adds	r4, #1
 8009118:	9304      	str	r3, [sp, #16]
 800911a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911e:	4829      	ldr	r0, [pc, #164]	; (80091c4 <_vfiprintf_r+0x224>)
 8009120:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009124:	2206      	movs	r2, #6
 8009126:	f7f7 f86b 	bl	8000200 <memchr>
 800912a:	2800      	cmp	r0, #0
 800912c:	d03f      	beq.n	80091ae <_vfiprintf_r+0x20e>
 800912e:	4b26      	ldr	r3, [pc, #152]	; (80091c8 <_vfiprintf_r+0x228>)
 8009130:	bb1b      	cbnz	r3, 800917a <_vfiprintf_r+0x1da>
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	3307      	adds	r3, #7
 8009136:	f023 0307 	bic.w	r3, r3, #7
 800913a:	3308      	adds	r3, #8
 800913c:	9303      	str	r3, [sp, #12]
 800913e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009140:	443b      	add	r3, r7
 8009142:	9309      	str	r3, [sp, #36]	; 0x24
 8009144:	e768      	b.n	8009018 <_vfiprintf_r+0x78>
 8009146:	fb0c 3202 	mla	r2, ip, r2, r3
 800914a:	460c      	mov	r4, r1
 800914c:	2001      	movs	r0, #1
 800914e:	e7a6      	b.n	800909e <_vfiprintf_r+0xfe>
 8009150:	2300      	movs	r3, #0
 8009152:	3401      	adds	r4, #1
 8009154:	9305      	str	r3, [sp, #20]
 8009156:	4619      	mov	r1, r3
 8009158:	f04f 0c0a 	mov.w	ip, #10
 800915c:	4620      	mov	r0, r4
 800915e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009162:	3a30      	subs	r2, #48	; 0x30
 8009164:	2a09      	cmp	r2, #9
 8009166:	d903      	bls.n	8009170 <_vfiprintf_r+0x1d0>
 8009168:	2b00      	cmp	r3, #0
 800916a:	d0c6      	beq.n	80090fa <_vfiprintf_r+0x15a>
 800916c:	9105      	str	r1, [sp, #20]
 800916e:	e7c4      	b.n	80090fa <_vfiprintf_r+0x15a>
 8009170:	fb0c 2101 	mla	r1, ip, r1, r2
 8009174:	4604      	mov	r4, r0
 8009176:	2301      	movs	r3, #1
 8009178:	e7f0      	b.n	800915c <_vfiprintf_r+0x1bc>
 800917a:	ab03      	add	r3, sp, #12
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	462a      	mov	r2, r5
 8009180:	4b12      	ldr	r3, [pc, #72]	; (80091cc <_vfiprintf_r+0x22c>)
 8009182:	a904      	add	r1, sp, #16
 8009184:	4630      	mov	r0, r6
 8009186:	f7fe fb35 	bl	80077f4 <_printf_float>
 800918a:	4607      	mov	r7, r0
 800918c:	1c78      	adds	r0, r7, #1
 800918e:	d1d6      	bne.n	800913e <_vfiprintf_r+0x19e>
 8009190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009192:	07d9      	lsls	r1, r3, #31
 8009194:	d405      	bmi.n	80091a2 <_vfiprintf_r+0x202>
 8009196:	89ab      	ldrh	r3, [r5, #12]
 8009198:	059a      	lsls	r2, r3, #22
 800919a:	d402      	bmi.n	80091a2 <_vfiprintf_r+0x202>
 800919c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800919e:	f7ff f857 	bl	8008250 <__retarget_lock_release_recursive>
 80091a2:	89ab      	ldrh	r3, [r5, #12]
 80091a4:	065b      	lsls	r3, r3, #25
 80091a6:	f53f af1d 	bmi.w	8008fe4 <_vfiprintf_r+0x44>
 80091aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091ac:	e71c      	b.n	8008fe8 <_vfiprintf_r+0x48>
 80091ae:	ab03      	add	r3, sp, #12
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	462a      	mov	r2, r5
 80091b4:	4b05      	ldr	r3, [pc, #20]	; (80091cc <_vfiprintf_r+0x22c>)
 80091b6:	a904      	add	r1, sp, #16
 80091b8:	4630      	mov	r0, r6
 80091ba:	f7fe fdbf 	bl	8007d3c <_printf_i>
 80091be:	e7e4      	b.n	800918a <_vfiprintf_r+0x1ea>
 80091c0:	0800a2cd 	.word	0x0800a2cd
 80091c4:	0800a2d7 	.word	0x0800a2d7
 80091c8:	080077f5 	.word	0x080077f5
 80091cc:	08008f7b 	.word	0x08008f7b
 80091d0:	0800a2d3 	.word	0x0800a2d3

080091d4 <malloc>:
 80091d4:	4b02      	ldr	r3, [pc, #8]	; (80091e0 <malloc+0xc>)
 80091d6:	4601      	mov	r1, r0
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	f000 b823 	b.w	8009224 <_malloc_r>
 80091de:	bf00      	nop
 80091e0:	20000068 	.word	0x20000068

080091e4 <sbrk_aligned>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	4e0e      	ldr	r6, [pc, #56]	; (8009220 <sbrk_aligned+0x3c>)
 80091e8:	460c      	mov	r4, r1
 80091ea:	6831      	ldr	r1, [r6, #0]
 80091ec:	4605      	mov	r5, r0
 80091ee:	b911      	cbnz	r1, 80091f6 <sbrk_aligned+0x12>
 80091f0:	f000 fe5e 	bl	8009eb0 <_sbrk_r>
 80091f4:	6030      	str	r0, [r6, #0]
 80091f6:	4621      	mov	r1, r4
 80091f8:	4628      	mov	r0, r5
 80091fa:	f000 fe59 	bl	8009eb0 <_sbrk_r>
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	d00a      	beq.n	8009218 <sbrk_aligned+0x34>
 8009202:	1cc4      	adds	r4, r0, #3
 8009204:	f024 0403 	bic.w	r4, r4, #3
 8009208:	42a0      	cmp	r0, r4
 800920a:	d007      	beq.n	800921c <sbrk_aligned+0x38>
 800920c:	1a21      	subs	r1, r4, r0
 800920e:	4628      	mov	r0, r5
 8009210:	f000 fe4e 	bl	8009eb0 <_sbrk_r>
 8009214:	3001      	adds	r0, #1
 8009216:	d101      	bne.n	800921c <sbrk_aligned+0x38>
 8009218:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800921c:	4620      	mov	r0, r4
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	20000710 	.word	0x20000710

08009224 <_malloc_r>:
 8009224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009228:	1ccd      	adds	r5, r1, #3
 800922a:	f025 0503 	bic.w	r5, r5, #3
 800922e:	3508      	adds	r5, #8
 8009230:	2d0c      	cmp	r5, #12
 8009232:	bf38      	it	cc
 8009234:	250c      	movcc	r5, #12
 8009236:	2d00      	cmp	r5, #0
 8009238:	4607      	mov	r7, r0
 800923a:	db01      	blt.n	8009240 <_malloc_r+0x1c>
 800923c:	42a9      	cmp	r1, r5
 800923e:	d905      	bls.n	800924c <_malloc_r+0x28>
 8009240:	230c      	movs	r3, #12
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	2600      	movs	r6, #0
 8009246:	4630      	mov	r0, r6
 8009248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800924c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009320 <_malloc_r+0xfc>
 8009250:	f000 f916 	bl	8009480 <__malloc_lock>
 8009254:	f8d8 3000 	ldr.w	r3, [r8]
 8009258:	461c      	mov	r4, r3
 800925a:	bb5c      	cbnz	r4, 80092b4 <_malloc_r+0x90>
 800925c:	4629      	mov	r1, r5
 800925e:	4638      	mov	r0, r7
 8009260:	f7ff ffc0 	bl	80091e4 <sbrk_aligned>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	4604      	mov	r4, r0
 8009268:	d155      	bne.n	8009316 <_malloc_r+0xf2>
 800926a:	f8d8 4000 	ldr.w	r4, [r8]
 800926e:	4626      	mov	r6, r4
 8009270:	2e00      	cmp	r6, #0
 8009272:	d145      	bne.n	8009300 <_malloc_r+0xdc>
 8009274:	2c00      	cmp	r4, #0
 8009276:	d048      	beq.n	800930a <_malloc_r+0xe6>
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	4631      	mov	r1, r6
 800927c:	4638      	mov	r0, r7
 800927e:	eb04 0903 	add.w	r9, r4, r3
 8009282:	f000 fe15 	bl	8009eb0 <_sbrk_r>
 8009286:	4581      	cmp	r9, r0
 8009288:	d13f      	bne.n	800930a <_malloc_r+0xe6>
 800928a:	6821      	ldr	r1, [r4, #0]
 800928c:	1a6d      	subs	r5, r5, r1
 800928e:	4629      	mov	r1, r5
 8009290:	4638      	mov	r0, r7
 8009292:	f7ff ffa7 	bl	80091e4 <sbrk_aligned>
 8009296:	3001      	adds	r0, #1
 8009298:	d037      	beq.n	800930a <_malloc_r+0xe6>
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	442b      	add	r3, r5
 800929e:	6023      	str	r3, [r4, #0]
 80092a0:	f8d8 3000 	ldr.w	r3, [r8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d038      	beq.n	800931a <_malloc_r+0xf6>
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	42a2      	cmp	r2, r4
 80092ac:	d12b      	bne.n	8009306 <_malloc_r+0xe2>
 80092ae:	2200      	movs	r2, #0
 80092b0:	605a      	str	r2, [r3, #4]
 80092b2:	e00f      	b.n	80092d4 <_malloc_r+0xb0>
 80092b4:	6822      	ldr	r2, [r4, #0]
 80092b6:	1b52      	subs	r2, r2, r5
 80092b8:	d41f      	bmi.n	80092fa <_malloc_r+0xd6>
 80092ba:	2a0b      	cmp	r2, #11
 80092bc:	d917      	bls.n	80092ee <_malloc_r+0xca>
 80092be:	1961      	adds	r1, r4, r5
 80092c0:	42a3      	cmp	r3, r4
 80092c2:	6025      	str	r5, [r4, #0]
 80092c4:	bf18      	it	ne
 80092c6:	6059      	strne	r1, [r3, #4]
 80092c8:	6863      	ldr	r3, [r4, #4]
 80092ca:	bf08      	it	eq
 80092cc:	f8c8 1000 	streq.w	r1, [r8]
 80092d0:	5162      	str	r2, [r4, r5]
 80092d2:	604b      	str	r3, [r1, #4]
 80092d4:	4638      	mov	r0, r7
 80092d6:	f104 060b 	add.w	r6, r4, #11
 80092da:	f000 f8d7 	bl	800948c <__malloc_unlock>
 80092de:	f026 0607 	bic.w	r6, r6, #7
 80092e2:	1d23      	adds	r3, r4, #4
 80092e4:	1af2      	subs	r2, r6, r3
 80092e6:	d0ae      	beq.n	8009246 <_malloc_r+0x22>
 80092e8:	1b9b      	subs	r3, r3, r6
 80092ea:	50a3      	str	r3, [r4, r2]
 80092ec:	e7ab      	b.n	8009246 <_malloc_r+0x22>
 80092ee:	42a3      	cmp	r3, r4
 80092f0:	6862      	ldr	r2, [r4, #4]
 80092f2:	d1dd      	bne.n	80092b0 <_malloc_r+0x8c>
 80092f4:	f8c8 2000 	str.w	r2, [r8]
 80092f8:	e7ec      	b.n	80092d4 <_malloc_r+0xb0>
 80092fa:	4623      	mov	r3, r4
 80092fc:	6864      	ldr	r4, [r4, #4]
 80092fe:	e7ac      	b.n	800925a <_malloc_r+0x36>
 8009300:	4634      	mov	r4, r6
 8009302:	6876      	ldr	r6, [r6, #4]
 8009304:	e7b4      	b.n	8009270 <_malloc_r+0x4c>
 8009306:	4613      	mov	r3, r2
 8009308:	e7cc      	b.n	80092a4 <_malloc_r+0x80>
 800930a:	230c      	movs	r3, #12
 800930c:	603b      	str	r3, [r7, #0]
 800930e:	4638      	mov	r0, r7
 8009310:	f000 f8bc 	bl	800948c <__malloc_unlock>
 8009314:	e797      	b.n	8009246 <_malloc_r+0x22>
 8009316:	6025      	str	r5, [r4, #0]
 8009318:	e7dc      	b.n	80092d4 <_malloc_r+0xb0>
 800931a:	605b      	str	r3, [r3, #4]
 800931c:	deff      	udf	#255	; 0xff
 800931e:	bf00      	nop
 8009320:	2000070c 	.word	0x2000070c

08009324 <__sflush_r>:
 8009324:	898a      	ldrh	r2, [r1, #12]
 8009326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932a:	4605      	mov	r5, r0
 800932c:	0710      	lsls	r0, r2, #28
 800932e:	460c      	mov	r4, r1
 8009330:	d458      	bmi.n	80093e4 <__sflush_r+0xc0>
 8009332:	684b      	ldr	r3, [r1, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	dc05      	bgt.n	8009344 <__sflush_r+0x20>
 8009338:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800933a:	2b00      	cmp	r3, #0
 800933c:	dc02      	bgt.n	8009344 <__sflush_r+0x20>
 800933e:	2000      	movs	r0, #0
 8009340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009344:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009346:	2e00      	cmp	r6, #0
 8009348:	d0f9      	beq.n	800933e <__sflush_r+0x1a>
 800934a:	2300      	movs	r3, #0
 800934c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009350:	682f      	ldr	r7, [r5, #0]
 8009352:	6a21      	ldr	r1, [r4, #32]
 8009354:	602b      	str	r3, [r5, #0]
 8009356:	d032      	beq.n	80093be <__sflush_r+0x9a>
 8009358:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	075a      	lsls	r2, r3, #29
 800935e:	d505      	bpl.n	800936c <__sflush_r+0x48>
 8009360:	6863      	ldr	r3, [r4, #4]
 8009362:	1ac0      	subs	r0, r0, r3
 8009364:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009366:	b10b      	cbz	r3, 800936c <__sflush_r+0x48>
 8009368:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800936a:	1ac0      	subs	r0, r0, r3
 800936c:	2300      	movs	r3, #0
 800936e:	4602      	mov	r2, r0
 8009370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009372:	6a21      	ldr	r1, [r4, #32]
 8009374:	4628      	mov	r0, r5
 8009376:	47b0      	blx	r6
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	d106      	bne.n	800938c <__sflush_r+0x68>
 800937e:	6829      	ldr	r1, [r5, #0]
 8009380:	291d      	cmp	r1, #29
 8009382:	d82b      	bhi.n	80093dc <__sflush_r+0xb8>
 8009384:	4a29      	ldr	r2, [pc, #164]	; (800942c <__sflush_r+0x108>)
 8009386:	410a      	asrs	r2, r1
 8009388:	07d6      	lsls	r6, r2, #31
 800938a:	d427      	bmi.n	80093dc <__sflush_r+0xb8>
 800938c:	2200      	movs	r2, #0
 800938e:	6062      	str	r2, [r4, #4]
 8009390:	04d9      	lsls	r1, r3, #19
 8009392:	6922      	ldr	r2, [r4, #16]
 8009394:	6022      	str	r2, [r4, #0]
 8009396:	d504      	bpl.n	80093a2 <__sflush_r+0x7e>
 8009398:	1c42      	adds	r2, r0, #1
 800939a:	d101      	bne.n	80093a0 <__sflush_r+0x7c>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b903      	cbnz	r3, 80093a2 <__sflush_r+0x7e>
 80093a0:	6560      	str	r0, [r4, #84]	; 0x54
 80093a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093a4:	602f      	str	r7, [r5, #0]
 80093a6:	2900      	cmp	r1, #0
 80093a8:	d0c9      	beq.n	800933e <__sflush_r+0x1a>
 80093aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093ae:	4299      	cmp	r1, r3
 80093b0:	d002      	beq.n	80093b8 <__sflush_r+0x94>
 80093b2:	4628      	mov	r0, r5
 80093b4:	f000 fde0 	bl	8009f78 <_free_r>
 80093b8:	2000      	movs	r0, #0
 80093ba:	6360      	str	r0, [r4, #52]	; 0x34
 80093bc:	e7c0      	b.n	8009340 <__sflush_r+0x1c>
 80093be:	2301      	movs	r3, #1
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b0      	blx	r6
 80093c4:	1c41      	adds	r1, r0, #1
 80093c6:	d1c8      	bne.n	800935a <__sflush_r+0x36>
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d0c5      	beq.n	800935a <__sflush_r+0x36>
 80093ce:	2b1d      	cmp	r3, #29
 80093d0:	d001      	beq.n	80093d6 <__sflush_r+0xb2>
 80093d2:	2b16      	cmp	r3, #22
 80093d4:	d101      	bne.n	80093da <__sflush_r+0xb6>
 80093d6:	602f      	str	r7, [r5, #0]
 80093d8:	e7b1      	b.n	800933e <__sflush_r+0x1a>
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e0:	81a3      	strh	r3, [r4, #12]
 80093e2:	e7ad      	b.n	8009340 <__sflush_r+0x1c>
 80093e4:	690f      	ldr	r7, [r1, #16]
 80093e6:	2f00      	cmp	r7, #0
 80093e8:	d0a9      	beq.n	800933e <__sflush_r+0x1a>
 80093ea:	0793      	lsls	r3, r2, #30
 80093ec:	680e      	ldr	r6, [r1, #0]
 80093ee:	bf08      	it	eq
 80093f0:	694b      	ldreq	r3, [r1, #20]
 80093f2:	600f      	str	r7, [r1, #0]
 80093f4:	bf18      	it	ne
 80093f6:	2300      	movne	r3, #0
 80093f8:	eba6 0807 	sub.w	r8, r6, r7
 80093fc:	608b      	str	r3, [r1, #8]
 80093fe:	f1b8 0f00 	cmp.w	r8, #0
 8009402:	dd9c      	ble.n	800933e <__sflush_r+0x1a>
 8009404:	6a21      	ldr	r1, [r4, #32]
 8009406:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009408:	4643      	mov	r3, r8
 800940a:	463a      	mov	r2, r7
 800940c:	4628      	mov	r0, r5
 800940e:	47b0      	blx	r6
 8009410:	2800      	cmp	r0, #0
 8009412:	dc06      	bgt.n	8009422 <__sflush_r+0xfe>
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800941a:	81a3      	strh	r3, [r4, #12]
 800941c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009420:	e78e      	b.n	8009340 <__sflush_r+0x1c>
 8009422:	4407      	add	r7, r0
 8009424:	eba8 0800 	sub.w	r8, r8, r0
 8009428:	e7e9      	b.n	80093fe <__sflush_r+0xda>
 800942a:	bf00      	nop
 800942c:	dfbffffe 	.word	0xdfbffffe

08009430 <_fflush_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	690b      	ldr	r3, [r1, #16]
 8009434:	4605      	mov	r5, r0
 8009436:	460c      	mov	r4, r1
 8009438:	b913      	cbnz	r3, 8009440 <_fflush_r+0x10>
 800943a:	2500      	movs	r5, #0
 800943c:	4628      	mov	r0, r5
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	b118      	cbz	r0, 800944a <_fflush_r+0x1a>
 8009442:	6a03      	ldr	r3, [r0, #32]
 8009444:	b90b      	cbnz	r3, 800944a <_fflush_r+0x1a>
 8009446:	f7fe fe27 	bl	8008098 <__sinit>
 800944a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d0f3      	beq.n	800943a <_fflush_r+0xa>
 8009452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009454:	07d0      	lsls	r0, r2, #31
 8009456:	d404      	bmi.n	8009462 <_fflush_r+0x32>
 8009458:	0599      	lsls	r1, r3, #22
 800945a:	d402      	bmi.n	8009462 <_fflush_r+0x32>
 800945c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800945e:	f7fe fef6 	bl	800824e <__retarget_lock_acquire_recursive>
 8009462:	4628      	mov	r0, r5
 8009464:	4621      	mov	r1, r4
 8009466:	f7ff ff5d 	bl	8009324 <__sflush_r>
 800946a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800946c:	07da      	lsls	r2, r3, #31
 800946e:	4605      	mov	r5, r0
 8009470:	d4e4      	bmi.n	800943c <_fflush_r+0xc>
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	059b      	lsls	r3, r3, #22
 8009476:	d4e1      	bmi.n	800943c <_fflush_r+0xc>
 8009478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800947a:	f7fe fee9 	bl	8008250 <__retarget_lock_release_recursive>
 800947e:	e7dd      	b.n	800943c <_fflush_r+0xc>

08009480 <__malloc_lock>:
 8009480:	4801      	ldr	r0, [pc, #4]	; (8009488 <__malloc_lock+0x8>)
 8009482:	f7fe bee4 	b.w	800824e <__retarget_lock_acquire_recursive>
 8009486:	bf00      	nop
 8009488:	20000708 	.word	0x20000708

0800948c <__malloc_unlock>:
 800948c:	4801      	ldr	r0, [pc, #4]	; (8009494 <__malloc_unlock+0x8>)
 800948e:	f7fe bedf 	b.w	8008250 <__retarget_lock_release_recursive>
 8009492:	bf00      	nop
 8009494:	20000708 	.word	0x20000708

08009498 <_Balloc>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	69c6      	ldr	r6, [r0, #28]
 800949c:	4604      	mov	r4, r0
 800949e:	460d      	mov	r5, r1
 80094a0:	b976      	cbnz	r6, 80094c0 <_Balloc+0x28>
 80094a2:	2010      	movs	r0, #16
 80094a4:	f7ff fe96 	bl	80091d4 <malloc>
 80094a8:	4602      	mov	r2, r0
 80094aa:	61e0      	str	r0, [r4, #28]
 80094ac:	b920      	cbnz	r0, 80094b8 <_Balloc+0x20>
 80094ae:	4b18      	ldr	r3, [pc, #96]	; (8009510 <_Balloc+0x78>)
 80094b0:	4818      	ldr	r0, [pc, #96]	; (8009514 <_Balloc+0x7c>)
 80094b2:	216b      	movs	r1, #107	; 0x6b
 80094b4:	f000 fd2c 	bl	8009f10 <__assert_func>
 80094b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094bc:	6006      	str	r6, [r0, #0]
 80094be:	60c6      	str	r6, [r0, #12]
 80094c0:	69e6      	ldr	r6, [r4, #28]
 80094c2:	68f3      	ldr	r3, [r6, #12]
 80094c4:	b183      	cbz	r3, 80094e8 <_Balloc+0x50>
 80094c6:	69e3      	ldr	r3, [r4, #28]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094ce:	b9b8      	cbnz	r0, 8009500 <_Balloc+0x68>
 80094d0:	2101      	movs	r1, #1
 80094d2:	fa01 f605 	lsl.w	r6, r1, r5
 80094d6:	1d72      	adds	r2, r6, #5
 80094d8:	0092      	lsls	r2, r2, #2
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fd36 	bl	8009f4c <_calloc_r>
 80094e0:	b160      	cbz	r0, 80094fc <_Balloc+0x64>
 80094e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094e6:	e00e      	b.n	8009506 <_Balloc+0x6e>
 80094e8:	2221      	movs	r2, #33	; 0x21
 80094ea:	2104      	movs	r1, #4
 80094ec:	4620      	mov	r0, r4
 80094ee:	f000 fd2d 	bl	8009f4c <_calloc_r>
 80094f2:	69e3      	ldr	r3, [r4, #28]
 80094f4:	60f0      	str	r0, [r6, #12]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e4      	bne.n	80094c6 <_Balloc+0x2e>
 80094fc:	2000      	movs	r0, #0
 80094fe:	bd70      	pop	{r4, r5, r6, pc}
 8009500:	6802      	ldr	r2, [r0, #0]
 8009502:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009506:	2300      	movs	r3, #0
 8009508:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800950c:	e7f7      	b.n	80094fe <_Balloc+0x66>
 800950e:	bf00      	nop
 8009510:	0800a24d 	.word	0x0800a24d
 8009514:	0800a2de 	.word	0x0800a2de

08009518 <_Bfree>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	69c6      	ldr	r6, [r0, #28]
 800951c:	4605      	mov	r5, r0
 800951e:	460c      	mov	r4, r1
 8009520:	b976      	cbnz	r6, 8009540 <_Bfree+0x28>
 8009522:	2010      	movs	r0, #16
 8009524:	f7ff fe56 	bl	80091d4 <malloc>
 8009528:	4602      	mov	r2, r0
 800952a:	61e8      	str	r0, [r5, #28]
 800952c:	b920      	cbnz	r0, 8009538 <_Bfree+0x20>
 800952e:	4b09      	ldr	r3, [pc, #36]	; (8009554 <_Bfree+0x3c>)
 8009530:	4809      	ldr	r0, [pc, #36]	; (8009558 <_Bfree+0x40>)
 8009532:	218f      	movs	r1, #143	; 0x8f
 8009534:	f000 fcec 	bl	8009f10 <__assert_func>
 8009538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800953c:	6006      	str	r6, [r0, #0]
 800953e:	60c6      	str	r6, [r0, #12]
 8009540:	b13c      	cbz	r4, 8009552 <_Bfree+0x3a>
 8009542:	69eb      	ldr	r3, [r5, #28]
 8009544:	6862      	ldr	r2, [r4, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800954c:	6021      	str	r1, [r4, #0]
 800954e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009552:	bd70      	pop	{r4, r5, r6, pc}
 8009554:	0800a24d 	.word	0x0800a24d
 8009558:	0800a2de 	.word	0x0800a2de

0800955c <__multadd>:
 800955c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009560:	690d      	ldr	r5, [r1, #16]
 8009562:	4607      	mov	r7, r0
 8009564:	460c      	mov	r4, r1
 8009566:	461e      	mov	r6, r3
 8009568:	f101 0c14 	add.w	ip, r1, #20
 800956c:	2000      	movs	r0, #0
 800956e:	f8dc 3000 	ldr.w	r3, [ip]
 8009572:	b299      	uxth	r1, r3
 8009574:	fb02 6101 	mla	r1, r2, r1, r6
 8009578:	0c1e      	lsrs	r6, r3, #16
 800957a:	0c0b      	lsrs	r3, r1, #16
 800957c:	fb02 3306 	mla	r3, r2, r6, r3
 8009580:	b289      	uxth	r1, r1
 8009582:	3001      	adds	r0, #1
 8009584:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009588:	4285      	cmp	r5, r0
 800958a:	f84c 1b04 	str.w	r1, [ip], #4
 800958e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009592:	dcec      	bgt.n	800956e <__multadd+0x12>
 8009594:	b30e      	cbz	r6, 80095da <__multadd+0x7e>
 8009596:	68a3      	ldr	r3, [r4, #8]
 8009598:	42ab      	cmp	r3, r5
 800959a:	dc19      	bgt.n	80095d0 <__multadd+0x74>
 800959c:	6861      	ldr	r1, [r4, #4]
 800959e:	4638      	mov	r0, r7
 80095a0:	3101      	adds	r1, #1
 80095a2:	f7ff ff79 	bl	8009498 <_Balloc>
 80095a6:	4680      	mov	r8, r0
 80095a8:	b928      	cbnz	r0, 80095b6 <__multadd+0x5a>
 80095aa:	4602      	mov	r2, r0
 80095ac:	4b0c      	ldr	r3, [pc, #48]	; (80095e0 <__multadd+0x84>)
 80095ae:	480d      	ldr	r0, [pc, #52]	; (80095e4 <__multadd+0x88>)
 80095b0:	21ba      	movs	r1, #186	; 0xba
 80095b2:	f000 fcad 	bl	8009f10 <__assert_func>
 80095b6:	6922      	ldr	r2, [r4, #16]
 80095b8:	3202      	adds	r2, #2
 80095ba:	f104 010c 	add.w	r1, r4, #12
 80095be:	0092      	lsls	r2, r2, #2
 80095c0:	300c      	adds	r0, #12
 80095c2:	f000 fc97 	bl	8009ef4 <memcpy>
 80095c6:	4621      	mov	r1, r4
 80095c8:	4638      	mov	r0, r7
 80095ca:	f7ff ffa5 	bl	8009518 <_Bfree>
 80095ce:	4644      	mov	r4, r8
 80095d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80095d4:	3501      	adds	r5, #1
 80095d6:	615e      	str	r6, [r3, #20]
 80095d8:	6125      	str	r5, [r4, #16]
 80095da:	4620      	mov	r0, r4
 80095dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e0:	0800a2bc 	.word	0x0800a2bc
 80095e4:	0800a2de 	.word	0x0800a2de

080095e8 <__hi0bits>:
 80095e8:	0c03      	lsrs	r3, r0, #16
 80095ea:	041b      	lsls	r3, r3, #16
 80095ec:	b9d3      	cbnz	r3, 8009624 <__hi0bits+0x3c>
 80095ee:	0400      	lsls	r0, r0, #16
 80095f0:	2310      	movs	r3, #16
 80095f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80095f6:	bf04      	itt	eq
 80095f8:	0200      	lsleq	r0, r0, #8
 80095fa:	3308      	addeq	r3, #8
 80095fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009600:	bf04      	itt	eq
 8009602:	0100      	lsleq	r0, r0, #4
 8009604:	3304      	addeq	r3, #4
 8009606:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800960a:	bf04      	itt	eq
 800960c:	0080      	lsleq	r0, r0, #2
 800960e:	3302      	addeq	r3, #2
 8009610:	2800      	cmp	r0, #0
 8009612:	db05      	blt.n	8009620 <__hi0bits+0x38>
 8009614:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009618:	f103 0301 	add.w	r3, r3, #1
 800961c:	bf08      	it	eq
 800961e:	2320      	moveq	r3, #32
 8009620:	4618      	mov	r0, r3
 8009622:	4770      	bx	lr
 8009624:	2300      	movs	r3, #0
 8009626:	e7e4      	b.n	80095f2 <__hi0bits+0xa>

08009628 <__lo0bits>:
 8009628:	6803      	ldr	r3, [r0, #0]
 800962a:	f013 0207 	ands.w	r2, r3, #7
 800962e:	d00c      	beq.n	800964a <__lo0bits+0x22>
 8009630:	07d9      	lsls	r1, r3, #31
 8009632:	d422      	bmi.n	800967a <__lo0bits+0x52>
 8009634:	079a      	lsls	r2, r3, #30
 8009636:	bf49      	itett	mi
 8009638:	085b      	lsrmi	r3, r3, #1
 800963a:	089b      	lsrpl	r3, r3, #2
 800963c:	6003      	strmi	r3, [r0, #0]
 800963e:	2201      	movmi	r2, #1
 8009640:	bf5c      	itt	pl
 8009642:	6003      	strpl	r3, [r0, #0]
 8009644:	2202      	movpl	r2, #2
 8009646:	4610      	mov	r0, r2
 8009648:	4770      	bx	lr
 800964a:	b299      	uxth	r1, r3
 800964c:	b909      	cbnz	r1, 8009652 <__lo0bits+0x2a>
 800964e:	0c1b      	lsrs	r3, r3, #16
 8009650:	2210      	movs	r2, #16
 8009652:	b2d9      	uxtb	r1, r3
 8009654:	b909      	cbnz	r1, 800965a <__lo0bits+0x32>
 8009656:	3208      	adds	r2, #8
 8009658:	0a1b      	lsrs	r3, r3, #8
 800965a:	0719      	lsls	r1, r3, #28
 800965c:	bf04      	itt	eq
 800965e:	091b      	lsreq	r3, r3, #4
 8009660:	3204      	addeq	r2, #4
 8009662:	0799      	lsls	r1, r3, #30
 8009664:	bf04      	itt	eq
 8009666:	089b      	lsreq	r3, r3, #2
 8009668:	3202      	addeq	r2, #2
 800966a:	07d9      	lsls	r1, r3, #31
 800966c:	d403      	bmi.n	8009676 <__lo0bits+0x4e>
 800966e:	085b      	lsrs	r3, r3, #1
 8009670:	f102 0201 	add.w	r2, r2, #1
 8009674:	d003      	beq.n	800967e <__lo0bits+0x56>
 8009676:	6003      	str	r3, [r0, #0]
 8009678:	e7e5      	b.n	8009646 <__lo0bits+0x1e>
 800967a:	2200      	movs	r2, #0
 800967c:	e7e3      	b.n	8009646 <__lo0bits+0x1e>
 800967e:	2220      	movs	r2, #32
 8009680:	e7e1      	b.n	8009646 <__lo0bits+0x1e>
	...

08009684 <__i2b>:
 8009684:	b510      	push	{r4, lr}
 8009686:	460c      	mov	r4, r1
 8009688:	2101      	movs	r1, #1
 800968a:	f7ff ff05 	bl	8009498 <_Balloc>
 800968e:	4602      	mov	r2, r0
 8009690:	b928      	cbnz	r0, 800969e <__i2b+0x1a>
 8009692:	4b05      	ldr	r3, [pc, #20]	; (80096a8 <__i2b+0x24>)
 8009694:	4805      	ldr	r0, [pc, #20]	; (80096ac <__i2b+0x28>)
 8009696:	f240 1145 	movw	r1, #325	; 0x145
 800969a:	f000 fc39 	bl	8009f10 <__assert_func>
 800969e:	2301      	movs	r3, #1
 80096a0:	6144      	str	r4, [r0, #20]
 80096a2:	6103      	str	r3, [r0, #16]
 80096a4:	bd10      	pop	{r4, pc}
 80096a6:	bf00      	nop
 80096a8:	0800a2bc 	.word	0x0800a2bc
 80096ac:	0800a2de 	.word	0x0800a2de

080096b0 <__multiply>:
 80096b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b4:	4691      	mov	r9, r2
 80096b6:	690a      	ldr	r2, [r1, #16]
 80096b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096bc:	429a      	cmp	r2, r3
 80096be:	bfb8      	it	lt
 80096c0:	460b      	movlt	r3, r1
 80096c2:	460c      	mov	r4, r1
 80096c4:	bfbc      	itt	lt
 80096c6:	464c      	movlt	r4, r9
 80096c8:	4699      	movlt	r9, r3
 80096ca:	6927      	ldr	r7, [r4, #16]
 80096cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80096d0:	68a3      	ldr	r3, [r4, #8]
 80096d2:	6861      	ldr	r1, [r4, #4]
 80096d4:	eb07 060a 	add.w	r6, r7, sl
 80096d8:	42b3      	cmp	r3, r6
 80096da:	b085      	sub	sp, #20
 80096dc:	bfb8      	it	lt
 80096de:	3101      	addlt	r1, #1
 80096e0:	f7ff feda 	bl	8009498 <_Balloc>
 80096e4:	b930      	cbnz	r0, 80096f4 <__multiply+0x44>
 80096e6:	4602      	mov	r2, r0
 80096e8:	4b44      	ldr	r3, [pc, #272]	; (80097fc <__multiply+0x14c>)
 80096ea:	4845      	ldr	r0, [pc, #276]	; (8009800 <__multiply+0x150>)
 80096ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80096f0:	f000 fc0e 	bl	8009f10 <__assert_func>
 80096f4:	f100 0514 	add.w	r5, r0, #20
 80096f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80096fc:	462b      	mov	r3, r5
 80096fe:	2200      	movs	r2, #0
 8009700:	4543      	cmp	r3, r8
 8009702:	d321      	bcc.n	8009748 <__multiply+0x98>
 8009704:	f104 0314 	add.w	r3, r4, #20
 8009708:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800970c:	f109 0314 	add.w	r3, r9, #20
 8009710:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009714:	9202      	str	r2, [sp, #8]
 8009716:	1b3a      	subs	r2, r7, r4
 8009718:	3a15      	subs	r2, #21
 800971a:	f022 0203 	bic.w	r2, r2, #3
 800971e:	3204      	adds	r2, #4
 8009720:	f104 0115 	add.w	r1, r4, #21
 8009724:	428f      	cmp	r7, r1
 8009726:	bf38      	it	cc
 8009728:	2204      	movcc	r2, #4
 800972a:	9201      	str	r2, [sp, #4]
 800972c:	9a02      	ldr	r2, [sp, #8]
 800972e:	9303      	str	r3, [sp, #12]
 8009730:	429a      	cmp	r2, r3
 8009732:	d80c      	bhi.n	800974e <__multiply+0x9e>
 8009734:	2e00      	cmp	r6, #0
 8009736:	dd03      	ble.n	8009740 <__multiply+0x90>
 8009738:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800973c:	2b00      	cmp	r3, #0
 800973e:	d05b      	beq.n	80097f8 <__multiply+0x148>
 8009740:	6106      	str	r6, [r0, #16]
 8009742:	b005      	add	sp, #20
 8009744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009748:	f843 2b04 	str.w	r2, [r3], #4
 800974c:	e7d8      	b.n	8009700 <__multiply+0x50>
 800974e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009752:	f1ba 0f00 	cmp.w	sl, #0
 8009756:	d024      	beq.n	80097a2 <__multiply+0xf2>
 8009758:	f104 0e14 	add.w	lr, r4, #20
 800975c:	46a9      	mov	r9, r5
 800975e:	f04f 0c00 	mov.w	ip, #0
 8009762:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009766:	f8d9 1000 	ldr.w	r1, [r9]
 800976a:	fa1f fb82 	uxth.w	fp, r2
 800976e:	b289      	uxth	r1, r1
 8009770:	fb0a 110b 	mla	r1, sl, fp, r1
 8009774:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009778:	f8d9 2000 	ldr.w	r2, [r9]
 800977c:	4461      	add	r1, ip
 800977e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009782:	fb0a c20b 	mla	r2, sl, fp, ip
 8009786:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800978a:	b289      	uxth	r1, r1
 800978c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009790:	4577      	cmp	r7, lr
 8009792:	f849 1b04 	str.w	r1, [r9], #4
 8009796:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800979a:	d8e2      	bhi.n	8009762 <__multiply+0xb2>
 800979c:	9a01      	ldr	r2, [sp, #4]
 800979e:	f845 c002 	str.w	ip, [r5, r2]
 80097a2:	9a03      	ldr	r2, [sp, #12]
 80097a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097a8:	3304      	adds	r3, #4
 80097aa:	f1b9 0f00 	cmp.w	r9, #0
 80097ae:	d021      	beq.n	80097f4 <__multiply+0x144>
 80097b0:	6829      	ldr	r1, [r5, #0]
 80097b2:	f104 0c14 	add.w	ip, r4, #20
 80097b6:	46ae      	mov	lr, r5
 80097b8:	f04f 0a00 	mov.w	sl, #0
 80097bc:	f8bc b000 	ldrh.w	fp, [ip]
 80097c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80097c4:	fb09 220b 	mla	r2, r9, fp, r2
 80097c8:	4452      	add	r2, sl
 80097ca:	b289      	uxth	r1, r1
 80097cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097d0:	f84e 1b04 	str.w	r1, [lr], #4
 80097d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80097d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80097dc:	f8be 1000 	ldrh.w	r1, [lr]
 80097e0:	fb09 110a 	mla	r1, r9, sl, r1
 80097e4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80097e8:	4567      	cmp	r7, ip
 80097ea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80097ee:	d8e5      	bhi.n	80097bc <__multiply+0x10c>
 80097f0:	9a01      	ldr	r2, [sp, #4]
 80097f2:	50a9      	str	r1, [r5, r2]
 80097f4:	3504      	adds	r5, #4
 80097f6:	e799      	b.n	800972c <__multiply+0x7c>
 80097f8:	3e01      	subs	r6, #1
 80097fa:	e79b      	b.n	8009734 <__multiply+0x84>
 80097fc:	0800a2bc 	.word	0x0800a2bc
 8009800:	0800a2de 	.word	0x0800a2de

08009804 <__pow5mult>:
 8009804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009808:	4615      	mov	r5, r2
 800980a:	f012 0203 	ands.w	r2, r2, #3
 800980e:	4606      	mov	r6, r0
 8009810:	460f      	mov	r7, r1
 8009812:	d007      	beq.n	8009824 <__pow5mult+0x20>
 8009814:	4c25      	ldr	r4, [pc, #148]	; (80098ac <__pow5mult+0xa8>)
 8009816:	3a01      	subs	r2, #1
 8009818:	2300      	movs	r3, #0
 800981a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800981e:	f7ff fe9d 	bl	800955c <__multadd>
 8009822:	4607      	mov	r7, r0
 8009824:	10ad      	asrs	r5, r5, #2
 8009826:	d03d      	beq.n	80098a4 <__pow5mult+0xa0>
 8009828:	69f4      	ldr	r4, [r6, #28]
 800982a:	b97c      	cbnz	r4, 800984c <__pow5mult+0x48>
 800982c:	2010      	movs	r0, #16
 800982e:	f7ff fcd1 	bl	80091d4 <malloc>
 8009832:	4602      	mov	r2, r0
 8009834:	61f0      	str	r0, [r6, #28]
 8009836:	b928      	cbnz	r0, 8009844 <__pow5mult+0x40>
 8009838:	4b1d      	ldr	r3, [pc, #116]	; (80098b0 <__pow5mult+0xac>)
 800983a:	481e      	ldr	r0, [pc, #120]	; (80098b4 <__pow5mult+0xb0>)
 800983c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009840:	f000 fb66 	bl	8009f10 <__assert_func>
 8009844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009848:	6004      	str	r4, [r0, #0]
 800984a:	60c4      	str	r4, [r0, #12]
 800984c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009850:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009854:	b94c      	cbnz	r4, 800986a <__pow5mult+0x66>
 8009856:	f240 2171 	movw	r1, #625	; 0x271
 800985a:	4630      	mov	r0, r6
 800985c:	f7ff ff12 	bl	8009684 <__i2b>
 8009860:	2300      	movs	r3, #0
 8009862:	f8c8 0008 	str.w	r0, [r8, #8]
 8009866:	4604      	mov	r4, r0
 8009868:	6003      	str	r3, [r0, #0]
 800986a:	f04f 0900 	mov.w	r9, #0
 800986e:	07eb      	lsls	r3, r5, #31
 8009870:	d50a      	bpl.n	8009888 <__pow5mult+0x84>
 8009872:	4639      	mov	r1, r7
 8009874:	4622      	mov	r2, r4
 8009876:	4630      	mov	r0, r6
 8009878:	f7ff ff1a 	bl	80096b0 <__multiply>
 800987c:	4639      	mov	r1, r7
 800987e:	4680      	mov	r8, r0
 8009880:	4630      	mov	r0, r6
 8009882:	f7ff fe49 	bl	8009518 <_Bfree>
 8009886:	4647      	mov	r7, r8
 8009888:	106d      	asrs	r5, r5, #1
 800988a:	d00b      	beq.n	80098a4 <__pow5mult+0xa0>
 800988c:	6820      	ldr	r0, [r4, #0]
 800988e:	b938      	cbnz	r0, 80098a0 <__pow5mult+0x9c>
 8009890:	4622      	mov	r2, r4
 8009892:	4621      	mov	r1, r4
 8009894:	4630      	mov	r0, r6
 8009896:	f7ff ff0b 	bl	80096b0 <__multiply>
 800989a:	6020      	str	r0, [r4, #0]
 800989c:	f8c0 9000 	str.w	r9, [r0]
 80098a0:	4604      	mov	r4, r0
 80098a2:	e7e4      	b.n	800986e <__pow5mult+0x6a>
 80098a4:	4638      	mov	r0, r7
 80098a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098aa:	bf00      	nop
 80098ac:	0800a428 	.word	0x0800a428
 80098b0:	0800a24d 	.word	0x0800a24d
 80098b4:	0800a2de 	.word	0x0800a2de

080098b8 <__lshift>:
 80098b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098bc:	460c      	mov	r4, r1
 80098be:	6849      	ldr	r1, [r1, #4]
 80098c0:	6923      	ldr	r3, [r4, #16]
 80098c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098c6:	68a3      	ldr	r3, [r4, #8]
 80098c8:	4607      	mov	r7, r0
 80098ca:	4691      	mov	r9, r2
 80098cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098d0:	f108 0601 	add.w	r6, r8, #1
 80098d4:	42b3      	cmp	r3, r6
 80098d6:	db0b      	blt.n	80098f0 <__lshift+0x38>
 80098d8:	4638      	mov	r0, r7
 80098da:	f7ff fddd 	bl	8009498 <_Balloc>
 80098de:	4605      	mov	r5, r0
 80098e0:	b948      	cbnz	r0, 80098f6 <__lshift+0x3e>
 80098e2:	4602      	mov	r2, r0
 80098e4:	4b28      	ldr	r3, [pc, #160]	; (8009988 <__lshift+0xd0>)
 80098e6:	4829      	ldr	r0, [pc, #164]	; (800998c <__lshift+0xd4>)
 80098e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80098ec:	f000 fb10 	bl	8009f10 <__assert_func>
 80098f0:	3101      	adds	r1, #1
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	e7ee      	b.n	80098d4 <__lshift+0x1c>
 80098f6:	2300      	movs	r3, #0
 80098f8:	f100 0114 	add.w	r1, r0, #20
 80098fc:	f100 0210 	add.w	r2, r0, #16
 8009900:	4618      	mov	r0, r3
 8009902:	4553      	cmp	r3, sl
 8009904:	db33      	blt.n	800996e <__lshift+0xb6>
 8009906:	6920      	ldr	r0, [r4, #16]
 8009908:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800990c:	f104 0314 	add.w	r3, r4, #20
 8009910:	f019 091f 	ands.w	r9, r9, #31
 8009914:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009918:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800991c:	d02b      	beq.n	8009976 <__lshift+0xbe>
 800991e:	f1c9 0e20 	rsb	lr, r9, #32
 8009922:	468a      	mov	sl, r1
 8009924:	2200      	movs	r2, #0
 8009926:	6818      	ldr	r0, [r3, #0]
 8009928:	fa00 f009 	lsl.w	r0, r0, r9
 800992c:	4310      	orrs	r0, r2
 800992e:	f84a 0b04 	str.w	r0, [sl], #4
 8009932:	f853 2b04 	ldr.w	r2, [r3], #4
 8009936:	459c      	cmp	ip, r3
 8009938:	fa22 f20e 	lsr.w	r2, r2, lr
 800993c:	d8f3      	bhi.n	8009926 <__lshift+0x6e>
 800993e:	ebac 0304 	sub.w	r3, ip, r4
 8009942:	3b15      	subs	r3, #21
 8009944:	f023 0303 	bic.w	r3, r3, #3
 8009948:	3304      	adds	r3, #4
 800994a:	f104 0015 	add.w	r0, r4, #21
 800994e:	4584      	cmp	ip, r0
 8009950:	bf38      	it	cc
 8009952:	2304      	movcc	r3, #4
 8009954:	50ca      	str	r2, [r1, r3]
 8009956:	b10a      	cbz	r2, 800995c <__lshift+0xa4>
 8009958:	f108 0602 	add.w	r6, r8, #2
 800995c:	3e01      	subs	r6, #1
 800995e:	4638      	mov	r0, r7
 8009960:	612e      	str	r6, [r5, #16]
 8009962:	4621      	mov	r1, r4
 8009964:	f7ff fdd8 	bl	8009518 <_Bfree>
 8009968:	4628      	mov	r0, r5
 800996a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800996e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009972:	3301      	adds	r3, #1
 8009974:	e7c5      	b.n	8009902 <__lshift+0x4a>
 8009976:	3904      	subs	r1, #4
 8009978:	f853 2b04 	ldr.w	r2, [r3], #4
 800997c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009980:	459c      	cmp	ip, r3
 8009982:	d8f9      	bhi.n	8009978 <__lshift+0xc0>
 8009984:	e7ea      	b.n	800995c <__lshift+0xa4>
 8009986:	bf00      	nop
 8009988:	0800a2bc 	.word	0x0800a2bc
 800998c:	0800a2de 	.word	0x0800a2de

08009990 <__mcmp>:
 8009990:	b530      	push	{r4, r5, lr}
 8009992:	6902      	ldr	r2, [r0, #16]
 8009994:	690c      	ldr	r4, [r1, #16]
 8009996:	1b12      	subs	r2, r2, r4
 8009998:	d10e      	bne.n	80099b8 <__mcmp+0x28>
 800999a:	f100 0314 	add.w	r3, r0, #20
 800999e:	3114      	adds	r1, #20
 80099a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80099a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80099a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80099ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80099b0:	42a5      	cmp	r5, r4
 80099b2:	d003      	beq.n	80099bc <__mcmp+0x2c>
 80099b4:	d305      	bcc.n	80099c2 <__mcmp+0x32>
 80099b6:	2201      	movs	r2, #1
 80099b8:	4610      	mov	r0, r2
 80099ba:	bd30      	pop	{r4, r5, pc}
 80099bc:	4283      	cmp	r3, r0
 80099be:	d3f3      	bcc.n	80099a8 <__mcmp+0x18>
 80099c0:	e7fa      	b.n	80099b8 <__mcmp+0x28>
 80099c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099c6:	e7f7      	b.n	80099b8 <__mcmp+0x28>

080099c8 <__mdiff>:
 80099c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099cc:	460c      	mov	r4, r1
 80099ce:	4606      	mov	r6, r0
 80099d0:	4611      	mov	r1, r2
 80099d2:	4620      	mov	r0, r4
 80099d4:	4690      	mov	r8, r2
 80099d6:	f7ff ffdb 	bl	8009990 <__mcmp>
 80099da:	1e05      	subs	r5, r0, #0
 80099dc:	d110      	bne.n	8009a00 <__mdiff+0x38>
 80099de:	4629      	mov	r1, r5
 80099e0:	4630      	mov	r0, r6
 80099e2:	f7ff fd59 	bl	8009498 <_Balloc>
 80099e6:	b930      	cbnz	r0, 80099f6 <__mdiff+0x2e>
 80099e8:	4b3a      	ldr	r3, [pc, #232]	; (8009ad4 <__mdiff+0x10c>)
 80099ea:	4602      	mov	r2, r0
 80099ec:	f240 2137 	movw	r1, #567	; 0x237
 80099f0:	4839      	ldr	r0, [pc, #228]	; (8009ad8 <__mdiff+0x110>)
 80099f2:	f000 fa8d 	bl	8009f10 <__assert_func>
 80099f6:	2301      	movs	r3, #1
 80099f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a00:	bfa4      	itt	ge
 8009a02:	4643      	movge	r3, r8
 8009a04:	46a0      	movge	r8, r4
 8009a06:	4630      	mov	r0, r6
 8009a08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a0c:	bfa6      	itte	ge
 8009a0e:	461c      	movge	r4, r3
 8009a10:	2500      	movge	r5, #0
 8009a12:	2501      	movlt	r5, #1
 8009a14:	f7ff fd40 	bl	8009498 <_Balloc>
 8009a18:	b920      	cbnz	r0, 8009a24 <__mdiff+0x5c>
 8009a1a:	4b2e      	ldr	r3, [pc, #184]	; (8009ad4 <__mdiff+0x10c>)
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	f240 2145 	movw	r1, #581	; 0x245
 8009a22:	e7e5      	b.n	80099f0 <__mdiff+0x28>
 8009a24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a28:	6926      	ldr	r6, [r4, #16]
 8009a2a:	60c5      	str	r5, [r0, #12]
 8009a2c:	f104 0914 	add.w	r9, r4, #20
 8009a30:	f108 0514 	add.w	r5, r8, #20
 8009a34:	f100 0e14 	add.w	lr, r0, #20
 8009a38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009a3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a40:	f108 0210 	add.w	r2, r8, #16
 8009a44:	46f2      	mov	sl, lr
 8009a46:	2100      	movs	r1, #0
 8009a48:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a50:	fa11 f88b 	uxtah	r8, r1, fp
 8009a54:	b299      	uxth	r1, r3
 8009a56:	0c1b      	lsrs	r3, r3, #16
 8009a58:	eba8 0801 	sub.w	r8, r8, r1
 8009a5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a60:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a64:	fa1f f888 	uxth.w	r8, r8
 8009a68:	1419      	asrs	r1, r3, #16
 8009a6a:	454e      	cmp	r6, r9
 8009a6c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a70:	f84a 3b04 	str.w	r3, [sl], #4
 8009a74:	d8e8      	bhi.n	8009a48 <__mdiff+0x80>
 8009a76:	1b33      	subs	r3, r6, r4
 8009a78:	3b15      	subs	r3, #21
 8009a7a:	f023 0303 	bic.w	r3, r3, #3
 8009a7e:	3304      	adds	r3, #4
 8009a80:	3415      	adds	r4, #21
 8009a82:	42a6      	cmp	r6, r4
 8009a84:	bf38      	it	cc
 8009a86:	2304      	movcc	r3, #4
 8009a88:	441d      	add	r5, r3
 8009a8a:	4473      	add	r3, lr
 8009a8c:	469e      	mov	lr, r3
 8009a8e:	462e      	mov	r6, r5
 8009a90:	4566      	cmp	r6, ip
 8009a92:	d30e      	bcc.n	8009ab2 <__mdiff+0xea>
 8009a94:	f10c 0203 	add.w	r2, ip, #3
 8009a98:	1b52      	subs	r2, r2, r5
 8009a9a:	f022 0203 	bic.w	r2, r2, #3
 8009a9e:	3d03      	subs	r5, #3
 8009aa0:	45ac      	cmp	ip, r5
 8009aa2:	bf38      	it	cc
 8009aa4:	2200      	movcc	r2, #0
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009aac:	b17a      	cbz	r2, 8009ace <__mdiff+0x106>
 8009aae:	6107      	str	r7, [r0, #16]
 8009ab0:	e7a4      	b.n	80099fc <__mdiff+0x34>
 8009ab2:	f856 8b04 	ldr.w	r8, [r6], #4
 8009ab6:	fa11 f288 	uxtah	r2, r1, r8
 8009aba:	1414      	asrs	r4, r2, #16
 8009abc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ac0:	b292      	uxth	r2, r2
 8009ac2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ac6:	f84e 2b04 	str.w	r2, [lr], #4
 8009aca:	1421      	asrs	r1, r4, #16
 8009acc:	e7e0      	b.n	8009a90 <__mdiff+0xc8>
 8009ace:	3f01      	subs	r7, #1
 8009ad0:	e7ea      	b.n	8009aa8 <__mdiff+0xe0>
 8009ad2:	bf00      	nop
 8009ad4:	0800a2bc 	.word	0x0800a2bc
 8009ad8:	0800a2de 	.word	0x0800a2de

08009adc <__d2b>:
 8009adc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ae0:	460f      	mov	r7, r1
 8009ae2:	2101      	movs	r1, #1
 8009ae4:	ec59 8b10 	vmov	r8, r9, d0
 8009ae8:	4616      	mov	r6, r2
 8009aea:	f7ff fcd5 	bl	8009498 <_Balloc>
 8009aee:	4604      	mov	r4, r0
 8009af0:	b930      	cbnz	r0, 8009b00 <__d2b+0x24>
 8009af2:	4602      	mov	r2, r0
 8009af4:	4b24      	ldr	r3, [pc, #144]	; (8009b88 <__d2b+0xac>)
 8009af6:	4825      	ldr	r0, [pc, #148]	; (8009b8c <__d2b+0xb0>)
 8009af8:	f240 310f 	movw	r1, #783	; 0x30f
 8009afc:	f000 fa08 	bl	8009f10 <__assert_func>
 8009b00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b08:	bb2d      	cbnz	r5, 8009b56 <__d2b+0x7a>
 8009b0a:	9301      	str	r3, [sp, #4]
 8009b0c:	f1b8 0300 	subs.w	r3, r8, #0
 8009b10:	d026      	beq.n	8009b60 <__d2b+0x84>
 8009b12:	4668      	mov	r0, sp
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	f7ff fd87 	bl	8009628 <__lo0bits>
 8009b1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009b1e:	b1e8      	cbz	r0, 8009b5c <__d2b+0x80>
 8009b20:	f1c0 0320 	rsb	r3, r0, #32
 8009b24:	fa02 f303 	lsl.w	r3, r2, r3
 8009b28:	430b      	orrs	r3, r1
 8009b2a:	40c2      	lsrs	r2, r0
 8009b2c:	6163      	str	r3, [r4, #20]
 8009b2e:	9201      	str	r2, [sp, #4]
 8009b30:	9b01      	ldr	r3, [sp, #4]
 8009b32:	61a3      	str	r3, [r4, #24]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	bf14      	ite	ne
 8009b38:	2202      	movne	r2, #2
 8009b3a:	2201      	moveq	r2, #1
 8009b3c:	6122      	str	r2, [r4, #16]
 8009b3e:	b1bd      	cbz	r5, 8009b70 <__d2b+0x94>
 8009b40:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b44:	4405      	add	r5, r0
 8009b46:	603d      	str	r5, [r7, #0]
 8009b48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b4c:	6030      	str	r0, [r6, #0]
 8009b4e:	4620      	mov	r0, r4
 8009b50:	b003      	add	sp, #12
 8009b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b5a:	e7d6      	b.n	8009b0a <__d2b+0x2e>
 8009b5c:	6161      	str	r1, [r4, #20]
 8009b5e:	e7e7      	b.n	8009b30 <__d2b+0x54>
 8009b60:	a801      	add	r0, sp, #4
 8009b62:	f7ff fd61 	bl	8009628 <__lo0bits>
 8009b66:	9b01      	ldr	r3, [sp, #4]
 8009b68:	6163      	str	r3, [r4, #20]
 8009b6a:	3020      	adds	r0, #32
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	e7e5      	b.n	8009b3c <__d2b+0x60>
 8009b70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b78:	6038      	str	r0, [r7, #0]
 8009b7a:	6918      	ldr	r0, [r3, #16]
 8009b7c:	f7ff fd34 	bl	80095e8 <__hi0bits>
 8009b80:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b84:	e7e2      	b.n	8009b4c <__d2b+0x70>
 8009b86:	bf00      	nop
 8009b88:	0800a2bc 	.word	0x0800a2bc
 8009b8c:	0800a2de 	.word	0x0800a2de

08009b90 <__sread>:
 8009b90:	b510      	push	{r4, lr}
 8009b92:	460c      	mov	r4, r1
 8009b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b98:	f000 f978 	bl	8009e8c <_read_r>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	bfab      	itete	ge
 8009ba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ba2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ba4:	181b      	addge	r3, r3, r0
 8009ba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009baa:	bfac      	ite	ge
 8009bac:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bae:	81a3      	strhlt	r3, [r4, #12]
 8009bb0:	bd10      	pop	{r4, pc}

08009bb2 <__swrite>:
 8009bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb6:	461f      	mov	r7, r3
 8009bb8:	898b      	ldrh	r3, [r1, #12]
 8009bba:	05db      	lsls	r3, r3, #23
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	4616      	mov	r6, r2
 8009bc2:	d505      	bpl.n	8009bd0 <__swrite+0x1e>
 8009bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bc8:	2302      	movs	r3, #2
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f000 f94c 	bl	8009e68 <_lseek_r>
 8009bd0:	89a3      	ldrh	r3, [r4, #12]
 8009bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bda:	81a3      	strh	r3, [r4, #12]
 8009bdc:	4632      	mov	r2, r6
 8009bde:	463b      	mov	r3, r7
 8009be0:	4628      	mov	r0, r5
 8009be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009be6:	f000 b973 	b.w	8009ed0 <_write_r>

08009bea <__sseek>:
 8009bea:	b510      	push	{r4, lr}
 8009bec:	460c      	mov	r4, r1
 8009bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bf2:	f000 f939 	bl	8009e68 <_lseek_r>
 8009bf6:	1c43      	adds	r3, r0, #1
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	bf15      	itete	ne
 8009bfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009bfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c06:	81a3      	strheq	r3, [r4, #12]
 8009c08:	bf18      	it	ne
 8009c0a:	81a3      	strhne	r3, [r4, #12]
 8009c0c:	bd10      	pop	{r4, pc}

08009c0e <__sclose>:
 8009c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c12:	f000 b8f7 	b.w	8009e04 <_close_r>

08009c16 <__swbuf_r>:
 8009c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c18:	460e      	mov	r6, r1
 8009c1a:	4614      	mov	r4, r2
 8009c1c:	4605      	mov	r5, r0
 8009c1e:	b118      	cbz	r0, 8009c28 <__swbuf_r+0x12>
 8009c20:	6a03      	ldr	r3, [r0, #32]
 8009c22:	b90b      	cbnz	r3, 8009c28 <__swbuf_r+0x12>
 8009c24:	f7fe fa38 	bl	8008098 <__sinit>
 8009c28:	69a3      	ldr	r3, [r4, #24]
 8009c2a:	60a3      	str	r3, [r4, #8]
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	071a      	lsls	r2, r3, #28
 8009c30:	d525      	bpl.n	8009c7e <__swbuf_r+0x68>
 8009c32:	6923      	ldr	r3, [r4, #16]
 8009c34:	b31b      	cbz	r3, 8009c7e <__swbuf_r+0x68>
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	6922      	ldr	r2, [r4, #16]
 8009c3a:	1a98      	subs	r0, r3, r2
 8009c3c:	6963      	ldr	r3, [r4, #20]
 8009c3e:	b2f6      	uxtb	r6, r6
 8009c40:	4283      	cmp	r3, r0
 8009c42:	4637      	mov	r7, r6
 8009c44:	dc04      	bgt.n	8009c50 <__swbuf_r+0x3a>
 8009c46:	4621      	mov	r1, r4
 8009c48:	4628      	mov	r0, r5
 8009c4a:	f7ff fbf1 	bl	8009430 <_fflush_r>
 8009c4e:	b9e0      	cbnz	r0, 8009c8a <__swbuf_r+0x74>
 8009c50:	68a3      	ldr	r3, [r4, #8]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	60a3      	str	r3, [r4, #8]
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	6022      	str	r2, [r4, #0]
 8009c5c:	701e      	strb	r6, [r3, #0]
 8009c5e:	6962      	ldr	r2, [r4, #20]
 8009c60:	1c43      	adds	r3, r0, #1
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d004      	beq.n	8009c70 <__swbuf_r+0x5a>
 8009c66:	89a3      	ldrh	r3, [r4, #12]
 8009c68:	07db      	lsls	r3, r3, #31
 8009c6a:	d506      	bpl.n	8009c7a <__swbuf_r+0x64>
 8009c6c:	2e0a      	cmp	r6, #10
 8009c6e:	d104      	bne.n	8009c7a <__swbuf_r+0x64>
 8009c70:	4621      	mov	r1, r4
 8009c72:	4628      	mov	r0, r5
 8009c74:	f7ff fbdc 	bl	8009430 <_fflush_r>
 8009c78:	b938      	cbnz	r0, 8009c8a <__swbuf_r+0x74>
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c7e:	4621      	mov	r1, r4
 8009c80:	4628      	mov	r0, r5
 8009c82:	f000 f805 	bl	8009c90 <__swsetup_r>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d0d5      	beq.n	8009c36 <__swbuf_r+0x20>
 8009c8a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009c8e:	e7f4      	b.n	8009c7a <__swbuf_r+0x64>

08009c90 <__swsetup_r>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	4b2a      	ldr	r3, [pc, #168]	; (8009d3c <__swsetup_r+0xac>)
 8009c94:	4605      	mov	r5, r0
 8009c96:	6818      	ldr	r0, [r3, #0]
 8009c98:	460c      	mov	r4, r1
 8009c9a:	b118      	cbz	r0, 8009ca4 <__swsetup_r+0x14>
 8009c9c:	6a03      	ldr	r3, [r0, #32]
 8009c9e:	b90b      	cbnz	r3, 8009ca4 <__swsetup_r+0x14>
 8009ca0:	f7fe f9fa 	bl	8008098 <__sinit>
 8009ca4:	89a3      	ldrh	r3, [r4, #12]
 8009ca6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009caa:	0718      	lsls	r0, r3, #28
 8009cac:	d422      	bmi.n	8009cf4 <__swsetup_r+0x64>
 8009cae:	06d9      	lsls	r1, r3, #27
 8009cb0:	d407      	bmi.n	8009cc2 <__swsetup_r+0x32>
 8009cb2:	2309      	movs	r3, #9
 8009cb4:	602b      	str	r3, [r5, #0]
 8009cb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cba:	81a3      	strh	r3, [r4, #12]
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cc0:	e034      	b.n	8009d2c <__swsetup_r+0x9c>
 8009cc2:	0758      	lsls	r0, r3, #29
 8009cc4:	d512      	bpl.n	8009cec <__swsetup_r+0x5c>
 8009cc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cc8:	b141      	cbz	r1, 8009cdc <__swsetup_r+0x4c>
 8009cca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cce:	4299      	cmp	r1, r3
 8009cd0:	d002      	beq.n	8009cd8 <__swsetup_r+0x48>
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f000 f950 	bl	8009f78 <_free_r>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	6363      	str	r3, [r4, #52]	; 0x34
 8009cdc:	89a3      	ldrh	r3, [r4, #12]
 8009cde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ce2:	81a3      	strh	r3, [r4, #12]
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	6063      	str	r3, [r4, #4]
 8009ce8:	6923      	ldr	r3, [r4, #16]
 8009cea:	6023      	str	r3, [r4, #0]
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	f043 0308 	orr.w	r3, r3, #8
 8009cf2:	81a3      	strh	r3, [r4, #12]
 8009cf4:	6923      	ldr	r3, [r4, #16]
 8009cf6:	b94b      	cbnz	r3, 8009d0c <__swsetup_r+0x7c>
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d02:	d003      	beq.n	8009d0c <__swsetup_r+0x7c>
 8009d04:	4621      	mov	r1, r4
 8009d06:	4628      	mov	r0, r5
 8009d08:	f000 f840 	bl	8009d8c <__smakebuf_r>
 8009d0c:	89a0      	ldrh	r0, [r4, #12]
 8009d0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d12:	f010 0301 	ands.w	r3, r0, #1
 8009d16:	d00a      	beq.n	8009d2e <__swsetup_r+0x9e>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	60a3      	str	r3, [r4, #8]
 8009d1c:	6963      	ldr	r3, [r4, #20]
 8009d1e:	425b      	negs	r3, r3
 8009d20:	61a3      	str	r3, [r4, #24]
 8009d22:	6923      	ldr	r3, [r4, #16]
 8009d24:	b943      	cbnz	r3, 8009d38 <__swsetup_r+0xa8>
 8009d26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d2a:	d1c4      	bne.n	8009cb6 <__swsetup_r+0x26>
 8009d2c:	bd38      	pop	{r3, r4, r5, pc}
 8009d2e:	0781      	lsls	r1, r0, #30
 8009d30:	bf58      	it	pl
 8009d32:	6963      	ldrpl	r3, [r4, #20]
 8009d34:	60a3      	str	r3, [r4, #8]
 8009d36:	e7f4      	b.n	8009d22 <__swsetup_r+0x92>
 8009d38:	2000      	movs	r0, #0
 8009d3a:	e7f7      	b.n	8009d2c <__swsetup_r+0x9c>
 8009d3c:	20000068 	.word	0x20000068

08009d40 <__swhatbuf_r>:
 8009d40:	b570      	push	{r4, r5, r6, lr}
 8009d42:	460c      	mov	r4, r1
 8009d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d48:	2900      	cmp	r1, #0
 8009d4a:	b096      	sub	sp, #88	; 0x58
 8009d4c:	4615      	mov	r5, r2
 8009d4e:	461e      	mov	r6, r3
 8009d50:	da0d      	bge.n	8009d6e <__swhatbuf_r+0x2e>
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009d58:	f04f 0100 	mov.w	r1, #0
 8009d5c:	bf0c      	ite	eq
 8009d5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009d62:	2340      	movne	r3, #64	; 0x40
 8009d64:	2000      	movs	r0, #0
 8009d66:	6031      	str	r1, [r6, #0]
 8009d68:	602b      	str	r3, [r5, #0]
 8009d6a:	b016      	add	sp, #88	; 0x58
 8009d6c:	bd70      	pop	{r4, r5, r6, pc}
 8009d6e:	466a      	mov	r2, sp
 8009d70:	f000 f858 	bl	8009e24 <_fstat_r>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	dbec      	blt.n	8009d52 <__swhatbuf_r+0x12>
 8009d78:	9901      	ldr	r1, [sp, #4]
 8009d7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009d7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009d82:	4259      	negs	r1, r3
 8009d84:	4159      	adcs	r1, r3
 8009d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d8a:	e7eb      	b.n	8009d64 <__swhatbuf_r+0x24>

08009d8c <__smakebuf_r>:
 8009d8c:	898b      	ldrh	r3, [r1, #12]
 8009d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d90:	079d      	lsls	r5, r3, #30
 8009d92:	4606      	mov	r6, r0
 8009d94:	460c      	mov	r4, r1
 8009d96:	d507      	bpl.n	8009da8 <__smakebuf_r+0x1c>
 8009d98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	6123      	str	r3, [r4, #16]
 8009da0:	2301      	movs	r3, #1
 8009da2:	6163      	str	r3, [r4, #20]
 8009da4:	b002      	add	sp, #8
 8009da6:	bd70      	pop	{r4, r5, r6, pc}
 8009da8:	ab01      	add	r3, sp, #4
 8009daa:	466a      	mov	r2, sp
 8009dac:	f7ff ffc8 	bl	8009d40 <__swhatbuf_r>
 8009db0:	9900      	ldr	r1, [sp, #0]
 8009db2:	4605      	mov	r5, r0
 8009db4:	4630      	mov	r0, r6
 8009db6:	f7ff fa35 	bl	8009224 <_malloc_r>
 8009dba:	b948      	cbnz	r0, 8009dd0 <__smakebuf_r+0x44>
 8009dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dc0:	059a      	lsls	r2, r3, #22
 8009dc2:	d4ef      	bmi.n	8009da4 <__smakebuf_r+0x18>
 8009dc4:	f023 0303 	bic.w	r3, r3, #3
 8009dc8:	f043 0302 	orr.w	r3, r3, #2
 8009dcc:	81a3      	strh	r3, [r4, #12]
 8009dce:	e7e3      	b.n	8009d98 <__smakebuf_r+0xc>
 8009dd0:	89a3      	ldrh	r3, [r4, #12]
 8009dd2:	6020      	str	r0, [r4, #0]
 8009dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	9b00      	ldr	r3, [sp, #0]
 8009ddc:	6163      	str	r3, [r4, #20]
 8009dde:	9b01      	ldr	r3, [sp, #4]
 8009de0:	6120      	str	r0, [r4, #16]
 8009de2:	b15b      	cbz	r3, 8009dfc <__smakebuf_r+0x70>
 8009de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009de8:	4630      	mov	r0, r6
 8009dea:	f000 f82d 	bl	8009e48 <_isatty_r>
 8009dee:	b128      	cbz	r0, 8009dfc <__smakebuf_r+0x70>
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	f023 0303 	bic.w	r3, r3, #3
 8009df6:	f043 0301 	orr.w	r3, r3, #1
 8009dfa:	81a3      	strh	r3, [r4, #12]
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	431d      	orrs	r5, r3
 8009e00:	81a5      	strh	r5, [r4, #12]
 8009e02:	e7cf      	b.n	8009da4 <__smakebuf_r+0x18>

08009e04 <_close_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4d06      	ldr	r5, [pc, #24]	; (8009e20 <_close_r+0x1c>)
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	602b      	str	r3, [r5, #0]
 8009e10:	f7f8 fa81 	bl	8002316 <_close>
 8009e14:	1c43      	adds	r3, r0, #1
 8009e16:	d102      	bne.n	8009e1e <_close_r+0x1a>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	b103      	cbz	r3, 8009e1e <_close_r+0x1a>
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}
 8009e20:	20000714 	.word	0x20000714

08009e24 <_fstat_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4d07      	ldr	r5, [pc, #28]	; (8009e44 <_fstat_r+0x20>)
 8009e28:	2300      	movs	r3, #0
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	4608      	mov	r0, r1
 8009e2e:	4611      	mov	r1, r2
 8009e30:	602b      	str	r3, [r5, #0]
 8009e32:	f7f8 fa7c 	bl	800232e <_fstat>
 8009e36:	1c43      	adds	r3, r0, #1
 8009e38:	d102      	bne.n	8009e40 <_fstat_r+0x1c>
 8009e3a:	682b      	ldr	r3, [r5, #0]
 8009e3c:	b103      	cbz	r3, 8009e40 <_fstat_r+0x1c>
 8009e3e:	6023      	str	r3, [r4, #0]
 8009e40:	bd38      	pop	{r3, r4, r5, pc}
 8009e42:	bf00      	nop
 8009e44:	20000714 	.word	0x20000714

08009e48 <_isatty_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4d06      	ldr	r5, [pc, #24]	; (8009e64 <_isatty_r+0x1c>)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	4604      	mov	r4, r0
 8009e50:	4608      	mov	r0, r1
 8009e52:	602b      	str	r3, [r5, #0]
 8009e54:	f7f8 fa7b 	bl	800234e <_isatty>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d102      	bne.n	8009e62 <_isatty_r+0x1a>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	b103      	cbz	r3, 8009e62 <_isatty_r+0x1a>
 8009e60:	6023      	str	r3, [r4, #0]
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	20000714 	.word	0x20000714

08009e68 <_lseek_r>:
 8009e68:	b538      	push	{r3, r4, r5, lr}
 8009e6a:	4d07      	ldr	r5, [pc, #28]	; (8009e88 <_lseek_r+0x20>)
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	4608      	mov	r0, r1
 8009e70:	4611      	mov	r1, r2
 8009e72:	2200      	movs	r2, #0
 8009e74:	602a      	str	r2, [r5, #0]
 8009e76:	461a      	mov	r2, r3
 8009e78:	f7f8 fa74 	bl	8002364 <_lseek>
 8009e7c:	1c43      	adds	r3, r0, #1
 8009e7e:	d102      	bne.n	8009e86 <_lseek_r+0x1e>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	b103      	cbz	r3, 8009e86 <_lseek_r+0x1e>
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	bd38      	pop	{r3, r4, r5, pc}
 8009e88:	20000714 	.word	0x20000714

08009e8c <_read_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4d07      	ldr	r5, [pc, #28]	; (8009eac <_read_r+0x20>)
 8009e90:	4604      	mov	r4, r0
 8009e92:	4608      	mov	r0, r1
 8009e94:	4611      	mov	r1, r2
 8009e96:	2200      	movs	r2, #0
 8009e98:	602a      	str	r2, [r5, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f7f8 fa02 	bl	80022a4 <_read>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d102      	bne.n	8009eaa <_read_r+0x1e>
 8009ea4:	682b      	ldr	r3, [r5, #0]
 8009ea6:	b103      	cbz	r3, 8009eaa <_read_r+0x1e>
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	20000714 	.word	0x20000714

08009eb0 <_sbrk_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4d06      	ldr	r5, [pc, #24]	; (8009ecc <_sbrk_r+0x1c>)
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	4608      	mov	r0, r1
 8009eba:	602b      	str	r3, [r5, #0]
 8009ebc:	f7f8 fa60 	bl	8002380 <_sbrk>
 8009ec0:	1c43      	adds	r3, r0, #1
 8009ec2:	d102      	bne.n	8009eca <_sbrk_r+0x1a>
 8009ec4:	682b      	ldr	r3, [r5, #0]
 8009ec6:	b103      	cbz	r3, 8009eca <_sbrk_r+0x1a>
 8009ec8:	6023      	str	r3, [r4, #0]
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	20000714 	.word	0x20000714

08009ed0 <_write_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	4d07      	ldr	r5, [pc, #28]	; (8009ef0 <_write_r+0x20>)
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	4608      	mov	r0, r1
 8009ed8:	4611      	mov	r1, r2
 8009eda:	2200      	movs	r2, #0
 8009edc:	602a      	str	r2, [r5, #0]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	f7f8 f9fd 	bl	80022de <_write>
 8009ee4:	1c43      	adds	r3, r0, #1
 8009ee6:	d102      	bne.n	8009eee <_write_r+0x1e>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	b103      	cbz	r3, 8009eee <_write_r+0x1e>
 8009eec:	6023      	str	r3, [r4, #0]
 8009eee:	bd38      	pop	{r3, r4, r5, pc}
 8009ef0:	20000714 	.word	0x20000714

08009ef4 <memcpy>:
 8009ef4:	440a      	add	r2, r1
 8009ef6:	4291      	cmp	r1, r2
 8009ef8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009efc:	d100      	bne.n	8009f00 <memcpy+0xc>
 8009efe:	4770      	bx	lr
 8009f00:	b510      	push	{r4, lr}
 8009f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f0a:	4291      	cmp	r1, r2
 8009f0c:	d1f9      	bne.n	8009f02 <memcpy+0xe>
 8009f0e:	bd10      	pop	{r4, pc}

08009f10 <__assert_func>:
 8009f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f12:	4614      	mov	r4, r2
 8009f14:	461a      	mov	r2, r3
 8009f16:	4b09      	ldr	r3, [pc, #36]	; (8009f3c <__assert_func+0x2c>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	68d8      	ldr	r0, [r3, #12]
 8009f1e:	b14c      	cbz	r4, 8009f34 <__assert_func+0x24>
 8009f20:	4b07      	ldr	r3, [pc, #28]	; (8009f40 <__assert_func+0x30>)
 8009f22:	9100      	str	r1, [sp, #0]
 8009f24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f28:	4906      	ldr	r1, [pc, #24]	; (8009f44 <__assert_func+0x34>)
 8009f2a:	462b      	mov	r3, r5
 8009f2c:	f000 f882 	bl	800a034 <fiprintf>
 8009f30:	f000 f89f 	bl	800a072 <abort>
 8009f34:	4b04      	ldr	r3, [pc, #16]	; (8009f48 <__assert_func+0x38>)
 8009f36:	461c      	mov	r4, r3
 8009f38:	e7f3      	b.n	8009f22 <__assert_func+0x12>
 8009f3a:	bf00      	nop
 8009f3c:	20000068 	.word	0x20000068
 8009f40:	0800a53f 	.word	0x0800a53f
 8009f44:	0800a54c 	.word	0x0800a54c
 8009f48:	0800a57a 	.word	0x0800a57a

08009f4c <_calloc_r>:
 8009f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f4e:	fba1 2402 	umull	r2, r4, r1, r2
 8009f52:	b94c      	cbnz	r4, 8009f68 <_calloc_r+0x1c>
 8009f54:	4611      	mov	r1, r2
 8009f56:	9201      	str	r2, [sp, #4]
 8009f58:	f7ff f964 	bl	8009224 <_malloc_r>
 8009f5c:	9a01      	ldr	r2, [sp, #4]
 8009f5e:	4605      	mov	r5, r0
 8009f60:	b930      	cbnz	r0, 8009f70 <_calloc_r+0x24>
 8009f62:	4628      	mov	r0, r5
 8009f64:	b003      	add	sp, #12
 8009f66:	bd30      	pop	{r4, r5, pc}
 8009f68:	220c      	movs	r2, #12
 8009f6a:	6002      	str	r2, [r0, #0]
 8009f6c:	2500      	movs	r5, #0
 8009f6e:	e7f8      	b.n	8009f62 <_calloc_r+0x16>
 8009f70:	4621      	mov	r1, r4
 8009f72:	f7fe f935 	bl	80081e0 <memset>
 8009f76:	e7f4      	b.n	8009f62 <_calloc_r+0x16>

08009f78 <_free_r>:
 8009f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f7a:	2900      	cmp	r1, #0
 8009f7c:	d044      	beq.n	800a008 <_free_r+0x90>
 8009f7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f82:	9001      	str	r0, [sp, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f1a1 0404 	sub.w	r4, r1, #4
 8009f8a:	bfb8      	it	lt
 8009f8c:	18e4      	addlt	r4, r4, r3
 8009f8e:	f7ff fa77 	bl	8009480 <__malloc_lock>
 8009f92:	4a1e      	ldr	r2, [pc, #120]	; (800a00c <_free_r+0x94>)
 8009f94:	9801      	ldr	r0, [sp, #4]
 8009f96:	6813      	ldr	r3, [r2, #0]
 8009f98:	b933      	cbnz	r3, 8009fa8 <_free_r+0x30>
 8009f9a:	6063      	str	r3, [r4, #4]
 8009f9c:	6014      	str	r4, [r2, #0]
 8009f9e:	b003      	add	sp, #12
 8009fa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fa4:	f7ff ba72 	b.w	800948c <__malloc_unlock>
 8009fa8:	42a3      	cmp	r3, r4
 8009faa:	d908      	bls.n	8009fbe <_free_r+0x46>
 8009fac:	6825      	ldr	r5, [r4, #0]
 8009fae:	1961      	adds	r1, r4, r5
 8009fb0:	428b      	cmp	r3, r1
 8009fb2:	bf01      	itttt	eq
 8009fb4:	6819      	ldreq	r1, [r3, #0]
 8009fb6:	685b      	ldreq	r3, [r3, #4]
 8009fb8:	1949      	addeq	r1, r1, r5
 8009fba:	6021      	streq	r1, [r4, #0]
 8009fbc:	e7ed      	b.n	8009f9a <_free_r+0x22>
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	b10b      	cbz	r3, 8009fc8 <_free_r+0x50>
 8009fc4:	42a3      	cmp	r3, r4
 8009fc6:	d9fa      	bls.n	8009fbe <_free_r+0x46>
 8009fc8:	6811      	ldr	r1, [r2, #0]
 8009fca:	1855      	adds	r5, r2, r1
 8009fcc:	42a5      	cmp	r5, r4
 8009fce:	d10b      	bne.n	8009fe8 <_free_r+0x70>
 8009fd0:	6824      	ldr	r4, [r4, #0]
 8009fd2:	4421      	add	r1, r4
 8009fd4:	1854      	adds	r4, r2, r1
 8009fd6:	42a3      	cmp	r3, r4
 8009fd8:	6011      	str	r1, [r2, #0]
 8009fda:	d1e0      	bne.n	8009f9e <_free_r+0x26>
 8009fdc:	681c      	ldr	r4, [r3, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	6053      	str	r3, [r2, #4]
 8009fe2:	440c      	add	r4, r1
 8009fe4:	6014      	str	r4, [r2, #0]
 8009fe6:	e7da      	b.n	8009f9e <_free_r+0x26>
 8009fe8:	d902      	bls.n	8009ff0 <_free_r+0x78>
 8009fea:	230c      	movs	r3, #12
 8009fec:	6003      	str	r3, [r0, #0]
 8009fee:	e7d6      	b.n	8009f9e <_free_r+0x26>
 8009ff0:	6825      	ldr	r5, [r4, #0]
 8009ff2:	1961      	adds	r1, r4, r5
 8009ff4:	428b      	cmp	r3, r1
 8009ff6:	bf04      	itt	eq
 8009ff8:	6819      	ldreq	r1, [r3, #0]
 8009ffa:	685b      	ldreq	r3, [r3, #4]
 8009ffc:	6063      	str	r3, [r4, #4]
 8009ffe:	bf04      	itt	eq
 800a000:	1949      	addeq	r1, r1, r5
 800a002:	6021      	streq	r1, [r4, #0]
 800a004:	6054      	str	r4, [r2, #4]
 800a006:	e7ca      	b.n	8009f9e <_free_r+0x26>
 800a008:	b003      	add	sp, #12
 800a00a:	bd30      	pop	{r4, r5, pc}
 800a00c:	2000070c 	.word	0x2000070c

0800a010 <__ascii_mbtowc>:
 800a010:	b082      	sub	sp, #8
 800a012:	b901      	cbnz	r1, 800a016 <__ascii_mbtowc+0x6>
 800a014:	a901      	add	r1, sp, #4
 800a016:	b142      	cbz	r2, 800a02a <__ascii_mbtowc+0x1a>
 800a018:	b14b      	cbz	r3, 800a02e <__ascii_mbtowc+0x1e>
 800a01a:	7813      	ldrb	r3, [r2, #0]
 800a01c:	600b      	str	r3, [r1, #0]
 800a01e:	7812      	ldrb	r2, [r2, #0]
 800a020:	1e10      	subs	r0, r2, #0
 800a022:	bf18      	it	ne
 800a024:	2001      	movne	r0, #1
 800a026:	b002      	add	sp, #8
 800a028:	4770      	bx	lr
 800a02a:	4610      	mov	r0, r2
 800a02c:	e7fb      	b.n	800a026 <__ascii_mbtowc+0x16>
 800a02e:	f06f 0001 	mvn.w	r0, #1
 800a032:	e7f8      	b.n	800a026 <__ascii_mbtowc+0x16>

0800a034 <fiprintf>:
 800a034:	b40e      	push	{r1, r2, r3}
 800a036:	b503      	push	{r0, r1, lr}
 800a038:	4601      	mov	r1, r0
 800a03a:	ab03      	add	r3, sp, #12
 800a03c:	4805      	ldr	r0, [pc, #20]	; (800a054 <fiprintf+0x20>)
 800a03e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a042:	6800      	ldr	r0, [r0, #0]
 800a044:	9301      	str	r3, [sp, #4]
 800a046:	f7fe ffab 	bl	8008fa0 <_vfiprintf_r>
 800a04a:	b002      	add	sp, #8
 800a04c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a050:	b003      	add	sp, #12
 800a052:	4770      	bx	lr
 800a054:	20000068 	.word	0x20000068

0800a058 <__ascii_wctomb>:
 800a058:	b149      	cbz	r1, 800a06e <__ascii_wctomb+0x16>
 800a05a:	2aff      	cmp	r2, #255	; 0xff
 800a05c:	bf85      	ittet	hi
 800a05e:	238a      	movhi	r3, #138	; 0x8a
 800a060:	6003      	strhi	r3, [r0, #0]
 800a062:	700a      	strbls	r2, [r1, #0]
 800a064:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a068:	bf98      	it	ls
 800a06a:	2001      	movls	r0, #1
 800a06c:	4770      	bx	lr
 800a06e:	4608      	mov	r0, r1
 800a070:	4770      	bx	lr

0800a072 <abort>:
 800a072:	b508      	push	{r3, lr}
 800a074:	2006      	movs	r0, #6
 800a076:	f000 f82b 	bl	800a0d0 <raise>
 800a07a:	2001      	movs	r0, #1
 800a07c:	f7f8 f908 	bl	8002290 <_exit>

0800a080 <_raise_r>:
 800a080:	291f      	cmp	r1, #31
 800a082:	b538      	push	{r3, r4, r5, lr}
 800a084:	4604      	mov	r4, r0
 800a086:	460d      	mov	r5, r1
 800a088:	d904      	bls.n	800a094 <_raise_r+0x14>
 800a08a:	2316      	movs	r3, #22
 800a08c:	6003      	str	r3, [r0, #0]
 800a08e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a092:	bd38      	pop	{r3, r4, r5, pc}
 800a094:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a096:	b112      	cbz	r2, 800a09e <_raise_r+0x1e>
 800a098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a09c:	b94b      	cbnz	r3, 800a0b2 <_raise_r+0x32>
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f000 f830 	bl	800a104 <_getpid_r>
 800a0a4:	462a      	mov	r2, r5
 800a0a6:	4601      	mov	r1, r0
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0ae:	f000 b817 	b.w	800a0e0 <_kill_r>
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d00a      	beq.n	800a0cc <_raise_r+0x4c>
 800a0b6:	1c59      	adds	r1, r3, #1
 800a0b8:	d103      	bne.n	800a0c2 <_raise_r+0x42>
 800a0ba:	2316      	movs	r3, #22
 800a0bc:	6003      	str	r3, [r0, #0]
 800a0be:	2001      	movs	r0, #1
 800a0c0:	e7e7      	b.n	800a092 <_raise_r+0x12>
 800a0c2:	2400      	movs	r4, #0
 800a0c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	4798      	blx	r3
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	e7e0      	b.n	800a092 <_raise_r+0x12>

0800a0d0 <raise>:
 800a0d0:	4b02      	ldr	r3, [pc, #8]	; (800a0dc <raise+0xc>)
 800a0d2:	4601      	mov	r1, r0
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	f7ff bfd3 	b.w	800a080 <_raise_r>
 800a0da:	bf00      	nop
 800a0dc:	20000068 	.word	0x20000068

0800a0e0 <_kill_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d07      	ldr	r5, [pc, #28]	; (800a100 <_kill_r+0x20>)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	602b      	str	r3, [r5, #0]
 800a0ee:	f7f8 f8bf 	bl	8002270 <_kill>
 800a0f2:	1c43      	adds	r3, r0, #1
 800a0f4:	d102      	bne.n	800a0fc <_kill_r+0x1c>
 800a0f6:	682b      	ldr	r3, [r5, #0]
 800a0f8:	b103      	cbz	r3, 800a0fc <_kill_r+0x1c>
 800a0fa:	6023      	str	r3, [r4, #0]
 800a0fc:	bd38      	pop	{r3, r4, r5, pc}
 800a0fe:	bf00      	nop
 800a100:	20000714 	.word	0x20000714

0800a104 <_getpid_r>:
 800a104:	f7f8 b8ac 	b.w	8002260 <_getpid>

0800a108 <_init>:
 800a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10a:	bf00      	nop
 800a10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a10e:	bc08      	pop	{r3}
 800a110:	469e      	mov	lr, r3
 800a112:	4770      	bx	lr

0800a114 <_fini>:
 800a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a116:	bf00      	nop
 800a118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a11a:	bc08      	pop	{r3}
 800a11c:	469e      	mov	lr, r3
 800a11e:	4770      	bx	lr
