
TADAMHESPEV_integrate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a778  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800a938  0800a938  0001a938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad64  0800ad64  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad64  0800ad64  0001ad64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad6c  0800ad6c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad6c  0800ad6c  0001ad6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad70  0800ad70  0001ad70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800ad74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  200001d8  0800af4c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  0800af4c  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000191bb  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003063  00000000  00000000  00039406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e8  00000000  00000000  0003c470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001148  00000000  00000000  0003da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ca16  00000000  00000000  0003eba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b6be  00000000  00000000  0006b5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f47b  00000000  00000000  00086c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e28  00000000  00000000  001960f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  0019cf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a920 	.word	0x0800a920

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	0800a920 	.word	0x0800a920

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <setupAccModule>:
#define OUT_Z_L_A 0x2C
#define OUT_Z_H_A 0x2D

extern I2C_HandleTypeDef hi2c1;

void setupAccModule(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
	uint8_t buf[10]= {ACC_IR_CTRL1, CTR1_SETUP};
 8000f7a:	f249 7320 	movw	r3, #38688	; 0x9720
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	809a      	strh	r2, [r3, #4]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDR << 1, buf, 2, 1000);
 8000f8a:	1d3a      	adds	r2, r7, #4
 8000f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2302      	movs	r3, #2
 8000f94:	2132      	movs	r1, #50	; 0x32
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <setupAccModule+0x48>)
 8000f98:	f001 ff4c 	bl	8002e34 <HAL_I2C_Master_Transmit>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
	if(ret == 0){
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d103      	bne.n	8000fae <setupAccModule+0x3a>
		printf("We gucci\n");
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <setupAccModule+0x4c>)
 8000fa8:	f007 fd1c 	bl	80089e4 <puts>
	}
	else{
		printf("we not gucci\n");
	}
}
 8000fac:	e002      	b.n	8000fb4 <setupAccModule+0x40>
		printf("we not gucci\n");
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <setupAccModule+0x50>)
 8000fb0:	f007 fd18 	bl	80089e4 <puts>
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000284 	.word	0x20000284
 8000fc0:	0800a938 	.word	0x0800a938
 8000fc4:	0800a944 	.word	0x0800a944

08000fc8 <ReadAccData>:
	printf("Raw:\t%u\tAcc:\t%f\tBinary:\t",raw,acc);
	printBinary(accBin);
	printf("\n");
}

float ReadAccData(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2140      	movs	r1, #64	; 0x40
 8000fd2:	482c      	ldr	r0, [pc, #176]	; (8001084 <ReadAccData+0xbc>)
 8000fd4:	f001 fe7a 	bl	8002ccc <HAL_GPIO_WritePin>
		uint8_t buf[1]= {OUT_X_L_A | 1 << 7}; //Auto-Increment OUT_X_L_A
 8000fd8:	23a8      	movs	r3, #168	; 0xa8
 8000fda:	713b      	strb	r3, [r7, #4]
		uint8_t rbuf[2];
		float accVal = 0;
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]

		HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDR << 1, buf, 1, 1000);
 8000fe2:	1d3a      	adds	r2, r7, #4
 8000fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	2132      	movs	r1, #50	; 0x32
 8000fee:	4826      	ldr	r0, [pc, #152]	; (8001088 <ReadAccData+0xc0>)
 8000ff0:	f001 ff20 	bl	8002e34 <HAL_I2C_Master_Transmit>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	72fb      	strb	r3, [r7, #11]
		//[TODO] - Have error checking for communication errors
		ret =  HAL_I2C_Master_Receive(&hi2c1, ACC_I2C_ADDR << 1, rbuf, 2, 1000);
 8000ff8:	463a      	mov	r2, r7
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2302      	movs	r3, #2
 8001002:	2132      	movs	r1, #50	; 0x32
 8001004:	4820      	ldr	r0, [pc, #128]	; (8001088 <ReadAccData+0xc0>)
 8001006:	f002 f82d 	bl	8003064 <HAL_I2C_Master_Receive>
 800100a:	4603      	mov	r3, r0
 800100c:	72fb      	strb	r3, [r7, #11]
		//[TODO] - Have error checking for communication errors

		uint16_t raw = (rbuf[1] << 8) | rbuf[0];	// 2's compliment, +-2g's
 800100e:	787b      	ldrb	r3, [r7, #1]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	783b      	ldrb	r3, [r7, #0]
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	813b      	strh	r3, [r7, #8]
		if(raw > 64100){
 800101e:	893b      	ldrh	r3, [r7, #8]
 8001020:	f64f 2264 	movw	r2, #64100	; 0xfa64
 8001024:	4293      	cmp	r3, r2
 8001026:	d903      	bls.n	8001030 <ReadAccData+0x68>
			accVal = 0;
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e021      	b.n	8001074 <ReadAccData+0xac>
		}
		else if(raw & 0x8000){ //if value is negative
 8001030:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	da10      	bge.n	800105a <ReadAccData+0x92>
			int16_t temp = -((raw ^ 0xFFFF) + 1);
 8001038:	893b      	ldrh	r3, [r7, #8]
 800103a:	80fb      	strh	r3, [r7, #6]
			accVal = (temp / (float)(1 << 15))*2;
 800103c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001048:	eddf 6a10 	vldr	s13, [pc, #64]	; 800108c <ReadAccData+0xc4>
 800104c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001050:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001054:	edc7 7a03 	vstr	s15, [r7, #12]
 8001058:	e00c      	b.n	8001074 <ReadAccData+0xac>
		}
		else{ //positive acceleration
			accVal = (raw / (float)((1 << 15) - 1))*2;
 800105a:	893b      	ldrh	r3, [r7, #8]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001090 <ReadAccData+0xc8>
 8001068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001070:	edc7 7a03 	vstr	s15, [r7, #12]
		}
//		printf("Accel:\t%f\n",accVal);
		return accVal;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	ee07 3a90 	vmov	s15, r3
		//[TODO] - error check if binAcc = -1;

//		printf("%i\t%b\n",binAcc);

//		printf("%i\t%f\n",cnt++, accVal);
}
 800107a:	eeb0 0a67 	vmov.f32	s0, s15
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	48000400 	.word	0x48000400
 8001088:	20000284 	.word	0x20000284
 800108c:	47000000 	.word	0x47000000
 8001090:	46fffe00 	.word	0x46fffe00

08001094 <setupLEDS>:
uint8_t clearLEDs[NUM_MSG_BYTES];
uint8_t BLANK_LED[4] = {0xE0, 0x00, 0x00, 0x00};

extern SPI_HandleTypeDef hspi2;

void setupLEDS(){
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
	float acc_inc = MAX_ACCEL/NUM_LEDS;
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <setupLEDS+0xb8>)
 800109c:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < NUM_LEDS; ++i){
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e028      	b.n	80010f6 <setupLEDS+0x62>
		//setup LED_INDEX_THRESHOLD
		LED_INDEX_THRESHOLD[i] = i*acc_inc;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b6:	4a26      	ldr	r2, [pc, #152]	; (8001150 <setupLEDS+0xbc>)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	edc3 7a00 	vstr	s15, [r3]

		//setup LED_COLOR_ARR
		if(i < NUM_GREEN){
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	dc05      	bgt.n	80010d4 <setupLEDS+0x40>
			LED_COLOR_ARR[i] = 0; // 0 = green
 80010c8:	4a22      	ldr	r2, [pc, #136]	; (8001154 <setupLEDS+0xc0>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	e00d      	b.n	80010f0 <setupLEDS+0x5c>
		}
		else if(i < NUM_GREEN + NUM_YELLOW){
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	dc05      	bgt.n	80010e6 <setupLEDS+0x52>
			LED_COLOR_ARR[i] = 1; // 1 = yellow
 80010da:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <setupLEDS+0xc0>)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e004      	b.n	80010f0 <setupLEDS+0x5c>
		}
		else{
			LED_COLOR_ARR[i] = 2; // 2 = red
 80010e6:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <setupLEDS+0xc0>)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	2202      	movs	r2, #2
 80010ee:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_LEDS; ++i){
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	3301      	adds	r3, #1
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2b0e      	cmp	r3, #14
 80010fa:	ddd3      	ble.n	80010a4 <setupLEDS+0x10>
		}
	}

	//initialize a blank LED strip array
	for(int j = 0; j < NUM_MSG_BYTES; ++j){
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	e01a      	b.n	8001138 <setupLEDS+0xa4>
		if(j < 4){
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b03      	cmp	r3, #3
 8001106:	dc05      	bgt.n	8001114 <setupLEDS+0x80>
			clearLEDs[j] = 0;
 8001108:	4a13      	ldr	r2, [pc, #76]	; (8001158 <setupLEDS+0xc4>)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	4413      	add	r3, r2
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	e00e      	b.n	8001132 <setupLEDS+0x9e>
		}
		else if(j < (NUM_MSG_BYTES - 1)){
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	2b3f      	cmp	r3, #63	; 0x3f
 8001118:	dc06      	bgt.n	8001128 <setupLEDS+0x94>
			memcpy(&clearLEDs[j],BLANK_LED,sizeof(BLANK_LED));
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <setupLEDS+0xc4>)
 800111e:	4413      	add	r3, r2
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <setupLEDS+0xc8>)
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e004      	b.n	8001132 <setupLEDS+0x9e>
		}
		else{
			clearLEDs[j] = 0;
 8001128:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <setupLEDS+0xc4>)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	4413      	add	r3, r2
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < NUM_MSG_BYTES; ++j){
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3301      	adds	r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b40      	cmp	r3, #64	; 0x40
 800113c:	dde1      	ble.n	8001102 <setupLEDS+0x6e>
		}
	}
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	3e088889 	.word	0x3e088889
 8001150:	200001f4 	.word	0x200001f4
 8001154:	20000230 	.word	0x20000230
 8001158:	20000240 	.word	0x20000240
 800115c:	20000000 	.word	0x20000000

08001160 <makeLEDFrame>:
	if(ret != HAL_OK){
		//There is a problem
	}
}

void makeLEDFrame(uint8_t* frame, uint8_t gr_yel_red){
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	switch(gr_yel_red){
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d026      	beq.n	80011c0 <makeLEDFrame+0x60>
 8001172:	2b02      	cmp	r3, #2
 8001174:	dc34      	bgt.n	80011e0 <makeLEDFrame+0x80>
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <makeLEDFrame+0x20>
 800117a:	2b01      	cmp	r3, #1
 800117c:	d010      	beq.n	80011a0 <makeLEDFrame+0x40>
 800117e:	e02f      	b.n	80011e0 <makeLEDFrame+0x80>
		case 0:									// green
			*(frame) = LED_FRAME_START_BRIGHT;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	22e3      	movs	r2, #227	; 0xe3
 8001184:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 	//green
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3301      	adds	r3, #1
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 255; 		//blue
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3302      	adds	r3, #2
 8001192:	22ff      	movs	r2, #255	; 0xff
 8001194:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 0;		//red
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3303      	adds	r3, #3
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
			break;
 800119e:	e02f      	b.n	8001200 <makeLEDFrame+0xa0>
		case 1:					 				// yellow
			*(frame) = LED_FRAME_START_BRIGHT;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	22e3      	movs	r2, #227	; 0xe3
 80011a4:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 	//green
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3301      	adds	r3, #1
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 255; 		//blue
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3302      	adds	r3, #2
 80011b2:	22ff      	movs	r2, #255	; 0xff
 80011b4:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 255;		//red
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3303      	adds	r3, #3
 80011ba:	22ff      	movs	r2, #255	; 0xff
 80011bc:	701a      	strb	r2, [r3, #0]
			break;
 80011be:	e01f      	b.n	8001200 <makeLEDFrame+0xa0>
		case 2:					 				// red
			*(frame) = LED_FRAME_START_BRIGHT;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	22e3      	movs	r2, #227	; 0xe3
 80011c4:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 		//green
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3301      	adds	r3, #1
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 0;	 	//blue
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3302      	adds	r3, #2
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 255;		//red
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3303      	adds	r3, #3
 80011da:	22ff      	movs	r2, #255	; 0xff
 80011dc:	701a      	strb	r2, [r3, #0]
			break;
 80011de:	e00f      	b.n	8001200 <makeLEDFrame+0xa0>
		default:								// no brightness
			*(frame) = LED_FRAME_START_OFF;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	22e0      	movs	r2, #224	; 0xe0
 80011e4:	701a      	strb	r2, [r3, #0]
			*(frame + 1) = 0; 		//green
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3301      	adds	r3, #1
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
			*(frame + 2) = 0; 		//blue
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3302      	adds	r3, #2
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
			*(frame + 3) = 0;		//red
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3303      	adds	r3, #3
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
			break;
 80011fe:	bf00      	nop
			//	[TODO] maybe try making them all off rather than having blue?
	}

}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <printLEDs>:

void printLEDs(float accVal){
 800120c:	b580      	push	{r7, lr}
 800120e:	b096      	sub	sp, #88	; 0x58
 8001210:	af00      	add	r7, sp, #0
 8001212:	ed87 0a01 	vstr	s0, [r7, #4]
	accVal = fabs(accVal);
 8001216:	edd7 7a01 	vldr	s15, [r7, #4]
 800121a:	eef0 7ae7 	vabs.f32	s15, s15
 800121e:	edc7 7a01 	vstr	s15, [r7, #4]

	uint8_t led_msg[NUM_MSG_BYTES];

	//create start frame
	int i = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	657b      	str	r3, [r7, #84]	; 0x54
	for(; i < 4; ++i){
 8001226:	e008      	b.n	800123a <printLEDs+0x2e>
		led_msg[i] = 0;
 8001228:	f107 020c 	add.w	r2, r7, #12
 800122c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800122e:	4413      	add	r3, r2
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
	for(; i < 4; ++i){
 8001234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001236:	3301      	adds	r3, #1
 8001238:	657b      	str	r3, [r7, #84]	; 0x54
 800123a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800123c:	2b03      	cmp	r3, #3
 800123e:	ddf3      	ble.n	8001228 <printLEDs+0x1c>
	}

	//create LED frame
	for(int j = 0; j < NUM_LEDS; ++j){
 8001240:	2300      	movs	r3, #0
 8001242:	653b      	str	r3, [r7, #80]	; 0x50
 8001244:	e029      	b.n	800129a <printLEDs+0x8e>
		uint8_t led_frame[4];
		if(accVal > LED_INDEX_THRESHOLD[j]){
 8001246:	4a27      	ldr	r2, [pc, #156]	; (80012e4 <printLEDs+0xd8>)
 8001248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	ed97 7a01 	vldr	s14, [r7, #4]
 8001256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125e:	dd0a      	ble.n	8001276 <printLEDs+0x6a>
			makeLEDFrame(led_frame,LED_COLOR_ARR[j]); //LED_COLOR_ARR[j] = 0,1,2
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <printLEDs+0xdc>)
 8001262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001264:	4413      	add	r3, r2
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff76 	bl	8001160 <makeLEDFrame>
 8001274:	e005      	b.n	8001282 <printLEDs+0x76>
		}
		else{
			makeLEDFrame(led_frame,4); //no brightness
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	2104      	movs	r1, #4
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff6f 	bl	8001160 <makeLEDFrame>
		}
		//add the frame to the rest of the message
		memcpy(&led_msg[i],led_frame,sizeof(led_frame));
 8001282:	f107 020c 	add.w	r2, r7, #12
 8001286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001288:	4413      	add	r3, r2
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	601a      	str	r2, [r3, #0]
//		led_msg[i] = led_frame;
		i = i + 4;
 800128e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001290:	3304      	adds	r3, #4
 8001292:	657b      	str	r3, [r7, #84]	; 0x54
	for(int j = 0; j < NUM_LEDS; ++j){
 8001294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001296:	3301      	adds	r3, #1
 8001298:	653b      	str	r3, [r7, #80]	; 0x50
 800129a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800129c:	2b0e      	cmp	r3, #14
 800129e:	ddd2      	ble.n	8001246 <printLEDs+0x3a>
			//full pause
		}
	}

	//create the end frame
	for(; i < NUM_MSG_BYTES; ++i){
 80012a0:	e008      	b.n	80012b4 <printLEDs+0xa8>
		led_msg[i] = 0;
 80012a2:	f107 020c 	add.w	r2, r7, #12
 80012a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012a8:	4413      	add	r3, r2
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
	for(; i < NUM_MSG_BYTES; ++i){
 80012ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b0:	3301      	adds	r3, #1
 80012b2:	657b      	str	r3, [r7, #84]	; 0x54
 80012b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b6:	2b40      	cmp	r3, #64	; 0x40
 80012b8:	ddf3      	ble.n	80012a2 <printLEDs+0x96>
	}

	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi2, (uint8_t *)led_msg, NUM_MSG_BYTES,1000);
 80012ba:	f107 010c 	add.w	r1, r7, #12
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	2241      	movs	r2, #65	; 0x41
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <printLEDs+0xe0>)
 80012c6:	f004 f854 	bl	8005372 <HAL_SPI_Transmit>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if(ret != HAL_OK){
		//There is a problem
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2140      	movs	r1, #64	; 0x40
 80012d4:	4806      	ldr	r0, [pc, #24]	; (80012f0 <printLEDs+0xe4>)
 80012d6:	f001 fcf9 	bl	8002ccc <HAL_GPIO_WritePin>
}
 80012da:	bf00      	nop
 80012dc:	3758      	adds	r7, #88	; 0x58
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001f4 	.word	0x200001f4
 80012e8:	20000230 	.word	0x20000230
 80012ec:	20000464 	.word	0x20000464
 80012f0:	48000400 	.word	0x48000400

080012f4 <read_Temperature>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile struct TelData teldata;

uint16_t read_Temperature(uint16_t GPIO_PIN) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
	uint16_t spi_buf[2];
	// Set the CS1 pin to low
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN, GPIO_PIN_RESET);
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	481b      	ldr	r0, [pc, #108]	; (8001374 <read_Temperature+0x80>)
 8001306:	f001 fce1 	bl	8002ccc <HAL_GPIO_WritePin>

	// Receive the data
	HAL_SPI_Receive(&hspi1, spi_buf, sizeof(spi_buf), 100);
 800130a:	f107 010c 	add.w	r1, r7, #12
 800130e:	2364      	movs	r3, #100	; 0x64
 8001310:	2204      	movs	r2, #4
 8001312:	4819      	ldr	r0, [pc, #100]	; (8001378 <read_Temperature+0x84>)
 8001314:	f004 f9a2 	bl	800565c <HAL_SPI_Receive>

	// Set the CS pin back to high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN, GPIO_PIN_SET);
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	2201      	movs	r2, #1
 800131c:	4619      	mov	r1, r3
 800131e:	4815      	ldr	r0, [pc, #84]	; (8001374 <read_Temperature+0x80>)
 8001320:	f001 fcd4 	bl	8002ccc <HAL_GPIO_WritePin>
//	HAL_Delay(1000);

	// handle the data
	// spi_buf[0] contains the first 16 bits of data
	// spi_buf[1] contains the last 16 bits of data
	uint16_t external_temp = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	82fb      	strh	r3, [r7, #22]
	uint16_t internal_temp = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	82bb      	strh	r3, [r7, #20]
	uint8_t fault = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	74fb      	strb	r3, [r7, #19]
	external_temp |= (spi_buf[0] >> 2) & 0xFFFF; // keep all data values
 8001330:	89bb      	ldrh	r3, [r7, #12]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	b29a      	uxth	r2, r3
 8001336:	8afb      	ldrh	r3, [r7, #22]
 8001338:	4313      	orrs	r3, r2
 800133a:	82fb      	strh	r3, [r7, #22]
	internal_temp |= (spi_buf[1] >> 4) & 0xFFFF; // keep all data values
 800133c:	89fb      	ldrh	r3, [r7, #14]
 800133e:	091b      	lsrs	r3, r3, #4
 8001340:	b29a      	uxth	r2, r3
 8001342:	8abb      	ldrh	r3, [r7, #20]
 8001344:	4313      	orrs	r3, r2
 8001346:	82bb      	strh	r3, [r7, #20]
	fault |= spi_buf[0] & 0x01; // only want the LSB
 8001348:	89bb      	ldrh	r3, [r7, #12]
 800134a:	b25b      	sxtb	r3, r3
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	b25a      	sxtb	r2, r3
 8001352:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001356:	4313      	orrs	r3, r2
 8001358:	b25b      	sxtb	r3, r3
 800135a:	74fb      	strb	r3, [r7, #19]
//		printf("ERROR \n\r");
	}


	// reset spi_buffer
	spi_buf[0] = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	81bb      	strh	r3, [r7, #12]
	spi_buf[1] = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	81fb      	strh	r3, [r7, #14]

	return external_temp/4;
 8001364:	8afb      	ldrh	r3, [r7, #22]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	b29b      	uxth	r3, r3
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	48000400 	.word	0x48000400
 8001378:	20000400 	.word	0x20000400

0800137c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001380:	f001 f98b 	bl	800269a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001384:	f000 f838 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001388:	f000 fabc 	bl	8001904 <MX_GPIO_Init>
  MX_I2C1_Init();
 800138c:	f000 f87a 	bl	8001484 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001390:	f000 f94e 	bl	8001630 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001394:	f000 f9c8 	bl	8001728 <MX_TIM3_Init>
  MX_TIM15_Init();
 8001398:	f000 fa16 	bl	80017c8 <MX_TIM15_Init>
  MX_TIM17_Init();
 800139c:	f000 fa66 	bl	800186c <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80013a0:	f000 f8fa 	bl	8001598 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 80013a4:	f000 f8ac 	bl	8001500 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 80013a8:	f000 f980 	bl	80016ac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	// CS for all sensors should be high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2120      	movs	r1, #32
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <main+0x6c>)
 80013b2:	f001 fc8b 	bl	8002ccc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2104      	movs	r1, #4
 80013ba:	480b      	ldr	r0, [pc, #44]	; (80013e8 <main+0x6c>)
 80013bc:	f001 fc86 	bl	8002ccc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2140      	movs	r1, #64	; 0x40
 80013c4:	4808      	ldr	r0, [pc, #32]	; (80013e8 <main+0x6c>)
 80013c6:	f001 fc81 	bl	8002ccc <HAL_GPIO_WritePin>

	setupAccModule();
 80013ca:	f7ff fdd3 	bl	8000f74 <setupAccModule>
	setupLEDS();
 80013ce:	f7ff fe61 	bl	8001094 <setupLEDS>

	// Start Timer
	HAL_TIM_Base_Start_IT(&htim3);
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <main+0x70>)
 80013d4:	f004 feb0 	bl	8006138 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim15);
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <main+0x74>)
 80013da:	f004 fead 	bl	8006138 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim17,TIM_CHANNEL_1);
 80013de:	2100      	movs	r1, #0
 80013e0:	4804      	ldr	r0, [pc, #16]	; (80013f4 <main+0x78>)
 80013e2:	f004 ff7b 	bl	80062dc <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <main+0x6a>
 80013e8:	48000400 	.word	0x48000400
 80013ec:	200004c8 	.word	0x200004c8
 80013f0:	20000514 	.word	0x20000514
 80013f4:	20000560 	.word	0x20000560

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b096      	sub	sp, #88	; 0x58
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	2244      	movs	r2, #68	; 0x44
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f007 fbcc 	bl	8008ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	463b      	mov	r3, r7
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800141a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800141e:	f002 fa61 	bl	80038e4 <HAL_PWREx_ControlVoltageScaling>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001428:	f000 fc82 	bl	8001d30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800142c:	2310      	movs	r3, #16
 800142e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001430:	2301      	movs	r3, #1
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001438:	2360      	movs	r3, #96	; 0x60
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800143c:	2300      	movs	r3, #0
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4618      	mov	r0, r3
 8001446:	f002 fb01 	bl	8003a4c <HAL_RCC_OscConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001450:	f000 fc6e 	bl	8001d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001454:	230f      	movs	r3, #15
 8001456:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001468:	463b      	mov	r3, r7
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f002 ff07 	bl	8004280 <HAL_RCC_ClockConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001478:	f000 fc5a 	bl	8001d30 <Error_Handler>
  }
}
 800147c:	bf00      	nop
 800147e:	3758      	adds	r7, #88	; 0x58
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_I2C1_Init+0x74>)
 800148a:	4a1c      	ldr	r2, [pc, #112]	; (80014fc <MX_I2C1_Init+0x78>)
 800148c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_I2C1_Init+0x74>)
 8001490:	f640 6214 	movw	r2, #3604	; 0xe14
 8001494:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_I2C1_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_I2C1_Init+0x74>)
 800149e:	2201      	movs	r2, #1
 80014a0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014c2:	f001 fc1b 	bl	8002cfc <HAL_I2C_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014cc:	f000 fc30 	bl	8001d30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014d0:	2100      	movs	r1, #0
 80014d2:	4809      	ldr	r0, [pc, #36]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014d4:	f002 f94e 	bl	8003774 <HAL_I2CEx_ConfigAnalogFilter>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80014de:	f000 fc27 	bl	8001d30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014e6:	f002 f990 	bl	800380a <HAL_I2CEx_ConfigDigitalFilter>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80014f0:	f000 fc1e 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000284 	.word	0x20000284
 80014fc:	40005400 	.word	0x40005400

08001500 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001504:	4b22      	ldr	r3, [pc, #136]	; (8001590 <MX_LPUART1_UART_Init+0x90>)
 8001506:	4a23      	ldr	r2, [pc, #140]	; (8001594 <MX_LPUART1_UART_Init+0x94>)
 8001508:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <MX_LPUART1_UART_Init+0x90>)
 800150c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001510:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <MX_LPUART1_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_LPUART1_UART_Init+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MX_LPUART1_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_LPUART1_UART_Init+0x90>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <MX_LPUART1_UART_Init+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_LPUART1_UART_Init+0x90>)
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_LPUART1_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_LPUART1_UART_Init+0x90>)
 800153e:	2200      	movs	r2, #0
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_LPUART1_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001548:	4811      	ldr	r0, [pc, #68]	; (8001590 <MX_LPUART1_UART_Init+0x90>)
 800154a:	f005 fdc5 	bl	80070d8 <HAL_UART_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001554:	f000 fbec 	bl	8001d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001558:	2100      	movs	r1, #0
 800155a:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_LPUART1_UART_Init+0x90>)
 800155c:	f006 fbea 	bl	8007d34 <HAL_UARTEx_SetTxFifoThreshold>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001566:	f000 fbe3 	bl	8001d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156a:	2100      	movs	r1, #0
 800156c:	4808      	ldr	r0, [pc, #32]	; (8001590 <MX_LPUART1_UART_Init+0x90>)
 800156e:	f006 fc1f 	bl	8007db0 <HAL_UARTEx_SetRxFifoThreshold>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001578:	f000 fbda 	bl	8001d30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_LPUART1_UART_Init+0x90>)
 800157e:	f006 fba0 	bl	8007cc2 <HAL_UARTEx_DisableFifoMode>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001588:	f000 fbd2 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200002d8 	.word	0x200002d8
 8001594:	40008000 	.word	0x40008000

08001598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <MX_USART1_UART_Init+0x90>)
 800159e:	4a23      	ldr	r2, [pc, #140]	; (800162c <MX_USART1_UART_Init+0x94>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <MX_USART1_UART_Init+0x90>)
 80015a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <MX_USART1_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <MX_USART1_UART_Init+0x90>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <MX_USART1_UART_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <MX_USART1_UART_Init+0x90>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b19      	ldr	r3, [pc, #100]	; (8001628 <MX_USART1_UART_Init+0x90>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <MX_USART1_UART_Init+0x90>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <MX_USART1_UART_Init+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <MX_USART1_UART_Init+0x90>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <MX_USART1_UART_Init+0x90>)
 80015dc:	2200      	movs	r2, #0
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015e0:	4811      	ldr	r0, [pc, #68]	; (8001628 <MX_USART1_UART_Init+0x90>)
 80015e2:	f005 fd79 	bl	80070d8 <HAL_UART_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015ec:	f000 fba0 	bl	8001d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f0:	2100      	movs	r1, #0
 80015f2:	480d      	ldr	r0, [pc, #52]	; (8001628 <MX_USART1_UART_Init+0x90>)
 80015f4:	f006 fb9e 	bl	8007d34 <HAL_UARTEx_SetTxFifoThreshold>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015fe:	f000 fb97 	bl	8001d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001602:	2100      	movs	r1, #0
 8001604:	4808      	ldr	r0, [pc, #32]	; (8001628 <MX_USART1_UART_Init+0x90>)
 8001606:	f006 fbd3 	bl	8007db0 <HAL_UARTEx_SetRxFifoThreshold>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001610:	f000 fb8e 	bl	8001d30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <MX_USART1_UART_Init+0x90>)
 8001616:	f006 fb54 	bl	8007cc2 <HAL_UARTEx_DisableFifoMode>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001620:	f000 fb86 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2000036c 	.word	0x2000036c
 800162c:	40013800 	.word	0x40013800

08001630 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001636:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <MX_SPI1_Init+0x78>)
 8001638:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_SPI1_Init+0x74>)
 800163c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001640:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001648:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_SPI1_Init+0x74>)
 800164c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001650:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_SPI1_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001664:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <MX_SPI1_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <MX_SPI1_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001680:	2207      	movs	r2, #7
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001686:	2200      	movs	r2, #0
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_SPI1_Init+0x74>)
 800168c:	2208      	movs	r2, #8
 800168e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <MX_SPI1_Init+0x74>)
 8001692:	f003 fdcb 	bl	800522c <HAL_SPI_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800169c:	f000 fb48 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000400 	.word	0x20000400
 80016a8:	40013000 	.word	0x40013000

080016ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <MX_SPI2_Init+0x74>)
 80016b2:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <MX_SPI2_Init+0x78>)
 80016b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <MX_SPI2_Init+0x74>)
 80016b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <MX_SPI2_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <MX_SPI2_Init+0x74>)
 80016c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_SPI2_Init+0x74>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <MX_SPI2_Init+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_SPI2_Init+0x74>)
 80016da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_SPI2_Init+0x74>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_SPI2_Init+0x74>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_SPI2_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_SPI2_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_SPI2_Init+0x74>)
 80016fa:	2207      	movs	r2, #7
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MX_SPI2_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_SPI2_Init+0x74>)
 8001706:	2208      	movs	r2, #8
 8001708:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_SPI2_Init+0x74>)
 800170c:	f003 fd8e 	bl	800522c <HAL_SPI_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001716:	f000 fb0b 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000464 	.word	0x20000464
 8001724:	40003800 	.word	0x40003800

08001728 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001746:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <MX_TIM3_Init+0x98>)
 8001748:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <MX_TIM3_Init+0x9c>)
 800174a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3999;
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <MX_TIM3_Init+0x98>)
 800174e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001752:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_TIM3_Init+0x98>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <MX_TIM3_Init+0x98>)
 800175c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001760:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <MX_TIM3_Init+0x98>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_TIM3_Init+0x98>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800176e:	4814      	ldr	r0, [pc, #80]	; (80017c0 <MX_TIM3_Init+0x98>)
 8001770:	f004 fc8a 	bl	8006088 <HAL_TIM_Base_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800177a:	f000 fad9 	bl	8001d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001782:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	4619      	mov	r1, r3
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <MX_TIM3_Init+0x98>)
 800178c:	f005 f88e 	bl	80068ac <HAL_TIM_ConfigClockSource>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001796:	f000 facb 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	4806      	ldr	r0, [pc, #24]	; (80017c0 <MX_TIM3_Init+0x98>)
 80017a8:	f005 fbf0 	bl	8006f8c <HAL_TIMEx_MasterConfigSynchronization>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80017b2:	f000 fabd 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200004c8 	.word	0x200004c8
 80017c4:	40000400 	.word	0x40000400

080017c8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <MX_TIM15_Init+0x9c>)
 80017e8:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <MX_TIM15_Init+0xa0>)
 80017ea:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3999;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <MX_TIM15_Init+0x9c>)
 80017ee:	f640 729f 	movw	r2, #3999	; 0xf9f
 80017f2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <MX_TIM15_Init+0x9c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <MX_TIM15_Init+0x9c>)
 80017fc:	2213      	movs	r2, #19
 80017fe:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <MX_TIM15_Init+0x9c>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <MX_TIM15_Init+0x9c>)
 8001808:	2200      	movs	r2, #0
 800180a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <MX_TIM15_Init+0x9c>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001812:	4814      	ldr	r0, [pc, #80]	; (8001864 <MX_TIM15_Init+0x9c>)
 8001814:	f004 fc38 	bl	8006088 <HAL_TIM_Base_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800181e:	f000 fa87 	bl	8001d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001826:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4619      	mov	r1, r3
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <MX_TIM15_Init+0x9c>)
 8001830:	f005 f83c 	bl	80068ac <HAL_TIM_ConfigClockSource>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800183a:	f000 fa79 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4806      	ldr	r0, [pc, #24]	; (8001864 <MX_TIM15_Init+0x9c>)
 800184c:	f005 fb9e 	bl	8006f8c <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001856:	f000 fa6b 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000514 	.word	0x20000514
 8001868:	40014000 	.word	0x40014000

0800186c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001872:	463b      	mov	r3, r7
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <MX_TIM17_Init+0x90>)
 8001880:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <MX_TIM17_Init+0x94>)
 8001882:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3999;
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <MX_TIM17_Init+0x90>)
 8001886:	f640 729f 	movw	r2, #3999	; 0xf9f
 800188a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <MX_TIM17_Init+0x90>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <MX_TIM17_Init+0x90>)
 8001894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001898:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <MX_TIM17_Init+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <MX_TIM17_Init+0x90>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <MX_TIM17_Init+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80018ac:	4813      	ldr	r0, [pc, #76]	; (80018fc <MX_TIM17_Init+0x90>)
 80018ae:	f004 fbeb 	bl	8006088 <HAL_TIM_Base_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM17_Init+0x50>
  {
    Error_Handler();
 80018b8:	f000 fa3a 	bl	8001d30 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 80018bc:	480f      	ldr	r0, [pc, #60]	; (80018fc <MX_TIM17_Init+0x90>)
 80018be:	f004 fcab 	bl	8006218 <HAL_TIM_IC_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80018c8:	f000 fa32 	bl	8001d30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80018cc:	2302      	movs	r3, #2
 80018ce:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018d0:	2301      	movs	r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80018d8:	230f      	movs	r3, #15
 80018da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018dc:	463b      	mov	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	4619      	mov	r1, r3
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <MX_TIM17_Init+0x90>)
 80018e4:	f004 ff46 	bl	8006774 <HAL_TIM_IC_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM17_Init+0x86>
  {
    Error_Handler();
 80018ee:	f000 fa1f 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000560 	.word	0x20000560
 8001900:	40014800 	.word	0x40014800

08001904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08e      	sub	sp, #56	; 0x38
 8001908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800191a:	4bb2      	ldr	r3, [pc, #712]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4ab1      	ldr	r2, [pc, #708]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 8001920:	f043 0310 	orr.w	r3, r3, #16
 8001924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001926:	4baf      	ldr	r3, [pc, #700]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	623b      	str	r3, [r7, #32]
 8001930:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	4bac      	ldr	r3, [pc, #688]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4aab      	ldr	r2, [pc, #684]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4ba9      	ldr	r3, [pc, #676]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800194a:	4ba6      	ldr	r3, [pc, #664]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	4aa5      	ldr	r2, [pc, #660]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 8001950:	f043 0320 	orr.w	r3, r3, #32
 8001954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001956:	4ba3      	ldr	r3, [pc, #652]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	f003 0320 	and.w	r3, r3, #32
 800195e:	61bb      	str	r3, [r7, #24]
 8001960:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001962:	4ba0      	ldr	r3, [pc, #640]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	4a9f      	ldr	r2, [pc, #636]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 8001968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800196c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196e:	4b9d      	ldr	r3, [pc, #628]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	4b9a      	ldr	r3, [pc, #616]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	4a99      	ldr	r2, [pc, #612]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001986:	4b97      	ldr	r3, [pc, #604]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	4b94      	ldr	r3, [pc, #592]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	4a93      	ldr	r2, [pc, #588]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199e:	4b91      	ldr	r3, [pc, #580]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019aa:	4b8e      	ldr	r3, [pc, #568]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	4a8d      	ldr	r2, [pc, #564]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 80019b0:	f043 0308 	orr.w	r3, r3, #8
 80019b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b6:	4b8b      	ldr	r3, [pc, #556]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019c2:	4b88      	ldr	r3, [pc, #544]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	4a87      	ldr	r2, [pc, #540]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 80019c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ce:	4b85      	ldr	r3, [pc, #532]	; (8001be4 <MX_GPIO_Init+0x2e0>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80019da:	f002 f827 	bl	8003a2c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	2164      	movs	r1, #100	; 0x64
 80019e2:	4881      	ldr	r0, [pc, #516]	; (8001be8 <MX_GPIO_Init+0x2e4>)
 80019e4:	f001 f972 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019e8:	230c      	movs	r3, #12
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	2300      	movs	r3, #0
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80019f8:	230d      	movs	r3, #13
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a00:	4619      	mov	r1, r3
 8001a02:	487a      	ldr	r0, [pc, #488]	; (8001bec <MX_GPIO_Init+0x2e8>)
 8001a04:	f000 ffd0 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001a08:	2307      	movs	r3, #7
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0c:	2312      	movs	r3, #18
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a18:	2304      	movs	r3, #4
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	4873      	ldr	r0, [pc, #460]	; (8001bf0 <MX_GPIO_Init+0x2ec>)
 8001a24:	f000 ffc0 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001a38:	230d      	movs	r3, #13
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a40:	4619      	mov	r1, r3
 8001a42:	486b      	ldr	r0, [pc, #428]	; (8001bf0 <MX_GPIO_Init+0x2ec>)
 8001a44:	f000 ffb0 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a48:	233f      	movs	r3, #63	; 0x3f
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a4c:	230b      	movs	r3, #11
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4866      	ldr	r0, [pc, #408]	; (8001bf4 <MX_GPIO_Init+0x2f0>)
 8001a5c:	f000 ffa4 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a60:	2301      	movs	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a70:	2301      	movs	r3, #1
 8001a72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7e:	f000 ff93 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001a82:	230a      	movs	r3, #10
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a86:	230b      	movs	r3, #11
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a98:	f000 ff86 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001aa0:	230b      	movs	r3, #11
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aac:	4619      	mov	r1, r3
 8001aae:	484e      	ldr	r0, [pc, #312]	; (8001be8 <MX_GPIO_Init+0x2e4>)
 8001ab0:	f000 ff7a 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001ab4:	2364      	movs	r3, #100	; 0x64
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4847      	ldr	r0, [pc, #284]	; (8001be8 <MX_GPIO_Init+0x2e4>)
 8001acc:	f000 ff6c 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001ad0:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aea:	4619      	mov	r1, r3
 8001aec:	483f      	ldr	r0, [pc, #252]	; (8001bec <MX_GPIO_Init+0x2e8>)
 8001aee:	f000 ff5b 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001af2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001b04:	2303      	movs	r3, #3
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4837      	ldr	r0, [pc, #220]	; (8001bec <MX_GPIO_Init+0x2e8>)
 8001b10:	f000 ff4a 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b26:	2301      	movs	r3, #1
 8001b28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	482d      	ldr	r0, [pc, #180]	; (8001be8 <MX_GPIO_Init+0x2e4>)
 8001b32:	f000 ff39 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001b36:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001b48:	230d      	movs	r3, #13
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b50:	4619      	mov	r1, r3
 8001b52:	4825      	ldr	r0, [pc, #148]	; (8001be8 <MX_GPIO_Init+0x2e4>)
 8001b54:	f000 ff28 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b66:	2303      	movs	r3, #3
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b72:	4619      	mov	r1, r3
 8001b74:	4820      	ldr	r0, [pc, #128]	; (8001bf8 <MX_GPIO_Init+0x2f4>)
 8001b76:	f000 ff17 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b7a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b94:	4619      	mov	r1, r3
 8001b96:	4818      	ldr	r0, [pc, #96]	; (8001bf8 <MX_GPIO_Init+0x2f4>)
 8001b98:	f000 ff06 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b9c:	2340      	movs	r3, #64	; 0x40
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001bac:	230d      	movs	r3, #13
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480f      	ldr	r0, [pc, #60]	; (8001bf4 <MX_GPIO_Init+0x2f0>)
 8001bb8:	f000 fef6 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001bbc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001bce:	230c      	movs	r3, #12
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <MX_GPIO_Init+0x2f0>)
 8001bda:	f000 fee5 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001bde:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001be2:	e00b      	b.n	8001bfc <MX_GPIO_Init+0x2f8>
 8001be4:	40021000 	.word	0x40021000
 8001be8:	48000400 	.word	0x48000400
 8001bec:	48001000 	.word	0x48001000
 8001bf0:	48001400 	.word	0x48001400
 8001bf4:	48000800 	.word	0x48000800
 8001bf8:	48000c00 	.word	0x48000c00
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c12:	4619      	mov	r1, r3
 8001c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c18:	f000 fec6 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c22:	2300      	movs	r3, #0
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c34:	f000 feb8 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c48:	2309      	movs	r3, #9
 8001c4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c50:	4619      	mov	r1, r3
 8001c52:	482b      	ldr	r0, [pc, #172]	; (8001d00 <MX_GPIO_Init+0x3fc>)
 8001c54:	f000 fea8 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c68:	230c      	movs	r3, #12
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c70:	4619      	mov	r1, r3
 8001c72:	4823      	ldr	r0, [pc, #140]	; (8001d00 <MX_GPIO_Init+0x3fc>)
 8001c74:	f000 fe98 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c88:	2307      	movs	r3, #7
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c90:	4619      	mov	r1, r3
 8001c92:	481b      	ldr	r0, [pc, #108]	; (8001d00 <MX_GPIO_Init+0x3fc>)
 8001c94:	f000 fe88 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c98:	2340      	movs	r3, #64	; 0x40
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001ca8:	2305      	movs	r3, #5
 8001caa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4813      	ldr	r0, [pc, #76]	; (8001d00 <MX_GPIO_Init+0x3fc>)
 8001cb4:	f000 fe78 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001cb8:	2318      	movs	r3, #24
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cc8:	2306      	movs	r3, #6
 8001cca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480c      	ldr	r0, [pc, #48]	; (8001d04 <MX_GPIO_Init+0x400>)
 8001cd4:	f000 fe68 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_GPIO_Init+0x404>)
 8001cf4:	f000 fe58 	bl	80029a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cf8:	bf00      	nop
 8001cfa:	3738      	adds	r7, #56	; 0x38
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	48000c00 	.word	0x48000c00
 8001d04:	48000400 	.word	0x48000400
 8001d08:	48001000 	.word	0x48001000

08001d0c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001d14:	1d39      	adds	r1, r7, #4
 8001d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4803      	ldr	r0, [pc, #12]	; (8001d2c <__io_putchar+0x20>)
 8001d1e:	f005 fa2b 	bl	8007178 <HAL_UART_Transmit>
  return ch;
 8001d22:	687b      	ldr	r3, [r7, #4]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	200002d8 	.word	0x200002d8

08001d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d34:	b672      	cpsid	i
}
 8001d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <Error_Handler+0x8>
	...

08001d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_MspInit+0x44>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <HAL_MspInit+0x44>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_MspInit+0x44>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_MspInit+0x44>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4a08      	ldr	r2, [pc, #32]	; (8001d80 <HAL_MspInit+0x44>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_MspInit+0x44>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001d72:	2005      	movs	r0, #5
 8001d74:	f000 fdd6 	bl	8002924 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000

08001d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b0ae      	sub	sp, #184	; 0xb8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	2294      	movs	r2, #148	; 0x94
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f006 fefd 	bl	8008ba4 <memset>
  if(hi2c->Instance==I2C1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <HAL_I2C_MspInit+0xb0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d13b      	bne.n	8001e2c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001db8:	2300      	movs	r3, #0
 8001dba:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dbc:	f107 0310 	add.w	r3, r7, #16
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f002 fd1b 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001dcc:	f7ff ffb0 	bl	8001d30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_I2C_MspInit+0xb4>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <HAL_I2C_MspInit+0xb4>)
 8001dd6:	f043 0302 	orr.w	r3, r3, #2
 8001dda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <HAL_I2C_MspInit+0xb4>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001de8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df0:	2312      	movs	r3, #18
 8001df2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e02:	2304      	movs	r3, #4
 8001e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	480b      	ldr	r0, [pc, #44]	; (8001e3c <HAL_I2C_MspInit+0xb8>)
 8001e10:	f000 fdca 	bl	80029a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_I2C_MspInit+0xb4>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <HAL_I2C_MspInit+0xb4>)
 8001e1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_I2C_MspInit+0xb4>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e2c:	bf00      	nop
 8001e2e:	37b8      	adds	r7, #184	; 0xb8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40005400 	.word	0x40005400
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	48000400 	.word	0x48000400

08001e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b0b0      	sub	sp, #192	; 0xc0
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e58:	f107 0318 	add.w	r3, r7, #24
 8001e5c:	2294      	movs	r2, #148	; 0x94
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f006 fe9f 	bl	8008ba4 <memset>
  if(huart->Instance==LPUART1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a44      	ldr	r2, [pc, #272]	; (8001f7c <HAL_UART_MspInit+0x13c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d13e      	bne.n	8001eee <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e70:	2320      	movs	r3, #32
 8001e72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e78:	f107 0318 	add.w	r3, r7, #24
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f002 fcbd 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e88:	f7ff ff52 	bl	8001d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e8c:	4b3c      	ldr	r3, [pc, #240]	; (8001f80 <HAL_UART_MspInit+0x140>)
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e90:	4a3b      	ldr	r2, [pc, #236]	; (8001f80 <HAL_UART_MspInit+0x140>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001e98:	4b39      	ldr	r3, [pc, #228]	; (8001f80 <HAL_UART_MspInit+0x140>)
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <HAL_UART_MspInit+0x140>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	4a35      	ldr	r2, [pc, #212]	; (8001f80 <HAL_UART_MspInit+0x140>)
 8001eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb0:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <HAL_UART_MspInit+0x140>)
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001ebc:	f001 fdb6 	bl	8003a2c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001ec0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001eda:	2308      	movs	r3, #8
 8001edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ee0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4827      	ldr	r0, [pc, #156]	; (8001f84 <HAL_UART_MspInit+0x144>)
 8001ee8:	f000 fd5e 	bl	80029a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001eec:	e042      	b.n	8001f74 <HAL_UART_MspInit+0x134>
  else if(huart->Instance==USART1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a25      	ldr	r2, [pc, #148]	; (8001f88 <HAL_UART_MspInit+0x148>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d13d      	bne.n	8001f74 <HAL_UART_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001efc:	2300      	movs	r3, #0
 8001efe:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f00:	f107 0318 	add.w	r3, r7, #24
 8001f04:	4618      	mov	r0, r3
 8001f06:	f002 fc79 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001f10:	f7ff ff0e 	bl	8001d30 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <HAL_UART_MspInit+0x140>)
 8001f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f18:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <HAL_UART_MspInit+0x140>)
 8001f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_UART_MspInit+0x140>)
 8001f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <HAL_UART_MspInit+0x140>)
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f30:	4a13      	ldr	r2, [pc, #76]	; (8001f80 <HAL_UART_MspInit+0x140>)
 8001f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_UART_MspInit+0x140>)
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001f44:	f001 fd72 	bl	8003a2c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f62:	2307      	movs	r3, #7
 8001f64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f68:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <HAL_UART_MspInit+0x144>)
 8001f70:	f000 fd1a 	bl	80029a8 <HAL_GPIO_Init>
}
 8001f74:	bf00      	nop
 8001f76:	37c0      	adds	r7, #192	; 0xc0
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40008000 	.word	0x40008000
 8001f80:	40021000 	.word	0x40021000
 8001f84:	48001800 	.word	0x48001800
 8001f88:	40013800 	.word	0x40013800

08001f8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a36      	ldr	r2, [pc, #216]	; (8002084 <HAL_SPI_MspInit+0xf8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d129      	bne.n	8002002 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fae:	4b36      	ldr	r3, [pc, #216]	; (8002088 <HAL_SPI_MspInit+0xfc>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb2:	4a35      	ldr	r2, [pc, #212]	; (8002088 <HAL_SPI_MspInit+0xfc>)
 8001fb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fba:	4b33      	ldr	r3, [pc, #204]	; (8002088 <HAL_SPI_MspInit+0xfc>)
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	4b30      	ldr	r3, [pc, #192]	; (8002088 <HAL_SPI_MspInit+0xfc>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	4a2f      	ldr	r2, [pc, #188]	; (8002088 <HAL_SPI_MspInit+0xfc>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd2:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <HAL_SPI_MspInit+0xfc>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fde:	23f0      	movs	r3, #240	; 0xf0
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fee:	2305      	movs	r3, #5
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffc:	f000 fcd4 	bl	80029a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002000:	e03c      	b.n	800207c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a21      	ldr	r2, [pc, #132]	; (800208c <HAL_SPI_MspInit+0x100>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d137      	bne.n	800207c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800200c:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <HAL_SPI_MspInit+0xfc>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	4a1d      	ldr	r2, [pc, #116]	; (8002088 <HAL_SPI_MspInit+0xfc>)
 8002012:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002016:	6593      	str	r3, [r2, #88]	; 0x58
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_SPI_MspInit+0xfc>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_SPI_MspInit+0xfc>)
 8002026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002028:	4a17      	ldr	r2, [pc, #92]	; (8002088 <HAL_SPI_MspInit+0xfc>)
 800202a:	f043 0308 	orr.w	r3, r3, #8
 800202e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002030:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_SPI_MspInit+0xfc>)
 8002032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800203c:	2308      	movs	r3, #8
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800204c:	2303      	movs	r3, #3
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	480e      	ldr	r0, [pc, #56]	; (8002090 <HAL_SPI_MspInit+0x104>)
 8002058:	f000 fca6 	bl	80029a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800205c:	2310      	movs	r3, #16
 800205e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002068:	2303      	movs	r3, #3
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800206c:	2305      	movs	r3, #5
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	4619      	mov	r1, r3
 8002076:	4806      	ldr	r0, [pc, #24]	; (8002090 <HAL_SPI_MspInit+0x104>)
 8002078:	f000 fc96 	bl	80029a8 <HAL_GPIO_Init>
}
 800207c:	bf00      	nop
 800207e:	3730      	adds	r7, #48	; 0x30
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40013000 	.word	0x40013000
 8002088:	40021000 	.word	0x40021000
 800208c:	40003800 	.word	0x40003800
 8002090:	48000c00 	.word	0x48000c00

08002094 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08e      	sub	sp, #56	; 0x38
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a5f      	ldr	r2, [pc, #380]	; (8002230 <HAL_TIM_Base_MspInit+0x19c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d14c      	bne.n	8002150 <HAL_TIM_Base_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020b6:	4b5f      	ldr	r3, [pc, #380]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	4a5e      	ldr	r2, [pc, #376]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6593      	str	r3, [r2, #88]	; 0x58
 80020c2:	4b5c      	ldr	r3, [pc, #368]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	4b59      	ldr	r3, [pc, #356]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	4a58      	ldr	r2, [pc, #352]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020da:	4b56      	ldr	r3, [pc, #344]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 80020dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e6:	4b53      	ldr	r3, [pc, #332]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 80020e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ea:	4a52      	ldr	r2, [pc, #328]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f2:	4b50      	ldr	r3, [pc, #320]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 80020f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020fe:	2301      	movs	r3, #1
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800210e:	2302      	movs	r3, #2
 8002110:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002116:	4619      	mov	r1, r3
 8002118:	4847      	ldr	r0, [pc, #284]	; (8002238 <HAL_TIM_Base_MspInit+0x1a4>)
 800211a:	f000 fc45 	bl	80029a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800212e:	2302      	movs	r3, #2
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002136:	4619      	mov	r1, r3
 8002138:	4840      	ldr	r0, [pc, #256]	; (800223c <HAL_TIM_Base_MspInit+0x1a8>)
 800213a:	f000 fc35 	bl	80029a8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 1);
 800213e:	2201      	movs	r2, #1
 8002140:	2101      	movs	r1, #1
 8002142:	201d      	movs	r0, #29
 8002144:	f000 fbf9 	bl	800293a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002148:	201d      	movs	r0, #29
 800214a:	f000 fc12 	bl	8002972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800214e:	e06b      	b.n	8002228 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM15)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a3a      	ldr	r2, [pc, #232]	; (8002240 <HAL_TIM_Base_MspInit+0x1ac>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d131      	bne.n	80021be <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800215a:	4b36      	ldr	r3, [pc, #216]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 800215c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215e:	4a35      	ldr	r2, [pc, #212]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002164:	6613      	str	r3, [r2, #96]	; 0x60
 8002166:	4b33      	ldr	r3, [pc, #204]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 8002168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	4b30      	ldr	r3, [pc, #192]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002176:	4a2f      	ldr	r2, [pc, #188]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800217e:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800218a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800219c:	230e      	movs	r3, #14
 800219e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a4:	4619      	mov	r1, r3
 80021a6:	4824      	ldr	r0, [pc, #144]	; (8002238 <HAL_TIM_Base_MspInit+0x1a4>)
 80021a8:	f000 fbfe 	bl	80029a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2101      	movs	r1, #1
 80021b0:	2018      	movs	r0, #24
 80021b2:	f000 fbc2 	bl	800293a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80021b6:	2018      	movs	r0, #24
 80021b8:	f000 fbdb 	bl	8002972 <HAL_NVIC_EnableIRQ>
}
 80021bc:	e034      	b.n	8002228 <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM17)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a20      	ldr	r2, [pc, #128]	; (8002244 <HAL_TIM_Base_MspInit+0x1b0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d12f      	bne.n	8002228 <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 80021ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021cc:	4a19      	ldr	r2, [pc, #100]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 80021ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d2:	6613      	str	r3, [r2, #96]	; 0x60
 80021d4:	4b17      	ldr	r3, [pc, #92]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 80021d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 80021e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e4:	4a13      	ldr	r2, [pc, #76]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 80021e6:	f043 0310 	orr.w	r3, r3, #16
 80021ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_TIM_Base_MspInit+0x1a0>)
 80021ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021f8:	2302      	movs	r3, #2
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8002208:	230e      	movs	r3, #14
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800220c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002210:	4619      	mov	r1, r3
 8002212:	480d      	ldr	r0, [pc, #52]	; (8002248 <HAL_TIM_Base_MspInit+0x1b4>)
 8002214:	f000 fbc8 	bl	80029a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002218:	2200      	movs	r2, #0
 800221a:	2100      	movs	r1, #0
 800221c:	201a      	movs	r0, #26
 800221e:	f000 fb8c 	bl	800293a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002222:	201a      	movs	r0, #26
 8002224:	f000 fba5 	bl	8002972 <HAL_NVIC_EnableIRQ>
}
 8002228:	bf00      	nop
 800222a:	3738      	adds	r7, #56	; 0x38
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40000400 	.word	0x40000400
 8002234:	40021000 	.word	0x40021000
 8002238:	48000400 	.word	0x48000400
 800223c:	48000800 	.word	0x48000800
 8002240:	40014000 	.word	0x40014000
 8002244:	40014800 	.word	0x40014800
 8002248:	48001000 	.word	0x48001000

0800224c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <NMI_Handler+0x4>

08002252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002256:	e7fe      	b.n	8002256 <HardFault_Handler+0x4>

08002258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800225c:	e7fe      	b.n	800225c <MemManage_Handler+0x4>

0800225e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002262:	e7fe      	b.n	8002262 <BusFault_Handler+0x4>

08002264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <UsageFault_Handler+0x4>

0800226a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002298:	f000 fa54 	bl	8002744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}

080022a0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80022a4:	480b      	ldr	r0, [pc, #44]	; (80022d4 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80022a6:	f004 f963 	bl	8006570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  acc = ReadAccData();
 80022aa:	f7fe fe8d 	bl	8000fc8 <ReadAccData>
 80022ae:	eef0 7a40 	vmov.f32	s15, s0
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80022b4:	edc3 7a00 	vstr	s15, [r3]
  teldata.accel = acc;
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a07      	ldr	r2, [pc, #28]	; (80022dc <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 80022be:	6013      	str	r3, [r2, #0]
  printLEDs(acc);
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	eeb0 0a67 	vmov.f32	s0, s15
 80022ca:	f7fe ff9f 	bl	800120c <printLEDs>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000514 	.word	0x20000514
 80022d8:	200005c4 	.word	0x200005c4
 80022dc:	200005ac 	.word	0x200005ac

080022e0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80022e4:	4816      	ldr	r0, [pc, #88]	; (8002340 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 80022e6:	f004 f943 	bl	8006570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
	curTime = TIM17->CCR1; //get current time value
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 80022ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	4b15      	ldr	r3, [pc, #84]	; (8002348 <TIM1_TRG_COM_TIM17_IRQHandler+0x68>)
 80022f2:	801a      	strh	r2, [r3, #0]
	TIM17->CNT = 0;
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24

	teldata.speed = (float)(veloMultiplier / curTime);
 80022fa:	eddf 6a14 	vldr	s13, [pc, #80]	; 800234c <TIM1_TRG_COM_TIM17_IRQHandler+0x6c>
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <TIM1_TRG_COM_TIM17_IRQHandler+0x68>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800230a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <TIM1_TRG_COM_TIM17_IRQHandler+0x70>)
 8002310:	edc3 7a02 	vstr	s15, [r3, #8]
	printf("Speed: %f\n",(veloMultiplier / curTime));
 8002314:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800234c <TIM1_TRG_COM_TIM17_IRQHandler+0x6c>
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <TIM1_TRG_COM_TIM17_IRQHandler+0x68>)
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002324:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002328:	ee16 0a90 	vmov	r0, s13
 800232c:	f7fe f924 	bl	8000578 <__aeabi_f2d>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4807      	ldr	r0, [pc, #28]	; (8002354 <TIM1_TRG_COM_TIM17_IRQHandler+0x74>)
 8002336:	f006 faef 	bl	8008918 <iprintf>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000560 	.word	0x20000560
 8002344:	40014800 	.word	0x40014800
 8002348:	200005c0 	.word	0x200005c0
 800234c:	455267a3 	.word	0x455267a3
 8002350:	200005ac 	.word	0x200005ac
 8002354:	0800a974 	.word	0x0800a974

08002358 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <TIM3_IRQHandler+0x10>)
 800235e:	f004 f907 	bl	8006570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200004c8 	.word	0x200004c8

0800236c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a45      	ldr	r2, [pc, #276]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002378:	4293      	cmp	r3, r2
 800237a:	f040 8083 	bne.w	8002484 <HAL_TIM_PeriodElapsedCallback+0x118>
		uint16_t temp1sum = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t temp2sum = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t temp3sum = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	847b      	strh	r3, [r7, #34]	; 0x22

		// run a loop for 5 reads from the
		for (int i = 0; i < 5; i++) {
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	e01a      	b.n	80023c6 <HAL_TIM_PeriodElapsedCallback+0x5a>
			temp1sum += read_Temperature(GPIO_PIN_5); // read for the first temp sensor
 8002390:	2020      	movs	r0, #32
 8002392:	f7fe ffaf 	bl	80012f4 <read_Temperature>
 8002396:	4603      	mov	r3, r0
 8002398:	b29a      	uxth	r2, r3
 800239a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800239c:	4413      	add	r3, r2
 800239e:	84fb      	strh	r3, [r7, #38]	; 0x26
			temp2sum += read_Temperature(GPIO_PIN_2); // read for the second temp sensor
 80023a0:	2004      	movs	r0, #4
 80023a2:	f7fe ffa7 	bl	80012f4 <read_Temperature>
 80023a6:	4603      	mov	r3, r0
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023ac:	4413      	add	r3, r2
 80023ae:	84bb      	strh	r3, [r7, #36]	; 0x24
			temp3sum += read_Temperature(GPIO_PIN_6); // read for the third temp sensor
 80023b0:	2040      	movs	r0, #64	; 0x40
 80023b2:	f7fe ff9f 	bl	80012f4 <read_Temperature>
 80023b6:	4603      	mov	r3, r0
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023bc:	4413      	add	r3, r2
 80023be:	847b      	strh	r3, [r7, #34]	; 0x22
		for (int i = 0; i < 5; i++) {
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	3301      	adds	r3, #1
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	dde1      	ble.n	8002390 <HAL_TIM_PeriodElapsedCallback+0x24>
		}
		float temp1 = temp1sum / 5.0; // take the average of the temp sensor values
 80023cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe f8c0 	bl	8000554 <__aeabi_i2d>
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80023da:	f7fe fa4f 	bl	800087c <__aeabi_ddiv>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	f7fe fbf7 	bl	8000bd8 <__aeabi_d2f>
 80023ea:	4603      	mov	r3, r0
 80023ec:	61bb      	str	r3, [r7, #24]
		float temp2 = temp2sum / 5.0;
 80023ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe f8af 	bl	8000554 <__aeabi_i2d>
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	4b25      	ldr	r3, [pc, #148]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80023fc:	f7fe fa3e 	bl	800087c <__aeabi_ddiv>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	f7fe fbe6 	bl	8000bd8 <__aeabi_d2f>
 800240c:	4603      	mov	r3, r0
 800240e:	617b      	str	r3, [r7, #20]
		float temp3 = temp3sum / 5.0;
 8002410:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f89e 	bl	8000554 <__aeabi_i2d>
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800241e:	f7fe fa2d 	bl	800087c <__aeabi_ddiv>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	f7fe fbd5 	bl	8000bd8 <__aeabi_d2f>
 800242e:	4603      	mov	r3, r0
 8002430:	613b      	str	r3, [r7, #16]

		float average = (temp1 + temp2 + temp3) / 3.0;
 8002432:	ed97 7a06 	vldr	s14, [r7, #24]
 8002436:	edd7 7a05 	vldr	s15, [r7, #20]
 800243a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002442:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002446:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800244a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800244e:	edc7 7a03 	vstr	s15, [r7, #12]
		teldata.temp = average;
 8002452:	4a10      	ldr	r2, [pc, #64]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6053      	str	r3, [r2, #4]

		// send this average to display

//		printf("Average External Temperature: %.2f \n\r", average);

		if (average > 24) {
 8002458:	edd7 7a03 	vldr	s15, [r7, #12]
 800245c:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	dd06      	ble.n	8002478 <HAL_TIM_PeriodElapsedCallback+0x10c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800246a:	2201      	movs	r2, #1
 800246c:	2120      	movs	r1, #32
 800246e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002472:	f000 fc2b 	bl	8002ccc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
		}
	}
}
 8002476:	e005      	b.n	8002484 <HAL_TIM_PeriodElapsedCallback+0x118>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	2120      	movs	r1, #32
 800247c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002480:	f000 fc24 	bl	8002ccc <HAL_GPIO_WritePin>
}
 8002484:	bf00      	nop
 8002486:	3728      	adds	r7, #40	; 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	200004c8 	.word	0x200004c8
 8002490:	40140000 	.word	0x40140000
 8002494:	200005ac 	.word	0x200005ac

08002498 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return 1;
 800249c:	2301      	movs	r3, #1
}
 800249e:	4618      	mov	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <_kill>:

int _kill(int pid, int sig)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024b2:	f006 fbc9 	bl	8008c48 <__errno>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2216      	movs	r2, #22
 80024ba:	601a      	str	r2, [r3, #0]
  return -1;
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_exit>:

void _exit (int status)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024d0:	f04f 31ff 	mov.w	r1, #4294967295
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ffe7 	bl	80024a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024da:	e7fe      	b.n	80024da <_exit+0x12>

080024dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	e00a      	b.n	8002504 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ee:	f3af 8000 	nop.w
 80024f2:	4601      	mov	r1, r0
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	60ba      	str	r2, [r7, #8]
 80024fa:	b2ca      	uxtb	r2, r1
 80024fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3301      	adds	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	429a      	cmp	r2, r3
 800250a:	dbf0      	blt.n	80024ee <_read+0x12>
  }

  return len;
 800250c:	687b      	ldr	r3, [r7, #4]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e009      	b.n	800253c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	60ba      	str	r2, [r7, #8]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fbeb 	bl	8001d0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3301      	adds	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	dbf1      	blt.n	8002528 <_write+0x12>
  }
  return len;
 8002544:	687b      	ldr	r3, [r7, #4]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <_close>:

int _close(int file)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002576:	605a      	str	r2, [r3, #4]
  return 0;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <_isatty>:

int _isatty(int file)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800258e:	2301      	movs	r3, #1
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c0:	4a14      	ldr	r2, [pc, #80]	; (8002614 <_sbrk+0x5c>)
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <_sbrk+0x60>)
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <_sbrk+0x64>)
 80025d6:	4a12      	ldr	r2, [pc, #72]	; (8002620 <_sbrk+0x68>)
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d207      	bcs.n	80025f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e8:	f006 fb2e 	bl	8008c48 <__errno>
 80025ec:	4603      	mov	r3, r0
 80025ee:	220c      	movs	r2, #12
 80025f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	e009      	b.n	800260c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <_sbrk+0x64>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <_sbrk+0x64>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	4a05      	ldr	r2, [pc, #20]	; (800261c <_sbrk+0x64>)
 8002608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800260a:	68fb      	ldr	r3, [r7, #12]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200a0000 	.word	0x200a0000
 8002618:	00000400 	.word	0x00000400
 800261c:	200005c8 	.word	0x200005c8
 8002620:	20000720 	.word	0x20000720

08002624 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <SystemInit+0x20>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	4a05      	ldr	r2, [pc, #20]	; (8002644 <SystemInit+0x20>)
 8002630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002680 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800264c:	f7ff ffea 	bl	8002624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002650:	480c      	ldr	r0, [pc, #48]	; (8002684 <LoopForever+0x6>)
  ldr r1, =_edata
 8002652:	490d      	ldr	r1, [pc, #52]	; (8002688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002654:	4a0d      	ldr	r2, [pc, #52]	; (800268c <LoopForever+0xe>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002658:	e002      	b.n	8002660 <LoopCopyDataInit>

0800265a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800265c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265e:	3304      	adds	r3, #4

08002660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002664:	d3f9      	bcc.n	800265a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002668:	4c0a      	ldr	r4, [pc, #40]	; (8002694 <LoopForever+0x16>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800266c:	e001      	b.n	8002672 <LoopFillZerobss>

0800266e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002670:	3204      	adds	r2, #4

08002672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002674:	d3fb      	bcc.n	800266e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002676:	f006 faed 	bl	8008c54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800267a:	f7fe fe7f 	bl	800137c <main>

0800267e <LoopForever>:

LoopForever:
    b LoopForever
 800267e:	e7fe      	b.n	800267e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002680:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002688:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800268c:	0800ad74 	.word	0x0800ad74
  ldr r2, =_sbss
 8002690:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002694:	2000071c 	.word	0x2000071c

08002698 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002698:	e7fe      	b.n	8002698 <ADC1_IRQHandler>

0800269a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a4:	2003      	movs	r0, #3
 80026a6:	f000 f93d 	bl	8002924 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026aa:	2000      	movs	r0, #0
 80026ac:	f000 f80e 	bl	80026cc <HAL_InitTick>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	71fb      	strb	r3, [r7, #7]
 80026ba:	e001      	b.n	80026c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026bc:	f7ff fb3e 	bl	8001d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026c0:	79fb      	ldrb	r3, [r7, #7]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026d8:	4b17      	ldr	r3, [pc, #92]	; (8002738 <HAL_InitTick+0x6c>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d023      	beq.n	8002728 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026e0:	4b16      	ldr	r3, [pc, #88]	; (800273c <HAL_InitTick+0x70>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_InitTick+0x6c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f949 	bl	800298e <HAL_SYSTICK_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10f      	bne.n	8002722 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b0f      	cmp	r3, #15
 8002706:	d809      	bhi.n	800271c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002708:	2200      	movs	r2, #0
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	f04f 30ff 	mov.w	r0, #4294967295
 8002710:	f000 f913 	bl	800293a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002714:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <HAL_InitTick+0x74>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e007      	b.n	800272c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e004      	b.n	800272c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e001      	b.n	800272c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	2000000c 	.word	0x2000000c
 800273c:	20000004 	.word	0x20000004
 8002740:	20000008 	.word	0x20000008

08002744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_IncTick+0x20>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_IncTick+0x24>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4413      	add	r3, r2
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_IncTick+0x24>)
 8002756:	6013      	str	r3, [r2, #0]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	2000000c 	.word	0x2000000c
 8002768:	200005cc 	.word	0x200005cc

0800276c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return uwTick;
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <HAL_GetTick+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	200005cc 	.word	0x200005cc

08002784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a0:	4013      	ands	r3, r2
 80027a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <__NVIC_SetPriorityGrouping+0x44>)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	60d3      	str	r3, [r2, #12]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <__NVIC_GetPriorityGrouping+0x18>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	0a1b      	lsrs	r3, r3, #8
 80027d6:	f003 0307 	and.w	r3, r3, #7
}
 80027da:	4618      	mov	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	db0b      	blt.n	8002812 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	f003 021f 	and.w	r2, r3, #31
 8002800:	4907      	ldr	r1, [pc, #28]	; (8002820 <__NVIC_EnableIRQ+0x38>)
 8002802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	2001      	movs	r0, #1
 800280a:	fa00 f202 	lsl.w	r2, r0, r2
 800280e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000e100 	.word	0xe000e100

08002824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	2b00      	cmp	r3, #0
 8002836:	db0a      	blt.n	800284e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	490c      	ldr	r1, [pc, #48]	; (8002870 <__NVIC_SetPriority+0x4c>)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	0112      	lsls	r2, r2, #4
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	440b      	add	r3, r1
 8002848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800284c:	e00a      	b.n	8002864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4908      	ldr	r1, [pc, #32]	; (8002874 <__NVIC_SetPriority+0x50>)
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	3b04      	subs	r3, #4
 800285c:	0112      	lsls	r2, r2, #4
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	440b      	add	r3, r1
 8002862:	761a      	strb	r2, [r3, #24]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000e100 	.word	0xe000e100
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f1c3 0307 	rsb	r3, r3, #7
 8002892:	2b04      	cmp	r3, #4
 8002894:	bf28      	it	cs
 8002896:	2304      	movcs	r3, #4
 8002898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3304      	adds	r3, #4
 800289e:	2b06      	cmp	r3, #6
 80028a0:	d902      	bls.n	80028a8 <NVIC_EncodePriority+0x30>
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3b03      	subs	r3, #3
 80028a6:	e000      	b.n	80028aa <NVIC_EncodePriority+0x32>
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	f04f 32ff 	mov.w	r2, #4294967295
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43da      	mvns	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	401a      	ands	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c0:	f04f 31ff 	mov.w	r1, #4294967295
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	43d9      	mvns	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	4313      	orrs	r3, r2
         );
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3724      	adds	r7, #36	; 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f0:	d301      	bcc.n	80028f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00f      	b.n	8002916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <SysTick_Config+0x40>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028fe:	210f      	movs	r1, #15
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	f7ff ff8e 	bl	8002824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <SysTick_Config+0x40>)
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <SysTick_Config+0x40>)
 8002910:	2207      	movs	r2, #7
 8002912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	e000e010 	.word	0xe000e010

08002924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ff29 	bl	8002784 <__NVIC_SetPriorityGrouping>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b086      	sub	sp, #24
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800294c:	f7ff ff3e 	bl	80027cc <__NVIC_GetPriorityGrouping>
 8002950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	6978      	ldr	r0, [r7, #20]
 8002958:	f7ff ff8e 	bl	8002878 <NVIC_EncodePriority>
 800295c:	4602      	mov	r2, r0
 800295e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff5d 	bl	8002824 <__NVIC_SetPriority>
}
 800296a:	bf00      	nop
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	4603      	mov	r3, r0
 800297a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff31 	bl	80027e8 <__NVIC_EnableIRQ>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ffa2 	bl	80028e0 <SysTick_Config>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b6:	e166      	b.n	8002c86 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2101      	movs	r1, #1
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8158 	beq.w	8002c80 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d005      	beq.n	80029e8 <HAL_GPIO_Init+0x40>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d130      	bne.n	8002a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a1e:	2201      	movs	r2, #1
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 0201 	and.w	r2, r3, #1
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d017      	beq.n	8002a86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	2203      	movs	r2, #3
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d123      	bne.n	8002ada <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	08da      	lsrs	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	220f      	movs	r2, #15
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	08da      	lsrs	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3208      	adds	r2, #8
 8002ad4:	6939      	ldr	r1, [r7, #16]
 8002ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0203 	and.w	r2, r3, #3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80b2 	beq.w	8002c80 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1c:	4b61      	ldr	r3, [pc, #388]	; (8002ca4 <HAL_GPIO_Init+0x2fc>)
 8002b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b20:	4a60      	ldr	r2, [pc, #384]	; (8002ca4 <HAL_GPIO_Init+0x2fc>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6613      	str	r3, [r2, #96]	; 0x60
 8002b28:	4b5e      	ldr	r3, [pc, #376]	; (8002ca4 <HAL_GPIO_Init+0x2fc>)
 8002b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b34:	4a5c      	ldr	r2, [pc, #368]	; (8002ca8 <HAL_GPIO_Init+0x300>)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b5e:	d02b      	beq.n	8002bb8 <HAL_GPIO_Init+0x210>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a52      	ldr	r2, [pc, #328]	; (8002cac <HAL_GPIO_Init+0x304>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d025      	beq.n	8002bb4 <HAL_GPIO_Init+0x20c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a51      	ldr	r2, [pc, #324]	; (8002cb0 <HAL_GPIO_Init+0x308>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d01f      	beq.n	8002bb0 <HAL_GPIO_Init+0x208>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a50      	ldr	r2, [pc, #320]	; (8002cb4 <HAL_GPIO_Init+0x30c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d019      	beq.n	8002bac <HAL_GPIO_Init+0x204>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a4f      	ldr	r2, [pc, #316]	; (8002cb8 <HAL_GPIO_Init+0x310>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <HAL_GPIO_Init+0x200>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a4e      	ldr	r2, [pc, #312]	; (8002cbc <HAL_GPIO_Init+0x314>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00d      	beq.n	8002ba4 <HAL_GPIO_Init+0x1fc>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a4d      	ldr	r2, [pc, #308]	; (8002cc0 <HAL_GPIO_Init+0x318>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d007      	beq.n	8002ba0 <HAL_GPIO_Init+0x1f8>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a4c      	ldr	r2, [pc, #304]	; (8002cc4 <HAL_GPIO_Init+0x31c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <HAL_GPIO_Init+0x1f4>
 8002b98:	2307      	movs	r3, #7
 8002b9a:	e00e      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	e00c      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002ba0:	2306      	movs	r3, #6
 8002ba2:	e00a      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002ba4:	2305      	movs	r3, #5
 8002ba6:	e008      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	e006      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002bac:	2303      	movs	r3, #3
 8002bae:	e004      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e002      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <HAL_GPIO_Init+0x212>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	f002 0203 	and.w	r2, r2, #3
 8002bc0:	0092      	lsls	r2, r2, #2
 8002bc2:	4093      	lsls	r3, r2
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bca:	4937      	ldr	r1, [pc, #220]	; (8002ca8 <HAL_GPIO_Init+0x300>)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bfc:	4a32      	ldr	r2, [pc, #200]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c02:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c26:	4a28      	ldr	r2, [pc, #160]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c2c:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c50:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c56:	4b1c      	ldr	r3, [pc, #112]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c7a:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	3301      	adds	r3, #1
 8002c84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f47f ae91 	bne.w	80029b8 <HAL_GPIO_Init+0x10>
  }
}
 8002c96:	bf00      	nop
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	48000400 	.word	0x48000400
 8002cb0:	48000800 	.word	0x48000800
 8002cb4:	48000c00 	.word	0x48000c00
 8002cb8:	48001000 	.word	0x48001000
 8002cbc:	48001400 	.word	0x48001400
 8002cc0:	48001800 	.word	0x48001800
 8002cc4:	48001c00 	.word	0x48001c00
 8002cc8:	40010400 	.word	0x40010400

08002ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cdc:	787b      	ldrb	r3, [r7, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ce8:	e002      	b.n	8002cf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e08d      	b.n	8002e2a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff f82e 	bl	8001d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2224      	movs	r2, #36	; 0x24
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d107      	bne.n	8002d76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	e006      	b.n	8002d84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d108      	bne.n	8002d9e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d9a:	605a      	str	r2, [r3, #4]
 8002d9c:	e007      	b.n	8002dae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69d9      	ldr	r1, [r3, #28]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1a      	ldr	r2, [r3, #32]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	460b      	mov	r3, r1
 8002e42:	817b      	strh	r3, [r7, #10]
 8002e44:	4613      	mov	r3, r2
 8002e46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	f040 80fd 	bne.w	8003050 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_I2C_Master_Transmit+0x30>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e0f6      	b.n	8003052 <HAL_I2C_Master_Transmit+0x21e>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e6c:	f7ff fc7e 	bl	800276c <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	2319      	movs	r3, #25
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 fa0a 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0e1      	b.n	8003052 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2221      	movs	r2, #33	; 0x21
 8002e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2210      	movs	r2, #16
 8002e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	893a      	ldrh	r2, [r7, #8]
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	2bff      	cmp	r3, #255	; 0xff
 8002ebe:	d906      	bls.n	8002ece <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	22ff      	movs	r2, #255	; 0xff
 8002ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002ec6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	e007      	b.n	8002ede <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002ed8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002edc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d024      	beq.n	8002f30 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	781a      	ldrb	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	8979      	ldrh	r1, [r7, #10]
 8002f22:	4b4e      	ldr	r3, [pc, #312]	; (800305c <HAL_I2C_Master_Transmit+0x228>)
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fbf1 	bl	8003710 <I2C_TransferConfig>
 8002f2e:	e066      	b.n	8002ffe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	8979      	ldrh	r1, [r7, #10]
 8002f38:	4b48      	ldr	r3, [pc, #288]	; (800305c <HAL_I2C_Master_Transmit+0x228>)
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fbe6 	bl	8003710 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f44:	e05b      	b.n	8002ffe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	6a39      	ldr	r1, [r7, #32]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f9f3 	bl	8003336 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e07b      	b.n	8003052 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	781a      	ldrb	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d034      	beq.n	8002ffe <HAL_I2C_Master_Transmit+0x1ca>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d130      	bne.n	8002ffe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2180      	movs	r1, #128	; 0x80
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f976 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e04d      	b.n	8003052 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2bff      	cmp	r3, #255	; 0xff
 8002fbe:	d90e      	bls.n	8002fde <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	22ff      	movs	r2, #255	; 0xff
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	8979      	ldrh	r1, [r7, #10]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fb9a 	bl	8003710 <I2C_TransferConfig>
 8002fdc:	e00f      	b.n	8002ffe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	8979      	ldrh	r1, [r7, #10]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fb89 	bl	8003710 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d19e      	bne.n	8002f46 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	6a39      	ldr	r1, [r7, #32]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f9d9 	bl	80033c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e01a      	b.n	8003052 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2220      	movs	r2, #32
 8003022:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <HAL_I2C_Master_Transmit+0x22c>)
 8003030:	400b      	ands	r3, r1
 8003032:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	e000      	b.n	8003052 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003050:	2302      	movs	r3, #2
  }
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	80002000 	.word	0x80002000
 8003060:	fe00e800 	.word	0xfe00e800

08003064 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	461a      	mov	r2, r3
 8003070:	460b      	mov	r3, r1
 8003072:	817b      	strh	r3, [r7, #10]
 8003074:	4613      	mov	r3, r2
 8003076:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b20      	cmp	r3, #32
 8003082:	f040 80db 	bne.w	800323c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_I2C_Master_Receive+0x30>
 8003090:	2302      	movs	r3, #2
 8003092:	e0d4      	b.n	800323e <HAL_I2C_Master_Receive+0x1da>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800309c:	f7ff fb66 	bl	800276c <HAL_GetTick>
 80030a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	2319      	movs	r3, #25
 80030a8:	2201      	movs	r2, #1
 80030aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f8f2 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e0bf      	b.n	800323e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2222      	movs	r2, #34	; 0x22
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2210      	movs	r2, #16
 80030ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	893a      	ldrh	r2, [r7, #8]
 80030de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2bff      	cmp	r3, #255	; 0xff
 80030ee:	d90e      	bls.n	800310e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	22ff      	movs	r2, #255	; 0xff
 80030f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	8979      	ldrh	r1, [r7, #10]
 80030fe:	4b52      	ldr	r3, [pc, #328]	; (8003248 <HAL_I2C_Master_Receive+0x1e4>)
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 fb02 	bl	8003710 <I2C_TransferConfig>
 800310c:	e06d      	b.n	80031ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	b2da      	uxtb	r2, r3
 800311e:	8979      	ldrh	r1, [r7, #10]
 8003120:	4b49      	ldr	r3, [pc, #292]	; (8003248 <HAL_I2C_Master_Receive+0x1e4>)
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 faf1 	bl	8003710 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800312e:	e05c      	b.n	80031ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	6a39      	ldr	r1, [r7, #32]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f989 	bl	800344c <I2C_WaitOnRXNEFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e07c      	b.n	800323e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d034      	beq.n	80031ea <HAL_I2C_Master_Receive+0x186>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003184:	2b00      	cmp	r3, #0
 8003186:	d130      	bne.n	80031ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	2200      	movs	r2, #0
 8003190:	2180      	movs	r1, #128	; 0x80
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f880 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e04d      	b.n	800323e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2bff      	cmp	r3, #255	; 0xff
 80031aa:	d90e      	bls.n	80031ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	22ff      	movs	r2, #255	; 0xff
 80031b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	8979      	ldrh	r1, [r7, #10]
 80031ba:	2300      	movs	r3, #0
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 faa4 	bl	8003710 <I2C_TransferConfig>
 80031c8:	e00f      	b.n	80031ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	8979      	ldrh	r1, [r7, #10]
 80031dc:	2300      	movs	r3, #0
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 fa93 	bl	8003710 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d19d      	bne.n	8003130 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	6a39      	ldr	r1, [r7, #32]
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f8e3 	bl	80033c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e01a      	b.n	800323e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2220      	movs	r2, #32
 800320e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6859      	ldr	r1, [r3, #4]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <HAL_I2C_Master_Receive+0x1e8>)
 800321c:	400b      	ands	r3, r1
 800321e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e000      	b.n	800323e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800323c:	2302      	movs	r3, #2
  }
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	80002400 	.word	0x80002400
 800324c:	fe00e800 	.word	0xfe00e800

08003250 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b02      	cmp	r3, #2
 8003264:	d103      	bne.n	800326e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2200      	movs	r2, #0
 800326c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d007      	beq.n	800328c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	619a      	str	r2, [r3, #24]
  }
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a8:	e031      	b.n	800330e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b0:	d02d      	beq.n	800330e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b2:	f7ff fa5b 	bl	800276c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d302      	bcc.n	80032c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d122      	bne.n	800330e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4013      	ands	r3, r2
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d113      	bne.n	800330e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	f043 0220 	orr.w	r2, r3, #32
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00f      	b.n	800332e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4013      	ands	r3, r2
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	429a      	cmp	r2, r3
 800331c:	bf0c      	ite	eq
 800331e:	2301      	moveq	r3, #1
 8003320:	2300      	movne	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	429a      	cmp	r2, r3
 800332a:	d0be      	beq.n	80032aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003342:	e033      	b.n	80033ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f901 	bl	8003550 <I2C_IsErrorOccurred>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e031      	b.n	80033bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d025      	beq.n	80033ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003360:	f7ff fa04 	bl	800276c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	429a      	cmp	r2, r3
 800336e:	d302      	bcc.n	8003376 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d11a      	bne.n	80033ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d013      	beq.n	80033ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	f043 0220 	orr.w	r2, r3, #32
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e007      	b.n	80033bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d1c4      	bne.n	8003344 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d0:	e02f      	b.n	8003432 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f8ba 	bl	8003550 <I2C_IsErrorOccurred>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e02d      	b.n	8003442 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7ff f9c1 	bl	800276c <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d11a      	bne.n	8003432 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b20      	cmp	r3, #32
 8003408:	d013      	beq.n	8003432 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e007      	b.n	8003442 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b20      	cmp	r3, #32
 800343e:	d1c8      	bne.n	80033d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003458:	e06b      	b.n	8003532 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f876 	bl	8003550 <I2C_IsErrorOccurred>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e069      	b.n	8003542 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b20      	cmp	r3, #32
 800347a:	d138      	bne.n	80034ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b04      	cmp	r3, #4
 8003488:	d105      	bne.n	8003496 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e055      	b.n	8003542 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b10      	cmp	r3, #16
 80034a2:	d107      	bne.n	80034b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2210      	movs	r2, #16
 80034aa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2204      	movs	r2, #4
 80034b0:	645a      	str	r2, [r3, #68]	; 0x44
 80034b2:	e002      	b.n	80034ba <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2220      	movs	r2, #32
 80034c0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b1f      	ldr	r3, [pc, #124]	; (800354c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80034ce:	400b      	ands	r3, r1
 80034d0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e029      	b.n	8003542 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ee:	f7ff f93d 	bl	800276c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d116      	bne.n	8003532 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b04      	cmp	r3, #4
 8003510:	d00f      	beq.n	8003532 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e007      	b.n	8003542 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b04      	cmp	r3, #4
 800353e:	d18c      	bne.n	800345a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	fe00e800 	.word	0xfe00e800

08003550 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	d068      	beq.n	800364e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2210      	movs	r2, #16
 8003582:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003584:	e049      	b.n	800361a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358c:	d045      	beq.n	800361a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800358e:	f7ff f8ed 	bl	800276c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	429a      	cmp	r2, r3
 800359c:	d302      	bcc.n	80035a4 <I2C_IsErrorOccurred+0x54>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d13a      	bne.n	800361a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c6:	d121      	bne.n	800360c <I2C_IsErrorOccurred+0xbc>
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ce:	d01d      	beq.n	800360c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d01a      	beq.n	800360c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035e6:	f7ff f8c1 	bl	800276c <HAL_GetTick>
 80035ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ec:	e00e      	b.n	800360c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035ee:	f7ff f8bd 	bl	800276c <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b19      	cmp	r3, #25
 80035fa:	d907      	bls.n	800360c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	f043 0320 	orr.w	r3, r3, #32
 8003602:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800360a:	e006      	b.n	800361a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b20      	cmp	r3, #32
 8003618:	d1e9      	bne.n	80035ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b20      	cmp	r3, #32
 8003626:	d003      	beq.n	8003630 <I2C_IsErrorOccurred+0xe0>
 8003628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0aa      	beq.n	8003586 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003634:	2b00      	cmp	r3, #0
 8003636:	d103      	bne.n	8003640 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2220      	movs	r2, #32
 800363e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	f043 0304 	orr.w	r3, r3, #4
 8003646:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003670:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	f043 0308 	orr.w	r3, r3, #8
 8003688:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003692:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00b      	beq.n	80036bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	f043 0302 	orr.w	r3, r3, #2
 80036aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01c      	beq.n	80036fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7ff fdc3 	bl	8003250 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4b0d      	ldr	r3, [pc, #52]	; (800370c <I2C_IsErrorOccurred+0x1bc>)
 80036d6:	400b      	ands	r3, r1
 80036d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80036fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003702:	4618      	mov	r0, r3
 8003704:	3728      	adds	r7, #40	; 0x28
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	fe00e800 	.word	0xfe00e800

08003710 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	460b      	mov	r3, r1
 800371c:	817b      	strh	r3, [r7, #10]
 800371e:	4613      	mov	r3, r2
 8003720:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003722:	897b      	ldrh	r3, [r7, #10]
 8003724:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003728:	7a7b      	ldrb	r3, [r7, #9]
 800372a:	041b      	lsls	r3, r3, #16
 800372c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003730:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	4313      	orrs	r3, r2
 800373a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800373e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	0d5b      	lsrs	r3, r3, #21
 800374a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <I2C_TransferConfig+0x60>)
 8003750:	430b      	orrs	r3, r1
 8003752:	43db      	mvns	r3, r3
 8003754:	ea02 0103 	and.w	r1, r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	03ff63ff 	.word	0x03ff63ff

08003774 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b20      	cmp	r3, #32
 8003788:	d138      	bne.n	80037fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003794:	2302      	movs	r3, #2
 8003796:	e032      	b.n	80037fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2224      	movs	r2, #36	; 0x24
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6819      	ldr	r1, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e000      	b.n	80037fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
  }
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800380a:	b480      	push	{r7}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b20      	cmp	r3, #32
 800381e:	d139      	bne.n	8003894 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800382a:	2302      	movs	r3, #2
 800382c:	e033      	b.n	8003896 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2224      	movs	r2, #36	; 0x24
 800383a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800385c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	021b      	lsls	r3, r3, #8
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e000      	b.n	8003896 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003894:	2302      	movs	r3, #2
  }
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038a8:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b4:	d102      	bne.n	80038bc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80038b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038ba:	e00b      	b.n	80038d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80038bc:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80038be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ca:	d102      	bne.n	80038d2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80038cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038d0:	e000      	b.n	80038d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80038d2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40007000 	.word	0x40007000

080038e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d141      	bne.n	8003976 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038f2:	4b4b      	ldr	r3, [pc, #300]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fe:	d131      	bne.n	8003964 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003900:	4b47      	ldr	r3, [pc, #284]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003906:	4a46      	ldr	r2, [pc, #280]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800390c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003910:	4b43      	ldr	r3, [pc, #268]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003918:	4a41      	ldr	r2, [pc, #260]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800391e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003920:	4b40      	ldr	r3, [pc, #256]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2232      	movs	r2, #50	; 0x32
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	4a3f      	ldr	r2, [pc, #252]	; (8003a28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	0c9b      	lsrs	r3, r3, #18
 8003932:	3301      	adds	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003936:	e002      	b.n	800393e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	3b01      	subs	r3, #1
 800393c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800393e:	4b38      	ldr	r3, [pc, #224]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394a:	d102      	bne.n	8003952 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f2      	bne.n	8003938 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003952:	4b33      	ldr	r3, [pc, #204]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395e:	d158      	bne.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e057      	b.n	8003a14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003964:	4b2e      	ldr	r3, [pc, #184]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800396a:	4a2d      	ldr	r2, [pc, #180]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003970:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003974:	e04d      	b.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800397c:	d141      	bne.n	8003a02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800397e:	4b28      	ldr	r3, [pc, #160]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398a:	d131      	bne.n	80039f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800398c:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003992:	4a23      	ldr	r2, [pc, #140]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003998:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800399c:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039a4:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80039ac:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2232      	movs	r2, #50	; 0x32
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	0c9b      	lsrs	r3, r3, #18
 80039be:	3301      	adds	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039c2:	e002      	b.n	80039ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d6:	d102      	bne.n	80039de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f2      	bne.n	80039c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039de:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ea:	d112      	bne.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e011      	b.n	8003a14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039f6:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a00:	e007      	b.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a02:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a0a:	4a05      	ldr	r2, [pc, #20]	; (8003a20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a10:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40007000 	.word	0x40007000
 8003a24:	20000004 	.word	0x20000004
 8003a28:	431bde83 	.word	0x431bde83

08003a2c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a3a:	6053      	str	r3, [r2, #4]
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40007000 	.word	0x40007000

08003a4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d102      	bne.n	8003a60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f000 bc08 	b.w	8004270 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a60:	4b96      	ldr	r3, [pc, #600]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a6a:	4b94      	ldr	r3, [pc, #592]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80e4 	beq.w	8003c4a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <HAL_RCC_OscConfig+0x4c>
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b0c      	cmp	r3, #12
 8003a8c:	f040 808b 	bne.w	8003ba6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	f040 8087 	bne.w	8003ba6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a98:	4b88      	ldr	r3, [pc, #544]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x64>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e3df      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1a      	ldr	r2, [r3, #32]
 8003ab4:	4b81      	ldr	r3, [pc, #516]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d004      	beq.n	8003aca <HAL_RCC_OscConfig+0x7e>
 8003ac0:	4b7e      	ldr	r3, [pc, #504]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac8:	e005      	b.n	8003ad6 <HAL_RCC_OscConfig+0x8a>
 8003aca:	4b7c      	ldr	r3, [pc, #496]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad0:	091b      	lsrs	r3, r3, #4
 8003ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d223      	bcs.n	8003b22 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fdcc 	bl	800467c <RCC_SetFlashLatencyFromMSIRange>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e3c0      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aee:	4b73      	ldr	r3, [pc, #460]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a72      	ldr	r2, [pc, #456]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003af4:	f043 0308 	orr.w	r3, r3, #8
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	4b70      	ldr	r3, [pc, #448]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	496d      	ldr	r1, [pc, #436]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b0c:	4b6b      	ldr	r3, [pc, #428]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	4968      	ldr	r1, [pc, #416]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
 8003b20:	e025      	b.n	8003b6e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b22:	4b66      	ldr	r3, [pc, #408]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a65      	ldr	r2, [pc, #404]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003b28:	f043 0308 	orr.w	r3, r3, #8
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b63      	ldr	r3, [pc, #396]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4960      	ldr	r1, [pc, #384]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b40:	4b5e      	ldr	r3, [pc, #376]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	021b      	lsls	r3, r3, #8
 8003b4e:	495b      	ldr	r1, [pc, #364]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fd8c 	bl	800467c <RCC_SetFlashLatencyFromMSIRange>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e380      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b6e:	f000 fcc1 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4b51      	ldr	r3, [pc, #324]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	4950      	ldr	r1, [pc, #320]	; (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003b80:	5ccb      	ldrb	r3, [r1, r3]
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8a:	4a4e      	ldr	r2, [pc, #312]	; (8003cc4 <HAL_RCC_OscConfig+0x278>)
 8003b8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b8e:	4b4e      	ldr	r3, [pc, #312]	; (8003cc8 <HAL_RCC_OscConfig+0x27c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fd9a 	bl	80026cc <HAL_InitTick>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d052      	beq.n	8003c48 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	e364      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d032      	beq.n	8003c14 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bae:	4b43      	ldr	r3, [pc, #268]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a42      	ldr	r2, [pc, #264]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bba:	f7fe fdd7 	bl	800276c <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bc2:	f7fe fdd3 	bl	800276c <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e34d      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bd4:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003be0:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a35      	ldr	r2, [pc, #212]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003be6:	f043 0308 	orr.w	r3, r3, #8
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	4b33      	ldr	r3, [pc, #204]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	4930      	ldr	r1, [pc, #192]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bfe:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	492b      	ldr	r1, [pc, #172]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	604b      	str	r3, [r1, #4]
 8003c12:	e01a      	b.n	8003c4a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c14:	4b29      	ldr	r3, [pc, #164]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a28      	ldr	r2, [pc, #160]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c20:	f7fe fda4 	bl	800276c <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c28:	f7fe fda0 	bl	800276c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e31a      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c3a:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x1dc>
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d073      	beq.n	8003d3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_OscConfig+0x21c>
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	2b0c      	cmp	r3, #12
 8003c60:	d10e      	bne.n	8003c80 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d10b      	bne.n	8003c80 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d063      	beq.n	8003d3c <HAL_RCC_OscConfig+0x2f0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d15f      	bne.n	8003d3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e2f7      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c88:	d106      	bne.n	8003c98 <HAL_RCC_OscConfig+0x24c>
 8003c8a:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a0b      	ldr	r2, [pc, #44]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e025      	b.n	8003ce4 <HAL_RCC_OscConfig+0x298>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ca0:	d114      	bne.n	8003ccc <HAL_RCC_OscConfig+0x280>
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a05      	ldr	r2, [pc, #20]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a02      	ldr	r2, [pc, #8]	; (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e013      	b.n	8003ce4 <HAL_RCC_OscConfig+0x298>
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	0800a980 	.word	0x0800a980
 8003cc4:	20000004 	.word	0x20000004
 8003cc8:	20000008 	.word	0x20000008
 8003ccc:	4ba0      	ldr	r3, [pc, #640]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a9f      	ldr	r2, [pc, #636]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	4b9d      	ldr	r3, [pc, #628]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a9c      	ldr	r2, [pc, #624]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d013      	beq.n	8003d14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fe fd3e 	bl	800276c <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf4:	f7fe fd3a 	bl	800276c <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b64      	cmp	r3, #100	; 0x64
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e2b4      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d06:	4b92      	ldr	r3, [pc, #584]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x2a8>
 8003d12:	e014      	b.n	8003d3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7fe fd2a 	bl	800276c <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d1c:	f7fe fd26 	bl	800276c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b64      	cmp	r3, #100	; 0x64
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e2a0      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d2e:	4b88      	ldr	r3, [pc, #544]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0x2d0>
 8003d3a:	e000      	b.n	8003d3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d060      	beq.n	8003e0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d005      	beq.n	8003d5c <HAL_RCC_OscConfig+0x310>
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2b0c      	cmp	r3, #12
 8003d54:	d119      	bne.n	8003d8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d116      	bne.n	8003d8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d5c:	4b7c      	ldr	r3, [pc, #496]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_OscConfig+0x328>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e27d      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d74:	4b76      	ldr	r3, [pc, #472]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	061b      	lsls	r3, r3, #24
 8003d82:	4973      	ldr	r1, [pc, #460]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d88:	e040      	b.n	8003e0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d023      	beq.n	8003dda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d92:	4b6f      	ldr	r3, [pc, #444]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a6e      	ldr	r2, [pc, #440]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fe fce5 	bl	800276c <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da6:	f7fe fce1 	bl	800276c <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e25b      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003db8:	4b65      	ldr	r3, [pc, #404]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc4:	4b62      	ldr	r3, [pc, #392]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	061b      	lsls	r3, r3, #24
 8003dd2:	495f      	ldr	r1, [pc, #380]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
 8003dd8:	e018      	b.n	8003e0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dda:	4b5d      	ldr	r3, [pc, #372]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a5c      	ldr	r2, [pc, #368]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de6:	f7fe fcc1 	bl	800276c <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dee:	f7fe fcbd 	bl	800276c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e237      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e00:	4b53      	ldr	r3, [pc, #332]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f0      	bne.n	8003dee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d03c      	beq.n	8003e92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d01c      	beq.n	8003e5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e20:	4b4b      	ldr	r3, [pc, #300]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e26:	4a4a      	ldr	r2, [pc, #296]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e30:	f7fe fc9c 	bl	800276c <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e38:	f7fe fc98 	bl	800276c <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e212      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e4a:	4b41      	ldr	r3, [pc, #260]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0ef      	beq.n	8003e38 <HAL_RCC_OscConfig+0x3ec>
 8003e58:	e01b      	b.n	8003e92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e5a:	4b3d      	ldr	r3, [pc, #244]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e60:	4a3b      	ldr	r2, [pc, #236]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6a:	f7fe fc7f 	bl	800276c <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e72:	f7fe fc7b 	bl	800276c <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e1f5      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e84:	4b32      	ldr	r3, [pc, #200]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1ef      	bne.n	8003e72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 80a6 	beq.w	8003fec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ea4:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10d      	bne.n	8003ecc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb0:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb4:	4a26      	ldr	r2, [pc, #152]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eba:	6593      	str	r3, [r2, #88]	; 0x58
 8003ebc:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ecc:	4b21      	ldr	r3, [pc, #132]	; (8003f54 <HAL_RCC_OscConfig+0x508>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d118      	bne.n	8003f0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ed8:	4b1e      	ldr	r3, [pc, #120]	; (8003f54 <HAL_RCC_OscConfig+0x508>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <HAL_RCC_OscConfig+0x508>)
 8003ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ee4:	f7fe fc42 	bl	800276c <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eec:	f7fe fc3e 	bl	800276c <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e1b8      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003efe:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <HAL_RCC_OscConfig+0x508>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d108      	bne.n	8003f24 <HAL_RCC_OscConfig+0x4d8>
 8003f12:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f18:	4a0d      	ldr	r2, [pc, #52]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f22:	e029      	b.n	8003f78 <HAL_RCC_OscConfig+0x52c>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b05      	cmp	r3, #5
 8003f2a:	d115      	bne.n	8003f58 <HAL_RCC_OscConfig+0x50c>
 8003f2c:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	4a07      	ldr	r2, [pc, #28]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003f34:	f043 0304 	orr.w	r3, r3, #4
 8003f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f42:	4a03      	ldr	r2, [pc, #12]	; (8003f50 <HAL_RCC_OscConfig+0x504>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f4c:	e014      	b.n	8003f78 <HAL_RCC_OscConfig+0x52c>
 8003f4e:	bf00      	nop
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40007000 	.word	0x40007000
 8003f58:	4b9d      	ldr	r3, [pc, #628]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	4a9c      	ldr	r2, [pc, #624]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f68:	4b99      	ldr	r3, [pc, #612]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	4a98      	ldr	r2, [pc, #608]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8003f70:	f023 0304 	bic.w	r3, r3, #4
 8003f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d016      	beq.n	8003fae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f80:	f7fe fbf4 	bl	800276c <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f88:	f7fe fbf0 	bl	800276c <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e168      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9e:	4b8c      	ldr	r3, [pc, #560]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8003fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0ed      	beq.n	8003f88 <HAL_RCC_OscConfig+0x53c>
 8003fac:	e015      	b.n	8003fda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fae:	f7fe fbdd 	bl	800276c <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fb4:	e00a      	b.n	8003fcc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb6:	f7fe fbd9 	bl	800276c <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e151      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fcc:	4b80      	ldr	r3, [pc, #512]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1ed      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fda:	7ffb      	ldrb	r3, [r7, #31]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d105      	bne.n	8003fec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe0:	4b7b      	ldr	r3, [pc, #492]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe4:	4a7a      	ldr	r2, [pc, #488]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8003fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d03c      	beq.n	8004072 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01c      	beq.n	800403a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004000:	4b73      	ldr	r3, [pc, #460]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8004002:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004006:	4a72      	ldr	r2, [pc, #456]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004010:	f7fe fbac 	bl	800276c <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004018:	f7fe fba8 	bl	800276c <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e122      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800402a:	4b69      	ldr	r3, [pc, #420]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 800402c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0ef      	beq.n	8004018 <HAL_RCC_OscConfig+0x5cc>
 8004038:	e01b      	b.n	8004072 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800403a:	4b65      	ldr	r3, [pc, #404]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 800403c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004040:	4a63      	ldr	r2, [pc, #396]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404a:	f7fe fb8f 	bl	800276c <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004052:	f7fe fb8b 	bl	800276c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e105      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004064:	4b5a      	ldr	r3, [pc, #360]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8004066:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1ef      	bne.n	8004052 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80f9 	beq.w	800426e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004080:	2b02      	cmp	r3, #2
 8004082:	f040 80cf 	bne.w	8004224 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004086:	4b52      	ldr	r3, [pc, #328]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f003 0203 	and.w	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	429a      	cmp	r2, r3
 8004098:	d12c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	3b01      	subs	r3, #1
 80040a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d123      	bne.n	80040f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d11b      	bne.n	80040f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d113      	bne.n	80040f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	085b      	lsrs	r3, r3, #1
 80040d8:	3b01      	subs	r3, #1
 80040da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d109      	bne.n	80040f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	3b01      	subs	r3, #1
 80040ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d071      	beq.n	80041d8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b0c      	cmp	r3, #12
 80040f8:	d068      	beq.n	80041cc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040fa:	4b35      	ldr	r3, [pc, #212]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d105      	bne.n	8004112 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004106:	4b32      	ldr	r3, [pc, #200]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e0ac      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004116:	4b2e      	ldr	r3, [pc, #184]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a2d      	ldr	r2, [pc, #180]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 800411c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004120:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004122:	f7fe fb23 	bl	800276c <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412a:	f7fe fb1f 	bl	800276c <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e099      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800413c:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f0      	bne.n	800412a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004148:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <HAL_RCC_OscConfig+0x788>)
 800414e:	4013      	ands	r3, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004158:	3a01      	subs	r2, #1
 800415a:	0112      	lsls	r2, r2, #4
 800415c:	4311      	orrs	r1, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004162:	0212      	lsls	r2, r2, #8
 8004164:	4311      	orrs	r1, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800416a:	0852      	lsrs	r2, r2, #1
 800416c:	3a01      	subs	r2, #1
 800416e:	0552      	lsls	r2, r2, #21
 8004170:	4311      	orrs	r1, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004176:	0852      	lsrs	r2, r2, #1
 8004178:	3a01      	subs	r2, #1
 800417a:	0652      	lsls	r2, r2, #25
 800417c:	4311      	orrs	r1, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004182:	06d2      	lsls	r2, r2, #27
 8004184:	430a      	orrs	r2, r1
 8004186:	4912      	ldr	r1, [pc, #72]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8004188:	4313      	orrs	r3, r2
 800418a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800418c:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0f      	ldr	r2, [pc, #60]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 8004192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004196:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004198:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 800419e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041a4:	f7fe fae2 	bl	800276c <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ac:	f7fe fade 	bl	800276c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e058      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <HAL_RCC_OscConfig+0x784>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041ca:	e050      	b.n	800426e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e04f      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
 80041d0:	40021000 	.word	0x40021000
 80041d4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041d8:	4b27      	ldr	r3, [pc, #156]	; (8004278 <HAL_RCC_OscConfig+0x82c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d144      	bne.n	800426e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041e4:	4b24      	ldr	r3, [pc, #144]	; (8004278 <HAL_RCC_OscConfig+0x82c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a23      	ldr	r2, [pc, #140]	; (8004278 <HAL_RCC_OscConfig+0x82c>)
 80041ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041f0:	4b21      	ldr	r3, [pc, #132]	; (8004278 <HAL_RCC_OscConfig+0x82c>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4a20      	ldr	r2, [pc, #128]	; (8004278 <HAL_RCC_OscConfig+0x82c>)
 80041f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041fc:	f7fe fab6 	bl	800276c <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004204:	f7fe fab2 	bl	800276c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e02c      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004216:	4b18      	ldr	r3, [pc, #96]	; (8004278 <HAL_RCC_OscConfig+0x82c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0x7b8>
 8004222:	e024      	b.n	800426e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2b0c      	cmp	r3, #12
 8004228:	d01f      	beq.n	800426a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422a:	4b13      	ldr	r3, [pc, #76]	; (8004278 <HAL_RCC_OscConfig+0x82c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a12      	ldr	r2, [pc, #72]	; (8004278 <HAL_RCC_OscConfig+0x82c>)
 8004230:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004236:	f7fe fa99 	bl	800276c <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423e:	f7fe fa95 	bl	800276c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e00f      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_RCC_OscConfig+0x82c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f0      	bne.n	800423e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800425c:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_RCC_OscConfig+0x82c>)
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	4905      	ldr	r1, [pc, #20]	; (8004278 <HAL_RCC_OscConfig+0x82c>)
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_RCC_OscConfig+0x830>)
 8004264:	4013      	ands	r3, r2
 8004266:	60cb      	str	r3, [r1, #12]
 8004268:	e001      	b.n	800426e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3720      	adds	r7, #32
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40021000 	.word	0x40021000
 800427c:	feeefffc 	.word	0xfeeefffc

08004280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e11d      	b.n	80044d4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004298:	4b90      	ldr	r3, [pc, #576]	; (80044dc <HAL_RCC_ClockConfig+0x25c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d910      	bls.n	80042c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a6:	4b8d      	ldr	r3, [pc, #564]	; (80044dc <HAL_RCC_ClockConfig+0x25c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f023 020f 	bic.w	r2, r3, #15
 80042ae:	498b      	ldr	r1, [pc, #556]	; (80044dc <HAL_RCC_ClockConfig+0x25c>)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b89      	ldr	r3, [pc, #548]	; (80044dc <HAL_RCC_ClockConfig+0x25c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e105      	b.n	80044d4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d010      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	4b81      	ldr	r3, [pc, #516]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d908      	bls.n	80042f6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e4:	4b7e      	ldr	r3, [pc, #504]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	497b      	ldr	r1, [pc, #492]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d079      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b03      	cmp	r3, #3
 8004308:	d11e      	bne.n	8004348 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800430a:	4b75      	ldr	r3, [pc, #468]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e0dc      	b.n	80044d4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800431a:	f000 fa09 	bl	8004730 <RCC_GetSysClockFreqFromPLLSource>
 800431e:	4603      	mov	r3, r0
 8004320:	4a70      	ldr	r2, [pc, #448]	; (80044e4 <HAL_RCC_ClockConfig+0x264>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d946      	bls.n	80043b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004326:	4b6e      	ldr	r3, [pc, #440]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d140      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004332:	4b6b      	ldr	r3, [pc, #428]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800433a:	4a69      	ldr	r2, [pc, #420]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 800433c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004340:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004342:	2380      	movs	r3, #128	; 0x80
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	e035      	b.n	80043b4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d107      	bne.n	8004360 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004350:	4b63      	ldr	r3, [pc, #396]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d115      	bne.n	8004388 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e0b9      	b.n	80044d4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d107      	bne.n	8004378 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004368:	4b5d      	ldr	r3, [pc, #372]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d109      	bne.n	8004388 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0ad      	b.n	80044d4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004378:	4b59      	ldr	r3, [pc, #356]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e0a5      	b.n	80044d4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004388:	f000 f8b4 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 800438c:	4603      	mov	r3, r0
 800438e:	4a55      	ldr	r2, [pc, #340]	; (80044e4 <HAL_RCC_ClockConfig+0x264>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d90f      	bls.n	80043b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004394:	4b52      	ldr	r3, [pc, #328]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043a0:	4b4f      	ldr	r3, [pc, #316]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043a8:	4a4d      	ldr	r2, [pc, #308]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 80043aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043b4:	4b4a      	ldr	r3, [pc, #296]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f023 0203 	bic.w	r2, r3, #3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	4947      	ldr	r1, [pc, #284]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c6:	f7fe f9d1 	bl	800276c <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ce:	f7fe f9cd 	bl	800276c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e077      	b.n	80044d4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e4:	4b3e      	ldr	r3, [pc, #248]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 020c 	and.w	r2, r3, #12
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d1eb      	bne.n	80043ce <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b80      	cmp	r3, #128	; 0x80
 80043fa:	d105      	bne.n	8004408 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043fc:	4b38      	ldr	r3, [pc, #224]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	4a37      	ldr	r2, [pc, #220]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 8004402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004406:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d010      	beq.n	8004436 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004420:	429a      	cmp	r2, r3
 8004422:	d208      	bcs.n	8004436 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004424:	4b2e      	ldr	r3, [pc, #184]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	492b      	ldr	r1, [pc, #172]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004436:	4b29      	ldr	r3, [pc, #164]	; (80044dc <HAL_RCC_ClockConfig+0x25c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d210      	bcs.n	8004466 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004444:	4b25      	ldr	r3, [pc, #148]	; (80044dc <HAL_RCC_ClockConfig+0x25c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f023 020f 	bic.w	r2, r3, #15
 800444c:	4923      	ldr	r1, [pc, #140]	; (80044dc <HAL_RCC_ClockConfig+0x25c>)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	4313      	orrs	r3, r2
 8004452:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004454:	4b21      	ldr	r3, [pc, #132]	; (80044dc <HAL_RCC_ClockConfig+0x25c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d001      	beq.n	8004466 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e036      	b.n	80044d4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004472:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	4918      	ldr	r1, [pc, #96]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 8004480:	4313      	orrs	r3, r2
 8004482:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d009      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004490:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4910      	ldr	r1, [pc, #64]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044a4:	f000 f826 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <HAL_RCC_ClockConfig+0x260>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	091b      	lsrs	r3, r3, #4
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	490c      	ldr	r1, [pc, #48]	; (80044e8 <HAL_RCC_ClockConfig+0x268>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
 80044c0:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <HAL_RCC_ClockConfig+0x26c>)
 80044c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <HAL_RCC_ClockConfig+0x270>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fe f8ff 	bl	80026cc <HAL_InitTick>
 80044ce:	4603      	mov	r3, r0
 80044d0:	73fb      	strb	r3, [r7, #15]

  return status;
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40022000 	.word	0x40022000
 80044e0:	40021000 	.word	0x40021000
 80044e4:	04c4b400 	.word	0x04c4b400
 80044e8:	0800a980 	.word	0x0800a980
 80044ec:	20000004 	.word	0x20000004
 80044f0:	20000008 	.word	0x20000008

080044f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	2300      	movs	r3, #0
 8004500:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004502:	4b3e      	ldr	r3, [pc, #248]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800450c:	4b3b      	ldr	r3, [pc, #236]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0x34>
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b0c      	cmp	r3, #12
 8004520:	d121      	bne.n	8004566 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d11e      	bne.n	8004566 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004528:	4b34      	ldr	r3, [pc, #208]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d107      	bne.n	8004544 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004534:	4b31      	ldr	r3, [pc, #196]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	e005      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004544:	4b2d      	ldr	r3, [pc, #180]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004550:	4a2b      	ldr	r2, [pc, #172]	; (8004600 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004558:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10d      	bne.n	800457c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004564:	e00a      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b04      	cmp	r3, #4
 800456a:	d102      	bne.n	8004572 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800456c:	4b25      	ldr	r3, [pc, #148]	; (8004604 <HAL_RCC_GetSysClockFreq+0x110>)
 800456e:	61bb      	str	r3, [r7, #24]
 8004570:	e004      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d101      	bne.n	800457c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004578:	4b23      	ldr	r3, [pc, #140]	; (8004608 <HAL_RCC_GetSysClockFreq+0x114>)
 800457a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b0c      	cmp	r3, #12
 8004580:	d134      	bne.n	80045ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004582:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d003      	beq.n	800459a <HAL_RCC_GetSysClockFreq+0xa6>
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d003      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0xac>
 8004598:	e005      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800459a:	4b1a      	ldr	r3, [pc, #104]	; (8004604 <HAL_RCC_GetSysClockFreq+0x110>)
 800459c:	617b      	str	r3, [r7, #20]
      break;
 800459e:	e005      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045a0:	4b19      	ldr	r3, [pc, #100]	; (8004608 <HAL_RCC_GetSysClockFreq+0x114>)
 80045a2:	617b      	str	r3, [r7, #20]
      break;
 80045a4:	e002      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	617b      	str	r3, [r7, #20]
      break;
 80045aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045ac:	4b13      	ldr	r3, [pc, #76]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	3301      	adds	r3, #1
 80045b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045ba:	4b10      	ldr	r3, [pc, #64]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	0a1b      	lsrs	r3, r3, #8
 80045c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	fb03 f202 	mul.w	r2, r3, r2
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045d2:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <HAL_RCC_GetSysClockFreq+0x108>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	0e5b      	lsrs	r3, r3, #25
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	3301      	adds	r3, #1
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045ec:	69bb      	ldr	r3, [r7, #24]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3724      	adds	r7, #36	; 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	0800a998 	.word	0x0800a998
 8004604:	00f42400 	.word	0x00f42400
 8004608:	007a1200 	.word	0x007a1200

0800460c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000004 	.word	0x20000004

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004628:	f7ff fff0 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4904      	ldr	r1, [pc, #16]	; (800464c <HAL_RCC_GetPCLK1Freq+0x28>)
 800463a:	5ccb      	ldrb	r3, [r1, r3]
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40021000 	.word	0x40021000
 800464c:	0800a990 	.word	0x0800a990

08004650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004654:	f7ff ffda 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0adb      	lsrs	r3, r3, #11
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4904      	ldr	r1, [pc, #16]	; (8004678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004670:	4618      	mov	r0, r3
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000
 8004678:	0800a990 	.word	0x0800a990

0800467c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004684:	2300      	movs	r3, #0
 8004686:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004688:	4b27      	ldr	r3, [pc, #156]	; (8004728 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800468a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004694:	f7ff f906 	bl	80038a4 <HAL_PWREx_GetVoltageRange>
 8004698:	6178      	str	r0, [r7, #20]
 800469a:	e014      	b.n	80046c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800469c:	4b22      	ldr	r3, [pc, #136]	; (8004728 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800469e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a0:	4a21      	ldr	r2, [pc, #132]	; (8004728 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80046a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a6:	6593      	str	r3, [r2, #88]	; 0x58
 80046a8:	4b1f      	ldr	r3, [pc, #124]	; (8004728 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80046aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046b4:	f7ff f8f6 	bl	80038a4 <HAL_PWREx_GetVoltageRange>
 80046b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046ba:	4b1b      	ldr	r3, [pc, #108]	; (8004728 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	4a1a      	ldr	r2, [pc, #104]	; (8004728 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80046c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046cc:	d10b      	bne.n	80046e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b80      	cmp	r3, #128	; 0x80
 80046d2:	d913      	bls.n	80046fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2ba0      	cmp	r3, #160	; 0xa0
 80046d8:	d902      	bls.n	80046e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046da:	2302      	movs	r3, #2
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	e00d      	b.n	80046fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046e0:	2301      	movs	r3, #1
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	e00a      	b.n	80046fc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b7f      	cmp	r3, #127	; 0x7f
 80046ea:	d902      	bls.n	80046f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80046ec:	2302      	movs	r3, #2
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	e004      	b.n	80046fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b70      	cmp	r3, #112	; 0x70
 80046f6:	d101      	bne.n	80046fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046f8:	2301      	movs	r3, #1
 80046fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 020f 	bic.w	r2, r3, #15
 8004704:	4909      	ldr	r1, [pc, #36]	; (800472c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	429a      	cmp	r2, r3
 8004718:	d001      	beq.n	800471e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40021000 	.word	0x40021000
 800472c:	40022000 	.word	0x40022000

08004730 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004736:	4b2d      	ldr	r3, [pc, #180]	; (80047ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b03      	cmp	r3, #3
 8004744:	d00b      	beq.n	800475e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d825      	bhi.n	8004798 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d008      	beq.n	8004764 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d11f      	bne.n	8004798 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800475a:	613b      	str	r3, [r7, #16]
    break;
 800475c:	e01f      	b.n	800479e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800475e:	4b25      	ldr	r3, [pc, #148]	; (80047f4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004760:	613b      	str	r3, [r7, #16]
    break;
 8004762:	e01c      	b.n	800479e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004764:	4b21      	ldr	r3, [pc, #132]	; (80047ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b00      	cmp	r3, #0
 800476e:	d107      	bne.n	8004780 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004770:	4b1e      	ldr	r3, [pc, #120]	; (80047ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004776:	0a1b      	lsrs	r3, r3, #8
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	e005      	b.n	800478c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800478c:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004794:	613b      	str	r3, [r7, #16]
    break;
 8004796:	e002      	b.n	800479e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	613b      	str	r3, [r7, #16]
    break;
 800479c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800479e:	4b13      	ldr	r3, [pc, #76]	; (80047ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	091b      	lsrs	r3, r3, #4
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	3301      	adds	r3, #1
 80047aa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047ac:	4b0f      	ldr	r3, [pc, #60]	; (80047ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	fb03 f202 	mul.w	r2, r3, r2
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047c4:	4b09      	ldr	r3, [pc, #36]	; (80047ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	0e5b      	lsrs	r3, r3, #25
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	3301      	adds	r3, #1
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80047de:	683b      	ldr	r3, [r7, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	40021000 	.word	0x40021000
 80047f0:	00f42400 	.word	0x00f42400
 80047f4:	007a1200 	.word	0x007a1200
 80047f8:	0800a998 	.word	0x0800a998

080047fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004804:	2300      	movs	r3, #0
 8004806:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004808:	2300      	movs	r3, #0
 800480a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004814:	2b00      	cmp	r3, #0
 8004816:	d040      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800481c:	2b80      	cmp	r3, #128	; 0x80
 800481e:	d02a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004820:	2b80      	cmp	r3, #128	; 0x80
 8004822:	d825      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004824:	2b60      	cmp	r3, #96	; 0x60
 8004826:	d026      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004828:	2b60      	cmp	r3, #96	; 0x60
 800482a:	d821      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800482c:	2b40      	cmp	r3, #64	; 0x40
 800482e:	d006      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	d81d      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004834:	2b00      	cmp	r3, #0
 8004836:	d009      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004838:	2b20      	cmp	r3, #32
 800483a:	d010      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800483c:	e018      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800483e:	4b89      	ldr	r3, [pc, #548]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	4a88      	ldr	r2, [pc, #544]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004848:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800484a:	e015      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3304      	adds	r3, #4
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fb02 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800485c:	e00c      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3320      	adds	r3, #32
 8004862:	2100      	movs	r1, #0
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fbed 	bl	8005044 <RCCEx_PLLSAI2_Config>
 800486a:	4603      	mov	r3, r0
 800486c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800486e:	e003      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	74fb      	strb	r3, [r7, #19]
      break;
 8004874:	e000      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004876:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10b      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800487e:	4b79      	ldr	r3, [pc, #484]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004880:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004884:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800488c:	4975      	ldr	r1, [pc, #468]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004894:	e001      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d047      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ae:	d030      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80048b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b4:	d82a      	bhi.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80048b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ba:	d02a      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80048bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048c0:	d824      	bhi.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80048c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c6:	d008      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xde>
 80048c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048cc:	d81e      	bhi.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80048d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d6:	d010      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80048d8:	e018      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048da:	4b62      	ldr	r3, [pc, #392]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	4a61      	ldr	r2, [pc, #388]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048e6:	e015      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3304      	adds	r3, #4
 80048ec:	2100      	movs	r1, #0
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fab4 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048f8:	e00c      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3320      	adds	r3, #32
 80048fe:	2100      	movs	r1, #0
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fb9f 	bl	8005044 <RCCEx_PLLSAI2_Config>
 8004906:	4603      	mov	r3, r0
 8004908:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800490a:	e003      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	74fb      	strb	r3, [r7, #19]
      break;
 8004910:	e000      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004914:	7cfb      	ldrb	r3, [r7, #19]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800491a:	4b52      	ldr	r3, [pc, #328]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800491c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004928:	494e      	ldr	r1, [pc, #312]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004930:	e001      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004932:	7cfb      	ldrb	r3, [r7, #19]
 8004934:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 809f 	beq.w	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004944:	2300      	movs	r3, #0
 8004946:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004948:	4b46      	ldr	r3, [pc, #280]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800494a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004958:	2300      	movs	r3, #0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00d      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800495e:	4b41      	ldr	r3, [pc, #260]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	4a40      	ldr	r2, [pc, #256]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004968:	6593      	str	r3, [r2, #88]	; 0x58
 800496a:	4b3e      	ldr	r3, [pc, #248]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004976:	2301      	movs	r3, #1
 8004978:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800497a:	4b3b      	ldr	r3, [pc, #236]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a3a      	ldr	r2, [pc, #232]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004984:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004986:	f7fd fef1 	bl	800276c <HAL_GetTick>
 800498a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800498c:	e009      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498e:	f7fd feed 	bl	800276c <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d902      	bls.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	74fb      	strb	r3, [r7, #19]
        break;
 80049a0:	e005      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049a2:	4b31      	ldr	r3, [pc, #196]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ef      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80049ae:	7cfb      	ldrb	r3, [r7, #19]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d15b      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049b4:	4b2b      	ldr	r3, [pc, #172]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049be:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d01f      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d019      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049d2:	4b24      	ldr	r3, [pc, #144]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049de:	4b21      	ldr	r3, [pc, #132]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e4:	4a1f      	ldr	r2, [pc, #124]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049ee:	4b1d      	ldr	r3, [pc, #116]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f4:	4a1b      	ldr	r2, [pc, #108]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049fe:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d016      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fd feac 	bl	800276c <HAL_GetTick>
 8004a14:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a16:	e00b      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a18:	f7fd fea8 	bl	800276c <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d902      	bls.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	74fb      	strb	r3, [r7, #19]
            break;
 8004a2e:	e006      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0ec      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004a3e:	7cfb      	ldrb	r3, [r7, #19]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10c      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a44:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a54:	4903      	ldr	r1, [pc, #12]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a5c:	e008      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a5e:	7cfb      	ldrb	r3, [r7, #19]
 8004a60:	74bb      	strb	r3, [r7, #18]
 8004a62:	e005      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004a64:	40021000 	.word	0x40021000
 8004a68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6c:	7cfb      	ldrb	r3, [r7, #19]
 8004a6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a70:	7c7b      	ldrb	r3, [r7, #17]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d105      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a76:	4ba0      	ldr	r3, [pc, #640]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7a:	4a9f      	ldr	r2, [pc, #636]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a8e:	4b9a      	ldr	r3, [pc, #616]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a94:	f023 0203 	bic.w	r2, r3, #3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9c:	4996      	ldr	r1, [pc, #600]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ab0:	4b91      	ldr	r3, [pc, #580]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	f023 020c 	bic.w	r2, r3, #12
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	498e      	ldr	r1, [pc, #568]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ad2:	4b89      	ldr	r3, [pc, #548]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae0:	4985      	ldr	r1, [pc, #532]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004af4:	4b80      	ldr	r3, [pc, #512]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b02:	497d      	ldr	r1, [pc, #500]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0310 	and.w	r3, r3, #16
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b16:	4b78      	ldr	r3, [pc, #480]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b24:	4974      	ldr	r1, [pc, #464]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b38:	4b6f      	ldr	r3, [pc, #444]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b46:	496c      	ldr	r1, [pc, #432]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b5a:	4b67      	ldr	r3, [pc, #412]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b68:	4963      	ldr	r1, [pc, #396]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b7c:	4b5e      	ldr	r3, [pc, #376]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b8a:	495b      	ldr	r1, [pc, #364]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b9e:	4b56      	ldr	r3, [pc, #344]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bac:	4952      	ldr	r1, [pc, #328]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bc0:	4b4d      	ldr	r3, [pc, #308]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bce:	494a      	ldr	r1, [pc, #296]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004be2:	4b45      	ldr	r3, [pc, #276]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf0:	4941      	ldr	r1, [pc, #260]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c04:	4b3c      	ldr	r3, [pc, #240]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c0a:	f023 0203 	bic.w	r2, r3, #3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c12:	4939      	ldr	r1, [pc, #228]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d028      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c26:	4b34      	ldr	r3, [pc, #208]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c34:	4930      	ldr	r1, [pc, #192]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c44:	d106      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c46:	4b2c      	ldr	r3, [pc, #176]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	4a2b      	ldr	r2, [pc, #172]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c50:	60d3      	str	r3, [r2, #12]
 8004c52:	e011      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c5c:	d10c      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3304      	adds	r3, #4
 8004c62:	2101      	movs	r1, #1
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 f8f9 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c6e:	7cfb      	ldrb	r3, [r7, #19]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004c74:	7cfb      	ldrb	r3, [r7, #19]
 8004c76:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d04d      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c8c:	d108      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004c8e:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c94:	4a18      	ldr	r2, [pc, #96]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c9a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004c9e:	e012      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ca0:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ca6:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ca8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004cb0:	4b11      	ldr	r3, [pc, #68]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cbe:	490e      	ldr	r1, [pc, #56]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cce:	d106      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd0:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cda:	60d3      	str	r3, [r2, #12]
 8004cdc:	e020      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ce6:	d109      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ce8:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4a02      	ldr	r2, [pc, #8]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf2:	60d3      	str	r3, [r2, #12]
 8004cf4:	e014      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f8a5 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 8004d12:	4603      	mov	r3, r0
 8004d14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d16:	7cfb      	ldrb	r3, [r7, #19]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004d1c:	7cfb      	ldrb	r3, [r7, #19]
 8004d1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d028      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d2c:	4b4a      	ldr	r3, [pc, #296]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d3a:	4947      	ldr	r1, [pc, #284]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d4a:	d106      	bne.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d4c:	4b42      	ldr	r3, [pc, #264]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4a41      	ldr	r2, [pc, #260]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d56:	60d3      	str	r3, [r2, #12]
 8004d58:	e011      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d62:	d10c      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3304      	adds	r3, #4
 8004d68:	2101      	movs	r1, #1
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 f876 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d74:	7cfb      	ldrb	r3, [r7, #19]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004d7a:	7cfb      	ldrb	r3, [r7, #19]
 8004d7c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01e      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d8a:	4b33      	ldr	r3, [pc, #204]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9a:	492f      	ldr	r1, [pc, #188]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004da8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dac:	d10c      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3304      	adds	r3, #4
 8004db2:	2102      	movs	r1, #2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 f851 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dbe:	7cfb      	ldrb	r3, [r7, #19]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004dc4:	7cfb      	ldrb	r3, [r7, #19]
 8004dc6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00b      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dd4:	4b20      	ldr	r3, [pc, #128]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dda:	f023 0204 	bic.w	r2, r3, #4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de4:	491c      	ldr	r1, [pc, #112]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00b      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004df8:	4b17      	ldr	r3, [pc, #92]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dfe:	f023 0218 	bic.w	r2, r3, #24
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e08:	4913      	ldr	r1, [pc, #76]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d017      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004e1c:	4b0e      	ldr	r3, [pc, #56]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e2c:	490a      	ldr	r1, [pc, #40]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e3e:	d105      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4a04      	ldr	r2, [pc, #16]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40021000 	.word	0x40021000

08004e5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e6a:	4b72      	ldr	r3, [pc, #456]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00e      	beq.n	8004e94 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e76:	4b6f      	ldr	r3, [pc, #444]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0203 	and.w	r2, r3, #3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d103      	bne.n	8004e8e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
       ||
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d142      	bne.n	8004f14 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	73fb      	strb	r3, [r7, #15]
 8004e92:	e03f      	b.n	8004f14 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d018      	beq.n	8004ece <RCCEx_PLLSAI1_Config+0x72>
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d825      	bhi.n	8004eec <RCCEx_PLLSAI1_Config+0x90>
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d002      	beq.n	8004eaa <RCCEx_PLLSAI1_Config+0x4e>
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d009      	beq.n	8004ebc <RCCEx_PLLSAI1_Config+0x60>
 8004ea8:	e020      	b.n	8004eec <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004eaa:	4b62      	ldr	r3, [pc, #392]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d11d      	bne.n	8004ef2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eba:	e01a      	b.n	8004ef2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ebc:	4b5d      	ldr	r3, [pc, #372]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d116      	bne.n	8004ef6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ecc:	e013      	b.n	8004ef6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ece:	4b59      	ldr	r3, [pc, #356]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10f      	bne.n	8004efa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004eda:	4b56      	ldr	r3, [pc, #344]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004eea:	e006      	b.n	8004efa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef0:	e004      	b.n	8004efc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004ef2:	bf00      	nop
 8004ef4:	e002      	b.n	8004efc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004ef6:	bf00      	nop
 8004ef8:	e000      	b.n	8004efc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004efa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d108      	bne.n	8004f14 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004f02:	4b4c      	ldr	r3, [pc, #304]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f023 0203 	bic.w	r2, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4949      	ldr	r1, [pc, #292]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f040 8086 	bne.w	8005028 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f1c:	4b45      	ldr	r3, [pc, #276]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a44      	ldr	r2, [pc, #272]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f28:	f7fd fc20 	bl	800276c <HAL_GetTick>
 8004f2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f2e:	e009      	b.n	8004f44 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f30:	f7fd fc1c 	bl	800276c <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d902      	bls.n	8004f44 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	73fb      	strb	r3, [r7, #15]
        break;
 8004f42:	e005      	b.n	8004f50 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f44:	4b3b      	ldr	r3, [pc, #236]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1ef      	bne.n	8004f30 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d168      	bne.n	8005028 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d113      	bne.n	8004f84 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f5c:	4b35      	ldr	r3, [pc, #212]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	4b35      	ldr	r3, [pc, #212]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6892      	ldr	r2, [r2, #8]
 8004f68:	0211      	lsls	r1, r2, #8
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	68d2      	ldr	r2, [r2, #12]
 8004f6e:	06d2      	lsls	r2, r2, #27
 8004f70:	4311      	orrs	r1, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6852      	ldr	r2, [r2, #4]
 8004f76:	3a01      	subs	r2, #1
 8004f78:	0112      	lsls	r2, r2, #4
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	492d      	ldr	r1, [pc, #180]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	610b      	str	r3, [r1, #16]
 8004f82:	e02d      	b.n	8004fe0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d115      	bne.n	8004fb6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f8a:	4b2a      	ldr	r3, [pc, #168]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	4b2b      	ldr	r3, [pc, #172]	; (800503c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6892      	ldr	r2, [r2, #8]
 8004f96:	0211      	lsls	r1, r2, #8
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6912      	ldr	r2, [r2, #16]
 8004f9c:	0852      	lsrs	r2, r2, #1
 8004f9e:	3a01      	subs	r2, #1
 8004fa0:	0552      	lsls	r2, r2, #21
 8004fa2:	4311      	orrs	r1, r2
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6852      	ldr	r2, [r2, #4]
 8004fa8:	3a01      	subs	r2, #1
 8004faa:	0112      	lsls	r2, r2, #4
 8004fac:	430a      	orrs	r2, r1
 8004fae:	4921      	ldr	r1, [pc, #132]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	610b      	str	r3, [r1, #16]
 8004fb4:	e014      	b.n	8004fe0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fb6:	4b1f      	ldr	r3, [pc, #124]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	4b21      	ldr	r3, [pc, #132]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6892      	ldr	r2, [r2, #8]
 8004fc2:	0211      	lsls	r1, r2, #8
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6952      	ldr	r2, [r2, #20]
 8004fc8:	0852      	lsrs	r2, r2, #1
 8004fca:	3a01      	subs	r2, #1
 8004fcc:	0652      	lsls	r2, r2, #25
 8004fce:	4311      	orrs	r1, r2
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6852      	ldr	r2, [r2, #4]
 8004fd4:	3a01      	subs	r2, #1
 8004fd6:	0112      	lsls	r2, r2, #4
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	4916      	ldr	r1, [pc, #88]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004fe0:	4b14      	ldr	r3, [pc, #80]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a13      	ldr	r2, [pc, #76]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fe6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fec:	f7fd fbbe 	bl	800276c <HAL_GetTick>
 8004ff0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ff2:	e009      	b.n	8005008 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ff4:	f7fd fbba 	bl	800276c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d902      	bls.n	8005008 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	73fb      	strb	r3, [r7, #15]
          break;
 8005006:	e005      	b.n	8005014 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0ef      	beq.n	8004ff4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800501a:	4b06      	ldr	r3, [pc, #24]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	4904      	ldr	r1, [pc, #16]	; (8005034 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005024:	4313      	orrs	r3, r2
 8005026:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000
 8005038:	07ff800f 	.word	0x07ff800f
 800503c:	ff9f800f 	.word	0xff9f800f
 8005040:	f9ff800f 	.word	0xf9ff800f

08005044 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005052:	4b72      	ldr	r3, [pc, #456]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00e      	beq.n	800507c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800505e:	4b6f      	ldr	r3, [pc, #444]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0203 	and.w	r2, r3, #3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d103      	bne.n	8005076 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
       ||
 8005072:	2b00      	cmp	r3, #0
 8005074:	d142      	bne.n	80050fc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	73fb      	strb	r3, [r7, #15]
 800507a:	e03f      	b.n	80050fc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b03      	cmp	r3, #3
 8005082:	d018      	beq.n	80050b6 <RCCEx_PLLSAI2_Config+0x72>
 8005084:	2b03      	cmp	r3, #3
 8005086:	d825      	bhi.n	80050d4 <RCCEx_PLLSAI2_Config+0x90>
 8005088:	2b01      	cmp	r3, #1
 800508a:	d002      	beq.n	8005092 <RCCEx_PLLSAI2_Config+0x4e>
 800508c:	2b02      	cmp	r3, #2
 800508e:	d009      	beq.n	80050a4 <RCCEx_PLLSAI2_Config+0x60>
 8005090:	e020      	b.n	80050d4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005092:	4b62      	ldr	r3, [pc, #392]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d11d      	bne.n	80050da <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a2:	e01a      	b.n	80050da <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050a4:	4b5d      	ldr	r3, [pc, #372]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d116      	bne.n	80050de <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b4:	e013      	b.n	80050de <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050b6:	4b59      	ldr	r3, [pc, #356]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10f      	bne.n	80050e2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050c2:	4b56      	ldr	r3, [pc, #344]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d109      	bne.n	80050e2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050d2:	e006      	b.n	80050e2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	73fb      	strb	r3, [r7, #15]
      break;
 80050d8:	e004      	b.n	80050e4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80050da:	bf00      	nop
 80050dc:	e002      	b.n	80050e4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80050de:	bf00      	nop
 80050e0:	e000      	b.n	80050e4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80050e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d108      	bne.n	80050fc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80050ea:	4b4c      	ldr	r3, [pc, #304]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f023 0203 	bic.w	r2, r3, #3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4949      	ldr	r1, [pc, #292]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f040 8086 	bne.w	8005210 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005104:	4b45      	ldr	r3, [pc, #276]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a44      	ldr	r2, [pc, #272]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 800510a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800510e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005110:	f7fd fb2c 	bl	800276c <HAL_GetTick>
 8005114:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005116:	e009      	b.n	800512c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005118:	f7fd fb28 	bl	800276c <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d902      	bls.n	800512c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	73fb      	strb	r3, [r7, #15]
        break;
 800512a:	e005      	b.n	8005138 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800512c:	4b3b      	ldr	r3, [pc, #236]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1ef      	bne.n	8005118 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d168      	bne.n	8005210 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d113      	bne.n	800516c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005144:	4b35      	ldr	r3, [pc, #212]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005146:	695a      	ldr	r2, [r3, #20]
 8005148:	4b35      	ldr	r3, [pc, #212]	; (8005220 <RCCEx_PLLSAI2_Config+0x1dc>)
 800514a:	4013      	ands	r3, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6892      	ldr	r2, [r2, #8]
 8005150:	0211      	lsls	r1, r2, #8
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	68d2      	ldr	r2, [r2, #12]
 8005156:	06d2      	lsls	r2, r2, #27
 8005158:	4311      	orrs	r1, r2
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6852      	ldr	r2, [r2, #4]
 800515e:	3a01      	subs	r2, #1
 8005160:	0112      	lsls	r2, r2, #4
 8005162:	430a      	orrs	r2, r1
 8005164:	492d      	ldr	r1, [pc, #180]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005166:	4313      	orrs	r3, r2
 8005168:	614b      	str	r3, [r1, #20]
 800516a:	e02d      	b.n	80051c8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d115      	bne.n	800519e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005172:	4b2a      	ldr	r3, [pc, #168]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005174:	695a      	ldr	r2, [r3, #20]
 8005176:	4b2b      	ldr	r3, [pc, #172]	; (8005224 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005178:	4013      	ands	r3, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6892      	ldr	r2, [r2, #8]
 800517e:	0211      	lsls	r1, r2, #8
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6912      	ldr	r2, [r2, #16]
 8005184:	0852      	lsrs	r2, r2, #1
 8005186:	3a01      	subs	r2, #1
 8005188:	0552      	lsls	r2, r2, #21
 800518a:	4311      	orrs	r1, r2
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6852      	ldr	r2, [r2, #4]
 8005190:	3a01      	subs	r2, #1
 8005192:	0112      	lsls	r2, r2, #4
 8005194:	430a      	orrs	r2, r1
 8005196:	4921      	ldr	r1, [pc, #132]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005198:	4313      	orrs	r3, r2
 800519a:	614b      	str	r3, [r1, #20]
 800519c:	e014      	b.n	80051c8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800519e:	4b1f      	ldr	r3, [pc, #124]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 80051a0:	695a      	ldr	r2, [r3, #20]
 80051a2:	4b21      	ldr	r3, [pc, #132]	; (8005228 <RCCEx_PLLSAI2_Config+0x1e4>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6892      	ldr	r2, [r2, #8]
 80051aa:	0211      	lsls	r1, r2, #8
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6952      	ldr	r2, [r2, #20]
 80051b0:	0852      	lsrs	r2, r2, #1
 80051b2:	3a01      	subs	r2, #1
 80051b4:	0652      	lsls	r2, r2, #25
 80051b6:	4311      	orrs	r1, r2
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6852      	ldr	r2, [r2, #4]
 80051bc:	3a01      	subs	r2, #1
 80051be:	0112      	lsls	r2, r2, #4
 80051c0:	430a      	orrs	r2, r1
 80051c2:	4916      	ldr	r1, [pc, #88]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80051c8:	4b14      	ldr	r3, [pc, #80]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a13      	ldr	r2, [pc, #76]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 80051ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d4:	f7fd faca 	bl	800276c <HAL_GetTick>
 80051d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051da:	e009      	b.n	80051f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051dc:	f7fd fac6 	bl	800276c <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d902      	bls.n	80051f0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	73fb      	strb	r3, [r7, #15]
          break;
 80051ee:	e005      	b.n	80051fc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0ef      	beq.n	80051dc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005204:	695a      	ldr	r2, [r3, #20]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	4904      	ldr	r1, [pc, #16]	; (800521c <RCCEx_PLLSAI2_Config+0x1d8>)
 800520c:	4313      	orrs	r3, r2
 800520e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005210:	7bfb      	ldrb	r3, [r7, #15]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000
 8005220:	07ff800f 	.word	0x07ff800f
 8005224:	ff9f800f 	.word	0xff9f800f
 8005228:	f9ff800f 	.word	0xf9ff800f

0800522c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e095      	b.n	800536a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	d108      	bne.n	8005258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800524e:	d009      	beq.n	8005264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	61da      	str	r2, [r3, #28]
 8005256:	e005      	b.n	8005264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fc fe84 	bl	8001f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052a4:	d902      	bls.n	80052ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	e002      	b.n	80052b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052ba:	d007      	beq.n	80052cc <HAL_SPI_Init+0xa0>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052c4:	d002      	beq.n	80052cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530e:	ea42 0103 	orr.w	r1, r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	0c1b      	lsrs	r3, r3, #16
 8005328:	f003 0204 	and.w	r2, r3, #4
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005348:	ea42 0103 	orr.w	r1, r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b088      	sub	sp, #32
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	4613      	mov	r3, r2
 8005380:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_SPI_Transmit+0x22>
 8005390:	2302      	movs	r3, #2
 8005392:	e15f      	b.n	8005654 <HAL_SPI_Transmit+0x2e2>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800539c:	f7fd f9e6 	bl	800276c <HAL_GetTick>
 80053a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d002      	beq.n	80053b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053b2:	2302      	movs	r3, #2
 80053b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053b6:	e148      	b.n	800564a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <HAL_SPI_Transmit+0x52>
 80053be:	88fb      	ldrh	r3, [r7, #6]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d102      	bne.n	80053ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053c8:	e13f      	b.n	800564a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2203      	movs	r2, #3
 80053ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	88fa      	ldrh	r2, [r7, #6]
 80053e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	88fa      	ldrh	r2, [r7, #6]
 80053e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005414:	d10f      	bne.n	8005436 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005424:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005434:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d007      	beq.n	8005454 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005452:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800545c:	d94f      	bls.n	80054fe <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_SPI_Transmit+0xfa>
 8005466:	8afb      	ldrh	r3, [r7, #22]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d142      	bne.n	80054f2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	881a      	ldrh	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	1c9a      	adds	r2, r3, #2
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005490:	e02f      	b.n	80054f2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b02      	cmp	r3, #2
 800549e:	d112      	bne.n	80054c6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	881a      	ldrh	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	1c9a      	adds	r2, r3, #2
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054c4:	e015      	b.n	80054f2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054c6:	f7fd f951 	bl	800276c <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d803      	bhi.n	80054de <HAL_SPI_Transmit+0x16c>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054dc:	d102      	bne.n	80054e4 <HAL_SPI_Transmit+0x172>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d106      	bne.n	80054f2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80054f0:	e0ab      	b.n	800564a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1ca      	bne.n	8005492 <HAL_SPI_Transmit+0x120>
 80054fc:	e080      	b.n	8005600 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_SPI_Transmit+0x19a>
 8005506:	8afb      	ldrh	r3, [r7, #22]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d174      	bne.n	80055f6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005510:	b29b      	uxth	r3, r3
 8005512:	2b01      	cmp	r3, #1
 8005514:	d912      	bls.n	800553c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	881a      	ldrh	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	1c9a      	adds	r2, r3, #2
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b02      	subs	r3, #2
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	87da      	strh	r2, [r3, #62]	; 0x3e
 800553a:	e05c      	b.n	80055f6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	7812      	ldrb	r2, [r2, #0]
 8005548:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005562:	e048      	b.n	80055f6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b02      	cmp	r3, #2
 8005570:	d12b      	bne.n	80055ca <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	d912      	bls.n	80055a2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	881a      	ldrh	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	1c9a      	adds	r2, r3, #2
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b02      	subs	r3, #2
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055a0:	e029      	b.n	80055f6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	330c      	adds	r3, #12
 80055ac:	7812      	ldrb	r2, [r2, #0]
 80055ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055be:	b29b      	uxth	r3, r3
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055c8:	e015      	b.n	80055f6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ca:	f7fd f8cf 	bl	800276c <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d803      	bhi.n	80055e2 <HAL_SPI_Transmit+0x270>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e0:	d102      	bne.n	80055e8 <HAL_SPI_Transmit+0x276>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d106      	bne.n	80055f6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80055f4:	e029      	b.n	800564a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1b1      	bne.n	8005564 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	6839      	ldr	r1, [r7, #0]
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 fcf9 	bl	8005ffc <SPI_EndRxTxTransaction>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2220      	movs	r2, #32
 8005614:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10a      	bne.n	8005634 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	77fb      	strb	r3, [r7, #31]
 8005640:	e003      	b.n	800564a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005652:	7ffb      	ldrb	r3, [r7, #31]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3720      	adds	r7, #32
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af02      	add	r7, sp, #8
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	4613      	mov	r3, r2
 800566a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	d002      	beq.n	8005682 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800567c:	2302      	movs	r3, #2
 800567e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005680:	e11a      	b.n	80058b8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800568a:	d112      	bne.n	80056b2 <HAL_SPI_Receive+0x56>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10e      	bne.n	80056b2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2204      	movs	r2, #4
 8005698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800569c:	88fa      	ldrh	r2, [r7, #6]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	4613      	mov	r3, r2
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	68b9      	ldr	r1, [r7, #8]
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f90e 	bl	80058ca <HAL_SPI_TransmitReceive>
 80056ae:	4603      	mov	r3, r0
 80056b0:	e107      	b.n	80058c2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_SPI_Receive+0x64>
 80056bc:	2302      	movs	r3, #2
 80056be:	e100      	b.n	80058c2 <HAL_SPI_Receive+0x266>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056c8:	f7fd f850 	bl	800276c <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <HAL_SPI_Receive+0x7e>
 80056d4:	88fb      	ldrh	r3, [r7, #6]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d102      	bne.n	80056e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056de:	e0eb      	b.n	80058b8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2204      	movs	r2, #4
 80056e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	88fa      	ldrh	r2, [r7, #6]
 80056f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	88fa      	ldrh	r2, [r7, #6]
 8005700:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800572a:	d908      	bls.n	800573e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800573a:	605a      	str	r2, [r3, #4]
 800573c:	e007      	b.n	800574e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800574c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005756:	d10f      	bne.n	8005778 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005766:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005776:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d007      	beq.n	8005796 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005794:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800579e:	d86f      	bhi.n	8005880 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80057a0:	e034      	b.n	800580c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d117      	bne.n	80057e0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f103 020c 	add.w	r2, r3, #12
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	7812      	ldrb	r2, [r2, #0]
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80057de:	e015      	b.n	800580c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057e0:	f7fc ffc4 	bl	800276c <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d803      	bhi.n	80057f8 <HAL_SPI_Receive+0x19c>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d102      	bne.n	80057fe <HAL_SPI_Receive+0x1a2>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800580a:	e055      	b.n	80058b8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005812:	b29b      	uxth	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1c4      	bne.n	80057a2 <HAL_SPI_Receive+0x146>
 8005818:	e038      	b.n	800588c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d115      	bne.n	8005854 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	b292      	uxth	r2, r2
 8005834:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	1c9a      	adds	r2, r3, #2
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005852:	e015      	b.n	8005880 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005854:	f7fc ff8a 	bl	800276c <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d803      	bhi.n	800586c <HAL_SPI_Receive+0x210>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d102      	bne.n	8005872 <HAL_SPI_Receive+0x216>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800587e:	e01b      	b.n	80058b8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1c6      	bne.n	800581a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	6839      	ldr	r1, [r7, #0]
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 fb5b 	bl	8005f4c <SPI_EndRxTransaction>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2220      	movs	r2, #32
 80058a0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	75fb      	strb	r3, [r7, #23]
 80058ae:	e003      	b.n	80058b8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b08a      	sub	sp, #40	; 0x28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
 80058d6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058d8:	2301      	movs	r3, #1
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_SPI_TransmitReceive+0x26>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e20a      	b.n	8005d06 <HAL_SPI_TransmitReceive+0x43c>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058f8:	f7fc ff38 	bl	800276c <HAL_GetTick>
 80058fc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005904:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800590c:	887b      	ldrh	r3, [r7, #2]
 800590e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005910:	887b      	ldrh	r3, [r7, #2]
 8005912:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005914:	7efb      	ldrb	r3, [r7, #27]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d00e      	beq.n	8005938 <HAL_SPI_TransmitReceive+0x6e>
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005920:	d106      	bne.n	8005930 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d102      	bne.n	8005930 <HAL_SPI_TransmitReceive+0x66>
 800592a:	7efb      	ldrb	r3, [r7, #27]
 800592c:	2b04      	cmp	r3, #4
 800592e:	d003      	beq.n	8005938 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005930:	2302      	movs	r3, #2
 8005932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005936:	e1e0      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <HAL_SPI_TransmitReceive+0x80>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_SPI_TransmitReceive+0x80>
 8005944:	887b      	ldrh	r3, [r7, #2]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005950:	e1d3      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b04      	cmp	r3, #4
 800595c:	d003      	beq.n	8005966 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2205      	movs	r2, #5
 8005962:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	887a      	ldrh	r2, [r7, #2]
 8005976:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	887a      	ldrh	r2, [r7, #2]
 800597e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	887a      	ldrh	r2, [r7, #2]
 800598c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	887a      	ldrh	r2, [r7, #2]
 8005992:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059a8:	d802      	bhi.n	80059b0 <HAL_SPI_TransmitReceive+0xe6>
 80059aa:	8a3b      	ldrh	r3, [r7, #16]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d908      	bls.n	80059c2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059be:	605a      	str	r2, [r3, #4]
 80059c0:	e007      	b.n	80059d2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059d0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059dc:	2b40      	cmp	r3, #64	; 0x40
 80059de:	d007      	beq.n	80059f0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059f8:	f240 8081 	bls.w	8005afe <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <HAL_SPI_TransmitReceive+0x140>
 8005a04:	8a7b      	ldrh	r3, [r7, #18]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d16d      	bne.n	8005ae6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	881a      	ldrh	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	1c9a      	adds	r2, r3, #2
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a2e:	e05a      	b.n	8005ae6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d11b      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x1ac>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d016      	beq.n	8005a76 <HAL_SPI_TransmitReceive+0x1ac>
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d113      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	881a      	ldrh	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	1c9a      	adds	r2, r3, #2
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d11c      	bne.n	8005abe <HAL_SPI_TransmitReceive+0x1f4>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d016      	beq.n	8005abe <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	b292      	uxth	r2, r2
 8005a9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	1c9a      	adds	r2, r3, #2
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005aba:	2301      	movs	r3, #1
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005abe:	f7fc fe55 	bl	800276c <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d80b      	bhi.n	8005ae6 <HAL_SPI_TransmitReceive+0x21c>
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d007      	beq.n	8005ae6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005ae4:	e109      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d19f      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x166>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d199      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x166>
 8005afc:	e0e3      	b.n	8005cc6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_SPI_TransmitReceive+0x244>
 8005b06:	8a7b      	ldrh	r3, [r7, #18]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	f040 80cf 	bne.w	8005cac <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d912      	bls.n	8005b3e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	881a      	ldrh	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	1c9a      	adds	r2, r3, #2
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3b02      	subs	r3, #2
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b3c:	e0b6      	b.n	8005cac <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	330c      	adds	r3, #12
 8005b48:	7812      	ldrb	r2, [r2, #0]
 8005b4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b64:	e0a2      	b.n	8005cac <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d134      	bne.n	8005bde <HAL_SPI_TransmitReceive+0x314>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d02f      	beq.n	8005bde <HAL_SPI_TransmitReceive+0x314>
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d12c      	bne.n	8005bde <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d912      	bls.n	8005bb4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	881a      	ldrh	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	1c9a      	adds	r2, r3, #2
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b02      	subs	r3, #2
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bb2:	e012      	b.n	8005bda <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	7812      	ldrb	r2, [r2, #0]
 8005bc0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d148      	bne.n	8005c7e <HAL_SPI_TransmitReceive+0x3b4>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d042      	beq.n	8005c7e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d923      	bls.n	8005c4c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	b292      	uxth	r2, r2
 8005c10:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	1c9a      	adds	r2, r3, #2
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b02      	subs	r3, #2
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d81f      	bhi.n	8005c7a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c48:	605a      	str	r2, [r3, #4]
 8005c4a:	e016      	b.n	8005c7a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f103 020c 	add.w	r2, r3, #12
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	7812      	ldrb	r2, [r2, #0]
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c7e:	f7fc fd75 	bl	800276c <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d803      	bhi.n	8005c96 <HAL_SPI_TransmitReceive+0x3cc>
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c94:	d102      	bne.n	8005c9c <HAL_SPI_TransmitReceive+0x3d2>
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d107      	bne.n	8005cac <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005caa:	e026      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f47f af57 	bne.w	8005b66 <HAL_SPI_TransmitReceive+0x29c>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f47f af50 	bne.w	8005b66 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 f996 	bl	8005ffc <SPI_EndRxTxTransaction>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d005      	beq.n	8005ce2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf0:	e003      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3728      	adds	r7, #40	; 0x28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d20:	f7fc fd24 	bl	800276c <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	1a9b      	subs	r3, r3, r2
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d30:	f7fc fd1c 	bl	800276c <HAL_GetTick>
 8005d34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d36:	4b39      	ldr	r3, [pc, #228]	; (8005e1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	015b      	lsls	r3, r3, #5
 8005d3c:	0d1b      	lsrs	r3, r3, #20
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	fb02 f303 	mul.w	r3, r2, r3
 8005d44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d46:	e054      	b.n	8005df2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4e:	d050      	beq.n	8005df2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d50:	f7fc fd0c 	bl	800276c <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d902      	bls.n	8005d66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d13d      	bne.n	8005de2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d7e:	d111      	bne.n	8005da4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d88:	d004      	beq.n	8005d94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d92:	d107      	bne.n	8005da4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dac:	d10f      	bne.n	8005dce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e017      	b.n	8005e12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	bf0c      	ite	eq
 8005e02:	2301      	moveq	r3, #1
 8005e04:	2300      	movne	r3, #0
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	79fb      	ldrb	r3, [r7, #7]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d19b      	bne.n	8005d48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3720      	adds	r7, #32
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000004 	.word	0x20000004

08005e20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	; 0x28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005e32:	f7fc fc9b 	bl	800276c <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	4413      	add	r3, r2
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005e42:	f7fc fc93 	bl	800276c <HAL_GetTick>
 8005e46:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	330c      	adds	r3, #12
 8005e4e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e50:	4b3d      	ldr	r3, [pc, #244]	; (8005f48 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	00da      	lsls	r2, r3, #3
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	0d1b      	lsrs	r3, r3, #20
 8005e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
 8005e66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e68:	e060      	b.n	8005f2c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e70:	d107      	bne.n	8005e82 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d104      	bne.n	8005e82 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e88:	d050      	beq.n	8005f2c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e8a:	f7fc fc6f 	bl	800276c <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d902      	bls.n	8005ea0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d13d      	bne.n	8005f1c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005eae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eb8:	d111      	bne.n	8005ede <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec2:	d004      	beq.n	8005ece <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ecc:	d107      	bne.n	8005ede <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005edc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee6:	d10f      	bne.n	8005f08 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e010      	b.n	8005f3e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4013      	ands	r3, r2
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d196      	bne.n	8005e6a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3728      	adds	r7, #40	; 0x28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000004 	.word	0x20000004

08005f4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af02      	add	r7, sp, #8
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f60:	d111      	bne.n	8005f86 <SPI_EndRxTransaction+0x3a>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f6a:	d004      	beq.n	8005f76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f74:	d107      	bne.n	8005f86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f84:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2180      	movs	r1, #128	; 0x80
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f7ff febd 	bl	8005d10 <SPI_WaitFlagStateUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d007      	beq.n	8005fac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa0:	f043 0220 	orr.w	r2, r3, #32
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e023      	b.n	8005ff4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fb4:	d11d      	bne.n	8005ff2 <SPI_EndRxTransaction+0xa6>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fbe:	d004      	beq.n	8005fca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc8:	d113      	bne.n	8005ff2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7ff ff22 	bl	8005e20 <SPI_WaitFifoStateUntilTimeout>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d007      	beq.n	8005ff2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe6:	f043 0220 	orr.w	r2, r3, #32
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e000      	b.n	8005ff4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af02      	add	r7, sp, #8
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2200      	movs	r2, #0
 8006010:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7ff ff03 	bl	8005e20 <SPI_WaitFifoStateUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d007      	beq.n	8006030 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006024:	f043 0220 	orr.w	r2, r3, #32
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e027      	b.n	8006080 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2200      	movs	r2, #0
 8006038:	2180      	movs	r1, #128	; 0x80
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f7ff fe68 	bl	8005d10 <SPI_WaitFlagStateUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d007      	beq.n	8006056 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800604a:	f043 0220 	orr.w	r2, r3, #32
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e014      	b.n	8006080 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2200      	movs	r2, #0
 800605e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f7ff fedc 	bl	8005e20 <SPI_WaitFifoStateUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d007      	beq.n	800607e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006072:	f043 0220 	orr.w	r2, r3, #32
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e000      	b.n	8006080 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e049      	b.n	800612e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d106      	bne.n	80060b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fb fff0 	bl	8002094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f000 fce2 	bl	8006a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	d001      	beq.n	8006150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e04f      	b.n	80061f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a23      	ldr	r2, [pc, #140]	; (80061fc <HAL_TIM_Base_Start_IT+0xc4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01d      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0x76>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617a:	d018      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0x76>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a1f      	ldr	r2, [pc, #124]	; (8006200 <HAL_TIM_Base_Start_IT+0xc8>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0x76>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1e      	ldr	r2, [pc, #120]	; (8006204 <HAL_TIM_Base_Start_IT+0xcc>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00e      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0x76>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a1c      	ldr	r2, [pc, #112]	; (8006208 <HAL_TIM_Base_Start_IT+0xd0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0x76>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a1b      	ldr	r2, [pc, #108]	; (800620c <HAL_TIM_Base_Start_IT+0xd4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d004      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0x76>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a19      	ldr	r2, [pc, #100]	; (8006210 <HAL_TIM_Base_Start_IT+0xd8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d115      	bne.n	80061da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	4b17      	ldr	r3, [pc, #92]	; (8006214 <HAL_TIM_Base_Start_IT+0xdc>)
 80061b6:	4013      	ands	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b06      	cmp	r3, #6
 80061be:	d015      	beq.n	80061ec <HAL_TIM_Base_Start_IT+0xb4>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c6:	d011      	beq.n	80061ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0201 	orr.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d8:	e008      	b.n	80061ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0201 	orr.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e000      	b.n	80061ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	40012c00 	.word	0x40012c00
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40000c00 	.word	0x40000c00
 800620c:	40013400 	.word	0x40013400
 8006210:	40014000 	.word	0x40014000
 8006214:	00010007 	.word	0x00010007

08006218 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e049      	b.n	80062be <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d106      	bne.n	8006244 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f841 	bl	80062c6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3304      	adds	r3, #4
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f000 fc1a 	bl	8006a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d104      	bne.n	80062fa <HAL_TIM_IC_Start_IT+0x1e>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	e023      	b.n	8006342 <HAL_TIM_IC_Start_IT+0x66>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d104      	bne.n	800630a <HAL_TIM_IC_Start_IT+0x2e>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006306:	b2db      	uxtb	r3, r3
 8006308:	e01b      	b.n	8006342 <HAL_TIM_IC_Start_IT+0x66>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b08      	cmp	r3, #8
 800630e:	d104      	bne.n	800631a <HAL_TIM_IC_Start_IT+0x3e>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006316:	b2db      	uxtb	r3, r3
 8006318:	e013      	b.n	8006342 <HAL_TIM_IC_Start_IT+0x66>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b0c      	cmp	r3, #12
 800631e:	d104      	bne.n	800632a <HAL_TIM_IC_Start_IT+0x4e>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006326:	b2db      	uxtb	r3, r3
 8006328:	e00b      	b.n	8006342 <HAL_TIM_IC_Start_IT+0x66>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b10      	cmp	r3, #16
 800632e:	d104      	bne.n	800633a <HAL_TIM_IC_Start_IT+0x5e>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006336:	b2db      	uxtb	r3, r3
 8006338:	e003      	b.n	8006342 <HAL_TIM_IC_Start_IT+0x66>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006340:	b2db      	uxtb	r3, r3
 8006342:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <HAL_TIM_IC_Start_IT+0x78>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006350:	b2db      	uxtb	r3, r3
 8006352:	e013      	b.n	800637c <HAL_TIM_IC_Start_IT+0xa0>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b04      	cmp	r3, #4
 8006358:	d104      	bne.n	8006364 <HAL_TIM_IC_Start_IT+0x88>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006360:	b2db      	uxtb	r3, r3
 8006362:	e00b      	b.n	800637c <HAL_TIM_IC_Start_IT+0xa0>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b08      	cmp	r3, #8
 8006368:	d104      	bne.n	8006374 <HAL_TIM_IC_Start_IT+0x98>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006370:	b2db      	uxtb	r3, r3
 8006372:	e003      	b.n	800637c <HAL_TIM_IC_Start_IT+0xa0>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800637a:	b2db      	uxtb	r3, r3
 800637c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800637e:	7bbb      	ldrb	r3, [r7, #14]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d102      	bne.n	800638a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006384:	7b7b      	ldrb	r3, [r7, #13]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d001      	beq.n	800638e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e0dd      	b.n	800654a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d104      	bne.n	800639e <HAL_TIM_IC_Start_IT+0xc2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800639c:	e023      	b.n	80063e6 <HAL_TIM_IC_Start_IT+0x10a>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d104      	bne.n	80063ae <HAL_TIM_IC_Start_IT+0xd2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063ac:	e01b      	b.n	80063e6 <HAL_TIM_IC_Start_IT+0x10a>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d104      	bne.n	80063be <HAL_TIM_IC_Start_IT+0xe2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063bc:	e013      	b.n	80063e6 <HAL_TIM_IC_Start_IT+0x10a>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b0c      	cmp	r3, #12
 80063c2:	d104      	bne.n	80063ce <HAL_TIM_IC_Start_IT+0xf2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063cc:	e00b      	b.n	80063e6 <HAL_TIM_IC_Start_IT+0x10a>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b10      	cmp	r3, #16
 80063d2:	d104      	bne.n	80063de <HAL_TIM_IC_Start_IT+0x102>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063dc:	e003      	b.n	80063e6 <HAL_TIM_IC_Start_IT+0x10a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d104      	bne.n	80063f6 <HAL_TIM_IC_Start_IT+0x11a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063f4:	e013      	b.n	800641e <HAL_TIM_IC_Start_IT+0x142>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d104      	bne.n	8006406 <HAL_TIM_IC_Start_IT+0x12a>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006404:	e00b      	b.n	800641e <HAL_TIM_IC_Start_IT+0x142>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b08      	cmp	r3, #8
 800640a:	d104      	bne.n	8006416 <HAL_TIM_IC_Start_IT+0x13a>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006414:	e003      	b.n	800641e <HAL_TIM_IC_Start_IT+0x142>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2202      	movs	r2, #2
 800641a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b0c      	cmp	r3, #12
 8006422:	d841      	bhi.n	80064a8 <HAL_TIM_IC_Start_IT+0x1cc>
 8006424:	a201      	add	r2, pc, #4	; (adr r2, 800642c <HAL_TIM_IC_Start_IT+0x150>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	08006461 	.word	0x08006461
 8006430:	080064a9 	.word	0x080064a9
 8006434:	080064a9 	.word	0x080064a9
 8006438:	080064a9 	.word	0x080064a9
 800643c:	08006473 	.word	0x08006473
 8006440:	080064a9 	.word	0x080064a9
 8006444:	080064a9 	.word	0x080064a9
 8006448:	080064a9 	.word	0x080064a9
 800644c:	08006485 	.word	0x08006485
 8006450:	080064a9 	.word	0x080064a9
 8006454:	080064a9 	.word	0x080064a9
 8006458:	080064a9 	.word	0x080064a9
 800645c:	08006497 	.word	0x08006497
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0202 	orr.w	r2, r2, #2
 800646e:	60da      	str	r2, [r3, #12]
      break;
 8006470:	e01d      	b.n	80064ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0204 	orr.w	r2, r2, #4
 8006480:	60da      	str	r2, [r3, #12]
      break;
 8006482:	e014      	b.n	80064ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0208 	orr.w	r2, r2, #8
 8006492:	60da      	str	r2, [r3, #12]
      break;
 8006494:	e00b      	b.n	80064ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0210 	orr.w	r2, r2, #16
 80064a4:	60da      	str	r2, [r3, #12]
      break;
 80064a6:	e002      	b.n	80064ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	73fb      	strb	r3, [r7, #15]
      break;
 80064ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d149      	bne.n	8006548 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2201      	movs	r2, #1
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 fd3f 	bl	8006f40 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a23      	ldr	r2, [pc, #140]	; (8006554 <HAL_TIM_IC_Start_IT+0x278>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d01d      	beq.n	8006508 <HAL_TIM_IC_Start_IT+0x22c>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d4:	d018      	beq.n	8006508 <HAL_TIM_IC_Start_IT+0x22c>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1f      	ldr	r2, [pc, #124]	; (8006558 <HAL_TIM_IC_Start_IT+0x27c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d013      	beq.n	8006508 <HAL_TIM_IC_Start_IT+0x22c>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1d      	ldr	r2, [pc, #116]	; (800655c <HAL_TIM_IC_Start_IT+0x280>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00e      	beq.n	8006508 <HAL_TIM_IC_Start_IT+0x22c>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1c      	ldr	r2, [pc, #112]	; (8006560 <HAL_TIM_IC_Start_IT+0x284>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d009      	beq.n	8006508 <HAL_TIM_IC_Start_IT+0x22c>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1a      	ldr	r2, [pc, #104]	; (8006564 <HAL_TIM_IC_Start_IT+0x288>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d004      	beq.n	8006508 <HAL_TIM_IC_Start_IT+0x22c>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a19      	ldr	r2, [pc, #100]	; (8006568 <HAL_TIM_IC_Start_IT+0x28c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d115      	bne.n	8006534 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689a      	ldr	r2, [r3, #8]
 800650e:	4b17      	ldr	r3, [pc, #92]	; (800656c <HAL_TIM_IC_Start_IT+0x290>)
 8006510:	4013      	ands	r3, r2
 8006512:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b06      	cmp	r3, #6
 8006518:	d015      	beq.n	8006546 <HAL_TIM_IC_Start_IT+0x26a>
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006520:	d011      	beq.n	8006546 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f042 0201 	orr.w	r2, r2, #1
 8006530:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006532:	e008      	b.n	8006546 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0201 	orr.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	e000      	b.n	8006548 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006546:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006548:	7bfb      	ldrb	r3, [r7, #15]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	40012c00 	.word	0x40012c00
 8006558:	40000400 	.word	0x40000400
 800655c:	40000800 	.word	0x40000800
 8006560:	40000c00 	.word	0x40000c00
 8006564:	40013400 	.word	0x40013400
 8006568:	40014000 	.word	0x40014000
 800656c:	00010007 	.word	0x00010007

08006570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d020      	beq.n	80065d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01b      	beq.n	80065d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f06f 0202 	mvn.w	r2, #2
 80065a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fa49 	bl	8006a52 <HAL_TIM_IC_CaptureCallback>
 80065c0:	e005      	b.n	80065ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fa3b 	bl	8006a3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fa4c 	bl	8006a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d020      	beq.n	8006620 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f003 0304 	and.w	r3, r3, #4
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01b      	beq.n	8006620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f06f 0204 	mvn.w	r2, #4
 80065f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2202      	movs	r2, #2
 80065f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fa23 	bl	8006a52 <HAL_TIM_IC_CaptureCallback>
 800660c:	e005      	b.n	800661a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fa15 	bl	8006a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fa26 	bl	8006a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d020      	beq.n	800666c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	2b00      	cmp	r3, #0
 8006632:	d01b      	beq.n	800666c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0208 	mvn.w	r2, #8
 800663c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2204      	movs	r2, #4
 8006642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f9fd 	bl	8006a52 <HAL_TIM_IC_CaptureCallback>
 8006658:	e005      	b.n	8006666 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f9ef 	bl	8006a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fa00 	bl	8006a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f003 0310 	and.w	r3, r3, #16
 8006672:	2b00      	cmp	r3, #0
 8006674:	d020      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f003 0310 	and.w	r3, r3, #16
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01b      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0210 	mvn.w	r2, #16
 8006688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2208      	movs	r2, #8
 800668e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f9d7 	bl	8006a52 <HAL_TIM_IC_CaptureCallback>
 80066a4:	e005      	b.n	80066b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f9c9 	bl	8006a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f9da 	bl	8006a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00c      	beq.n	80066dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d007      	beq.n	80066dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f06f 0201 	mvn.w	r2, #1
 80066d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fb fe48 	bl	800236c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00c      	beq.n	8006700 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fcd8 	bl	80070b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00c      	beq.n	8006724 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006710:	2b00      	cmp	r3, #0
 8006712:	d007      	beq.n	8006724 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800671c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fcd0 	bl	80070c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00c      	beq.n	8006748 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f999 	bl	8006a7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00c      	beq.n	800676c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b00      	cmp	r3, #0
 800675a:	d007      	beq.n	800676c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f06f 0220 	mvn.w	r2, #32
 8006764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fc98 	bl	800709c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <HAL_TIM_IC_ConfigChannel+0x1e>
 800678e:	2302      	movs	r3, #2
 8006790:	e088      	b.n	80068a4 <HAL_TIM_IC_ConfigChannel+0x130>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d11b      	bne.n	80067d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80067b0:	f000 fa08 	bl	8006bc4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699a      	ldr	r2, [r3, #24]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 020c 	bic.w	r2, r2, #12
 80067c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6999      	ldr	r1, [r3, #24]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	689a      	ldr	r2, [r3, #8]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	619a      	str	r2, [r3, #24]
 80067d6:	e060      	b.n	800689a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d11c      	bne.n	8006818 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80067ee:	f000 fa86 	bl	8006cfe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	699a      	ldr	r2, [r3, #24]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006800:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6999      	ldr	r1, [r3, #24]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	021a      	lsls	r2, r3, #8
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	619a      	str	r2, [r3, #24]
 8006816:	e040      	b.n	800689a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b08      	cmp	r3, #8
 800681c:	d11b      	bne.n	8006856 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800682e:	f000 fad3 	bl	8006dd8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69da      	ldr	r2, [r3, #28]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 020c 	bic.w	r2, r2, #12
 8006840:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69d9      	ldr	r1, [r3, #28]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	61da      	str	r2, [r3, #28]
 8006854:	e021      	b.n	800689a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b0c      	cmp	r3, #12
 800685a:	d11c      	bne.n	8006896 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800686c:	f000 faf0 	bl	8006e50 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	69da      	ldr	r2, [r3, #28]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800687e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	69d9      	ldr	r1, [r3, #28]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	021a      	lsls	r2, r3, #8
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	61da      	str	r2, [r3, #28]
 8006894:	e001      	b.n	800689a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_TIM_ConfigClockSource+0x1c>
 80068c4:	2302      	movs	r3, #2
 80068c6:	e0b6      	b.n	8006a36 <HAL_TIM_ConfigClockSource+0x18a>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006904:	d03e      	beq.n	8006984 <HAL_TIM_ConfigClockSource+0xd8>
 8006906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800690a:	f200 8087 	bhi.w	8006a1c <HAL_TIM_ConfigClockSource+0x170>
 800690e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006912:	f000 8086 	beq.w	8006a22 <HAL_TIM_ConfigClockSource+0x176>
 8006916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800691a:	d87f      	bhi.n	8006a1c <HAL_TIM_ConfigClockSource+0x170>
 800691c:	2b70      	cmp	r3, #112	; 0x70
 800691e:	d01a      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0xaa>
 8006920:	2b70      	cmp	r3, #112	; 0x70
 8006922:	d87b      	bhi.n	8006a1c <HAL_TIM_ConfigClockSource+0x170>
 8006924:	2b60      	cmp	r3, #96	; 0x60
 8006926:	d050      	beq.n	80069ca <HAL_TIM_ConfigClockSource+0x11e>
 8006928:	2b60      	cmp	r3, #96	; 0x60
 800692a:	d877      	bhi.n	8006a1c <HAL_TIM_ConfigClockSource+0x170>
 800692c:	2b50      	cmp	r3, #80	; 0x50
 800692e:	d03c      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0xfe>
 8006930:	2b50      	cmp	r3, #80	; 0x50
 8006932:	d873      	bhi.n	8006a1c <HAL_TIM_ConfigClockSource+0x170>
 8006934:	2b40      	cmp	r3, #64	; 0x40
 8006936:	d058      	beq.n	80069ea <HAL_TIM_ConfigClockSource+0x13e>
 8006938:	2b40      	cmp	r3, #64	; 0x40
 800693a:	d86f      	bhi.n	8006a1c <HAL_TIM_ConfigClockSource+0x170>
 800693c:	2b30      	cmp	r3, #48	; 0x30
 800693e:	d064      	beq.n	8006a0a <HAL_TIM_ConfigClockSource+0x15e>
 8006940:	2b30      	cmp	r3, #48	; 0x30
 8006942:	d86b      	bhi.n	8006a1c <HAL_TIM_ConfigClockSource+0x170>
 8006944:	2b20      	cmp	r3, #32
 8006946:	d060      	beq.n	8006a0a <HAL_TIM_ConfigClockSource+0x15e>
 8006948:	2b20      	cmp	r3, #32
 800694a:	d867      	bhi.n	8006a1c <HAL_TIM_ConfigClockSource+0x170>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d05c      	beq.n	8006a0a <HAL_TIM_ConfigClockSource+0x15e>
 8006950:	2b10      	cmp	r3, #16
 8006952:	d05a      	beq.n	8006a0a <HAL_TIM_ConfigClockSource+0x15e>
 8006954:	e062      	b.n	8006a1c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006966:	f000 facb 	bl	8006f00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	609a      	str	r2, [r3, #8]
      break;
 8006982:	e04f      	b.n	8006a24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006994:	f000 fab4 	bl	8006f00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689a      	ldr	r2, [r3, #8]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069a6:	609a      	str	r2, [r3, #8]
      break;
 80069a8:	e03c      	b.n	8006a24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b6:	461a      	mov	r2, r3
 80069b8:	f000 f972 	bl	8006ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2150      	movs	r1, #80	; 0x50
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fa81 	bl	8006eca <TIM_ITRx_SetConfig>
      break;
 80069c8:	e02c      	b.n	8006a24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069d6:	461a      	mov	r2, r3
 80069d8:	f000 f9ce 	bl	8006d78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2160      	movs	r1, #96	; 0x60
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fa71 	bl	8006eca <TIM_ITRx_SetConfig>
      break;
 80069e8:	e01c      	b.n	8006a24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069f6:	461a      	mov	r2, r3
 80069f8:	f000 f952 	bl	8006ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2140      	movs	r1, #64	; 0x40
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fa61 	bl	8006eca <TIM_ITRx_SetConfig>
      break;
 8006a08:	e00c      	b.n	8006a24 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4619      	mov	r1, r3
 8006a14:	4610      	mov	r0, r2
 8006a16:	f000 fa58 	bl	8006eca <TIM_ITRx_SetConfig>
      break;
 8006a1a:	e003      	b.n	8006a24 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a20:	e000      	b.n	8006a24 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
	...

08006a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a40      	ldr	r2, [pc, #256]	; (8006ba4 <TIM_Base_SetConfig+0x114>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d013      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aae:	d00f      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a3d      	ldr	r2, [pc, #244]	; (8006ba8 <TIM_Base_SetConfig+0x118>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00b      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a3c      	ldr	r2, [pc, #240]	; (8006bac <TIM_Base_SetConfig+0x11c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d007      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a3b      	ldr	r2, [pc, #236]	; (8006bb0 <TIM_Base_SetConfig+0x120>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d003      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a3a      	ldr	r2, [pc, #232]	; (8006bb4 <TIM_Base_SetConfig+0x124>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d108      	bne.n	8006ae2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a2f      	ldr	r2, [pc, #188]	; (8006ba4 <TIM_Base_SetConfig+0x114>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d01f      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af0:	d01b      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2c      	ldr	r2, [pc, #176]	; (8006ba8 <TIM_Base_SetConfig+0x118>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d017      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a2b      	ldr	r2, [pc, #172]	; (8006bac <TIM_Base_SetConfig+0x11c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d013      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a2a      	ldr	r2, [pc, #168]	; (8006bb0 <TIM_Base_SetConfig+0x120>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00f      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a29      	ldr	r2, [pc, #164]	; (8006bb4 <TIM_Base_SetConfig+0x124>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00b      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a28      	ldr	r2, [pc, #160]	; (8006bb8 <TIM_Base_SetConfig+0x128>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d007      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a27      	ldr	r2, [pc, #156]	; (8006bbc <TIM_Base_SetConfig+0x12c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d003      	beq.n	8006b2a <TIM_Base_SetConfig+0x9a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a26      	ldr	r2, [pc, #152]	; (8006bc0 <TIM_Base_SetConfig+0x130>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d108      	bne.n	8006b3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a10      	ldr	r2, [pc, #64]	; (8006ba4 <TIM_Base_SetConfig+0x114>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00f      	beq.n	8006b88 <TIM_Base_SetConfig+0xf8>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a12      	ldr	r2, [pc, #72]	; (8006bb4 <TIM_Base_SetConfig+0x124>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d00b      	beq.n	8006b88 <TIM_Base_SetConfig+0xf8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a11      	ldr	r2, [pc, #68]	; (8006bb8 <TIM_Base_SetConfig+0x128>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d007      	beq.n	8006b88 <TIM_Base_SetConfig+0xf8>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a10      	ldr	r2, [pc, #64]	; (8006bbc <TIM_Base_SetConfig+0x12c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d003      	beq.n	8006b88 <TIM_Base_SetConfig+0xf8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a0f      	ldr	r2, [pc, #60]	; (8006bc0 <TIM_Base_SetConfig+0x130>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d103      	bne.n	8006b90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	691a      	ldr	r2, [r3, #16]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	615a      	str	r2, [r3, #20]
}
 8006b96:	bf00      	nop
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40012c00 	.word	0x40012c00
 8006ba8:	40000400 	.word	0x40000400
 8006bac:	40000800 	.word	0x40000800
 8006bb0:	40000c00 	.word	0x40000c00
 8006bb4:	40013400 	.word	0x40013400
 8006bb8:	40014000 	.word	0x40014000
 8006bbc:	40014400 	.word	0x40014400
 8006bc0:	40014800 	.word	0x40014800

08006bc4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	f023 0201 	bic.w	r2, r3, #1
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4a26      	ldr	r2, [pc, #152]	; (8006c88 <TIM_TI1_SetConfig+0xc4>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d017      	beq.n	8006c22 <TIM_TI1_SetConfig+0x5e>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf8:	d013      	beq.n	8006c22 <TIM_TI1_SetConfig+0x5e>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4a23      	ldr	r2, [pc, #140]	; (8006c8c <TIM_TI1_SetConfig+0xc8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00f      	beq.n	8006c22 <TIM_TI1_SetConfig+0x5e>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4a22      	ldr	r2, [pc, #136]	; (8006c90 <TIM_TI1_SetConfig+0xcc>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00b      	beq.n	8006c22 <TIM_TI1_SetConfig+0x5e>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4a21      	ldr	r2, [pc, #132]	; (8006c94 <TIM_TI1_SetConfig+0xd0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d007      	beq.n	8006c22 <TIM_TI1_SetConfig+0x5e>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4a20      	ldr	r2, [pc, #128]	; (8006c98 <TIM_TI1_SetConfig+0xd4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d003      	beq.n	8006c22 <TIM_TI1_SetConfig+0x5e>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	4a1f      	ldr	r2, [pc, #124]	; (8006c9c <TIM_TI1_SetConfig+0xd8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d101      	bne.n	8006c26 <TIM_TI1_SetConfig+0x62>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <TIM_TI1_SetConfig+0x64>
 8006c26:	2300      	movs	r3, #0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d008      	beq.n	8006c3e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f023 0303 	bic.w	r3, r3, #3
 8006c32:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	e003      	b.n	8006c46 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f043 0301 	orr.w	r3, r3, #1
 8006c44:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f023 030a 	bic.w	r3, r3, #10
 8006c60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	f003 030a 	and.w	r3, r3, #10
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	621a      	str	r2, [r3, #32]
}
 8006c7a:	bf00      	nop
 8006c7c:	371c      	adds	r7, #28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	40012c00 	.word	0x40012c00
 8006c8c:	40000400 	.word	0x40000400
 8006c90:	40000800 	.word	0x40000800
 8006c94:	40000c00 	.word	0x40000c00
 8006c98:	40013400 	.word	0x40013400
 8006c9c:	40014000 	.word	0x40014000

08006ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f023 0201 	bic.w	r2, r3, #1
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f023 030a 	bic.w	r3, r3, #10
 8006cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	621a      	str	r2, [r3, #32]
}
 8006cf2:	bf00      	nop
 8006cf4:	371c      	adds	r7, #28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b087      	sub	sp, #28
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	607a      	str	r2, [r7, #4]
 8006d0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f023 0210 	bic.w	r2, r3, #16
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	021b      	lsls	r3, r3, #8
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	031b      	lsls	r3, r3, #12
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d50:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	011b      	lsls	r3, r3, #4
 8006d56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	621a      	str	r2, [r3, #32]
}
 8006d6c:	bf00      	nop
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	f023 0210 	bic.w	r2, r3, #16
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	031b      	lsls	r3, r3, #12
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006db4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	011b      	lsls	r3, r3, #4
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	621a      	str	r2, [r3, #32]
}
 8006dcc:	bf00      	nop
 8006dce:	371c      	adds	r7, #28
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f023 0303 	bic.w	r3, r3, #3
 8006e04:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e14:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006e28:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	621a      	str	r2, [r3, #32]
}
 8006e44:	bf00      	nop
 8006e46:	371c      	adds	r7, #28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
 8006e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e8e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	031b      	lsls	r3, r3, #12
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006ea2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	031b      	lsls	r3, r3, #12
 8006ea8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	621a      	str	r2, [r3, #32]
}
 8006ebe:	bf00      	nop
 8006ec0:	371c      	adds	r7, #28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	f043 0307 	orr.w	r3, r3, #7
 8006eec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	609a      	str	r2, [r3, #8]
}
 8006ef4:	bf00      	nop
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	021a      	lsls	r2, r3, #8
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	431a      	orrs	r2, r3
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	609a      	str	r2, [r3, #8]
}
 8006f34:	bf00      	nop
 8006f36:	371c      	adds	r7, #28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f003 031f 	and.w	r3, r3, #31
 8006f52:	2201      	movs	r2, #1
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a1a      	ldr	r2, [r3, #32]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	43db      	mvns	r3, r3
 8006f62:	401a      	ands	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a1a      	ldr	r2, [r3, #32]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f003 031f 	and.w	r3, r3, #31
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	fa01 f303 	lsl.w	r3, r1, r3
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	621a      	str	r2, [r3, #32]
}
 8006f7e:	bf00      	nop
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
	...

08006f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d101      	bne.n	8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e068      	b.n	8007076 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a2e      	ldr	r2, [pc, #184]	; (8007084 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d004      	beq.n	8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a2d      	ldr	r2, [pc, #180]	; (8007088 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d108      	bne.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a1e      	ldr	r2, [pc, #120]	; (8007084 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d01d      	beq.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007016:	d018      	beq.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1b      	ldr	r2, [pc, #108]	; (800708c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d013      	beq.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a1a      	ldr	r2, [pc, #104]	; (8007090 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00e      	beq.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a18      	ldr	r2, [pc, #96]	; (8007094 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d009      	beq.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a13      	ldr	r2, [pc, #76]	; (8007088 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d004      	beq.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a14      	ldr	r2, [pc, #80]	; (8007098 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d10c      	bne.n	8007064 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	4313      	orrs	r3, r2
 800705a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	40012c00 	.word	0x40012c00
 8007088:	40013400 	.word	0x40013400
 800708c:	40000400 	.word	0x40000400
 8007090:	40000800 	.word	0x40000800
 8007094:	40000c00 	.word	0x40000c00
 8007098:	40014000 	.word	0x40014000

0800709c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e042      	b.n	8007170 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d106      	bne.n	8007102 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7fa fe9f 	bl	8001e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2224      	movs	r2, #36	; 0x24
 8007106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0201 	bic.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fbb4 	bl	8007890 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f8b5 	bl	8007298 <UART_SetConfig>
 800712e:	4603      	mov	r3, r0
 8007130:	2b01      	cmp	r3, #1
 8007132:	d101      	bne.n	8007138 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e01b      	b.n	8007170 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007146:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689a      	ldr	r2, [r3, #8]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007156:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0201 	orr.w	r2, r2, #1
 8007166:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fc33 	bl	80079d4 <UART_CheckIdleState>
 800716e:	4603      	mov	r3, r0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b08a      	sub	sp, #40	; 0x28
 800717c:	af02      	add	r7, sp, #8
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	4613      	mov	r3, r2
 8007186:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718e:	2b20      	cmp	r3, #32
 8007190:	d17c      	bne.n	800728c <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <HAL_UART_Transmit+0x26>
 8007198:	88fb      	ldrh	r3, [r7, #6]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e075      	b.n	800728e <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2221      	movs	r2, #33	; 0x21
 80071ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071b2:	f7fb fadb 	bl	800276c <HAL_GetTick>
 80071b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	88fa      	ldrh	r2, [r7, #6]
 80071bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	88fa      	ldrh	r2, [r7, #6]
 80071c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d0:	d108      	bne.n	80071e4 <HAL_UART_Transmit+0x6c>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d104      	bne.n	80071e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	61bb      	str	r3, [r7, #24]
 80071e2:	e003      	b.n	80071ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071ec:	e031      	b.n	8007252 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2200      	movs	r2, #0
 80071f6:	2180      	movs	r1, #128	; 0x80
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 fc95 	bl	8007b28 <UART_WaitOnFlagUntilTimeout>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2220      	movs	r2, #32
 8007208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e03e      	b.n	800728e <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10b      	bne.n	800722e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	881a      	ldrh	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007222:	b292      	uxth	r2, r2
 8007224:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	3302      	adds	r3, #2
 800722a:	61bb      	str	r3, [r7, #24]
 800722c:	e008      	b.n	8007240 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	781a      	ldrb	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	b292      	uxth	r2, r2
 8007238:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	3301      	adds	r3, #1
 800723e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b01      	subs	r3, #1
 800724a:	b29a      	uxth	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1c7      	bne.n	80071ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2200      	movs	r2, #0
 8007266:	2140      	movs	r1, #64	; 0x40
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 fc5d 	bl	8007b28 <UART_WaitOnFlagUntilTimeout>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d005      	beq.n	8007280 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2220      	movs	r2, #32
 8007278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e006      	b.n	800728e <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	e000      	b.n	800728e <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800728c:	2302      	movs	r3, #2
  }
}
 800728e:	4618      	mov	r0, r3
 8007290:	3720      	adds	r7, #32
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
	...

08007298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800729c:	b08c      	sub	sp, #48	; 0x30
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	431a      	orrs	r2, r3
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	431a      	orrs	r2, r3
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	4313      	orrs	r3, r2
 80072be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	4baa      	ldr	r3, [pc, #680]	; (8007570 <UART_SetConfig+0x2d8>)
 80072c8:	4013      	ands	r3, r2
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	6812      	ldr	r2, [r2, #0]
 80072ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072d0:	430b      	orrs	r3, r1
 80072d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a9f      	ldr	r2, [pc, #636]	; (8007574 <UART_SetConfig+0x2dc>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d004      	beq.n	8007304 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007300:	4313      	orrs	r3, r2
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800730e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	6812      	ldr	r2, [r2, #0]
 8007316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007318:	430b      	orrs	r3, r1
 800731a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007322:	f023 010f 	bic.w	r1, r3, #15
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a90      	ldr	r2, [pc, #576]	; (8007578 <UART_SetConfig+0x2e0>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d125      	bne.n	8007388 <UART_SetConfig+0xf0>
 800733c:	4b8f      	ldr	r3, [pc, #572]	; (800757c <UART_SetConfig+0x2e4>)
 800733e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	2b03      	cmp	r3, #3
 8007348:	d81a      	bhi.n	8007380 <UART_SetConfig+0xe8>
 800734a:	a201      	add	r2, pc, #4	; (adr r2, 8007350 <UART_SetConfig+0xb8>)
 800734c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007350:	08007361 	.word	0x08007361
 8007354:	08007371 	.word	0x08007371
 8007358:	08007369 	.word	0x08007369
 800735c:	08007379 	.word	0x08007379
 8007360:	2301      	movs	r3, #1
 8007362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007366:	e116      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007368:	2302      	movs	r3, #2
 800736a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800736e:	e112      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007370:	2304      	movs	r3, #4
 8007372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007376:	e10e      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007378:	2308      	movs	r3, #8
 800737a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800737e:	e10a      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007380:	2310      	movs	r3, #16
 8007382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007386:	e106      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a7c      	ldr	r2, [pc, #496]	; (8007580 <UART_SetConfig+0x2e8>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d138      	bne.n	8007404 <UART_SetConfig+0x16c>
 8007392:	4b7a      	ldr	r3, [pc, #488]	; (800757c <UART_SetConfig+0x2e4>)
 8007394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007398:	f003 030c 	and.w	r3, r3, #12
 800739c:	2b0c      	cmp	r3, #12
 800739e:	d82d      	bhi.n	80073fc <UART_SetConfig+0x164>
 80073a0:	a201      	add	r2, pc, #4	; (adr r2, 80073a8 <UART_SetConfig+0x110>)
 80073a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a6:	bf00      	nop
 80073a8:	080073dd 	.word	0x080073dd
 80073ac:	080073fd 	.word	0x080073fd
 80073b0:	080073fd 	.word	0x080073fd
 80073b4:	080073fd 	.word	0x080073fd
 80073b8:	080073ed 	.word	0x080073ed
 80073bc:	080073fd 	.word	0x080073fd
 80073c0:	080073fd 	.word	0x080073fd
 80073c4:	080073fd 	.word	0x080073fd
 80073c8:	080073e5 	.word	0x080073e5
 80073cc:	080073fd 	.word	0x080073fd
 80073d0:	080073fd 	.word	0x080073fd
 80073d4:	080073fd 	.word	0x080073fd
 80073d8:	080073f5 	.word	0x080073f5
 80073dc:	2300      	movs	r3, #0
 80073de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073e2:	e0d8      	b.n	8007596 <UART_SetConfig+0x2fe>
 80073e4:	2302      	movs	r3, #2
 80073e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ea:	e0d4      	b.n	8007596 <UART_SetConfig+0x2fe>
 80073ec:	2304      	movs	r3, #4
 80073ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073f2:	e0d0      	b.n	8007596 <UART_SetConfig+0x2fe>
 80073f4:	2308      	movs	r3, #8
 80073f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073fa:	e0cc      	b.n	8007596 <UART_SetConfig+0x2fe>
 80073fc:	2310      	movs	r3, #16
 80073fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007402:	e0c8      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a5e      	ldr	r2, [pc, #376]	; (8007584 <UART_SetConfig+0x2ec>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d125      	bne.n	800745a <UART_SetConfig+0x1c2>
 800740e:	4b5b      	ldr	r3, [pc, #364]	; (800757c <UART_SetConfig+0x2e4>)
 8007410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007414:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007418:	2b30      	cmp	r3, #48	; 0x30
 800741a:	d016      	beq.n	800744a <UART_SetConfig+0x1b2>
 800741c:	2b30      	cmp	r3, #48	; 0x30
 800741e:	d818      	bhi.n	8007452 <UART_SetConfig+0x1ba>
 8007420:	2b20      	cmp	r3, #32
 8007422:	d00a      	beq.n	800743a <UART_SetConfig+0x1a2>
 8007424:	2b20      	cmp	r3, #32
 8007426:	d814      	bhi.n	8007452 <UART_SetConfig+0x1ba>
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <UART_SetConfig+0x19a>
 800742c:	2b10      	cmp	r3, #16
 800742e:	d008      	beq.n	8007442 <UART_SetConfig+0x1aa>
 8007430:	e00f      	b.n	8007452 <UART_SetConfig+0x1ba>
 8007432:	2300      	movs	r3, #0
 8007434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007438:	e0ad      	b.n	8007596 <UART_SetConfig+0x2fe>
 800743a:	2302      	movs	r3, #2
 800743c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007440:	e0a9      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007442:	2304      	movs	r3, #4
 8007444:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007448:	e0a5      	b.n	8007596 <UART_SetConfig+0x2fe>
 800744a:	2308      	movs	r3, #8
 800744c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007450:	e0a1      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007452:	2310      	movs	r3, #16
 8007454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007458:	e09d      	b.n	8007596 <UART_SetConfig+0x2fe>
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a4a      	ldr	r2, [pc, #296]	; (8007588 <UART_SetConfig+0x2f0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d125      	bne.n	80074b0 <UART_SetConfig+0x218>
 8007464:	4b45      	ldr	r3, [pc, #276]	; (800757c <UART_SetConfig+0x2e4>)
 8007466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800746a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800746e:	2bc0      	cmp	r3, #192	; 0xc0
 8007470:	d016      	beq.n	80074a0 <UART_SetConfig+0x208>
 8007472:	2bc0      	cmp	r3, #192	; 0xc0
 8007474:	d818      	bhi.n	80074a8 <UART_SetConfig+0x210>
 8007476:	2b80      	cmp	r3, #128	; 0x80
 8007478:	d00a      	beq.n	8007490 <UART_SetConfig+0x1f8>
 800747a:	2b80      	cmp	r3, #128	; 0x80
 800747c:	d814      	bhi.n	80074a8 <UART_SetConfig+0x210>
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <UART_SetConfig+0x1f0>
 8007482:	2b40      	cmp	r3, #64	; 0x40
 8007484:	d008      	beq.n	8007498 <UART_SetConfig+0x200>
 8007486:	e00f      	b.n	80074a8 <UART_SetConfig+0x210>
 8007488:	2300      	movs	r3, #0
 800748a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800748e:	e082      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007490:	2302      	movs	r3, #2
 8007492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007496:	e07e      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007498:	2304      	movs	r3, #4
 800749a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800749e:	e07a      	b.n	8007596 <UART_SetConfig+0x2fe>
 80074a0:	2308      	movs	r3, #8
 80074a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074a6:	e076      	b.n	8007596 <UART_SetConfig+0x2fe>
 80074a8:	2310      	movs	r3, #16
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ae:	e072      	b.n	8007596 <UART_SetConfig+0x2fe>
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a35      	ldr	r2, [pc, #212]	; (800758c <UART_SetConfig+0x2f4>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d12a      	bne.n	8007510 <UART_SetConfig+0x278>
 80074ba:	4b30      	ldr	r3, [pc, #192]	; (800757c <UART_SetConfig+0x2e4>)
 80074bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074c8:	d01a      	beq.n	8007500 <UART_SetConfig+0x268>
 80074ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074ce:	d81b      	bhi.n	8007508 <UART_SetConfig+0x270>
 80074d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074d4:	d00c      	beq.n	80074f0 <UART_SetConfig+0x258>
 80074d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074da:	d815      	bhi.n	8007508 <UART_SetConfig+0x270>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <UART_SetConfig+0x250>
 80074e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e4:	d008      	beq.n	80074f8 <UART_SetConfig+0x260>
 80074e6:	e00f      	b.n	8007508 <UART_SetConfig+0x270>
 80074e8:	2300      	movs	r3, #0
 80074ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ee:	e052      	b.n	8007596 <UART_SetConfig+0x2fe>
 80074f0:	2302      	movs	r3, #2
 80074f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074f6:	e04e      	b.n	8007596 <UART_SetConfig+0x2fe>
 80074f8:	2304      	movs	r3, #4
 80074fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074fe:	e04a      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007500:	2308      	movs	r3, #8
 8007502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007506:	e046      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007508:	2310      	movs	r3, #16
 800750a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800750e:	e042      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a17      	ldr	r2, [pc, #92]	; (8007574 <UART_SetConfig+0x2dc>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d13a      	bne.n	8007590 <UART_SetConfig+0x2f8>
 800751a:	4b18      	ldr	r3, [pc, #96]	; (800757c <UART_SetConfig+0x2e4>)
 800751c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007520:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007524:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007528:	d01a      	beq.n	8007560 <UART_SetConfig+0x2c8>
 800752a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800752e:	d81b      	bhi.n	8007568 <UART_SetConfig+0x2d0>
 8007530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007534:	d00c      	beq.n	8007550 <UART_SetConfig+0x2b8>
 8007536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800753a:	d815      	bhi.n	8007568 <UART_SetConfig+0x2d0>
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <UART_SetConfig+0x2b0>
 8007540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007544:	d008      	beq.n	8007558 <UART_SetConfig+0x2c0>
 8007546:	e00f      	b.n	8007568 <UART_SetConfig+0x2d0>
 8007548:	2300      	movs	r3, #0
 800754a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800754e:	e022      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007550:	2302      	movs	r3, #2
 8007552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007556:	e01e      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007558:	2304      	movs	r3, #4
 800755a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800755e:	e01a      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007560:	2308      	movs	r3, #8
 8007562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007566:	e016      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007568:	2310      	movs	r3, #16
 800756a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800756e:	e012      	b.n	8007596 <UART_SetConfig+0x2fe>
 8007570:	cfff69f3 	.word	0xcfff69f3
 8007574:	40008000 	.word	0x40008000
 8007578:	40013800 	.word	0x40013800
 800757c:	40021000 	.word	0x40021000
 8007580:	40004400 	.word	0x40004400
 8007584:	40004800 	.word	0x40004800
 8007588:	40004c00 	.word	0x40004c00
 800758c:	40005000 	.word	0x40005000
 8007590:	2310      	movs	r3, #16
 8007592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4aae      	ldr	r2, [pc, #696]	; (8007854 <UART_SetConfig+0x5bc>)
 800759c:	4293      	cmp	r3, r2
 800759e:	f040 8097 	bne.w	80076d0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075a6:	2b08      	cmp	r3, #8
 80075a8:	d823      	bhi.n	80075f2 <UART_SetConfig+0x35a>
 80075aa:	a201      	add	r2, pc, #4	; (adr r2, 80075b0 <UART_SetConfig+0x318>)
 80075ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b0:	080075d5 	.word	0x080075d5
 80075b4:	080075f3 	.word	0x080075f3
 80075b8:	080075dd 	.word	0x080075dd
 80075bc:	080075f3 	.word	0x080075f3
 80075c0:	080075e3 	.word	0x080075e3
 80075c4:	080075f3 	.word	0x080075f3
 80075c8:	080075f3 	.word	0x080075f3
 80075cc:	080075f3 	.word	0x080075f3
 80075d0:	080075eb 	.word	0x080075eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075d4:	f7fd f826 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 80075d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075da:	e010      	b.n	80075fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075dc:	4b9e      	ldr	r3, [pc, #632]	; (8007858 <UART_SetConfig+0x5c0>)
 80075de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075e0:	e00d      	b.n	80075fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075e2:	f7fc ff87 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80075e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075e8:	e009      	b.n	80075fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075f0:	e005      	b.n	80075fe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 8130 	beq.w	8007866 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	4a94      	ldr	r2, [pc, #592]	; (800785c <UART_SetConfig+0x5c4>)
 800760c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007610:	461a      	mov	r2, r3
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	fbb3 f3f2 	udiv	r3, r3, r2
 8007618:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	4613      	mov	r3, r2
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	4413      	add	r3, r2
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	429a      	cmp	r2, r3
 8007628:	d305      	bcc.n	8007636 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	429a      	cmp	r2, r3
 8007634:	d903      	bls.n	800763e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800763c:	e113      	b.n	8007866 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	2200      	movs	r2, #0
 8007642:	60bb      	str	r3, [r7, #8]
 8007644:	60fa      	str	r2, [r7, #12]
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	4a84      	ldr	r2, [pc, #528]	; (800785c <UART_SetConfig+0x5c4>)
 800764c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007650:	b29b      	uxth	r3, r3
 8007652:	2200      	movs	r2, #0
 8007654:	603b      	str	r3, [r7, #0]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800765c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007660:	f7f9 fb0a 	bl	8000c78 <__aeabi_uldivmod>
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	4610      	mov	r0, r2
 800766a:	4619      	mov	r1, r3
 800766c:	f04f 0200 	mov.w	r2, #0
 8007670:	f04f 0300 	mov.w	r3, #0
 8007674:	020b      	lsls	r3, r1, #8
 8007676:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800767a:	0202      	lsls	r2, r0, #8
 800767c:	6979      	ldr	r1, [r7, #20]
 800767e:	6849      	ldr	r1, [r1, #4]
 8007680:	0849      	lsrs	r1, r1, #1
 8007682:	2000      	movs	r0, #0
 8007684:	460c      	mov	r4, r1
 8007686:	4605      	mov	r5, r0
 8007688:	eb12 0804 	adds.w	r8, r2, r4
 800768c:	eb43 0905 	adc.w	r9, r3, r5
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	469a      	mov	sl, r3
 8007698:	4693      	mov	fp, r2
 800769a:	4652      	mov	r2, sl
 800769c:	465b      	mov	r3, fp
 800769e:	4640      	mov	r0, r8
 80076a0:	4649      	mov	r1, r9
 80076a2:	f7f9 fae9 	bl	8000c78 <__aeabi_uldivmod>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4613      	mov	r3, r2
 80076ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076b4:	d308      	bcc.n	80076c8 <UART_SetConfig+0x430>
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076bc:	d204      	bcs.n	80076c8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6a3a      	ldr	r2, [r7, #32]
 80076c4:	60da      	str	r2, [r3, #12]
 80076c6:	e0ce      	b.n	8007866 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076ce:	e0ca      	b.n	8007866 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d8:	d166      	bne.n	80077a8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80076da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076de:	2b08      	cmp	r3, #8
 80076e0:	d827      	bhi.n	8007732 <UART_SetConfig+0x49a>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <UART_SetConfig+0x450>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	0800770d 	.word	0x0800770d
 80076ec:	08007715 	.word	0x08007715
 80076f0:	0800771d 	.word	0x0800771d
 80076f4:	08007733 	.word	0x08007733
 80076f8:	08007723 	.word	0x08007723
 80076fc:	08007733 	.word	0x08007733
 8007700:	08007733 	.word	0x08007733
 8007704:	08007733 	.word	0x08007733
 8007708:	0800772b 	.word	0x0800772b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800770c:	f7fc ff8a 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8007710:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007712:	e014      	b.n	800773e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007714:	f7fc ff9c 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 8007718:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800771a:	e010      	b.n	800773e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800771c:	4b4e      	ldr	r3, [pc, #312]	; (8007858 <UART_SetConfig+0x5c0>)
 800771e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007720:	e00d      	b.n	800773e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007722:	f7fc fee7 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 8007726:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007728:	e009      	b.n	800773e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800772a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800772e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007730:	e005      	b.n	800773e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800773c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 8090 	beq.w	8007866 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	4a44      	ldr	r2, [pc, #272]	; (800785c <UART_SetConfig+0x5c4>)
 800774c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007750:	461a      	mov	r2, r3
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	fbb3 f3f2 	udiv	r3, r3, r2
 8007758:	005a      	lsls	r2, r3, #1
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	085b      	lsrs	r3, r3, #1
 8007760:	441a      	add	r2, r3
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	fbb2 f3f3 	udiv	r3, r2, r3
 800776a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	2b0f      	cmp	r3, #15
 8007770:	d916      	bls.n	80077a0 <UART_SetConfig+0x508>
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007778:	d212      	bcs.n	80077a0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	b29b      	uxth	r3, r3
 800777e:	f023 030f 	bic.w	r3, r3, #15
 8007782:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	085b      	lsrs	r3, r3, #1
 8007788:	b29b      	uxth	r3, r3
 800778a:	f003 0307 	and.w	r3, r3, #7
 800778e:	b29a      	uxth	r2, r3
 8007790:	8bfb      	ldrh	r3, [r7, #30]
 8007792:	4313      	orrs	r3, r2
 8007794:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	8bfa      	ldrh	r2, [r7, #30]
 800779c:	60da      	str	r2, [r3, #12]
 800779e:	e062      	b.n	8007866 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80077a6:	e05e      	b.n	8007866 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077ac:	2b08      	cmp	r3, #8
 80077ae:	d828      	bhi.n	8007802 <UART_SetConfig+0x56a>
 80077b0:	a201      	add	r2, pc, #4	; (adr r2, 80077b8 <UART_SetConfig+0x520>)
 80077b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b6:	bf00      	nop
 80077b8:	080077dd 	.word	0x080077dd
 80077bc:	080077e5 	.word	0x080077e5
 80077c0:	080077ed 	.word	0x080077ed
 80077c4:	08007803 	.word	0x08007803
 80077c8:	080077f3 	.word	0x080077f3
 80077cc:	08007803 	.word	0x08007803
 80077d0:	08007803 	.word	0x08007803
 80077d4:	08007803 	.word	0x08007803
 80077d8:	080077fb 	.word	0x080077fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077dc:	f7fc ff22 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 80077e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077e2:	e014      	b.n	800780e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077e4:	f7fc ff34 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 80077e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077ea:	e010      	b.n	800780e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077ec:	4b1a      	ldr	r3, [pc, #104]	; (8007858 <UART_SetConfig+0x5c0>)
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077f0:	e00d      	b.n	800780e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077f2:	f7fc fe7f 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80077f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077f8:	e009      	b.n	800780e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007800:	e005      	b.n	800780e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800780c:	bf00      	nop
    }

    if (pclk != 0U)
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	d028      	beq.n	8007866 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	4a10      	ldr	r2, [pc, #64]	; (800785c <UART_SetConfig+0x5c4>)
 800781a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800781e:	461a      	mov	r2, r3
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	fbb3 f2f2 	udiv	r2, r3, r2
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	085b      	lsrs	r3, r3, #1
 800782c:	441a      	add	r2, r3
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	fbb2 f3f3 	udiv	r3, r2, r3
 8007836:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	2b0f      	cmp	r3, #15
 800783c:	d910      	bls.n	8007860 <UART_SetConfig+0x5c8>
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007844:	d20c      	bcs.n	8007860 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	b29a      	uxth	r2, r3
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	60da      	str	r2, [r3, #12]
 8007850:	e009      	b.n	8007866 <UART_SetConfig+0x5ce>
 8007852:	bf00      	nop
 8007854:	40008000 	.word	0x40008000
 8007858:	00f42400 	.word	0x00f42400
 800785c:	0800a9c8 	.word	0x0800a9c8
      }
      else
      {
        ret = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2201      	movs	r2, #1
 800786a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	2201      	movs	r2, #1
 8007872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2200      	movs	r2, #0
 800787a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2200      	movs	r2, #0
 8007880:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007882:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007886:	4618      	mov	r0, r3
 8007888:	3730      	adds	r7, #48	; 0x30
 800788a:	46bd      	mov	sp, r7
 800788c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789c:	f003 0308 	and.w	r3, r3, #8
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00a      	beq.n	80078ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e0:	f003 0302 	and.w	r3, r3, #2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00a      	beq.n	80078fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007902:	f003 0304 	and.w	r3, r3, #4
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	f003 0310 	and.w	r3, r3, #16
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00a      	beq.n	8007942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	f003 0320 	and.w	r3, r3, #32
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00a      	beq.n	8007964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01a      	beq.n	80079a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800798e:	d10a      	bne.n	80079a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	605a      	str	r2, [r3, #4]
  }
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b098      	sub	sp, #96	; 0x60
 80079d8:	af02      	add	r7, sp, #8
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079e4:	f7fa fec2 	bl	800276c <HAL_GetTick>
 80079e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0308 	and.w	r3, r3, #8
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	d12f      	bne.n	8007a58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a00:	2200      	movs	r2, #0
 8007a02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f88e 	bl	8007b28 <UART_WaitOnFlagUntilTimeout>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d022      	beq.n	8007a58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1a:	e853 3f00 	ldrex	r3, [r3]
 8007a1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a26:	653b      	str	r3, [r7, #80]	; 0x50
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a30:	647b      	str	r3, [r7, #68]	; 0x44
 8007a32:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a38:	e841 2300 	strex	r3, r2, [r1]
 8007a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1e6      	bne.n	8007a12 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e063      	b.n	8007b20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d149      	bne.n	8007afa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f857 	bl	8007b28 <UART_WaitOnFlagUntilTimeout>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d03c      	beq.n	8007afa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8007aa0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e6      	bne.n	8007a80 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f023 0301 	bic.w	r3, r3, #1
 8007ac8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3308      	adds	r3, #8
 8007ad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ad2:	61fa      	str	r2, [r7, #28]
 8007ad4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad6:	69b9      	ldr	r1, [r7, #24]
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	e841 2300 	strex	r3, r2, [r1]
 8007ade:	617b      	str	r3, [r7, #20]
   return(result);
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1e5      	bne.n	8007ab2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2220      	movs	r2, #32
 8007aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e012      	b.n	8007b20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2220      	movs	r2, #32
 8007b06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3758      	adds	r7, #88	; 0x58
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	4613      	mov	r3, r2
 8007b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b38:	e049      	b.n	8007bce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b40:	d045      	beq.n	8007bce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b42:	f7fa fe13 	bl	800276c <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d302      	bcc.n	8007b58 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e048      	b.n	8007bee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0304 	and.w	r3, r3, #4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d031      	beq.n	8007bce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	f003 0308 	and.w	r3, r3, #8
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d110      	bne.n	8007b9a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2208      	movs	r2, #8
 8007b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 f838 	bl	8007bf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2208      	movs	r2, #8
 8007b8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e029      	b.n	8007bee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ba8:	d111      	bne.n	8007bce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 f81e 	bl	8007bf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e00f      	b.n	8007bee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69da      	ldr	r2, [r3, #28]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	bf0c      	ite	eq
 8007bde:	2301      	moveq	r3, #1
 8007be0:	2300      	movne	r3, #0
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	461a      	mov	r2, r3
 8007be6:	79fb      	ldrb	r3, [r7, #7]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d0a6      	beq.n	8007b3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b095      	sub	sp, #84	; 0x54
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c06:	e853 3f00 	ldrex	r3, [r3]
 8007c0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c1c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c1e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c24:	e841 2300 	strex	r3, r2, [r1]
 8007c28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1e6      	bne.n	8007bfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3308      	adds	r3, #8
 8007c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c46:	f023 0301 	bic.w	r3, r3, #1
 8007c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3308      	adds	r3, #8
 8007c52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e3      	bne.n	8007c30 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d118      	bne.n	8007ca2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	f023 0310 	bic.w	r3, r3, #16
 8007c84:	647b      	str	r3, [r7, #68]	; 0x44
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c8e:	61bb      	str	r3, [r7, #24]
 8007c90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c92:	6979      	ldr	r1, [r7, #20]
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	e841 2300 	strex	r3, r2, [r1]
 8007c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1e6      	bne.n	8007c70 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007cb6:	bf00      	nop
 8007cb8:	3754      	adds	r7, #84	; 0x54
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b085      	sub	sp, #20
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d101      	bne.n	8007cd8 <HAL_UARTEx_DisableFifoMode+0x16>
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	e027      	b.n	8007d28 <HAL_UARTEx_DisableFifoMode+0x66>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2224      	movs	r2, #36	; 0x24
 8007ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 0201 	bic.w	r2, r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d101      	bne.n	8007d4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	e02d      	b.n	8007da8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2224      	movs	r2, #36	; 0x24
 8007d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 0201 	bic.w	r2, r2, #1
 8007d72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f84f 	bl	8007e2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d101      	bne.n	8007dc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	e02d      	b.n	8007e24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2224      	movs	r2, #36	; 0x24
 8007dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 0201 	bic.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f811 	bl	8007e2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d108      	bne.n	8007e4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e4c:	e031      	b.n	8007eb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e4e:	2308      	movs	r3, #8
 8007e50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e52:	2308      	movs	r3, #8
 8007e54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	0e5b      	lsrs	r3, r3, #25
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	f003 0307 	and.w	r3, r3, #7
 8007e64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	0f5b      	lsrs	r3, r3, #29
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	f003 0307 	and.w	r3, r3, #7
 8007e74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	7b3a      	ldrb	r2, [r7, #12]
 8007e7a:	4911      	ldr	r1, [pc, #68]	; (8007ec0 <UARTEx_SetNbDataToProcess+0x94>)
 8007e7c:	5c8a      	ldrb	r2, [r1, r2]
 8007e7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e82:	7b3a      	ldrb	r2, [r7, #12]
 8007e84:	490f      	ldr	r1, [pc, #60]	; (8007ec4 <UARTEx_SetNbDataToProcess+0x98>)
 8007e86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e88:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	7b7a      	ldrb	r2, [r7, #13]
 8007e98:	4909      	ldr	r1, [pc, #36]	; (8007ec0 <UARTEx_SetNbDataToProcess+0x94>)
 8007e9a:	5c8a      	ldrb	r2, [r1, r2]
 8007e9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ea0:	7b7a      	ldrb	r2, [r7, #13]
 8007ea2:	4908      	ldr	r1, [pc, #32]	; (8007ec4 <UARTEx_SetNbDataToProcess+0x98>)
 8007ea4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ea6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007eb2:	bf00      	nop
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	0800a9e0 	.word	0x0800a9e0
 8007ec4:	0800a9e8 	.word	0x0800a9e8

08007ec8 <__cvt>:
 8007ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ecc:	ec55 4b10 	vmov	r4, r5, d0
 8007ed0:	2d00      	cmp	r5, #0
 8007ed2:	460e      	mov	r6, r1
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	462b      	mov	r3, r5
 8007ed8:	bfbb      	ittet	lt
 8007eda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ede:	461d      	movlt	r5, r3
 8007ee0:	2300      	movge	r3, #0
 8007ee2:	232d      	movlt	r3, #45	; 0x2d
 8007ee4:	700b      	strb	r3, [r1, #0]
 8007ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ee8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007eec:	4691      	mov	r9, r2
 8007eee:	f023 0820 	bic.w	r8, r3, #32
 8007ef2:	bfbc      	itt	lt
 8007ef4:	4622      	movlt	r2, r4
 8007ef6:	4614      	movlt	r4, r2
 8007ef8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007efc:	d005      	beq.n	8007f0a <__cvt+0x42>
 8007efe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f02:	d100      	bne.n	8007f06 <__cvt+0x3e>
 8007f04:	3601      	adds	r6, #1
 8007f06:	2102      	movs	r1, #2
 8007f08:	e000      	b.n	8007f0c <__cvt+0x44>
 8007f0a:	2103      	movs	r1, #3
 8007f0c:	ab03      	add	r3, sp, #12
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	ab02      	add	r3, sp, #8
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	ec45 4b10 	vmov	d0, r4, r5
 8007f18:	4653      	mov	r3, sl
 8007f1a:	4632      	mov	r2, r6
 8007f1c:	f000 ff4c 	bl	8008db8 <_dtoa_r>
 8007f20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f24:	4607      	mov	r7, r0
 8007f26:	d102      	bne.n	8007f2e <__cvt+0x66>
 8007f28:	f019 0f01 	tst.w	r9, #1
 8007f2c:	d022      	beq.n	8007f74 <__cvt+0xac>
 8007f2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f32:	eb07 0906 	add.w	r9, r7, r6
 8007f36:	d110      	bne.n	8007f5a <__cvt+0x92>
 8007f38:	783b      	ldrb	r3, [r7, #0]
 8007f3a:	2b30      	cmp	r3, #48	; 0x30
 8007f3c:	d10a      	bne.n	8007f54 <__cvt+0x8c>
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2300      	movs	r3, #0
 8007f42:	4620      	mov	r0, r4
 8007f44:	4629      	mov	r1, r5
 8007f46:	f7f8 fdd7 	bl	8000af8 <__aeabi_dcmpeq>
 8007f4a:	b918      	cbnz	r0, 8007f54 <__cvt+0x8c>
 8007f4c:	f1c6 0601 	rsb	r6, r6, #1
 8007f50:	f8ca 6000 	str.w	r6, [sl]
 8007f54:	f8da 3000 	ldr.w	r3, [sl]
 8007f58:	4499      	add	r9, r3
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4620      	mov	r0, r4
 8007f60:	4629      	mov	r1, r5
 8007f62:	f7f8 fdc9 	bl	8000af8 <__aeabi_dcmpeq>
 8007f66:	b108      	cbz	r0, 8007f6c <__cvt+0xa4>
 8007f68:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f6c:	2230      	movs	r2, #48	; 0x30
 8007f6e:	9b03      	ldr	r3, [sp, #12]
 8007f70:	454b      	cmp	r3, r9
 8007f72:	d307      	bcc.n	8007f84 <__cvt+0xbc>
 8007f74:	9b03      	ldr	r3, [sp, #12]
 8007f76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f78:	1bdb      	subs	r3, r3, r7
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	6013      	str	r3, [r2, #0]
 8007f7e:	b004      	add	sp, #16
 8007f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f84:	1c59      	adds	r1, r3, #1
 8007f86:	9103      	str	r1, [sp, #12]
 8007f88:	701a      	strb	r2, [r3, #0]
 8007f8a:	e7f0      	b.n	8007f6e <__cvt+0xa6>

08007f8c <__exponent>:
 8007f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2900      	cmp	r1, #0
 8007f92:	bfb8      	it	lt
 8007f94:	4249      	neglt	r1, r1
 8007f96:	f803 2b02 	strb.w	r2, [r3], #2
 8007f9a:	bfb4      	ite	lt
 8007f9c:	222d      	movlt	r2, #45	; 0x2d
 8007f9e:	222b      	movge	r2, #43	; 0x2b
 8007fa0:	2909      	cmp	r1, #9
 8007fa2:	7042      	strb	r2, [r0, #1]
 8007fa4:	dd2a      	ble.n	8007ffc <__exponent+0x70>
 8007fa6:	f10d 0207 	add.w	r2, sp, #7
 8007faa:	4617      	mov	r7, r2
 8007fac:	260a      	movs	r6, #10
 8007fae:	4694      	mov	ip, r2
 8007fb0:	fb91 f5f6 	sdiv	r5, r1, r6
 8007fb4:	fb06 1415 	mls	r4, r6, r5, r1
 8007fb8:	3430      	adds	r4, #48	; 0x30
 8007fba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	2c63      	cmp	r4, #99	; 0x63
 8007fc2:	f102 32ff 	add.w	r2, r2, #4294967295
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	dcf1      	bgt.n	8007fae <__exponent+0x22>
 8007fca:	3130      	adds	r1, #48	; 0x30
 8007fcc:	f1ac 0402 	sub.w	r4, ip, #2
 8007fd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007fd4:	1c41      	adds	r1, r0, #1
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	42ba      	cmp	r2, r7
 8007fda:	d30a      	bcc.n	8007ff2 <__exponent+0x66>
 8007fdc:	f10d 0209 	add.w	r2, sp, #9
 8007fe0:	eba2 020c 	sub.w	r2, r2, ip
 8007fe4:	42bc      	cmp	r4, r7
 8007fe6:	bf88      	it	hi
 8007fe8:	2200      	movhi	r2, #0
 8007fea:	4413      	add	r3, r2
 8007fec:	1a18      	subs	r0, r3, r0
 8007fee:	b003      	add	sp, #12
 8007ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007ff6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007ffa:	e7ed      	b.n	8007fd8 <__exponent+0x4c>
 8007ffc:	2330      	movs	r3, #48	; 0x30
 8007ffe:	3130      	adds	r1, #48	; 0x30
 8008000:	7083      	strb	r3, [r0, #2]
 8008002:	70c1      	strb	r1, [r0, #3]
 8008004:	1d03      	adds	r3, r0, #4
 8008006:	e7f1      	b.n	8007fec <__exponent+0x60>

08008008 <_printf_float>:
 8008008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800c:	ed2d 8b02 	vpush	{d8}
 8008010:	b08d      	sub	sp, #52	; 0x34
 8008012:	460c      	mov	r4, r1
 8008014:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008018:	4616      	mov	r6, r2
 800801a:	461f      	mov	r7, r3
 800801c:	4605      	mov	r5, r0
 800801e:	f000 fdc9 	bl	8008bb4 <_localeconv_r>
 8008022:	f8d0 a000 	ldr.w	sl, [r0]
 8008026:	4650      	mov	r0, sl
 8008028:	f7f8 f93a 	bl	80002a0 <strlen>
 800802c:	2300      	movs	r3, #0
 800802e:	930a      	str	r3, [sp, #40]	; 0x28
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	9305      	str	r3, [sp, #20]
 8008034:	f8d8 3000 	ldr.w	r3, [r8]
 8008038:	f894 b018 	ldrb.w	fp, [r4, #24]
 800803c:	3307      	adds	r3, #7
 800803e:	f023 0307 	bic.w	r3, r3, #7
 8008042:	f103 0208 	add.w	r2, r3, #8
 8008046:	f8c8 2000 	str.w	r2, [r8]
 800804a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800804e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008052:	9307      	str	r3, [sp, #28]
 8008054:	f8cd 8018 	str.w	r8, [sp, #24]
 8008058:	ee08 0a10 	vmov	s16, r0
 800805c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008064:	4b9e      	ldr	r3, [pc, #632]	; (80082e0 <_printf_float+0x2d8>)
 8008066:	f04f 32ff 	mov.w	r2, #4294967295
 800806a:	f7f8 fd77 	bl	8000b5c <__aeabi_dcmpun>
 800806e:	bb88      	cbnz	r0, 80080d4 <_printf_float+0xcc>
 8008070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008074:	4b9a      	ldr	r3, [pc, #616]	; (80082e0 <_printf_float+0x2d8>)
 8008076:	f04f 32ff 	mov.w	r2, #4294967295
 800807a:	f7f8 fd51 	bl	8000b20 <__aeabi_dcmple>
 800807e:	bb48      	cbnz	r0, 80080d4 <_printf_float+0xcc>
 8008080:	2200      	movs	r2, #0
 8008082:	2300      	movs	r3, #0
 8008084:	4640      	mov	r0, r8
 8008086:	4649      	mov	r1, r9
 8008088:	f7f8 fd40 	bl	8000b0c <__aeabi_dcmplt>
 800808c:	b110      	cbz	r0, 8008094 <_printf_float+0x8c>
 800808e:	232d      	movs	r3, #45	; 0x2d
 8008090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008094:	4a93      	ldr	r2, [pc, #588]	; (80082e4 <_printf_float+0x2dc>)
 8008096:	4b94      	ldr	r3, [pc, #592]	; (80082e8 <_printf_float+0x2e0>)
 8008098:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800809c:	bf94      	ite	ls
 800809e:	4690      	movls	r8, r2
 80080a0:	4698      	movhi	r8, r3
 80080a2:	2303      	movs	r3, #3
 80080a4:	6123      	str	r3, [r4, #16]
 80080a6:	9b05      	ldr	r3, [sp, #20]
 80080a8:	f023 0304 	bic.w	r3, r3, #4
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	f04f 0900 	mov.w	r9, #0
 80080b2:	9700      	str	r7, [sp, #0]
 80080b4:	4633      	mov	r3, r6
 80080b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80080b8:	4621      	mov	r1, r4
 80080ba:	4628      	mov	r0, r5
 80080bc:	f000 f9da 	bl	8008474 <_printf_common>
 80080c0:	3001      	adds	r0, #1
 80080c2:	f040 8090 	bne.w	80081e6 <_printf_float+0x1de>
 80080c6:	f04f 30ff 	mov.w	r0, #4294967295
 80080ca:	b00d      	add	sp, #52	; 0x34
 80080cc:	ecbd 8b02 	vpop	{d8}
 80080d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d4:	4642      	mov	r2, r8
 80080d6:	464b      	mov	r3, r9
 80080d8:	4640      	mov	r0, r8
 80080da:	4649      	mov	r1, r9
 80080dc:	f7f8 fd3e 	bl	8000b5c <__aeabi_dcmpun>
 80080e0:	b140      	cbz	r0, 80080f4 <_printf_float+0xec>
 80080e2:	464b      	mov	r3, r9
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	bfbc      	itt	lt
 80080e8:	232d      	movlt	r3, #45	; 0x2d
 80080ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80080ee:	4a7f      	ldr	r2, [pc, #508]	; (80082ec <_printf_float+0x2e4>)
 80080f0:	4b7f      	ldr	r3, [pc, #508]	; (80082f0 <_printf_float+0x2e8>)
 80080f2:	e7d1      	b.n	8008098 <_printf_float+0x90>
 80080f4:	6863      	ldr	r3, [r4, #4]
 80080f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80080fa:	9206      	str	r2, [sp, #24]
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	d13f      	bne.n	8008180 <_printf_float+0x178>
 8008100:	2306      	movs	r3, #6
 8008102:	6063      	str	r3, [r4, #4]
 8008104:	9b05      	ldr	r3, [sp, #20]
 8008106:	6861      	ldr	r1, [r4, #4]
 8008108:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800810c:	2300      	movs	r3, #0
 800810e:	9303      	str	r3, [sp, #12]
 8008110:	ab0a      	add	r3, sp, #40	; 0x28
 8008112:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008116:	ab09      	add	r3, sp, #36	; 0x24
 8008118:	ec49 8b10 	vmov	d0, r8, r9
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	6022      	str	r2, [r4, #0]
 8008120:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008124:	4628      	mov	r0, r5
 8008126:	f7ff fecf 	bl	8007ec8 <__cvt>
 800812a:	9b06      	ldr	r3, [sp, #24]
 800812c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800812e:	2b47      	cmp	r3, #71	; 0x47
 8008130:	4680      	mov	r8, r0
 8008132:	d108      	bne.n	8008146 <_printf_float+0x13e>
 8008134:	1cc8      	adds	r0, r1, #3
 8008136:	db02      	blt.n	800813e <_printf_float+0x136>
 8008138:	6863      	ldr	r3, [r4, #4]
 800813a:	4299      	cmp	r1, r3
 800813c:	dd41      	ble.n	80081c2 <_printf_float+0x1ba>
 800813e:	f1ab 0302 	sub.w	r3, fp, #2
 8008142:	fa5f fb83 	uxtb.w	fp, r3
 8008146:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800814a:	d820      	bhi.n	800818e <_printf_float+0x186>
 800814c:	3901      	subs	r1, #1
 800814e:	465a      	mov	r2, fp
 8008150:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008154:	9109      	str	r1, [sp, #36]	; 0x24
 8008156:	f7ff ff19 	bl	8007f8c <__exponent>
 800815a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800815c:	1813      	adds	r3, r2, r0
 800815e:	2a01      	cmp	r2, #1
 8008160:	4681      	mov	r9, r0
 8008162:	6123      	str	r3, [r4, #16]
 8008164:	dc02      	bgt.n	800816c <_printf_float+0x164>
 8008166:	6822      	ldr	r2, [r4, #0]
 8008168:	07d2      	lsls	r2, r2, #31
 800816a:	d501      	bpl.n	8008170 <_printf_float+0x168>
 800816c:	3301      	adds	r3, #1
 800816e:	6123      	str	r3, [r4, #16]
 8008170:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008174:	2b00      	cmp	r3, #0
 8008176:	d09c      	beq.n	80080b2 <_printf_float+0xaa>
 8008178:	232d      	movs	r3, #45	; 0x2d
 800817a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800817e:	e798      	b.n	80080b2 <_printf_float+0xaa>
 8008180:	9a06      	ldr	r2, [sp, #24]
 8008182:	2a47      	cmp	r2, #71	; 0x47
 8008184:	d1be      	bne.n	8008104 <_printf_float+0xfc>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1bc      	bne.n	8008104 <_printf_float+0xfc>
 800818a:	2301      	movs	r3, #1
 800818c:	e7b9      	b.n	8008102 <_printf_float+0xfa>
 800818e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008192:	d118      	bne.n	80081c6 <_printf_float+0x1be>
 8008194:	2900      	cmp	r1, #0
 8008196:	6863      	ldr	r3, [r4, #4]
 8008198:	dd0b      	ble.n	80081b2 <_printf_float+0x1aa>
 800819a:	6121      	str	r1, [r4, #16]
 800819c:	b913      	cbnz	r3, 80081a4 <_printf_float+0x19c>
 800819e:	6822      	ldr	r2, [r4, #0]
 80081a0:	07d0      	lsls	r0, r2, #31
 80081a2:	d502      	bpl.n	80081aa <_printf_float+0x1a2>
 80081a4:	3301      	adds	r3, #1
 80081a6:	440b      	add	r3, r1
 80081a8:	6123      	str	r3, [r4, #16]
 80081aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80081ac:	f04f 0900 	mov.w	r9, #0
 80081b0:	e7de      	b.n	8008170 <_printf_float+0x168>
 80081b2:	b913      	cbnz	r3, 80081ba <_printf_float+0x1b2>
 80081b4:	6822      	ldr	r2, [r4, #0]
 80081b6:	07d2      	lsls	r2, r2, #31
 80081b8:	d501      	bpl.n	80081be <_printf_float+0x1b6>
 80081ba:	3302      	adds	r3, #2
 80081bc:	e7f4      	b.n	80081a8 <_printf_float+0x1a0>
 80081be:	2301      	movs	r3, #1
 80081c0:	e7f2      	b.n	80081a8 <_printf_float+0x1a0>
 80081c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80081c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c8:	4299      	cmp	r1, r3
 80081ca:	db05      	blt.n	80081d8 <_printf_float+0x1d0>
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	6121      	str	r1, [r4, #16]
 80081d0:	07d8      	lsls	r0, r3, #31
 80081d2:	d5ea      	bpl.n	80081aa <_printf_float+0x1a2>
 80081d4:	1c4b      	adds	r3, r1, #1
 80081d6:	e7e7      	b.n	80081a8 <_printf_float+0x1a0>
 80081d8:	2900      	cmp	r1, #0
 80081da:	bfd4      	ite	le
 80081dc:	f1c1 0202 	rsble	r2, r1, #2
 80081e0:	2201      	movgt	r2, #1
 80081e2:	4413      	add	r3, r2
 80081e4:	e7e0      	b.n	80081a8 <_printf_float+0x1a0>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	055a      	lsls	r2, r3, #21
 80081ea:	d407      	bmi.n	80081fc <_printf_float+0x1f4>
 80081ec:	6923      	ldr	r3, [r4, #16]
 80081ee:	4642      	mov	r2, r8
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b8      	blx	r7
 80081f6:	3001      	adds	r0, #1
 80081f8:	d12c      	bne.n	8008254 <_printf_float+0x24c>
 80081fa:	e764      	b.n	80080c6 <_printf_float+0xbe>
 80081fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008200:	f240 80e0 	bls.w	80083c4 <_printf_float+0x3bc>
 8008204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008208:	2200      	movs	r2, #0
 800820a:	2300      	movs	r3, #0
 800820c:	f7f8 fc74 	bl	8000af8 <__aeabi_dcmpeq>
 8008210:	2800      	cmp	r0, #0
 8008212:	d034      	beq.n	800827e <_printf_float+0x276>
 8008214:	4a37      	ldr	r2, [pc, #220]	; (80082f4 <_printf_float+0x2ec>)
 8008216:	2301      	movs	r3, #1
 8008218:	4631      	mov	r1, r6
 800821a:	4628      	mov	r0, r5
 800821c:	47b8      	blx	r7
 800821e:	3001      	adds	r0, #1
 8008220:	f43f af51 	beq.w	80080c6 <_printf_float+0xbe>
 8008224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008228:	429a      	cmp	r2, r3
 800822a:	db02      	blt.n	8008232 <_printf_float+0x22a>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	07d8      	lsls	r0, r3, #31
 8008230:	d510      	bpl.n	8008254 <_printf_float+0x24c>
 8008232:	ee18 3a10 	vmov	r3, s16
 8008236:	4652      	mov	r2, sl
 8008238:	4631      	mov	r1, r6
 800823a:	4628      	mov	r0, r5
 800823c:	47b8      	blx	r7
 800823e:	3001      	adds	r0, #1
 8008240:	f43f af41 	beq.w	80080c6 <_printf_float+0xbe>
 8008244:	f04f 0800 	mov.w	r8, #0
 8008248:	f104 091a 	add.w	r9, r4, #26
 800824c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824e:	3b01      	subs	r3, #1
 8008250:	4543      	cmp	r3, r8
 8008252:	dc09      	bgt.n	8008268 <_printf_float+0x260>
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	079b      	lsls	r3, r3, #30
 8008258:	f100 8107 	bmi.w	800846a <_printf_float+0x462>
 800825c:	68e0      	ldr	r0, [r4, #12]
 800825e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008260:	4298      	cmp	r0, r3
 8008262:	bfb8      	it	lt
 8008264:	4618      	movlt	r0, r3
 8008266:	e730      	b.n	80080ca <_printf_float+0xc2>
 8008268:	2301      	movs	r3, #1
 800826a:	464a      	mov	r2, r9
 800826c:	4631      	mov	r1, r6
 800826e:	4628      	mov	r0, r5
 8008270:	47b8      	blx	r7
 8008272:	3001      	adds	r0, #1
 8008274:	f43f af27 	beq.w	80080c6 <_printf_float+0xbe>
 8008278:	f108 0801 	add.w	r8, r8, #1
 800827c:	e7e6      	b.n	800824c <_printf_float+0x244>
 800827e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008280:	2b00      	cmp	r3, #0
 8008282:	dc39      	bgt.n	80082f8 <_printf_float+0x2f0>
 8008284:	4a1b      	ldr	r2, [pc, #108]	; (80082f4 <_printf_float+0x2ec>)
 8008286:	2301      	movs	r3, #1
 8008288:	4631      	mov	r1, r6
 800828a:	4628      	mov	r0, r5
 800828c:	47b8      	blx	r7
 800828e:	3001      	adds	r0, #1
 8008290:	f43f af19 	beq.w	80080c6 <_printf_float+0xbe>
 8008294:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008298:	4313      	orrs	r3, r2
 800829a:	d102      	bne.n	80082a2 <_printf_float+0x29a>
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	07d9      	lsls	r1, r3, #31
 80082a0:	d5d8      	bpl.n	8008254 <_printf_float+0x24c>
 80082a2:	ee18 3a10 	vmov	r3, s16
 80082a6:	4652      	mov	r2, sl
 80082a8:	4631      	mov	r1, r6
 80082aa:	4628      	mov	r0, r5
 80082ac:	47b8      	blx	r7
 80082ae:	3001      	adds	r0, #1
 80082b0:	f43f af09 	beq.w	80080c6 <_printf_float+0xbe>
 80082b4:	f04f 0900 	mov.w	r9, #0
 80082b8:	f104 0a1a 	add.w	sl, r4, #26
 80082bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082be:	425b      	negs	r3, r3
 80082c0:	454b      	cmp	r3, r9
 80082c2:	dc01      	bgt.n	80082c8 <_printf_float+0x2c0>
 80082c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c6:	e792      	b.n	80081ee <_printf_float+0x1e6>
 80082c8:	2301      	movs	r3, #1
 80082ca:	4652      	mov	r2, sl
 80082cc:	4631      	mov	r1, r6
 80082ce:	4628      	mov	r0, r5
 80082d0:	47b8      	blx	r7
 80082d2:	3001      	adds	r0, #1
 80082d4:	f43f aef7 	beq.w	80080c6 <_printf_float+0xbe>
 80082d8:	f109 0901 	add.w	r9, r9, #1
 80082dc:	e7ee      	b.n	80082bc <_printf_float+0x2b4>
 80082de:	bf00      	nop
 80082e0:	7fefffff 	.word	0x7fefffff
 80082e4:	0800a9f0 	.word	0x0800a9f0
 80082e8:	0800a9f4 	.word	0x0800a9f4
 80082ec:	0800a9f8 	.word	0x0800a9f8
 80082f0:	0800a9fc 	.word	0x0800a9fc
 80082f4:	0800aa00 	.word	0x0800aa00
 80082f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082fc:	429a      	cmp	r2, r3
 80082fe:	bfa8      	it	ge
 8008300:	461a      	movge	r2, r3
 8008302:	2a00      	cmp	r2, #0
 8008304:	4691      	mov	r9, r2
 8008306:	dc37      	bgt.n	8008378 <_printf_float+0x370>
 8008308:	f04f 0b00 	mov.w	fp, #0
 800830c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008310:	f104 021a 	add.w	r2, r4, #26
 8008314:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008316:	9305      	str	r3, [sp, #20]
 8008318:	eba3 0309 	sub.w	r3, r3, r9
 800831c:	455b      	cmp	r3, fp
 800831e:	dc33      	bgt.n	8008388 <_printf_float+0x380>
 8008320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008324:	429a      	cmp	r2, r3
 8008326:	db3b      	blt.n	80083a0 <_printf_float+0x398>
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	07da      	lsls	r2, r3, #31
 800832c:	d438      	bmi.n	80083a0 <_printf_float+0x398>
 800832e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008332:	eba2 0903 	sub.w	r9, r2, r3
 8008336:	9b05      	ldr	r3, [sp, #20]
 8008338:	1ad2      	subs	r2, r2, r3
 800833a:	4591      	cmp	r9, r2
 800833c:	bfa8      	it	ge
 800833e:	4691      	movge	r9, r2
 8008340:	f1b9 0f00 	cmp.w	r9, #0
 8008344:	dc35      	bgt.n	80083b2 <_printf_float+0x3aa>
 8008346:	f04f 0800 	mov.w	r8, #0
 800834a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800834e:	f104 0a1a 	add.w	sl, r4, #26
 8008352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008356:	1a9b      	subs	r3, r3, r2
 8008358:	eba3 0309 	sub.w	r3, r3, r9
 800835c:	4543      	cmp	r3, r8
 800835e:	f77f af79 	ble.w	8008254 <_printf_float+0x24c>
 8008362:	2301      	movs	r3, #1
 8008364:	4652      	mov	r2, sl
 8008366:	4631      	mov	r1, r6
 8008368:	4628      	mov	r0, r5
 800836a:	47b8      	blx	r7
 800836c:	3001      	adds	r0, #1
 800836e:	f43f aeaa 	beq.w	80080c6 <_printf_float+0xbe>
 8008372:	f108 0801 	add.w	r8, r8, #1
 8008376:	e7ec      	b.n	8008352 <_printf_float+0x34a>
 8008378:	4613      	mov	r3, r2
 800837a:	4631      	mov	r1, r6
 800837c:	4642      	mov	r2, r8
 800837e:	4628      	mov	r0, r5
 8008380:	47b8      	blx	r7
 8008382:	3001      	adds	r0, #1
 8008384:	d1c0      	bne.n	8008308 <_printf_float+0x300>
 8008386:	e69e      	b.n	80080c6 <_printf_float+0xbe>
 8008388:	2301      	movs	r3, #1
 800838a:	4631      	mov	r1, r6
 800838c:	4628      	mov	r0, r5
 800838e:	9205      	str	r2, [sp, #20]
 8008390:	47b8      	blx	r7
 8008392:	3001      	adds	r0, #1
 8008394:	f43f ae97 	beq.w	80080c6 <_printf_float+0xbe>
 8008398:	9a05      	ldr	r2, [sp, #20]
 800839a:	f10b 0b01 	add.w	fp, fp, #1
 800839e:	e7b9      	b.n	8008314 <_printf_float+0x30c>
 80083a0:	ee18 3a10 	vmov	r3, s16
 80083a4:	4652      	mov	r2, sl
 80083a6:	4631      	mov	r1, r6
 80083a8:	4628      	mov	r0, r5
 80083aa:	47b8      	blx	r7
 80083ac:	3001      	adds	r0, #1
 80083ae:	d1be      	bne.n	800832e <_printf_float+0x326>
 80083b0:	e689      	b.n	80080c6 <_printf_float+0xbe>
 80083b2:	9a05      	ldr	r2, [sp, #20]
 80083b4:	464b      	mov	r3, r9
 80083b6:	4442      	add	r2, r8
 80083b8:	4631      	mov	r1, r6
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	d1c1      	bne.n	8008346 <_printf_float+0x33e>
 80083c2:	e680      	b.n	80080c6 <_printf_float+0xbe>
 80083c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083c6:	2a01      	cmp	r2, #1
 80083c8:	dc01      	bgt.n	80083ce <_printf_float+0x3c6>
 80083ca:	07db      	lsls	r3, r3, #31
 80083cc:	d53a      	bpl.n	8008444 <_printf_float+0x43c>
 80083ce:	2301      	movs	r3, #1
 80083d0:	4642      	mov	r2, r8
 80083d2:	4631      	mov	r1, r6
 80083d4:	4628      	mov	r0, r5
 80083d6:	47b8      	blx	r7
 80083d8:	3001      	adds	r0, #1
 80083da:	f43f ae74 	beq.w	80080c6 <_printf_float+0xbe>
 80083de:	ee18 3a10 	vmov	r3, s16
 80083e2:	4652      	mov	r2, sl
 80083e4:	4631      	mov	r1, r6
 80083e6:	4628      	mov	r0, r5
 80083e8:	47b8      	blx	r7
 80083ea:	3001      	adds	r0, #1
 80083ec:	f43f ae6b 	beq.w	80080c6 <_printf_float+0xbe>
 80083f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083f4:	2200      	movs	r2, #0
 80083f6:	2300      	movs	r3, #0
 80083f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80083fc:	f7f8 fb7c 	bl	8000af8 <__aeabi_dcmpeq>
 8008400:	b9d8      	cbnz	r0, 800843a <_printf_float+0x432>
 8008402:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008406:	f108 0201 	add.w	r2, r8, #1
 800840a:	4631      	mov	r1, r6
 800840c:	4628      	mov	r0, r5
 800840e:	47b8      	blx	r7
 8008410:	3001      	adds	r0, #1
 8008412:	d10e      	bne.n	8008432 <_printf_float+0x42a>
 8008414:	e657      	b.n	80080c6 <_printf_float+0xbe>
 8008416:	2301      	movs	r3, #1
 8008418:	4652      	mov	r2, sl
 800841a:	4631      	mov	r1, r6
 800841c:	4628      	mov	r0, r5
 800841e:	47b8      	blx	r7
 8008420:	3001      	adds	r0, #1
 8008422:	f43f ae50 	beq.w	80080c6 <_printf_float+0xbe>
 8008426:	f108 0801 	add.w	r8, r8, #1
 800842a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800842c:	3b01      	subs	r3, #1
 800842e:	4543      	cmp	r3, r8
 8008430:	dcf1      	bgt.n	8008416 <_printf_float+0x40e>
 8008432:	464b      	mov	r3, r9
 8008434:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008438:	e6da      	b.n	80081f0 <_printf_float+0x1e8>
 800843a:	f04f 0800 	mov.w	r8, #0
 800843e:	f104 0a1a 	add.w	sl, r4, #26
 8008442:	e7f2      	b.n	800842a <_printf_float+0x422>
 8008444:	2301      	movs	r3, #1
 8008446:	4642      	mov	r2, r8
 8008448:	e7df      	b.n	800840a <_printf_float+0x402>
 800844a:	2301      	movs	r3, #1
 800844c:	464a      	mov	r2, r9
 800844e:	4631      	mov	r1, r6
 8008450:	4628      	mov	r0, r5
 8008452:	47b8      	blx	r7
 8008454:	3001      	adds	r0, #1
 8008456:	f43f ae36 	beq.w	80080c6 <_printf_float+0xbe>
 800845a:	f108 0801 	add.w	r8, r8, #1
 800845e:	68e3      	ldr	r3, [r4, #12]
 8008460:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008462:	1a5b      	subs	r3, r3, r1
 8008464:	4543      	cmp	r3, r8
 8008466:	dcf0      	bgt.n	800844a <_printf_float+0x442>
 8008468:	e6f8      	b.n	800825c <_printf_float+0x254>
 800846a:	f04f 0800 	mov.w	r8, #0
 800846e:	f104 0919 	add.w	r9, r4, #25
 8008472:	e7f4      	b.n	800845e <_printf_float+0x456>

08008474 <_printf_common>:
 8008474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008478:	4616      	mov	r6, r2
 800847a:	4699      	mov	r9, r3
 800847c:	688a      	ldr	r2, [r1, #8]
 800847e:	690b      	ldr	r3, [r1, #16]
 8008480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008484:	4293      	cmp	r3, r2
 8008486:	bfb8      	it	lt
 8008488:	4613      	movlt	r3, r2
 800848a:	6033      	str	r3, [r6, #0]
 800848c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008490:	4607      	mov	r7, r0
 8008492:	460c      	mov	r4, r1
 8008494:	b10a      	cbz	r2, 800849a <_printf_common+0x26>
 8008496:	3301      	adds	r3, #1
 8008498:	6033      	str	r3, [r6, #0]
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	0699      	lsls	r1, r3, #26
 800849e:	bf42      	ittt	mi
 80084a0:	6833      	ldrmi	r3, [r6, #0]
 80084a2:	3302      	addmi	r3, #2
 80084a4:	6033      	strmi	r3, [r6, #0]
 80084a6:	6825      	ldr	r5, [r4, #0]
 80084a8:	f015 0506 	ands.w	r5, r5, #6
 80084ac:	d106      	bne.n	80084bc <_printf_common+0x48>
 80084ae:	f104 0a19 	add.w	sl, r4, #25
 80084b2:	68e3      	ldr	r3, [r4, #12]
 80084b4:	6832      	ldr	r2, [r6, #0]
 80084b6:	1a9b      	subs	r3, r3, r2
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	dc26      	bgt.n	800850a <_printf_common+0x96>
 80084bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084c0:	1e13      	subs	r3, r2, #0
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	bf18      	it	ne
 80084c6:	2301      	movne	r3, #1
 80084c8:	0692      	lsls	r2, r2, #26
 80084ca:	d42b      	bmi.n	8008524 <_printf_common+0xb0>
 80084cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084d0:	4649      	mov	r1, r9
 80084d2:	4638      	mov	r0, r7
 80084d4:	47c0      	blx	r8
 80084d6:	3001      	adds	r0, #1
 80084d8:	d01e      	beq.n	8008518 <_printf_common+0xa4>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	6922      	ldr	r2, [r4, #16]
 80084de:	f003 0306 	and.w	r3, r3, #6
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	bf02      	ittt	eq
 80084e6:	68e5      	ldreq	r5, [r4, #12]
 80084e8:	6833      	ldreq	r3, [r6, #0]
 80084ea:	1aed      	subeq	r5, r5, r3
 80084ec:	68a3      	ldr	r3, [r4, #8]
 80084ee:	bf0c      	ite	eq
 80084f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084f4:	2500      	movne	r5, #0
 80084f6:	4293      	cmp	r3, r2
 80084f8:	bfc4      	itt	gt
 80084fa:	1a9b      	subgt	r3, r3, r2
 80084fc:	18ed      	addgt	r5, r5, r3
 80084fe:	2600      	movs	r6, #0
 8008500:	341a      	adds	r4, #26
 8008502:	42b5      	cmp	r5, r6
 8008504:	d11a      	bne.n	800853c <_printf_common+0xc8>
 8008506:	2000      	movs	r0, #0
 8008508:	e008      	b.n	800851c <_printf_common+0xa8>
 800850a:	2301      	movs	r3, #1
 800850c:	4652      	mov	r2, sl
 800850e:	4649      	mov	r1, r9
 8008510:	4638      	mov	r0, r7
 8008512:	47c0      	blx	r8
 8008514:	3001      	adds	r0, #1
 8008516:	d103      	bne.n	8008520 <_printf_common+0xac>
 8008518:	f04f 30ff 	mov.w	r0, #4294967295
 800851c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008520:	3501      	adds	r5, #1
 8008522:	e7c6      	b.n	80084b2 <_printf_common+0x3e>
 8008524:	18e1      	adds	r1, r4, r3
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	2030      	movs	r0, #48	; 0x30
 800852a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800852e:	4422      	add	r2, r4
 8008530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008538:	3302      	adds	r3, #2
 800853a:	e7c7      	b.n	80084cc <_printf_common+0x58>
 800853c:	2301      	movs	r3, #1
 800853e:	4622      	mov	r2, r4
 8008540:	4649      	mov	r1, r9
 8008542:	4638      	mov	r0, r7
 8008544:	47c0      	blx	r8
 8008546:	3001      	adds	r0, #1
 8008548:	d0e6      	beq.n	8008518 <_printf_common+0xa4>
 800854a:	3601      	adds	r6, #1
 800854c:	e7d9      	b.n	8008502 <_printf_common+0x8e>
	...

08008550 <_printf_i>:
 8008550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008554:	7e0f      	ldrb	r7, [r1, #24]
 8008556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008558:	2f78      	cmp	r7, #120	; 0x78
 800855a:	4691      	mov	r9, r2
 800855c:	4680      	mov	r8, r0
 800855e:	460c      	mov	r4, r1
 8008560:	469a      	mov	sl, r3
 8008562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008566:	d807      	bhi.n	8008578 <_printf_i+0x28>
 8008568:	2f62      	cmp	r7, #98	; 0x62
 800856a:	d80a      	bhi.n	8008582 <_printf_i+0x32>
 800856c:	2f00      	cmp	r7, #0
 800856e:	f000 80d4 	beq.w	800871a <_printf_i+0x1ca>
 8008572:	2f58      	cmp	r7, #88	; 0x58
 8008574:	f000 80c0 	beq.w	80086f8 <_printf_i+0x1a8>
 8008578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800857c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008580:	e03a      	b.n	80085f8 <_printf_i+0xa8>
 8008582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008586:	2b15      	cmp	r3, #21
 8008588:	d8f6      	bhi.n	8008578 <_printf_i+0x28>
 800858a:	a101      	add	r1, pc, #4	; (adr r1, 8008590 <_printf_i+0x40>)
 800858c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008590:	080085e9 	.word	0x080085e9
 8008594:	080085fd 	.word	0x080085fd
 8008598:	08008579 	.word	0x08008579
 800859c:	08008579 	.word	0x08008579
 80085a0:	08008579 	.word	0x08008579
 80085a4:	08008579 	.word	0x08008579
 80085a8:	080085fd 	.word	0x080085fd
 80085ac:	08008579 	.word	0x08008579
 80085b0:	08008579 	.word	0x08008579
 80085b4:	08008579 	.word	0x08008579
 80085b8:	08008579 	.word	0x08008579
 80085bc:	08008701 	.word	0x08008701
 80085c0:	08008629 	.word	0x08008629
 80085c4:	080086bb 	.word	0x080086bb
 80085c8:	08008579 	.word	0x08008579
 80085cc:	08008579 	.word	0x08008579
 80085d0:	08008723 	.word	0x08008723
 80085d4:	08008579 	.word	0x08008579
 80085d8:	08008629 	.word	0x08008629
 80085dc:	08008579 	.word	0x08008579
 80085e0:	08008579 	.word	0x08008579
 80085e4:	080086c3 	.word	0x080086c3
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	1d1a      	adds	r2, r3, #4
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	602a      	str	r2, [r5, #0]
 80085f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085f8:	2301      	movs	r3, #1
 80085fa:	e09f      	b.n	800873c <_printf_i+0x1ec>
 80085fc:	6820      	ldr	r0, [r4, #0]
 80085fe:	682b      	ldr	r3, [r5, #0]
 8008600:	0607      	lsls	r7, r0, #24
 8008602:	f103 0104 	add.w	r1, r3, #4
 8008606:	6029      	str	r1, [r5, #0]
 8008608:	d501      	bpl.n	800860e <_printf_i+0xbe>
 800860a:	681e      	ldr	r6, [r3, #0]
 800860c:	e003      	b.n	8008616 <_printf_i+0xc6>
 800860e:	0646      	lsls	r6, r0, #25
 8008610:	d5fb      	bpl.n	800860a <_printf_i+0xba>
 8008612:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008616:	2e00      	cmp	r6, #0
 8008618:	da03      	bge.n	8008622 <_printf_i+0xd2>
 800861a:	232d      	movs	r3, #45	; 0x2d
 800861c:	4276      	negs	r6, r6
 800861e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008622:	485a      	ldr	r0, [pc, #360]	; (800878c <_printf_i+0x23c>)
 8008624:	230a      	movs	r3, #10
 8008626:	e012      	b.n	800864e <_printf_i+0xfe>
 8008628:	682b      	ldr	r3, [r5, #0]
 800862a:	6820      	ldr	r0, [r4, #0]
 800862c:	1d19      	adds	r1, r3, #4
 800862e:	6029      	str	r1, [r5, #0]
 8008630:	0605      	lsls	r5, r0, #24
 8008632:	d501      	bpl.n	8008638 <_printf_i+0xe8>
 8008634:	681e      	ldr	r6, [r3, #0]
 8008636:	e002      	b.n	800863e <_printf_i+0xee>
 8008638:	0641      	lsls	r1, r0, #25
 800863a:	d5fb      	bpl.n	8008634 <_printf_i+0xe4>
 800863c:	881e      	ldrh	r6, [r3, #0]
 800863e:	4853      	ldr	r0, [pc, #332]	; (800878c <_printf_i+0x23c>)
 8008640:	2f6f      	cmp	r7, #111	; 0x6f
 8008642:	bf0c      	ite	eq
 8008644:	2308      	moveq	r3, #8
 8008646:	230a      	movne	r3, #10
 8008648:	2100      	movs	r1, #0
 800864a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800864e:	6865      	ldr	r5, [r4, #4]
 8008650:	60a5      	str	r5, [r4, #8]
 8008652:	2d00      	cmp	r5, #0
 8008654:	bfa2      	ittt	ge
 8008656:	6821      	ldrge	r1, [r4, #0]
 8008658:	f021 0104 	bicge.w	r1, r1, #4
 800865c:	6021      	strge	r1, [r4, #0]
 800865e:	b90e      	cbnz	r6, 8008664 <_printf_i+0x114>
 8008660:	2d00      	cmp	r5, #0
 8008662:	d04b      	beq.n	80086fc <_printf_i+0x1ac>
 8008664:	4615      	mov	r5, r2
 8008666:	fbb6 f1f3 	udiv	r1, r6, r3
 800866a:	fb03 6711 	mls	r7, r3, r1, r6
 800866e:	5dc7      	ldrb	r7, [r0, r7]
 8008670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008674:	4637      	mov	r7, r6
 8008676:	42bb      	cmp	r3, r7
 8008678:	460e      	mov	r6, r1
 800867a:	d9f4      	bls.n	8008666 <_printf_i+0x116>
 800867c:	2b08      	cmp	r3, #8
 800867e:	d10b      	bne.n	8008698 <_printf_i+0x148>
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	07de      	lsls	r6, r3, #31
 8008684:	d508      	bpl.n	8008698 <_printf_i+0x148>
 8008686:	6923      	ldr	r3, [r4, #16]
 8008688:	6861      	ldr	r1, [r4, #4]
 800868a:	4299      	cmp	r1, r3
 800868c:	bfde      	ittt	le
 800868e:	2330      	movle	r3, #48	; 0x30
 8008690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008694:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008698:	1b52      	subs	r2, r2, r5
 800869a:	6122      	str	r2, [r4, #16]
 800869c:	f8cd a000 	str.w	sl, [sp]
 80086a0:	464b      	mov	r3, r9
 80086a2:	aa03      	add	r2, sp, #12
 80086a4:	4621      	mov	r1, r4
 80086a6:	4640      	mov	r0, r8
 80086a8:	f7ff fee4 	bl	8008474 <_printf_common>
 80086ac:	3001      	adds	r0, #1
 80086ae:	d14a      	bne.n	8008746 <_printf_i+0x1f6>
 80086b0:	f04f 30ff 	mov.w	r0, #4294967295
 80086b4:	b004      	add	sp, #16
 80086b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	f043 0320 	orr.w	r3, r3, #32
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	4833      	ldr	r0, [pc, #204]	; (8008790 <_printf_i+0x240>)
 80086c4:	2778      	movs	r7, #120	; 0x78
 80086c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	6829      	ldr	r1, [r5, #0]
 80086ce:	061f      	lsls	r7, r3, #24
 80086d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80086d4:	d402      	bmi.n	80086dc <_printf_i+0x18c>
 80086d6:	065f      	lsls	r7, r3, #25
 80086d8:	bf48      	it	mi
 80086da:	b2b6      	uxthmi	r6, r6
 80086dc:	07df      	lsls	r7, r3, #31
 80086de:	bf48      	it	mi
 80086e0:	f043 0320 	orrmi.w	r3, r3, #32
 80086e4:	6029      	str	r1, [r5, #0]
 80086e6:	bf48      	it	mi
 80086e8:	6023      	strmi	r3, [r4, #0]
 80086ea:	b91e      	cbnz	r6, 80086f4 <_printf_i+0x1a4>
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	f023 0320 	bic.w	r3, r3, #32
 80086f2:	6023      	str	r3, [r4, #0]
 80086f4:	2310      	movs	r3, #16
 80086f6:	e7a7      	b.n	8008648 <_printf_i+0xf8>
 80086f8:	4824      	ldr	r0, [pc, #144]	; (800878c <_printf_i+0x23c>)
 80086fa:	e7e4      	b.n	80086c6 <_printf_i+0x176>
 80086fc:	4615      	mov	r5, r2
 80086fe:	e7bd      	b.n	800867c <_printf_i+0x12c>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	6826      	ldr	r6, [r4, #0]
 8008704:	6961      	ldr	r1, [r4, #20]
 8008706:	1d18      	adds	r0, r3, #4
 8008708:	6028      	str	r0, [r5, #0]
 800870a:	0635      	lsls	r5, r6, #24
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	d501      	bpl.n	8008714 <_printf_i+0x1c4>
 8008710:	6019      	str	r1, [r3, #0]
 8008712:	e002      	b.n	800871a <_printf_i+0x1ca>
 8008714:	0670      	lsls	r0, r6, #25
 8008716:	d5fb      	bpl.n	8008710 <_printf_i+0x1c0>
 8008718:	8019      	strh	r1, [r3, #0]
 800871a:	2300      	movs	r3, #0
 800871c:	6123      	str	r3, [r4, #16]
 800871e:	4615      	mov	r5, r2
 8008720:	e7bc      	b.n	800869c <_printf_i+0x14c>
 8008722:	682b      	ldr	r3, [r5, #0]
 8008724:	1d1a      	adds	r2, r3, #4
 8008726:	602a      	str	r2, [r5, #0]
 8008728:	681d      	ldr	r5, [r3, #0]
 800872a:	6862      	ldr	r2, [r4, #4]
 800872c:	2100      	movs	r1, #0
 800872e:	4628      	mov	r0, r5
 8008730:	f7f7 fd66 	bl	8000200 <memchr>
 8008734:	b108      	cbz	r0, 800873a <_printf_i+0x1ea>
 8008736:	1b40      	subs	r0, r0, r5
 8008738:	6060      	str	r0, [r4, #4]
 800873a:	6863      	ldr	r3, [r4, #4]
 800873c:	6123      	str	r3, [r4, #16]
 800873e:	2300      	movs	r3, #0
 8008740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008744:	e7aa      	b.n	800869c <_printf_i+0x14c>
 8008746:	6923      	ldr	r3, [r4, #16]
 8008748:	462a      	mov	r2, r5
 800874a:	4649      	mov	r1, r9
 800874c:	4640      	mov	r0, r8
 800874e:	47d0      	blx	sl
 8008750:	3001      	adds	r0, #1
 8008752:	d0ad      	beq.n	80086b0 <_printf_i+0x160>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	079b      	lsls	r3, r3, #30
 8008758:	d413      	bmi.n	8008782 <_printf_i+0x232>
 800875a:	68e0      	ldr	r0, [r4, #12]
 800875c:	9b03      	ldr	r3, [sp, #12]
 800875e:	4298      	cmp	r0, r3
 8008760:	bfb8      	it	lt
 8008762:	4618      	movlt	r0, r3
 8008764:	e7a6      	b.n	80086b4 <_printf_i+0x164>
 8008766:	2301      	movs	r3, #1
 8008768:	4632      	mov	r2, r6
 800876a:	4649      	mov	r1, r9
 800876c:	4640      	mov	r0, r8
 800876e:	47d0      	blx	sl
 8008770:	3001      	adds	r0, #1
 8008772:	d09d      	beq.n	80086b0 <_printf_i+0x160>
 8008774:	3501      	adds	r5, #1
 8008776:	68e3      	ldr	r3, [r4, #12]
 8008778:	9903      	ldr	r1, [sp, #12]
 800877a:	1a5b      	subs	r3, r3, r1
 800877c:	42ab      	cmp	r3, r5
 800877e:	dcf2      	bgt.n	8008766 <_printf_i+0x216>
 8008780:	e7eb      	b.n	800875a <_printf_i+0x20a>
 8008782:	2500      	movs	r5, #0
 8008784:	f104 0619 	add.w	r6, r4, #25
 8008788:	e7f5      	b.n	8008776 <_printf_i+0x226>
 800878a:	bf00      	nop
 800878c:	0800aa02 	.word	0x0800aa02
 8008790:	0800aa13 	.word	0x0800aa13

08008794 <std>:
 8008794:	2300      	movs	r3, #0
 8008796:	b510      	push	{r4, lr}
 8008798:	4604      	mov	r4, r0
 800879a:	e9c0 3300 	strd	r3, r3, [r0]
 800879e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087a2:	6083      	str	r3, [r0, #8]
 80087a4:	8181      	strh	r1, [r0, #12]
 80087a6:	6643      	str	r3, [r0, #100]	; 0x64
 80087a8:	81c2      	strh	r2, [r0, #14]
 80087aa:	6183      	str	r3, [r0, #24]
 80087ac:	4619      	mov	r1, r3
 80087ae:	2208      	movs	r2, #8
 80087b0:	305c      	adds	r0, #92	; 0x5c
 80087b2:	f000 f9f7 	bl	8008ba4 <memset>
 80087b6:	4b0d      	ldr	r3, [pc, #52]	; (80087ec <std+0x58>)
 80087b8:	6263      	str	r3, [r4, #36]	; 0x24
 80087ba:	4b0d      	ldr	r3, [pc, #52]	; (80087f0 <std+0x5c>)
 80087bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80087be:	4b0d      	ldr	r3, [pc, #52]	; (80087f4 <std+0x60>)
 80087c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087c2:	4b0d      	ldr	r3, [pc, #52]	; (80087f8 <std+0x64>)
 80087c4:	6323      	str	r3, [r4, #48]	; 0x30
 80087c6:	4b0d      	ldr	r3, [pc, #52]	; (80087fc <std+0x68>)
 80087c8:	6224      	str	r4, [r4, #32]
 80087ca:	429c      	cmp	r4, r3
 80087cc:	d006      	beq.n	80087dc <std+0x48>
 80087ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80087d2:	4294      	cmp	r4, r2
 80087d4:	d002      	beq.n	80087dc <std+0x48>
 80087d6:	33d0      	adds	r3, #208	; 0xd0
 80087d8:	429c      	cmp	r4, r3
 80087da:	d105      	bne.n	80087e8 <std+0x54>
 80087dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087e4:	f000 ba5a 	b.w	8008c9c <__retarget_lock_init_recursive>
 80087e8:	bd10      	pop	{r4, pc}
 80087ea:	bf00      	nop
 80087ec:	080089f5 	.word	0x080089f5
 80087f0:	08008a17 	.word	0x08008a17
 80087f4:	08008a4f 	.word	0x08008a4f
 80087f8:	08008a73 	.word	0x08008a73
 80087fc:	200005d0 	.word	0x200005d0

08008800 <stdio_exit_handler>:
 8008800:	4a02      	ldr	r2, [pc, #8]	; (800880c <stdio_exit_handler+0xc>)
 8008802:	4903      	ldr	r1, [pc, #12]	; (8008810 <stdio_exit_handler+0x10>)
 8008804:	4803      	ldr	r0, [pc, #12]	; (8008814 <stdio_exit_handler+0x14>)
 8008806:	f000 b869 	b.w	80088dc <_fwalk_sglue>
 800880a:	bf00      	nop
 800880c:	20000010 	.word	0x20000010
 8008810:	0800a629 	.word	0x0800a629
 8008814:	2000001c 	.word	0x2000001c

08008818 <cleanup_stdio>:
 8008818:	6841      	ldr	r1, [r0, #4]
 800881a:	4b0c      	ldr	r3, [pc, #48]	; (800884c <cleanup_stdio+0x34>)
 800881c:	4299      	cmp	r1, r3
 800881e:	b510      	push	{r4, lr}
 8008820:	4604      	mov	r4, r0
 8008822:	d001      	beq.n	8008828 <cleanup_stdio+0x10>
 8008824:	f001 ff00 	bl	800a628 <_fflush_r>
 8008828:	68a1      	ldr	r1, [r4, #8]
 800882a:	4b09      	ldr	r3, [pc, #36]	; (8008850 <cleanup_stdio+0x38>)
 800882c:	4299      	cmp	r1, r3
 800882e:	d002      	beq.n	8008836 <cleanup_stdio+0x1e>
 8008830:	4620      	mov	r0, r4
 8008832:	f001 fef9 	bl	800a628 <_fflush_r>
 8008836:	68e1      	ldr	r1, [r4, #12]
 8008838:	4b06      	ldr	r3, [pc, #24]	; (8008854 <cleanup_stdio+0x3c>)
 800883a:	4299      	cmp	r1, r3
 800883c:	d004      	beq.n	8008848 <cleanup_stdio+0x30>
 800883e:	4620      	mov	r0, r4
 8008840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008844:	f001 bef0 	b.w	800a628 <_fflush_r>
 8008848:	bd10      	pop	{r4, pc}
 800884a:	bf00      	nop
 800884c:	200005d0 	.word	0x200005d0
 8008850:	20000638 	.word	0x20000638
 8008854:	200006a0 	.word	0x200006a0

08008858 <global_stdio_init.part.0>:
 8008858:	b510      	push	{r4, lr}
 800885a:	4b0b      	ldr	r3, [pc, #44]	; (8008888 <global_stdio_init.part.0+0x30>)
 800885c:	4c0b      	ldr	r4, [pc, #44]	; (800888c <global_stdio_init.part.0+0x34>)
 800885e:	4a0c      	ldr	r2, [pc, #48]	; (8008890 <global_stdio_init.part.0+0x38>)
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	4620      	mov	r0, r4
 8008864:	2200      	movs	r2, #0
 8008866:	2104      	movs	r1, #4
 8008868:	f7ff ff94 	bl	8008794 <std>
 800886c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008870:	2201      	movs	r2, #1
 8008872:	2109      	movs	r1, #9
 8008874:	f7ff ff8e 	bl	8008794 <std>
 8008878:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800887c:	2202      	movs	r2, #2
 800887e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008882:	2112      	movs	r1, #18
 8008884:	f7ff bf86 	b.w	8008794 <std>
 8008888:	20000708 	.word	0x20000708
 800888c:	200005d0 	.word	0x200005d0
 8008890:	08008801 	.word	0x08008801

08008894 <__sfp_lock_acquire>:
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__sfp_lock_acquire+0x8>)
 8008896:	f000 ba02 	b.w	8008c9e <__retarget_lock_acquire_recursive>
 800889a:	bf00      	nop
 800889c:	20000711 	.word	0x20000711

080088a0 <__sfp_lock_release>:
 80088a0:	4801      	ldr	r0, [pc, #4]	; (80088a8 <__sfp_lock_release+0x8>)
 80088a2:	f000 b9fd 	b.w	8008ca0 <__retarget_lock_release_recursive>
 80088a6:	bf00      	nop
 80088a8:	20000711 	.word	0x20000711

080088ac <__sinit>:
 80088ac:	b510      	push	{r4, lr}
 80088ae:	4604      	mov	r4, r0
 80088b0:	f7ff fff0 	bl	8008894 <__sfp_lock_acquire>
 80088b4:	6a23      	ldr	r3, [r4, #32]
 80088b6:	b11b      	cbz	r3, 80088c0 <__sinit+0x14>
 80088b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088bc:	f7ff bff0 	b.w	80088a0 <__sfp_lock_release>
 80088c0:	4b04      	ldr	r3, [pc, #16]	; (80088d4 <__sinit+0x28>)
 80088c2:	6223      	str	r3, [r4, #32]
 80088c4:	4b04      	ldr	r3, [pc, #16]	; (80088d8 <__sinit+0x2c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1f5      	bne.n	80088b8 <__sinit+0xc>
 80088cc:	f7ff ffc4 	bl	8008858 <global_stdio_init.part.0>
 80088d0:	e7f2      	b.n	80088b8 <__sinit+0xc>
 80088d2:	bf00      	nop
 80088d4:	08008819 	.word	0x08008819
 80088d8:	20000708 	.word	0x20000708

080088dc <_fwalk_sglue>:
 80088dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088e0:	4607      	mov	r7, r0
 80088e2:	4688      	mov	r8, r1
 80088e4:	4614      	mov	r4, r2
 80088e6:	2600      	movs	r6, #0
 80088e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088ec:	f1b9 0901 	subs.w	r9, r9, #1
 80088f0:	d505      	bpl.n	80088fe <_fwalk_sglue+0x22>
 80088f2:	6824      	ldr	r4, [r4, #0]
 80088f4:	2c00      	cmp	r4, #0
 80088f6:	d1f7      	bne.n	80088e8 <_fwalk_sglue+0xc>
 80088f8:	4630      	mov	r0, r6
 80088fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088fe:	89ab      	ldrh	r3, [r5, #12]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d907      	bls.n	8008914 <_fwalk_sglue+0x38>
 8008904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008908:	3301      	adds	r3, #1
 800890a:	d003      	beq.n	8008914 <_fwalk_sglue+0x38>
 800890c:	4629      	mov	r1, r5
 800890e:	4638      	mov	r0, r7
 8008910:	47c0      	blx	r8
 8008912:	4306      	orrs	r6, r0
 8008914:	3568      	adds	r5, #104	; 0x68
 8008916:	e7e9      	b.n	80088ec <_fwalk_sglue+0x10>

08008918 <iprintf>:
 8008918:	b40f      	push	{r0, r1, r2, r3}
 800891a:	b507      	push	{r0, r1, r2, lr}
 800891c:	4906      	ldr	r1, [pc, #24]	; (8008938 <iprintf+0x20>)
 800891e:	ab04      	add	r3, sp, #16
 8008920:	6808      	ldr	r0, [r1, #0]
 8008922:	f853 2b04 	ldr.w	r2, [r3], #4
 8008926:	6881      	ldr	r1, [r0, #8]
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	f001 fcdd 	bl	800a2e8 <_vfiprintf_r>
 800892e:	b003      	add	sp, #12
 8008930:	f85d eb04 	ldr.w	lr, [sp], #4
 8008934:	b004      	add	sp, #16
 8008936:	4770      	bx	lr
 8008938:	20000068 	.word	0x20000068

0800893c <_puts_r>:
 800893c:	6a03      	ldr	r3, [r0, #32]
 800893e:	b570      	push	{r4, r5, r6, lr}
 8008940:	6884      	ldr	r4, [r0, #8]
 8008942:	4605      	mov	r5, r0
 8008944:	460e      	mov	r6, r1
 8008946:	b90b      	cbnz	r3, 800894c <_puts_r+0x10>
 8008948:	f7ff ffb0 	bl	80088ac <__sinit>
 800894c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800894e:	07db      	lsls	r3, r3, #31
 8008950:	d405      	bmi.n	800895e <_puts_r+0x22>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	0598      	lsls	r0, r3, #22
 8008956:	d402      	bmi.n	800895e <_puts_r+0x22>
 8008958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800895a:	f000 f9a0 	bl	8008c9e <__retarget_lock_acquire_recursive>
 800895e:	89a3      	ldrh	r3, [r4, #12]
 8008960:	0719      	lsls	r1, r3, #28
 8008962:	d513      	bpl.n	800898c <_puts_r+0x50>
 8008964:	6923      	ldr	r3, [r4, #16]
 8008966:	b18b      	cbz	r3, 800898c <_puts_r+0x50>
 8008968:	3e01      	subs	r6, #1
 800896a:	68a3      	ldr	r3, [r4, #8]
 800896c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008970:	3b01      	subs	r3, #1
 8008972:	60a3      	str	r3, [r4, #8]
 8008974:	b9e9      	cbnz	r1, 80089b2 <_puts_r+0x76>
 8008976:	2b00      	cmp	r3, #0
 8008978:	da2e      	bge.n	80089d8 <_puts_r+0x9c>
 800897a:	4622      	mov	r2, r4
 800897c:	210a      	movs	r1, #10
 800897e:	4628      	mov	r0, r5
 8008980:	f000 f87b 	bl	8008a7a <__swbuf_r>
 8008984:	3001      	adds	r0, #1
 8008986:	d007      	beq.n	8008998 <_puts_r+0x5c>
 8008988:	250a      	movs	r5, #10
 800898a:	e007      	b.n	800899c <_puts_r+0x60>
 800898c:	4621      	mov	r1, r4
 800898e:	4628      	mov	r0, r5
 8008990:	f000 f8b0 	bl	8008af4 <__swsetup_r>
 8008994:	2800      	cmp	r0, #0
 8008996:	d0e7      	beq.n	8008968 <_puts_r+0x2c>
 8008998:	f04f 35ff 	mov.w	r5, #4294967295
 800899c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800899e:	07da      	lsls	r2, r3, #31
 80089a0:	d405      	bmi.n	80089ae <_puts_r+0x72>
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	059b      	lsls	r3, r3, #22
 80089a6:	d402      	bmi.n	80089ae <_puts_r+0x72>
 80089a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089aa:	f000 f979 	bl	8008ca0 <__retarget_lock_release_recursive>
 80089ae:	4628      	mov	r0, r5
 80089b0:	bd70      	pop	{r4, r5, r6, pc}
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	da04      	bge.n	80089c0 <_puts_r+0x84>
 80089b6:	69a2      	ldr	r2, [r4, #24]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	dc06      	bgt.n	80089ca <_puts_r+0x8e>
 80089bc:	290a      	cmp	r1, #10
 80089be:	d004      	beq.n	80089ca <_puts_r+0x8e>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	6022      	str	r2, [r4, #0]
 80089c6:	7019      	strb	r1, [r3, #0]
 80089c8:	e7cf      	b.n	800896a <_puts_r+0x2e>
 80089ca:	4622      	mov	r2, r4
 80089cc:	4628      	mov	r0, r5
 80089ce:	f000 f854 	bl	8008a7a <__swbuf_r>
 80089d2:	3001      	adds	r0, #1
 80089d4:	d1c9      	bne.n	800896a <_puts_r+0x2e>
 80089d6:	e7df      	b.n	8008998 <_puts_r+0x5c>
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	250a      	movs	r5, #10
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	6022      	str	r2, [r4, #0]
 80089e0:	701d      	strb	r5, [r3, #0]
 80089e2:	e7db      	b.n	800899c <_puts_r+0x60>

080089e4 <puts>:
 80089e4:	4b02      	ldr	r3, [pc, #8]	; (80089f0 <puts+0xc>)
 80089e6:	4601      	mov	r1, r0
 80089e8:	6818      	ldr	r0, [r3, #0]
 80089ea:	f7ff bfa7 	b.w	800893c <_puts_r>
 80089ee:	bf00      	nop
 80089f0:	20000068 	.word	0x20000068

080089f4 <__sread>:
 80089f4:	b510      	push	{r4, lr}
 80089f6:	460c      	mov	r4, r1
 80089f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089fc:	f000 f900 	bl	8008c00 <_read_r>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	bfab      	itete	ge
 8008a04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a06:	89a3      	ldrhlt	r3, [r4, #12]
 8008a08:	181b      	addge	r3, r3, r0
 8008a0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a0e:	bfac      	ite	ge
 8008a10:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a12:	81a3      	strhlt	r3, [r4, #12]
 8008a14:	bd10      	pop	{r4, pc}

08008a16 <__swrite>:
 8008a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1a:	461f      	mov	r7, r3
 8008a1c:	898b      	ldrh	r3, [r1, #12]
 8008a1e:	05db      	lsls	r3, r3, #23
 8008a20:	4605      	mov	r5, r0
 8008a22:	460c      	mov	r4, r1
 8008a24:	4616      	mov	r6, r2
 8008a26:	d505      	bpl.n	8008a34 <__swrite+0x1e>
 8008a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f000 f8d4 	bl	8008bdc <_lseek_r>
 8008a34:	89a3      	ldrh	r3, [r4, #12]
 8008a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a3e:	81a3      	strh	r3, [r4, #12]
 8008a40:	4632      	mov	r2, r6
 8008a42:	463b      	mov	r3, r7
 8008a44:	4628      	mov	r0, r5
 8008a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4a:	f000 b8eb 	b.w	8008c24 <_write_r>

08008a4e <__sseek>:
 8008a4e:	b510      	push	{r4, lr}
 8008a50:	460c      	mov	r4, r1
 8008a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a56:	f000 f8c1 	bl	8008bdc <_lseek_r>
 8008a5a:	1c43      	adds	r3, r0, #1
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	bf15      	itete	ne
 8008a60:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a6a:	81a3      	strheq	r3, [r4, #12]
 8008a6c:	bf18      	it	ne
 8008a6e:	81a3      	strhne	r3, [r4, #12]
 8008a70:	bd10      	pop	{r4, pc}

08008a72 <__sclose>:
 8008a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a76:	f000 b8a1 	b.w	8008bbc <_close_r>

08008a7a <__swbuf_r>:
 8008a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7c:	460e      	mov	r6, r1
 8008a7e:	4614      	mov	r4, r2
 8008a80:	4605      	mov	r5, r0
 8008a82:	b118      	cbz	r0, 8008a8c <__swbuf_r+0x12>
 8008a84:	6a03      	ldr	r3, [r0, #32]
 8008a86:	b90b      	cbnz	r3, 8008a8c <__swbuf_r+0x12>
 8008a88:	f7ff ff10 	bl	80088ac <__sinit>
 8008a8c:	69a3      	ldr	r3, [r4, #24]
 8008a8e:	60a3      	str	r3, [r4, #8]
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	071a      	lsls	r2, r3, #28
 8008a94:	d525      	bpl.n	8008ae2 <__swbuf_r+0x68>
 8008a96:	6923      	ldr	r3, [r4, #16]
 8008a98:	b31b      	cbz	r3, 8008ae2 <__swbuf_r+0x68>
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	6922      	ldr	r2, [r4, #16]
 8008a9e:	1a98      	subs	r0, r3, r2
 8008aa0:	6963      	ldr	r3, [r4, #20]
 8008aa2:	b2f6      	uxtb	r6, r6
 8008aa4:	4283      	cmp	r3, r0
 8008aa6:	4637      	mov	r7, r6
 8008aa8:	dc04      	bgt.n	8008ab4 <__swbuf_r+0x3a>
 8008aaa:	4621      	mov	r1, r4
 8008aac:	4628      	mov	r0, r5
 8008aae:	f001 fdbb 	bl	800a628 <_fflush_r>
 8008ab2:	b9e0      	cbnz	r0, 8008aee <__swbuf_r+0x74>
 8008ab4:	68a3      	ldr	r3, [r4, #8]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	60a3      	str	r3, [r4, #8]
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	1c5a      	adds	r2, r3, #1
 8008abe:	6022      	str	r2, [r4, #0]
 8008ac0:	701e      	strb	r6, [r3, #0]
 8008ac2:	6962      	ldr	r2, [r4, #20]
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d004      	beq.n	8008ad4 <__swbuf_r+0x5a>
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	07db      	lsls	r3, r3, #31
 8008ace:	d506      	bpl.n	8008ade <__swbuf_r+0x64>
 8008ad0:	2e0a      	cmp	r6, #10
 8008ad2:	d104      	bne.n	8008ade <__swbuf_r+0x64>
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f001 fda6 	bl	800a628 <_fflush_r>
 8008adc:	b938      	cbnz	r0, 8008aee <__swbuf_r+0x74>
 8008ade:	4638      	mov	r0, r7
 8008ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ae2:	4621      	mov	r1, r4
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f000 f805 	bl	8008af4 <__swsetup_r>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d0d5      	beq.n	8008a9a <__swbuf_r+0x20>
 8008aee:	f04f 37ff 	mov.w	r7, #4294967295
 8008af2:	e7f4      	b.n	8008ade <__swbuf_r+0x64>

08008af4 <__swsetup_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4b2a      	ldr	r3, [pc, #168]	; (8008ba0 <__swsetup_r+0xac>)
 8008af8:	4605      	mov	r5, r0
 8008afa:	6818      	ldr	r0, [r3, #0]
 8008afc:	460c      	mov	r4, r1
 8008afe:	b118      	cbz	r0, 8008b08 <__swsetup_r+0x14>
 8008b00:	6a03      	ldr	r3, [r0, #32]
 8008b02:	b90b      	cbnz	r3, 8008b08 <__swsetup_r+0x14>
 8008b04:	f7ff fed2 	bl	80088ac <__sinit>
 8008b08:	89a3      	ldrh	r3, [r4, #12]
 8008b0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b0e:	0718      	lsls	r0, r3, #28
 8008b10:	d422      	bmi.n	8008b58 <__swsetup_r+0x64>
 8008b12:	06d9      	lsls	r1, r3, #27
 8008b14:	d407      	bmi.n	8008b26 <__swsetup_r+0x32>
 8008b16:	2309      	movs	r3, #9
 8008b18:	602b      	str	r3, [r5, #0]
 8008b1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b1e:	81a3      	strh	r3, [r4, #12]
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295
 8008b24:	e034      	b.n	8008b90 <__swsetup_r+0x9c>
 8008b26:	0758      	lsls	r0, r3, #29
 8008b28:	d512      	bpl.n	8008b50 <__swsetup_r+0x5c>
 8008b2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b2c:	b141      	cbz	r1, 8008b40 <__swsetup_r+0x4c>
 8008b2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b32:	4299      	cmp	r1, r3
 8008b34:	d002      	beq.n	8008b3c <__swsetup_r+0x48>
 8008b36:	4628      	mov	r0, r5
 8008b38:	f000 ff30 	bl	800999c <_free_r>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	6363      	str	r3, [r4, #52]	; 0x34
 8008b40:	89a3      	ldrh	r3, [r4, #12]
 8008b42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b46:	81a3      	strh	r3, [r4, #12]
 8008b48:	2300      	movs	r3, #0
 8008b4a:	6063      	str	r3, [r4, #4]
 8008b4c:	6923      	ldr	r3, [r4, #16]
 8008b4e:	6023      	str	r3, [r4, #0]
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	f043 0308 	orr.w	r3, r3, #8
 8008b56:	81a3      	strh	r3, [r4, #12]
 8008b58:	6923      	ldr	r3, [r4, #16]
 8008b5a:	b94b      	cbnz	r3, 8008b70 <__swsetup_r+0x7c>
 8008b5c:	89a3      	ldrh	r3, [r4, #12]
 8008b5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b66:	d003      	beq.n	8008b70 <__swsetup_r+0x7c>
 8008b68:	4621      	mov	r1, r4
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f001 fdaa 	bl	800a6c4 <__smakebuf_r>
 8008b70:	89a0      	ldrh	r0, [r4, #12]
 8008b72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b76:	f010 0301 	ands.w	r3, r0, #1
 8008b7a:	d00a      	beq.n	8008b92 <__swsetup_r+0x9e>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60a3      	str	r3, [r4, #8]
 8008b80:	6963      	ldr	r3, [r4, #20]
 8008b82:	425b      	negs	r3, r3
 8008b84:	61a3      	str	r3, [r4, #24]
 8008b86:	6923      	ldr	r3, [r4, #16]
 8008b88:	b943      	cbnz	r3, 8008b9c <__swsetup_r+0xa8>
 8008b8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b8e:	d1c4      	bne.n	8008b1a <__swsetup_r+0x26>
 8008b90:	bd38      	pop	{r3, r4, r5, pc}
 8008b92:	0781      	lsls	r1, r0, #30
 8008b94:	bf58      	it	pl
 8008b96:	6963      	ldrpl	r3, [r4, #20]
 8008b98:	60a3      	str	r3, [r4, #8]
 8008b9a:	e7f4      	b.n	8008b86 <__swsetup_r+0x92>
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	e7f7      	b.n	8008b90 <__swsetup_r+0x9c>
 8008ba0:	20000068 	.word	0x20000068

08008ba4 <memset>:
 8008ba4:	4402      	add	r2, r0
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d100      	bne.n	8008bae <memset+0xa>
 8008bac:	4770      	bx	lr
 8008bae:	f803 1b01 	strb.w	r1, [r3], #1
 8008bb2:	e7f9      	b.n	8008ba8 <memset+0x4>

08008bb4 <_localeconv_r>:
 8008bb4:	4800      	ldr	r0, [pc, #0]	; (8008bb8 <_localeconv_r+0x4>)
 8008bb6:	4770      	bx	lr
 8008bb8:	2000015c 	.word	0x2000015c

08008bbc <_close_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	4d06      	ldr	r5, [pc, #24]	; (8008bd8 <_close_r+0x1c>)
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	602b      	str	r3, [r5, #0]
 8008bc8:	f7f9 fcc1 	bl	800254e <_close>
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	d102      	bne.n	8008bd6 <_close_r+0x1a>
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	b103      	cbz	r3, 8008bd6 <_close_r+0x1a>
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	2000070c 	.word	0x2000070c

08008bdc <_lseek_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4d07      	ldr	r5, [pc, #28]	; (8008bfc <_lseek_r+0x20>)
 8008be0:	4604      	mov	r4, r0
 8008be2:	4608      	mov	r0, r1
 8008be4:	4611      	mov	r1, r2
 8008be6:	2200      	movs	r2, #0
 8008be8:	602a      	str	r2, [r5, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	f7f9 fcd6 	bl	800259c <_lseek>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	d102      	bne.n	8008bfa <_lseek_r+0x1e>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	b103      	cbz	r3, 8008bfa <_lseek_r+0x1e>
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	bd38      	pop	{r3, r4, r5, pc}
 8008bfc:	2000070c 	.word	0x2000070c

08008c00 <_read_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4d07      	ldr	r5, [pc, #28]	; (8008c20 <_read_r+0x20>)
 8008c04:	4604      	mov	r4, r0
 8008c06:	4608      	mov	r0, r1
 8008c08:	4611      	mov	r1, r2
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	602a      	str	r2, [r5, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	f7f9 fc64 	bl	80024dc <_read>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d102      	bne.n	8008c1e <_read_r+0x1e>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b103      	cbz	r3, 8008c1e <_read_r+0x1e>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	2000070c 	.word	0x2000070c

08008c24 <_write_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d07      	ldr	r5, [pc, #28]	; (8008c44 <_write_r+0x20>)
 8008c28:	4604      	mov	r4, r0
 8008c2a:	4608      	mov	r0, r1
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	2200      	movs	r2, #0
 8008c30:	602a      	str	r2, [r5, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	f7f9 fc6f 	bl	8002516 <_write>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d102      	bne.n	8008c42 <_write_r+0x1e>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	b103      	cbz	r3, 8008c42 <_write_r+0x1e>
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	2000070c 	.word	0x2000070c

08008c48 <__errno>:
 8008c48:	4b01      	ldr	r3, [pc, #4]	; (8008c50 <__errno+0x8>)
 8008c4a:	6818      	ldr	r0, [r3, #0]
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	20000068 	.word	0x20000068

08008c54 <__libc_init_array>:
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	4d0d      	ldr	r5, [pc, #52]	; (8008c8c <__libc_init_array+0x38>)
 8008c58:	4c0d      	ldr	r4, [pc, #52]	; (8008c90 <__libc_init_array+0x3c>)
 8008c5a:	1b64      	subs	r4, r4, r5
 8008c5c:	10a4      	asrs	r4, r4, #2
 8008c5e:	2600      	movs	r6, #0
 8008c60:	42a6      	cmp	r6, r4
 8008c62:	d109      	bne.n	8008c78 <__libc_init_array+0x24>
 8008c64:	4d0b      	ldr	r5, [pc, #44]	; (8008c94 <__libc_init_array+0x40>)
 8008c66:	4c0c      	ldr	r4, [pc, #48]	; (8008c98 <__libc_init_array+0x44>)
 8008c68:	f001 fe5a 	bl	800a920 <_init>
 8008c6c:	1b64      	subs	r4, r4, r5
 8008c6e:	10a4      	asrs	r4, r4, #2
 8008c70:	2600      	movs	r6, #0
 8008c72:	42a6      	cmp	r6, r4
 8008c74:	d105      	bne.n	8008c82 <__libc_init_array+0x2e>
 8008c76:	bd70      	pop	{r4, r5, r6, pc}
 8008c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c7c:	4798      	blx	r3
 8008c7e:	3601      	adds	r6, #1
 8008c80:	e7ee      	b.n	8008c60 <__libc_init_array+0xc>
 8008c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c86:	4798      	blx	r3
 8008c88:	3601      	adds	r6, #1
 8008c8a:	e7f2      	b.n	8008c72 <__libc_init_array+0x1e>
 8008c8c:	0800ad6c 	.word	0x0800ad6c
 8008c90:	0800ad6c 	.word	0x0800ad6c
 8008c94:	0800ad6c 	.word	0x0800ad6c
 8008c98:	0800ad70 	.word	0x0800ad70

08008c9c <__retarget_lock_init_recursive>:
 8008c9c:	4770      	bx	lr

08008c9e <__retarget_lock_acquire_recursive>:
 8008c9e:	4770      	bx	lr

08008ca0 <__retarget_lock_release_recursive>:
 8008ca0:	4770      	bx	lr

08008ca2 <quorem>:
 8008ca2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca6:	6903      	ldr	r3, [r0, #16]
 8008ca8:	690c      	ldr	r4, [r1, #16]
 8008caa:	42a3      	cmp	r3, r4
 8008cac:	4607      	mov	r7, r0
 8008cae:	db7e      	blt.n	8008dae <quorem+0x10c>
 8008cb0:	3c01      	subs	r4, #1
 8008cb2:	f101 0814 	add.w	r8, r1, #20
 8008cb6:	f100 0514 	add.w	r5, r0, #20
 8008cba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008cd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cd8:	d331      	bcc.n	8008d3e <quorem+0x9c>
 8008cda:	f04f 0e00 	mov.w	lr, #0
 8008cde:	4640      	mov	r0, r8
 8008ce0:	46ac      	mov	ip, r5
 8008ce2:	46f2      	mov	sl, lr
 8008ce4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ce8:	b293      	uxth	r3, r2
 8008cea:	fb06 e303 	mla	r3, r6, r3, lr
 8008cee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008cf2:	0c1a      	lsrs	r2, r3, #16
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	ebaa 0303 	sub.w	r3, sl, r3
 8008cfa:	f8dc a000 	ldr.w	sl, [ip]
 8008cfe:	fa13 f38a 	uxtah	r3, r3, sl
 8008d02:	fb06 220e 	mla	r2, r6, lr, r2
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	9b00      	ldr	r3, [sp, #0]
 8008d0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d0e:	b292      	uxth	r2, r2
 8008d10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d18:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d1c:	4581      	cmp	r9, r0
 8008d1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d22:	f84c 3b04 	str.w	r3, [ip], #4
 8008d26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d2a:	d2db      	bcs.n	8008ce4 <quorem+0x42>
 8008d2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d30:	b92b      	cbnz	r3, 8008d3e <quorem+0x9c>
 8008d32:	9b01      	ldr	r3, [sp, #4]
 8008d34:	3b04      	subs	r3, #4
 8008d36:	429d      	cmp	r5, r3
 8008d38:	461a      	mov	r2, r3
 8008d3a:	d32c      	bcc.n	8008d96 <quorem+0xf4>
 8008d3c:	613c      	str	r4, [r7, #16]
 8008d3e:	4638      	mov	r0, r7
 8008d40:	f001 f9a8 	bl	800a094 <__mcmp>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	db22      	blt.n	8008d8e <quorem+0xec>
 8008d48:	3601      	adds	r6, #1
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d52:	f8d1 c000 	ldr.w	ip, [r1]
 8008d56:	b293      	uxth	r3, r2
 8008d58:	1ac3      	subs	r3, r0, r3
 8008d5a:	0c12      	lsrs	r2, r2, #16
 8008d5c:	fa13 f38c 	uxtah	r3, r3, ip
 8008d60:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008d64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d6e:	45c1      	cmp	r9, r8
 8008d70:	f841 3b04 	str.w	r3, [r1], #4
 8008d74:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d78:	d2e9      	bcs.n	8008d4e <quorem+0xac>
 8008d7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d82:	b922      	cbnz	r2, 8008d8e <quorem+0xec>
 8008d84:	3b04      	subs	r3, #4
 8008d86:	429d      	cmp	r5, r3
 8008d88:	461a      	mov	r2, r3
 8008d8a:	d30a      	bcc.n	8008da2 <quorem+0x100>
 8008d8c:	613c      	str	r4, [r7, #16]
 8008d8e:	4630      	mov	r0, r6
 8008d90:	b003      	add	sp, #12
 8008d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d96:	6812      	ldr	r2, [r2, #0]
 8008d98:	3b04      	subs	r3, #4
 8008d9a:	2a00      	cmp	r2, #0
 8008d9c:	d1ce      	bne.n	8008d3c <quorem+0x9a>
 8008d9e:	3c01      	subs	r4, #1
 8008da0:	e7c9      	b.n	8008d36 <quorem+0x94>
 8008da2:	6812      	ldr	r2, [r2, #0]
 8008da4:	3b04      	subs	r3, #4
 8008da6:	2a00      	cmp	r2, #0
 8008da8:	d1f0      	bne.n	8008d8c <quorem+0xea>
 8008daa:	3c01      	subs	r4, #1
 8008dac:	e7eb      	b.n	8008d86 <quorem+0xe4>
 8008dae:	2000      	movs	r0, #0
 8008db0:	e7ee      	b.n	8008d90 <quorem+0xee>
 8008db2:	0000      	movs	r0, r0
 8008db4:	0000      	movs	r0, r0
	...

08008db8 <_dtoa_r>:
 8008db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	ed2d 8b04 	vpush	{d8-d9}
 8008dc0:	69c5      	ldr	r5, [r0, #28]
 8008dc2:	b093      	sub	sp, #76	; 0x4c
 8008dc4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008dc8:	ec57 6b10 	vmov	r6, r7, d0
 8008dcc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008dd0:	9107      	str	r1, [sp, #28]
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	920a      	str	r2, [sp, #40]	; 0x28
 8008dd6:	930d      	str	r3, [sp, #52]	; 0x34
 8008dd8:	b975      	cbnz	r5, 8008df8 <_dtoa_r+0x40>
 8008dda:	2010      	movs	r0, #16
 8008ddc:	f000 fe2a 	bl	8009a34 <malloc>
 8008de0:	4602      	mov	r2, r0
 8008de2:	61e0      	str	r0, [r4, #28]
 8008de4:	b920      	cbnz	r0, 8008df0 <_dtoa_r+0x38>
 8008de6:	4bae      	ldr	r3, [pc, #696]	; (80090a0 <_dtoa_r+0x2e8>)
 8008de8:	21ef      	movs	r1, #239	; 0xef
 8008dea:	48ae      	ldr	r0, [pc, #696]	; (80090a4 <_dtoa_r+0x2ec>)
 8008dec:	f001 fce6 	bl	800a7bc <__assert_func>
 8008df0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008df4:	6005      	str	r5, [r0, #0]
 8008df6:	60c5      	str	r5, [r0, #12]
 8008df8:	69e3      	ldr	r3, [r4, #28]
 8008dfa:	6819      	ldr	r1, [r3, #0]
 8008dfc:	b151      	cbz	r1, 8008e14 <_dtoa_r+0x5c>
 8008dfe:	685a      	ldr	r2, [r3, #4]
 8008e00:	604a      	str	r2, [r1, #4]
 8008e02:	2301      	movs	r3, #1
 8008e04:	4093      	lsls	r3, r2
 8008e06:	608b      	str	r3, [r1, #8]
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f000 ff07 	bl	8009c1c <_Bfree>
 8008e0e:	69e3      	ldr	r3, [r4, #28]
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	1e3b      	subs	r3, r7, #0
 8008e16:	bfbb      	ittet	lt
 8008e18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e1c:	9303      	strlt	r3, [sp, #12]
 8008e1e:	2300      	movge	r3, #0
 8008e20:	2201      	movlt	r2, #1
 8008e22:	bfac      	ite	ge
 8008e24:	f8c8 3000 	strge.w	r3, [r8]
 8008e28:	f8c8 2000 	strlt.w	r2, [r8]
 8008e2c:	4b9e      	ldr	r3, [pc, #632]	; (80090a8 <_dtoa_r+0x2f0>)
 8008e2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008e32:	ea33 0308 	bics.w	r3, r3, r8
 8008e36:	d11b      	bne.n	8008e70 <_dtoa_r+0xb8>
 8008e38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008e44:	4333      	orrs	r3, r6
 8008e46:	f000 8593 	beq.w	8009970 <_dtoa_r+0xbb8>
 8008e4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e4c:	b963      	cbnz	r3, 8008e68 <_dtoa_r+0xb0>
 8008e4e:	4b97      	ldr	r3, [pc, #604]	; (80090ac <_dtoa_r+0x2f4>)
 8008e50:	e027      	b.n	8008ea2 <_dtoa_r+0xea>
 8008e52:	4b97      	ldr	r3, [pc, #604]	; (80090b0 <_dtoa_r+0x2f8>)
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	3308      	adds	r3, #8
 8008e58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e5a:	6013      	str	r3, [r2, #0]
 8008e5c:	9800      	ldr	r0, [sp, #0]
 8008e5e:	b013      	add	sp, #76	; 0x4c
 8008e60:	ecbd 8b04 	vpop	{d8-d9}
 8008e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e68:	4b90      	ldr	r3, [pc, #576]	; (80090ac <_dtoa_r+0x2f4>)
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	3303      	adds	r3, #3
 8008e6e:	e7f3      	b.n	8008e58 <_dtoa_r+0xa0>
 8008e70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e74:	2200      	movs	r2, #0
 8008e76:	ec51 0b17 	vmov	r0, r1, d7
 8008e7a:	eeb0 8a47 	vmov.f32	s16, s14
 8008e7e:	eef0 8a67 	vmov.f32	s17, s15
 8008e82:	2300      	movs	r3, #0
 8008e84:	f7f7 fe38 	bl	8000af8 <__aeabi_dcmpeq>
 8008e88:	4681      	mov	r9, r0
 8008e8a:	b160      	cbz	r0, 8008ea6 <_dtoa_r+0xee>
 8008e8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e8e:	2301      	movs	r3, #1
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f000 8568 	beq.w	800996a <_dtoa_r+0xbb2>
 8008e9a:	4b86      	ldr	r3, [pc, #536]	; (80090b4 <_dtoa_r+0x2fc>)
 8008e9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	e7da      	b.n	8008e5c <_dtoa_r+0xa4>
 8008ea6:	aa10      	add	r2, sp, #64	; 0x40
 8008ea8:	a911      	add	r1, sp, #68	; 0x44
 8008eaa:	4620      	mov	r0, r4
 8008eac:	eeb0 0a48 	vmov.f32	s0, s16
 8008eb0:	eef0 0a68 	vmov.f32	s1, s17
 8008eb4:	f001 f994 	bl	800a1e0 <__d2b>
 8008eb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008ebc:	4682      	mov	sl, r0
 8008ebe:	2d00      	cmp	r5, #0
 8008ec0:	d07f      	beq.n	8008fc2 <_dtoa_r+0x20a>
 8008ec2:	ee18 3a90 	vmov	r3, s17
 8008ec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008ece:	ec51 0b18 	vmov	r0, r1, d8
 8008ed2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ed6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008eda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008ede:	4619      	mov	r1, r3
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	4b75      	ldr	r3, [pc, #468]	; (80090b8 <_dtoa_r+0x300>)
 8008ee4:	f7f7 f9e8 	bl	80002b8 <__aeabi_dsub>
 8008ee8:	a367      	add	r3, pc, #412	; (adr r3, 8009088 <_dtoa_r+0x2d0>)
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	f7f7 fb9b 	bl	8000628 <__aeabi_dmul>
 8008ef2:	a367      	add	r3, pc, #412	; (adr r3, 8009090 <_dtoa_r+0x2d8>)
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f7f7 f9e0 	bl	80002bc <__adddf3>
 8008efc:	4606      	mov	r6, r0
 8008efe:	4628      	mov	r0, r5
 8008f00:	460f      	mov	r7, r1
 8008f02:	f7f7 fb27 	bl	8000554 <__aeabi_i2d>
 8008f06:	a364      	add	r3, pc, #400	; (adr r3, 8009098 <_dtoa_r+0x2e0>)
 8008f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0c:	f7f7 fb8c 	bl	8000628 <__aeabi_dmul>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4630      	mov	r0, r6
 8008f16:	4639      	mov	r1, r7
 8008f18:	f7f7 f9d0 	bl	80002bc <__adddf3>
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	460f      	mov	r7, r1
 8008f20:	f7f7 fe32 	bl	8000b88 <__aeabi_d2iz>
 8008f24:	2200      	movs	r2, #0
 8008f26:	4683      	mov	fp, r0
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	4639      	mov	r1, r7
 8008f2e:	f7f7 fded 	bl	8000b0c <__aeabi_dcmplt>
 8008f32:	b148      	cbz	r0, 8008f48 <_dtoa_r+0x190>
 8008f34:	4658      	mov	r0, fp
 8008f36:	f7f7 fb0d 	bl	8000554 <__aeabi_i2d>
 8008f3a:	4632      	mov	r2, r6
 8008f3c:	463b      	mov	r3, r7
 8008f3e:	f7f7 fddb 	bl	8000af8 <__aeabi_dcmpeq>
 8008f42:	b908      	cbnz	r0, 8008f48 <_dtoa_r+0x190>
 8008f44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f48:	f1bb 0f16 	cmp.w	fp, #22
 8008f4c:	d857      	bhi.n	8008ffe <_dtoa_r+0x246>
 8008f4e:	4b5b      	ldr	r3, [pc, #364]	; (80090bc <_dtoa_r+0x304>)
 8008f50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	ec51 0b18 	vmov	r0, r1, d8
 8008f5c:	f7f7 fdd6 	bl	8000b0c <__aeabi_dcmplt>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d04e      	beq.n	8009002 <_dtoa_r+0x24a>
 8008f64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f68:	2300      	movs	r3, #0
 8008f6a:	930c      	str	r3, [sp, #48]	; 0x30
 8008f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f6e:	1b5b      	subs	r3, r3, r5
 8008f70:	1e5a      	subs	r2, r3, #1
 8008f72:	bf45      	ittet	mi
 8008f74:	f1c3 0301 	rsbmi	r3, r3, #1
 8008f78:	9305      	strmi	r3, [sp, #20]
 8008f7a:	2300      	movpl	r3, #0
 8008f7c:	2300      	movmi	r3, #0
 8008f7e:	9206      	str	r2, [sp, #24]
 8008f80:	bf54      	ite	pl
 8008f82:	9305      	strpl	r3, [sp, #20]
 8008f84:	9306      	strmi	r3, [sp, #24]
 8008f86:	f1bb 0f00 	cmp.w	fp, #0
 8008f8a:	db3c      	blt.n	8009006 <_dtoa_r+0x24e>
 8008f8c:	9b06      	ldr	r3, [sp, #24]
 8008f8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008f92:	445b      	add	r3, fp
 8008f94:	9306      	str	r3, [sp, #24]
 8008f96:	2300      	movs	r3, #0
 8008f98:	9308      	str	r3, [sp, #32]
 8008f9a:	9b07      	ldr	r3, [sp, #28]
 8008f9c:	2b09      	cmp	r3, #9
 8008f9e:	d868      	bhi.n	8009072 <_dtoa_r+0x2ba>
 8008fa0:	2b05      	cmp	r3, #5
 8008fa2:	bfc4      	itt	gt
 8008fa4:	3b04      	subgt	r3, #4
 8008fa6:	9307      	strgt	r3, [sp, #28]
 8008fa8:	9b07      	ldr	r3, [sp, #28]
 8008faa:	f1a3 0302 	sub.w	r3, r3, #2
 8008fae:	bfcc      	ite	gt
 8008fb0:	2500      	movgt	r5, #0
 8008fb2:	2501      	movle	r5, #1
 8008fb4:	2b03      	cmp	r3, #3
 8008fb6:	f200 8085 	bhi.w	80090c4 <_dtoa_r+0x30c>
 8008fba:	e8df f003 	tbb	[pc, r3]
 8008fbe:	3b2e      	.short	0x3b2e
 8008fc0:	5839      	.short	0x5839
 8008fc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008fc6:	441d      	add	r5, r3
 8008fc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008fcc:	2b20      	cmp	r3, #32
 8008fce:	bfc1      	itttt	gt
 8008fd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008fd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8008fd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008fdc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008fe0:	bfd6      	itet	le
 8008fe2:	f1c3 0320 	rsble	r3, r3, #32
 8008fe6:	ea48 0003 	orrgt.w	r0, r8, r3
 8008fea:	fa06 f003 	lslle.w	r0, r6, r3
 8008fee:	f7f7 faa1 	bl	8000534 <__aeabi_ui2d>
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008ff8:	3d01      	subs	r5, #1
 8008ffa:	920e      	str	r2, [sp, #56]	; 0x38
 8008ffc:	e76f      	b.n	8008ede <_dtoa_r+0x126>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e7b3      	b.n	8008f6a <_dtoa_r+0x1b2>
 8009002:	900c      	str	r0, [sp, #48]	; 0x30
 8009004:	e7b2      	b.n	8008f6c <_dtoa_r+0x1b4>
 8009006:	9b05      	ldr	r3, [sp, #20]
 8009008:	eba3 030b 	sub.w	r3, r3, fp
 800900c:	9305      	str	r3, [sp, #20]
 800900e:	f1cb 0300 	rsb	r3, fp, #0
 8009012:	9308      	str	r3, [sp, #32]
 8009014:	2300      	movs	r3, #0
 8009016:	930b      	str	r3, [sp, #44]	; 0x2c
 8009018:	e7bf      	b.n	8008f9a <_dtoa_r+0x1e2>
 800901a:	2300      	movs	r3, #0
 800901c:	9309      	str	r3, [sp, #36]	; 0x24
 800901e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc52      	bgt.n	80090ca <_dtoa_r+0x312>
 8009024:	2301      	movs	r3, #1
 8009026:	9301      	str	r3, [sp, #4]
 8009028:	9304      	str	r3, [sp, #16]
 800902a:	461a      	mov	r2, r3
 800902c:	920a      	str	r2, [sp, #40]	; 0x28
 800902e:	e00b      	b.n	8009048 <_dtoa_r+0x290>
 8009030:	2301      	movs	r3, #1
 8009032:	e7f3      	b.n	800901c <_dtoa_r+0x264>
 8009034:	2300      	movs	r3, #0
 8009036:	9309      	str	r3, [sp, #36]	; 0x24
 8009038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800903a:	445b      	add	r3, fp
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	3301      	adds	r3, #1
 8009040:	2b01      	cmp	r3, #1
 8009042:	9304      	str	r3, [sp, #16]
 8009044:	bfb8      	it	lt
 8009046:	2301      	movlt	r3, #1
 8009048:	69e0      	ldr	r0, [r4, #28]
 800904a:	2100      	movs	r1, #0
 800904c:	2204      	movs	r2, #4
 800904e:	f102 0614 	add.w	r6, r2, #20
 8009052:	429e      	cmp	r6, r3
 8009054:	d93d      	bls.n	80090d2 <_dtoa_r+0x31a>
 8009056:	6041      	str	r1, [r0, #4]
 8009058:	4620      	mov	r0, r4
 800905a:	f000 fd9f 	bl	8009b9c <_Balloc>
 800905e:	9000      	str	r0, [sp, #0]
 8009060:	2800      	cmp	r0, #0
 8009062:	d139      	bne.n	80090d8 <_dtoa_r+0x320>
 8009064:	4b16      	ldr	r3, [pc, #88]	; (80090c0 <_dtoa_r+0x308>)
 8009066:	4602      	mov	r2, r0
 8009068:	f240 11af 	movw	r1, #431	; 0x1af
 800906c:	e6bd      	b.n	8008dea <_dtoa_r+0x32>
 800906e:	2301      	movs	r3, #1
 8009070:	e7e1      	b.n	8009036 <_dtoa_r+0x27e>
 8009072:	2501      	movs	r5, #1
 8009074:	2300      	movs	r3, #0
 8009076:	9307      	str	r3, [sp, #28]
 8009078:	9509      	str	r5, [sp, #36]	; 0x24
 800907a:	f04f 33ff 	mov.w	r3, #4294967295
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	9304      	str	r3, [sp, #16]
 8009082:	2200      	movs	r2, #0
 8009084:	2312      	movs	r3, #18
 8009086:	e7d1      	b.n	800902c <_dtoa_r+0x274>
 8009088:	636f4361 	.word	0x636f4361
 800908c:	3fd287a7 	.word	0x3fd287a7
 8009090:	8b60c8b3 	.word	0x8b60c8b3
 8009094:	3fc68a28 	.word	0x3fc68a28
 8009098:	509f79fb 	.word	0x509f79fb
 800909c:	3fd34413 	.word	0x3fd34413
 80090a0:	0800aa31 	.word	0x0800aa31
 80090a4:	0800aa48 	.word	0x0800aa48
 80090a8:	7ff00000 	.word	0x7ff00000
 80090ac:	0800aa2d 	.word	0x0800aa2d
 80090b0:	0800aa24 	.word	0x0800aa24
 80090b4:	0800aa01 	.word	0x0800aa01
 80090b8:	3ff80000 	.word	0x3ff80000
 80090bc:	0800ab38 	.word	0x0800ab38
 80090c0:	0800aaa0 	.word	0x0800aaa0
 80090c4:	2301      	movs	r3, #1
 80090c6:	9309      	str	r3, [sp, #36]	; 0x24
 80090c8:	e7d7      	b.n	800907a <_dtoa_r+0x2c2>
 80090ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090cc:	9301      	str	r3, [sp, #4]
 80090ce:	9304      	str	r3, [sp, #16]
 80090d0:	e7ba      	b.n	8009048 <_dtoa_r+0x290>
 80090d2:	3101      	adds	r1, #1
 80090d4:	0052      	lsls	r2, r2, #1
 80090d6:	e7ba      	b.n	800904e <_dtoa_r+0x296>
 80090d8:	69e3      	ldr	r3, [r4, #28]
 80090da:	9a00      	ldr	r2, [sp, #0]
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	9b04      	ldr	r3, [sp, #16]
 80090e0:	2b0e      	cmp	r3, #14
 80090e2:	f200 80a8 	bhi.w	8009236 <_dtoa_r+0x47e>
 80090e6:	2d00      	cmp	r5, #0
 80090e8:	f000 80a5 	beq.w	8009236 <_dtoa_r+0x47e>
 80090ec:	f1bb 0f00 	cmp.w	fp, #0
 80090f0:	dd38      	ble.n	8009164 <_dtoa_r+0x3ac>
 80090f2:	4bc0      	ldr	r3, [pc, #768]	; (80093f4 <_dtoa_r+0x63c>)
 80090f4:	f00b 020f 	and.w	r2, fp, #15
 80090f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009100:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009104:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009108:	d019      	beq.n	800913e <_dtoa_r+0x386>
 800910a:	4bbb      	ldr	r3, [pc, #748]	; (80093f8 <_dtoa_r+0x640>)
 800910c:	ec51 0b18 	vmov	r0, r1, d8
 8009110:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009114:	f7f7 fbb2 	bl	800087c <__aeabi_ddiv>
 8009118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800911c:	f008 080f 	and.w	r8, r8, #15
 8009120:	2503      	movs	r5, #3
 8009122:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80093f8 <_dtoa_r+0x640>
 8009126:	f1b8 0f00 	cmp.w	r8, #0
 800912a:	d10a      	bne.n	8009142 <_dtoa_r+0x38a>
 800912c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009130:	4632      	mov	r2, r6
 8009132:	463b      	mov	r3, r7
 8009134:	f7f7 fba2 	bl	800087c <__aeabi_ddiv>
 8009138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800913c:	e02b      	b.n	8009196 <_dtoa_r+0x3de>
 800913e:	2502      	movs	r5, #2
 8009140:	e7ef      	b.n	8009122 <_dtoa_r+0x36a>
 8009142:	f018 0f01 	tst.w	r8, #1
 8009146:	d008      	beq.n	800915a <_dtoa_r+0x3a2>
 8009148:	4630      	mov	r0, r6
 800914a:	4639      	mov	r1, r7
 800914c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009150:	f7f7 fa6a 	bl	8000628 <__aeabi_dmul>
 8009154:	3501      	adds	r5, #1
 8009156:	4606      	mov	r6, r0
 8009158:	460f      	mov	r7, r1
 800915a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800915e:	f109 0908 	add.w	r9, r9, #8
 8009162:	e7e0      	b.n	8009126 <_dtoa_r+0x36e>
 8009164:	f000 809f 	beq.w	80092a6 <_dtoa_r+0x4ee>
 8009168:	f1cb 0600 	rsb	r6, fp, #0
 800916c:	4ba1      	ldr	r3, [pc, #644]	; (80093f4 <_dtoa_r+0x63c>)
 800916e:	4fa2      	ldr	r7, [pc, #648]	; (80093f8 <_dtoa_r+0x640>)
 8009170:	f006 020f 	and.w	r2, r6, #15
 8009174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	ec51 0b18 	vmov	r0, r1, d8
 8009180:	f7f7 fa52 	bl	8000628 <__aeabi_dmul>
 8009184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009188:	1136      	asrs	r6, r6, #4
 800918a:	2300      	movs	r3, #0
 800918c:	2502      	movs	r5, #2
 800918e:	2e00      	cmp	r6, #0
 8009190:	d17e      	bne.n	8009290 <_dtoa_r+0x4d8>
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1d0      	bne.n	8009138 <_dtoa_r+0x380>
 8009196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009198:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 8084 	beq.w	80092aa <_dtoa_r+0x4f2>
 80091a2:	4b96      	ldr	r3, [pc, #600]	; (80093fc <_dtoa_r+0x644>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	4640      	mov	r0, r8
 80091a8:	4649      	mov	r1, r9
 80091aa:	f7f7 fcaf 	bl	8000b0c <__aeabi_dcmplt>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d07b      	beq.n	80092aa <_dtoa_r+0x4f2>
 80091b2:	9b04      	ldr	r3, [sp, #16]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d078      	beq.n	80092aa <_dtoa_r+0x4f2>
 80091b8:	9b01      	ldr	r3, [sp, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dd39      	ble.n	8009232 <_dtoa_r+0x47a>
 80091be:	4b90      	ldr	r3, [pc, #576]	; (8009400 <_dtoa_r+0x648>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	4640      	mov	r0, r8
 80091c4:	4649      	mov	r1, r9
 80091c6:	f7f7 fa2f 	bl	8000628 <__aeabi_dmul>
 80091ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091ce:	9e01      	ldr	r6, [sp, #4]
 80091d0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80091d4:	3501      	adds	r5, #1
 80091d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80091da:	4628      	mov	r0, r5
 80091dc:	f7f7 f9ba 	bl	8000554 <__aeabi_i2d>
 80091e0:	4642      	mov	r2, r8
 80091e2:	464b      	mov	r3, r9
 80091e4:	f7f7 fa20 	bl	8000628 <__aeabi_dmul>
 80091e8:	4b86      	ldr	r3, [pc, #536]	; (8009404 <_dtoa_r+0x64c>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	f7f7 f866 	bl	80002bc <__adddf3>
 80091f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80091f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091f8:	9303      	str	r3, [sp, #12]
 80091fa:	2e00      	cmp	r6, #0
 80091fc:	d158      	bne.n	80092b0 <_dtoa_r+0x4f8>
 80091fe:	4b82      	ldr	r3, [pc, #520]	; (8009408 <_dtoa_r+0x650>)
 8009200:	2200      	movs	r2, #0
 8009202:	4640      	mov	r0, r8
 8009204:	4649      	mov	r1, r9
 8009206:	f7f7 f857 	bl	80002b8 <__aeabi_dsub>
 800920a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800920e:	4680      	mov	r8, r0
 8009210:	4689      	mov	r9, r1
 8009212:	f7f7 fc99 	bl	8000b48 <__aeabi_dcmpgt>
 8009216:	2800      	cmp	r0, #0
 8009218:	f040 8296 	bne.w	8009748 <_dtoa_r+0x990>
 800921c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009220:	4640      	mov	r0, r8
 8009222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009226:	4649      	mov	r1, r9
 8009228:	f7f7 fc70 	bl	8000b0c <__aeabi_dcmplt>
 800922c:	2800      	cmp	r0, #0
 800922e:	f040 8289 	bne.w	8009744 <_dtoa_r+0x98c>
 8009232:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009238:	2b00      	cmp	r3, #0
 800923a:	f2c0 814e 	blt.w	80094da <_dtoa_r+0x722>
 800923e:	f1bb 0f0e 	cmp.w	fp, #14
 8009242:	f300 814a 	bgt.w	80094da <_dtoa_r+0x722>
 8009246:	4b6b      	ldr	r3, [pc, #428]	; (80093f4 <_dtoa_r+0x63c>)
 8009248:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800924c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009252:	2b00      	cmp	r3, #0
 8009254:	f280 80dc 	bge.w	8009410 <_dtoa_r+0x658>
 8009258:	9b04      	ldr	r3, [sp, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	f300 80d8 	bgt.w	8009410 <_dtoa_r+0x658>
 8009260:	f040 826f 	bne.w	8009742 <_dtoa_r+0x98a>
 8009264:	4b68      	ldr	r3, [pc, #416]	; (8009408 <_dtoa_r+0x650>)
 8009266:	2200      	movs	r2, #0
 8009268:	4640      	mov	r0, r8
 800926a:	4649      	mov	r1, r9
 800926c:	f7f7 f9dc 	bl	8000628 <__aeabi_dmul>
 8009270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009274:	f7f7 fc5e 	bl	8000b34 <__aeabi_dcmpge>
 8009278:	9e04      	ldr	r6, [sp, #16]
 800927a:	4637      	mov	r7, r6
 800927c:	2800      	cmp	r0, #0
 800927e:	f040 8245 	bne.w	800970c <_dtoa_r+0x954>
 8009282:	9d00      	ldr	r5, [sp, #0]
 8009284:	2331      	movs	r3, #49	; 0x31
 8009286:	f805 3b01 	strb.w	r3, [r5], #1
 800928a:	f10b 0b01 	add.w	fp, fp, #1
 800928e:	e241      	b.n	8009714 <_dtoa_r+0x95c>
 8009290:	07f2      	lsls	r2, r6, #31
 8009292:	d505      	bpl.n	80092a0 <_dtoa_r+0x4e8>
 8009294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009298:	f7f7 f9c6 	bl	8000628 <__aeabi_dmul>
 800929c:	3501      	adds	r5, #1
 800929e:	2301      	movs	r3, #1
 80092a0:	1076      	asrs	r6, r6, #1
 80092a2:	3708      	adds	r7, #8
 80092a4:	e773      	b.n	800918e <_dtoa_r+0x3d6>
 80092a6:	2502      	movs	r5, #2
 80092a8:	e775      	b.n	8009196 <_dtoa_r+0x3de>
 80092aa:	9e04      	ldr	r6, [sp, #16]
 80092ac:	465f      	mov	r7, fp
 80092ae:	e792      	b.n	80091d6 <_dtoa_r+0x41e>
 80092b0:	9900      	ldr	r1, [sp, #0]
 80092b2:	4b50      	ldr	r3, [pc, #320]	; (80093f4 <_dtoa_r+0x63c>)
 80092b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092b8:	4431      	add	r1, r6
 80092ba:	9102      	str	r1, [sp, #8]
 80092bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092be:	eeb0 9a47 	vmov.f32	s18, s14
 80092c2:	eef0 9a67 	vmov.f32	s19, s15
 80092c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80092ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092ce:	2900      	cmp	r1, #0
 80092d0:	d044      	beq.n	800935c <_dtoa_r+0x5a4>
 80092d2:	494e      	ldr	r1, [pc, #312]	; (800940c <_dtoa_r+0x654>)
 80092d4:	2000      	movs	r0, #0
 80092d6:	f7f7 fad1 	bl	800087c <__aeabi_ddiv>
 80092da:	ec53 2b19 	vmov	r2, r3, d9
 80092de:	f7f6 ffeb 	bl	80002b8 <__aeabi_dsub>
 80092e2:	9d00      	ldr	r5, [sp, #0]
 80092e4:	ec41 0b19 	vmov	d9, r0, r1
 80092e8:	4649      	mov	r1, r9
 80092ea:	4640      	mov	r0, r8
 80092ec:	f7f7 fc4c 	bl	8000b88 <__aeabi_d2iz>
 80092f0:	4606      	mov	r6, r0
 80092f2:	f7f7 f92f 	bl	8000554 <__aeabi_i2d>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	4640      	mov	r0, r8
 80092fc:	4649      	mov	r1, r9
 80092fe:	f7f6 ffdb 	bl	80002b8 <__aeabi_dsub>
 8009302:	3630      	adds	r6, #48	; 0x30
 8009304:	f805 6b01 	strb.w	r6, [r5], #1
 8009308:	ec53 2b19 	vmov	r2, r3, d9
 800930c:	4680      	mov	r8, r0
 800930e:	4689      	mov	r9, r1
 8009310:	f7f7 fbfc 	bl	8000b0c <__aeabi_dcmplt>
 8009314:	2800      	cmp	r0, #0
 8009316:	d164      	bne.n	80093e2 <_dtoa_r+0x62a>
 8009318:	4642      	mov	r2, r8
 800931a:	464b      	mov	r3, r9
 800931c:	4937      	ldr	r1, [pc, #220]	; (80093fc <_dtoa_r+0x644>)
 800931e:	2000      	movs	r0, #0
 8009320:	f7f6 ffca 	bl	80002b8 <__aeabi_dsub>
 8009324:	ec53 2b19 	vmov	r2, r3, d9
 8009328:	f7f7 fbf0 	bl	8000b0c <__aeabi_dcmplt>
 800932c:	2800      	cmp	r0, #0
 800932e:	f040 80b6 	bne.w	800949e <_dtoa_r+0x6e6>
 8009332:	9b02      	ldr	r3, [sp, #8]
 8009334:	429d      	cmp	r5, r3
 8009336:	f43f af7c 	beq.w	8009232 <_dtoa_r+0x47a>
 800933a:	4b31      	ldr	r3, [pc, #196]	; (8009400 <_dtoa_r+0x648>)
 800933c:	ec51 0b19 	vmov	r0, r1, d9
 8009340:	2200      	movs	r2, #0
 8009342:	f7f7 f971 	bl	8000628 <__aeabi_dmul>
 8009346:	4b2e      	ldr	r3, [pc, #184]	; (8009400 <_dtoa_r+0x648>)
 8009348:	ec41 0b19 	vmov	d9, r0, r1
 800934c:	2200      	movs	r2, #0
 800934e:	4640      	mov	r0, r8
 8009350:	4649      	mov	r1, r9
 8009352:	f7f7 f969 	bl	8000628 <__aeabi_dmul>
 8009356:	4680      	mov	r8, r0
 8009358:	4689      	mov	r9, r1
 800935a:	e7c5      	b.n	80092e8 <_dtoa_r+0x530>
 800935c:	ec51 0b17 	vmov	r0, r1, d7
 8009360:	f7f7 f962 	bl	8000628 <__aeabi_dmul>
 8009364:	9b02      	ldr	r3, [sp, #8]
 8009366:	9d00      	ldr	r5, [sp, #0]
 8009368:	930f      	str	r3, [sp, #60]	; 0x3c
 800936a:	ec41 0b19 	vmov	d9, r0, r1
 800936e:	4649      	mov	r1, r9
 8009370:	4640      	mov	r0, r8
 8009372:	f7f7 fc09 	bl	8000b88 <__aeabi_d2iz>
 8009376:	4606      	mov	r6, r0
 8009378:	f7f7 f8ec 	bl	8000554 <__aeabi_i2d>
 800937c:	3630      	adds	r6, #48	; 0x30
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	4640      	mov	r0, r8
 8009384:	4649      	mov	r1, r9
 8009386:	f7f6 ff97 	bl	80002b8 <__aeabi_dsub>
 800938a:	f805 6b01 	strb.w	r6, [r5], #1
 800938e:	9b02      	ldr	r3, [sp, #8]
 8009390:	429d      	cmp	r5, r3
 8009392:	4680      	mov	r8, r0
 8009394:	4689      	mov	r9, r1
 8009396:	f04f 0200 	mov.w	r2, #0
 800939a:	d124      	bne.n	80093e6 <_dtoa_r+0x62e>
 800939c:	4b1b      	ldr	r3, [pc, #108]	; (800940c <_dtoa_r+0x654>)
 800939e:	ec51 0b19 	vmov	r0, r1, d9
 80093a2:	f7f6 ff8b 	bl	80002bc <__adddf3>
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	4640      	mov	r0, r8
 80093ac:	4649      	mov	r1, r9
 80093ae:	f7f7 fbcb 	bl	8000b48 <__aeabi_dcmpgt>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d173      	bne.n	800949e <_dtoa_r+0x6e6>
 80093b6:	ec53 2b19 	vmov	r2, r3, d9
 80093ba:	4914      	ldr	r1, [pc, #80]	; (800940c <_dtoa_r+0x654>)
 80093bc:	2000      	movs	r0, #0
 80093be:	f7f6 ff7b 	bl	80002b8 <__aeabi_dsub>
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	4640      	mov	r0, r8
 80093c8:	4649      	mov	r1, r9
 80093ca:	f7f7 fb9f 	bl	8000b0c <__aeabi_dcmplt>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	f43f af2f 	beq.w	8009232 <_dtoa_r+0x47a>
 80093d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80093d6:	1e6b      	subs	r3, r5, #1
 80093d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80093da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093de:	2b30      	cmp	r3, #48	; 0x30
 80093e0:	d0f8      	beq.n	80093d4 <_dtoa_r+0x61c>
 80093e2:	46bb      	mov	fp, r7
 80093e4:	e04a      	b.n	800947c <_dtoa_r+0x6c4>
 80093e6:	4b06      	ldr	r3, [pc, #24]	; (8009400 <_dtoa_r+0x648>)
 80093e8:	f7f7 f91e 	bl	8000628 <__aeabi_dmul>
 80093ec:	4680      	mov	r8, r0
 80093ee:	4689      	mov	r9, r1
 80093f0:	e7bd      	b.n	800936e <_dtoa_r+0x5b6>
 80093f2:	bf00      	nop
 80093f4:	0800ab38 	.word	0x0800ab38
 80093f8:	0800ab10 	.word	0x0800ab10
 80093fc:	3ff00000 	.word	0x3ff00000
 8009400:	40240000 	.word	0x40240000
 8009404:	401c0000 	.word	0x401c0000
 8009408:	40140000 	.word	0x40140000
 800940c:	3fe00000 	.word	0x3fe00000
 8009410:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009414:	9d00      	ldr	r5, [sp, #0]
 8009416:	4642      	mov	r2, r8
 8009418:	464b      	mov	r3, r9
 800941a:	4630      	mov	r0, r6
 800941c:	4639      	mov	r1, r7
 800941e:	f7f7 fa2d 	bl	800087c <__aeabi_ddiv>
 8009422:	f7f7 fbb1 	bl	8000b88 <__aeabi_d2iz>
 8009426:	9001      	str	r0, [sp, #4]
 8009428:	f7f7 f894 	bl	8000554 <__aeabi_i2d>
 800942c:	4642      	mov	r2, r8
 800942e:	464b      	mov	r3, r9
 8009430:	f7f7 f8fa 	bl	8000628 <__aeabi_dmul>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	4630      	mov	r0, r6
 800943a:	4639      	mov	r1, r7
 800943c:	f7f6 ff3c 	bl	80002b8 <__aeabi_dsub>
 8009440:	9e01      	ldr	r6, [sp, #4]
 8009442:	9f04      	ldr	r7, [sp, #16]
 8009444:	3630      	adds	r6, #48	; 0x30
 8009446:	f805 6b01 	strb.w	r6, [r5], #1
 800944a:	9e00      	ldr	r6, [sp, #0]
 800944c:	1bae      	subs	r6, r5, r6
 800944e:	42b7      	cmp	r7, r6
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	d134      	bne.n	80094c0 <_dtoa_r+0x708>
 8009456:	f7f6 ff31 	bl	80002bc <__adddf3>
 800945a:	4642      	mov	r2, r8
 800945c:	464b      	mov	r3, r9
 800945e:	4606      	mov	r6, r0
 8009460:	460f      	mov	r7, r1
 8009462:	f7f7 fb71 	bl	8000b48 <__aeabi_dcmpgt>
 8009466:	b9c8      	cbnz	r0, 800949c <_dtoa_r+0x6e4>
 8009468:	4642      	mov	r2, r8
 800946a:	464b      	mov	r3, r9
 800946c:	4630      	mov	r0, r6
 800946e:	4639      	mov	r1, r7
 8009470:	f7f7 fb42 	bl	8000af8 <__aeabi_dcmpeq>
 8009474:	b110      	cbz	r0, 800947c <_dtoa_r+0x6c4>
 8009476:	9b01      	ldr	r3, [sp, #4]
 8009478:	07db      	lsls	r3, r3, #31
 800947a:	d40f      	bmi.n	800949c <_dtoa_r+0x6e4>
 800947c:	4651      	mov	r1, sl
 800947e:	4620      	mov	r0, r4
 8009480:	f000 fbcc 	bl	8009c1c <_Bfree>
 8009484:	2300      	movs	r3, #0
 8009486:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009488:	702b      	strb	r3, [r5, #0]
 800948a:	f10b 0301 	add.w	r3, fp, #1
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009492:	2b00      	cmp	r3, #0
 8009494:	f43f ace2 	beq.w	8008e5c <_dtoa_r+0xa4>
 8009498:	601d      	str	r5, [r3, #0]
 800949a:	e4df      	b.n	8008e5c <_dtoa_r+0xa4>
 800949c:	465f      	mov	r7, fp
 800949e:	462b      	mov	r3, r5
 80094a0:	461d      	mov	r5, r3
 80094a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094a6:	2a39      	cmp	r2, #57	; 0x39
 80094a8:	d106      	bne.n	80094b8 <_dtoa_r+0x700>
 80094aa:	9a00      	ldr	r2, [sp, #0]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d1f7      	bne.n	80094a0 <_dtoa_r+0x6e8>
 80094b0:	9900      	ldr	r1, [sp, #0]
 80094b2:	2230      	movs	r2, #48	; 0x30
 80094b4:	3701      	adds	r7, #1
 80094b6:	700a      	strb	r2, [r1, #0]
 80094b8:	781a      	ldrb	r2, [r3, #0]
 80094ba:	3201      	adds	r2, #1
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	e790      	b.n	80093e2 <_dtoa_r+0x62a>
 80094c0:	4ba3      	ldr	r3, [pc, #652]	; (8009750 <_dtoa_r+0x998>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	f7f7 f8b0 	bl	8000628 <__aeabi_dmul>
 80094c8:	2200      	movs	r2, #0
 80094ca:	2300      	movs	r3, #0
 80094cc:	4606      	mov	r6, r0
 80094ce:	460f      	mov	r7, r1
 80094d0:	f7f7 fb12 	bl	8000af8 <__aeabi_dcmpeq>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d09e      	beq.n	8009416 <_dtoa_r+0x65e>
 80094d8:	e7d0      	b.n	800947c <_dtoa_r+0x6c4>
 80094da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094dc:	2a00      	cmp	r2, #0
 80094de:	f000 80ca 	beq.w	8009676 <_dtoa_r+0x8be>
 80094e2:	9a07      	ldr	r2, [sp, #28]
 80094e4:	2a01      	cmp	r2, #1
 80094e6:	f300 80ad 	bgt.w	8009644 <_dtoa_r+0x88c>
 80094ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094ec:	2a00      	cmp	r2, #0
 80094ee:	f000 80a5 	beq.w	800963c <_dtoa_r+0x884>
 80094f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80094f6:	9e08      	ldr	r6, [sp, #32]
 80094f8:	9d05      	ldr	r5, [sp, #20]
 80094fa:	9a05      	ldr	r2, [sp, #20]
 80094fc:	441a      	add	r2, r3
 80094fe:	9205      	str	r2, [sp, #20]
 8009500:	9a06      	ldr	r2, [sp, #24]
 8009502:	2101      	movs	r1, #1
 8009504:	441a      	add	r2, r3
 8009506:	4620      	mov	r0, r4
 8009508:	9206      	str	r2, [sp, #24]
 800950a:	f000 fc3d 	bl	8009d88 <__i2b>
 800950e:	4607      	mov	r7, r0
 8009510:	b165      	cbz	r5, 800952c <_dtoa_r+0x774>
 8009512:	9b06      	ldr	r3, [sp, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	dd09      	ble.n	800952c <_dtoa_r+0x774>
 8009518:	42ab      	cmp	r3, r5
 800951a:	9a05      	ldr	r2, [sp, #20]
 800951c:	bfa8      	it	ge
 800951e:	462b      	movge	r3, r5
 8009520:	1ad2      	subs	r2, r2, r3
 8009522:	9205      	str	r2, [sp, #20]
 8009524:	9a06      	ldr	r2, [sp, #24]
 8009526:	1aed      	subs	r5, r5, r3
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	9306      	str	r3, [sp, #24]
 800952c:	9b08      	ldr	r3, [sp, #32]
 800952e:	b1f3      	cbz	r3, 800956e <_dtoa_r+0x7b6>
 8009530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 80a3 	beq.w	800967e <_dtoa_r+0x8c6>
 8009538:	2e00      	cmp	r6, #0
 800953a:	dd10      	ble.n	800955e <_dtoa_r+0x7a6>
 800953c:	4639      	mov	r1, r7
 800953e:	4632      	mov	r2, r6
 8009540:	4620      	mov	r0, r4
 8009542:	f000 fce1 	bl	8009f08 <__pow5mult>
 8009546:	4652      	mov	r2, sl
 8009548:	4601      	mov	r1, r0
 800954a:	4607      	mov	r7, r0
 800954c:	4620      	mov	r0, r4
 800954e:	f000 fc31 	bl	8009db4 <__multiply>
 8009552:	4651      	mov	r1, sl
 8009554:	4680      	mov	r8, r0
 8009556:	4620      	mov	r0, r4
 8009558:	f000 fb60 	bl	8009c1c <_Bfree>
 800955c:	46c2      	mov	sl, r8
 800955e:	9b08      	ldr	r3, [sp, #32]
 8009560:	1b9a      	subs	r2, r3, r6
 8009562:	d004      	beq.n	800956e <_dtoa_r+0x7b6>
 8009564:	4651      	mov	r1, sl
 8009566:	4620      	mov	r0, r4
 8009568:	f000 fcce 	bl	8009f08 <__pow5mult>
 800956c:	4682      	mov	sl, r0
 800956e:	2101      	movs	r1, #1
 8009570:	4620      	mov	r0, r4
 8009572:	f000 fc09 	bl	8009d88 <__i2b>
 8009576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009578:	2b00      	cmp	r3, #0
 800957a:	4606      	mov	r6, r0
 800957c:	f340 8081 	ble.w	8009682 <_dtoa_r+0x8ca>
 8009580:	461a      	mov	r2, r3
 8009582:	4601      	mov	r1, r0
 8009584:	4620      	mov	r0, r4
 8009586:	f000 fcbf 	bl	8009f08 <__pow5mult>
 800958a:	9b07      	ldr	r3, [sp, #28]
 800958c:	2b01      	cmp	r3, #1
 800958e:	4606      	mov	r6, r0
 8009590:	dd7a      	ble.n	8009688 <_dtoa_r+0x8d0>
 8009592:	f04f 0800 	mov.w	r8, #0
 8009596:	6933      	ldr	r3, [r6, #16]
 8009598:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800959c:	6918      	ldr	r0, [r3, #16]
 800959e:	f000 fba5 	bl	8009cec <__hi0bits>
 80095a2:	f1c0 0020 	rsb	r0, r0, #32
 80095a6:	9b06      	ldr	r3, [sp, #24]
 80095a8:	4418      	add	r0, r3
 80095aa:	f010 001f 	ands.w	r0, r0, #31
 80095ae:	f000 8094 	beq.w	80096da <_dtoa_r+0x922>
 80095b2:	f1c0 0320 	rsb	r3, r0, #32
 80095b6:	2b04      	cmp	r3, #4
 80095b8:	f340 8085 	ble.w	80096c6 <_dtoa_r+0x90e>
 80095bc:	9b05      	ldr	r3, [sp, #20]
 80095be:	f1c0 001c 	rsb	r0, r0, #28
 80095c2:	4403      	add	r3, r0
 80095c4:	9305      	str	r3, [sp, #20]
 80095c6:	9b06      	ldr	r3, [sp, #24]
 80095c8:	4403      	add	r3, r0
 80095ca:	4405      	add	r5, r0
 80095cc:	9306      	str	r3, [sp, #24]
 80095ce:	9b05      	ldr	r3, [sp, #20]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	dd05      	ble.n	80095e0 <_dtoa_r+0x828>
 80095d4:	4651      	mov	r1, sl
 80095d6:	461a      	mov	r2, r3
 80095d8:	4620      	mov	r0, r4
 80095da:	f000 fcef 	bl	8009fbc <__lshift>
 80095de:	4682      	mov	sl, r0
 80095e0:	9b06      	ldr	r3, [sp, #24]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	dd05      	ble.n	80095f2 <_dtoa_r+0x83a>
 80095e6:	4631      	mov	r1, r6
 80095e8:	461a      	mov	r2, r3
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 fce6 	bl	8009fbc <__lshift>
 80095f0:	4606      	mov	r6, r0
 80095f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d072      	beq.n	80096de <_dtoa_r+0x926>
 80095f8:	4631      	mov	r1, r6
 80095fa:	4650      	mov	r0, sl
 80095fc:	f000 fd4a 	bl	800a094 <__mcmp>
 8009600:	2800      	cmp	r0, #0
 8009602:	da6c      	bge.n	80096de <_dtoa_r+0x926>
 8009604:	2300      	movs	r3, #0
 8009606:	4651      	mov	r1, sl
 8009608:	220a      	movs	r2, #10
 800960a:	4620      	mov	r0, r4
 800960c:	f000 fb28 	bl	8009c60 <__multadd>
 8009610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009612:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009616:	4682      	mov	sl, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 81b0 	beq.w	800997e <_dtoa_r+0xbc6>
 800961e:	2300      	movs	r3, #0
 8009620:	4639      	mov	r1, r7
 8009622:	220a      	movs	r2, #10
 8009624:	4620      	mov	r0, r4
 8009626:	f000 fb1b 	bl	8009c60 <__multadd>
 800962a:	9b01      	ldr	r3, [sp, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	4607      	mov	r7, r0
 8009630:	f300 8096 	bgt.w	8009760 <_dtoa_r+0x9a8>
 8009634:	9b07      	ldr	r3, [sp, #28]
 8009636:	2b02      	cmp	r3, #2
 8009638:	dc59      	bgt.n	80096ee <_dtoa_r+0x936>
 800963a:	e091      	b.n	8009760 <_dtoa_r+0x9a8>
 800963c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800963e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009642:	e758      	b.n	80094f6 <_dtoa_r+0x73e>
 8009644:	9b04      	ldr	r3, [sp, #16]
 8009646:	1e5e      	subs	r6, r3, #1
 8009648:	9b08      	ldr	r3, [sp, #32]
 800964a:	42b3      	cmp	r3, r6
 800964c:	bfbf      	itttt	lt
 800964e:	9b08      	ldrlt	r3, [sp, #32]
 8009650:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009652:	9608      	strlt	r6, [sp, #32]
 8009654:	1af3      	sublt	r3, r6, r3
 8009656:	bfb4      	ite	lt
 8009658:	18d2      	addlt	r2, r2, r3
 800965a:	1b9e      	subge	r6, r3, r6
 800965c:	9b04      	ldr	r3, [sp, #16]
 800965e:	bfbc      	itt	lt
 8009660:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009662:	2600      	movlt	r6, #0
 8009664:	2b00      	cmp	r3, #0
 8009666:	bfb7      	itett	lt
 8009668:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800966c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009670:	1a9d      	sublt	r5, r3, r2
 8009672:	2300      	movlt	r3, #0
 8009674:	e741      	b.n	80094fa <_dtoa_r+0x742>
 8009676:	9e08      	ldr	r6, [sp, #32]
 8009678:	9d05      	ldr	r5, [sp, #20]
 800967a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800967c:	e748      	b.n	8009510 <_dtoa_r+0x758>
 800967e:	9a08      	ldr	r2, [sp, #32]
 8009680:	e770      	b.n	8009564 <_dtoa_r+0x7ac>
 8009682:	9b07      	ldr	r3, [sp, #28]
 8009684:	2b01      	cmp	r3, #1
 8009686:	dc19      	bgt.n	80096bc <_dtoa_r+0x904>
 8009688:	9b02      	ldr	r3, [sp, #8]
 800968a:	b9bb      	cbnz	r3, 80096bc <_dtoa_r+0x904>
 800968c:	9b03      	ldr	r3, [sp, #12]
 800968e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009692:	b99b      	cbnz	r3, 80096bc <_dtoa_r+0x904>
 8009694:	9b03      	ldr	r3, [sp, #12]
 8009696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800969a:	0d1b      	lsrs	r3, r3, #20
 800969c:	051b      	lsls	r3, r3, #20
 800969e:	b183      	cbz	r3, 80096c2 <_dtoa_r+0x90a>
 80096a0:	9b05      	ldr	r3, [sp, #20]
 80096a2:	3301      	adds	r3, #1
 80096a4:	9305      	str	r3, [sp, #20]
 80096a6:	9b06      	ldr	r3, [sp, #24]
 80096a8:	3301      	adds	r3, #1
 80096aa:	9306      	str	r3, [sp, #24]
 80096ac:	f04f 0801 	mov.w	r8, #1
 80096b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f47f af6f 	bne.w	8009596 <_dtoa_r+0x7de>
 80096b8:	2001      	movs	r0, #1
 80096ba:	e774      	b.n	80095a6 <_dtoa_r+0x7ee>
 80096bc:	f04f 0800 	mov.w	r8, #0
 80096c0:	e7f6      	b.n	80096b0 <_dtoa_r+0x8f8>
 80096c2:	4698      	mov	r8, r3
 80096c4:	e7f4      	b.n	80096b0 <_dtoa_r+0x8f8>
 80096c6:	d082      	beq.n	80095ce <_dtoa_r+0x816>
 80096c8:	9a05      	ldr	r2, [sp, #20]
 80096ca:	331c      	adds	r3, #28
 80096cc:	441a      	add	r2, r3
 80096ce:	9205      	str	r2, [sp, #20]
 80096d0:	9a06      	ldr	r2, [sp, #24]
 80096d2:	441a      	add	r2, r3
 80096d4:	441d      	add	r5, r3
 80096d6:	9206      	str	r2, [sp, #24]
 80096d8:	e779      	b.n	80095ce <_dtoa_r+0x816>
 80096da:	4603      	mov	r3, r0
 80096dc:	e7f4      	b.n	80096c8 <_dtoa_r+0x910>
 80096de:	9b04      	ldr	r3, [sp, #16]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	dc37      	bgt.n	8009754 <_dtoa_r+0x99c>
 80096e4:	9b07      	ldr	r3, [sp, #28]
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	dd34      	ble.n	8009754 <_dtoa_r+0x99c>
 80096ea:	9b04      	ldr	r3, [sp, #16]
 80096ec:	9301      	str	r3, [sp, #4]
 80096ee:	9b01      	ldr	r3, [sp, #4]
 80096f0:	b963      	cbnz	r3, 800970c <_dtoa_r+0x954>
 80096f2:	4631      	mov	r1, r6
 80096f4:	2205      	movs	r2, #5
 80096f6:	4620      	mov	r0, r4
 80096f8:	f000 fab2 	bl	8009c60 <__multadd>
 80096fc:	4601      	mov	r1, r0
 80096fe:	4606      	mov	r6, r0
 8009700:	4650      	mov	r0, sl
 8009702:	f000 fcc7 	bl	800a094 <__mcmp>
 8009706:	2800      	cmp	r0, #0
 8009708:	f73f adbb 	bgt.w	8009282 <_dtoa_r+0x4ca>
 800970c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970e:	9d00      	ldr	r5, [sp, #0]
 8009710:	ea6f 0b03 	mvn.w	fp, r3
 8009714:	f04f 0800 	mov.w	r8, #0
 8009718:	4631      	mov	r1, r6
 800971a:	4620      	mov	r0, r4
 800971c:	f000 fa7e 	bl	8009c1c <_Bfree>
 8009720:	2f00      	cmp	r7, #0
 8009722:	f43f aeab 	beq.w	800947c <_dtoa_r+0x6c4>
 8009726:	f1b8 0f00 	cmp.w	r8, #0
 800972a:	d005      	beq.n	8009738 <_dtoa_r+0x980>
 800972c:	45b8      	cmp	r8, r7
 800972e:	d003      	beq.n	8009738 <_dtoa_r+0x980>
 8009730:	4641      	mov	r1, r8
 8009732:	4620      	mov	r0, r4
 8009734:	f000 fa72 	bl	8009c1c <_Bfree>
 8009738:	4639      	mov	r1, r7
 800973a:	4620      	mov	r0, r4
 800973c:	f000 fa6e 	bl	8009c1c <_Bfree>
 8009740:	e69c      	b.n	800947c <_dtoa_r+0x6c4>
 8009742:	2600      	movs	r6, #0
 8009744:	4637      	mov	r7, r6
 8009746:	e7e1      	b.n	800970c <_dtoa_r+0x954>
 8009748:	46bb      	mov	fp, r7
 800974a:	4637      	mov	r7, r6
 800974c:	e599      	b.n	8009282 <_dtoa_r+0x4ca>
 800974e:	bf00      	nop
 8009750:	40240000 	.word	0x40240000
 8009754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 80c8 	beq.w	80098ec <_dtoa_r+0xb34>
 800975c:	9b04      	ldr	r3, [sp, #16]
 800975e:	9301      	str	r3, [sp, #4]
 8009760:	2d00      	cmp	r5, #0
 8009762:	dd05      	ble.n	8009770 <_dtoa_r+0x9b8>
 8009764:	4639      	mov	r1, r7
 8009766:	462a      	mov	r2, r5
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fc27 	bl	8009fbc <__lshift>
 800976e:	4607      	mov	r7, r0
 8009770:	f1b8 0f00 	cmp.w	r8, #0
 8009774:	d05b      	beq.n	800982e <_dtoa_r+0xa76>
 8009776:	6879      	ldr	r1, [r7, #4]
 8009778:	4620      	mov	r0, r4
 800977a:	f000 fa0f 	bl	8009b9c <_Balloc>
 800977e:	4605      	mov	r5, r0
 8009780:	b928      	cbnz	r0, 800978e <_dtoa_r+0x9d6>
 8009782:	4b83      	ldr	r3, [pc, #524]	; (8009990 <_dtoa_r+0xbd8>)
 8009784:	4602      	mov	r2, r0
 8009786:	f240 21ef 	movw	r1, #751	; 0x2ef
 800978a:	f7ff bb2e 	b.w	8008dea <_dtoa_r+0x32>
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	3202      	adds	r2, #2
 8009792:	0092      	lsls	r2, r2, #2
 8009794:	f107 010c 	add.w	r1, r7, #12
 8009798:	300c      	adds	r0, #12
 800979a:	f001 f801 	bl	800a7a0 <memcpy>
 800979e:	2201      	movs	r2, #1
 80097a0:	4629      	mov	r1, r5
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 fc0a 	bl	8009fbc <__lshift>
 80097a8:	9b00      	ldr	r3, [sp, #0]
 80097aa:	3301      	adds	r3, #1
 80097ac:	9304      	str	r3, [sp, #16]
 80097ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097b2:	4413      	add	r3, r2
 80097b4:	9308      	str	r3, [sp, #32]
 80097b6:	9b02      	ldr	r3, [sp, #8]
 80097b8:	f003 0301 	and.w	r3, r3, #1
 80097bc:	46b8      	mov	r8, r7
 80097be:	9306      	str	r3, [sp, #24]
 80097c0:	4607      	mov	r7, r0
 80097c2:	9b04      	ldr	r3, [sp, #16]
 80097c4:	4631      	mov	r1, r6
 80097c6:	3b01      	subs	r3, #1
 80097c8:	4650      	mov	r0, sl
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	f7ff fa69 	bl	8008ca2 <quorem>
 80097d0:	4641      	mov	r1, r8
 80097d2:	9002      	str	r0, [sp, #8]
 80097d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80097d8:	4650      	mov	r0, sl
 80097da:	f000 fc5b 	bl	800a094 <__mcmp>
 80097de:	463a      	mov	r2, r7
 80097e0:	9005      	str	r0, [sp, #20]
 80097e2:	4631      	mov	r1, r6
 80097e4:	4620      	mov	r0, r4
 80097e6:	f000 fc71 	bl	800a0cc <__mdiff>
 80097ea:	68c2      	ldr	r2, [r0, #12]
 80097ec:	4605      	mov	r5, r0
 80097ee:	bb02      	cbnz	r2, 8009832 <_dtoa_r+0xa7a>
 80097f0:	4601      	mov	r1, r0
 80097f2:	4650      	mov	r0, sl
 80097f4:	f000 fc4e 	bl	800a094 <__mcmp>
 80097f8:	4602      	mov	r2, r0
 80097fa:	4629      	mov	r1, r5
 80097fc:	4620      	mov	r0, r4
 80097fe:	9209      	str	r2, [sp, #36]	; 0x24
 8009800:	f000 fa0c 	bl	8009c1c <_Bfree>
 8009804:	9b07      	ldr	r3, [sp, #28]
 8009806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009808:	9d04      	ldr	r5, [sp, #16]
 800980a:	ea43 0102 	orr.w	r1, r3, r2
 800980e:	9b06      	ldr	r3, [sp, #24]
 8009810:	4319      	orrs	r1, r3
 8009812:	d110      	bne.n	8009836 <_dtoa_r+0xa7e>
 8009814:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009818:	d029      	beq.n	800986e <_dtoa_r+0xab6>
 800981a:	9b05      	ldr	r3, [sp, #20]
 800981c:	2b00      	cmp	r3, #0
 800981e:	dd02      	ble.n	8009826 <_dtoa_r+0xa6e>
 8009820:	9b02      	ldr	r3, [sp, #8]
 8009822:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009826:	9b01      	ldr	r3, [sp, #4]
 8009828:	f883 9000 	strb.w	r9, [r3]
 800982c:	e774      	b.n	8009718 <_dtoa_r+0x960>
 800982e:	4638      	mov	r0, r7
 8009830:	e7ba      	b.n	80097a8 <_dtoa_r+0x9f0>
 8009832:	2201      	movs	r2, #1
 8009834:	e7e1      	b.n	80097fa <_dtoa_r+0xa42>
 8009836:	9b05      	ldr	r3, [sp, #20]
 8009838:	2b00      	cmp	r3, #0
 800983a:	db04      	blt.n	8009846 <_dtoa_r+0xa8e>
 800983c:	9907      	ldr	r1, [sp, #28]
 800983e:	430b      	orrs	r3, r1
 8009840:	9906      	ldr	r1, [sp, #24]
 8009842:	430b      	orrs	r3, r1
 8009844:	d120      	bne.n	8009888 <_dtoa_r+0xad0>
 8009846:	2a00      	cmp	r2, #0
 8009848:	dded      	ble.n	8009826 <_dtoa_r+0xa6e>
 800984a:	4651      	mov	r1, sl
 800984c:	2201      	movs	r2, #1
 800984e:	4620      	mov	r0, r4
 8009850:	f000 fbb4 	bl	8009fbc <__lshift>
 8009854:	4631      	mov	r1, r6
 8009856:	4682      	mov	sl, r0
 8009858:	f000 fc1c 	bl	800a094 <__mcmp>
 800985c:	2800      	cmp	r0, #0
 800985e:	dc03      	bgt.n	8009868 <_dtoa_r+0xab0>
 8009860:	d1e1      	bne.n	8009826 <_dtoa_r+0xa6e>
 8009862:	f019 0f01 	tst.w	r9, #1
 8009866:	d0de      	beq.n	8009826 <_dtoa_r+0xa6e>
 8009868:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800986c:	d1d8      	bne.n	8009820 <_dtoa_r+0xa68>
 800986e:	9a01      	ldr	r2, [sp, #4]
 8009870:	2339      	movs	r3, #57	; 0x39
 8009872:	7013      	strb	r3, [r2, #0]
 8009874:	462b      	mov	r3, r5
 8009876:	461d      	mov	r5, r3
 8009878:	3b01      	subs	r3, #1
 800987a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800987e:	2a39      	cmp	r2, #57	; 0x39
 8009880:	d06c      	beq.n	800995c <_dtoa_r+0xba4>
 8009882:	3201      	adds	r2, #1
 8009884:	701a      	strb	r2, [r3, #0]
 8009886:	e747      	b.n	8009718 <_dtoa_r+0x960>
 8009888:	2a00      	cmp	r2, #0
 800988a:	dd07      	ble.n	800989c <_dtoa_r+0xae4>
 800988c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009890:	d0ed      	beq.n	800986e <_dtoa_r+0xab6>
 8009892:	9a01      	ldr	r2, [sp, #4]
 8009894:	f109 0301 	add.w	r3, r9, #1
 8009898:	7013      	strb	r3, [r2, #0]
 800989a:	e73d      	b.n	8009718 <_dtoa_r+0x960>
 800989c:	9b04      	ldr	r3, [sp, #16]
 800989e:	9a08      	ldr	r2, [sp, #32]
 80098a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d043      	beq.n	8009930 <_dtoa_r+0xb78>
 80098a8:	4651      	mov	r1, sl
 80098aa:	2300      	movs	r3, #0
 80098ac:	220a      	movs	r2, #10
 80098ae:	4620      	mov	r0, r4
 80098b0:	f000 f9d6 	bl	8009c60 <__multadd>
 80098b4:	45b8      	cmp	r8, r7
 80098b6:	4682      	mov	sl, r0
 80098b8:	f04f 0300 	mov.w	r3, #0
 80098bc:	f04f 020a 	mov.w	r2, #10
 80098c0:	4641      	mov	r1, r8
 80098c2:	4620      	mov	r0, r4
 80098c4:	d107      	bne.n	80098d6 <_dtoa_r+0xb1e>
 80098c6:	f000 f9cb 	bl	8009c60 <__multadd>
 80098ca:	4680      	mov	r8, r0
 80098cc:	4607      	mov	r7, r0
 80098ce:	9b04      	ldr	r3, [sp, #16]
 80098d0:	3301      	adds	r3, #1
 80098d2:	9304      	str	r3, [sp, #16]
 80098d4:	e775      	b.n	80097c2 <_dtoa_r+0xa0a>
 80098d6:	f000 f9c3 	bl	8009c60 <__multadd>
 80098da:	4639      	mov	r1, r7
 80098dc:	4680      	mov	r8, r0
 80098de:	2300      	movs	r3, #0
 80098e0:	220a      	movs	r2, #10
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 f9bc 	bl	8009c60 <__multadd>
 80098e8:	4607      	mov	r7, r0
 80098ea:	e7f0      	b.n	80098ce <_dtoa_r+0xb16>
 80098ec:	9b04      	ldr	r3, [sp, #16]
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	9d00      	ldr	r5, [sp, #0]
 80098f2:	4631      	mov	r1, r6
 80098f4:	4650      	mov	r0, sl
 80098f6:	f7ff f9d4 	bl	8008ca2 <quorem>
 80098fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80098fe:	9b00      	ldr	r3, [sp, #0]
 8009900:	f805 9b01 	strb.w	r9, [r5], #1
 8009904:	1aea      	subs	r2, r5, r3
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	4293      	cmp	r3, r2
 800990a:	dd07      	ble.n	800991c <_dtoa_r+0xb64>
 800990c:	4651      	mov	r1, sl
 800990e:	2300      	movs	r3, #0
 8009910:	220a      	movs	r2, #10
 8009912:	4620      	mov	r0, r4
 8009914:	f000 f9a4 	bl	8009c60 <__multadd>
 8009918:	4682      	mov	sl, r0
 800991a:	e7ea      	b.n	80098f2 <_dtoa_r+0xb3a>
 800991c:	9b01      	ldr	r3, [sp, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	bfc8      	it	gt
 8009922:	461d      	movgt	r5, r3
 8009924:	9b00      	ldr	r3, [sp, #0]
 8009926:	bfd8      	it	le
 8009928:	2501      	movle	r5, #1
 800992a:	441d      	add	r5, r3
 800992c:	f04f 0800 	mov.w	r8, #0
 8009930:	4651      	mov	r1, sl
 8009932:	2201      	movs	r2, #1
 8009934:	4620      	mov	r0, r4
 8009936:	f000 fb41 	bl	8009fbc <__lshift>
 800993a:	4631      	mov	r1, r6
 800993c:	4682      	mov	sl, r0
 800993e:	f000 fba9 	bl	800a094 <__mcmp>
 8009942:	2800      	cmp	r0, #0
 8009944:	dc96      	bgt.n	8009874 <_dtoa_r+0xabc>
 8009946:	d102      	bne.n	800994e <_dtoa_r+0xb96>
 8009948:	f019 0f01 	tst.w	r9, #1
 800994c:	d192      	bne.n	8009874 <_dtoa_r+0xabc>
 800994e:	462b      	mov	r3, r5
 8009950:	461d      	mov	r5, r3
 8009952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009956:	2a30      	cmp	r2, #48	; 0x30
 8009958:	d0fa      	beq.n	8009950 <_dtoa_r+0xb98>
 800995a:	e6dd      	b.n	8009718 <_dtoa_r+0x960>
 800995c:	9a00      	ldr	r2, [sp, #0]
 800995e:	429a      	cmp	r2, r3
 8009960:	d189      	bne.n	8009876 <_dtoa_r+0xabe>
 8009962:	f10b 0b01 	add.w	fp, fp, #1
 8009966:	2331      	movs	r3, #49	; 0x31
 8009968:	e796      	b.n	8009898 <_dtoa_r+0xae0>
 800996a:	4b0a      	ldr	r3, [pc, #40]	; (8009994 <_dtoa_r+0xbdc>)
 800996c:	f7ff ba99 	b.w	8008ea2 <_dtoa_r+0xea>
 8009970:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009972:	2b00      	cmp	r3, #0
 8009974:	f47f aa6d 	bne.w	8008e52 <_dtoa_r+0x9a>
 8009978:	4b07      	ldr	r3, [pc, #28]	; (8009998 <_dtoa_r+0xbe0>)
 800997a:	f7ff ba92 	b.w	8008ea2 <_dtoa_r+0xea>
 800997e:	9b01      	ldr	r3, [sp, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	dcb5      	bgt.n	80098f0 <_dtoa_r+0xb38>
 8009984:	9b07      	ldr	r3, [sp, #28]
 8009986:	2b02      	cmp	r3, #2
 8009988:	f73f aeb1 	bgt.w	80096ee <_dtoa_r+0x936>
 800998c:	e7b0      	b.n	80098f0 <_dtoa_r+0xb38>
 800998e:	bf00      	nop
 8009990:	0800aaa0 	.word	0x0800aaa0
 8009994:	0800aa00 	.word	0x0800aa00
 8009998:	0800aa24 	.word	0x0800aa24

0800999c <_free_r>:
 800999c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800999e:	2900      	cmp	r1, #0
 80099a0:	d044      	beq.n	8009a2c <_free_r+0x90>
 80099a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099a6:	9001      	str	r0, [sp, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f1a1 0404 	sub.w	r4, r1, #4
 80099ae:	bfb8      	it	lt
 80099b0:	18e4      	addlt	r4, r4, r3
 80099b2:	f000 f8e7 	bl	8009b84 <__malloc_lock>
 80099b6:	4a1e      	ldr	r2, [pc, #120]	; (8009a30 <_free_r+0x94>)
 80099b8:	9801      	ldr	r0, [sp, #4]
 80099ba:	6813      	ldr	r3, [r2, #0]
 80099bc:	b933      	cbnz	r3, 80099cc <_free_r+0x30>
 80099be:	6063      	str	r3, [r4, #4]
 80099c0:	6014      	str	r4, [r2, #0]
 80099c2:	b003      	add	sp, #12
 80099c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099c8:	f000 b8e2 	b.w	8009b90 <__malloc_unlock>
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	d908      	bls.n	80099e2 <_free_r+0x46>
 80099d0:	6825      	ldr	r5, [r4, #0]
 80099d2:	1961      	adds	r1, r4, r5
 80099d4:	428b      	cmp	r3, r1
 80099d6:	bf01      	itttt	eq
 80099d8:	6819      	ldreq	r1, [r3, #0]
 80099da:	685b      	ldreq	r3, [r3, #4]
 80099dc:	1949      	addeq	r1, r1, r5
 80099de:	6021      	streq	r1, [r4, #0]
 80099e0:	e7ed      	b.n	80099be <_free_r+0x22>
 80099e2:	461a      	mov	r2, r3
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	b10b      	cbz	r3, 80099ec <_free_r+0x50>
 80099e8:	42a3      	cmp	r3, r4
 80099ea:	d9fa      	bls.n	80099e2 <_free_r+0x46>
 80099ec:	6811      	ldr	r1, [r2, #0]
 80099ee:	1855      	adds	r5, r2, r1
 80099f0:	42a5      	cmp	r5, r4
 80099f2:	d10b      	bne.n	8009a0c <_free_r+0x70>
 80099f4:	6824      	ldr	r4, [r4, #0]
 80099f6:	4421      	add	r1, r4
 80099f8:	1854      	adds	r4, r2, r1
 80099fa:	42a3      	cmp	r3, r4
 80099fc:	6011      	str	r1, [r2, #0]
 80099fe:	d1e0      	bne.n	80099c2 <_free_r+0x26>
 8009a00:	681c      	ldr	r4, [r3, #0]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	6053      	str	r3, [r2, #4]
 8009a06:	440c      	add	r4, r1
 8009a08:	6014      	str	r4, [r2, #0]
 8009a0a:	e7da      	b.n	80099c2 <_free_r+0x26>
 8009a0c:	d902      	bls.n	8009a14 <_free_r+0x78>
 8009a0e:	230c      	movs	r3, #12
 8009a10:	6003      	str	r3, [r0, #0]
 8009a12:	e7d6      	b.n	80099c2 <_free_r+0x26>
 8009a14:	6825      	ldr	r5, [r4, #0]
 8009a16:	1961      	adds	r1, r4, r5
 8009a18:	428b      	cmp	r3, r1
 8009a1a:	bf04      	itt	eq
 8009a1c:	6819      	ldreq	r1, [r3, #0]
 8009a1e:	685b      	ldreq	r3, [r3, #4]
 8009a20:	6063      	str	r3, [r4, #4]
 8009a22:	bf04      	itt	eq
 8009a24:	1949      	addeq	r1, r1, r5
 8009a26:	6021      	streq	r1, [r4, #0]
 8009a28:	6054      	str	r4, [r2, #4]
 8009a2a:	e7ca      	b.n	80099c2 <_free_r+0x26>
 8009a2c:	b003      	add	sp, #12
 8009a2e:	bd30      	pop	{r4, r5, pc}
 8009a30:	20000714 	.word	0x20000714

08009a34 <malloc>:
 8009a34:	4b02      	ldr	r3, [pc, #8]	; (8009a40 <malloc+0xc>)
 8009a36:	4601      	mov	r1, r0
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	f000 b823 	b.w	8009a84 <_malloc_r>
 8009a3e:	bf00      	nop
 8009a40:	20000068 	.word	0x20000068

08009a44 <sbrk_aligned>:
 8009a44:	b570      	push	{r4, r5, r6, lr}
 8009a46:	4e0e      	ldr	r6, [pc, #56]	; (8009a80 <sbrk_aligned+0x3c>)
 8009a48:	460c      	mov	r4, r1
 8009a4a:	6831      	ldr	r1, [r6, #0]
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	b911      	cbnz	r1, 8009a56 <sbrk_aligned+0x12>
 8009a50:	f000 fe96 	bl	800a780 <_sbrk_r>
 8009a54:	6030      	str	r0, [r6, #0]
 8009a56:	4621      	mov	r1, r4
 8009a58:	4628      	mov	r0, r5
 8009a5a:	f000 fe91 	bl	800a780 <_sbrk_r>
 8009a5e:	1c43      	adds	r3, r0, #1
 8009a60:	d00a      	beq.n	8009a78 <sbrk_aligned+0x34>
 8009a62:	1cc4      	adds	r4, r0, #3
 8009a64:	f024 0403 	bic.w	r4, r4, #3
 8009a68:	42a0      	cmp	r0, r4
 8009a6a:	d007      	beq.n	8009a7c <sbrk_aligned+0x38>
 8009a6c:	1a21      	subs	r1, r4, r0
 8009a6e:	4628      	mov	r0, r5
 8009a70:	f000 fe86 	bl	800a780 <_sbrk_r>
 8009a74:	3001      	adds	r0, #1
 8009a76:	d101      	bne.n	8009a7c <sbrk_aligned+0x38>
 8009a78:	f04f 34ff 	mov.w	r4, #4294967295
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	bd70      	pop	{r4, r5, r6, pc}
 8009a80:	20000718 	.word	0x20000718

08009a84 <_malloc_r>:
 8009a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a88:	1ccd      	adds	r5, r1, #3
 8009a8a:	f025 0503 	bic.w	r5, r5, #3
 8009a8e:	3508      	adds	r5, #8
 8009a90:	2d0c      	cmp	r5, #12
 8009a92:	bf38      	it	cc
 8009a94:	250c      	movcc	r5, #12
 8009a96:	2d00      	cmp	r5, #0
 8009a98:	4607      	mov	r7, r0
 8009a9a:	db01      	blt.n	8009aa0 <_malloc_r+0x1c>
 8009a9c:	42a9      	cmp	r1, r5
 8009a9e:	d905      	bls.n	8009aac <_malloc_r+0x28>
 8009aa0:	230c      	movs	r3, #12
 8009aa2:	603b      	str	r3, [r7, #0]
 8009aa4:	2600      	movs	r6, #0
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009b80 <_malloc_r+0xfc>
 8009ab0:	f000 f868 	bl	8009b84 <__malloc_lock>
 8009ab4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ab8:	461c      	mov	r4, r3
 8009aba:	bb5c      	cbnz	r4, 8009b14 <_malloc_r+0x90>
 8009abc:	4629      	mov	r1, r5
 8009abe:	4638      	mov	r0, r7
 8009ac0:	f7ff ffc0 	bl	8009a44 <sbrk_aligned>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	d155      	bne.n	8009b76 <_malloc_r+0xf2>
 8009aca:	f8d8 4000 	ldr.w	r4, [r8]
 8009ace:	4626      	mov	r6, r4
 8009ad0:	2e00      	cmp	r6, #0
 8009ad2:	d145      	bne.n	8009b60 <_malloc_r+0xdc>
 8009ad4:	2c00      	cmp	r4, #0
 8009ad6:	d048      	beq.n	8009b6a <_malloc_r+0xe6>
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	4631      	mov	r1, r6
 8009adc:	4638      	mov	r0, r7
 8009ade:	eb04 0903 	add.w	r9, r4, r3
 8009ae2:	f000 fe4d 	bl	800a780 <_sbrk_r>
 8009ae6:	4581      	cmp	r9, r0
 8009ae8:	d13f      	bne.n	8009b6a <_malloc_r+0xe6>
 8009aea:	6821      	ldr	r1, [r4, #0]
 8009aec:	1a6d      	subs	r5, r5, r1
 8009aee:	4629      	mov	r1, r5
 8009af0:	4638      	mov	r0, r7
 8009af2:	f7ff ffa7 	bl	8009a44 <sbrk_aligned>
 8009af6:	3001      	adds	r0, #1
 8009af8:	d037      	beq.n	8009b6a <_malloc_r+0xe6>
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	442b      	add	r3, r5
 8009afe:	6023      	str	r3, [r4, #0]
 8009b00:	f8d8 3000 	ldr.w	r3, [r8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d038      	beq.n	8009b7a <_malloc_r+0xf6>
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	42a2      	cmp	r2, r4
 8009b0c:	d12b      	bne.n	8009b66 <_malloc_r+0xe2>
 8009b0e:	2200      	movs	r2, #0
 8009b10:	605a      	str	r2, [r3, #4]
 8009b12:	e00f      	b.n	8009b34 <_malloc_r+0xb0>
 8009b14:	6822      	ldr	r2, [r4, #0]
 8009b16:	1b52      	subs	r2, r2, r5
 8009b18:	d41f      	bmi.n	8009b5a <_malloc_r+0xd6>
 8009b1a:	2a0b      	cmp	r2, #11
 8009b1c:	d917      	bls.n	8009b4e <_malloc_r+0xca>
 8009b1e:	1961      	adds	r1, r4, r5
 8009b20:	42a3      	cmp	r3, r4
 8009b22:	6025      	str	r5, [r4, #0]
 8009b24:	bf18      	it	ne
 8009b26:	6059      	strne	r1, [r3, #4]
 8009b28:	6863      	ldr	r3, [r4, #4]
 8009b2a:	bf08      	it	eq
 8009b2c:	f8c8 1000 	streq.w	r1, [r8]
 8009b30:	5162      	str	r2, [r4, r5]
 8009b32:	604b      	str	r3, [r1, #4]
 8009b34:	4638      	mov	r0, r7
 8009b36:	f104 060b 	add.w	r6, r4, #11
 8009b3a:	f000 f829 	bl	8009b90 <__malloc_unlock>
 8009b3e:	f026 0607 	bic.w	r6, r6, #7
 8009b42:	1d23      	adds	r3, r4, #4
 8009b44:	1af2      	subs	r2, r6, r3
 8009b46:	d0ae      	beq.n	8009aa6 <_malloc_r+0x22>
 8009b48:	1b9b      	subs	r3, r3, r6
 8009b4a:	50a3      	str	r3, [r4, r2]
 8009b4c:	e7ab      	b.n	8009aa6 <_malloc_r+0x22>
 8009b4e:	42a3      	cmp	r3, r4
 8009b50:	6862      	ldr	r2, [r4, #4]
 8009b52:	d1dd      	bne.n	8009b10 <_malloc_r+0x8c>
 8009b54:	f8c8 2000 	str.w	r2, [r8]
 8009b58:	e7ec      	b.n	8009b34 <_malloc_r+0xb0>
 8009b5a:	4623      	mov	r3, r4
 8009b5c:	6864      	ldr	r4, [r4, #4]
 8009b5e:	e7ac      	b.n	8009aba <_malloc_r+0x36>
 8009b60:	4634      	mov	r4, r6
 8009b62:	6876      	ldr	r6, [r6, #4]
 8009b64:	e7b4      	b.n	8009ad0 <_malloc_r+0x4c>
 8009b66:	4613      	mov	r3, r2
 8009b68:	e7cc      	b.n	8009b04 <_malloc_r+0x80>
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	603b      	str	r3, [r7, #0]
 8009b6e:	4638      	mov	r0, r7
 8009b70:	f000 f80e 	bl	8009b90 <__malloc_unlock>
 8009b74:	e797      	b.n	8009aa6 <_malloc_r+0x22>
 8009b76:	6025      	str	r5, [r4, #0]
 8009b78:	e7dc      	b.n	8009b34 <_malloc_r+0xb0>
 8009b7a:	605b      	str	r3, [r3, #4]
 8009b7c:	deff      	udf	#255	; 0xff
 8009b7e:	bf00      	nop
 8009b80:	20000714 	.word	0x20000714

08009b84 <__malloc_lock>:
 8009b84:	4801      	ldr	r0, [pc, #4]	; (8009b8c <__malloc_lock+0x8>)
 8009b86:	f7ff b88a 	b.w	8008c9e <__retarget_lock_acquire_recursive>
 8009b8a:	bf00      	nop
 8009b8c:	20000710 	.word	0x20000710

08009b90 <__malloc_unlock>:
 8009b90:	4801      	ldr	r0, [pc, #4]	; (8009b98 <__malloc_unlock+0x8>)
 8009b92:	f7ff b885 	b.w	8008ca0 <__retarget_lock_release_recursive>
 8009b96:	bf00      	nop
 8009b98:	20000710 	.word	0x20000710

08009b9c <_Balloc>:
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	69c6      	ldr	r6, [r0, #28]
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	460d      	mov	r5, r1
 8009ba4:	b976      	cbnz	r6, 8009bc4 <_Balloc+0x28>
 8009ba6:	2010      	movs	r0, #16
 8009ba8:	f7ff ff44 	bl	8009a34 <malloc>
 8009bac:	4602      	mov	r2, r0
 8009bae:	61e0      	str	r0, [r4, #28]
 8009bb0:	b920      	cbnz	r0, 8009bbc <_Balloc+0x20>
 8009bb2:	4b18      	ldr	r3, [pc, #96]	; (8009c14 <_Balloc+0x78>)
 8009bb4:	4818      	ldr	r0, [pc, #96]	; (8009c18 <_Balloc+0x7c>)
 8009bb6:	216b      	movs	r1, #107	; 0x6b
 8009bb8:	f000 fe00 	bl	800a7bc <__assert_func>
 8009bbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bc0:	6006      	str	r6, [r0, #0]
 8009bc2:	60c6      	str	r6, [r0, #12]
 8009bc4:	69e6      	ldr	r6, [r4, #28]
 8009bc6:	68f3      	ldr	r3, [r6, #12]
 8009bc8:	b183      	cbz	r3, 8009bec <_Balloc+0x50>
 8009bca:	69e3      	ldr	r3, [r4, #28]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009bd2:	b9b8      	cbnz	r0, 8009c04 <_Balloc+0x68>
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	fa01 f605 	lsl.w	r6, r1, r5
 8009bda:	1d72      	adds	r2, r6, #5
 8009bdc:	0092      	lsls	r2, r2, #2
 8009bde:	4620      	mov	r0, r4
 8009be0:	f000 fe0a 	bl	800a7f8 <_calloc_r>
 8009be4:	b160      	cbz	r0, 8009c00 <_Balloc+0x64>
 8009be6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009bea:	e00e      	b.n	8009c0a <_Balloc+0x6e>
 8009bec:	2221      	movs	r2, #33	; 0x21
 8009bee:	2104      	movs	r1, #4
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f000 fe01 	bl	800a7f8 <_calloc_r>
 8009bf6:	69e3      	ldr	r3, [r4, #28]
 8009bf8:	60f0      	str	r0, [r6, #12]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1e4      	bne.n	8009bca <_Balloc+0x2e>
 8009c00:	2000      	movs	r0, #0
 8009c02:	bd70      	pop	{r4, r5, r6, pc}
 8009c04:	6802      	ldr	r2, [r0, #0]
 8009c06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c10:	e7f7      	b.n	8009c02 <_Balloc+0x66>
 8009c12:	bf00      	nop
 8009c14:	0800aa31 	.word	0x0800aa31
 8009c18:	0800aab1 	.word	0x0800aab1

08009c1c <_Bfree>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	69c6      	ldr	r6, [r0, #28]
 8009c20:	4605      	mov	r5, r0
 8009c22:	460c      	mov	r4, r1
 8009c24:	b976      	cbnz	r6, 8009c44 <_Bfree+0x28>
 8009c26:	2010      	movs	r0, #16
 8009c28:	f7ff ff04 	bl	8009a34 <malloc>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	61e8      	str	r0, [r5, #28]
 8009c30:	b920      	cbnz	r0, 8009c3c <_Bfree+0x20>
 8009c32:	4b09      	ldr	r3, [pc, #36]	; (8009c58 <_Bfree+0x3c>)
 8009c34:	4809      	ldr	r0, [pc, #36]	; (8009c5c <_Bfree+0x40>)
 8009c36:	218f      	movs	r1, #143	; 0x8f
 8009c38:	f000 fdc0 	bl	800a7bc <__assert_func>
 8009c3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c40:	6006      	str	r6, [r0, #0]
 8009c42:	60c6      	str	r6, [r0, #12]
 8009c44:	b13c      	cbz	r4, 8009c56 <_Bfree+0x3a>
 8009c46:	69eb      	ldr	r3, [r5, #28]
 8009c48:	6862      	ldr	r2, [r4, #4]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c50:	6021      	str	r1, [r4, #0]
 8009c52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c56:	bd70      	pop	{r4, r5, r6, pc}
 8009c58:	0800aa31 	.word	0x0800aa31
 8009c5c:	0800aab1 	.word	0x0800aab1

08009c60 <__multadd>:
 8009c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c64:	690d      	ldr	r5, [r1, #16]
 8009c66:	4607      	mov	r7, r0
 8009c68:	460c      	mov	r4, r1
 8009c6a:	461e      	mov	r6, r3
 8009c6c:	f101 0c14 	add.w	ip, r1, #20
 8009c70:	2000      	movs	r0, #0
 8009c72:	f8dc 3000 	ldr.w	r3, [ip]
 8009c76:	b299      	uxth	r1, r3
 8009c78:	fb02 6101 	mla	r1, r2, r1, r6
 8009c7c:	0c1e      	lsrs	r6, r3, #16
 8009c7e:	0c0b      	lsrs	r3, r1, #16
 8009c80:	fb02 3306 	mla	r3, r2, r6, r3
 8009c84:	b289      	uxth	r1, r1
 8009c86:	3001      	adds	r0, #1
 8009c88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c8c:	4285      	cmp	r5, r0
 8009c8e:	f84c 1b04 	str.w	r1, [ip], #4
 8009c92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c96:	dcec      	bgt.n	8009c72 <__multadd+0x12>
 8009c98:	b30e      	cbz	r6, 8009cde <__multadd+0x7e>
 8009c9a:	68a3      	ldr	r3, [r4, #8]
 8009c9c:	42ab      	cmp	r3, r5
 8009c9e:	dc19      	bgt.n	8009cd4 <__multadd+0x74>
 8009ca0:	6861      	ldr	r1, [r4, #4]
 8009ca2:	4638      	mov	r0, r7
 8009ca4:	3101      	adds	r1, #1
 8009ca6:	f7ff ff79 	bl	8009b9c <_Balloc>
 8009caa:	4680      	mov	r8, r0
 8009cac:	b928      	cbnz	r0, 8009cba <__multadd+0x5a>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	4b0c      	ldr	r3, [pc, #48]	; (8009ce4 <__multadd+0x84>)
 8009cb2:	480d      	ldr	r0, [pc, #52]	; (8009ce8 <__multadd+0x88>)
 8009cb4:	21ba      	movs	r1, #186	; 0xba
 8009cb6:	f000 fd81 	bl	800a7bc <__assert_func>
 8009cba:	6922      	ldr	r2, [r4, #16]
 8009cbc:	3202      	adds	r2, #2
 8009cbe:	f104 010c 	add.w	r1, r4, #12
 8009cc2:	0092      	lsls	r2, r2, #2
 8009cc4:	300c      	adds	r0, #12
 8009cc6:	f000 fd6b 	bl	800a7a0 <memcpy>
 8009cca:	4621      	mov	r1, r4
 8009ccc:	4638      	mov	r0, r7
 8009cce:	f7ff ffa5 	bl	8009c1c <_Bfree>
 8009cd2:	4644      	mov	r4, r8
 8009cd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009cd8:	3501      	adds	r5, #1
 8009cda:	615e      	str	r6, [r3, #20]
 8009cdc:	6125      	str	r5, [r4, #16]
 8009cde:	4620      	mov	r0, r4
 8009ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce4:	0800aaa0 	.word	0x0800aaa0
 8009ce8:	0800aab1 	.word	0x0800aab1

08009cec <__hi0bits>:
 8009cec:	0c03      	lsrs	r3, r0, #16
 8009cee:	041b      	lsls	r3, r3, #16
 8009cf0:	b9d3      	cbnz	r3, 8009d28 <__hi0bits+0x3c>
 8009cf2:	0400      	lsls	r0, r0, #16
 8009cf4:	2310      	movs	r3, #16
 8009cf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009cfa:	bf04      	itt	eq
 8009cfc:	0200      	lsleq	r0, r0, #8
 8009cfe:	3308      	addeq	r3, #8
 8009d00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d04:	bf04      	itt	eq
 8009d06:	0100      	lsleq	r0, r0, #4
 8009d08:	3304      	addeq	r3, #4
 8009d0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d0e:	bf04      	itt	eq
 8009d10:	0080      	lsleq	r0, r0, #2
 8009d12:	3302      	addeq	r3, #2
 8009d14:	2800      	cmp	r0, #0
 8009d16:	db05      	blt.n	8009d24 <__hi0bits+0x38>
 8009d18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d1c:	f103 0301 	add.w	r3, r3, #1
 8009d20:	bf08      	it	eq
 8009d22:	2320      	moveq	r3, #32
 8009d24:	4618      	mov	r0, r3
 8009d26:	4770      	bx	lr
 8009d28:	2300      	movs	r3, #0
 8009d2a:	e7e4      	b.n	8009cf6 <__hi0bits+0xa>

08009d2c <__lo0bits>:
 8009d2c:	6803      	ldr	r3, [r0, #0]
 8009d2e:	f013 0207 	ands.w	r2, r3, #7
 8009d32:	d00c      	beq.n	8009d4e <__lo0bits+0x22>
 8009d34:	07d9      	lsls	r1, r3, #31
 8009d36:	d422      	bmi.n	8009d7e <__lo0bits+0x52>
 8009d38:	079a      	lsls	r2, r3, #30
 8009d3a:	bf49      	itett	mi
 8009d3c:	085b      	lsrmi	r3, r3, #1
 8009d3e:	089b      	lsrpl	r3, r3, #2
 8009d40:	6003      	strmi	r3, [r0, #0]
 8009d42:	2201      	movmi	r2, #1
 8009d44:	bf5c      	itt	pl
 8009d46:	6003      	strpl	r3, [r0, #0]
 8009d48:	2202      	movpl	r2, #2
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	4770      	bx	lr
 8009d4e:	b299      	uxth	r1, r3
 8009d50:	b909      	cbnz	r1, 8009d56 <__lo0bits+0x2a>
 8009d52:	0c1b      	lsrs	r3, r3, #16
 8009d54:	2210      	movs	r2, #16
 8009d56:	b2d9      	uxtb	r1, r3
 8009d58:	b909      	cbnz	r1, 8009d5e <__lo0bits+0x32>
 8009d5a:	3208      	adds	r2, #8
 8009d5c:	0a1b      	lsrs	r3, r3, #8
 8009d5e:	0719      	lsls	r1, r3, #28
 8009d60:	bf04      	itt	eq
 8009d62:	091b      	lsreq	r3, r3, #4
 8009d64:	3204      	addeq	r2, #4
 8009d66:	0799      	lsls	r1, r3, #30
 8009d68:	bf04      	itt	eq
 8009d6a:	089b      	lsreq	r3, r3, #2
 8009d6c:	3202      	addeq	r2, #2
 8009d6e:	07d9      	lsls	r1, r3, #31
 8009d70:	d403      	bmi.n	8009d7a <__lo0bits+0x4e>
 8009d72:	085b      	lsrs	r3, r3, #1
 8009d74:	f102 0201 	add.w	r2, r2, #1
 8009d78:	d003      	beq.n	8009d82 <__lo0bits+0x56>
 8009d7a:	6003      	str	r3, [r0, #0]
 8009d7c:	e7e5      	b.n	8009d4a <__lo0bits+0x1e>
 8009d7e:	2200      	movs	r2, #0
 8009d80:	e7e3      	b.n	8009d4a <__lo0bits+0x1e>
 8009d82:	2220      	movs	r2, #32
 8009d84:	e7e1      	b.n	8009d4a <__lo0bits+0x1e>
	...

08009d88 <__i2b>:
 8009d88:	b510      	push	{r4, lr}
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	f7ff ff05 	bl	8009b9c <_Balloc>
 8009d92:	4602      	mov	r2, r0
 8009d94:	b928      	cbnz	r0, 8009da2 <__i2b+0x1a>
 8009d96:	4b05      	ldr	r3, [pc, #20]	; (8009dac <__i2b+0x24>)
 8009d98:	4805      	ldr	r0, [pc, #20]	; (8009db0 <__i2b+0x28>)
 8009d9a:	f240 1145 	movw	r1, #325	; 0x145
 8009d9e:	f000 fd0d 	bl	800a7bc <__assert_func>
 8009da2:	2301      	movs	r3, #1
 8009da4:	6144      	str	r4, [r0, #20]
 8009da6:	6103      	str	r3, [r0, #16]
 8009da8:	bd10      	pop	{r4, pc}
 8009daa:	bf00      	nop
 8009dac:	0800aaa0 	.word	0x0800aaa0
 8009db0:	0800aab1 	.word	0x0800aab1

08009db4 <__multiply>:
 8009db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db8:	4691      	mov	r9, r2
 8009dba:	690a      	ldr	r2, [r1, #16]
 8009dbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	bfb8      	it	lt
 8009dc4:	460b      	movlt	r3, r1
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	bfbc      	itt	lt
 8009dca:	464c      	movlt	r4, r9
 8009dcc:	4699      	movlt	r9, r3
 8009dce:	6927      	ldr	r7, [r4, #16]
 8009dd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009dd4:	68a3      	ldr	r3, [r4, #8]
 8009dd6:	6861      	ldr	r1, [r4, #4]
 8009dd8:	eb07 060a 	add.w	r6, r7, sl
 8009ddc:	42b3      	cmp	r3, r6
 8009dde:	b085      	sub	sp, #20
 8009de0:	bfb8      	it	lt
 8009de2:	3101      	addlt	r1, #1
 8009de4:	f7ff feda 	bl	8009b9c <_Balloc>
 8009de8:	b930      	cbnz	r0, 8009df8 <__multiply+0x44>
 8009dea:	4602      	mov	r2, r0
 8009dec:	4b44      	ldr	r3, [pc, #272]	; (8009f00 <__multiply+0x14c>)
 8009dee:	4845      	ldr	r0, [pc, #276]	; (8009f04 <__multiply+0x150>)
 8009df0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009df4:	f000 fce2 	bl	800a7bc <__assert_func>
 8009df8:	f100 0514 	add.w	r5, r0, #20
 8009dfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e00:	462b      	mov	r3, r5
 8009e02:	2200      	movs	r2, #0
 8009e04:	4543      	cmp	r3, r8
 8009e06:	d321      	bcc.n	8009e4c <__multiply+0x98>
 8009e08:	f104 0314 	add.w	r3, r4, #20
 8009e0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e10:	f109 0314 	add.w	r3, r9, #20
 8009e14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e18:	9202      	str	r2, [sp, #8]
 8009e1a:	1b3a      	subs	r2, r7, r4
 8009e1c:	3a15      	subs	r2, #21
 8009e1e:	f022 0203 	bic.w	r2, r2, #3
 8009e22:	3204      	adds	r2, #4
 8009e24:	f104 0115 	add.w	r1, r4, #21
 8009e28:	428f      	cmp	r7, r1
 8009e2a:	bf38      	it	cc
 8009e2c:	2204      	movcc	r2, #4
 8009e2e:	9201      	str	r2, [sp, #4]
 8009e30:	9a02      	ldr	r2, [sp, #8]
 8009e32:	9303      	str	r3, [sp, #12]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d80c      	bhi.n	8009e52 <__multiply+0x9e>
 8009e38:	2e00      	cmp	r6, #0
 8009e3a:	dd03      	ble.n	8009e44 <__multiply+0x90>
 8009e3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d05b      	beq.n	8009efc <__multiply+0x148>
 8009e44:	6106      	str	r6, [r0, #16]
 8009e46:	b005      	add	sp, #20
 8009e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4c:	f843 2b04 	str.w	r2, [r3], #4
 8009e50:	e7d8      	b.n	8009e04 <__multiply+0x50>
 8009e52:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e56:	f1ba 0f00 	cmp.w	sl, #0
 8009e5a:	d024      	beq.n	8009ea6 <__multiply+0xf2>
 8009e5c:	f104 0e14 	add.w	lr, r4, #20
 8009e60:	46a9      	mov	r9, r5
 8009e62:	f04f 0c00 	mov.w	ip, #0
 8009e66:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e6a:	f8d9 1000 	ldr.w	r1, [r9]
 8009e6e:	fa1f fb82 	uxth.w	fp, r2
 8009e72:	b289      	uxth	r1, r1
 8009e74:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009e7c:	f8d9 2000 	ldr.w	r2, [r9]
 8009e80:	4461      	add	r1, ip
 8009e82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e86:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e8e:	b289      	uxth	r1, r1
 8009e90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e94:	4577      	cmp	r7, lr
 8009e96:	f849 1b04 	str.w	r1, [r9], #4
 8009e9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e9e:	d8e2      	bhi.n	8009e66 <__multiply+0xb2>
 8009ea0:	9a01      	ldr	r2, [sp, #4]
 8009ea2:	f845 c002 	str.w	ip, [r5, r2]
 8009ea6:	9a03      	ldr	r2, [sp, #12]
 8009ea8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009eac:	3304      	adds	r3, #4
 8009eae:	f1b9 0f00 	cmp.w	r9, #0
 8009eb2:	d021      	beq.n	8009ef8 <__multiply+0x144>
 8009eb4:	6829      	ldr	r1, [r5, #0]
 8009eb6:	f104 0c14 	add.w	ip, r4, #20
 8009eba:	46ae      	mov	lr, r5
 8009ebc:	f04f 0a00 	mov.w	sl, #0
 8009ec0:	f8bc b000 	ldrh.w	fp, [ip]
 8009ec4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ec8:	fb09 220b 	mla	r2, r9, fp, r2
 8009ecc:	4452      	add	r2, sl
 8009ece:	b289      	uxth	r1, r1
 8009ed0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ed4:	f84e 1b04 	str.w	r1, [lr], #4
 8009ed8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009edc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ee0:	f8be 1000 	ldrh.w	r1, [lr]
 8009ee4:	fb09 110a 	mla	r1, r9, sl, r1
 8009ee8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009eec:	4567      	cmp	r7, ip
 8009eee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ef2:	d8e5      	bhi.n	8009ec0 <__multiply+0x10c>
 8009ef4:	9a01      	ldr	r2, [sp, #4]
 8009ef6:	50a9      	str	r1, [r5, r2]
 8009ef8:	3504      	adds	r5, #4
 8009efa:	e799      	b.n	8009e30 <__multiply+0x7c>
 8009efc:	3e01      	subs	r6, #1
 8009efe:	e79b      	b.n	8009e38 <__multiply+0x84>
 8009f00:	0800aaa0 	.word	0x0800aaa0
 8009f04:	0800aab1 	.word	0x0800aab1

08009f08 <__pow5mult>:
 8009f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f0c:	4615      	mov	r5, r2
 8009f0e:	f012 0203 	ands.w	r2, r2, #3
 8009f12:	4606      	mov	r6, r0
 8009f14:	460f      	mov	r7, r1
 8009f16:	d007      	beq.n	8009f28 <__pow5mult+0x20>
 8009f18:	4c25      	ldr	r4, [pc, #148]	; (8009fb0 <__pow5mult+0xa8>)
 8009f1a:	3a01      	subs	r2, #1
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f22:	f7ff fe9d 	bl	8009c60 <__multadd>
 8009f26:	4607      	mov	r7, r0
 8009f28:	10ad      	asrs	r5, r5, #2
 8009f2a:	d03d      	beq.n	8009fa8 <__pow5mult+0xa0>
 8009f2c:	69f4      	ldr	r4, [r6, #28]
 8009f2e:	b97c      	cbnz	r4, 8009f50 <__pow5mult+0x48>
 8009f30:	2010      	movs	r0, #16
 8009f32:	f7ff fd7f 	bl	8009a34 <malloc>
 8009f36:	4602      	mov	r2, r0
 8009f38:	61f0      	str	r0, [r6, #28]
 8009f3a:	b928      	cbnz	r0, 8009f48 <__pow5mult+0x40>
 8009f3c:	4b1d      	ldr	r3, [pc, #116]	; (8009fb4 <__pow5mult+0xac>)
 8009f3e:	481e      	ldr	r0, [pc, #120]	; (8009fb8 <__pow5mult+0xb0>)
 8009f40:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009f44:	f000 fc3a 	bl	800a7bc <__assert_func>
 8009f48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f4c:	6004      	str	r4, [r0, #0]
 8009f4e:	60c4      	str	r4, [r0, #12]
 8009f50:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009f54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f58:	b94c      	cbnz	r4, 8009f6e <__pow5mult+0x66>
 8009f5a:	f240 2171 	movw	r1, #625	; 0x271
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f7ff ff12 	bl	8009d88 <__i2b>
 8009f64:	2300      	movs	r3, #0
 8009f66:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	6003      	str	r3, [r0, #0]
 8009f6e:	f04f 0900 	mov.w	r9, #0
 8009f72:	07eb      	lsls	r3, r5, #31
 8009f74:	d50a      	bpl.n	8009f8c <__pow5mult+0x84>
 8009f76:	4639      	mov	r1, r7
 8009f78:	4622      	mov	r2, r4
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	f7ff ff1a 	bl	8009db4 <__multiply>
 8009f80:	4639      	mov	r1, r7
 8009f82:	4680      	mov	r8, r0
 8009f84:	4630      	mov	r0, r6
 8009f86:	f7ff fe49 	bl	8009c1c <_Bfree>
 8009f8a:	4647      	mov	r7, r8
 8009f8c:	106d      	asrs	r5, r5, #1
 8009f8e:	d00b      	beq.n	8009fa8 <__pow5mult+0xa0>
 8009f90:	6820      	ldr	r0, [r4, #0]
 8009f92:	b938      	cbnz	r0, 8009fa4 <__pow5mult+0x9c>
 8009f94:	4622      	mov	r2, r4
 8009f96:	4621      	mov	r1, r4
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f7ff ff0b 	bl	8009db4 <__multiply>
 8009f9e:	6020      	str	r0, [r4, #0]
 8009fa0:	f8c0 9000 	str.w	r9, [r0]
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	e7e4      	b.n	8009f72 <__pow5mult+0x6a>
 8009fa8:	4638      	mov	r0, r7
 8009faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fae:	bf00      	nop
 8009fb0:	0800ac00 	.word	0x0800ac00
 8009fb4:	0800aa31 	.word	0x0800aa31
 8009fb8:	0800aab1 	.word	0x0800aab1

08009fbc <__lshift>:
 8009fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc0:	460c      	mov	r4, r1
 8009fc2:	6849      	ldr	r1, [r1, #4]
 8009fc4:	6923      	ldr	r3, [r4, #16]
 8009fc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fca:	68a3      	ldr	r3, [r4, #8]
 8009fcc:	4607      	mov	r7, r0
 8009fce:	4691      	mov	r9, r2
 8009fd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fd4:	f108 0601 	add.w	r6, r8, #1
 8009fd8:	42b3      	cmp	r3, r6
 8009fda:	db0b      	blt.n	8009ff4 <__lshift+0x38>
 8009fdc:	4638      	mov	r0, r7
 8009fde:	f7ff fddd 	bl	8009b9c <_Balloc>
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	b948      	cbnz	r0, 8009ffa <__lshift+0x3e>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	4b28      	ldr	r3, [pc, #160]	; (800a08c <__lshift+0xd0>)
 8009fea:	4829      	ldr	r0, [pc, #164]	; (800a090 <__lshift+0xd4>)
 8009fec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009ff0:	f000 fbe4 	bl	800a7bc <__assert_func>
 8009ff4:	3101      	adds	r1, #1
 8009ff6:	005b      	lsls	r3, r3, #1
 8009ff8:	e7ee      	b.n	8009fd8 <__lshift+0x1c>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f100 0114 	add.w	r1, r0, #20
 800a000:	f100 0210 	add.w	r2, r0, #16
 800a004:	4618      	mov	r0, r3
 800a006:	4553      	cmp	r3, sl
 800a008:	db33      	blt.n	800a072 <__lshift+0xb6>
 800a00a:	6920      	ldr	r0, [r4, #16]
 800a00c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a010:	f104 0314 	add.w	r3, r4, #20
 800a014:	f019 091f 	ands.w	r9, r9, #31
 800a018:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a01c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a020:	d02b      	beq.n	800a07a <__lshift+0xbe>
 800a022:	f1c9 0e20 	rsb	lr, r9, #32
 800a026:	468a      	mov	sl, r1
 800a028:	2200      	movs	r2, #0
 800a02a:	6818      	ldr	r0, [r3, #0]
 800a02c:	fa00 f009 	lsl.w	r0, r0, r9
 800a030:	4310      	orrs	r0, r2
 800a032:	f84a 0b04 	str.w	r0, [sl], #4
 800a036:	f853 2b04 	ldr.w	r2, [r3], #4
 800a03a:	459c      	cmp	ip, r3
 800a03c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a040:	d8f3      	bhi.n	800a02a <__lshift+0x6e>
 800a042:	ebac 0304 	sub.w	r3, ip, r4
 800a046:	3b15      	subs	r3, #21
 800a048:	f023 0303 	bic.w	r3, r3, #3
 800a04c:	3304      	adds	r3, #4
 800a04e:	f104 0015 	add.w	r0, r4, #21
 800a052:	4584      	cmp	ip, r0
 800a054:	bf38      	it	cc
 800a056:	2304      	movcc	r3, #4
 800a058:	50ca      	str	r2, [r1, r3]
 800a05a:	b10a      	cbz	r2, 800a060 <__lshift+0xa4>
 800a05c:	f108 0602 	add.w	r6, r8, #2
 800a060:	3e01      	subs	r6, #1
 800a062:	4638      	mov	r0, r7
 800a064:	612e      	str	r6, [r5, #16]
 800a066:	4621      	mov	r1, r4
 800a068:	f7ff fdd8 	bl	8009c1c <_Bfree>
 800a06c:	4628      	mov	r0, r5
 800a06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a072:	f842 0f04 	str.w	r0, [r2, #4]!
 800a076:	3301      	adds	r3, #1
 800a078:	e7c5      	b.n	800a006 <__lshift+0x4a>
 800a07a:	3904      	subs	r1, #4
 800a07c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a080:	f841 2f04 	str.w	r2, [r1, #4]!
 800a084:	459c      	cmp	ip, r3
 800a086:	d8f9      	bhi.n	800a07c <__lshift+0xc0>
 800a088:	e7ea      	b.n	800a060 <__lshift+0xa4>
 800a08a:	bf00      	nop
 800a08c:	0800aaa0 	.word	0x0800aaa0
 800a090:	0800aab1 	.word	0x0800aab1

0800a094 <__mcmp>:
 800a094:	b530      	push	{r4, r5, lr}
 800a096:	6902      	ldr	r2, [r0, #16]
 800a098:	690c      	ldr	r4, [r1, #16]
 800a09a:	1b12      	subs	r2, r2, r4
 800a09c:	d10e      	bne.n	800a0bc <__mcmp+0x28>
 800a09e:	f100 0314 	add.w	r3, r0, #20
 800a0a2:	3114      	adds	r1, #20
 800a0a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a0ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a0b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a0b4:	42a5      	cmp	r5, r4
 800a0b6:	d003      	beq.n	800a0c0 <__mcmp+0x2c>
 800a0b8:	d305      	bcc.n	800a0c6 <__mcmp+0x32>
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	4610      	mov	r0, r2
 800a0be:	bd30      	pop	{r4, r5, pc}
 800a0c0:	4283      	cmp	r3, r0
 800a0c2:	d3f3      	bcc.n	800a0ac <__mcmp+0x18>
 800a0c4:	e7fa      	b.n	800a0bc <__mcmp+0x28>
 800a0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ca:	e7f7      	b.n	800a0bc <__mcmp+0x28>

0800a0cc <__mdiff>:
 800a0cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	4606      	mov	r6, r0
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	4690      	mov	r8, r2
 800a0da:	f7ff ffdb 	bl	800a094 <__mcmp>
 800a0de:	1e05      	subs	r5, r0, #0
 800a0e0:	d110      	bne.n	800a104 <__mdiff+0x38>
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f7ff fd59 	bl	8009b9c <_Balloc>
 800a0ea:	b930      	cbnz	r0, 800a0fa <__mdiff+0x2e>
 800a0ec:	4b3a      	ldr	r3, [pc, #232]	; (800a1d8 <__mdiff+0x10c>)
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	f240 2137 	movw	r1, #567	; 0x237
 800a0f4:	4839      	ldr	r0, [pc, #228]	; (800a1dc <__mdiff+0x110>)
 800a0f6:	f000 fb61 	bl	800a7bc <__assert_func>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a104:	bfa4      	itt	ge
 800a106:	4643      	movge	r3, r8
 800a108:	46a0      	movge	r8, r4
 800a10a:	4630      	mov	r0, r6
 800a10c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a110:	bfa6      	itte	ge
 800a112:	461c      	movge	r4, r3
 800a114:	2500      	movge	r5, #0
 800a116:	2501      	movlt	r5, #1
 800a118:	f7ff fd40 	bl	8009b9c <_Balloc>
 800a11c:	b920      	cbnz	r0, 800a128 <__mdiff+0x5c>
 800a11e:	4b2e      	ldr	r3, [pc, #184]	; (800a1d8 <__mdiff+0x10c>)
 800a120:	4602      	mov	r2, r0
 800a122:	f240 2145 	movw	r1, #581	; 0x245
 800a126:	e7e5      	b.n	800a0f4 <__mdiff+0x28>
 800a128:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a12c:	6926      	ldr	r6, [r4, #16]
 800a12e:	60c5      	str	r5, [r0, #12]
 800a130:	f104 0914 	add.w	r9, r4, #20
 800a134:	f108 0514 	add.w	r5, r8, #20
 800a138:	f100 0e14 	add.w	lr, r0, #20
 800a13c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a140:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a144:	f108 0210 	add.w	r2, r8, #16
 800a148:	46f2      	mov	sl, lr
 800a14a:	2100      	movs	r1, #0
 800a14c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a150:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a154:	fa11 f88b 	uxtah	r8, r1, fp
 800a158:	b299      	uxth	r1, r3
 800a15a:	0c1b      	lsrs	r3, r3, #16
 800a15c:	eba8 0801 	sub.w	r8, r8, r1
 800a160:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a164:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a168:	fa1f f888 	uxth.w	r8, r8
 800a16c:	1419      	asrs	r1, r3, #16
 800a16e:	454e      	cmp	r6, r9
 800a170:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a174:	f84a 3b04 	str.w	r3, [sl], #4
 800a178:	d8e8      	bhi.n	800a14c <__mdiff+0x80>
 800a17a:	1b33      	subs	r3, r6, r4
 800a17c:	3b15      	subs	r3, #21
 800a17e:	f023 0303 	bic.w	r3, r3, #3
 800a182:	3304      	adds	r3, #4
 800a184:	3415      	adds	r4, #21
 800a186:	42a6      	cmp	r6, r4
 800a188:	bf38      	it	cc
 800a18a:	2304      	movcc	r3, #4
 800a18c:	441d      	add	r5, r3
 800a18e:	4473      	add	r3, lr
 800a190:	469e      	mov	lr, r3
 800a192:	462e      	mov	r6, r5
 800a194:	4566      	cmp	r6, ip
 800a196:	d30e      	bcc.n	800a1b6 <__mdiff+0xea>
 800a198:	f10c 0203 	add.w	r2, ip, #3
 800a19c:	1b52      	subs	r2, r2, r5
 800a19e:	f022 0203 	bic.w	r2, r2, #3
 800a1a2:	3d03      	subs	r5, #3
 800a1a4:	45ac      	cmp	ip, r5
 800a1a6:	bf38      	it	cc
 800a1a8:	2200      	movcc	r2, #0
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a1b0:	b17a      	cbz	r2, 800a1d2 <__mdiff+0x106>
 800a1b2:	6107      	str	r7, [r0, #16]
 800a1b4:	e7a4      	b.n	800a100 <__mdiff+0x34>
 800a1b6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a1ba:	fa11 f288 	uxtah	r2, r1, r8
 800a1be:	1414      	asrs	r4, r2, #16
 800a1c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a1c4:	b292      	uxth	r2, r2
 800a1c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a1ca:	f84e 2b04 	str.w	r2, [lr], #4
 800a1ce:	1421      	asrs	r1, r4, #16
 800a1d0:	e7e0      	b.n	800a194 <__mdiff+0xc8>
 800a1d2:	3f01      	subs	r7, #1
 800a1d4:	e7ea      	b.n	800a1ac <__mdiff+0xe0>
 800a1d6:	bf00      	nop
 800a1d8:	0800aaa0 	.word	0x0800aaa0
 800a1dc:	0800aab1 	.word	0x0800aab1

0800a1e0 <__d2b>:
 800a1e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1e4:	460f      	mov	r7, r1
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	ec59 8b10 	vmov	r8, r9, d0
 800a1ec:	4616      	mov	r6, r2
 800a1ee:	f7ff fcd5 	bl	8009b9c <_Balloc>
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	b930      	cbnz	r0, 800a204 <__d2b+0x24>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	4b24      	ldr	r3, [pc, #144]	; (800a28c <__d2b+0xac>)
 800a1fa:	4825      	ldr	r0, [pc, #148]	; (800a290 <__d2b+0xb0>)
 800a1fc:	f240 310f 	movw	r1, #783	; 0x30f
 800a200:	f000 fadc 	bl	800a7bc <__assert_func>
 800a204:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a208:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a20c:	bb2d      	cbnz	r5, 800a25a <__d2b+0x7a>
 800a20e:	9301      	str	r3, [sp, #4]
 800a210:	f1b8 0300 	subs.w	r3, r8, #0
 800a214:	d026      	beq.n	800a264 <__d2b+0x84>
 800a216:	4668      	mov	r0, sp
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	f7ff fd87 	bl	8009d2c <__lo0bits>
 800a21e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a222:	b1e8      	cbz	r0, 800a260 <__d2b+0x80>
 800a224:	f1c0 0320 	rsb	r3, r0, #32
 800a228:	fa02 f303 	lsl.w	r3, r2, r3
 800a22c:	430b      	orrs	r3, r1
 800a22e:	40c2      	lsrs	r2, r0
 800a230:	6163      	str	r3, [r4, #20]
 800a232:	9201      	str	r2, [sp, #4]
 800a234:	9b01      	ldr	r3, [sp, #4]
 800a236:	61a3      	str	r3, [r4, #24]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	bf14      	ite	ne
 800a23c:	2202      	movne	r2, #2
 800a23e:	2201      	moveq	r2, #1
 800a240:	6122      	str	r2, [r4, #16]
 800a242:	b1bd      	cbz	r5, 800a274 <__d2b+0x94>
 800a244:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a248:	4405      	add	r5, r0
 800a24a:	603d      	str	r5, [r7, #0]
 800a24c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a250:	6030      	str	r0, [r6, #0]
 800a252:	4620      	mov	r0, r4
 800a254:	b003      	add	sp, #12
 800a256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a25a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a25e:	e7d6      	b.n	800a20e <__d2b+0x2e>
 800a260:	6161      	str	r1, [r4, #20]
 800a262:	e7e7      	b.n	800a234 <__d2b+0x54>
 800a264:	a801      	add	r0, sp, #4
 800a266:	f7ff fd61 	bl	8009d2c <__lo0bits>
 800a26a:	9b01      	ldr	r3, [sp, #4]
 800a26c:	6163      	str	r3, [r4, #20]
 800a26e:	3020      	adds	r0, #32
 800a270:	2201      	movs	r2, #1
 800a272:	e7e5      	b.n	800a240 <__d2b+0x60>
 800a274:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a278:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a27c:	6038      	str	r0, [r7, #0]
 800a27e:	6918      	ldr	r0, [r3, #16]
 800a280:	f7ff fd34 	bl	8009cec <__hi0bits>
 800a284:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a288:	e7e2      	b.n	800a250 <__d2b+0x70>
 800a28a:	bf00      	nop
 800a28c:	0800aaa0 	.word	0x0800aaa0
 800a290:	0800aab1 	.word	0x0800aab1

0800a294 <__sfputc_r>:
 800a294:	6893      	ldr	r3, [r2, #8]
 800a296:	3b01      	subs	r3, #1
 800a298:	2b00      	cmp	r3, #0
 800a29a:	b410      	push	{r4}
 800a29c:	6093      	str	r3, [r2, #8]
 800a29e:	da08      	bge.n	800a2b2 <__sfputc_r+0x1e>
 800a2a0:	6994      	ldr	r4, [r2, #24]
 800a2a2:	42a3      	cmp	r3, r4
 800a2a4:	db01      	blt.n	800a2aa <__sfputc_r+0x16>
 800a2a6:	290a      	cmp	r1, #10
 800a2a8:	d103      	bne.n	800a2b2 <__sfputc_r+0x1e>
 800a2aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2ae:	f7fe bbe4 	b.w	8008a7a <__swbuf_r>
 800a2b2:	6813      	ldr	r3, [r2, #0]
 800a2b4:	1c58      	adds	r0, r3, #1
 800a2b6:	6010      	str	r0, [r2, #0]
 800a2b8:	7019      	strb	r1, [r3, #0]
 800a2ba:	4608      	mov	r0, r1
 800a2bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <__sfputs_r>:
 800a2c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c4:	4606      	mov	r6, r0
 800a2c6:	460f      	mov	r7, r1
 800a2c8:	4614      	mov	r4, r2
 800a2ca:	18d5      	adds	r5, r2, r3
 800a2cc:	42ac      	cmp	r4, r5
 800a2ce:	d101      	bne.n	800a2d4 <__sfputs_r+0x12>
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	e007      	b.n	800a2e4 <__sfputs_r+0x22>
 800a2d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2d8:	463a      	mov	r2, r7
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f7ff ffda 	bl	800a294 <__sfputc_r>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d1f3      	bne.n	800a2cc <__sfputs_r+0xa>
 800a2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2e8 <_vfiprintf_r>:
 800a2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	460d      	mov	r5, r1
 800a2ee:	b09d      	sub	sp, #116	; 0x74
 800a2f0:	4614      	mov	r4, r2
 800a2f2:	4698      	mov	r8, r3
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	b118      	cbz	r0, 800a300 <_vfiprintf_r+0x18>
 800a2f8:	6a03      	ldr	r3, [r0, #32]
 800a2fa:	b90b      	cbnz	r3, 800a300 <_vfiprintf_r+0x18>
 800a2fc:	f7fe fad6 	bl	80088ac <__sinit>
 800a300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a302:	07d9      	lsls	r1, r3, #31
 800a304:	d405      	bmi.n	800a312 <_vfiprintf_r+0x2a>
 800a306:	89ab      	ldrh	r3, [r5, #12]
 800a308:	059a      	lsls	r2, r3, #22
 800a30a:	d402      	bmi.n	800a312 <_vfiprintf_r+0x2a>
 800a30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a30e:	f7fe fcc6 	bl	8008c9e <__retarget_lock_acquire_recursive>
 800a312:	89ab      	ldrh	r3, [r5, #12]
 800a314:	071b      	lsls	r3, r3, #28
 800a316:	d501      	bpl.n	800a31c <_vfiprintf_r+0x34>
 800a318:	692b      	ldr	r3, [r5, #16]
 800a31a:	b99b      	cbnz	r3, 800a344 <_vfiprintf_r+0x5c>
 800a31c:	4629      	mov	r1, r5
 800a31e:	4630      	mov	r0, r6
 800a320:	f7fe fbe8 	bl	8008af4 <__swsetup_r>
 800a324:	b170      	cbz	r0, 800a344 <_vfiprintf_r+0x5c>
 800a326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a328:	07dc      	lsls	r4, r3, #31
 800a32a:	d504      	bpl.n	800a336 <_vfiprintf_r+0x4e>
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	b01d      	add	sp, #116	; 0x74
 800a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a336:	89ab      	ldrh	r3, [r5, #12]
 800a338:	0598      	lsls	r0, r3, #22
 800a33a:	d4f7      	bmi.n	800a32c <_vfiprintf_r+0x44>
 800a33c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a33e:	f7fe fcaf 	bl	8008ca0 <__retarget_lock_release_recursive>
 800a342:	e7f3      	b.n	800a32c <_vfiprintf_r+0x44>
 800a344:	2300      	movs	r3, #0
 800a346:	9309      	str	r3, [sp, #36]	; 0x24
 800a348:	2320      	movs	r3, #32
 800a34a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a34e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a352:	2330      	movs	r3, #48	; 0x30
 800a354:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a508 <_vfiprintf_r+0x220>
 800a358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a35c:	f04f 0901 	mov.w	r9, #1
 800a360:	4623      	mov	r3, r4
 800a362:	469a      	mov	sl, r3
 800a364:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a368:	b10a      	cbz	r2, 800a36e <_vfiprintf_r+0x86>
 800a36a:	2a25      	cmp	r2, #37	; 0x25
 800a36c:	d1f9      	bne.n	800a362 <_vfiprintf_r+0x7a>
 800a36e:	ebba 0b04 	subs.w	fp, sl, r4
 800a372:	d00b      	beq.n	800a38c <_vfiprintf_r+0xa4>
 800a374:	465b      	mov	r3, fp
 800a376:	4622      	mov	r2, r4
 800a378:	4629      	mov	r1, r5
 800a37a:	4630      	mov	r0, r6
 800a37c:	f7ff ffa1 	bl	800a2c2 <__sfputs_r>
 800a380:	3001      	adds	r0, #1
 800a382:	f000 80a9 	beq.w	800a4d8 <_vfiprintf_r+0x1f0>
 800a386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a388:	445a      	add	r2, fp
 800a38a:	9209      	str	r2, [sp, #36]	; 0x24
 800a38c:	f89a 3000 	ldrb.w	r3, [sl]
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 80a1 	beq.w	800a4d8 <_vfiprintf_r+0x1f0>
 800a396:	2300      	movs	r3, #0
 800a398:	f04f 32ff 	mov.w	r2, #4294967295
 800a39c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3a0:	f10a 0a01 	add.w	sl, sl, #1
 800a3a4:	9304      	str	r3, [sp, #16]
 800a3a6:	9307      	str	r3, [sp, #28]
 800a3a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a3ae:	4654      	mov	r4, sl
 800a3b0:	2205      	movs	r2, #5
 800a3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3b6:	4854      	ldr	r0, [pc, #336]	; (800a508 <_vfiprintf_r+0x220>)
 800a3b8:	f7f5 ff22 	bl	8000200 <memchr>
 800a3bc:	9a04      	ldr	r2, [sp, #16]
 800a3be:	b9d8      	cbnz	r0, 800a3f8 <_vfiprintf_r+0x110>
 800a3c0:	06d1      	lsls	r1, r2, #27
 800a3c2:	bf44      	itt	mi
 800a3c4:	2320      	movmi	r3, #32
 800a3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3ca:	0713      	lsls	r3, r2, #28
 800a3cc:	bf44      	itt	mi
 800a3ce:	232b      	movmi	r3, #43	; 0x2b
 800a3d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3da:	d015      	beq.n	800a408 <_vfiprintf_r+0x120>
 800a3dc:	9a07      	ldr	r2, [sp, #28]
 800a3de:	4654      	mov	r4, sl
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	f04f 0c0a 	mov.w	ip, #10
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3ec:	3b30      	subs	r3, #48	; 0x30
 800a3ee:	2b09      	cmp	r3, #9
 800a3f0:	d94d      	bls.n	800a48e <_vfiprintf_r+0x1a6>
 800a3f2:	b1b0      	cbz	r0, 800a422 <_vfiprintf_r+0x13a>
 800a3f4:	9207      	str	r2, [sp, #28]
 800a3f6:	e014      	b.n	800a422 <_vfiprintf_r+0x13a>
 800a3f8:	eba0 0308 	sub.w	r3, r0, r8
 800a3fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a400:	4313      	orrs	r3, r2
 800a402:	9304      	str	r3, [sp, #16]
 800a404:	46a2      	mov	sl, r4
 800a406:	e7d2      	b.n	800a3ae <_vfiprintf_r+0xc6>
 800a408:	9b03      	ldr	r3, [sp, #12]
 800a40a:	1d19      	adds	r1, r3, #4
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	9103      	str	r1, [sp, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	bfbb      	ittet	lt
 800a414:	425b      	neglt	r3, r3
 800a416:	f042 0202 	orrlt.w	r2, r2, #2
 800a41a:	9307      	strge	r3, [sp, #28]
 800a41c:	9307      	strlt	r3, [sp, #28]
 800a41e:	bfb8      	it	lt
 800a420:	9204      	strlt	r2, [sp, #16]
 800a422:	7823      	ldrb	r3, [r4, #0]
 800a424:	2b2e      	cmp	r3, #46	; 0x2e
 800a426:	d10c      	bne.n	800a442 <_vfiprintf_r+0x15a>
 800a428:	7863      	ldrb	r3, [r4, #1]
 800a42a:	2b2a      	cmp	r3, #42	; 0x2a
 800a42c:	d134      	bne.n	800a498 <_vfiprintf_r+0x1b0>
 800a42e:	9b03      	ldr	r3, [sp, #12]
 800a430:	1d1a      	adds	r2, r3, #4
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	9203      	str	r2, [sp, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	bfb8      	it	lt
 800a43a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a43e:	3402      	adds	r4, #2
 800a440:	9305      	str	r3, [sp, #20]
 800a442:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a518 <_vfiprintf_r+0x230>
 800a446:	7821      	ldrb	r1, [r4, #0]
 800a448:	2203      	movs	r2, #3
 800a44a:	4650      	mov	r0, sl
 800a44c:	f7f5 fed8 	bl	8000200 <memchr>
 800a450:	b138      	cbz	r0, 800a462 <_vfiprintf_r+0x17a>
 800a452:	9b04      	ldr	r3, [sp, #16]
 800a454:	eba0 000a 	sub.w	r0, r0, sl
 800a458:	2240      	movs	r2, #64	; 0x40
 800a45a:	4082      	lsls	r2, r0
 800a45c:	4313      	orrs	r3, r2
 800a45e:	3401      	adds	r4, #1
 800a460:	9304      	str	r3, [sp, #16]
 800a462:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a466:	4829      	ldr	r0, [pc, #164]	; (800a50c <_vfiprintf_r+0x224>)
 800a468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a46c:	2206      	movs	r2, #6
 800a46e:	f7f5 fec7 	bl	8000200 <memchr>
 800a472:	2800      	cmp	r0, #0
 800a474:	d03f      	beq.n	800a4f6 <_vfiprintf_r+0x20e>
 800a476:	4b26      	ldr	r3, [pc, #152]	; (800a510 <_vfiprintf_r+0x228>)
 800a478:	bb1b      	cbnz	r3, 800a4c2 <_vfiprintf_r+0x1da>
 800a47a:	9b03      	ldr	r3, [sp, #12]
 800a47c:	3307      	adds	r3, #7
 800a47e:	f023 0307 	bic.w	r3, r3, #7
 800a482:	3308      	adds	r3, #8
 800a484:	9303      	str	r3, [sp, #12]
 800a486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a488:	443b      	add	r3, r7
 800a48a:	9309      	str	r3, [sp, #36]	; 0x24
 800a48c:	e768      	b.n	800a360 <_vfiprintf_r+0x78>
 800a48e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a492:	460c      	mov	r4, r1
 800a494:	2001      	movs	r0, #1
 800a496:	e7a6      	b.n	800a3e6 <_vfiprintf_r+0xfe>
 800a498:	2300      	movs	r3, #0
 800a49a:	3401      	adds	r4, #1
 800a49c:	9305      	str	r3, [sp, #20]
 800a49e:	4619      	mov	r1, r3
 800a4a0:	f04f 0c0a 	mov.w	ip, #10
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4aa:	3a30      	subs	r2, #48	; 0x30
 800a4ac:	2a09      	cmp	r2, #9
 800a4ae:	d903      	bls.n	800a4b8 <_vfiprintf_r+0x1d0>
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d0c6      	beq.n	800a442 <_vfiprintf_r+0x15a>
 800a4b4:	9105      	str	r1, [sp, #20]
 800a4b6:	e7c4      	b.n	800a442 <_vfiprintf_r+0x15a>
 800a4b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4bc:	4604      	mov	r4, r0
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e7f0      	b.n	800a4a4 <_vfiprintf_r+0x1bc>
 800a4c2:	ab03      	add	r3, sp, #12
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	462a      	mov	r2, r5
 800a4c8:	4b12      	ldr	r3, [pc, #72]	; (800a514 <_vfiprintf_r+0x22c>)
 800a4ca:	a904      	add	r1, sp, #16
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	f7fd fd9b 	bl	8008008 <_printf_float>
 800a4d2:	4607      	mov	r7, r0
 800a4d4:	1c78      	adds	r0, r7, #1
 800a4d6:	d1d6      	bne.n	800a486 <_vfiprintf_r+0x19e>
 800a4d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4da:	07d9      	lsls	r1, r3, #31
 800a4dc:	d405      	bmi.n	800a4ea <_vfiprintf_r+0x202>
 800a4de:	89ab      	ldrh	r3, [r5, #12]
 800a4e0:	059a      	lsls	r2, r3, #22
 800a4e2:	d402      	bmi.n	800a4ea <_vfiprintf_r+0x202>
 800a4e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4e6:	f7fe fbdb 	bl	8008ca0 <__retarget_lock_release_recursive>
 800a4ea:	89ab      	ldrh	r3, [r5, #12]
 800a4ec:	065b      	lsls	r3, r3, #25
 800a4ee:	f53f af1d 	bmi.w	800a32c <_vfiprintf_r+0x44>
 800a4f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4f4:	e71c      	b.n	800a330 <_vfiprintf_r+0x48>
 800a4f6:	ab03      	add	r3, sp, #12
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	462a      	mov	r2, r5
 800a4fc:	4b05      	ldr	r3, [pc, #20]	; (800a514 <_vfiprintf_r+0x22c>)
 800a4fe:	a904      	add	r1, sp, #16
 800a500:	4630      	mov	r0, r6
 800a502:	f7fe f825 	bl	8008550 <_printf_i>
 800a506:	e7e4      	b.n	800a4d2 <_vfiprintf_r+0x1ea>
 800a508:	0800ac0c 	.word	0x0800ac0c
 800a50c:	0800ac16 	.word	0x0800ac16
 800a510:	08008009 	.word	0x08008009
 800a514:	0800a2c3 	.word	0x0800a2c3
 800a518:	0800ac12 	.word	0x0800ac12

0800a51c <__sflush_r>:
 800a51c:	898a      	ldrh	r2, [r1, #12]
 800a51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a522:	4605      	mov	r5, r0
 800a524:	0710      	lsls	r0, r2, #28
 800a526:	460c      	mov	r4, r1
 800a528:	d458      	bmi.n	800a5dc <__sflush_r+0xc0>
 800a52a:	684b      	ldr	r3, [r1, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	dc05      	bgt.n	800a53c <__sflush_r+0x20>
 800a530:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a532:	2b00      	cmp	r3, #0
 800a534:	dc02      	bgt.n	800a53c <__sflush_r+0x20>
 800a536:	2000      	movs	r0, #0
 800a538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a53c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a53e:	2e00      	cmp	r6, #0
 800a540:	d0f9      	beq.n	800a536 <__sflush_r+0x1a>
 800a542:	2300      	movs	r3, #0
 800a544:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a548:	682f      	ldr	r7, [r5, #0]
 800a54a:	6a21      	ldr	r1, [r4, #32]
 800a54c:	602b      	str	r3, [r5, #0]
 800a54e:	d032      	beq.n	800a5b6 <__sflush_r+0x9a>
 800a550:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	075a      	lsls	r2, r3, #29
 800a556:	d505      	bpl.n	800a564 <__sflush_r+0x48>
 800a558:	6863      	ldr	r3, [r4, #4]
 800a55a:	1ac0      	subs	r0, r0, r3
 800a55c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a55e:	b10b      	cbz	r3, 800a564 <__sflush_r+0x48>
 800a560:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a562:	1ac0      	subs	r0, r0, r3
 800a564:	2300      	movs	r3, #0
 800a566:	4602      	mov	r2, r0
 800a568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a56a:	6a21      	ldr	r1, [r4, #32]
 800a56c:	4628      	mov	r0, r5
 800a56e:	47b0      	blx	r6
 800a570:	1c43      	adds	r3, r0, #1
 800a572:	89a3      	ldrh	r3, [r4, #12]
 800a574:	d106      	bne.n	800a584 <__sflush_r+0x68>
 800a576:	6829      	ldr	r1, [r5, #0]
 800a578:	291d      	cmp	r1, #29
 800a57a:	d82b      	bhi.n	800a5d4 <__sflush_r+0xb8>
 800a57c:	4a29      	ldr	r2, [pc, #164]	; (800a624 <__sflush_r+0x108>)
 800a57e:	410a      	asrs	r2, r1
 800a580:	07d6      	lsls	r6, r2, #31
 800a582:	d427      	bmi.n	800a5d4 <__sflush_r+0xb8>
 800a584:	2200      	movs	r2, #0
 800a586:	6062      	str	r2, [r4, #4]
 800a588:	04d9      	lsls	r1, r3, #19
 800a58a:	6922      	ldr	r2, [r4, #16]
 800a58c:	6022      	str	r2, [r4, #0]
 800a58e:	d504      	bpl.n	800a59a <__sflush_r+0x7e>
 800a590:	1c42      	adds	r2, r0, #1
 800a592:	d101      	bne.n	800a598 <__sflush_r+0x7c>
 800a594:	682b      	ldr	r3, [r5, #0]
 800a596:	b903      	cbnz	r3, 800a59a <__sflush_r+0x7e>
 800a598:	6560      	str	r0, [r4, #84]	; 0x54
 800a59a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a59c:	602f      	str	r7, [r5, #0]
 800a59e:	2900      	cmp	r1, #0
 800a5a0:	d0c9      	beq.n	800a536 <__sflush_r+0x1a>
 800a5a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5a6:	4299      	cmp	r1, r3
 800a5a8:	d002      	beq.n	800a5b0 <__sflush_r+0x94>
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f7ff f9f6 	bl	800999c <_free_r>
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	6360      	str	r0, [r4, #52]	; 0x34
 800a5b4:	e7c0      	b.n	800a538 <__sflush_r+0x1c>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	47b0      	blx	r6
 800a5bc:	1c41      	adds	r1, r0, #1
 800a5be:	d1c8      	bne.n	800a552 <__sflush_r+0x36>
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0c5      	beq.n	800a552 <__sflush_r+0x36>
 800a5c6:	2b1d      	cmp	r3, #29
 800a5c8:	d001      	beq.n	800a5ce <__sflush_r+0xb2>
 800a5ca:	2b16      	cmp	r3, #22
 800a5cc:	d101      	bne.n	800a5d2 <__sflush_r+0xb6>
 800a5ce:	602f      	str	r7, [r5, #0]
 800a5d0:	e7b1      	b.n	800a536 <__sflush_r+0x1a>
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5d8:	81a3      	strh	r3, [r4, #12]
 800a5da:	e7ad      	b.n	800a538 <__sflush_r+0x1c>
 800a5dc:	690f      	ldr	r7, [r1, #16]
 800a5de:	2f00      	cmp	r7, #0
 800a5e0:	d0a9      	beq.n	800a536 <__sflush_r+0x1a>
 800a5e2:	0793      	lsls	r3, r2, #30
 800a5e4:	680e      	ldr	r6, [r1, #0]
 800a5e6:	bf08      	it	eq
 800a5e8:	694b      	ldreq	r3, [r1, #20]
 800a5ea:	600f      	str	r7, [r1, #0]
 800a5ec:	bf18      	it	ne
 800a5ee:	2300      	movne	r3, #0
 800a5f0:	eba6 0807 	sub.w	r8, r6, r7
 800a5f4:	608b      	str	r3, [r1, #8]
 800a5f6:	f1b8 0f00 	cmp.w	r8, #0
 800a5fa:	dd9c      	ble.n	800a536 <__sflush_r+0x1a>
 800a5fc:	6a21      	ldr	r1, [r4, #32]
 800a5fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a600:	4643      	mov	r3, r8
 800a602:	463a      	mov	r2, r7
 800a604:	4628      	mov	r0, r5
 800a606:	47b0      	blx	r6
 800a608:	2800      	cmp	r0, #0
 800a60a:	dc06      	bgt.n	800a61a <__sflush_r+0xfe>
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a612:	81a3      	strh	r3, [r4, #12]
 800a614:	f04f 30ff 	mov.w	r0, #4294967295
 800a618:	e78e      	b.n	800a538 <__sflush_r+0x1c>
 800a61a:	4407      	add	r7, r0
 800a61c:	eba8 0800 	sub.w	r8, r8, r0
 800a620:	e7e9      	b.n	800a5f6 <__sflush_r+0xda>
 800a622:	bf00      	nop
 800a624:	dfbffffe 	.word	0xdfbffffe

0800a628 <_fflush_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	690b      	ldr	r3, [r1, #16]
 800a62c:	4605      	mov	r5, r0
 800a62e:	460c      	mov	r4, r1
 800a630:	b913      	cbnz	r3, 800a638 <_fflush_r+0x10>
 800a632:	2500      	movs	r5, #0
 800a634:	4628      	mov	r0, r5
 800a636:	bd38      	pop	{r3, r4, r5, pc}
 800a638:	b118      	cbz	r0, 800a642 <_fflush_r+0x1a>
 800a63a:	6a03      	ldr	r3, [r0, #32]
 800a63c:	b90b      	cbnz	r3, 800a642 <_fflush_r+0x1a>
 800a63e:	f7fe f935 	bl	80088ac <__sinit>
 800a642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d0f3      	beq.n	800a632 <_fflush_r+0xa>
 800a64a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a64c:	07d0      	lsls	r0, r2, #31
 800a64e:	d404      	bmi.n	800a65a <_fflush_r+0x32>
 800a650:	0599      	lsls	r1, r3, #22
 800a652:	d402      	bmi.n	800a65a <_fflush_r+0x32>
 800a654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a656:	f7fe fb22 	bl	8008c9e <__retarget_lock_acquire_recursive>
 800a65a:	4628      	mov	r0, r5
 800a65c:	4621      	mov	r1, r4
 800a65e:	f7ff ff5d 	bl	800a51c <__sflush_r>
 800a662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a664:	07da      	lsls	r2, r3, #31
 800a666:	4605      	mov	r5, r0
 800a668:	d4e4      	bmi.n	800a634 <_fflush_r+0xc>
 800a66a:	89a3      	ldrh	r3, [r4, #12]
 800a66c:	059b      	lsls	r3, r3, #22
 800a66e:	d4e1      	bmi.n	800a634 <_fflush_r+0xc>
 800a670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a672:	f7fe fb15 	bl	8008ca0 <__retarget_lock_release_recursive>
 800a676:	e7dd      	b.n	800a634 <_fflush_r+0xc>

0800a678 <__swhatbuf_r>:
 800a678:	b570      	push	{r4, r5, r6, lr}
 800a67a:	460c      	mov	r4, r1
 800a67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a680:	2900      	cmp	r1, #0
 800a682:	b096      	sub	sp, #88	; 0x58
 800a684:	4615      	mov	r5, r2
 800a686:	461e      	mov	r6, r3
 800a688:	da0d      	bge.n	800a6a6 <__swhatbuf_r+0x2e>
 800a68a:	89a3      	ldrh	r3, [r4, #12]
 800a68c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a690:	f04f 0100 	mov.w	r1, #0
 800a694:	bf0c      	ite	eq
 800a696:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a69a:	2340      	movne	r3, #64	; 0x40
 800a69c:	2000      	movs	r0, #0
 800a69e:	6031      	str	r1, [r6, #0]
 800a6a0:	602b      	str	r3, [r5, #0]
 800a6a2:	b016      	add	sp, #88	; 0x58
 800a6a4:	bd70      	pop	{r4, r5, r6, pc}
 800a6a6:	466a      	mov	r2, sp
 800a6a8:	f000 f848 	bl	800a73c <_fstat_r>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	dbec      	blt.n	800a68a <__swhatbuf_r+0x12>
 800a6b0:	9901      	ldr	r1, [sp, #4]
 800a6b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a6b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a6ba:	4259      	negs	r1, r3
 800a6bc:	4159      	adcs	r1, r3
 800a6be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6c2:	e7eb      	b.n	800a69c <__swhatbuf_r+0x24>

0800a6c4 <__smakebuf_r>:
 800a6c4:	898b      	ldrh	r3, [r1, #12]
 800a6c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6c8:	079d      	lsls	r5, r3, #30
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	d507      	bpl.n	800a6e0 <__smakebuf_r+0x1c>
 800a6d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	6123      	str	r3, [r4, #16]
 800a6d8:	2301      	movs	r3, #1
 800a6da:	6163      	str	r3, [r4, #20]
 800a6dc:	b002      	add	sp, #8
 800a6de:	bd70      	pop	{r4, r5, r6, pc}
 800a6e0:	ab01      	add	r3, sp, #4
 800a6e2:	466a      	mov	r2, sp
 800a6e4:	f7ff ffc8 	bl	800a678 <__swhatbuf_r>
 800a6e8:	9900      	ldr	r1, [sp, #0]
 800a6ea:	4605      	mov	r5, r0
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f7ff f9c9 	bl	8009a84 <_malloc_r>
 800a6f2:	b948      	cbnz	r0, 800a708 <__smakebuf_r+0x44>
 800a6f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6f8:	059a      	lsls	r2, r3, #22
 800a6fa:	d4ef      	bmi.n	800a6dc <__smakebuf_r+0x18>
 800a6fc:	f023 0303 	bic.w	r3, r3, #3
 800a700:	f043 0302 	orr.w	r3, r3, #2
 800a704:	81a3      	strh	r3, [r4, #12]
 800a706:	e7e3      	b.n	800a6d0 <__smakebuf_r+0xc>
 800a708:	89a3      	ldrh	r3, [r4, #12]
 800a70a:	6020      	str	r0, [r4, #0]
 800a70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a710:	81a3      	strh	r3, [r4, #12]
 800a712:	9b00      	ldr	r3, [sp, #0]
 800a714:	6163      	str	r3, [r4, #20]
 800a716:	9b01      	ldr	r3, [sp, #4]
 800a718:	6120      	str	r0, [r4, #16]
 800a71a:	b15b      	cbz	r3, 800a734 <__smakebuf_r+0x70>
 800a71c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a720:	4630      	mov	r0, r6
 800a722:	f000 f81d 	bl	800a760 <_isatty_r>
 800a726:	b128      	cbz	r0, 800a734 <__smakebuf_r+0x70>
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	f023 0303 	bic.w	r3, r3, #3
 800a72e:	f043 0301 	orr.w	r3, r3, #1
 800a732:	81a3      	strh	r3, [r4, #12]
 800a734:	89a3      	ldrh	r3, [r4, #12]
 800a736:	431d      	orrs	r5, r3
 800a738:	81a5      	strh	r5, [r4, #12]
 800a73a:	e7cf      	b.n	800a6dc <__smakebuf_r+0x18>

0800a73c <_fstat_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	4d07      	ldr	r5, [pc, #28]	; (800a75c <_fstat_r+0x20>)
 800a740:	2300      	movs	r3, #0
 800a742:	4604      	mov	r4, r0
 800a744:	4608      	mov	r0, r1
 800a746:	4611      	mov	r1, r2
 800a748:	602b      	str	r3, [r5, #0]
 800a74a:	f7f7 ff0c 	bl	8002566 <_fstat>
 800a74e:	1c43      	adds	r3, r0, #1
 800a750:	d102      	bne.n	800a758 <_fstat_r+0x1c>
 800a752:	682b      	ldr	r3, [r5, #0]
 800a754:	b103      	cbz	r3, 800a758 <_fstat_r+0x1c>
 800a756:	6023      	str	r3, [r4, #0]
 800a758:	bd38      	pop	{r3, r4, r5, pc}
 800a75a:	bf00      	nop
 800a75c:	2000070c 	.word	0x2000070c

0800a760 <_isatty_r>:
 800a760:	b538      	push	{r3, r4, r5, lr}
 800a762:	4d06      	ldr	r5, [pc, #24]	; (800a77c <_isatty_r+0x1c>)
 800a764:	2300      	movs	r3, #0
 800a766:	4604      	mov	r4, r0
 800a768:	4608      	mov	r0, r1
 800a76a:	602b      	str	r3, [r5, #0]
 800a76c:	f7f7 ff0b 	bl	8002586 <_isatty>
 800a770:	1c43      	adds	r3, r0, #1
 800a772:	d102      	bne.n	800a77a <_isatty_r+0x1a>
 800a774:	682b      	ldr	r3, [r5, #0]
 800a776:	b103      	cbz	r3, 800a77a <_isatty_r+0x1a>
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	bd38      	pop	{r3, r4, r5, pc}
 800a77c:	2000070c 	.word	0x2000070c

0800a780 <_sbrk_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	4d06      	ldr	r5, [pc, #24]	; (800a79c <_sbrk_r+0x1c>)
 800a784:	2300      	movs	r3, #0
 800a786:	4604      	mov	r4, r0
 800a788:	4608      	mov	r0, r1
 800a78a:	602b      	str	r3, [r5, #0]
 800a78c:	f7f7 ff14 	bl	80025b8 <_sbrk>
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	d102      	bne.n	800a79a <_sbrk_r+0x1a>
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	b103      	cbz	r3, 800a79a <_sbrk_r+0x1a>
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	bd38      	pop	{r3, r4, r5, pc}
 800a79c:	2000070c 	.word	0x2000070c

0800a7a0 <memcpy>:
 800a7a0:	440a      	add	r2, r1
 800a7a2:	4291      	cmp	r1, r2
 800a7a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7a8:	d100      	bne.n	800a7ac <memcpy+0xc>
 800a7aa:	4770      	bx	lr
 800a7ac:	b510      	push	{r4, lr}
 800a7ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7b6:	4291      	cmp	r1, r2
 800a7b8:	d1f9      	bne.n	800a7ae <memcpy+0xe>
 800a7ba:	bd10      	pop	{r4, pc}

0800a7bc <__assert_func>:
 800a7bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7be:	4614      	mov	r4, r2
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	4b09      	ldr	r3, [pc, #36]	; (800a7e8 <__assert_func+0x2c>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4605      	mov	r5, r0
 800a7c8:	68d8      	ldr	r0, [r3, #12]
 800a7ca:	b14c      	cbz	r4, 800a7e0 <__assert_func+0x24>
 800a7cc:	4b07      	ldr	r3, [pc, #28]	; (800a7ec <__assert_func+0x30>)
 800a7ce:	9100      	str	r1, [sp, #0]
 800a7d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7d4:	4906      	ldr	r1, [pc, #24]	; (800a7f0 <__assert_func+0x34>)
 800a7d6:	462b      	mov	r3, r5
 800a7d8:	f000 f844 	bl	800a864 <fiprintf>
 800a7dc:	f000 f854 	bl	800a888 <abort>
 800a7e0:	4b04      	ldr	r3, [pc, #16]	; (800a7f4 <__assert_func+0x38>)
 800a7e2:	461c      	mov	r4, r3
 800a7e4:	e7f3      	b.n	800a7ce <__assert_func+0x12>
 800a7e6:	bf00      	nop
 800a7e8:	20000068 	.word	0x20000068
 800a7ec:	0800ac27 	.word	0x0800ac27
 800a7f0:	0800ac34 	.word	0x0800ac34
 800a7f4:	0800ac62 	.word	0x0800ac62

0800a7f8 <_calloc_r>:
 800a7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7fa:	fba1 2402 	umull	r2, r4, r1, r2
 800a7fe:	b94c      	cbnz	r4, 800a814 <_calloc_r+0x1c>
 800a800:	4611      	mov	r1, r2
 800a802:	9201      	str	r2, [sp, #4]
 800a804:	f7ff f93e 	bl	8009a84 <_malloc_r>
 800a808:	9a01      	ldr	r2, [sp, #4]
 800a80a:	4605      	mov	r5, r0
 800a80c:	b930      	cbnz	r0, 800a81c <_calloc_r+0x24>
 800a80e:	4628      	mov	r0, r5
 800a810:	b003      	add	sp, #12
 800a812:	bd30      	pop	{r4, r5, pc}
 800a814:	220c      	movs	r2, #12
 800a816:	6002      	str	r2, [r0, #0]
 800a818:	2500      	movs	r5, #0
 800a81a:	e7f8      	b.n	800a80e <_calloc_r+0x16>
 800a81c:	4621      	mov	r1, r4
 800a81e:	f7fe f9c1 	bl	8008ba4 <memset>
 800a822:	e7f4      	b.n	800a80e <_calloc_r+0x16>

0800a824 <__ascii_mbtowc>:
 800a824:	b082      	sub	sp, #8
 800a826:	b901      	cbnz	r1, 800a82a <__ascii_mbtowc+0x6>
 800a828:	a901      	add	r1, sp, #4
 800a82a:	b142      	cbz	r2, 800a83e <__ascii_mbtowc+0x1a>
 800a82c:	b14b      	cbz	r3, 800a842 <__ascii_mbtowc+0x1e>
 800a82e:	7813      	ldrb	r3, [r2, #0]
 800a830:	600b      	str	r3, [r1, #0]
 800a832:	7812      	ldrb	r2, [r2, #0]
 800a834:	1e10      	subs	r0, r2, #0
 800a836:	bf18      	it	ne
 800a838:	2001      	movne	r0, #1
 800a83a:	b002      	add	sp, #8
 800a83c:	4770      	bx	lr
 800a83e:	4610      	mov	r0, r2
 800a840:	e7fb      	b.n	800a83a <__ascii_mbtowc+0x16>
 800a842:	f06f 0001 	mvn.w	r0, #1
 800a846:	e7f8      	b.n	800a83a <__ascii_mbtowc+0x16>

0800a848 <__ascii_wctomb>:
 800a848:	b149      	cbz	r1, 800a85e <__ascii_wctomb+0x16>
 800a84a:	2aff      	cmp	r2, #255	; 0xff
 800a84c:	bf85      	ittet	hi
 800a84e:	238a      	movhi	r3, #138	; 0x8a
 800a850:	6003      	strhi	r3, [r0, #0]
 800a852:	700a      	strbls	r2, [r1, #0]
 800a854:	f04f 30ff 	movhi.w	r0, #4294967295
 800a858:	bf98      	it	ls
 800a85a:	2001      	movls	r0, #1
 800a85c:	4770      	bx	lr
 800a85e:	4608      	mov	r0, r1
 800a860:	4770      	bx	lr
	...

0800a864 <fiprintf>:
 800a864:	b40e      	push	{r1, r2, r3}
 800a866:	b503      	push	{r0, r1, lr}
 800a868:	4601      	mov	r1, r0
 800a86a:	ab03      	add	r3, sp, #12
 800a86c:	4805      	ldr	r0, [pc, #20]	; (800a884 <fiprintf+0x20>)
 800a86e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a872:	6800      	ldr	r0, [r0, #0]
 800a874:	9301      	str	r3, [sp, #4]
 800a876:	f7ff fd37 	bl	800a2e8 <_vfiprintf_r>
 800a87a:	b002      	add	sp, #8
 800a87c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a880:	b003      	add	sp, #12
 800a882:	4770      	bx	lr
 800a884:	20000068 	.word	0x20000068

0800a888 <abort>:
 800a888:	b508      	push	{r3, lr}
 800a88a:	2006      	movs	r0, #6
 800a88c:	f000 f82c 	bl	800a8e8 <raise>
 800a890:	2001      	movs	r0, #1
 800a892:	f7f7 fe19 	bl	80024c8 <_exit>

0800a896 <_raise_r>:
 800a896:	291f      	cmp	r1, #31
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4604      	mov	r4, r0
 800a89c:	460d      	mov	r5, r1
 800a89e:	d904      	bls.n	800a8aa <_raise_r+0x14>
 800a8a0:	2316      	movs	r3, #22
 800a8a2:	6003      	str	r3, [r0, #0]
 800a8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a8:	bd38      	pop	{r3, r4, r5, pc}
 800a8aa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a8ac:	b112      	cbz	r2, 800a8b4 <_raise_r+0x1e>
 800a8ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8b2:	b94b      	cbnz	r3, 800a8c8 <_raise_r+0x32>
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f000 f831 	bl	800a91c <_getpid_r>
 800a8ba:	462a      	mov	r2, r5
 800a8bc:	4601      	mov	r1, r0
 800a8be:	4620      	mov	r0, r4
 800a8c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8c4:	f000 b818 	b.w	800a8f8 <_kill_r>
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d00a      	beq.n	800a8e2 <_raise_r+0x4c>
 800a8cc:	1c59      	adds	r1, r3, #1
 800a8ce:	d103      	bne.n	800a8d8 <_raise_r+0x42>
 800a8d0:	2316      	movs	r3, #22
 800a8d2:	6003      	str	r3, [r0, #0]
 800a8d4:	2001      	movs	r0, #1
 800a8d6:	e7e7      	b.n	800a8a8 <_raise_r+0x12>
 800a8d8:	2400      	movs	r4, #0
 800a8da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8de:	4628      	mov	r0, r5
 800a8e0:	4798      	blx	r3
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	e7e0      	b.n	800a8a8 <_raise_r+0x12>
	...

0800a8e8 <raise>:
 800a8e8:	4b02      	ldr	r3, [pc, #8]	; (800a8f4 <raise+0xc>)
 800a8ea:	4601      	mov	r1, r0
 800a8ec:	6818      	ldr	r0, [r3, #0]
 800a8ee:	f7ff bfd2 	b.w	800a896 <_raise_r>
 800a8f2:	bf00      	nop
 800a8f4:	20000068 	.word	0x20000068

0800a8f8 <_kill_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	4d07      	ldr	r5, [pc, #28]	; (800a918 <_kill_r+0x20>)
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	4604      	mov	r4, r0
 800a900:	4608      	mov	r0, r1
 800a902:	4611      	mov	r1, r2
 800a904:	602b      	str	r3, [r5, #0]
 800a906:	f7f7 fdcf 	bl	80024a8 <_kill>
 800a90a:	1c43      	adds	r3, r0, #1
 800a90c:	d102      	bne.n	800a914 <_kill_r+0x1c>
 800a90e:	682b      	ldr	r3, [r5, #0]
 800a910:	b103      	cbz	r3, 800a914 <_kill_r+0x1c>
 800a912:	6023      	str	r3, [r4, #0]
 800a914:	bd38      	pop	{r3, r4, r5, pc}
 800a916:	bf00      	nop
 800a918:	2000070c 	.word	0x2000070c

0800a91c <_getpid_r>:
 800a91c:	f7f7 bdbc 	b.w	8002498 <_getpid>

0800a920 <_init>:
 800a920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a922:	bf00      	nop
 800a924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a926:	bc08      	pop	{r3}
 800a928:	469e      	mov	lr, r3
 800a92a:	4770      	bx	lr

0800a92c <_fini>:
 800a92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92e:	bf00      	nop
 800a930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a932:	bc08      	pop	{r3}
 800a934:	469e      	mov	lr, r3
 800a936:	4770      	bx	lr
