
lcd_smol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d68c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f34  0800d820  0800d820  0001d820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e754  0800e754  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e754  0800e754  0001e754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e75c  0800e75c  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e75c  0800e75c  0001e75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e760  0800e760  0001e760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800e764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003600  2000025c  0800e9c0  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000385c  0800e9c0  0002385c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b715  00000000  00000000  000202cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d2b  00000000  00000000  0003b9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  0003f710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001326  00000000  00000000  00040fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253bf  00000000  00000000  000422de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000207fc  00000000  00000000  0006769d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d61a9  00000000  00000000  00087e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007934  00000000  00000000  0015e044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00165978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000025c 	.word	0x2000025c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d804 	.word	0x0800d804

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000260 	.word	0x20000260
 80001cc:	0800d804 	.word	0x0800d804

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f002 ff59 	bl	8003d68 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f002 fc5a 	bl	8003770 <HAL_Delay>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f002 ff4b 	bl	8003d68 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f002 fc4c 	bl	8003770 <HAL_Delay>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ee6:	bf00      	nop
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <SPI_TxByte+0x30>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d1f8      	bne.n	8000ee8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000ef6:	1df9      	adds	r1, r7, #7
 8000ef8:	2364      	movs	r3, #100	; 0x64
 8000efa:	2201      	movs	r2, #1
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <SPI_TxByte+0x30>)
 8000efe:	f004 fae2 	bl	80054c6 <HAL_SPI_Transmit>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000348 	.word	0x20000348

08000f10 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f1c:	bf00      	nop
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <SPI_TxBuffer+0x30>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d1f8      	bne.n	8000f1e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f2c:	887a      	ldrh	r2, [r7, #2]
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <SPI_TxBuffer+0x30>)
 8000f34:	f004 fac7 	bl	80054c6 <HAL_SPI_Transmit>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000348 	.word	0x20000348

08000f44 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000f4a:	23ff      	movs	r3, #255	; 0xff
 8000f4c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f4e:	bf00      	nop
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <SPI_RxByte+0x34>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d1f8      	bne.n	8000f50 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f5e:	1dba      	adds	r2, r7, #6
 8000f60:	1df9      	adds	r1, r7, #7
 8000f62:	2364      	movs	r3, #100	; 0x64
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <SPI_RxByte+0x34>)
 8000f6a:	f004 fc21 	bl	80057b0 <HAL_SPI_TransmitReceive>

	return data;
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000348 	.word	0x20000348

08000f7c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000f84:	f7ff ffde 	bl	8000f44 <SPI_RxByte>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	701a      	strb	r2, [r3, #0]
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <SD_ReadyWait+0x30>)
 8000fa0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fa4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000fa6:	f7ff ffcd 	bl	8000f44 <SPI_RxByte>
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2bff      	cmp	r3, #255	; 0xff
 8000fb2:	d003      	beq.n	8000fbc <SD_ReadyWait+0x24>
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SD_ReadyWait+0x30>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1f4      	bne.n	8000fa6 <SD_ReadyWait+0xe>

	return res;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000027a 	.word	0x2000027a

08000fcc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000fd2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000fd6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000fd8:	f7ff ff72 	bl	8000ec0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	e005      	b.n	8000fee <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000fe2:	20ff      	movs	r0, #255	; 0xff
 8000fe4:	f7ff ff7a 	bl	8000edc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	3301      	adds	r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	2b09      	cmp	r3, #9
 8000ff2:	ddf6      	ble.n	8000fe2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000ff4:	f7ff ff56 	bl	8000ea4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000ff8:	2340      	movs	r3, #64	; 0x40
 8000ffa:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800100c:	2395      	movs	r3, #149	; 0x95
 800100e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001010:	463b      	mov	r3, r7
 8001012:	2106      	movs	r1, #6
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff7b 	bl	8000f10 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800101a:	e002      	b.n	8001022 <SD_PowerOn+0x56>
	{
		cnt--;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3b01      	subs	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001022:	f7ff ff8f 	bl	8000f44 <SPI_RxByte>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d002      	beq.n	8001032 <SD_PowerOn+0x66>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f4      	bne.n	800101c <SD_PowerOn+0x50>
	}

	DESELECT();
 8001032:	f7ff ff45 	bl	8000ec0 <DESELECT>
	SPI_TxByte(0XFF);
 8001036:	20ff      	movs	r0, #255	; 0xff
 8001038:	f7ff ff50 	bl	8000edc <SPI_TxByte>

	PowerFlag = 1;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <SD_PowerOn+0x80>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000027d 	.word	0x2000027d

08001050 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <SD_PowerOff+0x14>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	2000027d 	.word	0x2000027d

08001068 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <SD_CheckPower+0x14>)
 800106e:	781b      	ldrb	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	2000027d 	.word	0x2000027d

08001080 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <SD_RxDataBlock+0x58>)
 800108c:	22c8      	movs	r2, #200	; 0xc8
 800108e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001090:	f7ff ff58 	bl	8000f44 <SPI_RxByte>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2bff      	cmp	r3, #255	; 0xff
 800109c:	d103      	bne.n	80010a6 <SD_RxDataBlock+0x26>
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <SD_RxDataBlock+0x58>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f4      	bne.n	8001090 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	2bfe      	cmp	r3, #254	; 0xfe
 80010aa:	d001      	beq.n	80010b0 <SD_RxDataBlock+0x30>
 80010ac:	2300      	movs	r3, #0
 80010ae:	e00f      	b.n	80010d0 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff60 	bl	8000f7c <SPI_RxBytePtr>
	} while(len--);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	1e5a      	subs	r2, r3, #1
 80010c0:	603a      	str	r2, [r7, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f4      	bne.n	80010b0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80010c6:	f7ff ff3d 	bl	8000f44 <SPI_RxByte>
	SPI_RxByte();
 80010ca:	f7ff ff3b 	bl	8000f44 <SPI_RxByte>

	return TRUE;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000278 	.word	0x20000278

080010dc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80010ec:	f7ff ff54 	bl	8000f98 <SD_ReadyWait>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2bff      	cmp	r3, #255	; 0xff
 80010f4:	d001      	beq.n	80010fa <SD_TxDataBlock+0x1e>
 80010f6:	2300      	movs	r3, #0
 80010f8:	e02f      	b.n	800115a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff feed 	bl	8000edc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	2bfd      	cmp	r3, #253	; 0xfd
 8001106:	d020      	beq.n	800114a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff feff 	bl	8000f10 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001112:	f7ff ff17 	bl	8000f44 <SPI_RxByte>
		SPI_RxByte();
 8001116:	f7ff ff15 	bl	8000f44 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800111a:	e00b      	b.n	8001134 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800111c:	f7ff ff12 	bl	8000f44 <SPI_RxByte>
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	f003 031f 	and.w	r3, r3, #31
 800112a:	2b05      	cmp	r3, #5
 800112c:	d006      	beq.n	800113c <SD_TxDataBlock+0x60>
			i++;
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	3301      	adds	r3, #1
 8001132:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	2b40      	cmp	r3, #64	; 0x40
 8001138:	d9f0      	bls.n	800111c <SD_TxDataBlock+0x40>
 800113a:	e000      	b.n	800113e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800113c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800113e:	bf00      	nop
 8001140:	f7ff ff00 	bl	8000f44 <SPI_RxByte>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0fa      	beq.n	8001140 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	2b05      	cmp	r3, #5
 8001152:	d101      	bne.n	8001158 <SD_TxDataBlock+0x7c>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	6039      	str	r1, [r7, #0]
 800116c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800116e:	f7ff ff13 	bl	8000f98 <SD_ReadyWait>
 8001172:	4603      	mov	r3, r0
 8001174:	2bff      	cmp	r3, #255	; 0xff
 8001176:	d001      	beq.n	800117c <SD_SendCmd+0x1a>
 8001178:	23ff      	movs	r3, #255	; 0xff
 800117a:	e042      	b.n	8001202 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff feac 	bl	8000edc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	0e1b      	lsrs	r3, r3, #24
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fea6 	bl	8000edc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	0c1b      	lsrs	r3, r3, #16
 8001194:	b2db      	uxtb	r3, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fea0 	bl	8000edc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fe9a 	bl	8000edc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fe95 	bl	8000edc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b40      	cmp	r3, #64	; 0x40
 80011b6:	d102      	bne.n	80011be <SD_SendCmd+0x5c>
 80011b8:	2395      	movs	r3, #149	; 0x95
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e007      	b.n	80011ce <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b48      	cmp	r3, #72	; 0x48
 80011c2:	d102      	bne.n	80011ca <SD_SendCmd+0x68>
 80011c4:	2387      	movs	r3, #135	; 0x87
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e001      	b.n	80011ce <SD_SendCmd+0x6c>
	else crc = 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fe83 	bl	8000edc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b4c      	cmp	r3, #76	; 0x4c
 80011da:	d101      	bne.n	80011e0 <SD_SendCmd+0x7e>
 80011dc:	f7ff feb2 	bl	8000f44 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80011e0:	230a      	movs	r3, #10
 80011e2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80011e4:	f7ff feae 	bl	8000f44 <SPI_RxByte>
 80011e8:	4603      	mov	r3, r0
 80011ea:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80011ec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	da05      	bge.n	8001200 <SD_SendCmd+0x9e>
 80011f4:	7bbb      	ldrb	r3, [r7, #14]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	73bb      	strb	r3, [r7, #14]
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1f1      	bne.n	80011e4 <SD_SendCmd+0x82>

	return res;
 8001200:	7b7b      	ldrb	r3, [r7, #13]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SD_disk_initialize+0x14>
 800121c:	2301      	movs	r3, #1
 800121e:	e0d1      	b.n	80013c4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001220:	4b6a      	ldr	r3, [pc, #424]	; (80013cc <SD_disk_initialize+0x1c0>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <SD_disk_initialize+0x2a>
 800122e:	4b67      	ldr	r3, [pc, #412]	; (80013cc <SD_disk_initialize+0x1c0>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	e0c6      	b.n	80013c4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001236:	f7ff fec9 	bl	8000fcc <SD_PowerOn>

	/* slave select */
	SELECT();
 800123a:	f7ff fe33 	bl	8000ea4 <SELECT>

	/* check disk type */
	type = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001242:	2100      	movs	r1, #0
 8001244:	2040      	movs	r0, #64	; 0x40
 8001246:	f7ff ff8c 	bl	8001162 <SD_SendCmd>
 800124a:	4603      	mov	r3, r0
 800124c:	2b01      	cmp	r3, #1
 800124e:	f040 80a1 	bne.w	8001394 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001252:	4b5f      	ldr	r3, [pc, #380]	; (80013d0 <SD_disk_initialize+0x1c4>)
 8001254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001258:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800125a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800125e:	2048      	movs	r0, #72	; 0x48
 8001260:	f7ff ff7f 	bl	8001162 <SD_SendCmd>
 8001264:	4603      	mov	r3, r0
 8001266:	2b01      	cmp	r3, #1
 8001268:	d155      	bne.n	8001316 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800126a:	2300      	movs	r3, #0
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	e00c      	b.n	800128a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001270:	7bfc      	ldrb	r4, [r7, #15]
 8001272:	f7ff fe67 	bl	8000f44 <SPI_RxByte>
 8001276:	4603      	mov	r3, r0
 8001278:	461a      	mov	r2, r3
 800127a:	f104 0310 	add.w	r3, r4, #16
 800127e:	443b      	add	r3, r7
 8001280:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	3301      	adds	r3, #1
 8001288:	73fb      	strb	r3, [r7, #15]
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	2b03      	cmp	r3, #3
 800128e:	d9ef      	bls.n	8001270 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001290:	7abb      	ldrb	r3, [r7, #10]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d17e      	bne.n	8001394 <SD_disk_initialize+0x188>
 8001296:	7afb      	ldrb	r3, [r7, #11]
 8001298:	2baa      	cmp	r3, #170	; 0xaa
 800129a:	d17b      	bne.n	8001394 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800129c:	2100      	movs	r1, #0
 800129e:	2077      	movs	r0, #119	; 0x77
 80012a0:	f7ff ff5f 	bl	8001162 <SD_SendCmd>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d807      	bhi.n	80012ba <SD_disk_initialize+0xae>
 80012aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012ae:	2069      	movs	r0, #105	; 0x69
 80012b0:	f7ff ff57 	bl	8001162 <SD_SendCmd>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d004      	beq.n	80012c4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80012ba:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <SD_disk_initialize+0x1c4>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1ec      	bne.n	800129c <SD_disk_initialize+0x90>
 80012c2:	e000      	b.n	80012c6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012c4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80012c6:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <SD_disk_initialize+0x1c4>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d062      	beq.n	8001394 <SD_disk_initialize+0x188>
 80012ce:	2100      	movs	r1, #0
 80012d0:	207a      	movs	r0, #122	; 0x7a
 80012d2:	f7ff ff46 	bl	8001162 <SD_SendCmd>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d15b      	bne.n	8001394 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e00c      	b.n	80012fc <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80012e2:	7bfc      	ldrb	r4, [r7, #15]
 80012e4:	f7ff fe2e 	bl	8000f44 <SPI_RxByte>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	f104 0310 	add.w	r3, r4, #16
 80012f0:	443b      	add	r3, r7
 80012f2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	3301      	adds	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d9ef      	bls.n	80012e2 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001302:	7a3b      	ldrb	r3, [r7, #8]
 8001304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SD_disk_initialize+0x104>
 800130c:	230c      	movs	r3, #12
 800130e:	e000      	b.n	8001312 <SD_disk_initialize+0x106>
 8001310:	2304      	movs	r3, #4
 8001312:	73bb      	strb	r3, [r7, #14]
 8001314:	e03e      	b.n	8001394 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001316:	2100      	movs	r1, #0
 8001318:	2077      	movs	r0, #119	; 0x77
 800131a:	f7ff ff22 	bl	8001162 <SD_SendCmd>
 800131e:	4603      	mov	r3, r0
 8001320:	2b01      	cmp	r3, #1
 8001322:	d808      	bhi.n	8001336 <SD_disk_initialize+0x12a>
 8001324:	2100      	movs	r1, #0
 8001326:	2069      	movs	r0, #105	; 0x69
 8001328:	f7ff ff1b 	bl	8001162 <SD_SendCmd>
 800132c:	4603      	mov	r3, r0
 800132e:	2b01      	cmp	r3, #1
 8001330:	d801      	bhi.n	8001336 <SD_disk_initialize+0x12a>
 8001332:	2302      	movs	r3, #2
 8001334:	e000      	b.n	8001338 <SD_disk_initialize+0x12c>
 8001336:	2301      	movs	r3, #1
 8001338:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d10e      	bne.n	800135e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001340:	2100      	movs	r1, #0
 8001342:	2077      	movs	r0, #119	; 0x77
 8001344:	f7ff ff0d 	bl	8001162 <SD_SendCmd>
 8001348:	4603      	mov	r3, r0
 800134a:	2b01      	cmp	r3, #1
 800134c:	d80e      	bhi.n	800136c <SD_disk_initialize+0x160>
 800134e:	2100      	movs	r1, #0
 8001350:	2069      	movs	r0, #105	; 0x69
 8001352:	f7ff ff06 	bl	8001162 <SD_SendCmd>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d107      	bne.n	800136c <SD_disk_initialize+0x160>
 800135c:	e00c      	b.n	8001378 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800135e:	2100      	movs	r1, #0
 8001360:	2041      	movs	r0, #65	; 0x41
 8001362:	f7ff fefe 	bl	8001162 <SD_SendCmd>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d004      	beq.n	8001376 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <SD_disk_initialize+0x1c4>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1e2      	bne.n	800133a <SD_disk_initialize+0x12e>
 8001374:	e000      	b.n	8001378 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001376:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <SD_disk_initialize+0x1c4>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d007      	beq.n	8001390 <SD_disk_initialize+0x184>
 8001380:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001384:	2050      	movs	r0, #80	; 0x50
 8001386:	f7ff feec 	bl	8001162 <SD_SendCmd>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SD_disk_initialize+0x188>
 8001390:	2300      	movs	r3, #0
 8001392:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001394:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <SD_disk_initialize+0x1c8>)
 8001396:	7bbb      	ldrb	r3, [r7, #14]
 8001398:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800139a:	f7ff fd91 	bl	8000ec0 <DESELECT>
	SPI_RxByte();
 800139e:	f7ff fdd1 	bl	8000f44 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <SD_disk_initialize+0x1c0>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	f023 0301 	bic.w	r3, r3, #1
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <SD_disk_initialize+0x1c0>)
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	e001      	b.n	80013be <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80013ba:	f7ff fe49 	bl	8001050 <SD_PowerOff>
	}

	return Stat;
 80013be:	4b03      	ldr	r3, [pc, #12]	; (80013cc <SD_disk_initialize+0x1c0>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2db      	uxtb	r3, r3
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd90      	pop	{r4, r7, pc}
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000278 	.word	0x20000278
 80013d4:	2000027c 	.word	0x2000027c

080013d8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SD_disk_status+0x14>
 80013e8:	2301      	movs	r3, #1
 80013ea:	e002      	b.n	80013f2 <SD_disk_status+0x1a>
	return Stat;
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SD_disk_status+0x28>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000000 	.word	0x20000000

08001404 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	4603      	mov	r3, r0
 8001412:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <SD_disk_read+0x1c>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <SD_disk_read+0x20>
 8001420:	2304      	movs	r3, #4
 8001422:	e051      	b.n	80014c8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <SD_disk_read+0xcc>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SD_disk_read+0x32>
 8001432:	2303      	movs	r3, #3
 8001434:	e048      	b.n	80014c8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001436:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <SD_disk_read+0xd0>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <SD_disk_read+0x44>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	025b      	lsls	r3, r3, #9
 8001446:	607b      	str	r3, [r7, #4]

	SELECT();
 8001448:	f7ff fd2c 	bl	8000ea4 <SELECT>

	if (count == 1)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d111      	bne.n	8001476 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	2051      	movs	r0, #81	; 0x51
 8001456:	f7ff fe84 	bl	8001162 <SD_SendCmd>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d129      	bne.n	80014b4 <SD_disk_read+0xb0>
 8001460:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001464:	68b8      	ldr	r0, [r7, #8]
 8001466:	f7ff fe0b 	bl	8001080 <SD_RxDataBlock>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d021      	beq.n	80014b4 <SD_disk_read+0xb0>
 8001470:	2300      	movs	r3, #0
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	e01e      	b.n	80014b4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	2052      	movs	r0, #82	; 0x52
 800147a:	f7ff fe72 	bl	8001162 <SD_SendCmd>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d117      	bne.n	80014b4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001488:	68b8      	ldr	r0, [r7, #8]
 800148a:	f7ff fdf9 	bl	8001080 <SD_RxDataBlock>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00a      	beq.n	80014aa <SD_disk_read+0xa6>
				buff += 512;
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800149a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	3b01      	subs	r3, #1
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1ed      	bne.n	8001484 <SD_disk_read+0x80>
 80014a8:	e000      	b.n	80014ac <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80014aa:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80014ac:	2100      	movs	r1, #0
 80014ae:	204c      	movs	r0, #76	; 0x4c
 80014b0:	f7ff fe57 	bl	8001162 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80014b4:	f7ff fd04 	bl	8000ec0 <DESELECT>
	SPI_RxByte();
 80014b8:	f7ff fd44 	bl	8000f44 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	bf14      	ite	ne
 80014c2:	2301      	movne	r3, #1
 80014c4:	2300      	moveq	r3, #0
 80014c6:	b2db      	uxtb	r3, r3
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000000 	.word	0x20000000
 80014d4:	2000027c 	.word	0x2000027c

080014d8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	4603      	mov	r3, r0
 80014e6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <SD_disk_write+0x1c>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <SD_disk_write+0x20>
 80014f4:	2304      	movs	r3, #4
 80014f6:	e06b      	b.n	80015d0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014f8:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <SD_disk_write+0x100>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SD_disk_write+0x32>
 8001506:	2303      	movs	r3, #3
 8001508:	e062      	b.n	80015d0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800150a:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <SD_disk_write+0x100>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SD_disk_write+0x44>
 8001518:	2302      	movs	r3, #2
 800151a:	e059      	b.n	80015d0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800151c:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <SD_disk_write+0x104>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <SD_disk_write+0x56>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	025b      	lsls	r3, r3, #9
 800152c:	607b      	str	r3, [r7, #4]

	SELECT();
 800152e:	f7ff fcb9 	bl	8000ea4 <SELECT>

	if (count == 1)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d110      	bne.n	800155a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	2058      	movs	r0, #88	; 0x58
 800153c:	f7ff fe11 	bl	8001162 <SD_SendCmd>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d13a      	bne.n	80015bc <SD_disk_write+0xe4>
 8001546:	21fe      	movs	r1, #254	; 0xfe
 8001548:	68b8      	ldr	r0, [r7, #8]
 800154a:	f7ff fdc7 	bl	80010dc <SD_TxDataBlock>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d033      	beq.n	80015bc <SD_disk_write+0xe4>
			count = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	e030      	b.n	80015bc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <SD_disk_write+0x104>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001566:	2100      	movs	r1, #0
 8001568:	2077      	movs	r0, #119	; 0x77
 800156a:	f7ff fdfa 	bl	8001162 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800156e:	6839      	ldr	r1, [r7, #0]
 8001570:	2057      	movs	r0, #87	; 0x57
 8001572:	f7ff fdf6 	bl	8001162 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	2059      	movs	r0, #89	; 0x59
 800157a:	f7ff fdf2 	bl	8001162 <SD_SendCmd>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d11b      	bne.n	80015bc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001584:	21fc      	movs	r1, #252	; 0xfc
 8001586:	68b8      	ldr	r0, [r7, #8]
 8001588:	f7ff fda8 	bl	80010dc <SD_TxDataBlock>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00a      	beq.n	80015a8 <SD_disk_write+0xd0>
				buff += 512;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001598:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	3b01      	subs	r3, #1
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1ee      	bne.n	8001584 <SD_disk_write+0xac>
 80015a6:	e000      	b.n	80015aa <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015a8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80015aa:	21fd      	movs	r1, #253	; 0xfd
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fd95 	bl	80010dc <SD_TxDataBlock>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <SD_disk_write+0xe4>
			{
				count = 1;
 80015b8:	2301      	movs	r3, #1
 80015ba:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80015bc:	f7ff fc80 	bl	8000ec0 <DESELECT>
	SPI_RxByte();
 80015c0:	f7ff fcc0 	bl	8000f44 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bf14      	ite	ne
 80015ca:	2301      	movne	r3, #1
 80015cc:	2300      	moveq	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000000 	.word	0x20000000
 80015dc:	2000027c 	.word	0x2000027c

080015e0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b08b      	sub	sp, #44	; 0x2c
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	603a      	str	r2, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	460b      	mov	r3, r1
 80015ee:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SD_disk_ioctl+0x1e>
 80015fa:	2304      	movs	r3, #4
 80015fc:	e115      	b.n	800182a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001604:	79bb      	ldrb	r3, [r7, #6]
 8001606:	2b05      	cmp	r3, #5
 8001608:	d124      	bne.n	8001654 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d012      	beq.n	8001638 <SD_disk_ioctl+0x58>
 8001612:	2b02      	cmp	r3, #2
 8001614:	dc1a      	bgt.n	800164c <SD_disk_ioctl+0x6c>
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <SD_disk_ioctl+0x40>
 800161a:	2b01      	cmp	r3, #1
 800161c:	d006      	beq.n	800162c <SD_disk_ioctl+0x4c>
 800161e:	e015      	b.n	800164c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001620:	f7ff fd16 	bl	8001050 <SD_PowerOff>
			res = RES_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800162a:	e0fc      	b.n	8001826 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800162c:	f7ff fcce 	bl	8000fcc <SD_PowerOn>
			res = RES_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001636:	e0f6      	b.n	8001826 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	1c5c      	adds	r4, r3, #1
 800163c:	f7ff fd14 	bl	8001068 <SD_CheckPower>
 8001640:	4603      	mov	r3, r0
 8001642:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001644:	2300      	movs	r3, #0
 8001646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800164a:	e0ec      	b.n	8001826 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800164c:	2304      	movs	r3, #4
 800164e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001652:	e0e8      	b.n	8001826 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001654:	4b77      	ldr	r3, [pc, #476]	; (8001834 <SD_disk_ioctl+0x254>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SD_disk_ioctl+0x86>
 8001662:	2303      	movs	r3, #3
 8001664:	e0e1      	b.n	800182a <SD_disk_ioctl+0x24a>

		SELECT();
 8001666:	f7ff fc1d 	bl	8000ea4 <SELECT>

		switch (ctrl)
 800166a:	79bb      	ldrb	r3, [r7, #6]
 800166c:	2b0d      	cmp	r3, #13
 800166e:	f200 80cb 	bhi.w	8001808 <SD_disk_ioctl+0x228>
 8001672:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <SD_disk_ioctl+0x98>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	08001773 	.word	0x08001773
 800167c:	080016b1 	.word	0x080016b1
 8001680:	08001763 	.word	0x08001763
 8001684:	08001809 	.word	0x08001809
 8001688:	08001809 	.word	0x08001809
 800168c:	08001809 	.word	0x08001809
 8001690:	08001809 	.word	0x08001809
 8001694:	08001809 	.word	0x08001809
 8001698:	08001809 	.word	0x08001809
 800169c:	08001809 	.word	0x08001809
 80016a0:	08001809 	.word	0x08001809
 80016a4:	08001785 	.word	0x08001785
 80016a8:	080017a9 	.word	0x080017a9
 80016ac:	080017cd 	.word	0x080017cd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80016b0:	2100      	movs	r1, #0
 80016b2:	2049      	movs	r0, #73	; 0x49
 80016b4:	f7ff fd55 	bl	8001162 <SD_SendCmd>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f040 80a8 	bne.w	8001810 <SD_disk_ioctl+0x230>
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2110      	movs	r1, #16
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fcda 	bl	8001080 <SD_RxDataBlock>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 809e 	beq.w	8001810 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80016d4:	7b3b      	ldrb	r3, [r7, #12]
 80016d6:	099b      	lsrs	r3, r3, #6
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d10e      	bne.n	80016fc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80016de:	7d7b      	ldrb	r3, [r7, #21]
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	7d3b      	ldrb	r3, [r7, #20]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	3301      	adds	r3, #1
 80016f0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80016f2:	8bfb      	ldrh	r3, [r7, #30]
 80016f4:	029a      	lsls	r2, r3, #10
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e02e      	b.n	800175a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80016fc:	7c7b      	ldrb	r3, [r7, #17]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	b2da      	uxtb	r2, r3
 8001704:	7dbb      	ldrb	r3, [r7, #22]
 8001706:	09db      	lsrs	r3, r3, #7
 8001708:	b2db      	uxtb	r3, r3
 800170a:	4413      	add	r3, r2
 800170c:	b2da      	uxtb	r2, r3
 800170e:	7d7b      	ldrb	r3, [r7, #21]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f003 0306 	and.w	r3, r3, #6
 8001718:	b2db      	uxtb	r3, r3
 800171a:	4413      	add	r3, r2
 800171c:	b2db      	uxtb	r3, r3
 800171e:	3302      	adds	r3, #2
 8001720:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001724:	7d3b      	ldrb	r3, [r7, #20]
 8001726:	099b      	lsrs	r3, r3, #6
 8001728:	b2db      	uxtb	r3, r3
 800172a:	b29a      	uxth	r2, r3
 800172c:	7cfb      	ldrb	r3, [r7, #19]
 800172e:	b29b      	uxth	r3, r3
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	b29b      	uxth	r3, r3
 8001734:	4413      	add	r3, r2
 8001736:	b29a      	uxth	r2, r3
 8001738:	7cbb      	ldrb	r3, [r7, #18]
 800173a:	029b      	lsls	r3, r3, #10
 800173c:	b29b      	uxth	r3, r3
 800173e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001742:	b29b      	uxth	r3, r3
 8001744:	4413      	add	r3, r2
 8001746:	b29b      	uxth	r3, r3
 8001748:	3301      	adds	r3, #1
 800174a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800174c:	8bfa      	ldrh	r2, [r7, #30]
 800174e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001752:	3b09      	subs	r3, #9
 8001754:	409a      	lsls	r2, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001760:	e056      	b.n	8001810 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001768:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001770:	e055      	b.n	800181e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001772:	f7ff fc11 	bl	8000f98 <SD_ReadyWait>
 8001776:	4603      	mov	r3, r0
 8001778:	2bff      	cmp	r3, #255	; 0xff
 800177a:	d14b      	bne.n	8001814 <SD_disk_ioctl+0x234>
 800177c:	2300      	movs	r3, #0
 800177e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001782:	e047      	b.n	8001814 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001784:	2100      	movs	r1, #0
 8001786:	2049      	movs	r0, #73	; 0x49
 8001788:	f7ff fceb 	bl	8001162 <SD_SendCmd>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d142      	bne.n	8001818 <SD_disk_ioctl+0x238>
 8001792:	2110      	movs	r1, #16
 8001794:	6a38      	ldr	r0, [r7, #32]
 8001796:	f7ff fc73 	bl	8001080 <SD_RxDataBlock>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d03b      	beq.n	8001818 <SD_disk_ioctl+0x238>
 80017a0:	2300      	movs	r3, #0
 80017a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017a6:	e037      	b.n	8001818 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017a8:	2100      	movs	r1, #0
 80017aa:	204a      	movs	r0, #74	; 0x4a
 80017ac:	f7ff fcd9 	bl	8001162 <SD_SendCmd>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d132      	bne.n	800181c <SD_disk_ioctl+0x23c>
 80017b6:	2110      	movs	r1, #16
 80017b8:	6a38      	ldr	r0, [r7, #32]
 80017ba:	f7ff fc61 	bl	8001080 <SD_RxDataBlock>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d02b      	beq.n	800181c <SD_disk_ioctl+0x23c>
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017ca:	e027      	b.n	800181c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80017cc:	2100      	movs	r1, #0
 80017ce:	207a      	movs	r0, #122	; 0x7a
 80017d0:	f7ff fcc7 	bl	8001162 <SD_SendCmd>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d116      	bne.n	8001808 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017e0:	e00b      	b.n	80017fa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80017e2:	6a3c      	ldr	r4, [r7, #32]
 80017e4:	1c63      	adds	r3, r4, #1
 80017e6:	623b      	str	r3, [r7, #32]
 80017e8:	f7ff fbac 	bl	8000f44 <SPI_RxByte>
 80017ec:	4603      	mov	r3, r0
 80017ee:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80017f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017f4:	3301      	adds	r3, #1
 80017f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d9ef      	bls.n	80017e2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001808:	2304      	movs	r3, #4
 800180a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800180e:	e006      	b.n	800181e <SD_disk_ioctl+0x23e>
			break;
 8001810:	bf00      	nop
 8001812:	e004      	b.n	800181e <SD_disk_ioctl+0x23e>
			break;
 8001814:	bf00      	nop
 8001816:	e002      	b.n	800181e <SD_disk_ioctl+0x23e>
			break;
 8001818:	bf00      	nop
 800181a:	e000      	b.n	800181e <SD_disk_ioctl+0x23e>
			break;
 800181c:	bf00      	nop
		}

		DESELECT();
 800181e:	f7ff fb4f 	bl	8000ec0 <DESELECT>
		SPI_RxByte();
 8001822:	f7ff fb8f 	bl	8000f44 <SPI_RxByte>
	}

	return res;
 8001826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800182a:	4618      	mov	r0, r3
 800182c:	372c      	adds	r7, #44	; 0x2c
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	bf00      	nop
 8001834:	20000000 	.word	0x20000000

08001838 <uint16_to_bytes>:



// Probably going to move these to a different file, but for now
void uint16_to_bytes(uint16_t in, uint8_t *out)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	80fb      	strh	r3, [r7, #6]
	out[0] = (in >> 8) & 0xFF;
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	b29b      	uxth	r3, r3
 800184a:	b2da      	uxtb	r2, r3
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	701a      	strb	r2, [r3, #0]
	out[1] = in & 0xFF;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	88fa      	ldrh	r2, [r7, #6]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LCD_reset>:
	HX8357_DISPON, 0x80 +  50/5, // Main screen turn on, delay 50 ms
	0,                           // END OF COMMAND LIST
  };

void LCD_reset()
{
 8001866:	b580      	push	{r7, lr}
 8001868:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800186a:	2201      	movs	r2, #1
 800186c:	2102      	movs	r1, #2
 800186e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001872:	f002 fa79 	bl	8003d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001876:	2064      	movs	r0, #100	; 0x64
 8001878:	f001 ff7a 	bl	8003770 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	2102      	movs	r1, #2
 8001880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001884:	f002 fa70 	bl	8003d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001888:	2064      	movs	r0, #100	; 0x64
 800188a:	f001 ff71 	bl	8003770 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800188e:	2201      	movs	r2, #1
 8001890:	2102      	movs	r1, #2
 8001892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001896:	f002 fa67 	bl	8003d68 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800189a:	20c8      	movs	r0, #200	; 0xc8
 800189c:	f001 ff68 	bl	8003770 <HAL_Delay>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <LCD_writeCommand>:

HAL_StatusTypeDef LCD_writeCommand(SPI_HandleTypeDef* spi, uint8_t cmd)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result;
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2108      	movs	r1, #8
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b8:	f002 fa56 	bl	8003d68 <HAL_GPIO_WritePin>
	uint8_t buf[1];
	result = HAL_SPI_TransmitReceive(spi, &cmd, &buf[0], 1, 100);
 80018bc:	f107 020c 	add.w	r2, r7, #12
 80018c0:	1cf9      	adds	r1, r7, #3
 80018c2:	2364      	movs	r3, #100	; 0x64
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2301      	movs	r3, #1
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f003 ff71 	bl	80057b0 <HAL_SPI_TransmitReceive>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80018d2:	2201      	movs	r2, #1
 80018d4:	2108      	movs	r1, #8
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018da:	f002 fa45 	bl	8003d68 <HAL_GPIO_WritePin>
	return result;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <LCD_startWrite>:

void LCD_startWrite()
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2140      	movs	r1, #64	; 0x40
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <LCD_startWrite+0x14>)
 80018f2:	f002 fa39 	bl	8003d68 <HAL_GPIO_WritePin>
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	48000400 	.word	0x48000400

08001900 <LCD_endWrite>:

void LCD_endWrite()
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001904:	2201      	movs	r2, #1
 8001906:	2140      	movs	r1, #64	; 0x40
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <LCD_endWrite+0x14>)
 800190a:	f002 fa2d 	bl	8003d68 <HAL_GPIO_WritePin>
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	48000400 	.word	0x48000400

08001918 <LCD_begin>:

int LCD_begin(SPI_HandleTypeDef* spi)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	LCD_reset();
 8001920:	f7ff ffa1 	bl	8001866 <LCD_reset>
	LCD_startWrite();
 8001924:	f7ff ffe0 	bl	80018e8 <LCD_startWrite>
	uint8_t *addr = init;
 8001928:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <LCD_begin+0xac>)
 800192a:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	HAL_StatusTypeDef result;
	while((cmd = *(addr++)) > 0) // '0' command ends list
 800192c:	e03b      	b.n	80019a6 <LCD_begin+0x8e>
	{
		if (cmd != 0xFF) // '255' is ignored
 800192e:	7abb      	ldrb	r3, [r7, #10]
 8001930:	2bff      	cmp	r3, #255	; 0xff
 8001932:	d00d      	beq.n	8001950 <LCD_begin+0x38>
		{
			result = LCD_writeCommand(spi, cmd);
 8001934:	7abb      	ldrb	r3, [r7, #10]
 8001936:	4619      	mov	r1, r3
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ffb3 	bl	80018a4 <LCD_writeCommand>
 800193e:	4603      	mov	r3, r0
 8001940:	727b      	strb	r3, [r7, #9]
			if (result != HAL_OK)
 8001942:	7a7b      	ldrb	r3, [r7, #9]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <LCD_begin+0x38>
			{
				LCD_endWrite();
 8001948:	f7ff ffda 	bl	8001900 <LCD_endWrite>
				return 0;
 800194c:	2300      	movs	r3, #0
 800194e:	e035      	b.n	80019bc <LCD_begin+0xa4>
			}
		}
		x = *(addr++);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	60fa      	str	r2, [r7, #12]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	723b      	strb	r3, [r7, #8]
		numArgs = x & 0x7F;
 800195a:	7a3b      	ldrb	r3, [r7, #8]
 800195c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001960:	72fb      	strb	r3, [r7, #11]
		if (x & 0x80) // If high bit set...
 8001962:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	da18      	bge.n	800199c <LCD_begin+0x84>
		{
			HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 800196a:	7afa      	ldrb	r2, [r7, #11]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f001 fefc 	bl	8003770 <HAL_Delay>
 8001978:	e015      	b.n	80019a6 <LCD_begin+0x8e>
		}
		else // Otherwise, issue args to command...
		{
			while (numArgs--)
			{
				result = HAL_SPI_Transmit(spi, addr++, 1, 100);
 800197a:	68f9      	ldr	r1, [r7, #12]
 800197c:	1c4b      	adds	r3, r1, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	2364      	movs	r3, #100	; 0x64
 8001982:	2201      	movs	r2, #1
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f003 fd9e 	bl	80054c6 <HAL_SPI_Transmit>
 800198a:	4603      	mov	r3, r0
 800198c:	727b      	strb	r3, [r7, #9]
				if (result != HAL_OK)
 800198e:	7a7b      	ldrb	r3, [r7, #9]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <LCD_begin+0x84>
				{
					LCD_endWrite();
 8001994:	f7ff ffb4 	bl	8001900 <LCD_endWrite>
					return 0;
 8001998:	2300      	movs	r3, #0
 800199a:	e00f      	b.n	80019bc <LCD_begin+0xa4>
			while (numArgs--)
 800199c:	7afb      	ldrb	r3, [r7, #11]
 800199e:	1e5a      	subs	r2, r3, #1
 80019a0:	72fa      	strb	r2, [r7, #11]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1e9      	bne.n	800197a <LCD_begin+0x62>
	while((cmd = *(addr++)) > 0) // '0' command ends list
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	60fa      	str	r2, [r7, #12]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	72bb      	strb	r3, [r7, #10]
 80019b0:	7abb      	ldrb	r3, [r7, #10]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1bb      	bne.n	800192e <LCD_begin+0x16>
				}
			}
		}
	}
	LCD_endWrite();
 80019b6:	f7ff ffa3 	bl	8001900 <LCD_endWrite>
	return 1;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000004 	.word	0x20000004

080019c8 <LCD_setAddrWindow>:
	LCD_endWrite();
	return result == HAL_OK;
}

int LCD_setAddrWindow(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4603      	mov	r3, r0
 80019d8:	817b      	strh	r3, [r7, #10]
 80019da:	460b      	mov	r3, r1
 80019dc:	813b      	strh	r3, [r7, #8]
 80019de:	4613      	mov	r3, r2
 80019e0:	80fb      	strh	r3, [r7, #6]
	uint16_t x2 = x1 + w - 1;
 80019e2:	897a      	ldrh	r2, [r7, #10]
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	4413      	add	r3, r2
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	3b01      	subs	r3, #1
 80019ec:	82fb      	strh	r3, [r7, #22]
	uint16_t y2 = y1 + h - 1;
 80019ee:	893a      	ldrh	r2, [r7, #8]
 80019f0:	8c3b      	ldrh	r3, [r7, #32]
 80019f2:	4413      	add	r3, r2
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3b01      	subs	r3, #1
 80019f8:	82bb      	strh	r3, [r7, #20]
	uint8_t buf[2];

	LCD_startWrite();
 80019fa:	f7ff ff75 	bl	80018e8 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_CASET); // Column address set
 80019fe:	212a      	movs	r1, #42	; 0x2a
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f7ff ff4f 	bl	80018a4 <LCD_writeCommand>

	uint16_to_bytes(x1, buf);
 8001a06:	f107 0210 	add.w	r2, r7, #16
 8001a0a:	897b      	ldrh	r3, [r7, #10]
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ff12 	bl	8001838 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8001a14:	f107 0110 	add.w	r1, r7, #16
 8001a18:	2364      	movs	r3, #100	; 0x64
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f003 fd52 	bl	80054c6 <HAL_SPI_Transmit>

	uint16_to_bytes(x2, buf);
 8001a22:	f107 0210 	add.w	r2, r7, #16
 8001a26:	8afb      	ldrh	r3, [r7, #22]
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff04 	bl	8001838 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8001a30:	f107 0110 	add.w	r1, r7, #16
 8001a34:	2364      	movs	r3, #100	; 0x64
 8001a36:	2202      	movs	r2, #2
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f003 fd44 	bl	80054c6 <HAL_SPI_Transmit>

	LCD_writeCommand(spi, HX8357_PASET); // Row address set
 8001a3e:	212b      	movs	r1, #43	; 0x2b
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f7ff ff2f 	bl	80018a4 <LCD_writeCommand>

	uint16_to_bytes(y1, buf);
 8001a46:	f107 0210 	add.w	r2, r7, #16
 8001a4a:	893b      	ldrh	r3, [r7, #8]
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fef2 	bl	8001838 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8001a54:	f107 0110 	add.w	r1, r7, #16
 8001a58:	2364      	movs	r3, #100	; 0x64
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f003 fd32 	bl	80054c6 <HAL_SPI_Transmit>

	uint16_to_bytes(y2, buf);
 8001a62:	f107 0210 	add.w	r2, r7, #16
 8001a66:	8abb      	ldrh	r3, [r7, #20]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fee4 	bl	8001838 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8001a70:	f107 0110 	add.w	r1, r7, #16
 8001a74:	2364      	movs	r3, #100	; 0x64
 8001a76:	2202      	movs	r2, #2
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f003 fd24 	bl	80054c6 <HAL_SPI_Transmit>

	LCD_endWrite();
 8001a7e:	f7ff ff3f 	bl	8001900 <LCD_endWrite>
	return 1;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <LCD_color565>:

uint16_t LCD_color565(uint8_t red, uint8_t green, uint8_t blue) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
 8001a96:	460b      	mov	r3, r1
 8001a98:	71bb      	strb	r3, [r7, #6]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	717b      	strb	r3, [r7, #5]
    return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | ((blue & 0xF8) >> 3);
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001aa8:	f023 0307 	bic.w	r3, r3, #7
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	79bb      	ldrb	r3, [r7, #6]
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	b21b      	sxth	r3, r3
 8001ab4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	797b      	ldrb	r3, [r7, #5]
 8001ac0:	08db      	lsrs	r3, r3, #3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	b29b      	uxth	r3, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LCD_pushColor>:

int LCD_pushColor(SPI_HandleTypeDef* spi, uint16_t color) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
	LCD_startWrite();
 8001ae4:	f7ff ff00 	bl	80018e8 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8001ae8:	212c      	movs	r1, #44	; 0x2c
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff feda 	bl	80018a4 <LCD_writeCommand>
	HAL_SPI_Transmit(spi, (uint8_t*)&color, 2, 100);
 8001af0:	1cb9      	adds	r1, r7, #2
 8001af2:	2364      	movs	r3, #100	; 0x64
 8001af4:	2202      	movs	r2, #2
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f003 fce5 	bl	80054c6 <HAL_SPI_Transmit>
	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8001afc:	2100      	movs	r1, #0
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fed0 	bl	80018a4 <LCD_writeCommand>
	LCD_endWrite();
 8001b04:	f7ff fefc 	bl	8001900 <LCD_endWrite>
	return 1;
 8001b08:	2301      	movs	r3, #1
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <LCD_pushColorCopy>:

int LCD_pushColorCopy(SPI_HandleTypeDef* spi, uint16_t color, uint32_t count) {
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	817b      	strh	r3, [r7, #10]
	LCD_startWrite();
 8001b20:	f7ff fee2 	bl	80018e8 <LCD_startWrite>

	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8001b24:	212c      	movs	r1, #44	; 0x2c
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f7ff febc 	bl	80018a4 <LCD_writeCommand>

	uint8_t buf[2];
	uint16_to_bytes(color, &buf[0]);
 8001b2c:	f107 0210 	add.w	r2, r7, #16
 8001b30:	897b      	ldrh	r3, [r7, #10]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fe7f 	bl	8001838 <uint16_to_bytes>
	for (int i = 0; i < count; ++i)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	e009      	b.n	8001b54 <LCD_pushColorCopy+0x42>
	{
		HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8001b40:	f107 0110 	add.w	r1, r7, #16
 8001b44:	2364      	movs	r3, #100	; 0x64
 8001b46:	2202      	movs	r2, #2
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f003 fcbc 	bl	80054c6 <HAL_SPI_Transmit>
	for (int i = 0; i < count; ++i)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d8f1      	bhi.n	8001b40 <LCD_pushColorCopy+0x2e>
	}

	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff fea0 	bl	80018a4 <LCD_writeCommand>

	LCD_endWrite();
 8001b64:	f7ff fecc 	bl	8001900 <LCD_endWrite>
	return 1;
 8001b68:	2301      	movs	r3, #1
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <LCD_writePixel>:

	LCD_endWrite();
	return 1;
}

int LCD_writePixel(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color) {
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af02      	add	r7, sp, #8
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	4608      	mov	r0, r1
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4603      	mov	r3, r0
 8001b82:	817b      	strh	r3, [r7, #10]
 8001b84:	460b      	mov	r3, r1
 8001b86:	813b      	strh	r3, [r7, #8]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	80fb      	strh	r3, [r7, #6]
    if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8001b8c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db0d      	blt.n	8001bb0 <LCD_writePixel+0x3e>
 8001b94:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b98:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001b9c:	da08      	bge.n	8001bb0 <LCD_writePixel+0x3e>
 8001b9e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db04      	blt.n	8001bb0 <LCD_writePixel+0x3e>
 8001ba6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001baa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001bae:	db01      	blt.n	8001bb4 <LCD_writePixel+0x42>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e017      	b.n	8001be4 <LCD_writePixel+0x72>
    if(!LCD_setAddrWindow(spi, x, y, 1, 1)) return 0;
 8001bb4:	8979      	ldrh	r1, [r7, #10]
 8001bb6:	893a      	ldrh	r2, [r7, #8]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7ff ff02 	bl	80019c8 <LCD_setAddrWindow>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <LCD_writePixel+0x5c>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e00a      	b.n	8001be4 <LCD_writePixel+0x72>
    if (!LCD_pushColor(spi, color)) return 0;
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7ff ff80 	bl	8001ad8 <LCD_pushColor>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <LCD_writePixel+0x70>
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <LCD_writePixel+0x72>
    return 1;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <LCD_writePixels>:

// Length of colors array must be w * h
int LCD_writePixels(SPI_HandleTypeDef* spi, uint16_t color,
					int16_t x, int16_t y, int16_t w, int16_t h)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	4608      	mov	r0, r1
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	817b      	strh	r3, [r7, #10]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	813b      	strh	r3, [r7, #8]
 8001c02:	4613      	mov	r3, r2
 8001c04:	80fb      	strh	r3, [r7, #6]
	if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8001c06:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0d      	blt.n	8001c2a <LCD_writePixels+0x3e>
 8001c0e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c12:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c16:	da08      	bge.n	8001c2a <LCD_writePixels+0x3e>
 8001c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db04      	blt.n	8001c2a <LCD_writePixels+0x3e>
 8001c20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c24:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c28:	db01      	blt.n	8001c2e <LCD_writePixels+0x42>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e01f      	b.n	8001c6e <LCD_writePixels+0x82>
	if(!LCD_setAddrWindow(spi, x, y, w, h)) return 0;
 8001c2e:	8939      	ldrh	r1, [r7, #8]
 8001c30:	88fa      	ldrh	r2, [r7, #6]
 8001c32:	8b38      	ldrh	r0, [r7, #24]
 8001c34:	8bbb      	ldrh	r3, [r7, #28]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	4603      	mov	r3, r0
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff fec4 	bl	80019c8 <LCD_setAddrWindow>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <LCD_writePixels+0x5e>
 8001c46:	2300      	movs	r3, #0
 8001c48:	e011      	b.n	8001c6e <LCD_writePixels+0x82>
	if (!LCD_pushColorCopy(spi, color, w*h)) return 0;
 8001c4a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c4e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001c52:	fb02 f303 	mul.w	r3, r2, r3
 8001c56:	461a      	mov	r2, r3
 8001c58:	897b      	ldrh	r3, [r7, #10]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f7ff ff58 	bl	8001b12 <LCD_pushColorCopy>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <LCD_writePixels+0x80>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e000      	b.n	8001c6e <LCD_writePixels+0x82>
	return 1;
 8001c6c:	2301      	movs	r3, #1
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <LCD_drawChar>:
		0x70, 0x1C, 0x07, 0x1C, 0x70,
		0x0E, 0x38, 0xE0, 0x38, 0x0E
};

void LCD_drawChar(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char c, uint16_t color, uint32_t size)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	4608      	mov	r0, r1
 8001c82:	4611      	mov	r1, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	817b      	strh	r3, [r7, #10]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	813b      	strh	r3, [r7, #8]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	71fb      	strb	r3, [r7, #7]
	if((x >= HX8357_TFTWIDTH)   || // Clip right
 8001c92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c96:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c9a:	f280 80b5 	bge.w	8001e08 <LCD_drawChar+0x190>
	   (y >= HX8357_TFTHEIGHT)  || // Clip bottom
	   ((x + 6 * size - 1) < 0) || // Clip left
 8001c9e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ca2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ca6:	f280 80af 	bge.w	8001e08 <LCD_drawChar+0x190>
	   ((y + 8 * size - 1) < 0))   // Clip top
		return;

	uint16_t bg = LCD_color565(255, 255, 255);
 8001caa:	22ff      	movs	r2, #255	; 0xff
 8001cac:	21ff      	movs	r1, #255	; 0xff
 8001cae:	20ff      	movs	r0, #255	; 0xff
 8001cb0:	f7ff feec 	bl	8001a8c <LCD_color565>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	827b      	strh	r3, [r7, #18]
	LCD_startWrite();
 8001cb8:	f7ff fe16 	bl	80018e8 <LCD_startWrite>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	75fb      	strb	r3, [r7, #23]
 8001cc0:	e09a      	b.n	8001df8 <LCD_drawChar+0x180>
	{
		uint8_t line = font[c * 5 + i];
 8001cc2:	79fa      	ldrb	r2, [r7, #7]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	441a      	add	r2, r3
 8001cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <LCD_drawChar+0x198>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	75bb      	strb	r3, [r7, #22]
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	757b      	strb	r3, [r7, #21]
 8001cda:	e082      	b.n	8001de2 <LCD_drawChar+0x16a>
		{
			if (line & 1)
 8001cdc:	7dbb      	ldrb	r3, [r7, #22]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d03a      	beq.n	8001d5c <LCD_drawChar+0xe4>
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, color);
 8001ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d112      	bne.n	8001d12 <LCD_drawChar+0x9a>
 8001cec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	897b      	ldrh	r3, [r7, #10]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	b219      	sxth	r1, r3
 8001cfa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	893b      	ldrh	r3, [r7, #8]
 8001d02:	4413      	add	r3, r2
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f7ff ff31 	bl	8001b72 <LCD_writePixel>
 8001d10:	e05e      	b.n	8001dd0 <LCD_drawChar+0x158>
				else LCD_writePixels(spi, color, x+i*size, y+j*size, size, size);
 8001d12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	fb12 f303 	smulbb	r3, r2, r3
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	897b      	ldrh	r3, [r7, #10]
 8001d24:	4413      	add	r3, r2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	b218      	sxth	r0, r3
 8001d2a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	fb12 f303 	smulbb	r3, r2, r3
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	893b      	ldrh	r3, [r7, #8]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	b21c      	sxth	r4, r3
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d48:	b212      	sxth	r2, r2
 8001d4a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001d4c:	9201      	str	r2, [sp, #4]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	4623      	mov	r3, r4
 8001d52:	4602      	mov	r2, r0
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f7ff ff49 	bl	8001bec <LCD_writePixels>
 8001d5a:	e039      	b.n	8001dd0 <LCD_drawChar+0x158>
			}
			else
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, bg);
 8001d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d112      	bne.n	8001d88 <LCD_drawChar+0x110>
 8001d62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	897b      	ldrh	r3, [r7, #10]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	b219      	sxth	r1, r3
 8001d70:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	893b      	ldrh	r3, [r7, #8]
 8001d78:	4413      	add	r3, r2
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	8a7b      	ldrh	r3, [r7, #18]
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f7ff fef6 	bl	8001b72 <LCD_writePixel>
 8001d86:	e023      	b.n	8001dd0 <LCD_drawChar+0x158>
				else LCD_writePixels(spi, bg, x+i*size, y+j*size, size, size);
 8001d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	fb12 f303 	smulbb	r3, r2, r3
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	897b      	ldrh	r3, [r7, #10]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b218      	sxth	r0, r3
 8001da0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	fb12 f303 	smulbb	r3, r2, r3
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	893b      	ldrh	r3, [r7, #8]
 8001db2:	4413      	add	r3, r2
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	b21c      	sxth	r4, r3
 8001db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dba:	b21b      	sxth	r3, r3
 8001dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dbe:	b212      	sxth	r2, r2
 8001dc0:	8a79      	ldrh	r1, [r7, #18]
 8001dc2:	9201      	str	r2, [sp, #4]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	4623      	mov	r3, r4
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff ff0e 	bl	8001bec <LCD_writePixels>
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 8001dd0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	757b      	strb	r3, [r7, #21]
 8001ddc:	7dbb      	ldrb	r3, [r7, #22]
 8001dde:	085b      	lsrs	r3, r3, #1
 8001de0:	75bb      	strb	r3, [r7, #22]
 8001de2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001de6:	2b07      	cmp	r3, #7
 8001de8:	f77f af78 	ble.w	8001cdc <LCD_drawChar+0x64>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8001dec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	3301      	adds	r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	75fb      	strb	r3, [r7, #23]
 8001df8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	f77f af60 	ble.w	8001cc2 <LCD_drawChar+0x4a>
			}
		}
	}
	LCD_endWrite();
 8001e02:	f7ff fd7d 	bl	8001900 <LCD_endWrite>
 8001e06:	e000      	b.n	8001e0a <LCD_drawChar+0x192>
		return;
 8001e08:	bf00      	nop
}
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd90      	pop	{r4, r7, pc}
 8001e10:	0800da38 	.word	0x0800da38

08001e14 <LCD_drawString>:
	}
	LCD_endWrite();
}

void LCD_drawString(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char* c, uint32_t length, uint16_t color, uint32_t size)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	817b      	strh	r3, [r7, #10]
 8001e22:	4613      	mov	r3, r2
 8001e24:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < length; ++i) LCD_drawChar(spi, x + i*6*size, y, c[i], color, size);
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	e020      	b.n	8001e6e <LCD_drawString+0x5a>
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	fb12 f303 	smulbb	r3, r2, r3
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	0052      	lsls	r2, r2, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	897b      	ldrh	r3, [r7, #10]
 8001e46:	4413      	add	r3, r2
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	b219      	sxth	r1, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	7818      	ldrb	r0, [r3, #0]
 8001e54:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	4603      	mov	r3, r0
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f7ff ff08 	bl	8001c78 <LCD_drawChar>
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	6a3a      	ldr	r2, [r7, #32]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d8da      	bhi.n	8001e2c <LCD_drawString+0x18>
}
 8001e76:	bf00      	nop
 8001e78:	bf00      	nop
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <LCD_writeLine>:
		}
	}
	LCD_endWrite();
}

void LCD_writeLine(SPI_HandleTypeDef *spi, int x0, int y0, int x1, int y1, int color) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001e98:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001e9c:	6839      	ldr	r1, [r7, #0]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1acb      	subs	r3, r1, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bfb8      	it	lt
 8001ea6:	425b      	neglt	r3, r3
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	bfcc      	ite	gt
 8001eac:	2301      	movgt	r3, #1
 8001eae:	2300      	movle	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (steep) {
 8001eb4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00d      	beq.n	8001ed8 <LCD_writeLine+0x58>
    _swap_int16_t(x0, y0);
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	843b      	strh	r3, [r7, #32]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ec8:	607b      	str	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	83fb      	strh	r3, [r7, #30]
 8001ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (x0 > x1) {
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	dd0d      	ble.n	8001efc <LCD_writeLine+0x7c>
    _swap_int16_t(x0, x1);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	83bb      	strh	r3, [r7, #28]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001eec:	603b      	str	r3, [r7, #0]
    _swap_int16_t(y0, y1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	837b      	strh	r3, [r7, #26]
 8001ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 8001f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bfb8      	it	lt
 8001f14:	425b      	neglt	r3, r3
 8001f16:	82fb      	strh	r3, [r7, #22]

  int16_t err = dx / 2;
 8001f18:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f1c:	0fda      	lsrs	r2, r3, #31
 8001f1e:	4413      	add	r3, r2
 8001f20:	105b      	asrs	r3, r3, #1
 8001f22:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t ystep;

  if (y0 < y1) {
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	da02      	bge.n	8001f32 <LCD_writeLine+0xb2>
    ystep = 1;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001f30:	e030      	b.n	8001f94 <LCD_writeLine+0x114>
  } else {
    ystep = -1;
 8001f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f36:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  for (; x0 <= x1; x0++) {
 8001f38:	e02c      	b.n	8001f94 <LCD_writeLine+0x114>
    if (steep) {
 8001f3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d009      	beq.n	8001f56 <LCD_writeLine+0xd6>
      LCD_writePixel(spi, y0, x0, color);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	b219      	sxth	r1, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	b21a      	sxth	r2, r3
 8001f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff fe0f 	bl	8001b72 <LCD_writePixel>
 8001f54:	e008      	b.n	8001f68 <LCD_writeLine+0xe8>
    } else {
      LCD_writePixel(spi, x0, y0, color);
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	b219      	sxth	r1, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	b21a      	sxth	r2, r3
 8001f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff fe05 	bl	8001b72 <LCD_writePixel>
    }
    err -= dy;
 8001f68:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001f6a:	8afb      	ldrh	r3, [r7, #22]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (err < 0) {
 8001f72:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da09      	bge.n	8001f8e <LCD_writeLine+0x10e>
      y0 += ystep;
 8001f7a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	607b      	str	r3, [r7, #4]
      err += dx;
 8001f84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001f86:	8b3b      	ldrh	r3, [r7, #24]
 8001f88:	4413      	add	r3, r2
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (; x0 <= x1; x0++) {
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3301      	adds	r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	ddce      	ble.n	8001f3a <LCD_writeLine+0xba>
    }
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3728      	adds	r7, #40	; 0x28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <LCD_drawBattery>:
	    LCD_writeFastHLine(spi, a, y, b - a + 1, color);
	  }
}

//homemade functions for TADAMHASPEV, move to different file
void LCD_drawBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint32_t size) {
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af02      	add	r7, sp, #8
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	817b      	strh	r3, [r7, #10]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	813b      	strh	r3, [r7, #8]
	//make battery thicker?
	//left
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 8001fb8:	8979      	ldrh	r1, [r7, #10]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	893b      	ldrh	r3, [r7, #8]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	4618      	mov	r0, r3
 8001fca:	0080      	lsls	r0, r0, #2
 8001fcc:	4418      	add	r0, r3
 8001fce:	0040      	lsls	r0, r0, #1
 8001fd0:	4403      	add	r3, r0
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f7ff fcf4 	bl	80019c8 <LCD_setAddrWindow>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80df 	beq.w	80021a6 <LCD_drawBattery+0x200>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2216      	movs	r2, #22
 8001fec:	fb02 f303 	mul.w	r3, r2, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f7ff fd8c 	bl	8001b12 <LCD_pushColorCopy>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80d4 	beq.w	80021aa <LCD_drawBattery+0x204>

	//right
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	b29b      	uxth	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	4413      	add	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	897b      	ldrh	r3, [r7, #10]
 8002012:	4413      	add	r3, r2
 8002014:	b299      	uxth	r1, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	b29a      	uxth	r2, r3
 800201a:	893b      	ldrh	r3, [r7, #8]
 800201c:	4413      	add	r3, r2
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	b29b      	uxth	r3, r3
 8002024:	4618      	mov	r0, r3
 8002026:	0080      	lsls	r0, r0, #2
 8002028:	4418      	add	r0, r3
 800202a:	0040      	lsls	r0, r0, #1
 800202c:	4403      	add	r3, r0
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	b29b      	uxth	r3, r3
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2301      	movs	r3, #1
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f7ff fcc6 	bl	80019c8 <LCD_setAddrWindow>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 80b5 	beq.w	80021ae <LCD_drawBattery+0x208>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2216      	movs	r2, #22
 8002048:	fb02 f303 	mul.w	r3, r2, r3
 800204c:	461a      	mov	r2, r3
 800204e:	2100      	movs	r1, #0
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f7ff fd5e 	bl	8001b12 <LCD_pushColorCopy>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80aa 	beq.w	80021b2 <LCD_drawBattery+0x20c>

	//top
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 800205e:	8979      	ldrh	r1, [r7, #10]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	b29a      	uxth	r2, r3
 8002064:	893b      	ldrh	r3, [r7, #8]
 8002066:	4413      	add	r3, r2
 8002068:	b29a      	uxth	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	b29b      	uxth	r3, r3
 800206e:	4618      	mov	r0, r3
 8002070:	0080      	lsls	r0, r0, #2
 8002072:	4403      	add	r3, r0
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	b29b      	uxth	r3, r3
 8002078:	2001      	movs	r0, #1
 800207a:	9000      	str	r0, [sp, #0]
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7ff fca3 	bl	80019c8 <LCD_setAddrWindow>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 8096 	beq.w	80021b6 <LCD_drawBattery+0x210>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	461a      	mov	r2, r3
 8002096:	2100      	movs	r1, #0
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f7ff fd3a 	bl	8001b12 <LCD_pushColorCopy>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 808a 	beq.w	80021ba <LCD_drawBattery+0x214>

	//bottom
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 80020a6:	8979      	ldrh	r1, [r7, #10]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	0052      	lsls	r2, r2, #1
 80020b0:	441a      	add	r2, r3
 80020b2:	00d2      	lsls	r2, r2, #3
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	893b      	ldrh	r3, [r7, #8]
 80020ba:	4413      	add	r3, r2
 80020bc:	b29a      	uxth	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	4618      	mov	r0, r3
 80020c4:	0080      	lsls	r0, r0, #2
 80020c6:	4403      	add	r3, r0
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2001      	movs	r0, #1
 80020ce:	9000      	str	r0, [sp, #0]
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f7ff fc79 	bl	80019c8 <LCD_setAddrWindow>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d070      	beq.n	80021be <LCD_drawBattery+0x218>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	461a      	mov	r2, r3
 80020e8:	2100      	movs	r1, #0
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7ff fd11 	bl	8001b12 <LCD_pushColorCopy>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d065      	beq.n	80021c2 <LCD_drawBattery+0x21c>

	//lil cap
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	0052      	lsls	r2, r2, #1
 80020fe:	4413      	add	r3, r2
 8002100:	b29a      	uxth	r2, r3
 8002102:	897b      	ldrh	r3, [r7, #10]
 8002104:	4413      	add	r3, r2
 8002106:	b299      	uxth	r1, r3
 8002108:	893a      	ldrh	r2, [r7, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	b29b      	uxth	r3, r3
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	b29b      	uxth	r3, r3
 8002112:	2001      	movs	r0, #1
 8002114:	9000      	str	r0, [sp, #0]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f7ff fc56 	bl	80019c8 <LCD_setAddrWindow>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d051      	beq.n	80021c6 <LCD_drawBattery+0x220>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 4*size)) return;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	461a      	mov	r2, r3
 8002128:	2100      	movs	r1, #0
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f7ff fcf1 	bl	8001b12 <LCD_pushColorCopy>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d049      	beq.n	80021ca <LCD_drawBattery+0x224>

	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	b29b      	uxth	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	0052      	lsls	r2, r2, #1
 800213e:	4413      	add	r3, r2
 8002140:	b29a      	uxth	r2, r3
 8002142:	897b      	ldrh	r3, [r7, #10]
 8002144:	4413      	add	r3, r2
 8002146:	b299      	uxth	r1, r3
 8002148:	893a      	ldrh	r2, [r7, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	b29b      	uxth	r3, r3
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2301      	movs	r3, #1
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f7ff fc38 	bl	80019c8 <LCD_setAddrWindow>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d037      	beq.n	80021ce <LCD_drawBattery+0x228>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, size)) return;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	2100      	movs	r1, #0
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f7ff fcd5 	bl	8001b12 <LCD_pushColorCopy>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d031      	beq.n	80021d2 <LCD_drawBattery+0x22c>

	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	b29b      	uxth	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	00d2      	lsls	r2, r2, #3
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	b29a      	uxth	r2, r3
 800217a:	897b      	ldrh	r3, [r7, #10]
 800217c:	4413      	add	r3, r2
 800217e:	b299      	uxth	r1, r3
 8002180:	893a      	ldrh	r2, [r7, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	b29b      	uxth	r3, r3
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2301      	movs	r3, #1
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f7ff fc1c 	bl	80019c8 <LCD_setAddrWindow>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01f      	beq.n	80021d6 <LCD_drawBattery+0x230>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, size)) return;
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	2100      	movs	r1, #0
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f7ff fcb9 	bl	8001b12 <LCD_pushColorCopy>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
	return;
 80021a4:	e018      	b.n	80021d8 <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 80021a6:	bf00      	nop
 80021a8:	e016      	b.n	80021d8 <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 80021aa:	bf00      	nop
 80021ac:	e014      	b.n	80021d8 <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 80021ae:	bf00      	nop
 80021b0:	e012      	b.n	80021d8 <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 80021b2:	bf00      	nop
 80021b4:	e010      	b.n	80021d8 <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 80021b6:	bf00      	nop
 80021b8:	e00e      	b.n	80021d8 <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 80021ba:	bf00      	nop
 80021bc:	e00c      	b.n	80021d8 <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 80021be:	bf00      	nop
 80021c0:	e00a      	b.n	80021d8 <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 80021c2:	bf00      	nop
 80021c4:	e008      	b.n	80021d8 <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 80021c6:	bf00      	nop
 80021c8:	e006      	b.n	80021d8 <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 4*size)) return;
 80021ca:	bf00      	nop
 80021cc:	e004      	b.n	80021d8 <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 80021ce:	bf00      	nop
 80021d0:	e002      	b.n	80021d8 <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, size)) return;
 80021d2:	bf00      	nop
 80021d4:	e000      	b.n	80021d8 <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 80021d6:	bf00      	nop
}
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <LCD_drawFrame>:

void LCD_drawFrame(SPI_HandleTypeDef* spi) {
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af02      	add	r7, sp, #8
 80021e4:	6078      	str	r0, [r7, #4]
	//rows
	LCD_writeLine(spi,0,80,360,80,HX8357_BLACK);
 80021e6:	2300      	movs	r3, #0
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	2350      	movs	r3, #80	; 0x50
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80021f2:	2250      	movs	r2, #80	; 0x50
 80021f4:	2100      	movs	r1, #0
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff fe42 	bl	8001e80 <LCD_writeLine>
	LCD_writeLine(spi,0,160,360,160,HX8357_BLACK);
 80021fc:	2300      	movs	r3, #0
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	23a0      	movs	r3, #160	; 0xa0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002208:	22a0      	movs	r2, #160	; 0xa0
 800220a:	2100      	movs	r1, #0
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff fe37 	bl	8001e80 <LCD_writeLine>
	LCD_writeLine(spi,0,240,360,240,HX8357_BLACK);
 8002212:	2300      	movs	r3, #0
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	23f0      	movs	r3, #240	; 0xf0
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800221e:	22f0      	movs	r2, #240	; 0xf0
 8002220:	2100      	movs	r1, #0
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fe2c 	bl	8001e80 <LCD_writeLine>

	//column
	LCD_writeLine(spi,360,0,360,320,HX8357_BLACK);
 8002228:	2300      	movs	r3, #0
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002236:	2200      	movs	r2, #0
 8002238:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff fe1f 	bl	8001e80 <LCD_writeLine>
	return;
 8002242:	bf00      	nop
}
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <LCD_fillBattery>:

int offset = 0;

void LCD_fillBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint32_t size, int level) {
 800224c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af02      	add	r7, sp, #8
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	817b      	strh	r3, [r7, #10]
 800225c:	4613      	mov	r3, r2
 800225e:	813b      	strh	r3, [r7, #8]
	LCD_writePixels(spi, HX8357_WHITE, x + 3, ((y + size) + 3), 10*size - 6, (22*size - 6));
 8002260:	897b      	ldrh	r3, [r7, #10]
 8002262:	3303      	adds	r3, #3
 8002264:	b29b      	uxth	r3, r3
 8002266:	b219      	sxth	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	b29a      	uxth	r2, r3
 800226c:	893b      	ldrh	r3, [r7, #8]
 800226e:	4413      	add	r3, r2
 8002270:	b29b      	uxth	r3, r3
 8002272:	3303      	adds	r3, #3
 8002274:	b29b      	uxth	r3, r3
 8002276:	b218      	sxth	r0, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	b29b      	uxth	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	4413      	add	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b06      	subs	r3, #6
 8002288:	b29b      	uxth	r3, r3
 800228a:	b21a      	sxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	b29b      	uxth	r3, r3
 8002290:	461c      	mov	r4, r3
 8002292:	00a4      	lsls	r4, r4, #2
 8002294:	441c      	add	r4, r3
 8002296:	0064      	lsls	r4, r4, #1
 8002298:	4423      	add	r3, r4
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b06      	subs	r3, #6
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	9200      	str	r2, [sp, #0]
 80022a8:	4603      	mov	r3, r0
 80022aa:	460a      	mov	r2, r1
 80022ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7ff fc9b 	bl	8001bec <LCD_writePixels>
	offset = 22*size - (22*size)*(level/100.0);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2216      	movs	r2, #22
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe f920 	bl	8000504 <__aeabi_ui2d>
 80022c4:	4604      	mov	r4, r0
 80022c6:	460d      	mov	r5, r1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2216      	movs	r2, #22
 80022cc:	fb02 f303 	mul.w	r3, r2, r3
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe f917 	bl	8000504 <__aeabi_ui2d>
 80022d6:	4680      	mov	r8, r0
 80022d8:	4689      	mov	r9, r1
 80022da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022dc:	f7fe f922 	bl	8000524 <__aeabi_i2d>
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	4b63      	ldr	r3, [pc, #396]	; (8002474 <LCD_fillBattery+0x228>)
 80022e6:	f7fe fab1 	bl	800084c <__aeabi_ddiv>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4640      	mov	r0, r8
 80022f0:	4649      	mov	r1, r9
 80022f2:	f7fe f981 	bl	80005f8 <__aeabi_dmul>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4620      	mov	r0, r4
 80022fc:	4629      	mov	r1, r5
 80022fe:	f7fd ffc3 	bl	8000288 <__aeabi_dsub>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4610      	mov	r0, r2
 8002308:	4619      	mov	r1, r3
 800230a:	f7fe fc25 	bl	8000b58 <__aeabi_d2iz>
 800230e:	4603      	mov	r3, r0
 8002310:	4a59      	ldr	r2, [pc, #356]	; (8002478 <LCD_fillBattery+0x22c>)
 8002312:	6013      	str	r3, [r2, #0]
	if (level > 0) {
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	2b00      	cmp	r3, #0
 8002318:	f340 80a7 	ble.w	800246a <LCD_fillBattery+0x21e>
		if (level < 20) {
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231e:	2b13      	cmp	r3, #19
 8002320:	dc35      	bgt.n	800238e <LCD_fillBattery+0x142>
			LCD_writePixels(spi, HX8357_RED, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 8002322:	897b      	ldrh	r3, [r7, #10]
 8002324:	3303      	adds	r3, #3
 8002326:	b29b      	uxth	r3, r3
 8002328:	b218      	sxth	r0, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	b29a      	uxth	r2, r3
 800232e:	893b      	ldrh	r3, [r7, #8]
 8002330:	4413      	add	r3, r2
 8002332:	b29a      	uxth	r2, r3
 8002334:	4b50      	ldr	r3, [pc, #320]	; (8002478 <LCD_fillBattery+0x22c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	4413      	add	r3, r2
 800233c:	b29b      	uxth	r3, r3
 800233e:	3303      	adds	r3, #3
 8002340:	b29b      	uxth	r3, r3
 8002342:	b21c      	sxth	r4, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	0092      	lsls	r2, r2, #2
 800234c:	4413      	add	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b06      	subs	r3, #6
 8002354:	b29b      	uxth	r3, r3
 8002356:	b21a      	sxth	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	b29b      	uxth	r3, r3
 800235c:	4619      	mov	r1, r3
 800235e:	0089      	lsls	r1, r1, #2
 8002360:	4419      	add	r1, r3
 8002362:	0049      	lsls	r1, r1, #1
 8002364:	440b      	add	r3, r1
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	b299      	uxth	r1, r3
 800236a:	4b43      	ldr	r3, [pc, #268]	; (8002478 <LCD_fillBattery+0x22c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	1acb      	subs	r3, r1, r3
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b06      	subs	r3, #6
 8002376:	b29b      	uxth	r3, r3
 8002378:	b21b      	sxth	r3, r3
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	9200      	str	r2, [sp, #0]
 800237e:	4623      	mov	r3, r4
 8002380:	4602      	mov	r2, r0
 8002382:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f7ff fc30 	bl	8001bec <LCD_writePixels>
			LCD_writePixels(spi, HX8357_GREEN, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
		}
	}
	//level = 100 --> y offset 0
	//level = 0 --> y offset 22*size
}
 800238c:	e06d      	b.n	800246a <LCD_fillBattery+0x21e>
		} else if (level < 50) {
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	2b31      	cmp	r3, #49	; 0x31
 8002392:	dc35      	bgt.n	8002400 <LCD_fillBattery+0x1b4>
			LCD_writePixels(spi, HX8357_YELLOW, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 8002394:	897b      	ldrh	r3, [r7, #10]
 8002396:	3303      	adds	r3, #3
 8002398:	b29b      	uxth	r3, r3
 800239a:	b218      	sxth	r0, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	893b      	ldrh	r3, [r7, #8]
 80023a2:	4413      	add	r3, r2
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	4b34      	ldr	r3, [pc, #208]	; (8002478 <LCD_fillBattery+0x22c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3303      	adds	r3, #3
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	b21c      	sxth	r4, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	0092      	lsls	r2, r2, #2
 80023be:	4413      	add	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b06      	subs	r3, #6
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	b21a      	sxth	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	4619      	mov	r1, r3
 80023d0:	0089      	lsls	r1, r1, #2
 80023d2:	4419      	add	r1, r3
 80023d4:	0049      	lsls	r1, r1, #1
 80023d6:	440b      	add	r3, r1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	b299      	uxth	r1, r3
 80023dc:	4b26      	ldr	r3, [pc, #152]	; (8002478 <LCD_fillBattery+0x22c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	1acb      	subs	r3, r1, r3
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b06      	subs	r3, #6
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	b21b      	sxth	r3, r3
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	9200      	str	r2, [sp, #0]
 80023f0:	4623      	mov	r3, r4
 80023f2:	4602      	mov	r2, r0
 80023f4:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f7ff fbf7 	bl	8001bec <LCD_writePixels>
}
 80023fe:	e034      	b.n	800246a <LCD_fillBattery+0x21e>
			LCD_writePixels(spi, HX8357_GREEN, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 8002400:	897b      	ldrh	r3, [r7, #10]
 8002402:	3303      	adds	r3, #3
 8002404:	b29b      	uxth	r3, r3
 8002406:	b218      	sxth	r0, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	b29a      	uxth	r2, r3
 800240c:	893b      	ldrh	r3, [r7, #8]
 800240e:	4413      	add	r3, r2
 8002410:	b29a      	uxth	r2, r3
 8002412:	4b19      	ldr	r3, [pc, #100]	; (8002478 <LCD_fillBattery+0x22c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	4413      	add	r3, r2
 800241a:	b29b      	uxth	r3, r3
 800241c:	3303      	adds	r3, #3
 800241e:	b29b      	uxth	r3, r3
 8002420:	b21c      	sxth	r4, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	b29b      	uxth	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	0092      	lsls	r2, r2, #2
 800242a:	4413      	add	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b06      	subs	r3, #6
 8002432:	b29b      	uxth	r3, r3
 8002434:	b21a      	sxth	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	b29b      	uxth	r3, r3
 800243a:	4619      	mov	r1, r3
 800243c:	0089      	lsls	r1, r1, #2
 800243e:	4419      	add	r1, r3
 8002440:	0049      	lsls	r1, r1, #1
 8002442:	440b      	add	r3, r1
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	b299      	uxth	r1, r3
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <LCD_fillBattery+0x22c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	b29b      	uxth	r3, r3
 800244e:	1acb      	subs	r3, r1, r3
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b06      	subs	r3, #6
 8002454:	b29b      	uxth	r3, r3
 8002456:	b21b      	sxth	r3, r3
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	9200      	str	r2, [sp, #0]
 800245c:	4623      	mov	r3, r4
 800245e:	4602      	mov	r2, r0
 8002460:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff fbc1 	bl	8001bec <LCD_writePixels>
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002474:	40590000 	.word	0x40590000
 8002478:	20000280 	.word	0x20000280

0800247c <LCD_updateVals>:

char speedString[20];
char tempString[20];
char powerString[20];

void LCD_updateVals(SPI_HandleTypeDef* spi, struct TelData data) {
 800247c:	b084      	sub	sp, #16
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af04      	add	r7, sp, #16
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	f107 0014 	add.w	r0, r7, #20
 800248a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//buf[0] accel, buf[1] temp, buf[2] speed, buf[3] voltage, buf[4] current
	sprintf(tempString,"%f", data.temp);//buf[1]);
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe f859 	bl	8000548 <__aeabi_f2d>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4925      	ldr	r1, [pc, #148]	; (8002530 <LCD_updateVals+0xb4>)
 800249c:	4825      	ldr	r0, [pc, #148]	; (8002534 <LCD_updateVals+0xb8>)
 800249e:	f009 f855 	bl	800b54c <siprintf>
	LCD_drawString(spi,130,30 + 80*2,tempString,6,HX8357_BLACK,4);
 80024a2:	2304      	movs	r3, #4
 80024a4:	9302      	str	r3, [sp, #8]
 80024a6:	2300      	movs	r3, #0
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	2306      	movs	r3, #6
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	4b21      	ldr	r3, [pc, #132]	; (8002534 <LCD_updateVals+0xb8>)
 80024b0:	22be      	movs	r2, #190	; 0xbe
 80024b2:	2182      	movs	r1, #130	; 0x82
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff fcad 	bl	8001e14 <LCD_drawString>

	sprintf(speedString,"%f", data.speed);//buf[2]);
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe f843 	bl	8000548 <__aeabi_f2d>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	491a      	ldr	r1, [pc, #104]	; (8002530 <LCD_updateVals+0xb4>)
 80024c8:	481b      	ldr	r0, [pc, #108]	; (8002538 <LCD_updateVals+0xbc>)
 80024ca:	f009 f83f 	bl	800b54c <siprintf>
	LCD_drawString(spi,130,30 + 80*1,speedString,4,HX8357_BLACK,4);
 80024ce:	2304      	movs	r3, #4
 80024d0:	9302      	str	r3, [sp, #8]
 80024d2:	2300      	movs	r3, #0
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	2304      	movs	r3, #4
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	4b17      	ldr	r3, [pc, #92]	; (8002538 <LCD_updateVals+0xbc>)
 80024dc:	226e      	movs	r2, #110	; 0x6e
 80024de:	2182      	movs	r1, #130	; 0x82
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff fc97 	bl	8001e14 <LCD_drawString>

	sprintf(powerString,"%f", data.voltage*data.current);//buf[3]*buf[4]);
 80024e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80024ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f2:	ee17 0a90 	vmov	r0, s15
 80024f6:	f7fe f827 	bl	8000548 <__aeabi_f2d>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	490c      	ldr	r1, [pc, #48]	; (8002530 <LCD_updateVals+0xb4>)
 8002500:	480e      	ldr	r0, [pc, #56]	; (800253c <LCD_updateVals+0xc0>)
 8002502:	f009 f823 	bl	800b54c <siprintf>
	LCD_drawString(spi,130,30 + 80*3,powerString,6,HX8357_BLACK,4);
 8002506:	2304      	movs	r3, #4
 8002508:	9302      	str	r3, [sp, #8]
 800250a:	2300      	movs	r3, #0
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	2306      	movs	r3, #6
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <LCD_updateVals+0xc0>)
 8002514:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8002518:	2182      	movs	r1, #130	; 0x82
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff fc7a 	bl	8001e14 <LCD_drawString>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800252a:	b004      	add	sp, #16
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	0800d820 	.word	0x0800d820
 8002534:	20000298 	.word	0x20000298
 8002538:	20000284 	.word	0x20000284
 800253c:	200002ac 	.word	0x200002ac

08002540 <LCD_warnings>:

void LCD_warnings(SPI_HandleTypeDef* spi, int temp, int level, int *warning, int *tempWarn, int *voltWarn) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af04      	add	r7, sp, #16
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
	if ((temp >= 50 | level <= 30) & *warning == 0) {
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b31      	cmp	r3, #49	; 0x31
 8002552:	bfcc      	ite	gt
 8002554:	2301      	movgt	r3, #1
 8002556:	2300      	movle	r3, #0
 8002558:	b2da      	uxtb	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b1e      	cmp	r3, #30
 800255e:	bfd4      	ite	le
 8002560:	2301      	movle	r3, #1
 8002562:	2300      	movgt	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4313      	orrs	r3, r2
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf0c      	ite	eq
 8002574:	2301      	moveq	r3, #1
 8002576:	2300      	movne	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00f      	beq.n	80025a0 <LCD_warnings+0x60>
		LCD_drawString(spi,20,30 + 80*0,"TADAMHESPEV | UMSM",18,HX8357_WHITE,3);
 8002580:	2303      	movs	r3, #3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	2312      	movs	r3, #18
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <LCD_warnings+0x1c4>)
 8002590:	221e      	movs	r2, #30
 8002592:	2114      	movs	r1, #20
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7ff fc3d 	bl	8001e14 <LCD_drawString>
		*warning = 1;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2201      	movs	r2, #1
 800259e:	601a      	str	r2, [r3, #0]
	}
	if (temp >= 50 & *tempWarn == 0) {
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b31      	cmp	r3, #49	; 0x31
 80025a4:	bfcc      	ite	gt
 80025a6:	2301      	movgt	r3, #1
 80025a8:	2300      	movle	r3, #0
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	4013      	ands	r3, r2
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00f      	beq.n	80025e2 <LCD_warnings+0xa2>
		//LCD_fillTriangle(spi,15,55,45,55,30,25,HX8357_GREEN);
		LCD_drawString(spi,55,30 + 80*0,"HIGH TEMP",9,HX8357_RED,2);
 80025c2:	2302      	movs	r3, #2
 80025c4:	9302      	str	r3, [sp, #8]
 80025c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	2309      	movs	r3, #9
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	4b4d      	ldr	r3, [pc, #308]	; (8002708 <LCD_warnings+0x1c8>)
 80025d2:	221e      	movs	r2, #30
 80025d4:	2137      	movs	r1, #55	; 0x37
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f7ff fc1c 	bl	8001e14 <LCD_drawString>
		*tempWarn = 1;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
	}
	if (level <= 30 & *voltWarn == 0) {
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b1e      	cmp	r3, #30
 80025e6:	bfd4      	ite	le
 80025e8:	2301      	movle	r3, #1
 80025ea:	2300      	movgt	r3, #0
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	bf0c      	ite	eq
 80025f6:	2301      	moveq	r3, #1
 80025f8:	2300      	movne	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	4013      	ands	r3, r2
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00f      	beq.n	8002624 <LCD_warnings+0xe4>
		//LCD_fillTriangle(spi,180,55,210,55,195,25,HX8357_GREEN);
		LCD_drawString(spi,220,30 + 80*0,"LOW VOLT",8,HX8357_RED,2);
 8002604:	2302      	movs	r3, #2
 8002606:	9302      	str	r3, [sp, #8]
 8002608:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	2308      	movs	r3, #8
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	4b3e      	ldr	r3, [pc, #248]	; (800270c <LCD_warnings+0x1cc>)
 8002614:	221e      	movs	r2, #30
 8002616:	21dc      	movs	r1, #220	; 0xdc
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f7ff fbfb 	bl	8001e14 <LCD_drawString>
		*voltWarn = 1;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]
	}
	if (temp < 50 & *tempWarn == 1) {
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b31      	cmp	r3, #49	; 0x31
 8002628:	bfd4      	ite	le
 800262a:	2301      	movle	r3, #1
 800262c:	2300      	movgt	r3, #0
 800262e:	b2da      	uxtb	r2, r3
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	4013      	ands	r3, r2
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00f      	beq.n	8002666 <LCD_warnings+0x126>
		LCD_drawString(spi,55,30 + 80*0,"HIGH TEMP",9,HX8357_WHITE,2);
 8002646:	2302      	movs	r3, #2
 8002648:	9302      	str	r3, [sp, #8]
 800264a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	2309      	movs	r3, #9
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <LCD_warnings+0x1c8>)
 8002656:	221e      	movs	r2, #30
 8002658:	2137      	movs	r1, #55	; 0x37
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f7ff fbda 	bl	8001e14 <LCD_drawString>
		*tempWarn = 0;
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
	}
	if (level > 30 & *voltWarn == 1) {
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b1e      	cmp	r3, #30
 800266a:	bfcc      	ite	gt
 800266c:	2301      	movgt	r3, #1
 800266e:	2300      	movle	r3, #0
 8002670:	b2da      	uxtb	r2, r3
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	bf0c      	ite	eq
 800267a:	2301      	moveq	r3, #1
 800267c:	2300      	movne	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	4013      	ands	r3, r2
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00f      	beq.n	80026a8 <LCD_warnings+0x168>
		LCD_drawString(spi,220,30 + 80*0,"LOW VOLT",8,HX8357_WHITE,2);
 8002688:	2302      	movs	r3, #2
 800268a:	9302      	str	r3, [sp, #8]
 800268c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	2308      	movs	r3, #8
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	4b1d      	ldr	r3, [pc, #116]	; (800270c <LCD_warnings+0x1cc>)
 8002698:	221e      	movs	r2, #30
 800269a:	21dc      	movs	r1, #220	; 0xdc
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7ff fbb9 	bl	8001e14 <LCD_drawString>
		*voltWarn = 0;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
	}
	if (*warning == 1 & *voltWarn == 0 & *tempWarn == 0) {
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf0c      	ite	eq
 80026be:	2301      	moveq	r3, #1
 80026c0:	2300      	movne	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	4013      	ands	r3, r2
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00e      	beq.n	80026fc <LCD_warnings+0x1bc>
//		LCD_writePixels(spi,HX8357_WHITE,0,0,359,79);
		LCD_drawString(spi,20,30 + 80*0,"TADAMHESPEV | UMSM",18,HX8357_BLACK,3);
 80026de:	2303      	movs	r3, #3
 80026e0:	9302      	str	r3, [sp, #8]
 80026e2:	2300      	movs	r3, #0
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	2312      	movs	r3, #18
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <LCD_warnings+0x1c4>)
 80026ec:	221e      	movs	r2, #30
 80026ee:	2114      	movs	r1, #20
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f7ff fb8f 	bl	8001e14 <LCD_drawString>
		*warning = 0;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
	}
}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	0800d824 	.word	0x0800d824
 8002708:	0800d838 	.word	0x0800d838
 800270c:	0800d844 	.word	0x0800d844

08002710 <LCD_updateBattery>:

void LCD_updateBattery(SPI_HandleTypeDef* spi, int level) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af04      	add	r7, sp, #16
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
	if (level < 0) level = 0;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	da01      	bge.n	8002724 <LCD_updateBattery+0x14>
 8002720:	2300      	movs	r3, #0
 8002722:	603b      	str	r3, [r7, #0]
	if (level > 100) level = 100;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b64      	cmp	r3, #100	; 0x64
 8002728:	dd01      	ble.n	800272e <LCD_updateBattery+0x1e>
 800272a:	2364      	movs	r3, #100	; 0x64
 800272c:	603b      	str	r3, [r7, #0]
	char lev[3];
	itoa(level,lev,10);
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	220a      	movs	r2, #10
 8002734:	4619      	mov	r1, r3
 8002736:	6838      	ldr	r0, [r7, #0]
 8002738:	f008 f940 	bl	800a9bc <itoa>

	LCD_fillBattery(spi,380,120,8,level);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	2308      	movs	r3, #8
 8002742:	2278      	movs	r2, #120	; 0x78
 8002744:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff fd7f 	bl	800224c <LCD_fillBattery>
	LCD_drawString(spi,370,50,lev,3,HX8357_BLACK,4);
 800274e:	f107 030c 	add.w	r3, r7, #12
 8002752:	2204      	movs	r2, #4
 8002754:	9202      	str	r2, [sp, #8]
 8002756:	2200      	movs	r2, #0
 8002758:	9201      	str	r2, [sp, #4]
 800275a:	2203      	movs	r2, #3
 800275c:	9200      	str	r2, [sp, #0]
 800275e:	2232      	movs	r2, #50	; 0x32
 8002760:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff fb55 	bl	8001e14 <LCD_drawString>
}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <LCD_TADAMHASPEV>:

void LCD_TADAMHASPEV(SPI_HandleTypeDef* spi) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b08e      	sub	sp, #56	; 0x38
 8002778:	af04      	add	r7, sp, #16
 800277a:	6078      	str	r0, [r7, #4]
	LCD_begin(spi);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff f8cb 	bl	8001918 <LCD_begin>
	LCD_writePixels(spi,HX8357_WHITE,0,0,480,320);
 8002782:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	2300      	movs	r3, #0
 8002790:	2200      	movs	r2, #0
 8002792:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff fa28 	bl	8001bec <LCD_writePixels>
	LCD_drawBattery(spi,380,120,8);
 800279c:	2308      	movs	r3, #8
 800279e:	2278      	movs	r2, #120	; 0x78
 80027a0:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff fbfe 	bl	8001fa6 <LCD_drawBattery>
    LCD_drawFrame(spi);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fd17 	bl	80021de <LCD_drawFrame>


    char * name = "TADAMHESPEV | UMSM";
 80027b0:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <LCD_TADAMHASPEV+0x12c>)
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
    char * speed = "SPEED:";
 80027b4:	4b3b      	ldr	r3, [pc, #236]	; (80028a4 <LCD_TADAMHASPEV+0x130>)
 80027b6:	623b      	str	r3, [r7, #32]
    char * temp = "TEMP:";
 80027b8:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <LCD_TADAMHASPEV+0x134>)
 80027ba:	61fb      	str	r3, [r7, #28]
    char * power = "POWER:";
 80027bc:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <LCD_TADAMHASPEV+0x138>)
 80027be:	61bb      	str	r3, [r7, #24]
    char * mph = "mph";
 80027c0:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <LCD_TADAMHASPEV+0x13c>)
 80027c2:	617b      	str	r3, [r7, #20]
    char * deg = "C";
 80027c4:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <LCD_TADAMHASPEV+0x140>)
 80027c6:	613b      	str	r3, [r7, #16]
    char * watt = "W";
 80027c8:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <LCD_TADAMHASPEV+0x144>)
 80027ca:	60fb      	str	r3, [r7, #12]

    LCD_drawString(spi,20,30 + 80*0,name,18,HX8357_BLACK,3);
 80027cc:	2303      	movs	r3, #3
 80027ce:	9302      	str	r3, [sp, #8]
 80027d0:	2300      	movs	r3, #0
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	2312      	movs	r3, #18
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	221e      	movs	r2, #30
 80027dc:	2114      	movs	r1, #20
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff fb18 	bl	8001e14 <LCD_drawString>
    LCD_drawString(spi,5,30 + 80*1,speed,6,HX8357_BLACK,3);
 80027e4:	2303      	movs	r3, #3
 80027e6:	9302      	str	r3, [sp, #8]
 80027e8:	2300      	movs	r3, #0
 80027ea:	9301      	str	r3, [sp, #4]
 80027ec:	2306      	movs	r3, #6
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	226e      	movs	r2, #110	; 0x6e
 80027f4:	2105      	movs	r1, #5
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff fb0c 	bl	8001e14 <LCD_drawString>
    LCD_drawString(spi,5,30 + 80*2,temp,5,HX8357_BLACK,3);
 80027fc:	2303      	movs	r3, #3
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	2300      	movs	r3, #0
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	2305      	movs	r3, #5
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	22be      	movs	r2, #190	; 0xbe
 800280c:	2105      	movs	r1, #5
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff fb00 	bl	8001e14 <LCD_drawString>
    LCD_drawString(spi,5,30 + 80*3,power,6,HX8357_BLACK,3);
 8002814:	2303      	movs	r3, #3
 8002816:	9302      	str	r3, [sp, #8]
 8002818:	2300      	movs	r3, #0
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	2306      	movs	r3, #6
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8002826:	2105      	movs	r1, #5
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff faf3 	bl	8001e14 <LCD_drawString>

    LCD_drawString(spi,280,30 + 80*1,mph,3,HX8357_BLACK,3);
 800282e:	2303      	movs	r3, #3
 8002830:	9302      	str	r3, [sp, #8]
 8002832:	2300      	movs	r3, #0
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	2303      	movs	r3, #3
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	226e      	movs	r2, #110	; 0x6e
 800283e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff fae6 	bl	8001e14 <LCD_drawString>
    LCD_drawString(spi,306,30 + 80*2,deg,1,HX8357_BLACK,3);
 8002848:	2303      	movs	r3, #3
 800284a:	9302      	str	r3, [sp, #8]
 800284c:	2300      	movs	r3, #0
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	2301      	movs	r3, #1
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	22be      	movs	r2, #190	; 0xbe
 8002858:	f44f 7199 	mov.w	r1, #306	; 0x132
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff fad9 	bl	8001e14 <LCD_drawString>
    LCD_drawString(spi,306,30 + 80*3,watt,1,HX8357_BLACK,3);
 8002862:	2303      	movs	r3, #3
 8002864:	9302      	str	r3, [sp, #8]
 8002866:	2300      	movs	r3, #0
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	2301      	movs	r3, #1
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8002874:	f44f 7199 	mov.w	r1, #306	; 0x132
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff facb 	bl	8001e14 <LCD_drawString>
    LCD_drawString(spi,442,50,"%",1,HX8357_BLACK,4);
 800287e:	2304      	movs	r3, #4
 8002880:	9302      	str	r3, [sp, #8]
 8002882:	2300      	movs	r3, #0
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	2301      	movs	r3, #1
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <LCD_TADAMHASPEV+0x148>)
 800288c:	2232      	movs	r2, #50	; 0x32
 800288e:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fabe 	bl	8001e14 <LCD_drawString>
}
 8002898:	bf00      	nop
 800289a:	3728      	adds	r7, #40	; 0x28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	0800d824 	.word	0x0800d824
 80028a4:	0800d850 	.word	0x0800d850
 80028a8:	0800d858 	.word	0x0800d858
 80028ac:	0800d860 	.word	0x0800d860
 80028b0:	0800d868 	.word	0x0800d868
 80028b4:	0800d86c 	.word	0x0800d86c
 80028b8:	0800d870 	.word	0x0800d870
 80028bc:	0800d874 	.word	0x0800d874

080028c0 <TADBufferToStruct>:
	float speed;
	float voltage;
	float current;
};
inline void TADBufferToStruct(float*, struct TelData*);
inline void TADBufferToStruct(float buf[], struct TelData *data){
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
	//buf[0] accel, buf[1] temp, buf[2] speed, buf[3] voltage, buf[4] current
	data->accel = buf[0];
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	601a      	str	r2, [r3, #0]
	data->temp = buf[1];
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	605a      	str	r2, [r3, #4]
	data->speed = buf[2];
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	609a      	str	r2, [r3, #8]
	data->voltage = buf[3];
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	60da      	str	r2, [r3, #12]
	data->current = buf[4];
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	611a      	str	r2, [r3, #16]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <LogToSD>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int ignoreData = 0;

FRESULT LogToSD(){
 8002900:	b5b0      	push	{r4, r5, r7, lr}
 8002902:	b09e      	sub	sp, #120	; 0x78
 8002904:	af04      	add	r7, sp, #16
	fres = f_open(&fil, LOG_FILE_NAME, FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8002906:	2233      	movs	r2, #51	; 0x33
 8002908:	492f      	ldr	r1, [pc, #188]	; (80029c8 <LogToSD+0xc8>)
 800290a:	4830      	ldr	r0, [pc, #192]	; (80029cc <LogToSD+0xcc>)
 800290c:	f007 fa78 	bl	8009e00 <f_open>
 8002910:	4603      	mov	r3, r0
 8002912:	461a      	mov	r2, r3
 8002914:	4b2e      	ldr	r3, [pc, #184]	; (80029d0 <LogToSD+0xd0>)
 8002916:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8002918:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <LogToSD+0xd0>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d103      	bne.n	8002928 <LogToSD+0x28>
		printf("File opened for reading and checking the free space.\n");
 8002920:	482c      	ldr	r0, [pc, #176]	; (80029d4 <LogToSD+0xd4>)
 8002922:	f008 fe0b 	bl	800b53c <puts>
 8002926:	e006      	b.n	8002936 <LogToSD+0x36>
	} else if (fres != FR_OK) {
 8002928:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <LogToSD+0xd0>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <LogToSD+0x36>
		printf(
 8002930:	4829      	ldr	r0, [pc, #164]	; (80029d8 <LogToSD+0xd8>)
 8002932:	f008 fe03 	bl	800b53c <puts>
				"File was not opened for reading and checking the free space!\n");
	}

	printf("writing data to file\n");
 8002936:	4829      	ldr	r0, [pc, #164]	; (80029dc <LogToSD+0xdc>)
 8002938:	f008 fe00 	bl	800b53c <puts>
	char dataStr[100];
	for(float* start = sdwritebuffer; start < sdbufindex; start += 5){
 800293c:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <LogToSD+0xe0>)
 800293e:	667b      	str	r3, [r7, #100]	; 0x64
 8002940:	e01e      	b.n	8002980 <LogToSD+0x80>
		sprintf(dataStr, "%08X,%08X,%08X,%08X,%08X\n" ,
 8002942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002944:	681c      	ldr	r4, [r3, #0]
					*(unsigned int*)&(*start),
					*(unsigned int*)&(*(start+1)),
 8002946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002948:	3304      	adds	r3, #4
		sprintf(dataStr, "%08X,%08X,%08X,%08X,%08X\n" ,
 800294a:	681d      	ldr	r5, [r3, #0]
					*(unsigned int*)&(*(start+2)),
 800294c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800294e:	3308      	adds	r3, #8
		sprintf(dataStr, "%08X,%08X,%08X,%08X,%08X\n" ,
 8002950:	681b      	ldr	r3, [r3, #0]
					*(unsigned int*)&(*(start+3)),
 8002952:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002954:	320c      	adds	r2, #12
		sprintf(dataStr, "%08X,%08X,%08X,%08X,%08X\n" ,
 8002956:	6812      	ldr	r2, [r2, #0]
					*(unsigned int*)&(*(start+4)));
 8002958:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800295a:	3110      	adds	r1, #16
		sprintf(dataStr, "%08X,%08X,%08X,%08X,%08X\n" ,
 800295c:	6809      	ldr	r1, [r1, #0]
 800295e:	4638      	mov	r0, r7
 8002960:	9102      	str	r1, [sp, #8]
 8002962:	9201      	str	r2, [sp, #4]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	462b      	mov	r3, r5
 8002968:	4622      	mov	r2, r4
 800296a:	491e      	ldr	r1, [pc, #120]	; (80029e4 <LogToSD+0xe4>)
 800296c:	f008 fdee 	bl	800b54c <siprintf>
		f_puts(dataStr, &fil);
 8002970:	463b      	mov	r3, r7
 8002972:	4916      	ldr	r1, [pc, #88]	; (80029cc <LogToSD+0xcc>)
 8002974:	4618      	mov	r0, r3
 8002976:	f007 fec2 	bl	800a6fe <f_puts>
	for(float* start = sdwritebuffer; start < sdbufindex; start += 5){
 800297a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800297c:	3314      	adds	r3, #20
 800297e:	667b      	str	r3, [r7, #100]	; 0x64
 8002980:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <LogToSD+0xe8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002986:	429a      	cmp	r2, r3
 8002988:	d3db      	bcc.n	8002942 <LogToSD+0x42>

	}
	fres = f_close(&fil);
 800298a:	4810      	ldr	r0, [pc, #64]	; (80029cc <LogToSD+0xcc>)
 800298c:	f007 fe16 	bl	800a5bc <f_close>
 8002990:	4603      	mov	r3, r0
 8002992:	461a      	mov	r2, r3
 8002994:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <LogToSD+0xd0>)
 8002996:	701a      	strb	r2, [r3, #0]
	sdbufindex = sdwritebuffer;
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <LogToSD+0xe8>)
 800299a:	4a11      	ldr	r2, [pc, #68]	; (80029e0 <LogToSD+0xe0>)
 800299c:	601a      	str	r2, [r3, #0]
//			*(unsigned int*)&data.speed,
//			*(unsigned int*)&data.voltage,
//			*(unsigned int*)&data.current);
	/* Close file */

	if (fres == FR_OK) {
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <LogToSD+0xd0>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d103      	bne.n	80029ae <LogToSD+0xae>
		printf("The file is closed.\n");
 80029a6:	4811      	ldr	r0, [pc, #68]	; (80029ec <LogToSD+0xec>)
 80029a8:	f008 fdc8 	bl	800b53c <puts>
 80029ac:	e006      	b.n	80029bc <LogToSD+0xbc>
	} else if (fres != FR_OK) {
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <LogToSD+0xd0>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <LogToSD+0xbc>
		printf("The file was not closed.\n");
 80029b6:	480e      	ldr	r0, [pc, #56]	; (80029f0 <LogToSD+0xf0>)
 80029b8:	f008 fdc0 	bl	800b53c <puts>
	}
	return fres;
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <LogToSD+0xd0>)
 80029be:	781b      	ldrb	r3, [r3, #0]

}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3768      	adds	r7, #104	; 0x68
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bdb0      	pop	{r4, r5, r7, pc}
 80029c8:	0800d878 	.word	0x0800d878
 80029cc:	200014a8 	.word	0x200014a8
 80029d0:	200024d8 	.word	0x200024d8
 80029d4:	0800d884 	.word	0x0800d884
 80029d8:	0800d8bc 	.word	0x0800d8bc
 80029dc:	0800d8fc 	.word	0x0800d8fc
 80029e0:	200024dc 	.word	0x200024dc
 80029e4:	0800d914 	.word	0x0800d914
 80029e8:	20000070 	.word	0x20000070
 80029ec:	0800d930 	.word	0x0800d930
 80029f0:	0800d944 	.word	0x0800d944

080029f4 <InitializeSD>:

FRESULT InitializeSD(){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 80029f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029fc:	f000 feb8 	bl	8003770 <HAL_Delay>
	//BEGIN SD TEST
	fres = f_mount(&fs, "", 1);
 8002a00:	2201      	movs	r2, #1
 8002a02:	4920      	ldr	r1, [pc, #128]	; (8002a84 <InitializeSD+0x90>)
 8002a04:	4820      	ldr	r0, [pc, #128]	; (8002a88 <InitializeSD+0x94>)
 8002a06:	f007 f9b5 	bl	8009d74 <f_mount>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b1f      	ldr	r3, [pc, #124]	; (8002a8c <InitializeSD+0x98>)
 8002a10:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8002a12:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <InitializeSD+0x98>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d103      	bne.n	8002a22 <InitializeSD+0x2e>
		printf("Micro SD card is mounted successfully!\n");
 8002a1a:	481d      	ldr	r0, [pc, #116]	; (8002a90 <InitializeSD+0x9c>)
 8002a1c:	f008 fd8e 	bl	800b53c <puts>
 8002a20:	e006      	b.n	8002a30 <InitializeSD+0x3c>
	} else if (fres != FR_OK) {
 8002a22:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <InitializeSD+0x98>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <InitializeSD+0x3c>
		printf("Micro SD card's mount error!\n");
 8002a2a:	481a      	ldr	r0, [pc, #104]	; (8002a94 <InitializeSD+0xa0>)
 8002a2c:	f008 fd86 	bl	800b53c <puts>
//	} else if (fres != FR_OK) {
//		printf(
//				"File was not opened for reading and checking the free space!\n");
//	}

	fres = f_open(&fil, LOG_FILE_NAME, FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8002a30:	2233      	movs	r2, #51	; 0x33
 8002a32:	4919      	ldr	r1, [pc, #100]	; (8002a98 <InitializeSD+0xa4>)
 8002a34:	4819      	ldr	r0, [pc, #100]	; (8002a9c <InitializeSD+0xa8>)
 8002a36:	f007 f9e3 	bl	8009e00 <f_open>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <InitializeSD+0x98>)
 8002a40:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <InitializeSD+0x98>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d103      	bne.n	8002a52 <InitializeSD+0x5e>
		printf("File opened for reading and checking the free space.\n");
 8002a4a:	4815      	ldr	r0, [pc, #84]	; (8002aa0 <InitializeSD+0xac>)
 8002a4c:	f008 fd76 	bl	800b53c <puts>
 8002a50:	e006      	b.n	8002a60 <InitializeSD+0x6c>
	} else if (fres != FR_OK) {
 8002a52:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <InitializeSD+0x98>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <InitializeSD+0x6c>
		printf(
 8002a5a:	4812      	ldr	r0, [pc, #72]	; (8002aa4 <InitializeSD+0xb0>)
 8002a5c:	f008 fd6e 	bl	800b53c <puts>
				"File was not opened for reading and checking the free space!\n");
	}
	printf("writing file header\n");
 8002a60:	4811      	ldr	r0, [pc, #68]	; (8002aa8 <InitializeSD+0xb4>)
 8002a62:	f008 fd6b 	bl	800b53c <puts>
	//buf[0] accel, buf[1] temp, buf[2] speed, buf[3] voltage, buf[4] current
	f_puts("Acceleration,Temperature,Speed,Voltage,Current\n", &fil);
 8002a66:	490d      	ldr	r1, [pc, #52]	; (8002a9c <InitializeSD+0xa8>)
 8002a68:	4810      	ldr	r0, [pc, #64]	; (8002aac <InitializeSD+0xb8>)
 8002a6a:	f007 fe48 	bl	800a6fe <f_puts>
	/* Close file */
	fres = f_close(&fil);
 8002a6e:	480b      	ldr	r0, [pc, #44]	; (8002a9c <InitializeSD+0xa8>)
 8002a70:	f007 fda4 	bl	800a5bc <f_close>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <InitializeSD+0x98>)
 8002a7a:	701a      	strb	r2, [r3, #0]
	return fres;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	; (8002a8c <InitializeSD+0x98>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	0800d960 	.word	0x0800d960
 8002a88:	20000470 	.word	0x20000470
 8002a8c:	200024d8 	.word	0x200024d8
 8002a90:	0800d964 	.word	0x0800d964
 8002a94:	0800d98c 	.word	0x0800d98c
 8002a98:	0800d878 	.word	0x0800d878
 8002a9c:	200014a8 	.word	0x200014a8
 8002aa0:	0800d884 	.word	0x0800d884
 8002aa4:	0800d8bc 	.word	0x0800d8bc
 8002aa8:	0800d9ac 	.word	0x0800d9ac
 8002aac:	0800d9c0 	.word	0x0800d9c0

08002ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ab6:	f000 fe22 	bl	80036fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aba:	f000 f89d 	bl	8002bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002abe:	f000 f9d1 	bl	8002e64 <MX_GPIO_Init>
  MX_RTC_Init();
 8002ac2:	f000 f8fb 	bl	8002cbc <MX_RTC_Init>
  MX_SPI1_Init();
 8002ac6:	f000 f921 	bl	8002d0c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002aca:	f000 f99b 	bl	8002e04 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8002ace:	f000 f95b 	bl	8002d88 <MX_SPI3_Init>
  MX_FATFS_Init();
 8002ad2:	f004 ff07 	bl	80078e4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	LCD_TADAMHASPEV(&hspi1);
 8002ad6:	483b      	ldr	r0, [pc, #236]	; (8002bc4 <main+0x114>)
 8002ad8:	f7ff fe4c 	bl	8002774 <LCD_TADAMHASPEV>
	int tempWarn = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	607b      	str	r3, [r7, #4]
	int voltWarn = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	603b      	str	r3, [r7, #0]
//	HAL_Delay(3500);
	InitializeSD();
 8002ae4:	f7ff ff86 	bl	80029f4 <InitializeSD>
	HAL_Delay(500);
 8002ae8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002aec:	f000 fe40 	bl	8003770 <HAL_Delay>
	uartRecieveCode = HAL_UART_Receive_IT(&huart1, (uint8_t*) &buf, sizeof(buf));
 8002af0:	2214      	movs	r2, #20
 8002af2:	4935      	ldr	r1, [pc, #212]	; (8002bc8 <main+0x118>)
 8002af4:	4835      	ldr	r0, [pc, #212]	; (8002bcc <main+0x11c>)
 8002af6:	f003 fc91 	bl	800641c <HAL_UART_Receive_IT>
 8002afa:	4603      	mov	r3, r0
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <main+0x120>)
 8002b00:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN 3 */
		//buf[0] accel, buf[1] temp, buf[2] speed, buf[3] voltage, buf[4] current
//		int delay = 0;

		if(sdbufindex-sdwritebuffer >= 5*NUM_ENTRIES_PER_WRITE){
 8002b02:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <main+0x124>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a34      	ldr	r2, [pc, #208]	; (8002bd8 <main+0x128>)
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	2bc4      	cmp	r3, #196	; 0xc4
 8002b0c:	dd01      	ble.n	8002b12 <main+0x62>
			LogToSD();
 8002b0e:	f7ff fef7 	bl	8002900 <LogToSD>
		}

		if (huart1.ErrorCode == 8) {
 8002b12:	4b2e      	ldr	r3, [pc, #184]	; (8002bcc <main+0x11c>)
 8002b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d107      	bne.n	8002b2c <main+0x7c>
			HAL_UART_Receive_IT(&huart1, (uint8_t*) &buf,
 8002b1c:	2214      	movs	r2, #20
 8002b1e:	492a      	ldr	r1, [pc, #168]	; (8002bc8 <main+0x118>)
 8002b20:	482a      	ldr	r0, [pc, #168]	; (8002bcc <main+0x11c>)
 8002b22:	f003 fc7b 	bl	800641c <HAL_UART_Receive_IT>
								sizeof(buf));
			ignoreData = 1;
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <main+0x12c>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
		}
		if (refresh == 1) {
 8002b2c:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <main+0x130>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d1e6      	bne.n	8002b02 <main+0x52>
			LCD_updateVals(&hspi1, data);
 8002b34:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <main+0x134>)
 8002b36:	466c      	mov	r4, sp
 8002b38:	f103 020c 	add.w	r2, r3, #12
 8002b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b40:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b46:	481f      	ldr	r0, [pc, #124]	; (8002bc4 <main+0x114>)
 8002b48:	f7ff fc98 	bl	800247c <LCD_updateVals>
			refresh = 0;
 8002b4c:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <main+0x130>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]

			if (batRefresh == 1) {
 8002b52:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <main+0x138>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d12a      	bne.n	8002bb0 <main+0x100>
				volt_percent = (int) (data.voltage * 10 - 440);
 8002b5a:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <main+0x134>)
 8002b5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b68:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002bec <main+0x13c>
 8002b6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b74:	ee17 2a90 	vmov	r2, s15
 8002b78:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <main+0x140>)
 8002b7a:	601a      	str	r2, [r3, #0]
				LCD_updateBattery(&hspi1, volt_percent);
 8002b7c:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <main+0x140>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	4810      	ldr	r0, [pc, #64]	; (8002bc4 <main+0x114>)
 8002b84:	f7ff fdc4 	bl	8002710 <LCD_updateBattery>
				LCD_warnings(&hspi1, data.temp, volt_percent, &warning, &tempWarn, &voltWarn);
 8002b88:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <main+0x134>)
 8002b8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <main+0x140>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	463b      	mov	r3, r7
 8002b98:	9301      	str	r3, [sp, #4]
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <main+0x144>)
 8002ba0:	ee17 1a90 	vmov	r1, s15
 8002ba4:	4807      	ldr	r0, [pc, #28]	; (8002bc4 <main+0x114>)
 8002ba6:	f7ff fccb 	bl	8002540 <LCD_warnings>
				batRefresh = 0;
 8002baa:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <main+0x138>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
			}
//			if(delay ==1) {
//				HAL_Delay(500);
//				delay = 0;
//			}
			uartRecieveCode = HAL_UART_Receive_IT(&huart1, (uint8_t*) &buf,
 8002bb0:	2214      	movs	r2, #20
 8002bb2:	4905      	ldr	r1, [pc, #20]	; (8002bc8 <main+0x118>)
 8002bb4:	4805      	ldr	r0, [pc, #20]	; (8002bcc <main+0x11c>)
 8002bb6:	f003 fc31 	bl	800641c <HAL_UART_Receive_IT>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <main+0x120>)
 8002bc0:	701a      	strb	r2, [r3, #0]
		if(sdbufindex-sdwritebuffer >= 5*NUM_ENTRIES_PER_WRITE){
 8002bc2:	e79e      	b.n	8002b02 <main+0x52>
 8002bc4:	200002e4 	.word	0x200002e4
 8002bc8:	20000434 	.word	0x20000434
 8002bcc:	200003ac 	.word	0x200003ac
 8002bd0:	20000458 	.word	0x20000458
 8002bd4:	20000070 	.word	0x20000070
 8002bd8:	200024dc 	.word	0x200024dc
 8002bdc:	2000347c 	.word	0x2000347c
 8002be0:	2000044c 	.word	0x2000044c
 8002be4:	2000045c 	.word	0x2000045c
 8002be8:	20000450 	.word	0x20000450
 8002bec:	43dc0000 	.word	0x43dc0000
 8002bf0:	2000006c 	.word	0x2000006c
 8002bf4:	20000448 	.word	0x20000448

08002bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b096      	sub	sp, #88	; 0x58
 8002bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	2244      	movs	r2, #68	; 0x44
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f008 fd98 	bl	800b73c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c0c:	463b      	mov	r3, r7
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	60da      	str	r2, [r3, #12]
 8002c18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002c1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c1e:	f001 f8d9 	bl	8003dd4 <HAL_PWREx_ControlVoltageScaling>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002c28:	f000 fa6b 	bl	8003102 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002c2c:	f001 f8b4 	bl	8003d98 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c30:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <SystemClock_Config+0xc0>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c36:	4a20      	ldr	r2, [pc, #128]	; (8002cb8 <SystemClock_Config+0xc0>)
 8002c38:	f023 0318 	bic.w	r3, r3, #24
 8002c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002c40:	2314      	movs	r3, #20
 8002c42:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c44:	2301      	movs	r3, #1
 8002c46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002c50:	2360      	movs	r3, #96	; 0x60
 8002c52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c54:	2302      	movs	r3, #2
 8002c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002c60:	2328      	movs	r3, #40	; 0x28
 8002c62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002c64:	2307      	movs	r3, #7
 8002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	4618      	mov	r0, r3
 8002c76:	f001 f903 	bl	8003e80 <HAL_RCC_OscConfig>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002c80:	f000 fa3f 	bl	8003102 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c84:	230f      	movs	r3, #15
 8002c86:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c94:	2300      	movs	r3, #0
 8002c96:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c98:	463b      	mov	r3, r7
 8002c9a:	2104      	movs	r1, #4
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f001 fd03 	bl	80046a8 <HAL_RCC_ClockConfig>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002ca8:	f000 fa2b 	bl	8003102 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002cac:	f002 f948 	bl	8004f40 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002cb0:	bf00      	nop
 8002cb2:	3758      	adds	r7, #88	; 0x58
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000

08002cbc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002cc0:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <MX_RTC_Init+0x48>)
 8002cc2:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <MX_RTC_Init+0x4c>)
 8002cc4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <MX_RTC_Init+0x48>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <MX_RTC_Init+0x48>)
 8002cce:	227f      	movs	r2, #127	; 0x7f
 8002cd0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <MX_RTC_Init+0x48>)
 8002cd4:	22ff      	movs	r2, #255	; 0xff
 8002cd6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <MX_RTC_Init+0x48>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <MX_RTC_Init+0x48>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ce4:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <MX_RTC_Init+0x48>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <MX_RTC_Init+0x48>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002cf0:	4804      	ldr	r0, [pc, #16]	; (8002d04 <MX_RTC_Init+0x48>)
 8002cf2:	f002 fa27 	bl	8005144 <HAL_RTC_Init>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002cfc:	f000 fa01 	bl	8003102 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	200002c0 	.word	0x200002c0
 8002d08:	40002800 	.word	0x40002800

08002d0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <MX_SPI1_Init+0x74>)
 8002d12:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <MX_SPI1_Init+0x78>)
 8002d14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d16:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <MX_SPI1_Init+0x74>)
 8002d18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d1e:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <MX_SPI1_Init+0x74>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d24:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <MX_SPI1_Init+0x74>)
 8002d26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <MX_SPI1_Init+0x74>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d32:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <MX_SPI1_Init+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <MX_SPI1_Init+0x74>)
 8002d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <MX_SPI1_Init+0x74>)
 8002d42:	2208      	movs	r2, #8
 8002d44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <MX_SPI1_Init+0x74>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <MX_SPI1_Init+0x74>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <MX_SPI1_Init+0x74>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <MX_SPI1_Init+0x74>)
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <MX_SPI1_Init+0x74>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <MX_SPI1_Init+0x74>)
 8002d66:	2208      	movs	r2, #8
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d6a:	4805      	ldr	r0, [pc, #20]	; (8002d80 <MX_SPI1_Init+0x74>)
 8002d6c:	f002 fb08 	bl	8005380 <HAL_SPI_Init>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d76:	f000 f9c4 	bl	8003102 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200002e4 	.word	0x200002e4
 8002d84:	40013000 	.word	0x40013000

08002d88 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <MX_SPI3_Init+0x74>)
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <MX_SPI3_Init+0x78>)
 8002d90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002d92:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <MX_SPI3_Init+0x74>)
 8002d94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d98:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002d9a:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <MX_SPI3_Init+0x74>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002da0:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <MX_SPI3_Init+0x74>)
 8002da2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002da6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002da8:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <MX_SPI3_Init+0x74>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dae:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <MX_SPI3_Init+0x74>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <MX_SPI3_Init+0x74>)
 8002db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <MX_SPI3_Init+0x74>)
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_SPI3_Init+0x74>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <MX_SPI3_Init+0x74>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <MX_SPI3_Init+0x74>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <MX_SPI3_Init+0x74>)
 8002dd6:	2207      	movs	r2, #7
 8002dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <MX_SPI3_Init+0x74>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_SPI3_Init+0x74>)
 8002de2:	2208      	movs	r2, #8
 8002de4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002de6:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_SPI3_Init+0x74>)
 8002de8:	f002 faca 	bl	8005380 <HAL_SPI_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002df2:	f000 f986 	bl	8003102 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000348 	.word	0x20000348
 8002e00:	40003c00 	.word	0x40003c00

08002e04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <MX_USART1_UART_Init+0x58>)
 8002e0a:	4a15      	ldr	r2, [pc, #84]	; (8002e60 <MX_USART1_UART_Init+0x5c>)
 8002e0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002e0e:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <MX_USART1_UART_Init+0x58>)
 8002e10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <MX_USART1_UART_Init+0x58>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <MX_USART1_UART_Init+0x58>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <MX_USART1_UART_Init+0x58>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <MX_USART1_UART_Init+0x58>)
 8002e2a:	220c      	movs	r2, #12
 8002e2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <MX_USART1_UART_Init+0x58>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <MX_USART1_UART_Init+0x58>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <MX_USART1_UART_Init+0x58>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <MX_USART1_UART_Init+0x58>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e46:	4805      	ldr	r0, [pc, #20]	; (8002e5c <MX_USART1_UART_Init+0x58>)
 8002e48:	f003 fa9a 	bl	8006380 <HAL_UART_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002e52:	f000 f956 	bl	8003102 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200003ac 	.word	0x200003ac
 8002e60:	40013800 	.word	0x40013800

08002e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6a:	f107 030c 	add.w	r3, r7, #12
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	60da      	str	r2, [r3, #12]
 8002e78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7a:	4b45      	ldr	r3, [pc, #276]	; (8002f90 <MX_GPIO_Init+0x12c>)
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7e:	4a44      	ldr	r2, [pc, #272]	; (8002f90 <MX_GPIO_Init+0x12c>)
 8002e80:	f043 0304 	orr.w	r3, r3, #4
 8002e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e86:	4b42      	ldr	r3, [pc, #264]	; (8002f90 <MX_GPIO_Init+0x12c>)
 8002e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e92:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <MX_GPIO_Init+0x12c>)
 8002e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e96:	4a3e      	ldr	r2, [pc, #248]	; (8002f90 <MX_GPIO_Init+0x12c>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e9e:	4b3c      	ldr	r3, [pc, #240]	; (8002f90 <MX_GPIO_Init+0x12c>)
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eaa:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <MX_GPIO_Init+0x12c>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	4a38      	ldr	r2, [pc, #224]	; (8002f90 <MX_GPIO_Init+0x12c>)
 8002eb0:	f043 0302 	orr.w	r3, r3, #2
 8002eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eb6:	4b36      	ldr	r3, [pc, #216]	; (8002f90 <MX_GPIO_Init+0x12c>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	210a      	movs	r1, #10
 8002ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eca:	f000 ff4d 	bl	8003d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ed8:	f000 ff46 	bl	8003d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002edc:	2200      	movs	r2, #0
 8002ede:	2140      	movs	r1, #64	; 0x40
 8002ee0:	482c      	ldr	r0, [pc, #176]	; (8002f94 <MX_GPIO_Init+0x130>)
 8002ee2:	f000 ff41 	bl	8003d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002ee6:	230a      	movs	r3, #10
 8002ee8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eea:	2301      	movs	r3, #1
 8002eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef6:	f107 030c 	add.w	r3, r7, #12
 8002efa:	4619      	mov	r1, r3
 8002efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f00:	f000 fdc8 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002f04:	2304      	movs	r3, #4
 8002f06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f10:	2303      	movs	r3, #3
 8002f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f14:	2307      	movs	r3, #7
 8002f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002f18:	f107 030c 	add.w	r3, r7, #12
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f22:	f000 fdb7 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002f34:	2301      	movs	r3, #1
 8002f36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f38:	f107 030c 	add.w	r3, r7, #12
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f42:	f000 fda7 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f54:	2303      	movs	r3, #3
 8002f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002f5c:	f107 030c 	add.w	r3, r7, #12
 8002f60:	4619      	mov	r1, r3
 8002f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f66:	f000 fd95 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f6a:	2340      	movs	r3, #64	; 0x40
 8002f6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f76:	2303      	movs	r3, #3
 8002f78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7a:	f107 030c 	add.w	r3, r7, #12
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4804      	ldr	r0, [pc, #16]	; (8002f94 <MX_GPIO_Init+0x130>)
 8002f82:	f000 fd87 	bl	8003a94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f86:	bf00      	nop
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	48000400 	.word	0x48000400

08002f98 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

	if(ignoreData == 1){
 8002fa0:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_UART_RxCpltCallback+0x128>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d10c      	bne.n	8002fc2 <HAL_UART_RxCpltCallback+0x2a>
		ignoreData = 0;
 8002fa8:	4b45      	ldr	r3, [pc, #276]	; (80030c0 <HAL_UART_RxCpltCallback+0x128>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
		uartRecieveCode = HAL_UART_Receive_IT(&huart1, (uint8_t*) &buf, sizeof(buf));
 8002fae:	2214      	movs	r2, #20
 8002fb0:	4944      	ldr	r1, [pc, #272]	; (80030c4 <HAL_UART_RxCpltCallback+0x12c>)
 8002fb2:	4845      	ldr	r0, [pc, #276]	; (80030c8 <HAL_UART_RxCpltCallback+0x130>)
 8002fb4:	f003 fa32 	bl	800641c <HAL_UART_Receive_IT>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b43      	ldr	r3, [pc, #268]	; (80030cc <HAL_UART_RxCpltCallback+0x134>)
 8002fbe:	701a      	strb	r2, [r3, #0]
		return;
 8002fc0:	e07a      	b.n	80030b8 <HAL_UART_RxCpltCallback+0x120>
	}

	float* fbuf = buf;
 8002fc2:	4b40      	ldr	r3, [pc, #256]	; (80030c4 <HAL_UART_RxCpltCallback+0x12c>)
 8002fc4:	613b      	str	r3, [r7, #16]
	//copy values into sd write buffer
	float* end = fbuf+5;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	3314      	adds	r3, #20
 8002fca:	60fb      	str	r3, [r7, #12]
	for (float* p = fbuf; p < end; ++p) {
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	e00a      	b.n	8002fe8 <HAL_UART_RxCpltCallback+0x50>
	    *(sdbufindex++) = *p;
 8002fd2:	4b3f      	ldr	r3, [pc, #252]	; (80030d0 <HAL_UART_RxCpltCallback+0x138>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	1d1a      	adds	r2, r3, #4
 8002fd8:	493d      	ldr	r1, [pc, #244]	; (80030d0 <HAL_UART_RxCpltCallback+0x138>)
 8002fda:	600a      	str	r2, [r1, #0]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	601a      	str	r2, [r3, #0]
	for (float* p = fbuf; p < end; ++p) {
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d3f0      	bcc.n	8002fd2 <HAL_UART_RxCpltCallback+0x3a>
	}

	if ( //check if values changed
	ignoreData == 0 && (fbuf[0] != data.accel || fbuf[1] != data.temp || fbuf[2] != data.speed
 8002ff0:	4b33      	ldr	r3, [pc, #204]	; (80030c0 <HAL_UART_RxCpltCallback+0x128>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
	if ( //check if values changed
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d151      	bne.n	800309c <HAL_UART_RxCpltCallback+0x104>
	ignoreData == 0 && (fbuf[0] != data.accel || fbuf[1] != data.temp || fbuf[2] != data.speed
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	ed93 7a00 	vldr	s14, [r3]
 8002ffe:	4b35      	ldr	r3, [pc, #212]	; (80030d4 <HAL_UART_RxCpltCallback+0x13c>)
 8003000:	edd3 7a00 	vldr	s15, [r3]
 8003004:	eeb4 7a67 	vcmp.f32	s14, s15
 8003008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300c:	d12f      	bne.n	800306e <HAL_UART_RxCpltCallback+0xd6>
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	3304      	adds	r3, #4
 8003012:	ed93 7a00 	vldr	s14, [r3]
 8003016:	4b2f      	ldr	r3, [pc, #188]	; (80030d4 <HAL_UART_RxCpltCallback+0x13c>)
 8003018:	edd3 7a01 	vldr	s15, [r3, #4]
 800301c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003024:	d123      	bne.n	800306e <HAL_UART_RxCpltCallback+0xd6>
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	3308      	adds	r3, #8
 800302a:	ed93 7a00 	vldr	s14, [r3]
 800302e:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <HAL_UART_RxCpltCallback+0x13c>)
 8003030:	edd3 7a02 	vldr	s15, [r3, #8]
 8003034:	eeb4 7a67 	vcmp.f32	s14, s15
 8003038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303c:	d117      	bne.n	800306e <HAL_UART_RxCpltCallback+0xd6>
			|| fbuf[3] != data.voltage || fbuf[4] != data.current)  ) {
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	330c      	adds	r3, #12
 8003042:	ed93 7a00 	vldr	s14, [r3]
 8003046:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <HAL_UART_RxCpltCallback+0x13c>)
 8003048:	edd3 7a03 	vldr	s15, [r3, #12]
 800304c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003054:	d10b      	bne.n	800306e <HAL_UART_RxCpltCallback+0xd6>
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	3310      	adds	r3, #16
 800305a:	ed93 7a00 	vldr	s14, [r3]
 800305e:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <HAL_UART_RxCpltCallback+0x13c>)
 8003060:	edd3 7a04 	vldr	s15, [r3, #16]
 8003064:	eeb4 7a67 	vcmp.f32	s14, s15
 8003068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306c:	d016      	beq.n	800309c <HAL_UART_RxCpltCallback+0x104>
		if (data.voltage != fbuf[3]) batRefresh = 1; //only refresh battery when voltage changes
 800306e:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_UART_RxCpltCallback+0x13c>)
 8003070:	ed93 7a03 	vldr	s14, [r3, #12]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	330c      	adds	r3, #12
 8003078:	edd3 7a00 	vldr	s15, [r3]
 800307c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003084:	d002      	beq.n	800308c <HAL_UART_RxCpltCallback+0xf4>
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <HAL_UART_RxCpltCallback+0x140>)
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]
		TADBufferToStruct((float*)buf, &data);
 800308c:	4911      	ldr	r1, [pc, #68]	; (80030d4 <HAL_UART_RxCpltCallback+0x13c>)
 800308e:	480d      	ldr	r0, [pc, #52]	; (80030c4 <HAL_UART_RxCpltCallback+0x12c>)
 8003090:	f7ff fc16 	bl	80028c0 <TADBufferToStruct>
		refresh = 1;
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <HAL_UART_RxCpltCallback+0x144>)
 8003096:	2201      	movs	r2, #1
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e008      	b.n	80030ae <HAL_UART_RxCpltCallback+0x116>
	}
	else{
		//ignoreData = 0;
		uartRecieveCode = HAL_UART_Receive_IT(&huart1, (uint8_t*) &buf, sizeof(buf));
 800309c:	2214      	movs	r2, #20
 800309e:	4909      	ldr	r1, [pc, #36]	; (80030c4 <HAL_UART_RxCpltCallback+0x12c>)
 80030a0:	4809      	ldr	r0, [pc, #36]	; (80030c8 <HAL_UART_RxCpltCallback+0x130>)
 80030a2:	f003 f9bb 	bl	800641c <HAL_UART_Receive_IT>
 80030a6:	4603      	mov	r3, r0
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_UART_RxCpltCallback+0x134>)
 80030ac:	701a      	strb	r2, [r3, #0]

	}
	//uartRecieveCode = HAL_UART_Receive_IT(&huart1, (uint8_t*) &buf, sizeof(buf));
	numRefresh++;
 80030ae:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_UART_RxCpltCallback+0x148>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3301      	adds	r3, #1
 80030b4:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <HAL_UART_RxCpltCallback+0x148>)
 80030b6:	6013      	str	r3, [r2, #0]
}
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	2000347c 	.word	0x2000347c
 80030c4:	20000434 	.word	0x20000434
 80030c8:	200003ac 	.word	0x200003ac
 80030cc:	20000458 	.word	0x20000458
 80030d0:	20000070 	.word	0x20000070
 80030d4:	2000045c 	.word	0x2000045c
 80030d8:	20000450 	.word	0x20000450
 80030dc:	2000044c 	.word	0x2000044c
 80030e0:	20000454 	.word	0x20000454

080030e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f4:	d101      	bne.n	80030fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80030f6:	f000 fb1b 	bl	8003730 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003106:	b672      	cpsid	i
}
 8003108:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800310a:	e7fe      	b.n	800310a <Error_Handler+0x8>

0800310c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003112:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <HAL_MspInit+0x44>)
 8003114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003116:	4a0e      	ldr	r2, [pc, #56]	; (8003150 <HAL_MspInit+0x44>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6613      	str	r3, [r2, #96]	; 0x60
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <HAL_MspInit+0x44>)
 8003120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_MspInit+0x44>)
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	4a08      	ldr	r2, [pc, #32]	; (8003150 <HAL_MspInit+0x44>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	6593      	str	r3, [r2, #88]	; 0x58
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_MspInit+0x44>)
 8003138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003142:	2004      	movs	r0, #4
 8003144:	f000 fbe5 	bl	8003912 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000

08003154 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b098      	sub	sp, #96	; 0x60
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800315c:	f107 030c 	add.w	r3, r7, #12
 8003160:	2254      	movs	r2, #84	; 0x54
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f008 fae9 	bl	800b73c <memset>
  if(hrtc->Instance==RTC)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a0f      	ldr	r2, [pc, #60]	; (80031ac <HAL_RTC_MspInit+0x58>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d117      	bne.n	80031a4 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003174:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003178:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800317a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800317e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003180:	f107 030c 	add.w	r3, r7, #12
 8003184:	4618      	mov	r0, r3
 8003186:	f001 fce5 	bl	8004b54 <HAL_RCCEx_PeriphCLKConfig>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003190:	f7ff ffb7 	bl	8003102 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RTC_MspInit+0x5c>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <HAL_RTC_MspInit+0x5c>)
 800319c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80031a4:	bf00      	nop
 80031a6:	3760      	adds	r7, #96	; 0x60
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40002800 	.word	0x40002800
 80031b0:	40021000 	.word	0x40021000

080031b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08c      	sub	sp, #48	; 0x30
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031bc:	f107 031c 	add.w	r3, r7, #28
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a2f      	ldr	r2, [pc, #188]	; (8003290 <HAL_SPI_MspInit+0xdc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d12a      	bne.n	800322c <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031d6:	4b2f      	ldr	r3, [pc, #188]	; (8003294 <HAL_SPI_MspInit+0xe0>)
 80031d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031da:	4a2e      	ldr	r2, [pc, #184]	; (8003294 <HAL_SPI_MspInit+0xe0>)
 80031dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031e0:	6613      	str	r3, [r2, #96]	; 0x60
 80031e2:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <HAL_SPI_MspInit+0xe0>)
 80031e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ee:	4b29      	ldr	r3, [pc, #164]	; (8003294 <HAL_SPI_MspInit+0xe0>)
 80031f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f2:	4a28      	ldr	r2, [pc, #160]	; (8003294 <HAL_SPI_MspInit+0xe0>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031fa:	4b26      	ldr	r3, [pc, #152]	; (8003294 <HAL_SPI_MspInit+0xe0>)
 80031fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8003206:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800320a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003214:	2303      	movs	r3, #3
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003218:	2305      	movs	r3, #5
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321c:	f107 031c 	add.w	r3, r7, #28
 8003220:	4619      	mov	r1, r3
 8003222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003226:	f000 fc35 	bl	8003a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800322a:	e02c      	b.n	8003286 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a19      	ldr	r2, [pc, #100]	; (8003298 <HAL_SPI_MspInit+0xe4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d127      	bne.n	8003286 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003236:	4b17      	ldr	r3, [pc, #92]	; (8003294 <HAL_SPI_MspInit+0xe0>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	4a16      	ldr	r2, [pc, #88]	; (8003294 <HAL_SPI_MspInit+0xe0>)
 800323c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003240:	6593      	str	r3, [r2, #88]	; 0x58
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <HAL_SPI_MspInit+0xe0>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_SPI_MspInit+0xe0>)
 8003250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003252:	4a10      	ldr	r2, [pc, #64]	; (8003294 <HAL_SPI_MspInit+0xe0>)
 8003254:	f043 0302 	orr.w	r3, r3, #2
 8003258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800325a:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <HAL_SPI_MspInit+0xe0>)
 800325c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003266:	2338      	movs	r3, #56	; 0x38
 8003268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326a:	2302      	movs	r3, #2
 800326c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	2300      	movs	r3, #0
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003272:	2303      	movs	r3, #3
 8003274:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003276:	2306      	movs	r3, #6
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800327a:	f107 031c 	add.w	r3, r7, #28
 800327e:	4619      	mov	r1, r3
 8003280:	4806      	ldr	r0, [pc, #24]	; (800329c <HAL_SPI_MspInit+0xe8>)
 8003282:	f000 fc07 	bl	8003a94 <HAL_GPIO_Init>
}
 8003286:	bf00      	nop
 8003288:	3730      	adds	r7, #48	; 0x30
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40013000 	.word	0x40013000
 8003294:	40021000 	.word	0x40021000
 8003298:	40003c00 	.word	0x40003c00
 800329c:	48000400 	.word	0x48000400

080032a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b09e      	sub	sp, #120	; 0x78
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032b8:	f107 0310 	add.w	r3, r7, #16
 80032bc:	2254      	movs	r2, #84	; 0x54
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f008 fa3b 	bl	800b73c <memset>
  if(huart->Instance==USART1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a23      	ldr	r2, [pc, #140]	; (8003358 <HAL_UART_MspInit+0xb8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d13f      	bne.n	8003350 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032d0:	2301      	movs	r3, #1
 80032d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80032d4:	2300      	movs	r3, #0
 80032d6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032d8:	f107 0310 	add.w	r3, r7, #16
 80032dc:	4618      	mov	r0, r3
 80032de:	f001 fc39 	bl	8004b54 <HAL_RCCEx_PeriphCLKConfig>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80032e8:	f7ff ff0b 	bl	8003102 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032ec:	4b1b      	ldr	r3, [pc, #108]	; (800335c <HAL_UART_MspInit+0xbc>)
 80032ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f0:	4a1a      	ldr	r2, [pc, #104]	; (800335c <HAL_UART_MspInit+0xbc>)
 80032f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f6:	6613      	str	r3, [r2, #96]	; 0x60
 80032f8:	4b18      	ldr	r3, [pc, #96]	; (800335c <HAL_UART_MspInit+0xbc>)
 80032fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003304:	4b15      	ldr	r3, [pc, #84]	; (800335c <HAL_UART_MspInit+0xbc>)
 8003306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003308:	4a14      	ldr	r2, [pc, #80]	; (800335c <HAL_UART_MspInit+0xbc>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003310:	4b12      	ldr	r3, [pc, #72]	; (800335c <HAL_UART_MspInit+0xbc>)
 8003312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800331c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003320:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003322:	2302      	movs	r3, #2
 8003324:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	2300      	movs	r3, #0
 8003328:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332a:	2303      	movs	r3, #3
 800332c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800332e:	2307      	movs	r3, #7
 8003330:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003332:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003336:	4619      	mov	r1, r3
 8003338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800333c:	f000 fbaa 	bl	8003a94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003340:	2200      	movs	r2, #0
 8003342:	2100      	movs	r1, #0
 8003344:	2025      	movs	r0, #37	; 0x25
 8003346:	f000 faef 	bl	8003928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800334a:	2025      	movs	r0, #37	; 0x25
 800334c:	f000 fb08 	bl	8003960 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003350:	bf00      	nop
 8003352:	3778      	adds	r7, #120	; 0x78
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40013800 	.word	0x40013800
 800335c:	40021000 	.word	0x40021000

08003360 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08e      	sub	sp, #56	; 0x38
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800336e:	4b34      	ldr	r3, [pc, #208]	; (8003440 <HAL_InitTick+0xe0>)
 8003370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003372:	4a33      	ldr	r2, [pc, #204]	; (8003440 <HAL_InitTick+0xe0>)
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	6593      	str	r3, [r2, #88]	; 0x58
 800337a:	4b31      	ldr	r3, [pc, #196]	; (8003440 <HAL_InitTick+0xe0>)
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003386:	f107 0210 	add.w	r2, r7, #16
 800338a:	f107 0314 	add.w	r3, r7, #20
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f001 fb4d 	bl	8004a30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d103      	bne.n	80033a8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80033a0:	f001 fb1a 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 80033a4:	6378      	str	r0, [r7, #52]	; 0x34
 80033a6:	e004      	b.n	80033b2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80033a8:	f001 fb16 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 80033ac:	4603      	mov	r3, r0
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b4:	4a23      	ldr	r2, [pc, #140]	; (8003444 <HAL_InitTick+0xe4>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	0c9b      	lsrs	r3, r3, #18
 80033bc:	3b01      	subs	r3, #1
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_InitTick+0xe8>)
 80033c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80033c8:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <HAL_InitTick+0xe8>)
 80033ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033ce:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80033d0:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <HAL_InitTick+0xe8>)
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80033d6:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <HAL_InitTick+0xe8>)
 80033d8:	2200      	movs	r2, #0
 80033da:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033dc:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <HAL_InitTick+0xe8>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e2:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_InitTick+0xe8>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80033e8:	4817      	ldr	r0, [pc, #92]	; (8003448 <HAL_InitTick+0xe8>)
 80033ea:	f002 fd67 	bl	8005ebc <HAL_TIM_Base_Init>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80033f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d11b      	bne.n	8003434 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80033fc:	4812      	ldr	r0, [pc, #72]	; (8003448 <HAL_InitTick+0xe8>)
 80033fe:	f002 fdbf 	bl	8005f80 <HAL_TIM_Base_Start_IT>
 8003402:	4603      	mov	r3, r0
 8003404:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003408:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800340c:	2b00      	cmp	r3, #0
 800340e:	d111      	bne.n	8003434 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003410:	201c      	movs	r0, #28
 8003412:	f000 faa5 	bl	8003960 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b0f      	cmp	r3, #15
 800341a:	d808      	bhi.n	800342e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800341c:	2200      	movs	r2, #0
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	201c      	movs	r0, #28
 8003422:	f000 fa81 	bl	8003928 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <HAL_InitTick+0xec>)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	e002      	b.n	8003434 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003434:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003438:	4618      	mov	r0, r3
 800343a:	3738      	adds	r7, #56	; 0x38
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40021000 	.word	0x40021000
 8003444:	431bde83 	.word	0x431bde83
 8003448:	20003480 	.word	0x20003480
 800344c:	20000078 	.word	0x20000078

08003450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003454:	e7fe      	b.n	8003454 <NMI_Handler+0x4>

08003456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003456:	b480      	push	{r7}
 8003458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800345a:	e7fe      	b.n	800345a <HardFault_Handler+0x4>

0800345c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003460:	e7fe      	b.n	8003460 <MemManage_Handler+0x4>

08003462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003462:	b480      	push	{r7}
 8003464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003466:	e7fe      	b.n	8003466 <BusFault_Handler+0x4>

08003468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800346c:	e7fe      	b.n	800346c <UsageFault_Handler+0x4>

0800346e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800346e:	b480      	push	{r7}
 8003470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800348a:	b480      	push	{r7}
 800348c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1>0) Timer1--;
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <SysTick_Handler+0x34>)
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <SysTick_Handler+0x18>
 80034a4:	4b09      	ldr	r3, [pc, #36]	; (80034cc <SysTick_Handler+0x34>)
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	4b07      	ldr	r3, [pc, #28]	; (80034cc <SysTick_Handler+0x34>)
 80034ae:	801a      	strh	r2, [r3, #0]
		if(Timer2>0) Timer2--;
 80034b0:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <SysTick_Handler+0x38>)
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <SysTick_Handler+0x2c>
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <SysTick_Handler+0x38>)
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <SysTick_Handler+0x38>)
 80034c2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
		HAL_SYSTICK_IRQHandler();
 80034c4:	f000 fa5a 	bl	800397c <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80034c8:	bf00      	nop
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000278 	.word	0x20000278
 80034d0:	2000027a 	.word	0x2000027a

080034d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <TIM2_IRQHandler+0x10>)
 80034da:	f002 fda5 	bl	8006028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20003480 	.word	0x20003480

080034e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034ec:	4802      	ldr	r0, [pc, #8]	; (80034f8 <USART1_IRQHandler+0x10>)
 80034ee:	f002 ffe1 	bl	80064b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200003ac 	.word	0x200003ac

080034fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return 1;
 8003500:	2301      	movs	r3, #1
}
 8003502:	4618      	mov	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <_kill>:

int _kill(int pid, int sig)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003516:	f008 f963 	bl	800b7e0 <__errno>
 800351a:	4603      	mov	r3, r0
 800351c:	2216      	movs	r2, #22
 800351e:	601a      	str	r2, [r3, #0]
  return -1;
 8003520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_exit>:

void _exit (int status)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003534:	f04f 31ff 	mov.w	r1, #4294967295
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff ffe7 	bl	800350c <_kill>
  while (1) {}    /* Make sure we hang here */
 800353e:	e7fe      	b.n	800353e <_exit+0x12>

08003540 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	e00a      	b.n	8003568 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003552:	f3af 8000 	nop.w
 8003556:	4601      	mov	r1, r0
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	60ba      	str	r2, [r7, #8]
 800355e:	b2ca      	uxtb	r2, r1
 8003560:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	3301      	adds	r3, #1
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	429a      	cmp	r2, r3
 800356e:	dbf0      	blt.n	8003552 <_read+0x12>
  }

  return len;
 8003570:	687b      	ldr	r3, [r7, #4]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b086      	sub	sp, #24
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	e009      	b.n	80035a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	60ba      	str	r2, [r7, #8]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	3301      	adds	r3, #1
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	dbf1      	blt.n	800358c <_write+0x12>
  }
  return len;
 80035a8:	687b      	ldr	r3, [r7, #4]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <_close>:

int _close(int file)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035da:	605a      	str	r2, [r3, #4]
  return 0;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <_isatty>:

int _isatty(int file)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035f2:	2301      	movs	r3, #1
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003624:	4a14      	ldr	r2, [pc, #80]	; (8003678 <_sbrk+0x5c>)
 8003626:	4b15      	ldr	r3, [pc, #84]	; (800367c <_sbrk+0x60>)
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003630:	4b13      	ldr	r3, [pc, #76]	; (8003680 <_sbrk+0x64>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d102      	bne.n	800363e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <_sbrk+0x64>)
 800363a:	4a12      	ldr	r2, [pc, #72]	; (8003684 <_sbrk+0x68>)
 800363c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <_sbrk+0x64>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4413      	add	r3, r2
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	429a      	cmp	r2, r3
 800364a:	d207      	bcs.n	800365c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800364c:	f008 f8c8 	bl	800b7e0 <__errno>
 8003650:	4603      	mov	r3, r0
 8003652:	220c      	movs	r2, #12
 8003654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003656:	f04f 33ff 	mov.w	r3, #4294967295
 800365a:	e009      	b.n	8003670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <_sbrk+0x64>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003662:	4b07      	ldr	r3, [pc, #28]	; (8003680 <_sbrk+0x64>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	4a05      	ldr	r2, [pc, #20]	; (8003680 <_sbrk+0x64>)
 800366c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800366e:	68fb      	ldr	r3, [r7, #12]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20010000 	.word	0x20010000
 800367c:	00000400 	.word	0x00000400
 8003680:	200034cc 	.word	0x200034cc
 8003684:	20003860 	.word	0x20003860

08003688 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <SystemInit+0x20>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	4a05      	ldr	r2, [pc, #20]	; (80036a8 <SystemInit+0x20>)
 8003694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800369c:	bf00      	nop
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80036ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036b0:	f7ff ffea 	bl	8003688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036b4:	480c      	ldr	r0, [pc, #48]	; (80036e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80036b6:	490d      	ldr	r1, [pc, #52]	; (80036ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80036b8:	4a0d      	ldr	r2, [pc, #52]	; (80036f0 <LoopForever+0xe>)
  movs r3, #0
 80036ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036bc:	e002      	b.n	80036c4 <LoopCopyDataInit>

080036be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036c2:	3304      	adds	r3, #4

080036c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036c8:	d3f9      	bcc.n	80036be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036cc:	4c0a      	ldr	r4, [pc, #40]	; (80036f8 <LoopForever+0x16>)
  movs r3, #0
 80036ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d0:	e001      	b.n	80036d6 <LoopFillZerobss>

080036d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036d4:	3204      	adds	r2, #4

080036d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036d8:	d3fb      	bcc.n	80036d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036da:	f008 f887 	bl	800b7ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036de:	f7ff f9e7 	bl	8002ab0 <main>

080036e2 <LoopForever>:

LoopForever:
    b LoopForever
 80036e2:	e7fe      	b.n	80036e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80036e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80036e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036ec:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 80036f0:	0800e764 	.word	0x0800e764
  ldr r2, =_sbss
 80036f4:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 80036f8:	2000385c 	.word	0x2000385c

080036fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036fc:	e7fe      	b.n	80036fc <ADC1_IRQHandler>

080036fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003708:	2003      	movs	r0, #3
 800370a:	f000 f902 	bl	8003912 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800370e:	2007      	movs	r0, #7
 8003710:	f7ff fe26 	bl	8003360 <HAL_InitTick>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	71fb      	strb	r3, [r7, #7]
 800371e:	e001      	b.n	8003724 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003720:	f7ff fcf4 	bl	800310c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003724:	79fb      	ldrb	r3, [r7, #7]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_IncTick+0x20>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_IncTick+0x24>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4413      	add	r3, r2
 8003740:	4a04      	ldr	r2, [pc, #16]	; (8003754 <HAL_IncTick+0x24>)
 8003742:	6013      	str	r3, [r2, #0]
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	2000007c 	.word	0x2000007c
 8003754:	200034d0 	.word	0x200034d0

08003758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return uwTick;
 800375c:	4b03      	ldr	r3, [pc, #12]	; (800376c <HAL_GetTick+0x14>)
 800375e:	681b      	ldr	r3, [r3, #0]
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	200034d0 	.word	0x200034d0

08003770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003778:	f7ff ffee 	bl	8003758 <HAL_GetTick>
 800377c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d005      	beq.n	8003796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800378a:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <HAL_Delay+0x44>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003796:	bf00      	nop
 8003798:	f7ff ffde 	bl	8003758 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d8f7      	bhi.n	8003798 <HAL_Delay+0x28>
  {
  }
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	2000007c 	.word	0x2000007c

080037b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037d4:	4013      	ands	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ea:	4a04      	ldr	r2, [pc, #16]	; (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	60d3      	str	r3, [r2, #12]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <__NVIC_GetPriorityGrouping+0x18>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	f003 0307 	and.w	r3, r3, #7
}
 800380e:	4618      	mov	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	2b00      	cmp	r3, #0
 800382c:	db0b      	blt.n	8003846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	f003 021f 	and.w	r2, r3, #31
 8003834:	4907      	ldr	r1, [pc, #28]	; (8003854 <__NVIC_EnableIRQ+0x38>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2001      	movs	r0, #1
 800383e:	fa00 f202 	lsl.w	r2, r0, r2
 8003842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000e100 	.word	0xe000e100

08003858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003868:	2b00      	cmp	r3, #0
 800386a:	db0a      	blt.n	8003882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	490c      	ldr	r1, [pc, #48]	; (80038a4 <__NVIC_SetPriority+0x4c>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	0112      	lsls	r2, r2, #4
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	440b      	add	r3, r1
 800387c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003880:	e00a      	b.n	8003898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4908      	ldr	r1, [pc, #32]	; (80038a8 <__NVIC_SetPriority+0x50>)
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	3b04      	subs	r3, #4
 8003890:	0112      	lsls	r2, r2, #4
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	440b      	add	r3, r1
 8003896:	761a      	strb	r2, [r3, #24]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000e100 	.word	0xe000e100
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	; 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f1c3 0307 	rsb	r3, r3, #7
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	bf28      	it	cs
 80038ca:	2304      	movcs	r3, #4
 80038cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3304      	adds	r3, #4
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d902      	bls.n	80038dc <NVIC_EncodePriority+0x30>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3b03      	subs	r3, #3
 80038da:	e000      	b.n	80038de <NVIC_EncodePriority+0x32>
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	f04f 32ff 	mov.w	r2, #4294967295
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	401a      	ands	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f4:	f04f 31ff 	mov.w	r1, #4294967295
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	43d9      	mvns	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003904:	4313      	orrs	r3, r2
         );
}
 8003906:	4618      	mov	r0, r3
 8003908:	3724      	adds	r7, #36	; 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ff4c 	bl	80037b8 <__NVIC_SetPriorityGrouping>
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800393a:	f7ff ff61 	bl	8003800 <__NVIC_GetPriorityGrouping>
 800393e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	6978      	ldr	r0, [r7, #20]
 8003946:	f7ff ffb1 	bl	80038ac <NVIC_EncodePriority>
 800394a:	4602      	mov	r2, r0
 800394c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003950:	4611      	mov	r1, r2
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ff80 	bl	8003858 <__NVIC_SetPriority>
}
 8003958:	bf00      	nop
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff ff54 	bl	800381c <__NVIC_EnableIRQ>
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003980:	f000 f802 	bl	8003988 <HAL_SYSTICK_Callback>
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d008      	beq.n	80039c0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2204      	movs	r2, #4
 80039b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e022      	b.n	8003a06 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 020e 	bic.w	r2, r2, #14
 80039ce:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0201 	bic.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	f003 021c 	and.w	r2, r3, #28
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	2101      	movs	r1, #1
 80039ee:	fa01 f202 	lsl.w	r2, r1, r2
 80039f2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d005      	beq.n	8003a36 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
 8003a34:	e029      	b.n	8003a8a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 020e 	bic.w	r2, r2, #14
 8003a44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f003 021c 	and.w	r2, r3, #28
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	2101      	movs	r1, #1
 8003a64:	fa01 f202 	lsl.w	r2, r1, r2
 8003a68:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	4798      	blx	r3
    }
  }
  return status;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aa2:	e148      	b.n	8003d36 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 813a 	beq.w	8003d30 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d005      	beq.n	8003ad4 <HAL_GPIO_Init+0x40>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d130      	bne.n	8003b36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	2203      	movs	r2, #3
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	091b      	lsrs	r3, r3, #4
 8003b20:	f003 0201 	and.w	r2, r3, #1
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d017      	beq.n	8003b72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4013      	ands	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d123      	bne.n	8003bc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	08da      	lsrs	r2, r3, #3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3208      	adds	r2, #8
 8003b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	220f      	movs	r2, #15
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	08da      	lsrs	r2, r3, #3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3208      	adds	r2, #8
 8003bc0:	6939      	ldr	r1, [r7, #16]
 8003bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 0203 	and.w	r2, r3, #3
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8094 	beq.w	8003d30 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c08:	4b52      	ldr	r3, [pc, #328]	; (8003d54 <HAL_GPIO_Init+0x2c0>)
 8003c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c0c:	4a51      	ldr	r2, [pc, #324]	; (8003d54 <HAL_GPIO_Init+0x2c0>)
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	6613      	str	r3, [r2, #96]	; 0x60
 8003c14:	4b4f      	ldr	r3, [pc, #316]	; (8003d54 <HAL_GPIO_Init+0x2c0>)
 8003c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c20:	4a4d      	ldr	r2, [pc, #308]	; (8003d58 <HAL_GPIO_Init+0x2c4>)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	089b      	lsrs	r3, r3, #2
 8003c26:	3302      	adds	r3, #2
 8003c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	220f      	movs	r2, #15
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4013      	ands	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c4a:	d00d      	beq.n	8003c68 <HAL_GPIO_Init+0x1d4>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a43      	ldr	r2, [pc, #268]	; (8003d5c <HAL_GPIO_Init+0x2c8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d007      	beq.n	8003c64 <HAL_GPIO_Init+0x1d0>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a42      	ldr	r2, [pc, #264]	; (8003d60 <HAL_GPIO_Init+0x2cc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_GPIO_Init+0x1cc>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e004      	b.n	8003c6a <HAL_GPIO_Init+0x1d6>
 8003c60:	2307      	movs	r3, #7
 8003c62:	e002      	b.n	8003c6a <HAL_GPIO_Init+0x1d6>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <HAL_GPIO_Init+0x1d6>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	f002 0203 	and.w	r2, r2, #3
 8003c70:	0092      	lsls	r2, r2, #2
 8003c72:	4093      	lsls	r3, r2
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c7a:	4937      	ldr	r1, [pc, #220]	; (8003d58 <HAL_GPIO_Init+0x2c4>)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	3302      	adds	r3, #2
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c88:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <HAL_GPIO_Init+0x2d0>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4013      	ands	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cac:	4a2d      	ldr	r2, [pc, #180]	; (8003d64 <HAL_GPIO_Init+0x2d0>)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cb2:	4b2c      	ldr	r3, [pc, #176]	; (8003d64 <HAL_GPIO_Init+0x2d0>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cd6:	4a23      	ldr	r2, [pc, #140]	; (8003d64 <HAL_GPIO_Init+0x2d0>)
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cdc:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <HAL_GPIO_Init+0x2d0>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d00:	4a18      	ldr	r2, [pc, #96]	; (8003d64 <HAL_GPIO_Init+0x2d0>)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d06:	4b17      	ldr	r3, [pc, #92]	; (8003d64 <HAL_GPIO_Init+0x2d0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4013      	ands	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d2a:	4a0e      	ldr	r2, [pc, #56]	; (8003d64 <HAL_GPIO_Init+0x2d0>)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	3301      	adds	r3, #1
 8003d34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f47f aeaf 	bne.w	8003aa4 <HAL_GPIO_Init+0x10>
  }
}
 8003d46:	bf00      	nop
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40010000 	.word	0x40010000
 8003d5c:	48000400 	.word	0x48000400
 8003d60:	48000800 	.word	0x48000800
 8003d64:	40010400 	.word	0x40010400

08003d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	807b      	strh	r3, [r7, #2]
 8003d74:	4613      	mov	r3, r2
 8003d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d78:	787b      	ldrb	r3, [r7, #1]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d7e:	887a      	ldrh	r2, [r7, #2]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d84:	e002      	b.n	8003d8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d86:	887a      	ldrh	r2, [r7, #2]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a04      	ldr	r2, [pc, #16]	; (8003db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da6:	6013      	str	r3, [r2, #0]
}
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40007000 	.word	0x40007000

08003db8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40007000 	.word	0x40007000

08003dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de2:	d130      	bne.n	8003e46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003de4:	4b23      	ldr	r3, [pc, #140]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df0:	d038      	beq.n	8003e64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003df2:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e02:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2232      	movs	r2, #50	; 0x32
 8003e08:	fb02 f303 	mul.w	r3, r2, r3
 8003e0c:	4a1b      	ldr	r2, [pc, #108]	; (8003e7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	0c9b      	lsrs	r3, r3, #18
 8003e14:	3301      	adds	r3, #1
 8003e16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e18:	e002      	b.n	8003e20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e20:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2c:	d102      	bne.n	8003e34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f2      	bne.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e34:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e40:	d110      	bne.n	8003e64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e00f      	b.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e52:	d007      	beq.n	8003e64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e54:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e5c:	4a05      	ldr	r2, [pc, #20]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40007000 	.word	0x40007000
 8003e78:	20000074 	.word	0x20000074
 8003e7c:	431bde83 	.word	0x431bde83

08003e80 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d102      	bne.n	8003e94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f000 bc02 	b.w	8004698 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e94:	4b96      	ldr	r3, [pc, #600]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e9e:	4b94      	ldr	r3, [pc, #592]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80e4 	beq.w	800407e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <HAL_RCC_OscConfig+0x4c>
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	f040 808b 	bne.w	8003fda <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	f040 8087 	bne.w	8003fda <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ecc:	4b88      	ldr	r3, [pc, #544]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x64>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e3d9      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1a      	ldr	r2, [r3, #32]
 8003ee8:	4b81      	ldr	r3, [pc, #516]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d004      	beq.n	8003efe <HAL_RCC_OscConfig+0x7e>
 8003ef4:	4b7e      	ldr	r3, [pc, #504]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003efc:	e005      	b.n	8003f0a <HAL_RCC_OscConfig+0x8a>
 8003efe:	4b7c      	ldr	r3, [pc, #496]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d223      	bcs.n	8003f56 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fdbe 	bl	8004a94 <RCC_SetFlashLatencyFromMSIRange>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e3ba      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f22:	4b73      	ldr	r3, [pc, #460]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a72      	ldr	r2, [pc, #456]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f28:	f043 0308 	orr.w	r3, r3, #8
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	4b70      	ldr	r3, [pc, #448]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	496d      	ldr	r1, [pc, #436]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f40:	4b6b      	ldr	r3, [pc, #428]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	4968      	ldr	r1, [pc, #416]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	604b      	str	r3, [r1, #4]
 8003f54:	e025      	b.n	8003fa2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f56:	4b66      	ldr	r3, [pc, #408]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a65      	ldr	r2, [pc, #404]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f5c:	f043 0308 	orr.w	r3, r3, #8
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b63      	ldr	r3, [pc, #396]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	4960      	ldr	r1, [pc, #384]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f74:	4b5e      	ldr	r3, [pc, #376]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	495b      	ldr	r1, [pc, #364]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fd7e 	bl	8004a94 <RCC_SetFlashLatencyFromMSIRange>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e37a      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fa2:	f000 fc81 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	4b51      	ldr	r3, [pc, #324]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	4950      	ldr	r1, [pc, #320]	; (80040f4 <HAL_RCC_OscConfig+0x274>)
 8003fb4:	5ccb      	ldrb	r3, [r1, r3]
 8003fb6:	f003 031f 	and.w	r3, r3, #31
 8003fba:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbe:	4a4e      	ldr	r2, [pc, #312]	; (80040f8 <HAL_RCC_OscConfig+0x278>)
 8003fc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fc2:	4b4e      	ldr	r3, [pc, #312]	; (80040fc <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff f9ca 	bl	8003360 <HAL_InitTick>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d052      	beq.n	800407c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	e35e      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d032      	beq.n	8004048 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fe2:	4b43      	ldr	r3, [pc, #268]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a42      	ldr	r2, [pc, #264]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fee:	f7ff fbb3 	bl	8003758 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ff6:	f7ff fbaf 	bl	8003758 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e347      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004008:	4b39      	ldr	r3, [pc, #228]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004014:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a35      	ldr	r2, [pc, #212]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 800401a:	f043 0308 	orr.w	r3, r3, #8
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	4b33      	ldr	r3, [pc, #204]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	4930      	ldr	r1, [pc, #192]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004032:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	492b      	ldr	r1, [pc, #172]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]
 8004046:	e01a      	b.n	800407e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004048:	4b29      	ldr	r3, [pc, #164]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a28      	ldr	r2, [pc, #160]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004054:	f7ff fb80 	bl	8003758 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800405c:	f7ff fb7c 	bl	8003758 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e314      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800406e:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x1dc>
 800407a:	e000      	b.n	800407e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800407c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d073      	beq.n	8004172 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d005      	beq.n	800409c <HAL_RCC_OscConfig+0x21c>
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b0c      	cmp	r3, #12
 8004094:	d10e      	bne.n	80040b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d10b      	bne.n	80040b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d063      	beq.n	8004170 <HAL_RCC_OscConfig+0x2f0>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d15f      	bne.n	8004170 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e2f1      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040bc:	d106      	bne.n	80040cc <HAL_RCC_OscConfig+0x24c>
 80040be:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a0b      	ldr	r2, [pc, #44]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e025      	b.n	8004118 <HAL_RCC_OscConfig+0x298>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d4:	d114      	bne.n	8004100 <HAL_RCC_OscConfig+0x280>
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a05      	ldr	r2, [pc, #20]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 80040dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a02      	ldr	r2, [pc, #8]	; (80040f0 <HAL_RCC_OscConfig+0x270>)
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e013      	b.n	8004118 <HAL_RCC_OscConfig+0x298>
 80040f0:	40021000 	.word	0x40021000
 80040f4:	0800df38 	.word	0x0800df38
 80040f8:	20000074 	.word	0x20000074
 80040fc:	20000078 	.word	0x20000078
 8004100:	4ba0      	ldr	r3, [pc, #640]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a9f      	ldr	r2, [pc, #636]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	4b9d      	ldr	r3, [pc, #628]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a9c      	ldr	r2, [pc, #624]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d013      	beq.n	8004148 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7ff fb1a 	bl	8003758 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004128:	f7ff fb16 	bl	8003758 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	; 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e2ae      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800413a:	4b92      	ldr	r3, [pc, #584]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x2a8>
 8004146:	e014      	b.n	8004172 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004148:	f7ff fb06 	bl	8003758 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004150:	f7ff fb02 	bl	8003758 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e29a      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004162:	4b88      	ldr	r3, [pc, #544]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f0      	bne.n	8004150 <HAL_RCC_OscConfig+0x2d0>
 800416e:	e000      	b.n	8004172 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d060      	beq.n	8004240 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	2b04      	cmp	r3, #4
 8004182:	d005      	beq.n	8004190 <HAL_RCC_OscConfig+0x310>
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b0c      	cmp	r3, #12
 8004188:	d119      	bne.n	80041be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d116      	bne.n	80041be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004190:	4b7c      	ldr	r3, [pc, #496]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_OscConfig+0x328>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e277      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a8:	4b76      	ldr	r3, [pc, #472]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	4973      	ldr	r1, [pc, #460]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041bc:	e040      	b.n	8004240 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d023      	beq.n	800420e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041c6:	4b6f      	ldr	r3, [pc, #444]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a6e      	ldr	r2, [pc, #440]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 80041cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7ff fac1 	bl	8003758 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041da:	f7ff fabd 	bl	8003758 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e255      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ec:	4b65      	ldr	r3, [pc, #404]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f8:	4b62      	ldr	r3, [pc, #392]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	495f      	ldr	r1, [pc, #380]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004208:	4313      	orrs	r3, r2
 800420a:	604b      	str	r3, [r1, #4]
 800420c:	e018      	b.n	8004240 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800420e:	4b5d      	ldr	r3, [pc, #372]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a5c      	ldr	r2, [pc, #368]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421a:	f7ff fa9d 	bl	8003758 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004222:	f7ff fa99 	bl	8003758 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e231      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004234:	4b53      	ldr	r3, [pc, #332]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f0      	bne.n	8004222 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d03c      	beq.n	80042c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01c      	beq.n	800428e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004254:	4b4b      	ldr	r3, [pc, #300]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425a:	4a4a      	ldr	r2, [pc, #296]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004264:	f7ff fa78 	bl	8003758 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800426c:	f7ff fa74 	bl	8003758 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e20c      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800427e:	4b41      	ldr	r3, [pc, #260]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0ef      	beq.n	800426c <HAL_RCC_OscConfig+0x3ec>
 800428c:	e01b      	b.n	80042c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800428e:	4b3d      	ldr	r3, [pc, #244]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004294:	4a3b      	ldr	r2, [pc, #236]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429e:	f7ff fa5b 	bl	8003758 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a6:	f7ff fa57 	bl	8003758 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e1ef      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b8:	4b32      	ldr	r3, [pc, #200]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 80042ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1ef      	bne.n	80042a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80a6 	beq.w	8004420 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d4:	2300      	movs	r3, #0
 80042d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042d8:	4b2a      	ldr	r3, [pc, #168]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 80042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10d      	bne.n	8004300 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e4:	4b27      	ldr	r3, [pc, #156]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e8:	4a26      	ldr	r2, [pc, #152]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6593      	str	r3, [r2, #88]	; 0x58
 80042f0:	4b24      	ldr	r3, [pc, #144]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fc:	2301      	movs	r3, #1
 80042fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004300:	4b21      	ldr	r3, [pc, #132]	; (8004388 <HAL_RCC_OscConfig+0x508>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d118      	bne.n	800433e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800430c:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <HAL_RCC_OscConfig+0x508>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1d      	ldr	r2, [pc, #116]	; (8004388 <HAL_RCC_OscConfig+0x508>)
 8004312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004316:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004318:	f7ff fa1e 	bl	8003758 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004320:	f7ff fa1a 	bl	8003758 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e1b2      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <HAL_RCC_OscConfig+0x508>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0f0      	beq.n	8004320 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d108      	bne.n	8004358 <HAL_RCC_OscConfig+0x4d8>
 8004346:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434c:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004356:	e029      	b.n	80043ac <HAL_RCC_OscConfig+0x52c>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b05      	cmp	r3, #5
 800435e:	d115      	bne.n	800438c <HAL_RCC_OscConfig+0x50c>
 8004360:	4b08      	ldr	r3, [pc, #32]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	4a07      	ldr	r2, [pc, #28]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004368:	f043 0304 	orr.w	r3, r3, #4
 800436c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	4a03      	ldr	r2, [pc, #12]	; (8004384 <HAL_RCC_OscConfig+0x504>)
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004380:	e014      	b.n	80043ac <HAL_RCC_OscConfig+0x52c>
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
 8004388:	40007000 	.word	0x40007000
 800438c:	4b9a      	ldr	r3, [pc, #616]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	4a99      	ldr	r2, [pc, #612]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800439c:	4b96      	ldr	r3, [pc, #600]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	4a95      	ldr	r2, [pc, #596]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 80043a4:	f023 0304 	bic.w	r3, r3, #4
 80043a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d016      	beq.n	80043e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b4:	f7ff f9d0 	bl	8003758 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ba:	e00a      	b.n	80043d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043bc:	f7ff f9cc 	bl	8003758 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e162      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d2:	4b89      	ldr	r3, [pc, #548]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0ed      	beq.n	80043bc <HAL_RCC_OscConfig+0x53c>
 80043e0:	e015      	b.n	800440e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e2:	f7ff f9b9 	bl	8003758 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043e8:	e00a      	b.n	8004400 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ea:	f7ff f9b5 	bl	8003758 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e14b      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004400:	4b7d      	ldr	r3, [pc, #500]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1ed      	bne.n	80043ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800440e:	7ffb      	ldrb	r3, [r7, #31]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d105      	bne.n	8004420 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004414:	4b78      	ldr	r3, [pc, #480]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 8004416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004418:	4a77      	ldr	r2, [pc, #476]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 800441a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d03c      	beq.n	80044a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01c      	beq.n	800446e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004434:	4b70      	ldr	r3, [pc, #448]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 8004436:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800443a:	4a6f      	ldr	r2, [pc, #444]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7ff f988 	bl	8003758 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800444c:	f7ff f984 	bl	8003758 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e11c      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800445e:	4b66      	ldr	r3, [pc, #408]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 8004460:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0ef      	beq.n	800444c <HAL_RCC_OscConfig+0x5cc>
 800446c:	e01b      	b.n	80044a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800446e:	4b62      	ldr	r3, [pc, #392]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 8004470:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004474:	4a60      	ldr	r2, [pc, #384]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447e:	f7ff f96b 	bl	8003758 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004486:	f7ff f967 	bl	8003758 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e0ff      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004498:	4b57      	ldr	r3, [pc, #348]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 800449a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1ef      	bne.n	8004486 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80f3 	beq.w	8004696 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	f040 80c9 	bne.w	800464c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044ba:	4b4f      	ldr	r3, [pc, #316]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 0203 	and.w	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d12c      	bne.n	8004528 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	3b01      	subs	r3, #1
 80044da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044dc:	429a      	cmp	r2, r3
 80044de:	d123      	bne.n	8004528 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d11b      	bne.n	8004528 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d113      	bne.n	8004528 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450a:	085b      	lsrs	r3, r3, #1
 800450c:	3b01      	subs	r3, #1
 800450e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d109      	bne.n	8004528 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	3b01      	subs	r3, #1
 8004522:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004524:	429a      	cmp	r2, r3
 8004526:	d06b      	beq.n	8004600 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2b0c      	cmp	r3, #12
 800452c:	d062      	beq.n	80045f4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800452e:	4b32      	ldr	r3, [pc, #200]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e0ac      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800453e:	4b2e      	ldr	r3, [pc, #184]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a2d      	ldr	r2, [pc, #180]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 8004544:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004548:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800454a:	f7ff f905 	bl	8003758 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004552:	f7ff f901 	bl	8003758 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e099      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004564:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1f0      	bne.n	8004552 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004570:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	4b21      	ldr	r3, [pc, #132]	; (80045fc <HAL_RCC_OscConfig+0x77c>)
 8004576:	4013      	ands	r3, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004580:	3a01      	subs	r2, #1
 8004582:	0112      	lsls	r2, r2, #4
 8004584:	4311      	orrs	r1, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800458a:	0212      	lsls	r2, r2, #8
 800458c:	4311      	orrs	r1, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004592:	0852      	lsrs	r2, r2, #1
 8004594:	3a01      	subs	r2, #1
 8004596:	0552      	lsls	r2, r2, #21
 8004598:	4311      	orrs	r1, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800459e:	0852      	lsrs	r2, r2, #1
 80045a0:	3a01      	subs	r2, #1
 80045a2:	0652      	lsls	r2, r2, #25
 80045a4:	4311      	orrs	r1, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045aa:	06d2      	lsls	r2, r2, #27
 80045ac:	430a      	orrs	r2, r1
 80045ae:	4912      	ldr	r1, [pc, #72]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045b4:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a0f      	ldr	r2, [pc, #60]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 80045ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045c0:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4a0c      	ldr	r2, [pc, #48]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 80045c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045cc:	f7ff f8c4 	bl	8003758 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d4:	f7ff f8c0 	bl	8003758 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e058      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e6:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <HAL_RCC_OscConfig+0x778>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045f2:	e050      	b.n	8004696 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e04f      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
 80045f8:	40021000 	.word	0x40021000
 80045fc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004600:	4b27      	ldr	r3, [pc, #156]	; (80046a0 <HAL_RCC_OscConfig+0x820>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d144      	bne.n	8004696 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800460c:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <HAL_RCC_OscConfig+0x820>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a23      	ldr	r2, [pc, #140]	; (80046a0 <HAL_RCC_OscConfig+0x820>)
 8004612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004616:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004618:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <HAL_RCC_OscConfig+0x820>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a20      	ldr	r2, [pc, #128]	; (80046a0 <HAL_RCC_OscConfig+0x820>)
 800461e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004622:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004624:	f7ff f898 	bl	8003758 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800462c:	f7ff f894 	bl	8003758 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e02c      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800463e:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <HAL_RCC_OscConfig+0x820>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x7ac>
 800464a:	e024      	b.n	8004696 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d01f      	beq.n	8004692 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004652:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <HAL_RCC_OscConfig+0x820>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a12      	ldr	r2, [pc, #72]	; (80046a0 <HAL_RCC_OscConfig+0x820>)
 8004658:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800465c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465e:	f7ff f87b 	bl	8003758 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004666:	f7ff f877 	bl	8003758 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e00f      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004678:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <HAL_RCC_OscConfig+0x820>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1f0      	bne.n	8004666 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004684:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <HAL_RCC_OscConfig+0x820>)
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	4905      	ldr	r1, [pc, #20]	; (80046a0 <HAL_RCC_OscConfig+0x820>)
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <HAL_RCC_OscConfig+0x824>)
 800468c:	4013      	ands	r3, r2
 800468e:	60cb      	str	r3, [r1, #12]
 8004690:	e001      	b.n	8004696 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021000 	.word	0x40021000
 80046a4:	feeefffc 	.word	0xfeeefffc

080046a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e0e7      	b.n	800488c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046bc:	4b75      	ldr	r3, [pc, #468]	; (8004894 <HAL_RCC_ClockConfig+0x1ec>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d910      	bls.n	80046ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ca:	4b72      	ldr	r3, [pc, #456]	; (8004894 <HAL_RCC_ClockConfig+0x1ec>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f023 0207 	bic.w	r2, r3, #7
 80046d2:	4970      	ldr	r1, [pc, #448]	; (8004894 <HAL_RCC_ClockConfig+0x1ec>)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046da:	4b6e      	ldr	r3, [pc, #440]	; (8004894 <HAL_RCC_ClockConfig+0x1ec>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d001      	beq.n	80046ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0cf      	b.n	800488c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d010      	beq.n	800471a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	4b66      	ldr	r3, [pc, #408]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004704:	429a      	cmp	r2, r3
 8004706:	d908      	bls.n	800471a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004708:	4b63      	ldr	r3, [pc, #396]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4960      	ldr	r1, [pc, #384]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d04c      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b03      	cmp	r3, #3
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800472e:	4b5a      	ldr	r3, [pc, #360]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d121      	bne.n	800477e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e0a6      	b.n	800488c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004746:	4b54      	ldr	r3, [pc, #336]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d115      	bne.n	800477e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e09a      	b.n	800488c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d107      	bne.n	800476e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800475e:	4b4e      	ldr	r3, [pc, #312]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e08e      	b.n	800488c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800476e:	4b4a      	ldr	r3, [pc, #296]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e086      	b.n	800488c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800477e:	4b46      	ldr	r3, [pc, #280]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f023 0203 	bic.w	r2, r3, #3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	4943      	ldr	r1, [pc, #268]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 800478c:	4313      	orrs	r3, r2
 800478e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004790:	f7fe ffe2 	bl	8003758 <HAL_GetTick>
 8004794:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	e00a      	b.n	80047ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004798:	f7fe ffde 	bl	8003758 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e06e      	b.n	800488c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ae:	4b3a      	ldr	r3, [pc, #232]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 020c 	and.w	r2, r3, #12
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	429a      	cmp	r2, r3
 80047be:	d1eb      	bne.n	8004798 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d010      	beq.n	80047ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	4b31      	ldr	r3, [pc, #196]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047d8:	429a      	cmp	r2, r3
 80047da:	d208      	bcs.n	80047ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047dc:	4b2e      	ldr	r3, [pc, #184]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	492b      	ldr	r1, [pc, #172]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047ee:	4b29      	ldr	r3, [pc, #164]	; (8004894 <HAL_RCC_ClockConfig+0x1ec>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d210      	bcs.n	800481e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fc:	4b25      	ldr	r3, [pc, #148]	; (8004894 <HAL_RCC_ClockConfig+0x1ec>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f023 0207 	bic.w	r2, r3, #7
 8004804:	4923      	ldr	r1, [pc, #140]	; (8004894 <HAL_RCC_ClockConfig+0x1ec>)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	4313      	orrs	r3, r2
 800480a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800480c:	4b21      	ldr	r3, [pc, #132]	; (8004894 <HAL_RCC_ClockConfig+0x1ec>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d001      	beq.n	800481e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e036      	b.n	800488c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800482a:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	4918      	ldr	r1, [pc, #96]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 8004838:	4313      	orrs	r3, r2
 800483a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004848:	4b13      	ldr	r3, [pc, #76]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4910      	ldr	r1, [pc, #64]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 8004858:	4313      	orrs	r3, r2
 800485a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800485c:	f000 f824 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <HAL_RCC_ClockConfig+0x1f0>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	091b      	lsrs	r3, r3, #4
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	490b      	ldr	r1, [pc, #44]	; (800489c <HAL_RCC_ClockConfig+0x1f4>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	fa22 f303 	lsr.w	r3, r2, r3
 8004878:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <HAL_RCC_ClockConfig+0x1f8>)
 800487a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800487c:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <HAL_RCC_ClockConfig+0x1fc>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe fd6d 	bl	8003360 <HAL_InitTick>
 8004886:	4603      	mov	r3, r0
 8004888:	72fb      	strb	r3, [r7, #11]

  return status;
 800488a:	7afb      	ldrb	r3, [r7, #11]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40022000 	.word	0x40022000
 8004898:	40021000 	.word	0x40021000
 800489c:	0800df38 	.word	0x0800df38
 80048a0:	20000074 	.word	0x20000074
 80048a4:	20000078 	.word	0x20000078

080048a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	; 0x24
 80048ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	2300      	movs	r3, #0
 80048b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048b6:	4b3e      	ldr	r3, [pc, #248]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048c0:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x34>
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b0c      	cmp	r3, #12
 80048d4:	d121      	bne.n	800491a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d11e      	bne.n	800491a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048dc:	4b34      	ldr	r3, [pc, #208]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048e8:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ee:	0a1b      	lsrs	r3, r3, #8
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	e005      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048f8:	4b2d      	ldr	r3, [pc, #180]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004904:	4a2b      	ldr	r2, [pc, #172]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800490c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10d      	bne.n	8004930 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004918:	e00a      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b04      	cmp	r3, #4
 800491e:	d102      	bne.n	8004926 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004920:	4b25      	ldr	r3, [pc, #148]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	e004      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b08      	cmp	r3, #8
 800492a:	d101      	bne.n	8004930 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800492c:	4b23      	ldr	r3, [pc, #140]	; (80049bc <HAL_RCC_GetSysClockFreq+0x114>)
 800492e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b0c      	cmp	r3, #12
 8004934:	d134      	bne.n	80049a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004936:	4b1e      	ldr	r3, [pc, #120]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d003      	beq.n	800494e <HAL_RCC_GetSysClockFreq+0xa6>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b03      	cmp	r3, #3
 800494a:	d003      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0xac>
 800494c:	e005      	b.n	800495a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800494e:	4b1a      	ldr	r3, [pc, #104]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004950:	617b      	str	r3, [r7, #20]
      break;
 8004952:	e005      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004954:	4b19      	ldr	r3, [pc, #100]	; (80049bc <HAL_RCC_GetSysClockFreq+0x114>)
 8004956:	617b      	str	r3, [r7, #20]
      break;
 8004958:	e002      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	617b      	str	r3, [r7, #20]
      break;
 800495e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004960:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	091b      	lsrs	r3, r3, #4
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	3301      	adds	r3, #1
 800496c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	0a1b      	lsrs	r3, r3, #8
 8004974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	fb03 f202 	mul.w	r2, r3, r2
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	fbb2 f3f3 	udiv	r3, r2, r3
 8004984:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004986:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	0e5b      	lsrs	r3, r3, #25
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	3301      	adds	r3, #1
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049a0:	69bb      	ldr	r3, [r7, #24]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3724      	adds	r7, #36	; 0x24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40021000 	.word	0x40021000
 80049b4:	0800df50 	.word	0x0800df50
 80049b8:	00f42400 	.word	0x00f42400
 80049bc:	007a1200 	.word	0x007a1200

080049c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c4:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049c6:	681b      	ldr	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20000074 	.word	0x20000074

080049d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049dc:	f7ff fff0 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 80049e0:	4602      	mov	r2, r0
 80049e2:	4b06      	ldr	r3, [pc, #24]	; (80049fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	4904      	ldr	r1, [pc, #16]	; (8004a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ee:	5ccb      	ldrb	r3, [r1, r3]
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40021000 	.word	0x40021000
 8004a00:	0800df48 	.word	0x0800df48

08004a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a08:	f7ff ffda 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	0adb      	lsrs	r3, r3, #11
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	4904      	ldr	r1, [pc, #16]	; (8004a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a1a:	5ccb      	ldrb	r3, [r1, r3]
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	0800df48 	.word	0x0800df48

08004a30 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	220f      	movs	r2, #15
 8004a3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a40:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <HAL_RCC_GetClockConfig+0x5c>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 0203 	and.w	r2, r3, #3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a4c:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <HAL_RCC_GetClockConfig+0x5c>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a58:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <HAL_RCC_GetClockConfig+0x5c>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a64:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <HAL_RCC_GetClockConfig+0x5c>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	08db      	lsrs	r3, r3, #3
 8004a6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a72:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <HAL_RCC_GetClockConfig+0x60>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0207 	and.w	r2, r3, #7
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	601a      	str	r2, [r3, #0]
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	40022000 	.word	0x40022000

08004a94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004aa0:	4b2a      	ldr	r3, [pc, #168]	; (8004b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004aac:	f7ff f984 	bl	8003db8 <HAL_PWREx_GetVoltageRange>
 8004ab0:	6178      	str	r0, [r7, #20]
 8004ab2:	e014      	b.n	8004ade <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ab4:	4b25      	ldr	r3, [pc, #148]	; (8004b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab8:	4a24      	ldr	r2, [pc, #144]	; (8004b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004abe:	6593      	str	r3, [r2, #88]	; 0x58
 8004ac0:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004acc:	f7ff f974 	bl	8003db8 <HAL_PWREx_GetVoltageRange>
 8004ad0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ad2:	4b1e      	ldr	r3, [pc, #120]	; (8004b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	4a1d      	ldr	r2, [pc, #116]	; (8004b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004adc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae4:	d10b      	bne.n	8004afe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b80      	cmp	r3, #128	; 0x80
 8004aea:	d919      	bls.n	8004b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2ba0      	cmp	r3, #160	; 0xa0
 8004af0:	d902      	bls.n	8004af8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004af2:	2302      	movs	r3, #2
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	e013      	b.n	8004b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004af8:	2301      	movs	r3, #1
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	e010      	b.n	8004b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b80      	cmp	r3, #128	; 0x80
 8004b02:	d902      	bls.n	8004b0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b04:	2303      	movs	r3, #3
 8004b06:	613b      	str	r3, [r7, #16]
 8004b08:	e00a      	b.n	8004b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b80      	cmp	r3, #128	; 0x80
 8004b0e:	d102      	bne.n	8004b16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b10:	2302      	movs	r3, #2
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	e004      	b.n	8004b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b70      	cmp	r3, #112	; 0x70
 8004b1a:	d101      	bne.n	8004b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f023 0207 	bic.w	r2, r3, #7
 8004b28:	4909      	ldr	r1, [pc, #36]	; (8004b50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b30:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d001      	beq.n	8004b42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	40022000 	.word	0x40022000

08004b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b60:	2300      	movs	r3, #0
 8004b62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d031      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b78:	d01a      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004b7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b7e:	d814      	bhi.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b88:	d10f      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004b8a:	4b5d      	ldr	r3, [pc, #372]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	4a5c      	ldr	r2, [pc, #368]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b94:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b96:	e00c      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f9de 	bl	8004f60 <RCCEx_PLLSAI1_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ba8:	e003      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	74fb      	strb	r3, [r7, #19]
      break;
 8004bae:	e000      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bb2:	7cfb      	ldrb	r3, [r7, #19]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10b      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bb8:	4b51      	ldr	r3, [pc, #324]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	494e      	ldr	r1, [pc, #312]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bce:	e001      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd0:	7cfb      	ldrb	r3, [r7, #19]
 8004bd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 809e 	beq.w	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004be2:	2300      	movs	r3, #0
 8004be4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004be6:	4b46      	ldr	r3, [pc, #280]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00d      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bfc:	4b40      	ldr	r3, [pc, #256]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	4a3f      	ldr	r2, [pc, #252]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c06:	6593      	str	r3, [r2, #88]	; 0x58
 8004c08:	4b3d      	ldr	r3, [pc, #244]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c14:	2301      	movs	r3, #1
 8004c16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c18:	4b3a      	ldr	r3, [pc, #232]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a39      	ldr	r2, [pc, #228]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c24:	f7fe fd98 	bl	8003758 <HAL_GetTick>
 8004c28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c2a:	e009      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c2c:	f7fe fd94 	bl	8003758 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d902      	bls.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	74fb      	strb	r3, [r7, #19]
        break;
 8004c3e:	e005      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c40:	4b30      	ldr	r3, [pc, #192]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0ef      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004c4c:	7cfb      	ldrb	r3, [r7, #19]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d15a      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c52:	4b2b      	ldr	r3, [pc, #172]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01e      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d019      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c6e:	4b24      	ldr	r3, [pc, #144]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c78:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c7a:	4b21      	ldr	r3, [pc, #132]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c80:	4a1f      	ldr	r2, [pc, #124]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c90:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c9a:	4a19      	ldr	r2, [pc, #100]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d016      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fe fd54 	bl	8003758 <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb2:	e00b      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb4:	f7fe fd50 	bl	8003758 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d902      	bls.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	74fb      	strb	r3, [r7, #19]
            break;
 8004cca:	e006      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0ec      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004cda:	7cfb      	ldrb	r3, [r7, #19]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10b      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cee:	4904      	ldr	r1, [pc, #16]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cf6:	e009      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cf8:	7cfb      	ldrb	r3, [r7, #19]
 8004cfa:	74bb      	strb	r3, [r7, #18]
 8004cfc:	e006      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004cfe:	bf00      	nop
 8004d00:	40021000 	.word	0x40021000
 8004d04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d08:	7cfb      	ldrb	r3, [r7, #19]
 8004d0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d0c:	7c7b      	ldrb	r3, [r7, #17]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d105      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d12:	4b8a      	ldr	r3, [pc, #552]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	4a89      	ldr	r2, [pc, #548]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d2a:	4b84      	ldr	r3, [pc, #528]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f023 0203 	bic.w	r2, r3, #3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	4980      	ldr	r1, [pc, #512]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d4c:	4b7b      	ldr	r3, [pc, #492]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	f023 020c 	bic.w	r2, r3, #12
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	4978      	ldr	r1, [pc, #480]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d6e:	4b73      	ldr	r3, [pc, #460]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	496f      	ldr	r1, [pc, #444]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d90:	4b6a      	ldr	r3, [pc, #424]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d96:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9e:	4967      	ldr	r1, [pc, #412]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004db2:	4b62      	ldr	r3, [pc, #392]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	495e      	ldr	r1, [pc, #376]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dd4:	4b59      	ldr	r3, [pc, #356]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	4956      	ldr	r1, [pc, #344]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004df6:	4b51      	ldr	r3, [pc, #324]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	494d      	ldr	r1, [pc, #308]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d028      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e18:	4b48      	ldr	r3, [pc, #288]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	4945      	ldr	r1, [pc, #276]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e36:	d106      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e38:	4b40      	ldr	r3, [pc, #256]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	4a3f      	ldr	r2, [pc, #252]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e42:	60d3      	str	r3, [r2, #12]
 8004e44:	e011      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e4e:	d10c      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3304      	adds	r3, #4
 8004e54:	2101      	movs	r1, #1
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 f882 	bl	8004f60 <RCCEx_PLLSAI1_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e60:	7cfb      	ldrb	r3, [r7, #19]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004e66:	7cfb      	ldrb	r3, [r7, #19]
 8004e68:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d028      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e76:	4b31      	ldr	r3, [pc, #196]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e84:	492d      	ldr	r1, [pc, #180]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e94:	d106      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e96:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	4a28      	ldr	r2, [pc, #160]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ea0:	60d3      	str	r3, [r2, #12]
 8004ea2:	e011      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 f853 	bl	8004f60 <RCCEx_PLLSAI1_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ebe:	7cfb      	ldrb	r3, [r7, #19]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01c      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ed4:	4b19      	ldr	r3, [pc, #100]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee2:	4916      	ldr	r1, [pc, #88]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ef2:	d10c      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	2102      	movs	r1, #2
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f830 	bl	8004f60 <RCCEx_PLLSAI1_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004f0a:	7cfb      	ldrb	r3, [r7, #19]
 8004f0c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f1a:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f20:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f28:	4904      	ldr	r1, [pc, #16]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f30:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40021000 	.word	0x40021000

08004f40 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a04      	ldr	r2, [pc, #16]	; (8004f5c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004f4a:	f043 0304 	orr.w	r3, r3, #4
 8004f4e:	6013      	str	r3, [r2, #0]
}
 8004f50:	bf00      	nop
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40021000 	.word	0x40021000

08004f60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f6e:	4b74      	ldr	r3, [pc, #464]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d018      	beq.n	8004fac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f7a:	4b71      	ldr	r3, [pc, #452]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f003 0203 	and.w	r2, r3, #3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d10d      	bne.n	8004fa6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
       ||
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d009      	beq.n	8004fa6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f92:	4b6b      	ldr	r3, [pc, #428]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
       ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d047      	beq.n	8005036 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
 8004faa:	e044      	b.n	8005036 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d018      	beq.n	8004fe6 <RCCEx_PLLSAI1_Config+0x86>
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d825      	bhi.n	8005004 <RCCEx_PLLSAI1_Config+0xa4>
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d002      	beq.n	8004fc2 <RCCEx_PLLSAI1_Config+0x62>
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d009      	beq.n	8004fd4 <RCCEx_PLLSAI1_Config+0x74>
 8004fc0:	e020      	b.n	8005004 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fc2:	4b5f      	ldr	r3, [pc, #380]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d11d      	bne.n	800500a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd2:	e01a      	b.n	800500a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fd4:	4b5a      	ldr	r3, [pc, #360]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d116      	bne.n	800500e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe4:	e013      	b.n	800500e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fe6:	4b56      	ldr	r3, [pc, #344]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10f      	bne.n	8005012 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ff2:	4b53      	ldr	r3, [pc, #332]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005002:	e006      	b.n	8005012 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
      break;
 8005008:	e004      	b.n	8005014 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800500a:	bf00      	nop
 800500c:	e002      	b.n	8005014 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005012:	bf00      	nop
    }

    if(status == HAL_OK)
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10d      	bne.n	8005036 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800501a:	4b49      	ldr	r3, [pc, #292]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6819      	ldr	r1, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	3b01      	subs	r3, #1
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	430b      	orrs	r3, r1
 8005030:	4943      	ldr	r1, [pc, #268]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005032:	4313      	orrs	r3, r2
 8005034:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d17c      	bne.n	8005136 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800503c:	4b40      	ldr	r3, [pc, #256]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a3f      	ldr	r2, [pc, #252]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005042:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005046:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005048:	f7fe fb86 	bl	8003758 <HAL_GetTick>
 800504c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800504e:	e009      	b.n	8005064 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005050:	f7fe fb82 	bl	8003758 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d902      	bls.n	8005064 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	73fb      	strb	r3, [r7, #15]
        break;
 8005062:	e005      	b.n	8005070 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005064:	4b36      	ldr	r3, [pc, #216]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1ef      	bne.n	8005050 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d15f      	bne.n	8005136 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d110      	bne.n	800509e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800507c:	4b30      	ldr	r3, [pc, #192]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005084:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6892      	ldr	r2, [r2, #8]
 800508c:	0211      	lsls	r1, r2, #8
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	68d2      	ldr	r2, [r2, #12]
 8005092:	06d2      	lsls	r2, r2, #27
 8005094:	430a      	orrs	r2, r1
 8005096:	492a      	ldr	r1, [pc, #168]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005098:	4313      	orrs	r3, r2
 800509a:	610b      	str	r3, [r1, #16]
 800509c:	e027      	b.n	80050ee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d112      	bne.n	80050ca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050a4:	4b26      	ldr	r3, [pc, #152]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6892      	ldr	r2, [r2, #8]
 80050b4:	0211      	lsls	r1, r2, #8
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6912      	ldr	r2, [r2, #16]
 80050ba:	0852      	lsrs	r2, r2, #1
 80050bc:	3a01      	subs	r2, #1
 80050be:	0552      	lsls	r2, r2, #21
 80050c0:	430a      	orrs	r2, r1
 80050c2:	491f      	ldr	r1, [pc, #124]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	610b      	str	r3, [r1, #16]
 80050c8:	e011      	b.n	80050ee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050ca:	4b1d      	ldr	r3, [pc, #116]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6892      	ldr	r2, [r2, #8]
 80050da:	0211      	lsls	r1, r2, #8
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6952      	ldr	r2, [r2, #20]
 80050e0:	0852      	lsrs	r2, r2, #1
 80050e2:	3a01      	subs	r2, #1
 80050e4:	0652      	lsls	r2, r2, #25
 80050e6:	430a      	orrs	r2, r1
 80050e8:	4915      	ldr	r1, [pc, #84]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a13      	ldr	r2, [pc, #76]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fa:	f7fe fb2d 	bl	8003758 <HAL_GetTick>
 80050fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005100:	e009      	b.n	8005116 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005102:	f7fe fb29 	bl	8003758 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d902      	bls.n	8005116 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	73fb      	strb	r3, [r7, #15]
          break;
 8005114:	e005      	b.n	8005122 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005116:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0ef      	beq.n	8005102 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	4903      	ldr	r1, [pc, #12]	; (8005140 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005132:	4313      	orrs	r3, r2
 8005134:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005136:	7bfb      	ldrb	r3, [r7, #15]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40021000 	.word	0x40021000

08005144 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d079      	beq.n	800524a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fd fff2 	bl	8003154 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f003 0310 	and.w	r3, r3, #16
 8005182:	2b10      	cmp	r3, #16
 8005184:	d058      	beq.n	8005238 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	22ca      	movs	r2, #202	; 0xca
 800518c:	625a      	str	r2, [r3, #36]	; 0x24
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2253      	movs	r2, #83	; 0x53
 8005194:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f880 	bl	800529c <RTC_EnterInitMode>
 800519c:	4603      	mov	r3, r0
 800519e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d127      	bne.n	80051f6 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6812      	ldr	r2, [r2, #0]
 80051b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80051b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b8:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6899      	ldr	r1, [r3, #8]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	68d2      	ldr	r2, [r2, #12]
 80051e0:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6919      	ldr	r1, [r3, #16]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	041a      	lsls	r2, r3, #16
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f884 	bl	8005304 <RTC_ExitInitMode>
 80051fc:	4603      	mov	r3, r0
 80051fe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d113      	bne.n	800522e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0203 	bic.w	r2, r2, #3
 8005214:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	22ff      	movs	r2, #255	; 0xff
 8005234:	625a      	str	r2, [r3, #36]	; 0x24
 8005236:	e001      	b.n	800523c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d103      	bne.n	800524a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800524a:	7bfb      	ldrb	r3, [r7, #15]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a0d      	ldr	r2, [pc, #52]	; (8005298 <HAL_RTC_WaitForSynchro+0x44>)
 8005262:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005264:	f7fe fa78 	bl	8003758 <HAL_GetTick>
 8005268:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800526a:	e009      	b.n	8005280 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800526c:	f7fe fa74 	bl	8003758 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800527a:	d901      	bls.n	8005280 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e007      	b.n	8005290 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0ee      	beq.n	800526c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	0003ff5f 	.word	0x0003ff5f

0800529c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d120      	bne.n	80052f8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f04f 32ff 	mov.w	r2, #4294967295
 80052be:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80052c0:	f7fe fa4a 	bl	8003758 <HAL_GetTick>
 80052c4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80052c6:	e00d      	b.n	80052e4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80052c8:	f7fe fa46 	bl	8003758 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052d6:	d905      	bls.n	80052e4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2203      	movs	r2, #3
 80052e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d102      	bne.n	80052f8 <RTC_EnterInitMode+0x5c>
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d1e7      	bne.n	80052c8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005310:	4b1a      	ldr	r3, [pc, #104]	; (800537c <RTC_ExitInitMode+0x78>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4a19      	ldr	r2, [pc, #100]	; (800537c <RTC_ExitInitMode+0x78>)
 8005316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800531a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800531c:	4b17      	ldr	r3, [pc, #92]	; (800537c <RTC_ExitInitMode+0x78>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10c      	bne.n	8005342 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff ff93 	bl	8005254 <HAL_RTC_WaitForSynchro>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01e      	beq.n	8005372 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2203      	movs	r2, #3
 8005338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	73fb      	strb	r3, [r7, #15]
 8005340:	e017      	b.n	8005372 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005342:	4b0e      	ldr	r3, [pc, #56]	; (800537c <RTC_ExitInitMode+0x78>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	4a0d      	ldr	r2, [pc, #52]	; (800537c <RTC_ExitInitMode+0x78>)
 8005348:	f023 0320 	bic.w	r3, r3, #32
 800534c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff ff80 	bl	8005254 <HAL_RTC_WaitForSynchro>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2203      	movs	r2, #3
 800535e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <RTC_ExitInitMode+0x78>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	4a04      	ldr	r2, [pc, #16]	; (800537c <RTC_ExitInitMode+0x78>)
 800536c:	f043 0320 	orr.w	r3, r3, #32
 8005370:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005372:	7bfb      	ldrb	r3, [r7, #15]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40002800 	.word	0x40002800

08005380 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e095      	b.n	80054be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	2b00      	cmp	r3, #0
 8005398:	d108      	bne.n	80053ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053a2:	d009      	beq.n	80053b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	61da      	str	r2, [r3, #28]
 80053aa:	e005      	b.n	80053b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fd feee 	bl	80031b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053f8:	d902      	bls.n	8005400 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	e002      	b.n	8005406 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005404:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800540e:	d007      	beq.n	8005420 <HAL_SPI_Init+0xa0>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005418:	d002      	beq.n	8005420 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005462:	ea42 0103 	orr.w	r1, r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	0c1b      	lsrs	r3, r3, #16
 800547c:	f003 0204 	and.w	r2, r3, #4
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800549c:	ea42 0103 	orr.w	r1, r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b088      	sub	sp, #32
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	603b      	str	r3, [r7, #0]
 80054d2:	4613      	mov	r3, r2
 80054d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_SPI_Transmit+0x22>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e15f      	b.n	80057a8 <HAL_SPI_Transmit+0x2e2>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054f0:	f7fe f932 	bl	8003758 <HAL_GetTick>
 80054f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b01      	cmp	r3, #1
 8005504:	d002      	beq.n	800550c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005506:	2302      	movs	r3, #2
 8005508:	77fb      	strb	r3, [r7, #31]
    goto error;
 800550a:	e148      	b.n	800579e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <HAL_SPI_Transmit+0x52>
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800551c:	e13f      	b.n	800579e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2203      	movs	r2, #3
 8005522:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	88fa      	ldrh	r2, [r7, #6]
 8005536:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	88fa      	ldrh	r2, [r7, #6]
 800553c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005568:	d10f      	bne.n	800558a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005578:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005588:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005594:	2b40      	cmp	r3, #64	; 0x40
 8005596:	d007      	beq.n	80055a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055b0:	d94f      	bls.n	8005652 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_SPI_Transmit+0xfa>
 80055ba:	8afb      	ldrh	r3, [r7, #22]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d142      	bne.n	8005646 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	881a      	ldrh	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	1c9a      	adds	r2, r3, #2
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055e4:	e02f      	b.n	8005646 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d112      	bne.n	800561a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	881a      	ldrh	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	1c9a      	adds	r2, r3, #2
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005618:	e015      	b.n	8005646 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800561a:	f7fe f89d 	bl	8003758 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d803      	bhi.n	8005632 <HAL_SPI_Transmit+0x16c>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d102      	bne.n	8005638 <HAL_SPI_Transmit+0x172>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d106      	bne.n	8005646 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005644:	e0ab      	b.n	800579e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1ca      	bne.n	80055e6 <HAL_SPI_Transmit+0x120>
 8005650:	e080      	b.n	8005754 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <HAL_SPI_Transmit+0x19a>
 800565a:	8afb      	ldrh	r3, [r7, #22]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d174      	bne.n	800574a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b01      	cmp	r3, #1
 8005668:	d912      	bls.n	8005690 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	881a      	ldrh	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	1c9a      	adds	r2, r3, #2
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005684:	b29b      	uxth	r3, r3
 8005686:	3b02      	subs	r3, #2
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800568e:	e05c      	b.n	800574a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	7812      	ldrb	r2, [r2, #0]
 800569c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80056b6:	e048      	b.n	800574a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d12b      	bne.n	800571e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d912      	bls.n	80056f6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	881a      	ldrh	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	1c9a      	adds	r2, r3, #2
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b02      	subs	r3, #2
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056f4:	e029      	b.n	800574a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	330c      	adds	r3, #12
 8005700:	7812      	ldrb	r2, [r2, #0]
 8005702:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800571c:	e015      	b.n	800574a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800571e:	f7fe f81b 	bl	8003758 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d803      	bhi.n	8005736 <HAL_SPI_Transmit+0x270>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005734:	d102      	bne.n	800573c <HAL_SPI_Transmit+0x276>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d106      	bne.n	800574a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005748:	e029      	b.n	800579e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1b1      	bne.n	80056b8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	6839      	ldr	r1, [r7, #0]
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 fb69 	bl	8005e30 <SPI_EndRxTxTransaction>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005772:	2300      	movs	r3, #0
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e003      	b.n	800579e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3720      	adds	r7, #32
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08a      	sub	sp, #40	; 0x28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057be:	2301      	movs	r3, #1
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x26>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e20a      	b.n	8005bec <HAL_SPI_TransmitReceive+0x43c>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057de:	f7fd ffbb 	bl	8003758 <HAL_GetTick>
 80057e2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057ea:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80057f2:	887b      	ldrh	r3, [r7, #2]
 80057f4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80057f6:	887b      	ldrh	r3, [r7, #2]
 80057f8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057fa:	7efb      	ldrb	r3, [r7, #27]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d00e      	beq.n	800581e <HAL_SPI_TransmitReceive+0x6e>
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005806:	d106      	bne.n	8005816 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d102      	bne.n	8005816 <HAL_SPI_TransmitReceive+0x66>
 8005810:	7efb      	ldrb	r3, [r7, #27]
 8005812:	2b04      	cmp	r3, #4
 8005814:	d003      	beq.n	800581e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005816:	2302      	movs	r3, #2
 8005818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800581c:	e1e0      	b.n	8005be0 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_SPI_TransmitReceive+0x80>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <HAL_SPI_TransmitReceive+0x80>
 800582a:	887b      	ldrh	r3, [r7, #2]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d103      	bne.n	8005838 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005836:	e1d3      	b.n	8005be0 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b04      	cmp	r3, #4
 8005842:	d003      	beq.n	800584c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2205      	movs	r2, #5
 8005848:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	887a      	ldrh	r2, [r7, #2]
 800585c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	887a      	ldrh	r2, [r7, #2]
 8005864:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	887a      	ldrh	r2, [r7, #2]
 8005872:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	887a      	ldrh	r2, [r7, #2]
 8005878:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800588e:	d802      	bhi.n	8005896 <HAL_SPI_TransmitReceive+0xe6>
 8005890:	8a3b      	ldrh	r3, [r7, #16]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d908      	bls.n	80058a8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058a4:	605a      	str	r2, [r3, #4]
 80058a6:	e007      	b.n	80058b8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058b6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	d007      	beq.n	80058d6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058de:	f240 8081 	bls.w	80059e4 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_SPI_TransmitReceive+0x140>
 80058ea:	8a7b      	ldrh	r3, [r7, #18]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d16d      	bne.n	80059cc <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	881a      	ldrh	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	1c9a      	adds	r2, r3, #2
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005914:	e05a      	b.n	80059cc <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b02      	cmp	r3, #2
 8005922:	d11b      	bne.n	800595c <HAL_SPI_TransmitReceive+0x1ac>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d016      	beq.n	800595c <HAL_SPI_TransmitReceive+0x1ac>
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	2b01      	cmp	r3, #1
 8005932:	d113      	bne.n	800595c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	881a      	ldrh	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	1c9a      	adds	r2, r3, #2
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b01      	cmp	r3, #1
 8005968:	d11c      	bne.n	80059a4 <HAL_SPI_TransmitReceive+0x1f4>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d016      	beq.n	80059a4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	b292      	uxth	r2, r2
 8005982:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	1c9a      	adds	r2, r3, #2
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005994:	b29b      	uxth	r3, r3
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059a0:	2301      	movs	r3, #1
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059a4:	f7fd fed8 	bl	8003758 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d80b      	bhi.n	80059cc <HAL_SPI_TransmitReceive+0x21c>
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ba:	d007      	beq.n	80059cc <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80059ca:	e109      	b.n	8005be0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d19f      	bne.n	8005916 <HAL_SPI_TransmitReceive+0x166>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d199      	bne.n	8005916 <HAL_SPI_TransmitReceive+0x166>
 80059e2:	e0e3      	b.n	8005bac <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_SPI_TransmitReceive+0x244>
 80059ec:	8a7b      	ldrh	r3, [r7, #18]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	f040 80cf 	bne.w	8005b92 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d912      	bls.n	8005a24 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	881a      	ldrh	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	1c9a      	adds	r2, r3, #2
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b02      	subs	r3, #2
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a22:	e0b6      	b.n	8005b92 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	330c      	adds	r3, #12
 8005a2e:	7812      	ldrb	r2, [r2, #0]
 8005a30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a4a:	e0a2      	b.n	8005b92 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d134      	bne.n	8005ac4 <HAL_SPI_TransmitReceive+0x314>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d02f      	beq.n	8005ac4 <HAL_SPI_TransmitReceive+0x314>
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d12c      	bne.n	8005ac4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d912      	bls.n	8005a9a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	881a      	ldrh	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	1c9a      	adds	r2, r3, #2
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b02      	subs	r3, #2
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a98:	e012      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	330c      	adds	r3, #12
 8005aa4:	7812      	ldrb	r2, [r2, #0]
 8005aa6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d148      	bne.n	8005b64 <HAL_SPI_TransmitReceive+0x3b4>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d042      	beq.n	8005b64 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d923      	bls.n	8005b32 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	b292      	uxth	r2, r2
 8005af6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	1c9a      	adds	r2, r3, #2
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b02      	subs	r3, #2
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d81f      	bhi.n	8005b60 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b2e:	605a      	str	r2, [r3, #4]
 8005b30:	e016      	b.n	8005b60 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f103 020c 	add.w	r2, r3, #12
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	7812      	ldrb	r2, [r2, #0]
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b60:	2301      	movs	r3, #1
 8005b62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b64:	f7fd fdf8 	bl	8003758 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d803      	bhi.n	8005b7c <HAL_SPI_TransmitReceive+0x3cc>
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d102      	bne.n	8005b82 <HAL_SPI_TransmitReceive+0x3d2>
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d107      	bne.n	8005b92 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005b90:	e026      	b.n	8005be0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f47f af57 	bne.w	8005a4c <HAL_SPI_TransmitReceive+0x29c>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f47f af50 	bne.w	8005a4c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f93d 	bl	8005e30 <SPI_EndRxTxTransaction>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d005      	beq.n	8005bc8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bd6:	e003      	b.n	8005be0 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3728      	adds	r7, #40	; 0x28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	4613      	mov	r3, r2
 8005c02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c04:	f7fd fda8 	bl	8003758 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	1a9b      	subs	r3, r3, r2
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	4413      	add	r3, r2
 8005c12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c14:	f7fd fda0 	bl	8003758 <HAL_GetTick>
 8005c18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c1a:	4b39      	ldr	r3, [pc, #228]	; (8005d00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	015b      	lsls	r3, r3, #5
 8005c20:	0d1b      	lsrs	r3, r3, #20
 8005c22:	69fa      	ldr	r2, [r7, #28]
 8005c24:	fb02 f303 	mul.w	r3, r2, r3
 8005c28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c2a:	e054      	b.n	8005cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d050      	beq.n	8005cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c34:	f7fd fd90 	bl	8003758 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d902      	bls.n	8005c4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d13d      	bne.n	8005cc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c62:	d111      	bne.n	8005c88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c6c:	d004      	beq.n	8005c78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c76:	d107      	bne.n	8005c88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c90:	d10f      	bne.n	8005cb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e017      	b.n	8005cf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	bf0c      	ite	eq
 8005ce6:	2301      	moveq	r3, #1
 8005ce8:	2300      	movne	r3, #0
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d19b      	bne.n	8005c2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3720      	adds	r7, #32
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000074 	.word	0x20000074

08005d04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b08a      	sub	sp, #40	; 0x28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d16:	f7fd fd1f 	bl	8003758 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	1a9b      	subs	r3, r3, r2
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	4413      	add	r3, r2
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005d26:	f7fd fd17 	bl	8003758 <HAL_GetTick>
 8005d2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d34:	4b3d      	ldr	r3, [pc, #244]	; (8005e2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	00da      	lsls	r2, r3, #3
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	0d1b      	lsrs	r3, r3, #20
 8005d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d46:	fb02 f303 	mul.w	r3, r2, r3
 8005d4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d4c:	e060      	b.n	8005e10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d54:	d107      	bne.n	8005d66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d104      	bne.n	8005d66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d050      	beq.n	8005e10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d6e:	f7fd fcf3 	bl	8003758 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d902      	bls.n	8005d84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d13d      	bne.n	8005e00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d9c:	d111      	bne.n	8005dc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da6:	d004      	beq.n	8005db2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db0:	d107      	bne.n	8005dc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dca:	d10f      	bne.n	8005dec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e010      	b.n	8005e22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d196      	bne.n	8005d4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3728      	adds	r7, #40	; 0x28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000074 	.word	0x20000074

08005e30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f7ff ff5b 	bl	8005d04 <SPI_WaitFifoStateUntilTimeout>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e58:	f043 0220 	orr.w	r2, r3, #32
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e027      	b.n	8005eb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	2180      	movs	r1, #128	; 0x80
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f7ff fec0 	bl	8005bf4 <SPI_WaitFlagStateUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d007      	beq.n	8005e8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7e:	f043 0220 	orr.w	r2, r3, #32
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e014      	b.n	8005eb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f7ff ff34 	bl	8005d04 <SPI_WaitFifoStateUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d007      	beq.n	8005eb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea6:	f043 0220 	orr.w	r2, r3, #32
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e000      	b.n	8005eb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e049      	b.n	8005f62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f841 	bl	8005f6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4610      	mov	r0, r2
 8005efc:	f000 f9be 	bl	800627c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
	...

08005f80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d001      	beq.n	8005f98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e03b      	b.n	8006010 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0201 	orr.w	r2, r2, #1
 8005fae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a19      	ldr	r2, [pc, #100]	; (800601c <HAL_TIM_Base_Start_IT+0x9c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d009      	beq.n	8005fce <HAL_TIM_Base_Start_IT+0x4e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc2:	d004      	beq.n	8005fce <HAL_TIM_Base_Start_IT+0x4e>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a15      	ldr	r2, [pc, #84]	; (8006020 <HAL_TIM_Base_Start_IT+0xa0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d115      	bne.n	8005ffa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	4b13      	ldr	r3, [pc, #76]	; (8006024 <HAL_TIM_Base_Start_IT+0xa4>)
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b06      	cmp	r3, #6
 8005fde:	d015      	beq.n	800600c <HAL_TIM_Base_Start_IT+0x8c>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe6:	d011      	beq.n	800600c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0201 	orr.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff8:	e008      	b.n	800600c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0201 	orr.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	e000      	b.n	800600e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40012c00 	.word	0x40012c00
 8006020:	40014000 	.word	0x40014000
 8006024:	00010007 	.word	0x00010007

08006028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d020      	beq.n	800608c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01b      	beq.n	800608c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0202 	mvn.w	r2, #2
 800605c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f8e4 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8006078:	e005      	b.n	8006086 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f8d6 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f8e7 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b00      	cmp	r3, #0
 8006094:	d020      	beq.n	80060d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01b      	beq.n	80060d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f06f 0204 	mvn.w	r2, #4
 80060a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2202      	movs	r2, #2
 80060ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f8be 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 80060c4:	e005      	b.n	80060d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f8b0 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f8c1 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d020      	beq.n	8006124 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01b      	beq.n	8006124 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0208 	mvn.w	r2, #8
 80060f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2204      	movs	r2, #4
 80060fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f898 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8006110:	e005      	b.n	800611e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f88a 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f89b 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	2b00      	cmp	r3, #0
 800612c:	d020      	beq.n	8006170 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f003 0310 	and.w	r3, r3, #16
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01b      	beq.n	8006170 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f06f 0210 	mvn.w	r2, #16
 8006140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2208      	movs	r2, #8
 8006146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f872 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 800615c:	e005      	b.n	800616a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f864 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f875 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00c      	beq.n	8006194 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d007      	beq.n	8006194 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0201 	mvn.w	r2, #1
 800618c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7fc ffa8 	bl	80030e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00c      	beq.n	80061b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d007      	beq.n	80061b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f8d0 	bl	8006358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00c      	beq.n	80061dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d007      	beq.n	80061dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f8c8 	bl	800636c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00c      	beq.n	8006200 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d007      	beq.n	8006200 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f834 	bl	8006268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 0320 	and.w	r3, r3, #32
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00c      	beq.n	8006224 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0220 	mvn.w	r2, #32
 800621c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f890 	bl	8006344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a2a      	ldr	r2, [pc, #168]	; (8006338 <TIM_Base_SetConfig+0xbc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d003      	beq.n	800629c <TIM_Base_SetConfig+0x20>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629a:	d108      	bne.n	80062ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a21      	ldr	r2, [pc, #132]	; (8006338 <TIM_Base_SetConfig+0xbc>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00b      	beq.n	80062ce <TIM_Base_SetConfig+0x52>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062bc:	d007      	beq.n	80062ce <TIM_Base_SetConfig+0x52>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a1e      	ldr	r2, [pc, #120]	; (800633c <TIM_Base_SetConfig+0xc0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d003      	beq.n	80062ce <TIM_Base_SetConfig+0x52>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a1d      	ldr	r2, [pc, #116]	; (8006340 <TIM_Base_SetConfig+0xc4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d108      	bne.n	80062e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a0c      	ldr	r2, [pc, #48]	; (8006338 <TIM_Base_SetConfig+0xbc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d007      	beq.n	800631c <TIM_Base_SetConfig+0xa0>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a0b      	ldr	r2, [pc, #44]	; (800633c <TIM_Base_SetConfig+0xc0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_Base_SetConfig+0xa0>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a0a      	ldr	r2, [pc, #40]	; (8006340 <TIM_Base_SetConfig+0xc4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d103      	bne.n	8006324 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	615a      	str	r2, [r3, #20]
}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	40012c00 	.word	0x40012c00
 800633c:	40014000 	.word	0x40014000
 8006340:	40014400 	.word	0x40014400

08006344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e040      	b.n	8006414 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d106      	bne.n	80063a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7fc ff7c 	bl	80032a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2224      	movs	r2, #36	; 0x24
 80063ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0201 	bic.w	r2, r2, #1
 80063bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fdaa 	bl	8006f20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fb7b 	bl	8006ac8 <UART_SetConfig>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e01b      	b.n	8006414 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0201 	orr.w	r2, r2, #1
 800640a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fe29 	bl	8007064 <UART_CheckIdleState>
 8006412:	4603      	mov	r3, r0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08a      	sub	sp, #40	; 0x28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	4613      	mov	r3, r2
 8006428:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006430:	2b20      	cmp	r3, #32
 8006432:	d137      	bne.n	80064a4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <HAL_UART_Receive_IT+0x24>
 800643a:	88fb      	ldrh	r3, [r7, #6]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e030      	b.n	80064a6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a18      	ldr	r2, [pc, #96]	; (80064b0 <HAL_UART_Receive_IT+0x94>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d01f      	beq.n	8006494 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d018      	beq.n	8006494 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	e853 3f00 	ldrex	r3, [r3]
 800646e:	613b      	str	r3, [r7, #16]
   return(result);
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	623b      	str	r3, [r7, #32]
 8006482:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006484:	69f9      	ldr	r1, [r7, #28]
 8006486:	6a3a      	ldr	r2, [r7, #32]
 8006488:	e841 2300 	strex	r3, r2, [r1]
 800648c:	61bb      	str	r3, [r7, #24]
   return(result);
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e6      	bne.n	8006462 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006494:	88fb      	ldrh	r3, [r7, #6]
 8006496:	461a      	mov	r2, r3
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 fef2 	bl	8007284 <UART_Start_Receive_IT>
 80064a0:	4603      	mov	r3, r0
 80064a2:	e000      	b.n	80064a6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064a4:	2302      	movs	r3, #2
  }
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3728      	adds	r7, #40	; 0x28
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	40008000 	.word	0x40008000

080064b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b0ba      	sub	sp, #232	; 0xe8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80064de:	f640 030f 	movw	r3, #2063	; 0x80f
 80064e2:	4013      	ands	r3, r2
 80064e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80064e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d115      	bne.n	800651c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00f      	beq.n	800651c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b00      	cmp	r3, #0
 8006506:	d009      	beq.n	800651c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 82ae 	beq.w	8006a6e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	4798      	blx	r3
      }
      return;
 800651a:	e2a8      	b.n	8006a6e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800651c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 8117 	beq.w	8006754 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006532:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006536:	4b85      	ldr	r3, [pc, #532]	; (800674c <HAL_UART_IRQHandler+0x298>)
 8006538:	4013      	ands	r3, r2
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 810a 	beq.w	8006754 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d011      	beq.n	8006570 <HAL_UART_IRQHandler+0xbc>
 800654c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00b      	beq.n	8006570 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2201      	movs	r2, #1
 800655e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006566:	f043 0201 	orr.w	r2, r3, #1
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d011      	beq.n	80065a0 <HAL_UART_IRQHandler+0xec>
 800657c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00b      	beq.n	80065a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2202      	movs	r2, #2
 800658e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006596:	f043 0204 	orr.w	r2, r3, #4
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d011      	beq.n	80065d0 <HAL_UART_IRQHandler+0x11c>
 80065ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00b      	beq.n	80065d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2204      	movs	r2, #4
 80065be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c6:	f043 0202 	orr.w	r2, r3, #2
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d017      	beq.n	800660c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e0:	f003 0320 	and.w	r3, r3, #32
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d105      	bne.n	80065f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00b      	beq.n	800660c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2208      	movs	r2, #8
 80065fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006602:	f043 0208 	orr.w	r2, r3, #8
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800660c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006614:	2b00      	cmp	r3, #0
 8006616:	d012      	beq.n	800663e <HAL_UART_IRQHandler+0x18a>
 8006618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800661c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00c      	beq.n	800663e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800662c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006634:	f043 0220 	orr.w	r2, r3, #32
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 8214 	beq.w	8006a72 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800664a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00d      	beq.n	8006672 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	d007      	beq.n	8006672 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006678:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006686:	2b40      	cmp	r3, #64	; 0x40
 8006688:	d005      	beq.n	8006696 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800668a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800668e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006692:	2b00      	cmp	r3, #0
 8006694:	d04f      	beq.n	8006736 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 feba 	bl	8007410 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a6:	2b40      	cmp	r3, #64	; 0x40
 80066a8:	d141      	bne.n	800672e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3308      	adds	r3, #8
 80066b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3308      	adds	r3, #8
 80066d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066e6:	e841 2300 	strex	r3, r2, [r1]
 80066ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1d9      	bne.n	80066aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d013      	beq.n	8006726 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006702:	4a13      	ldr	r2, [pc, #76]	; (8006750 <HAL_UART_IRQHandler+0x29c>)
 8006704:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800670a:	4618      	mov	r0, r3
 800670c:	f7fd f981 	bl	8003a12 <HAL_DMA_Abort_IT>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d017      	beq.n	8006746 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006720:	4610      	mov	r0, r2
 8006722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006724:	e00f      	b.n	8006746 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f9b8 	bl	8006a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800672c:	e00b      	b.n	8006746 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f9b4 	bl	8006a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006734:	e007      	b.n	8006746 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f9b0 	bl	8006a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006744:	e195      	b.n	8006a72 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006746:	bf00      	nop
    return;
 8006748:	e193      	b.n	8006a72 <HAL_UART_IRQHandler+0x5be>
 800674a:	bf00      	nop
 800674c:	04000120 	.word	0x04000120
 8006750:	080074d9 	.word	0x080074d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006758:	2b01      	cmp	r3, #1
 800675a:	f040 814e 	bne.w	80069fa <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800675e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006762:	f003 0310 	and.w	r3, r3, #16
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 8147 	beq.w	80069fa <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800676c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006770:	f003 0310 	and.w	r3, r3, #16
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8140 	beq.w	80069fa <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2210      	movs	r2, #16
 8006780:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678c:	2b40      	cmp	r3, #64	; 0x40
 800678e:	f040 80b8 	bne.w	8006902 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800679e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 8167 	beq.w	8006a76 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067b2:	429a      	cmp	r2, r3
 80067b4:	f080 815f 	bcs.w	8006a76 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f040 8086 	bne.w	80068e0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006802:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800680a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006816:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1da      	bne.n	80067d4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3308      	adds	r3, #8
 8006824:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800682e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006830:	f023 0301 	bic.w	r3, r3, #1
 8006834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3308      	adds	r3, #8
 800683e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006842:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006846:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800684a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e1      	bne.n	800681e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3308      	adds	r3, #8
 8006860:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006862:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800686a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800686c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006870:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3308      	adds	r3, #8
 800687a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800687e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006880:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006884:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800688c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e3      	bne.n	800685a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b0:	f023 0310 	bic.w	r3, r3, #16
 80068b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80068c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e4      	bne.n	80068a0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fd f85b 	bl	8003996 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f8d8 	bl	8006ab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006900:	e0b9      	b.n	8006a76 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800690e:	b29b      	uxth	r3, r3
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 80ab 	beq.w	8006a7a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 80a6 	beq.w	8006a7a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	e853 3f00 	ldrex	r3, [r3]
 800693a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800693c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006942:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006950:	647b      	str	r3, [r7, #68]	; 0x44
 8006952:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006956:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800695e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e4      	bne.n	800692e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3308      	adds	r3, #8
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	623b      	str	r3, [r7, #32]
   return(result);
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	f023 0301 	bic.w	r3, r3, #1
 800697a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3308      	adds	r3, #8
 8006984:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006988:	633a      	str	r2, [r7, #48]	; 0x30
 800698a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800698e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e3      	bne.n	8006964 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f023 0310 	bic.w	r3, r3, #16
 80069c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069d2:	61fb      	str	r3, [r7, #28]
 80069d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d6:	69b9      	ldr	r1, [r7, #24]
 80069d8:	69fa      	ldr	r2, [r7, #28]
 80069da:	e841 2300 	strex	r3, r2, [r1]
 80069de:	617b      	str	r3, [r7, #20]
   return(result);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1e4      	bne.n	80069b0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2202      	movs	r2, #2
 80069ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f85c 	bl	8006ab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069f8:	e03f      	b.n	8006a7a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00e      	beq.n	8006a24 <HAL_UART_IRQHandler+0x570>
 8006a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d008      	beq.n	8006a24 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 ff57 	bl	80078d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a22:	e02d      	b.n	8006a80 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00e      	beq.n	8006a4e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d008      	beq.n	8006a4e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d01c      	beq.n	8006a7e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	4798      	blx	r3
    }
    return;
 8006a4c:	e017      	b.n	8006a7e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d012      	beq.n	8006a80 <HAL_UART_IRQHandler+0x5cc>
 8006a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00c      	beq.n	8006a80 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fd4c 	bl	8007504 <UART_EndTransmit_IT>
    return;
 8006a6c:	e008      	b.n	8006a80 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a6e:	bf00      	nop
 8006a70:	e006      	b.n	8006a80 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006a72:	bf00      	nop
 8006a74:	e004      	b.n	8006a80 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a76:	bf00      	nop
 8006a78:	e002      	b.n	8006a80 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a7a:	bf00      	nop
 8006a7c:	e000      	b.n	8006a80 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006a7e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006a80:	37e8      	adds	r7, #232	; 0xe8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop

08006a88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006acc:	b08a      	sub	sp, #40	; 0x28
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	4bb4      	ldr	r3, [pc, #720]	; (8006dc8 <UART_SetConfig+0x300>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	6812      	ldr	r2, [r2, #0]
 8006afe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b00:	430b      	orrs	r3, r1
 8006b02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4aa9      	ldr	r2, [pc, #676]	; (8006dcc <UART_SetConfig+0x304>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d004      	beq.n	8006b34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b30:	4313      	orrs	r3, r2
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b44:	430a      	orrs	r2, r1
 8006b46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4aa0      	ldr	r2, [pc, #640]	; (8006dd0 <UART_SetConfig+0x308>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d126      	bne.n	8006ba0 <UART_SetConfig+0xd8>
 8006b52:	4ba0      	ldr	r3, [pc, #640]	; (8006dd4 <UART_SetConfig+0x30c>)
 8006b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b58:	f003 0303 	and.w	r3, r3, #3
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d81b      	bhi.n	8006b98 <UART_SetConfig+0xd0>
 8006b60:	a201      	add	r2, pc, #4	; (adr r2, 8006b68 <UART_SetConfig+0xa0>)
 8006b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b66:	bf00      	nop
 8006b68:	08006b79 	.word	0x08006b79
 8006b6c:	08006b89 	.word	0x08006b89
 8006b70:	08006b81 	.word	0x08006b81
 8006b74:	08006b91 	.word	0x08006b91
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b7e:	e080      	b.n	8006c82 <UART_SetConfig+0x1ba>
 8006b80:	2302      	movs	r3, #2
 8006b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b86:	e07c      	b.n	8006c82 <UART_SetConfig+0x1ba>
 8006b88:	2304      	movs	r3, #4
 8006b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b8e:	e078      	b.n	8006c82 <UART_SetConfig+0x1ba>
 8006b90:	2308      	movs	r3, #8
 8006b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b96:	e074      	b.n	8006c82 <UART_SetConfig+0x1ba>
 8006b98:	2310      	movs	r3, #16
 8006b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9e:	e070      	b.n	8006c82 <UART_SetConfig+0x1ba>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a8c      	ldr	r2, [pc, #560]	; (8006dd8 <UART_SetConfig+0x310>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d138      	bne.n	8006c1c <UART_SetConfig+0x154>
 8006baa:	4b8a      	ldr	r3, [pc, #552]	; (8006dd4 <UART_SetConfig+0x30c>)
 8006bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb0:	f003 030c 	and.w	r3, r3, #12
 8006bb4:	2b0c      	cmp	r3, #12
 8006bb6:	d82d      	bhi.n	8006c14 <UART_SetConfig+0x14c>
 8006bb8:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <UART_SetConfig+0xf8>)
 8006bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbe:	bf00      	nop
 8006bc0:	08006bf5 	.word	0x08006bf5
 8006bc4:	08006c15 	.word	0x08006c15
 8006bc8:	08006c15 	.word	0x08006c15
 8006bcc:	08006c15 	.word	0x08006c15
 8006bd0:	08006c05 	.word	0x08006c05
 8006bd4:	08006c15 	.word	0x08006c15
 8006bd8:	08006c15 	.word	0x08006c15
 8006bdc:	08006c15 	.word	0x08006c15
 8006be0:	08006bfd 	.word	0x08006bfd
 8006be4:	08006c15 	.word	0x08006c15
 8006be8:	08006c15 	.word	0x08006c15
 8006bec:	08006c15 	.word	0x08006c15
 8006bf0:	08006c0d 	.word	0x08006c0d
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bfa:	e042      	b.n	8006c82 <UART_SetConfig+0x1ba>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c02:	e03e      	b.n	8006c82 <UART_SetConfig+0x1ba>
 8006c04:	2304      	movs	r3, #4
 8006c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c0a:	e03a      	b.n	8006c82 <UART_SetConfig+0x1ba>
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c12:	e036      	b.n	8006c82 <UART_SetConfig+0x1ba>
 8006c14:	2310      	movs	r3, #16
 8006c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c1a:	e032      	b.n	8006c82 <UART_SetConfig+0x1ba>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a6a      	ldr	r2, [pc, #424]	; (8006dcc <UART_SetConfig+0x304>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d12a      	bne.n	8006c7c <UART_SetConfig+0x1b4>
 8006c26:	4b6b      	ldr	r3, [pc, #428]	; (8006dd4 <UART_SetConfig+0x30c>)
 8006c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c34:	d01a      	beq.n	8006c6c <UART_SetConfig+0x1a4>
 8006c36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c3a:	d81b      	bhi.n	8006c74 <UART_SetConfig+0x1ac>
 8006c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c40:	d00c      	beq.n	8006c5c <UART_SetConfig+0x194>
 8006c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c46:	d815      	bhi.n	8006c74 <UART_SetConfig+0x1ac>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <UART_SetConfig+0x18c>
 8006c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c50:	d008      	beq.n	8006c64 <UART_SetConfig+0x19c>
 8006c52:	e00f      	b.n	8006c74 <UART_SetConfig+0x1ac>
 8006c54:	2300      	movs	r3, #0
 8006c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c5a:	e012      	b.n	8006c82 <UART_SetConfig+0x1ba>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c62:	e00e      	b.n	8006c82 <UART_SetConfig+0x1ba>
 8006c64:	2304      	movs	r3, #4
 8006c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6a:	e00a      	b.n	8006c82 <UART_SetConfig+0x1ba>
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c72:	e006      	b.n	8006c82 <UART_SetConfig+0x1ba>
 8006c74:	2310      	movs	r3, #16
 8006c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7a:	e002      	b.n	8006c82 <UART_SetConfig+0x1ba>
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a51      	ldr	r2, [pc, #324]	; (8006dcc <UART_SetConfig+0x304>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d17a      	bne.n	8006d82 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	d824      	bhi.n	8006cde <UART_SetConfig+0x216>
 8006c94:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <UART_SetConfig+0x1d4>)
 8006c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9a:	bf00      	nop
 8006c9c:	08006cc1 	.word	0x08006cc1
 8006ca0:	08006cdf 	.word	0x08006cdf
 8006ca4:	08006cc9 	.word	0x08006cc9
 8006ca8:	08006cdf 	.word	0x08006cdf
 8006cac:	08006ccf 	.word	0x08006ccf
 8006cb0:	08006cdf 	.word	0x08006cdf
 8006cb4:	08006cdf 	.word	0x08006cdf
 8006cb8:	08006cdf 	.word	0x08006cdf
 8006cbc:	08006cd7 	.word	0x08006cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cc0:	f7fd fe8a 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 8006cc4:	61f8      	str	r0, [r7, #28]
        break;
 8006cc6:	e010      	b.n	8006cea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc8:	4b44      	ldr	r3, [pc, #272]	; (8006ddc <UART_SetConfig+0x314>)
 8006cca:	61fb      	str	r3, [r7, #28]
        break;
 8006ccc:	e00d      	b.n	8006cea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cce:	f7fd fdeb 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8006cd2:	61f8      	str	r0, [r7, #28]
        break;
 8006cd4:	e009      	b.n	8006cea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cda:	61fb      	str	r3, [r7, #28]
        break;
 8006cdc:	e005      	b.n	8006cea <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ce8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 8107 	beq.w	8006f00 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4413      	add	r3, r2
 8006cfc:	69fa      	ldr	r2, [r7, #28]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d305      	bcc.n	8006d0e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d08:	69fa      	ldr	r2, [r7, #28]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d903      	bls.n	8006d16 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d14:	e0f4      	b.n	8006f00 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	461c      	mov	r4, r3
 8006d1c:	4615      	mov	r5, r2
 8006d1e:	f04f 0200 	mov.w	r2, #0
 8006d22:	f04f 0300 	mov.w	r3, #0
 8006d26:	022b      	lsls	r3, r5, #8
 8006d28:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006d2c:	0222      	lsls	r2, r4, #8
 8006d2e:	68f9      	ldr	r1, [r7, #12]
 8006d30:	6849      	ldr	r1, [r1, #4]
 8006d32:	0849      	lsrs	r1, r1, #1
 8006d34:	2000      	movs	r0, #0
 8006d36:	4688      	mov	r8, r1
 8006d38:	4681      	mov	r9, r0
 8006d3a:	eb12 0a08 	adds.w	sl, r2, r8
 8006d3e:	eb43 0b09 	adc.w	fp, r3, r9
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	603b      	str	r3, [r7, #0]
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d50:	4650      	mov	r0, sl
 8006d52:	4659      	mov	r1, fp
 8006d54:	f7f9 ff28 	bl	8000ba8 <__aeabi_uldivmod>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d66:	d308      	bcc.n	8006d7a <UART_SetConfig+0x2b2>
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d6e:	d204      	bcs.n	8006d7a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	60da      	str	r2, [r3, #12]
 8006d78:	e0c2      	b.n	8006f00 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d80:	e0be      	b.n	8006f00 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d8a:	d16a      	bne.n	8006e62 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006d8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d834      	bhi.n	8006dfe <UART_SetConfig+0x336>
 8006d94:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <UART_SetConfig+0x2d4>)
 8006d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9a:	bf00      	nop
 8006d9c:	08006dc1 	.word	0x08006dc1
 8006da0:	08006de1 	.word	0x08006de1
 8006da4:	08006de9 	.word	0x08006de9
 8006da8:	08006dff 	.word	0x08006dff
 8006dac:	08006def 	.word	0x08006def
 8006db0:	08006dff 	.word	0x08006dff
 8006db4:	08006dff 	.word	0x08006dff
 8006db8:	08006dff 	.word	0x08006dff
 8006dbc:	08006df7 	.word	0x08006df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc0:	f7fd fe0a 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 8006dc4:	61f8      	str	r0, [r7, #28]
        break;
 8006dc6:	e020      	b.n	8006e0a <UART_SetConfig+0x342>
 8006dc8:	efff69f3 	.word	0xefff69f3
 8006dcc:	40008000 	.word	0x40008000
 8006dd0:	40013800 	.word	0x40013800
 8006dd4:	40021000 	.word	0x40021000
 8006dd8:	40004400 	.word	0x40004400
 8006ddc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006de0:	f7fd fe10 	bl	8004a04 <HAL_RCC_GetPCLK2Freq>
 8006de4:	61f8      	str	r0, [r7, #28]
        break;
 8006de6:	e010      	b.n	8006e0a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006de8:	4b4c      	ldr	r3, [pc, #304]	; (8006f1c <UART_SetConfig+0x454>)
 8006dea:	61fb      	str	r3, [r7, #28]
        break;
 8006dec:	e00d      	b.n	8006e0a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dee:	f7fd fd5b 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8006df2:	61f8      	str	r0, [r7, #28]
        break;
 8006df4:	e009      	b.n	8006e0a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dfa:	61fb      	str	r3, [r7, #28]
        break;
 8006dfc:	e005      	b.n	8006e0a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d077      	beq.n	8006f00 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	005a      	lsls	r2, r3, #1
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	085b      	lsrs	r3, r3, #1
 8006e1a:	441a      	add	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e24:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b0f      	cmp	r3, #15
 8006e2a:	d916      	bls.n	8006e5a <UART_SetConfig+0x392>
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e32:	d212      	bcs.n	8006e5a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	f023 030f 	bic.w	r3, r3, #15
 8006e3c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	085b      	lsrs	r3, r3, #1
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	8afb      	ldrh	r3, [r7, #22]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	8afa      	ldrh	r2, [r7, #22]
 8006e56:	60da      	str	r2, [r3, #12]
 8006e58:	e052      	b.n	8006f00 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e60:	e04e      	b.n	8006f00 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e66:	2b08      	cmp	r3, #8
 8006e68:	d827      	bhi.n	8006eba <UART_SetConfig+0x3f2>
 8006e6a:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <UART_SetConfig+0x3a8>)
 8006e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e70:	08006e95 	.word	0x08006e95
 8006e74:	08006e9d 	.word	0x08006e9d
 8006e78:	08006ea5 	.word	0x08006ea5
 8006e7c:	08006ebb 	.word	0x08006ebb
 8006e80:	08006eab 	.word	0x08006eab
 8006e84:	08006ebb 	.word	0x08006ebb
 8006e88:	08006ebb 	.word	0x08006ebb
 8006e8c:	08006ebb 	.word	0x08006ebb
 8006e90:	08006eb3 	.word	0x08006eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e94:	f7fd fda0 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 8006e98:	61f8      	str	r0, [r7, #28]
        break;
 8006e9a:	e014      	b.n	8006ec6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e9c:	f7fd fdb2 	bl	8004a04 <HAL_RCC_GetPCLK2Freq>
 8006ea0:	61f8      	str	r0, [r7, #28]
        break;
 8006ea2:	e010      	b.n	8006ec6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ea4:	4b1d      	ldr	r3, [pc, #116]	; (8006f1c <UART_SetConfig+0x454>)
 8006ea6:	61fb      	str	r3, [r7, #28]
        break;
 8006ea8:	e00d      	b.n	8006ec6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eaa:	f7fd fcfd 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8006eae:	61f8      	str	r0, [r7, #28]
        break;
 8006eb0:	e009      	b.n	8006ec6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eb6:	61fb      	str	r3, [r7, #28]
        break;
 8006eb8:	e005      	b.n	8006ec6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ec4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d019      	beq.n	8006f00 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	085a      	lsrs	r2, r3, #1
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	441a      	add	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ede:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	2b0f      	cmp	r3, #15
 8006ee4:	d909      	bls.n	8006efa <UART_SetConfig+0x432>
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eec:	d205      	bcs.n	8006efa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	60da      	str	r2, [r3, #12]
 8006ef8:	e002      	b.n	8006f00 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006f0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3728      	adds	r7, #40	; 0x28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f1a:	bf00      	nop
 8006f1c:	00f42400 	.word	0x00f42400

08006f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00a      	beq.n	8006f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00a      	beq.n	8006f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	f003 0320 	and.w	r3, r3, #32
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01a      	beq.n	8007036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800701e:	d10a      	bne.n	8007036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	605a      	str	r2, [r3, #4]
  }
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b098      	sub	sp, #96	; 0x60
 8007068:	af02      	add	r7, sp, #8
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007074:	f7fc fb70 	bl	8003758 <HAL_GetTick>
 8007078:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0308 	and.w	r3, r3, #8
 8007084:	2b08      	cmp	r3, #8
 8007086:	d12e      	bne.n	80070e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007090:	2200      	movs	r2, #0
 8007092:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f88c 	bl	80071b4 <UART_WaitOnFlagUntilTimeout>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d021      	beq.n	80070e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070b6:	653b      	str	r3, [r7, #80]	; 0x50
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c0:	647b      	str	r3, [r7, #68]	; 0x44
 80070c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e6      	bne.n	80070a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e062      	b.n	80071ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d149      	bne.n	8007188 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070fc:	2200      	movs	r2, #0
 80070fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f856 	bl	80071b4 <UART_WaitOnFlagUntilTimeout>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d03c      	beq.n	8007188 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	e853 3f00 	ldrex	r3, [r3]
 800711a:	623b      	str	r3, [r7, #32]
   return(result);
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	461a      	mov	r2, r3
 800712a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712c:	633b      	str	r3, [r7, #48]	; 0x30
 800712e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007134:	e841 2300 	strex	r3, r2, [r1]
 8007138:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e6      	bne.n	800710e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3308      	adds	r3, #8
 8007146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 0301 	bic.w	r3, r3, #1
 8007156:	64bb      	str	r3, [r7, #72]	; 0x48
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3308      	adds	r3, #8
 800715e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007160:	61fa      	str	r2, [r7, #28]
 8007162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	69b9      	ldr	r1, [r7, #24]
 8007166:	69fa      	ldr	r2, [r7, #28]
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	617b      	str	r3, [r7, #20]
   return(result);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e5      	bne.n	8007140 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2220      	movs	r2, #32
 8007178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e011      	b.n	80071ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2220      	movs	r2, #32
 8007192:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3758      	adds	r7, #88	; 0x58
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	4613      	mov	r3, r2
 80071c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c4:	e049      	b.n	800725a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071cc:	d045      	beq.n	800725a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ce:	f7fc fac3 	bl	8003758 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d302      	bcc.n	80071e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e048      	b.n	800727a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0304 	and.w	r3, r3, #4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d031      	beq.n	800725a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b08      	cmp	r3, #8
 8007202:	d110      	bne.n	8007226 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2208      	movs	r2, #8
 800720a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 f8ff 	bl	8007410 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2208      	movs	r2, #8
 8007216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e029      	b.n	800727a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007234:	d111      	bne.n	800725a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800723e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 f8e5 	bl	8007410 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2220      	movs	r2, #32
 800724a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e00f      	b.n	800727a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69da      	ldr	r2, [r3, #28]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4013      	ands	r3, r2
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	429a      	cmp	r2, r3
 8007268:	bf0c      	ite	eq
 800726a:	2301      	moveq	r3, #1
 800726c:	2300      	movne	r3, #0
 800726e:	b2db      	uxtb	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	79fb      	ldrb	r3, [r7, #7]
 8007274:	429a      	cmp	r2, r3
 8007276:	d0a6      	beq.n	80071c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007284:	b480      	push	{r7}
 8007286:	b097      	sub	sp, #92	; 0x5c
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	88fa      	ldrh	r2, [r7, #6]
 800729c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	88fa      	ldrh	r2, [r7, #6]
 80072a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b6:	d10e      	bne.n	80072d6 <UART_Start_Receive_IT+0x52>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d105      	bne.n	80072cc <UART_Start_Receive_IT+0x48>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80072c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072ca:	e02d      	b.n	8007328 <UART_Start_Receive_IT+0xa4>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	22ff      	movs	r2, #255	; 0xff
 80072d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072d4:	e028      	b.n	8007328 <UART_Start_Receive_IT+0xa4>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10d      	bne.n	80072fa <UART_Start_Receive_IT+0x76>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d104      	bne.n	80072f0 <UART_Start_Receive_IT+0x6c>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	22ff      	movs	r2, #255	; 0xff
 80072ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072ee:	e01b      	b.n	8007328 <UART_Start_Receive_IT+0xa4>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	227f      	movs	r2, #127	; 0x7f
 80072f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072f8:	e016      	b.n	8007328 <UART_Start_Receive_IT+0xa4>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007302:	d10d      	bne.n	8007320 <UART_Start_Receive_IT+0x9c>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d104      	bne.n	8007316 <UART_Start_Receive_IT+0x92>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	227f      	movs	r2, #127	; 0x7f
 8007310:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007314:	e008      	b.n	8007328 <UART_Start_Receive_IT+0xa4>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	223f      	movs	r2, #63	; 0x3f
 800731a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800731e:	e003      	b.n	8007328 <UART_Start_Receive_IT+0xa4>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2222      	movs	r2, #34	; 0x22
 8007334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3308      	adds	r3, #8
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	f043 0301 	orr.w	r3, r3, #1
 800734e:	657b      	str	r3, [r7, #84]	; 0x54
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3308      	adds	r3, #8
 8007356:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007358:	64ba      	str	r2, [r7, #72]	; 0x48
 800735a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800735e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e5      	bne.n	8007338 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007374:	d107      	bne.n	8007386 <UART_Start_Receive_IT+0x102>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d103      	bne.n	8007386 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4a21      	ldr	r2, [pc, #132]	; (8007408 <UART_Start_Receive_IT+0x184>)
 8007382:	669a      	str	r2, [r3, #104]	; 0x68
 8007384:	e002      	b.n	800738c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4a20      	ldr	r2, [pc, #128]	; (800740c <UART_Start_Receive_IT+0x188>)
 800738a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d019      	beq.n	80073c8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80073a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b2:	637b      	str	r3, [r7, #52]	; 0x34
 80073b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e6      	bne.n	8007394 <UART_Start_Receive_IT+0x110>
 80073c6:	e018      	b.n	80073fa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	613b      	str	r3, [r7, #16]
   return(result);
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f043 0320 	orr.w	r3, r3, #32
 80073dc:	653b      	str	r3, [r7, #80]	; 0x50
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e6:	623b      	str	r3, [r7, #32]
 80073e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	69f9      	ldr	r1, [r7, #28]
 80073ec:	6a3a      	ldr	r2, [r7, #32]
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e6      	bne.n	80073c8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	375c      	adds	r7, #92	; 0x5c
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	08007715 	.word	0x08007715
 800740c:	08007559 	.word	0x08007559

08007410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007410:	b480      	push	{r7}
 8007412:	b095      	sub	sp, #84	; 0x54
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800742c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007436:	643b      	str	r3, [r7, #64]	; 0x40
 8007438:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800743c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e6      	bne.n	8007418 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3308      	adds	r3, #8
 8007450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	61fb      	str	r3, [r7, #28]
   return(result);
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	f023 0301 	bic.w	r3, r3, #1
 8007460:	64bb      	str	r3, [r7, #72]	; 0x48
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3308      	adds	r3, #8
 8007468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800746a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800746c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e5      	bne.n	800744a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007482:	2b01      	cmp	r3, #1
 8007484:	d118      	bne.n	80074b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	60bb      	str	r3, [r7, #8]
   return(result);
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f023 0310 	bic.w	r3, r3, #16
 800749a:	647b      	str	r3, [r7, #68]	; 0x44
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	6979      	ldr	r1, [r7, #20]
 80074aa:	69ba      	ldr	r2, [r7, #24]
 80074ac:	e841 2300 	strex	r3, r2, [r1]
 80074b0:	613b      	str	r3, [r7, #16]
   return(result);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1e6      	bne.n	8007486 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	669a      	str	r2, [r3, #104]	; 0x68
}
 80074cc:	bf00      	nop
 80074ce:	3754      	adds	r7, #84	; 0x54
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f7ff fad0 	bl	8006a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074fc:	bf00      	nop
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	60bb      	str	r3, [r7, #8]
   return(result);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007520:	61fb      	str	r3, [r7, #28]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	61bb      	str	r3, [r7, #24]
 800752c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6979      	ldr	r1, [r7, #20]
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	613b      	str	r3, [r7, #16]
   return(result);
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e6      	bne.n	800750c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff fa9c 	bl	8006a88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007550:	bf00      	nop
 8007552:	3720      	adds	r7, #32
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b09c      	sub	sp, #112	; 0x70
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007566:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007570:	2b22      	cmp	r3, #34	; 0x22
 8007572:	f040 80be 	bne.w	80076f2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800757c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007580:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007584:	b2d9      	uxtb	r1, r3
 8007586:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800758a:	b2da      	uxtb	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007590:	400a      	ands	r2, r1
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	3b01      	subs	r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f040 80a3 	bne.w	8007706 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075de:	65bb      	str	r3, [r7, #88]	; 0x58
 80075e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e6      	bne.n	80075c0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3308      	adds	r3, #8
 80075f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007604:	f023 0301 	bic.w	r3, r3, #1
 8007608:	667b      	str	r3, [r7, #100]	; 0x64
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3308      	adds	r3, #8
 8007610:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007612:	647a      	str	r2, [r7, #68]	; 0x44
 8007614:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007618:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e5      	bne.n	80075f2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a34      	ldr	r2, [pc, #208]	; (8007710 <UART_RxISR_8BIT+0x1b8>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d01f      	beq.n	8007684 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d018      	beq.n	8007684 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	623b      	str	r3, [r7, #32]
   return(result);
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007666:	663b      	str	r3, [r7, #96]	; 0x60
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007670:	633b      	str	r3, [r7, #48]	; 0x30
 8007672:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e6      	bne.n	8007652 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007688:	2b01      	cmp	r3, #1
 800768a:	d12e      	bne.n	80076ea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	e853 3f00 	ldrex	r3, [r3]
 800769e:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0310 	bic.w	r3, r3, #16
 80076a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	461a      	mov	r2, r3
 80076ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076b0:	61fb      	str	r3, [r7, #28]
 80076b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b4:	69b9      	ldr	r1, [r7, #24]
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	e841 2300 	strex	r3, r2, [r1]
 80076bc:	617b      	str	r3, [r7, #20]
   return(result);
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1e6      	bne.n	8007692 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	f003 0310 	and.w	r3, r3, #16
 80076ce:	2b10      	cmp	r3, #16
 80076d0:	d103      	bne.n	80076da <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2210      	movs	r2, #16
 80076d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7ff f9e4 	bl	8006ab0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076e8:	e00d      	b.n	8007706 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7fb fc54 	bl	8002f98 <HAL_UART_RxCpltCallback>
}
 80076f0:	e009      	b.n	8007706 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	8b1b      	ldrh	r3, [r3, #24]
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0208 	orr.w	r2, r2, #8
 8007702:	b292      	uxth	r2, r2
 8007704:	831a      	strh	r2, [r3, #24]
}
 8007706:	bf00      	nop
 8007708:	3770      	adds	r7, #112	; 0x70
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	40008000 	.word	0x40008000

08007714 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b09c      	sub	sp, #112	; 0x70
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007722:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800772c:	2b22      	cmp	r3, #34	; 0x22
 800772e:	f040 80be 	bne.w	80078ae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007738:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007740:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007742:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007746:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800774a:	4013      	ands	r3, r2
 800774c:	b29a      	uxth	r2, r3
 800774e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007750:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007756:	1c9a      	adds	r2, r3, #2
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007762:	b29b      	uxth	r3, r3
 8007764:	3b01      	subs	r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007774:	b29b      	uxth	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	f040 80a3 	bne.w	80078c2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800778a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800778c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007790:	667b      	str	r3, [r7, #100]	; 0x64
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	461a      	mov	r2, r3
 8007798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800779a:	657b      	str	r3, [r7, #84]	; 0x54
 800779c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80077a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1e6      	bne.n	800777c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3308      	adds	r3, #8
 80077b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	f023 0301 	bic.w	r3, r3, #1
 80077c4:	663b      	str	r3, [r7, #96]	; 0x60
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3308      	adds	r3, #8
 80077cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077ce:	643a      	str	r2, [r7, #64]	; 0x40
 80077d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e5      	bne.n	80077ae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a34      	ldr	r2, [pc, #208]	; (80078cc <UART_RxISR_16BIT+0x1b8>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d01f      	beq.n	8007840 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d018      	beq.n	8007840 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	61fb      	str	r3, [r7, #28]
   return(result);
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	461a      	mov	r2, r3
 800782a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800782c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800782e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e6      	bne.n	800780e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007844:	2b01      	cmp	r3, #1
 8007846:	d12e      	bne.n	80078a6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	e853 3f00 	ldrex	r3, [r3]
 800785a:	60bb      	str	r3, [r7, #8]
   return(result);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f023 0310 	bic.w	r3, r3, #16
 8007862:	65bb      	str	r3, [r7, #88]	; 0x58
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800786c:	61bb      	str	r3, [r7, #24]
 800786e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	6979      	ldr	r1, [r7, #20]
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	e841 2300 	strex	r3, r2, [r1]
 8007878:	613b      	str	r3, [r7, #16]
   return(result);
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e6      	bne.n	800784e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	f003 0310 	and.w	r3, r3, #16
 800788a:	2b10      	cmp	r3, #16
 800788c:	d103      	bne.n	8007896 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2210      	movs	r2, #16
 8007894:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7ff f906 	bl	8006ab0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078a4:	e00d      	b.n	80078c2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fb fb76 	bl	8002f98 <HAL_UART_RxCpltCallback>
}
 80078ac:	e009      	b.n	80078c2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	8b1b      	ldrh	r3, [r3, #24]
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0208 	orr.w	r2, r2, #8
 80078be:	b292      	uxth	r2, r2
 80078c0:	831a      	strh	r2, [r3, #24]
}
 80078c2:	bf00      	nop
 80078c4:	3770      	adds	r7, #112	; 0x70
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	40008000 	.word	0x40008000

080078d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80078e8:	4904      	ldr	r1, [pc, #16]	; (80078fc <MX_FATFS_Init+0x18>)
 80078ea:	4805      	ldr	r0, [pc, #20]	; (8007900 <MX_FATFS_Init+0x1c>)
 80078ec:	f002 ff78 	bl	800a7e0 <FATFS_LinkDriver>
 80078f0:	4603      	mov	r3, r0
 80078f2:	461a      	mov	r2, r3
 80078f4:	4b03      	ldr	r3, [pc, #12]	; (8007904 <MX_FATFS_Init+0x20>)
 80078f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80078f8:	bf00      	nop
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	200034d8 	.word	0x200034d8
 8007900:	20000080 	.word	0x20000080
 8007904:	200034d4 	.word	0x200034d4

08007908 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007908:	b480      	push	{r7}
 800790a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800790c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800790e:	4618      	mov	r0, r3
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize ( pdrv);
 8007922:	79fb      	ldrb	r3, [r7, #7]
 8007924:	4618      	mov	r0, r3
 8007926:	f7f9 fc71 	bl	800120c <SD_disk_initialize>
 800792a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800792c:	4618      	mov	r0, r3
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status ( pdrv);
 800793e:	79fb      	ldrb	r3, [r7, #7]
 8007940:	4618      	mov	r0, r3
 8007942:	f7f9 fd49 	bl	80013d8 <SD_disk_status>
 8007946:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007948:	4618      	mov	r0, r3
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
 800795a:	603b      	str	r3, [r7, #0]
 800795c:	4603      	mov	r3, r0
 800795e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read ( pdrv, buff,  sector,  count);
 8007960:	7bf8      	ldrb	r0, [r7, #15]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	68b9      	ldr	r1, [r7, #8]
 8007968:	f7f9 fd4c 	bl	8001404 <SD_disk_read>
 800796c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]
 8007982:	4603      	mov	r3, r0
 8007984:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write ( pdrv, buff,  sector,  count);
 8007986:	7bf8      	ldrb	r0, [r7, #15]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	68b9      	ldr	r1, [r7, #8]
 800798e:	f7f9 fda3 	bl	80014d8 <SD_disk_write>
 8007992:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	603a      	str	r2, [r7, #0]
 80079a6:	71fb      	strb	r3, [r7, #7]
 80079a8:	460b      	mov	r3, r1
 80079aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl ( pdrv,  cmd, buff);
 80079ac:	79b9      	ldrb	r1, [r7, #6]
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7f9 fe14 	bl	80015e0 <SD_disk_ioctl>
 80079b8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	4603      	mov	r3, r0
 80079cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80079ce:	79fb      	ldrb	r3, [r7, #7]
 80079d0:	4a08      	ldr	r2, [pc, #32]	; (80079f4 <disk_status+0x30>)
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	79fa      	ldrb	r2, [r7, #7]
 80079dc:	4905      	ldr	r1, [pc, #20]	; (80079f4 <disk_status+0x30>)
 80079de:	440a      	add	r2, r1
 80079e0:	7a12      	ldrb	r2, [r2, #8]
 80079e2:	4610      	mov	r0, r2
 80079e4:	4798      	blx	r3
 80079e6:	4603      	mov	r3, r0
 80079e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20003704 	.word	0x20003704

080079f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	4603      	mov	r3, r0
 8007a00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	4a0d      	ldr	r2, [pc, #52]	; (8007a40 <disk_initialize+0x48>)
 8007a0a:	5cd3      	ldrb	r3, [r2, r3]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d111      	bne.n	8007a34 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007a10:	79fb      	ldrb	r3, [r7, #7]
 8007a12:	4a0b      	ldr	r2, [pc, #44]	; (8007a40 <disk_initialize+0x48>)
 8007a14:	2101      	movs	r1, #1
 8007a16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	4a09      	ldr	r2, [pc, #36]	; (8007a40 <disk_initialize+0x48>)
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	79fa      	ldrb	r2, [r7, #7]
 8007a26:	4906      	ldr	r1, [pc, #24]	; (8007a40 <disk_initialize+0x48>)
 8007a28:	440a      	add	r2, r1
 8007a2a:	7a12      	ldrb	r2, [r2, #8]
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4798      	blx	r3
 8007a30:	4603      	mov	r3, r0
 8007a32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20003704 	.word	0x20003704

08007a44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007a44:	b590      	push	{r4, r7, lr}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	607a      	str	r2, [r7, #4]
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	4603      	mov	r3, r0
 8007a52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	4a0a      	ldr	r2, [pc, #40]	; (8007a80 <disk_read+0x3c>)
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	689c      	ldr	r4, [r3, #8]
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	4a07      	ldr	r2, [pc, #28]	; (8007a80 <disk_read+0x3c>)
 8007a64:	4413      	add	r3, r2
 8007a66:	7a18      	ldrb	r0, [r3, #8]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	68b9      	ldr	r1, [r7, #8]
 8007a6e:	47a0      	blx	r4
 8007a70:	4603      	mov	r3, r0
 8007a72:	75fb      	strb	r3, [r7, #23]
  return res;
 8007a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	371c      	adds	r7, #28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd90      	pop	{r4, r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20003704 	.word	0x20003704

08007a84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007a84:	b590      	push	{r4, r7, lr}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	607a      	str	r2, [r7, #4]
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	4603      	mov	r3, r0
 8007a92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	4a0a      	ldr	r2, [pc, #40]	; (8007ac0 <disk_write+0x3c>)
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	68dc      	ldr	r4, [r3, #12]
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	4a07      	ldr	r2, [pc, #28]	; (8007ac0 <disk_write+0x3c>)
 8007aa4:	4413      	add	r3, r2
 8007aa6:	7a18      	ldrb	r0, [r3, #8]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	47a0      	blx	r4
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd90      	pop	{r4, r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20003704 	.word	0x20003704

08007ac4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	603a      	str	r2, [r7, #0]
 8007ace:	71fb      	strb	r3, [r7, #7]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	4a09      	ldr	r2, [pc, #36]	; (8007afc <disk_ioctl+0x38>)
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	79fa      	ldrb	r2, [r7, #7]
 8007ae2:	4906      	ldr	r1, [pc, #24]	; (8007afc <disk_ioctl+0x38>)
 8007ae4:	440a      	add	r2, r1
 8007ae6:	7a10      	ldrb	r0, [r2, #8]
 8007ae8:	79b9      	ldrb	r1, [r7, #6]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	4798      	blx	r3
 8007aee:	4603      	mov	r3, r0
 8007af0:	73fb      	strb	r3, [r7, #15]
  return res;
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	20003704 	.word	0x20003704

08007b00 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007b10:	89fb      	ldrh	r3, [r7, #14]
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	b21a      	sxth	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	b21b      	sxth	r3, r3
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	b21b      	sxth	r3, r3
 8007b20:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007b22:	89fb      	ldrh	r3, [r7, #14]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3303      	adds	r3, #3
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	021b      	lsls	r3, r3, #8
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	3202      	adds	r2, #2
 8007b48:	7812      	ldrb	r2, [r2, #0]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	021b      	lsls	r3, r3, #8
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	3201      	adds	r2, #1
 8007b56:	7812      	ldrb	r2, [r2, #0]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	021b      	lsls	r3, r3, #8
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	7812      	ldrb	r2, [r2, #0]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
	return rv;
 8007b68:	68fb      	ldr	r3, [r7, #12]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	887a      	ldrh	r2, [r7, #2]
 8007b8a:	b2d2      	uxtb	r2, r2
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	887b      	ldrh	r3, [r7, #2]
 8007b90:	0a1b      	lsrs	r3, r3, #8
 8007b92:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	607a      	str	r2, [r7, #4]
 8007b9a:	887a      	ldrh	r2, [r7, #2]
 8007b9c:	b2d2      	uxtb	r2, r2
 8007b9e:	701a      	strb	r2, [r3, #0]
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	b2d2      	uxtb	r2, r2
 8007bc0:	701a      	strb	r2, [r3, #0]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	0a1b      	lsrs	r3, r3, #8
 8007bc6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	607a      	str	r2, [r7, #4]
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	701a      	strb	r2, [r3, #0]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	0a1b      	lsrs	r3, r3, #8
 8007bd8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	b2d2      	uxtb	r2, r2
 8007be4:	701a      	strb	r2, [r3, #0]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	0a1b      	lsrs	r3, r3, #8
 8007bea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	607a      	str	r2, [r7, #4]
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	b2d2      	uxtb	r2, r2
 8007bf6:	701a      	strb	r2, [r3, #0]
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00d      	beq.n	8007c3a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	1c53      	adds	r3, r2, #1
 8007c22:	613b      	str	r3, [r7, #16]
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	1c59      	adds	r1, r3, #1
 8007c28:	6179      	str	r1, [r7, #20]
 8007c2a:	7812      	ldrb	r2, [r2, #0]
 8007c2c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	3b01      	subs	r3, #1
 8007c32:	607b      	str	r3, [r7, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1f1      	bne.n	8007c1e <mem_cpy+0x1a>
	}
}
 8007c3a:	bf00      	nop
 8007c3c:	371c      	adds	r7, #28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007c46:	b480      	push	{r7}
 8007c48:	b087      	sub	sp, #28
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	617a      	str	r2, [r7, #20]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3b01      	subs	r3, #1
 8007c66:	607b      	str	r3, [r7, #4]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1f3      	bne.n	8007c56 <mem_set+0x10>
}
 8007c6e:	bf00      	nop
 8007c70:	bf00      	nop
 8007c72:	371c      	adds	r7, #28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007c7c:	b480      	push	{r7}
 8007c7e:	b089      	sub	sp, #36	; 0x24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	61fb      	str	r3, [r7, #28]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007c90:	2300      	movs	r3, #0
 8007c92:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	61fa      	str	r2, [r7, #28]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	61ba      	str	r2, [r7, #24]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	1acb      	subs	r3, r1, r3
 8007ca8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	607b      	str	r3, [r7, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <mem_cmp+0x40>
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0eb      	beq.n	8007c94 <mem_cmp+0x18>

	return r;
 8007cbc:	697b      	ldr	r3, [r7, #20]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3724      	adds	r7, #36	; 0x24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007cd4:	e002      	b.n	8007cdc <chk_chr+0x12>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	607b      	str	r3, [r7, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d005      	beq.n	8007cf0 <chk_chr+0x26>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d1f2      	bne.n	8007cd6 <chk_chr+0xc>
	return *str;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60bb      	str	r3, [r7, #8]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	60fb      	str	r3, [r7, #12]
 8007d12:	e029      	b.n	8007d68 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007d14:	4a27      	ldr	r2, [pc, #156]	; (8007db4 <chk_lock+0xb4>)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	011b      	lsls	r3, r3, #4
 8007d1a:	4413      	add	r3, r2
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d01d      	beq.n	8007d5e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007d22:	4a24      	ldr	r2, [pc, #144]	; (8007db4 <chk_lock+0xb4>)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	4413      	add	r3, r2
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d116      	bne.n	8007d62 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007d34:	4a1f      	ldr	r2, [pc, #124]	; (8007db4 <chk_lock+0xb4>)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	011b      	lsls	r3, r3, #4
 8007d3a:	4413      	add	r3, r2
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d10c      	bne.n	8007d62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007d48:	4a1a      	ldr	r2, [pc, #104]	; (8007db4 <chk_lock+0xb4>)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	011b      	lsls	r3, r3, #4
 8007d4e:	4413      	add	r3, r2
 8007d50:	3308      	adds	r3, #8
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d102      	bne.n	8007d62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007d5c:	e007      	b.n	8007d6e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d9d2      	bls.n	8007d14 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d109      	bne.n	8007d88 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d102      	bne.n	8007d80 <chk_lock+0x80>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d101      	bne.n	8007d84 <chk_lock+0x84>
 8007d80:	2300      	movs	r3, #0
 8007d82:	e010      	b.n	8007da6 <chk_lock+0xa6>
 8007d84:	2312      	movs	r3, #18
 8007d86:	e00e      	b.n	8007da6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d108      	bne.n	8007da0 <chk_lock+0xa0>
 8007d8e:	4a09      	ldr	r2, [pc, #36]	; (8007db4 <chk_lock+0xb4>)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	4413      	add	r3, r2
 8007d96:	330c      	adds	r3, #12
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d9e:	d101      	bne.n	8007da4 <chk_lock+0xa4>
 8007da0:	2310      	movs	r3, #16
 8007da2:	e000      	b.n	8007da6 <chk_lock+0xa6>
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	200034e4 	.word	0x200034e4

08007db8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	607b      	str	r3, [r7, #4]
 8007dc2:	e002      	b.n	8007dca <enq_lock+0x12>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	607b      	str	r3, [r7, #4]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d806      	bhi.n	8007dde <enq_lock+0x26>
 8007dd0:	4a09      	ldr	r2, [pc, #36]	; (8007df8 <enq_lock+0x40>)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	011b      	lsls	r3, r3, #4
 8007dd6:	4413      	add	r3, r2
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1f2      	bne.n	8007dc4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	bf14      	ite	ne
 8007de4:	2301      	movne	r3, #1
 8007de6:	2300      	moveq	r3, #0
 8007de8:	b2db      	uxtb	r3, r3
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	200034e4 	.word	0x200034e4

08007dfc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007e06:	2300      	movs	r3, #0
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	e01f      	b.n	8007e4c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007e0c:	4a41      	ldr	r2, [pc, #260]	; (8007f14 <inc_lock+0x118>)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	4413      	add	r3, r2
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d113      	bne.n	8007e46 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007e1e:	4a3d      	ldr	r2, [pc, #244]	; (8007f14 <inc_lock+0x118>)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	4413      	add	r3, r2
 8007e26:	3304      	adds	r3, #4
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d109      	bne.n	8007e46 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007e32:	4a38      	ldr	r2, [pc, #224]	; (8007f14 <inc_lock+0x118>)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	4413      	add	r3, r2
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d006      	beq.n	8007e54 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d9dc      	bls.n	8007e0c <inc_lock+0x10>
 8007e52:	e000      	b.n	8007e56 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007e54:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d132      	bne.n	8007ec2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	e002      	b.n	8007e68 <inc_lock+0x6c>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d806      	bhi.n	8007e7c <inc_lock+0x80>
 8007e6e:	4a29      	ldr	r2, [pc, #164]	; (8007f14 <inc_lock+0x118>)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	011b      	lsls	r3, r3, #4
 8007e74:	4413      	add	r3, r2
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1f2      	bne.n	8007e62 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d101      	bne.n	8007e86 <inc_lock+0x8a>
 8007e82:	2300      	movs	r3, #0
 8007e84:	e040      	b.n	8007f08 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	4922      	ldr	r1, [pc, #136]	; (8007f14 <inc_lock+0x118>)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	011b      	lsls	r3, r3, #4
 8007e90:	440b      	add	r3, r1
 8007e92:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	491e      	ldr	r1, [pc, #120]	; (8007f14 <inc_lock+0x118>)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	011b      	lsls	r3, r3, #4
 8007e9e:	440b      	add	r3, r1
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	695a      	ldr	r2, [r3, #20]
 8007ea8:	491a      	ldr	r1, [pc, #104]	; (8007f14 <inc_lock+0x118>)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	011b      	lsls	r3, r3, #4
 8007eae:	440b      	add	r3, r1
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007eb4:	4a17      	ldr	r2, [pc, #92]	; (8007f14 <inc_lock+0x118>)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	011b      	lsls	r3, r3, #4
 8007eba:	4413      	add	r3, r2
 8007ebc:	330c      	adds	r3, #12
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d009      	beq.n	8007edc <inc_lock+0xe0>
 8007ec8:	4a12      	ldr	r2, [pc, #72]	; (8007f14 <inc_lock+0x118>)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	011b      	lsls	r3, r3, #4
 8007ece:	4413      	add	r3, r2
 8007ed0:	330c      	adds	r3, #12
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <inc_lock+0xe0>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	e015      	b.n	8007f08 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d108      	bne.n	8007ef4 <inc_lock+0xf8>
 8007ee2:	4a0c      	ldr	r2, [pc, #48]	; (8007f14 <inc_lock+0x118>)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	011b      	lsls	r3, r3, #4
 8007ee8:	4413      	add	r3, r2
 8007eea:	330c      	adds	r3, #12
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	e001      	b.n	8007ef8 <inc_lock+0xfc>
 8007ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ef8:	4906      	ldr	r1, [pc, #24]	; (8007f14 <inc_lock+0x118>)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	011b      	lsls	r3, r3, #4
 8007efe:	440b      	add	r3, r1
 8007f00:	330c      	adds	r3, #12
 8007f02:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3301      	adds	r3, #1
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	200034e4 	.word	0x200034e4

08007f18 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	607b      	str	r3, [r7, #4]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d825      	bhi.n	8007f78 <dec_lock+0x60>
		n = Files[i].ctr;
 8007f2c:	4a17      	ldr	r2, [pc, #92]	; (8007f8c <dec_lock+0x74>)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	011b      	lsls	r3, r3, #4
 8007f32:	4413      	add	r3, r2
 8007f34:	330c      	adds	r3, #12
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007f3a:	89fb      	ldrh	r3, [r7, #14]
 8007f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f40:	d101      	bne.n	8007f46 <dec_lock+0x2e>
 8007f42:	2300      	movs	r3, #0
 8007f44:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007f46:	89fb      	ldrh	r3, [r7, #14]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <dec_lock+0x3a>
 8007f4c:	89fb      	ldrh	r3, [r7, #14]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007f52:	4a0e      	ldr	r2, [pc, #56]	; (8007f8c <dec_lock+0x74>)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	011b      	lsls	r3, r3, #4
 8007f58:	4413      	add	r3, r2
 8007f5a:	330c      	adds	r3, #12
 8007f5c:	89fa      	ldrh	r2, [r7, #14]
 8007f5e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007f60:	89fb      	ldrh	r3, [r7, #14]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d105      	bne.n	8007f72 <dec_lock+0x5a>
 8007f66:	4a09      	ldr	r2, [pc, #36]	; (8007f8c <dec_lock+0x74>)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	011b      	lsls	r3, r3, #4
 8007f6c:	4413      	add	r3, r2
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	737b      	strb	r3, [r7, #13]
 8007f76:	e001      	b.n	8007f7c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007f78:	2302      	movs	r3, #2
 8007f7a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007f7c:	7b7b      	ldrb	r3, [r7, #13]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	200034e4 	.word	0x200034e4

08007f90 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	e010      	b.n	8007fc0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007f9e:	4a0d      	ldr	r2, [pc, #52]	; (8007fd4 <clear_lock+0x44>)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	011b      	lsls	r3, r3, #4
 8007fa4:	4413      	add	r3, r2
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d105      	bne.n	8007fba <clear_lock+0x2a>
 8007fae:	4a09      	ldr	r2, [pc, #36]	; (8007fd4 <clear_lock+0x44>)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	4413      	add	r3, r2
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d9eb      	bls.n	8007f9e <clear_lock+0xe>
	}
}
 8007fc6:	bf00      	nop
 8007fc8:	bf00      	nop
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	200034e4 	.word	0x200034e4

08007fd8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	78db      	ldrb	r3, [r3, #3]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d034      	beq.n	8008056 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	7858      	ldrb	r0, [r3, #1]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	f7ff fd40 	bl	8007a84 <disk_write>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <sync_window+0x38>
			res = FR_DISK_ERR;
 800800a:	2301      	movs	r3, #1
 800800c:	73fb      	strb	r3, [r7, #15]
 800800e:	e022      	b.n	8008056 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	1ad2      	subs	r2, r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	429a      	cmp	r2, r3
 8008024:	d217      	bcs.n	8008056 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	789b      	ldrb	r3, [r3, #2]
 800802a:	613b      	str	r3, [r7, #16]
 800802c:	e010      	b.n	8008050 <sync_window+0x78>
					wsect += fs->fsize;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	4413      	add	r3, r2
 8008036:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	7858      	ldrb	r0, [r3, #1]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008042:	2301      	movs	r3, #1
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	f7ff fd1d 	bl	8007a84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	3b01      	subs	r3, #1
 800804e:	613b      	str	r3, [r7, #16]
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d8eb      	bhi.n	800802e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008056:	7bfb      	ldrb	r3, [r7, #15]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	429a      	cmp	r2, r3
 8008076:	d01b      	beq.n	80080b0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff ffad 	bl	8007fd8 <sync_window>
 800807e:	4603      	mov	r3, r0
 8008080:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008082:	7bfb      	ldrb	r3, [r7, #15]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d113      	bne.n	80080b0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	7858      	ldrb	r0, [r3, #1]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008092:	2301      	movs	r3, #1
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	f7ff fcd5 	bl	8007a44 <disk_read>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d004      	beq.n	80080aa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80080a0:	f04f 33ff 	mov.w	r3, #4294967295
 80080a4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
	...

080080bc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff ff87 	bl	8007fd8 <sync_window>
 80080ca:	4603      	mov	r3, r0
 80080cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d159      	bne.n	8008188 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d149      	bne.n	8008170 <sync_fs+0xb4>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	791b      	ldrb	r3, [r3, #4]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d145      	bne.n	8008170 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	899b      	ldrh	r3, [r3, #12]
 80080ee:	461a      	mov	r2, r3
 80080f0:	2100      	movs	r1, #0
 80080f2:	f7ff fda8 	bl	8007c46 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	3338      	adds	r3, #56	; 0x38
 80080fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080fe:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008102:	4618      	mov	r0, r3
 8008104:	f7ff fd37 	bl	8007b76 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3338      	adds	r3, #56	; 0x38
 800810c:	4921      	ldr	r1, [pc, #132]	; (8008194 <sync_fs+0xd8>)
 800810e:	4618      	mov	r0, r3
 8008110:	f7ff fd4c 	bl	8007bac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3338      	adds	r3, #56	; 0x38
 8008118:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800811c:	491e      	ldr	r1, [pc, #120]	; (8008198 <sync_fs+0xdc>)
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff fd44 	bl	8007bac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3338      	adds	r3, #56	; 0x38
 8008128:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	4619      	mov	r1, r3
 8008132:	4610      	mov	r0, r2
 8008134:	f7ff fd3a 	bl	8007bac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3338      	adds	r3, #56	; 0x38
 800813c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	4619      	mov	r1, r3
 8008146:	4610      	mov	r0, r2
 8008148:	f7ff fd30 	bl	8007bac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	7858      	ldrb	r0, [r3, #1]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008164:	2301      	movs	r3, #1
 8008166:	f7ff fc8d 	bl	8007a84 <disk_write>
			fs->fsi_flag = 0;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	785b      	ldrb	r3, [r3, #1]
 8008174:	2200      	movs	r2, #0
 8008176:	2100      	movs	r1, #0
 8008178:	4618      	mov	r0, r3
 800817a:	f7ff fca3 	bl	8007ac4 <disk_ioctl>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <sync_fs+0xcc>
 8008184:	2301      	movs	r3, #1
 8008186:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008188:	7bfb      	ldrb	r3, [r7, #15]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	41615252 	.word	0x41615252
 8008198:	61417272 	.word	0x61417272

0800819c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	3b02      	subs	r3, #2
 80081aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	3b02      	subs	r3, #2
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d301      	bcc.n	80081bc <clust2sect+0x20>
 80081b8:	2300      	movs	r3, #0
 80081ba:	e008      	b.n	80081ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	895b      	ldrh	r3, [r3, #10]
 80081c0:	461a      	mov	r2, r3
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	fb03 f202 	mul.w	r2, r3, r2
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081cc:	4413      	add	r3, r2
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b086      	sub	sp, #24
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d904      	bls.n	80081fa <get_fat+0x20>
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d302      	bcc.n	8008200 <get_fat+0x26>
		val = 1;	/* Internal error */
 80081fa:	2301      	movs	r3, #1
 80081fc:	617b      	str	r3, [r7, #20]
 80081fe:	e0bb      	b.n	8008378 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008200:	f04f 33ff 	mov.w	r3, #4294967295
 8008204:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	2b03      	cmp	r3, #3
 800820c:	f000 8083 	beq.w	8008316 <get_fat+0x13c>
 8008210:	2b03      	cmp	r3, #3
 8008212:	f300 80a7 	bgt.w	8008364 <get_fat+0x18a>
 8008216:	2b01      	cmp	r3, #1
 8008218:	d002      	beq.n	8008220 <get_fat+0x46>
 800821a:	2b02      	cmp	r3, #2
 800821c:	d056      	beq.n	80082cc <get_fat+0xf2>
 800821e:	e0a1      	b.n	8008364 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	085b      	lsrs	r3, r3, #1
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	4413      	add	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	899b      	ldrh	r3, [r3, #12]
 8008236:	4619      	mov	r1, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	fbb3 f3f1 	udiv	r3, r3, r1
 800823e:	4413      	add	r3, r2
 8008240:	4619      	mov	r1, r3
 8008242:	6938      	ldr	r0, [r7, #16]
 8008244:	f7ff ff0c 	bl	8008060 <move_window>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	f040 808d 	bne.w	800836a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	60fa      	str	r2, [r7, #12]
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	8992      	ldrh	r2, [r2, #12]
 800825a:	fbb3 f1f2 	udiv	r1, r3, r2
 800825e:	fb01 f202 	mul.w	r2, r1, r2
 8008262:	1a9b      	subs	r3, r3, r2
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4413      	add	r3, r2
 8008268:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800826c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	899b      	ldrh	r3, [r3, #12]
 8008276:	4619      	mov	r1, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	fbb3 f3f1 	udiv	r3, r3, r1
 800827e:	4413      	add	r3, r2
 8008280:	4619      	mov	r1, r3
 8008282:	6938      	ldr	r0, [r7, #16]
 8008284:	f7ff feec 	bl	8008060 <move_window>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d16f      	bne.n	800836e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	899b      	ldrh	r3, [r3, #12]
 8008292:	461a      	mov	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	fbb3 f1f2 	udiv	r1, r3, r2
 800829a:	fb01 f202 	mul.w	r2, r1, r2
 800829e:	1a9b      	subs	r3, r3, r2
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	4413      	add	r3, r2
 80082a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80082a8:	021b      	lsls	r3, r3, #8
 80082aa:	461a      	mov	r2, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <get_fat+0xe8>
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	091b      	lsrs	r3, r3, #4
 80082c0:	e002      	b.n	80082c8 <get_fat+0xee>
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082c8:	617b      	str	r3, [r7, #20]
			break;
 80082ca:	e055      	b.n	8008378 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	899b      	ldrh	r3, [r3, #12]
 80082d4:	085b      	lsrs	r3, r3, #1
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	4619      	mov	r1, r3
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80082e0:	4413      	add	r3, r2
 80082e2:	4619      	mov	r1, r3
 80082e4:	6938      	ldr	r0, [r7, #16]
 80082e6:	f7ff febb 	bl	8008060 <move_window>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d140      	bne.n	8008372 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	005b      	lsls	r3, r3, #1
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	8992      	ldrh	r2, [r2, #12]
 80082fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8008302:	fb00 f202 	mul.w	r2, r0, r2
 8008306:	1a9b      	subs	r3, r3, r2
 8008308:	440b      	add	r3, r1
 800830a:	4618      	mov	r0, r3
 800830c:	f7ff fbf8 	bl	8007b00 <ld_word>
 8008310:	4603      	mov	r3, r0
 8008312:	617b      	str	r3, [r7, #20]
			break;
 8008314:	e030      	b.n	8008378 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	899b      	ldrh	r3, [r3, #12]
 800831e:	089b      	lsrs	r3, r3, #2
 8008320:	b29b      	uxth	r3, r3
 8008322:	4619      	mov	r1, r3
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	fbb3 f3f1 	udiv	r3, r3, r1
 800832a:	4413      	add	r3, r2
 800832c:	4619      	mov	r1, r3
 800832e:	6938      	ldr	r0, [r7, #16]
 8008330:	f7ff fe96 	bl	8008060 <move_window>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d11d      	bne.n	8008376 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	8992      	ldrh	r2, [r2, #12]
 8008348:	fbb3 f0f2 	udiv	r0, r3, r2
 800834c:	fb00 f202 	mul.w	r2, r0, r2
 8008350:	1a9b      	subs	r3, r3, r2
 8008352:	440b      	add	r3, r1
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff fbeb 	bl	8007b30 <ld_dword>
 800835a:	4603      	mov	r3, r0
 800835c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008360:	617b      	str	r3, [r7, #20]
			break;
 8008362:	e009      	b.n	8008378 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008364:	2301      	movs	r3, #1
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	e006      	b.n	8008378 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800836a:	bf00      	nop
 800836c:	e004      	b.n	8008378 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800836e:	bf00      	nop
 8008370:	e002      	b.n	8008378 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008372:	bf00      	nop
 8008374:	e000      	b.n	8008378 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008376:	bf00      	nop
		}
	}

	return val;
 8008378:	697b      	ldr	r3, [r7, #20]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008382:	b590      	push	{r4, r7, lr}
 8008384:	b089      	sub	sp, #36	; 0x24
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800838e:	2302      	movs	r3, #2
 8008390:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2b01      	cmp	r3, #1
 8008396:	f240 8109 	bls.w	80085ac <put_fat+0x22a>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	f080 8103 	bcs.w	80085ac <put_fat+0x22a>
		switch (fs->fs_type) {
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	f000 80b6 	beq.w	800851c <put_fat+0x19a>
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	f300 80fb 	bgt.w	80085ac <put_fat+0x22a>
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d003      	beq.n	80083c2 <put_fat+0x40>
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	f000 8083 	beq.w	80084c6 <put_fat+0x144>
 80083c0:	e0f4      	b.n	80085ac <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	61bb      	str	r3, [r7, #24]
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	085b      	lsrs	r3, r3, #1
 80083ca:	69ba      	ldr	r2, [r7, #24]
 80083cc:	4413      	add	r3, r2
 80083ce:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	899b      	ldrh	r3, [r3, #12]
 80083d8:	4619      	mov	r1, r3
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80083e0:	4413      	add	r3, r2
 80083e2:	4619      	mov	r1, r3
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f7ff fe3b 	bl	8008060 <move_window>
 80083ea:	4603      	mov	r3, r0
 80083ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083ee:	7ffb      	ldrb	r3, [r7, #31]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f040 80d4 	bne.w	800859e <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	61ba      	str	r2, [r7, #24]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	8992      	ldrh	r2, [r2, #12]
 8008406:	fbb3 f0f2 	udiv	r0, r3, r2
 800840a:	fb00 f202 	mul.w	r2, r0, r2
 800840e:	1a9b      	subs	r3, r3, r2
 8008410:	440b      	add	r3, r1
 8008412:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00d      	beq.n	800843a <put_fat+0xb8>
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	b25b      	sxtb	r3, r3
 8008424:	f003 030f 	and.w	r3, r3, #15
 8008428:	b25a      	sxtb	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	b25b      	sxtb	r3, r3
 8008432:	4313      	orrs	r3, r2
 8008434:	b25b      	sxtb	r3, r3
 8008436:	b2db      	uxtb	r3, r3
 8008438:	e001      	b.n	800843e <put_fat+0xbc>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	b2db      	uxtb	r3, r3
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2201      	movs	r2, #1
 8008446:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	899b      	ldrh	r3, [r3, #12]
 8008450:	4619      	mov	r1, r3
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	fbb3 f3f1 	udiv	r3, r3, r1
 8008458:	4413      	add	r3, r2
 800845a:	4619      	mov	r1, r3
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7ff fdff 	bl	8008060 <move_window>
 8008462:	4603      	mov	r3, r0
 8008464:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008466:	7ffb      	ldrb	r3, [r7, #31]
 8008468:	2b00      	cmp	r3, #0
 800846a:	f040 809a 	bne.w	80085a2 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	899b      	ldrh	r3, [r3, #12]
 8008478:	461a      	mov	r2, r3
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008480:	fb00 f202 	mul.w	r2, r0, r2
 8008484:	1a9b      	subs	r3, r3, r2
 8008486:	440b      	add	r3, r1
 8008488:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	2b00      	cmp	r3, #0
 8008492:	d003      	beq.n	800849c <put_fat+0x11a>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	091b      	lsrs	r3, r3, #4
 8008498:	b2db      	uxtb	r3, r3
 800849a:	e00e      	b.n	80084ba <put_fat+0x138>
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	b25b      	sxtb	r3, r3
 80084a2:	f023 030f 	bic.w	r3, r3, #15
 80084a6:	b25a      	sxtb	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	0a1b      	lsrs	r3, r3, #8
 80084ac:	b25b      	sxtb	r3, r3
 80084ae:	f003 030f 	and.w	r3, r3, #15
 80084b2:	b25b      	sxtb	r3, r3
 80084b4:	4313      	orrs	r3, r2
 80084b6:	b25b      	sxtb	r3, r3
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2201      	movs	r2, #1
 80084c2:	70da      	strb	r2, [r3, #3]
			break;
 80084c4:	e072      	b.n	80085ac <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	899b      	ldrh	r3, [r3, #12]
 80084ce:	085b      	lsrs	r3, r3, #1
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	4619      	mov	r1, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80084da:	4413      	add	r3, r2
 80084dc:	4619      	mov	r1, r3
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f7ff fdbe 	bl	8008060 <move_window>
 80084e4:	4603      	mov	r3, r0
 80084e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80084e8:	7ffb      	ldrb	r3, [r7, #31]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d15b      	bne.n	80085a6 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	005b      	lsls	r3, r3, #1
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	8992      	ldrh	r2, [r2, #12]
 80084fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008500:	fb00 f202 	mul.w	r2, r0, r2
 8008504:	1a9b      	subs	r3, r3, r2
 8008506:	440b      	add	r3, r1
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	b292      	uxth	r2, r2
 800850c:	4611      	mov	r1, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff fb31 	bl	8007b76 <st_word>
			fs->wflag = 1;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2201      	movs	r2, #1
 8008518:	70da      	strb	r2, [r3, #3]
			break;
 800851a:	e047      	b.n	80085ac <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	899b      	ldrh	r3, [r3, #12]
 8008524:	089b      	lsrs	r3, r3, #2
 8008526:	b29b      	uxth	r3, r3
 8008528:	4619      	mov	r1, r3
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008530:	4413      	add	r3, r2
 8008532:	4619      	mov	r1, r3
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7ff fd93 	bl	8008060 <move_window>
 800853a:	4603      	mov	r3, r0
 800853c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800853e:	7ffb      	ldrb	r3, [r7, #31]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d132      	bne.n	80085aa <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	8992      	ldrh	r2, [r2, #12]
 8008558:	fbb3 f0f2 	udiv	r0, r3, r2
 800855c:	fb00 f202 	mul.w	r2, r0, r2
 8008560:	1a9b      	subs	r3, r3, r2
 8008562:	440b      	add	r3, r1
 8008564:	4618      	mov	r0, r3
 8008566:	f7ff fae3 	bl	8007b30 <ld_dword>
 800856a:	4603      	mov	r3, r0
 800856c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008570:	4323      	orrs	r3, r4
 8008572:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	8992      	ldrh	r2, [r2, #12]
 8008582:	fbb3 f0f2 	udiv	r0, r3, r2
 8008586:	fb00 f202 	mul.w	r2, r0, r2
 800858a:	1a9b      	subs	r3, r3, r2
 800858c:	440b      	add	r3, r1
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff fb0b 	bl	8007bac <st_dword>
			fs->wflag = 1;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2201      	movs	r2, #1
 800859a:	70da      	strb	r2, [r3, #3]
			break;
 800859c:	e006      	b.n	80085ac <put_fat+0x22a>
			if (res != FR_OK) break;
 800859e:	bf00      	nop
 80085a0:	e004      	b.n	80085ac <put_fat+0x22a>
			if (res != FR_OK) break;
 80085a2:	bf00      	nop
 80085a4:	e002      	b.n	80085ac <put_fat+0x22a>
			if (res != FR_OK) break;
 80085a6:	bf00      	nop
 80085a8:	e000      	b.n	80085ac <put_fat+0x22a>
			if (res != FR_OK) break;
 80085aa:	bf00      	nop
		}
	}
	return res;
 80085ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3724      	adds	r7, #36	; 0x24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd90      	pop	{r4, r7, pc}

080085b6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b088      	sub	sp, #32
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d904      	bls.n	80085dc <remove_chain+0x26>
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d301      	bcc.n	80085e0 <remove_chain+0x2a>
 80085dc:	2302      	movs	r3, #2
 80085de:	e04b      	b.n	8008678 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00c      	beq.n	8008600 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80085e6:	f04f 32ff 	mov.w	r2, #4294967295
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	69b8      	ldr	r0, [r7, #24]
 80085ee:	f7ff fec8 	bl	8008382 <put_fat>
 80085f2:	4603      	mov	r3, r0
 80085f4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80085f6:	7ffb      	ldrb	r3, [r7, #31]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <remove_chain+0x4a>
 80085fc:	7ffb      	ldrb	r3, [r7, #31]
 80085fe:	e03b      	b.n	8008678 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008600:	68b9      	ldr	r1, [r7, #8]
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f7ff fde9 	bl	80081da <get_fat>
 8008608:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d031      	beq.n	8008674 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d101      	bne.n	800861a <remove_chain+0x64>
 8008616:	2302      	movs	r3, #2
 8008618:	e02e      	b.n	8008678 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008620:	d101      	bne.n	8008626 <remove_chain+0x70>
 8008622:	2301      	movs	r3, #1
 8008624:	e028      	b.n	8008678 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008626:	2200      	movs	r2, #0
 8008628:	68b9      	ldr	r1, [r7, #8]
 800862a:	69b8      	ldr	r0, [r7, #24]
 800862c:	f7ff fea9 	bl	8008382 <put_fat>
 8008630:	4603      	mov	r3, r0
 8008632:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008634:	7ffb      	ldrb	r3, [r7, #31]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <remove_chain+0x88>
 800863a:	7ffb      	ldrb	r3, [r7, #31]
 800863c:	e01c      	b.n	8008678 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	699a      	ldr	r2, [r3, #24]
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	3b02      	subs	r3, #2
 8008648:	429a      	cmp	r2, r3
 800864a:	d20b      	bcs.n	8008664 <remove_chain+0xae>
			fs->free_clst++;
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	1c5a      	adds	r2, r3, #1
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	791b      	ldrb	r3, [r3, #4]
 800865a:	f043 0301 	orr.w	r3, r3, #1
 800865e:	b2da      	uxtb	r2, r3
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	429a      	cmp	r2, r3
 8008670:	d3c6      	bcc.n	8008600 <remove_chain+0x4a>
 8008672:	e000      	b.n	8008676 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008674:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3720      	adds	r7, #32
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10d      	bne.n	80086b2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d004      	beq.n	80086ac <create_chain+0x2c>
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d31b      	bcc.n	80086e4 <create_chain+0x64>
 80086ac:	2301      	movs	r3, #1
 80086ae:	61bb      	str	r3, [r7, #24]
 80086b0:	e018      	b.n	80086e4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7ff fd90 	bl	80081da <get_fat>
 80086ba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d801      	bhi.n	80086c6 <create_chain+0x46>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e070      	b.n	80087a8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086cc:	d101      	bne.n	80086d2 <create_chain+0x52>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	e06a      	b.n	80087a8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d201      	bcs.n	80086e0 <create_chain+0x60>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	e063      	b.n	80087a8 <create_chain+0x128>
		scl = clst;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	3301      	adds	r3, #1
 80086ec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	69fa      	ldr	r2, [r7, #28]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d307      	bcc.n	8008708 <create_chain+0x88>
				ncl = 2;
 80086f8:	2302      	movs	r3, #2
 80086fa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80086fc:	69fa      	ldr	r2, [r7, #28]
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	429a      	cmp	r2, r3
 8008702:	d901      	bls.n	8008708 <create_chain+0x88>
 8008704:	2300      	movs	r3, #0
 8008706:	e04f      	b.n	80087a8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008708:	69f9      	ldr	r1, [r7, #28]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff fd65 	bl	80081da <get_fat>
 8008710:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00e      	beq.n	8008736 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d003      	beq.n	8008726 <create_chain+0xa6>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008724:	d101      	bne.n	800872a <create_chain+0xaa>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	e03e      	b.n	80087a8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800872a:	69fa      	ldr	r2, [r7, #28]
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	429a      	cmp	r2, r3
 8008730:	d1da      	bne.n	80086e8 <create_chain+0x68>
 8008732:	2300      	movs	r3, #0
 8008734:	e038      	b.n	80087a8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008736:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008738:	f04f 32ff 	mov.w	r2, #4294967295
 800873c:	69f9      	ldr	r1, [r7, #28]
 800873e:	6938      	ldr	r0, [r7, #16]
 8008740:	f7ff fe1f 	bl	8008382 <put_fat>
 8008744:	4603      	mov	r3, r0
 8008746:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d109      	bne.n	8008762 <create_chain+0xe2>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d006      	beq.n	8008762 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008754:	69fa      	ldr	r2, [r7, #28]
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6938      	ldr	r0, [r7, #16]
 800875a:	f7ff fe12 	bl	8008382 <put_fat>
 800875e:	4603      	mov	r3, r0
 8008760:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d116      	bne.n	8008796 <create_chain+0x116>
		fs->last_clst = ncl;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	69fa      	ldr	r2, [r7, #28]
 800876c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	699a      	ldr	r2, [r3, #24]
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	3b02      	subs	r3, #2
 8008778:	429a      	cmp	r2, r3
 800877a:	d804      	bhi.n	8008786 <create_chain+0x106>
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	1e5a      	subs	r2, r3, #1
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	791b      	ldrb	r3, [r3, #4]
 800878a:	f043 0301 	orr.w	r3, r3, #1
 800878e:	b2da      	uxtb	r2, r3
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	711a      	strb	r2, [r3, #4]
 8008794:	e007      	b.n	80087a6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d102      	bne.n	80087a2 <create_chain+0x122>
 800879c:	f04f 33ff 	mov.w	r3, #4294967295
 80087a0:	e000      	b.n	80087a4 <create_chain+0x124>
 80087a2:	2301      	movs	r3, #1
 80087a4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80087a6:	69fb      	ldr	r3, [r7, #28]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3720      	adds	r7, #32
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b087      	sub	sp, #28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	3304      	adds	r3, #4
 80087c6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	899b      	ldrh	r3, [r3, #12]
 80087cc:	461a      	mov	r2, r3
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	8952      	ldrh	r2, [r2, #10]
 80087d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80087dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	1d1a      	adds	r2, r3, #4
 80087e2:	613a      	str	r2, [r7, #16]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <clmt_clust+0x42>
 80087ee:	2300      	movs	r3, #0
 80087f0:	e010      	b.n	8008814 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d307      	bcc.n	800880a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	3304      	adds	r3, #4
 8008806:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008808:	e7e9      	b.n	80087de <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800880a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	4413      	add	r3, r2
}
 8008814:	4618      	mov	r0, r3
 8008816:	371c      	adds	r7, #28
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008836:	d204      	bcs.n	8008842 <dir_sdi+0x22>
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	f003 031f 	and.w	r3, r3, #31
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008842:	2302      	movs	r3, #2
 8008844:	e071      	b.n	800892a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d106      	bne.n	8008866 <dir_sdi+0x46>
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b02      	cmp	r3, #2
 800885e:	d902      	bls.n	8008866 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008864:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10c      	bne.n	8008886 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	095b      	lsrs	r3, r3, #5
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	8912      	ldrh	r2, [r2, #8]
 8008874:	4293      	cmp	r3, r2
 8008876:	d301      	bcc.n	800887c <dir_sdi+0x5c>
 8008878:	2302      	movs	r3, #2
 800887a:	e056      	b.n	800892a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	61da      	str	r2, [r3, #28]
 8008884:	e02d      	b.n	80088e2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	895b      	ldrh	r3, [r3, #10]
 800888a:	461a      	mov	r2, r3
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	899b      	ldrh	r3, [r3, #12]
 8008890:	fb02 f303 	mul.w	r3, r2, r3
 8008894:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008896:	e019      	b.n	80088cc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6979      	ldr	r1, [r7, #20]
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff fc9c 	bl	80081da <get_fat>
 80088a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088aa:	d101      	bne.n	80088b0 <dir_sdi+0x90>
 80088ac:	2301      	movs	r3, #1
 80088ae:	e03c      	b.n	800892a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d904      	bls.n	80088c0 <dir_sdi+0xa0>
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d301      	bcc.n	80088c4 <dir_sdi+0xa4>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e032      	b.n	800892a <dir_sdi+0x10a>
			ofs -= csz;
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d2e1      	bcs.n	8008898 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80088d4:	6979      	ldr	r1, [r7, #20]
 80088d6:	6938      	ldr	r0, [r7, #16]
 80088d8:	f7ff fc60 	bl	800819c <clust2sect>
 80088dc:	4602      	mov	r2, r0
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <dir_sdi+0xd4>
 80088f0:	2302      	movs	r3, #2
 80088f2:	e01a      	b.n	800892a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	69da      	ldr	r2, [r3, #28]
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	899b      	ldrh	r3, [r3, #12]
 80088fc:	4619      	mov	r1, r3
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	fbb3 f3f1 	udiv	r3, r3, r1
 8008904:	441a      	add	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	899b      	ldrh	r3, [r3, #12]
 8008914:	461a      	mov	r2, r3
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	fbb3 f0f2 	udiv	r0, r3, r2
 800891c:	fb00 f202 	mul.w	r2, r0, r2
 8008920:	1a9b      	subs	r3, r3, r2
 8008922:	18ca      	adds	r2, r1, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b086      	sub	sp, #24
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	3320      	adds	r3, #32
 8008948:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	69db      	ldr	r3, [r3, #28]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <dir_next+0x28>
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008958:	d301      	bcc.n	800895e <dir_next+0x2c>
 800895a:	2304      	movs	r3, #4
 800895c:	e0bb      	b.n	8008ad6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	899b      	ldrh	r3, [r3, #12]
 8008962:	461a      	mov	r2, r3
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	fbb3 f1f2 	udiv	r1, r3, r2
 800896a:	fb01 f202 	mul.w	r2, r1, r2
 800896e:	1a9b      	subs	r3, r3, r2
 8008970:	2b00      	cmp	r3, #0
 8008972:	f040 809d 	bne.w	8008ab0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10b      	bne.n	80089a0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	095b      	lsrs	r3, r3, #5
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	8912      	ldrh	r2, [r2, #8]
 8008990:	4293      	cmp	r3, r2
 8008992:	f0c0 808d 	bcc.w	8008ab0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	61da      	str	r2, [r3, #28]
 800899c:	2304      	movs	r3, #4
 800899e:	e09a      	b.n	8008ad6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	899b      	ldrh	r3, [r3, #12]
 80089a4:	461a      	mov	r2, r3
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	8952      	ldrh	r2, [r2, #10]
 80089b0:	3a01      	subs	r2, #1
 80089b2:	4013      	ands	r3, r2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d17b      	bne.n	8008ab0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	4619      	mov	r1, r3
 80089c0:	4610      	mov	r0, r2
 80089c2:	f7ff fc0a 	bl	80081da <get_fat>
 80089c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d801      	bhi.n	80089d2 <dir_next+0xa0>
 80089ce:	2302      	movs	r3, #2
 80089d0:	e081      	b.n	8008ad6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d8:	d101      	bne.n	80089de <dir_next+0xac>
 80089da:	2301      	movs	r3, #1
 80089dc:	e07b      	b.n	8008ad6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d359      	bcc.n	8008a9c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d104      	bne.n	80089f8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	61da      	str	r2, [r3, #28]
 80089f4:	2304      	movs	r3, #4
 80089f6:	e06e      	b.n	8008ad6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	4619      	mov	r1, r3
 8008a00:	4610      	mov	r0, r2
 8008a02:	f7ff fe3d 	bl	8008680 <create_chain>
 8008a06:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <dir_next+0xe0>
 8008a0e:	2307      	movs	r3, #7
 8008a10:	e061      	b.n	8008ad6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d101      	bne.n	8008a1c <dir_next+0xea>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	e05c      	b.n	8008ad6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a22:	d101      	bne.n	8008a28 <dir_next+0xf6>
 8008a24:	2301      	movs	r3, #1
 8008a26:	e056      	b.n	8008ad6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f7ff fad5 	bl	8007fd8 <sync_window>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <dir_next+0x106>
 8008a34:	2301      	movs	r3, #1
 8008a36:	e04e      	b.n	8008ad6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	899b      	ldrh	r3, [r3, #12]
 8008a42:	461a      	mov	r2, r3
 8008a44:	2100      	movs	r1, #0
 8008a46:	f7ff f8fe 	bl	8007c46 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	613b      	str	r3, [r7, #16]
 8008a4e:	6979      	ldr	r1, [r7, #20]
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f7ff fba3 	bl	800819c <clust2sect>
 8008a56:	4602      	mov	r2, r0
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	635a      	str	r2, [r3, #52]	; 0x34
 8008a5c:	e012      	b.n	8008a84 <dir_next+0x152>
						fs->wflag = 1;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2201      	movs	r2, #1
 8008a62:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f7ff fab7 	bl	8007fd8 <sync_window>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <dir_next+0x142>
 8008a70:	2301      	movs	r3, #1
 8008a72:	e030      	b.n	8008ad6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	3301      	adds	r3, #1
 8008a78:	613b      	str	r3, [r7, #16]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7e:	1c5a      	adds	r2, r3, #1
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	635a      	str	r2, [r3, #52]	; 0x34
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	895b      	ldrh	r3, [r3, #10]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d3e6      	bcc.n	8008a5e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	1ad2      	subs	r2, r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008aa2:	6979      	ldr	r1, [r7, #20]
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f7ff fb79 	bl	800819c <clust2sect>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	899b      	ldrh	r3, [r3, #12]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ac8:	fb00 f202 	mul.w	r2, r0, r2
 8008acc:	1a9b      	subs	r3, r3, r2
 8008ace:	18ca      	adds	r2, r1, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3718      	adds	r7, #24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b086      	sub	sp, #24
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008aee:	2100      	movs	r1, #0
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff fe95 	bl	8008820 <dir_sdi>
 8008af6:	4603      	mov	r3, r0
 8008af8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d12b      	bne.n	8008b58 <dir_alloc+0x7a>
		n = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	69db      	ldr	r3, [r3, #28]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f7ff faa8 	bl	8008060 <move_window>
 8008b10:	4603      	mov	r3, r0
 8008b12:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d11d      	bne.n	8008b56 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2be5      	cmp	r3, #229	; 0xe5
 8008b22:	d004      	beq.n	8008b2e <dir_alloc+0x50>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d107      	bne.n	8008b3e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	3301      	adds	r3, #1
 8008b32:	613b      	str	r3, [r7, #16]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d102      	bne.n	8008b42 <dir_alloc+0x64>
 8008b3c:	e00c      	b.n	8008b58 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008b3e:	2300      	movs	r3, #0
 8008b40:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008b42:	2101      	movs	r1, #1
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7ff fef4 	bl	8008932 <dir_next>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d0d7      	beq.n	8008b04 <dir_alloc+0x26>
 8008b54:	e000      	b.n	8008b58 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008b56:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
 8008b5a:	2b04      	cmp	r3, #4
 8008b5c:	d101      	bne.n	8008b62 <dir_alloc+0x84>
 8008b5e:	2307      	movs	r3, #7
 8008b60:	75fb      	strb	r3, [r7, #23]
	return res;
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	331a      	adds	r3, #26
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fe ffc0 	bl	8007b00 <ld_word>
 8008b80:	4603      	mov	r3, r0
 8008b82:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d109      	bne.n	8008ba0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	3314      	adds	r3, #20
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fe ffb5 	bl	8007b00 <ld_word>
 8008b96:	4603      	mov	r3, r0
 8008b98:	041b      	lsls	r3, r3, #16
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	60f8      	str	r0, [r7, #12]
 8008bb2:	60b9      	str	r1, [r7, #8]
 8008bb4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	331a      	adds	r3, #26
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	b292      	uxth	r2, r2
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7fe ffd8 	bl	8007b76 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d109      	bne.n	8008be2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f103 0214 	add.w	r2, r3, #20
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	0c1b      	lsrs	r3, r3, #16
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4610      	mov	r0, r2
 8008bde:	f7fe ffca 	bl	8007b76 <st_word>
	}
}
 8008be2:	bf00      	nop
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
	...

08008bec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008bec:	b590      	push	{r4, r7, lr}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	331a      	adds	r3, #26
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fe ff80 	bl	8007b00 <ld_word>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <cmp_lfn+0x1e>
 8008c06:	2300      	movs	r3, #0
 8008c08:	e059      	b.n	8008cbe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c12:	1e5a      	subs	r2, r3, #1
 8008c14:	4613      	mov	r3, r2
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	4413      	add	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008c20:	2301      	movs	r3, #1
 8008c22:	81fb      	strh	r3, [r7, #14]
 8008c24:	2300      	movs	r3, #0
 8008c26:	613b      	str	r3, [r7, #16]
 8008c28:	e033      	b.n	8008c92 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008c2a:	4a27      	ldr	r2, [pc, #156]	; (8008cc8 <cmp_lfn+0xdc>)
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	4413      	add	r3, r2
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	4413      	add	r3, r2
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7fe ff61 	bl	8007b00 <ld_word>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008c42:	89fb      	ldrh	r3, [r7, #14]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01a      	beq.n	8008c7e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2bfe      	cmp	r3, #254	; 0xfe
 8008c4c:	d812      	bhi.n	8008c74 <cmp_lfn+0x88>
 8008c4e:	89bb      	ldrh	r3, [r7, #12]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f001 fe11 	bl	800a878 <ff_wtoupper>
 8008c56:	4603      	mov	r3, r0
 8008c58:	461c      	mov	r4, r3
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	1c5a      	adds	r2, r3, #1
 8008c5e:	617a      	str	r2, [r7, #20]
 8008c60:	005b      	lsls	r3, r3, #1
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	4413      	add	r3, r2
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f001 fe05 	bl	800a878 <ff_wtoupper>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	429c      	cmp	r4, r3
 8008c72:	d001      	beq.n	8008c78 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008c74:	2300      	movs	r3, #0
 8008c76:	e022      	b.n	8008cbe <cmp_lfn+0xd2>
			}
			wc = uc;
 8008c78:	89bb      	ldrh	r3, [r7, #12]
 8008c7a:	81fb      	strh	r3, [r7, #14]
 8008c7c:	e006      	b.n	8008c8c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008c7e:	89bb      	ldrh	r3, [r7, #12]
 8008c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d001      	beq.n	8008c8c <cmp_lfn+0xa0>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	e018      	b.n	8008cbe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	613b      	str	r3, [r7, #16]
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b0c      	cmp	r3, #12
 8008c96:	d9c8      	bls.n	8008c2a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00b      	beq.n	8008cbc <cmp_lfn+0xd0>
 8008ca4:	89fb      	ldrh	r3, [r7, #14]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d008      	beq.n	8008cbc <cmp_lfn+0xd0>
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <cmp_lfn+0xd0>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	e000      	b.n	8008cbe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008cbc:	2301      	movs	r3, #1
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd90      	pop	{r4, r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	0800e000 	.word	0x0800e000

08008ccc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b088      	sub	sp, #32
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	461a      	mov	r2, r3
 8008cda:	460b      	mov	r3, r1
 8008cdc:	71fb      	strb	r3, [r7, #7]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	330d      	adds	r3, #13
 8008ce6:	79ba      	ldrb	r2, [r7, #6]
 8008ce8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	330b      	adds	r3, #11
 8008cee:	220f      	movs	r2, #15
 8008cf0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	330c      	adds	r3, #12
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	331a      	adds	r3, #26
 8008cfe:	2100      	movs	r1, #0
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fe ff38 	bl	8007b76 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	1e5a      	subs	r2, r3, #1
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	82fb      	strh	r3, [r7, #22]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008d1e:	8afb      	ldrh	r3, [r7, #22]
 8008d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d007      	beq.n	8008d38 <put_lfn+0x6c>
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	1c5a      	adds	r2, r3, #1
 8008d2c:	61fa      	str	r2, [r7, #28]
 8008d2e:	005b      	lsls	r3, r3, #1
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	4413      	add	r3, r2
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008d38:	4a17      	ldr	r2, [pc, #92]	; (8008d98 <put_lfn+0xcc>)
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	4413      	add	r3, r2
 8008d46:	8afa      	ldrh	r2, [r7, #22]
 8008d48:	4611      	mov	r1, r2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe ff13 	bl	8007b76 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008d50:	8afb      	ldrh	r3, [r7, #22]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d102      	bne.n	8008d5c <put_lfn+0x90>
 8008d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d5a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	61bb      	str	r3, [r7, #24]
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b0c      	cmp	r3, #12
 8008d66:	d9da      	bls.n	8008d1e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008d68:	8afb      	ldrh	r3, [r7, #22]
 8008d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d006      	beq.n	8008d80 <put_lfn+0xb4>
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4413      	add	r3, r2
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d103      	bne.n	8008d88 <put_lfn+0xbc>
 8008d80:	79fb      	ldrb	r3, [r7, #7]
 8008d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d86:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	79fa      	ldrb	r2, [r7, #7]
 8008d8c:	701a      	strb	r2, [r3, #0]
}
 8008d8e:	bf00      	nop
 8008d90:	3720      	adds	r7, #32
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	0800e000 	.word	0x0800e000

08008d9c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08c      	sub	sp, #48	; 0x30
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008daa:	220b      	movs	r2, #11
 8008dac:	68b9      	ldr	r1, [r7, #8]
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f7fe ff28 	bl	8007c04 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2b05      	cmp	r3, #5
 8008db8:	d92b      	bls.n	8008e12 <gen_numname+0x76>
		sr = seq;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008dbe:	e022      	b.n	8008e06 <gen_numname+0x6a>
			wc = *lfn++;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	1c9a      	adds	r2, r3, #2
 8008dc4:	607a      	str	r2, [r7, #4]
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008dca:	2300      	movs	r3, #0
 8008dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dce:	e017      	b.n	8008e00 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	005a      	lsls	r2, r3, #1
 8008dd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	4413      	add	r3, r2
 8008ddc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008dde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008de0:	085b      	lsrs	r3, r3, #1
 8008de2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d005      	beq.n	8008dfa <gen_numname+0x5e>
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008df4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008df8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e02:	2b0f      	cmp	r3, #15
 8008e04:	d9e4      	bls.n	8008dd0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1d8      	bne.n	8008dc0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008e12:	2307      	movs	r3, #7
 8008e14:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	f003 030f 	and.w	r3, r3, #15
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	3330      	adds	r3, #48	; 0x30
 8008e22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e2a:	2b39      	cmp	r3, #57	; 0x39
 8008e2c:	d904      	bls.n	8008e38 <gen_numname+0x9c>
 8008e2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e32:	3307      	adds	r3, #7
 8008e34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3a:	1e5a      	subs	r2, r3, #1
 8008e3c:	62ba      	str	r2, [r7, #40]	; 0x28
 8008e3e:	3330      	adds	r3, #48	; 0x30
 8008e40:	443b      	add	r3, r7
 8008e42:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008e46:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	091b      	lsrs	r3, r3, #4
 8008e4e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1df      	bne.n	8008e16 <gen_numname+0x7a>
	ns[i] = '~';
 8008e56:	f107 0214 	add.w	r2, r7, #20
 8008e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5c:	4413      	add	r3, r2
 8008e5e:	227e      	movs	r2, #126	; 0x7e
 8008e60:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008e62:	2300      	movs	r3, #0
 8008e64:	627b      	str	r3, [r7, #36]	; 0x24
 8008e66:	e002      	b.n	8008e6e <gen_numname+0xd2>
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d205      	bcs.n	8008e82 <gen_numname+0xe6>
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	4413      	add	r3, r2
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	2b20      	cmp	r3, #32
 8008e80:	d1f2      	bne.n	8008e68 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	2b07      	cmp	r3, #7
 8008e86:	d807      	bhi.n	8008e98 <gen_numname+0xfc>
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	1c5a      	adds	r2, r3, #1
 8008e8c:	62ba      	str	r2, [r7, #40]	; 0x28
 8008e8e:	3330      	adds	r3, #48	; 0x30
 8008e90:	443b      	add	r3, r7
 8008e92:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008e96:	e000      	b.n	8008e9a <gen_numname+0xfe>
 8008e98:	2120      	movs	r1, #32
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	1c5a      	adds	r2, r3, #1
 8008e9e:	627a      	str	r2, [r7, #36]	; 0x24
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	460a      	mov	r2, r1
 8008ea6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	2b07      	cmp	r3, #7
 8008eac:	d9e9      	bls.n	8008e82 <gen_numname+0xe6>
}
 8008eae:	bf00      	nop
 8008eb0:	bf00      	nop
 8008eb2:	3730      	adds	r7, #48	; 0x30
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008ec4:	230b      	movs	r3, #11
 8008ec6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	0852      	lsrs	r2, r2, #1
 8008ece:	01db      	lsls	r3, r3, #7
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	1c59      	adds	r1, r3, #1
 8008ed8:	6079      	str	r1, [r7, #4]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	4413      	add	r3, r2
 8008ede:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	60bb      	str	r3, [r7, #8]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1ed      	bne.n	8008ec8 <sum_sfn+0x10>
	return sum;
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b086      	sub	sp, #24
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008f08:	2100      	movs	r1, #0
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff fc88 	bl	8008820 <dir_sdi>
 8008f10:	4603      	mov	r3, r0
 8008f12:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <dir_find+0x24>
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	e0a9      	b.n	8009072 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008f1e:	23ff      	movs	r3, #255	; 0xff
 8008f20:	753b      	strb	r3, [r7, #20]
 8008f22:	7d3b      	ldrb	r3, [r7, #20]
 8008f24:	757b      	strb	r3, [r7, #21]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f04f 32ff 	mov.w	r2, #4294967295
 8008f2c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6938      	ldr	r0, [r7, #16]
 8008f36:	f7ff f893 	bl	8008060 <move_window>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008f3e:	7dfb      	ldrb	r3, [r7, #23]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f040 8090 	bne.w	8009066 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008f4e:	7dbb      	ldrb	r3, [r7, #22]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d102      	bne.n	8008f5a <dir_find+0x60>
 8008f54:	2304      	movs	r3, #4
 8008f56:	75fb      	strb	r3, [r7, #23]
 8008f58:	e08a      	b.n	8009070 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	330b      	adds	r3, #11
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f66:	73fb      	strb	r3, [r7, #15]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	7bfa      	ldrb	r2, [r7, #15]
 8008f6c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008f6e:	7dbb      	ldrb	r3, [r7, #22]
 8008f70:	2be5      	cmp	r3, #229	; 0xe5
 8008f72:	d007      	beq.n	8008f84 <dir_find+0x8a>
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
 8008f76:	f003 0308 	and.w	r3, r3, #8
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d009      	beq.n	8008f92 <dir_find+0x98>
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	2b0f      	cmp	r3, #15
 8008f82:	d006      	beq.n	8008f92 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008f84:	23ff      	movs	r3, #255	; 0xff
 8008f86:	757b      	strb	r3, [r7, #21]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8008f90:	e05e      	b.n	8009050 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008f92:	7bfb      	ldrb	r3, [r7, #15]
 8008f94:	2b0f      	cmp	r3, #15
 8008f96:	d136      	bne.n	8009006 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d154      	bne.n	8009050 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008fa6:	7dbb      	ldrb	r3, [r7, #22]
 8008fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00d      	beq.n	8008fcc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a1b      	ldr	r3, [r3, #32]
 8008fb4:	7b5b      	ldrb	r3, [r3, #13]
 8008fb6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008fb8:	7dbb      	ldrb	r3, [r7, #22]
 8008fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fbe:	75bb      	strb	r3, [r7, #22]
 8008fc0:	7dbb      	ldrb	r3, [r7, #22]
 8008fc2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	695a      	ldr	r2, [r3, #20]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008fcc:	7dba      	ldrb	r2, [r7, #22]
 8008fce:	7d7b      	ldrb	r3, [r7, #21]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d115      	bne.n	8009000 <dir_find+0x106>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a1b      	ldr	r3, [r3, #32]
 8008fd8:	330d      	adds	r3, #13
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	7d3a      	ldrb	r2, [r7, #20]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d10e      	bne.n	8009000 <dir_find+0x106>
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	691a      	ldr	r2, [r3, #16]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	4619      	mov	r1, r3
 8008fec:	4610      	mov	r0, r2
 8008fee:	f7ff fdfd 	bl	8008bec <cmp_lfn>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d003      	beq.n	8009000 <dir_find+0x106>
 8008ff8:	7d7b      	ldrb	r3, [r7, #21]
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	e000      	b.n	8009002 <dir_find+0x108>
 8009000:	23ff      	movs	r3, #255	; 0xff
 8009002:	757b      	strb	r3, [r7, #21]
 8009004:	e024      	b.n	8009050 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009006:	7d7b      	ldrb	r3, [r7, #21]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d109      	bne.n	8009020 <dir_find+0x126>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a1b      	ldr	r3, [r3, #32]
 8009010:	4618      	mov	r0, r3
 8009012:	f7ff ff51 	bl	8008eb8 <sum_sfn>
 8009016:	4603      	mov	r3, r0
 8009018:	461a      	mov	r2, r3
 800901a:	7d3b      	ldrb	r3, [r7, #20]
 800901c:	4293      	cmp	r3, r2
 800901e:	d024      	beq.n	800906a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10a      	bne.n	8009044 <dir_find+0x14a>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a18      	ldr	r0, [r3, #32]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3324      	adds	r3, #36	; 0x24
 8009036:	220b      	movs	r2, #11
 8009038:	4619      	mov	r1, r3
 800903a:	f7fe fe1f 	bl	8007c7c <mem_cmp>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d014      	beq.n	800906e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009044:	23ff      	movs	r3, #255	; 0xff
 8009046:	757b      	strb	r3, [r7, #21]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f04f 32ff 	mov.w	r2, #4294967295
 800904e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009050:	2100      	movs	r1, #0
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7ff fc6d 	bl	8008932 <dir_next>
 8009058:	4603      	mov	r3, r0
 800905a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800905c:	7dfb      	ldrb	r3, [r7, #23]
 800905e:	2b00      	cmp	r3, #0
 8009060:	f43f af65 	beq.w	8008f2e <dir_find+0x34>
 8009064:	e004      	b.n	8009070 <dir_find+0x176>
		if (res != FR_OK) break;
 8009066:	bf00      	nop
 8009068:	e002      	b.n	8009070 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800906a:	bf00      	nop
 800906c:	e000      	b.n	8009070 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800906e:	bf00      	nop

	return res;
 8009070:	7dfb      	ldrb	r3, [r7, #23]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3718      	adds	r7, #24
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08c      	sub	sp, #48	; 0x30
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009090:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <dir_register+0x20>
 8009098:	2306      	movs	r3, #6
 800909a:	e0e0      	b.n	800925e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800909c:	2300      	movs	r3, #0
 800909e:	627b      	str	r3, [r7, #36]	; 0x24
 80090a0:	e002      	b.n	80090a8 <dir_register+0x2c>
 80090a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a4:	3301      	adds	r3, #1
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	691a      	ldr	r2, [r3, #16]
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	005b      	lsls	r3, r3, #1
 80090b0:	4413      	add	r3, r2
 80090b2:	881b      	ldrh	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1f4      	bne.n	80090a2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80090be:	f107 030c 	add.w	r3, r7, #12
 80090c2:	220c      	movs	r2, #12
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fe fd9d 	bl	8007c04 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d032      	beq.n	800913a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2240      	movs	r2, #64	; 0x40
 80090d8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80090dc:	2301      	movs	r3, #1
 80090de:	62bb      	str	r3, [r7, #40]	; 0x28
 80090e0:	e016      	b.n	8009110 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	691a      	ldr	r2, [r3, #16]
 80090ec:	f107 010c 	add.w	r1, r7, #12
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	f7ff fe53 	bl	8008d9c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff feff 	bl	8008efa <dir_find>
 80090fc:	4603      	mov	r3, r0
 80090fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009106:	2b00      	cmp	r3, #0
 8009108:	d106      	bne.n	8009118 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800910a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910c:	3301      	adds	r3, #1
 800910e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009112:	2b63      	cmp	r3, #99	; 0x63
 8009114:	d9e5      	bls.n	80090e2 <dir_register+0x66>
 8009116:	e000      	b.n	800911a <dir_register+0x9e>
			if (res != FR_OK) break;
 8009118:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911c:	2b64      	cmp	r3, #100	; 0x64
 800911e:	d101      	bne.n	8009124 <dir_register+0xa8>
 8009120:	2307      	movs	r3, #7
 8009122:	e09c      	b.n	800925e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009124:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009128:	2b04      	cmp	r3, #4
 800912a:	d002      	beq.n	8009132 <dir_register+0xb6>
 800912c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009130:	e095      	b.n	800925e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009132:	7dfa      	ldrb	r2, [r7, #23]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800913a:	7dfb      	ldrb	r3, [r7, #23]
 800913c:	f003 0302 	and.w	r3, r3, #2
 8009140:	2b00      	cmp	r3, #0
 8009142:	d007      	beq.n	8009154 <dir_register+0xd8>
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	330c      	adds	r3, #12
 8009148:	4a47      	ldr	r2, [pc, #284]	; (8009268 <dir_register+0x1ec>)
 800914a:	fba2 2303 	umull	r2, r3, r2, r3
 800914e:	089b      	lsrs	r3, r3, #2
 8009150:	3301      	adds	r3, #1
 8009152:	e000      	b.n	8009156 <dir_register+0xda>
 8009154:	2301      	movs	r3, #1
 8009156:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009158:	6a39      	ldr	r1, [r7, #32]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7ff fcbf 	bl	8008ade <dir_alloc>
 8009160:	4603      	mov	r3, r0
 8009162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800916a:	2b00      	cmp	r3, #0
 800916c:	d148      	bne.n	8009200 <dir_register+0x184>
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	3b01      	subs	r3, #1
 8009172:	623b      	str	r3, [r7, #32]
 8009174:	6a3b      	ldr	r3, [r7, #32]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d042      	beq.n	8009200 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	695a      	ldr	r2, [r3, #20]
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	015b      	lsls	r3, r3, #5
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff fb4a 	bl	8008820 <dir_sdi>
 800918c:	4603      	mov	r3, r0
 800918e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009196:	2b00      	cmp	r3, #0
 8009198:	d132      	bne.n	8009200 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	3324      	adds	r3, #36	; 0x24
 800919e:	4618      	mov	r0, r3
 80091a0:	f7ff fe8a 	bl	8008eb8 <sum_sfn>
 80091a4:	4603      	mov	r3, r0
 80091a6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	69db      	ldr	r3, [r3, #28]
 80091ac:	4619      	mov	r1, r3
 80091ae:	69f8      	ldr	r0, [r7, #28]
 80091b0:	f7fe ff56 	bl	8008060 <move_window>
 80091b4:	4603      	mov	r3, r0
 80091b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80091ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d11d      	bne.n	80091fe <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	6918      	ldr	r0, [r3, #16]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a19      	ldr	r1, [r3, #32]
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	7efb      	ldrb	r3, [r7, #27]
 80091d0:	f7ff fd7c 	bl	8008ccc <put_lfn>
				fs->wflag = 1;
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	2201      	movs	r2, #1
 80091d8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80091da:	2100      	movs	r1, #0
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff fba8 	bl	8008932 <dir_next>
 80091e2:	4603      	mov	r3, r0
 80091e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80091e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d107      	bne.n	8009200 <dir_register+0x184>
 80091f0:	6a3b      	ldr	r3, [r7, #32]
 80091f2:	3b01      	subs	r3, #1
 80091f4:	623b      	str	r3, [r7, #32]
 80091f6:	6a3b      	ldr	r3, [r7, #32]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1d5      	bne.n	80091a8 <dir_register+0x12c>
 80091fc:	e000      	b.n	8009200 <dir_register+0x184>
				if (res != FR_OK) break;
 80091fe:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009204:	2b00      	cmp	r3, #0
 8009206:	d128      	bne.n	800925a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	69db      	ldr	r3, [r3, #28]
 800920c:	4619      	mov	r1, r3
 800920e:	69f8      	ldr	r0, [r7, #28]
 8009210:	f7fe ff26 	bl	8008060 <move_window>
 8009214:	4603      	mov	r3, r0
 8009216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800921a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800921e:	2b00      	cmp	r3, #0
 8009220:	d11b      	bne.n	800925a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	2220      	movs	r2, #32
 8009228:	2100      	movs	r1, #0
 800922a:	4618      	mov	r0, r3
 800922c:	f7fe fd0b 	bl	8007c46 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a18      	ldr	r0, [r3, #32]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	3324      	adds	r3, #36	; 0x24
 8009238:	220b      	movs	r2, #11
 800923a:	4619      	mov	r1, r3
 800923c:	f7fe fce2 	bl	8007c04 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	330c      	adds	r3, #12
 800924c:	f002 0218 	and.w	r2, r2, #24
 8009250:	b2d2      	uxtb	r2, r2
 8009252:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	2201      	movs	r2, #1
 8009258:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800925a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800925e:	4618      	mov	r0, r3
 8009260:	3730      	adds	r7, #48	; 0x30
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	4ec4ec4f 	.word	0x4ec4ec4f

0800926c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08a      	sub	sp, #40	; 0x28
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	613b      	str	r3, [r7, #16]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	60fb      	str	r3, [r7, #12]
 8009284:	2300      	movs	r3, #0
 8009286:	617b      	str	r3, [r7, #20]
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	61ba      	str	r2, [r7, #24]
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	4413      	add	r3, r2
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800929a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800929c:	2b1f      	cmp	r3, #31
 800929e:	d940      	bls.n	8009322 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80092a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092a2:	2b2f      	cmp	r3, #47	; 0x2f
 80092a4:	d006      	beq.n	80092b4 <create_name+0x48>
 80092a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092a8:	2b5c      	cmp	r3, #92	; 0x5c
 80092aa:	d110      	bne.n	80092ce <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80092ac:	e002      	b.n	80092b4 <create_name+0x48>
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	3301      	adds	r3, #1
 80092b2:	61bb      	str	r3, [r7, #24]
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	4413      	add	r3, r2
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	2b2f      	cmp	r3, #47	; 0x2f
 80092be:	d0f6      	beq.n	80092ae <create_name+0x42>
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	4413      	add	r3, r2
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	2b5c      	cmp	r3, #92	; 0x5c
 80092ca:	d0f0      	beq.n	80092ae <create_name+0x42>
			break;
 80092cc:	e02a      	b.n	8009324 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2bfe      	cmp	r3, #254	; 0xfe
 80092d2:	d901      	bls.n	80092d8 <create_name+0x6c>
 80092d4:	2306      	movs	r3, #6
 80092d6:	e17d      	b.n	80095d4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80092d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80092de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092e0:	2101      	movs	r1, #1
 80092e2:	4618      	mov	r0, r3
 80092e4:	f001 fa8c 	bl	800a800 <ff_convert>
 80092e8:	4603      	mov	r3, r0
 80092ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80092ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d101      	bne.n	80092f6 <create_name+0x8a>
 80092f2:	2306      	movs	r3, #6
 80092f4:	e16e      	b.n	80095d4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80092f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092f8:	2b7f      	cmp	r3, #127	; 0x7f
 80092fa:	d809      	bhi.n	8009310 <create_name+0xa4>
 80092fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092fe:	4619      	mov	r1, r3
 8009300:	488d      	ldr	r0, [pc, #564]	; (8009538 <create_name+0x2cc>)
 8009302:	f7fe fce2 	bl	8007cca <chk_chr>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <create_name+0xa4>
 800930c:	2306      	movs	r3, #6
 800930e:	e161      	b.n	80095d4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	617a      	str	r2, [r7, #20]
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	4413      	add	r3, r2
 800931c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800931e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009320:	e7b4      	b.n	800928c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009322:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009324:	693a      	ldr	r2, [r7, #16]
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	441a      	add	r2, r3
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800932e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009330:	2b1f      	cmp	r3, #31
 8009332:	d801      	bhi.n	8009338 <create_name+0xcc>
 8009334:	2304      	movs	r3, #4
 8009336:	e000      	b.n	800933a <create_name+0xce>
 8009338:	2300      	movs	r3, #0
 800933a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800933e:	e011      	b.n	8009364 <create_name+0xf8>
		w = lfn[di - 1];
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009346:	3b01      	subs	r3, #1
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	4413      	add	r3, r2
 800934e:	881b      	ldrh	r3, [r3, #0]
 8009350:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009354:	2b20      	cmp	r3, #32
 8009356:	d002      	beq.n	800935e <create_name+0xf2>
 8009358:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800935a:	2b2e      	cmp	r3, #46	; 0x2e
 800935c:	d106      	bne.n	800936c <create_name+0x100>
		di--;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	3b01      	subs	r3, #1
 8009362:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1ea      	bne.n	8009340 <create_name+0xd4>
 800936a:	e000      	b.n	800936e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800936c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	4413      	add	r3, r2
 8009376:	2200      	movs	r2, #0
 8009378:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d101      	bne.n	8009384 <create_name+0x118>
 8009380:	2306      	movs	r3, #6
 8009382:	e127      	b.n	80095d4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3324      	adds	r3, #36	; 0x24
 8009388:	220b      	movs	r2, #11
 800938a:	2120      	movs	r1, #32
 800938c:	4618      	mov	r0, r3
 800938e:	f7fe fc5a 	bl	8007c46 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009392:	2300      	movs	r3, #0
 8009394:	61bb      	str	r3, [r7, #24]
 8009396:	e002      	b.n	800939e <create_name+0x132>
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	3301      	adds	r3, #1
 800939c:	61bb      	str	r3, [r7, #24]
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	4413      	add	r3, r2
 80093a6:	881b      	ldrh	r3, [r3, #0]
 80093a8:	2b20      	cmp	r3, #32
 80093aa:	d0f5      	beq.n	8009398 <create_name+0x12c>
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	005b      	lsls	r3, r3, #1
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	4413      	add	r3, r2
 80093b4:	881b      	ldrh	r3, [r3, #0]
 80093b6:	2b2e      	cmp	r3, #46	; 0x2e
 80093b8:	d0ee      	beq.n	8009398 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d009      	beq.n	80093d4 <create_name+0x168>
 80093c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093c4:	f043 0303 	orr.w	r3, r3, #3
 80093c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80093cc:	e002      	b.n	80093d4 <create_name+0x168>
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	3b01      	subs	r3, #1
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d009      	beq.n	80093ee <create_name+0x182>
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80093e0:	3b01      	subs	r3, #1
 80093e2:	005b      	lsls	r3, r3, #1
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	4413      	add	r3, r2
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	2b2e      	cmp	r3, #46	; 0x2e
 80093ec:	d1ef      	bne.n	80093ce <create_name+0x162>

	i = b = 0; ni = 8;
 80093ee:	2300      	movs	r3, #0
 80093f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80093f4:	2300      	movs	r3, #0
 80093f6:	623b      	str	r3, [r7, #32]
 80093f8:	2308      	movs	r3, #8
 80093fa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	1c5a      	adds	r2, r3, #1
 8009400:	61ba      	str	r2, [r7, #24]
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	4413      	add	r3, r2
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800940c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 8090 	beq.w	8009534 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009414:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009416:	2b20      	cmp	r3, #32
 8009418:	d006      	beq.n	8009428 <create_name+0x1bc>
 800941a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800941c:	2b2e      	cmp	r3, #46	; 0x2e
 800941e:	d10a      	bne.n	8009436 <create_name+0x1ca>
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	429a      	cmp	r2, r3
 8009426:	d006      	beq.n	8009436 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800942c:	f043 0303 	orr.w	r3, r3, #3
 8009430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009434:	e07d      	b.n	8009532 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009436:	6a3a      	ldr	r2, [r7, #32]
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	429a      	cmp	r2, r3
 800943c:	d203      	bcs.n	8009446 <create_name+0x1da>
 800943e:	69ba      	ldr	r2, [r7, #24]
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	429a      	cmp	r2, r3
 8009444:	d123      	bne.n	800948e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	2b0b      	cmp	r3, #11
 800944a:	d106      	bne.n	800945a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800944c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009450:	f043 0303 	orr.w	r3, r3, #3
 8009454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009458:	e075      	b.n	8009546 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800945a:	69ba      	ldr	r2, [r7, #24]
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	429a      	cmp	r2, r3
 8009460:	d005      	beq.n	800946e <create_name+0x202>
 8009462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009466:	f043 0303 	orr.w	r3, r3, #3
 800946a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800946e:	69ba      	ldr	r2, [r7, #24]
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	429a      	cmp	r2, r3
 8009474:	d866      	bhi.n	8009544 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	61bb      	str	r3, [r7, #24]
 800947a:	2308      	movs	r3, #8
 800947c:	623b      	str	r3, [r7, #32]
 800947e:	230b      	movs	r3, #11
 8009480:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009482:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800948c:	e051      	b.n	8009532 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800948e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009490:	2b7f      	cmp	r3, #127	; 0x7f
 8009492:	d914      	bls.n	80094be <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009494:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009496:	2100      	movs	r1, #0
 8009498:	4618      	mov	r0, r3
 800949a:	f001 f9b1 	bl	800a800 <ff_convert>
 800949e:	4603      	mov	r3, r0
 80094a0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80094a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d004      	beq.n	80094b2 <create_name+0x246>
 80094a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094aa:	3b80      	subs	r3, #128	; 0x80
 80094ac:	4a23      	ldr	r2, [pc, #140]	; (800953c <create_name+0x2d0>)
 80094ae:	5cd3      	ldrb	r3, [r2, r3]
 80094b0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80094b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094b6:	f043 0302 	orr.w	r3, r3, #2
 80094ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80094be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d007      	beq.n	80094d4 <create_name+0x268>
 80094c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094c6:	4619      	mov	r1, r3
 80094c8:	481d      	ldr	r0, [pc, #116]	; (8009540 <create_name+0x2d4>)
 80094ca:	f7fe fbfe 	bl	8007cca <chk_chr>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d008      	beq.n	80094e6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80094d4:	235f      	movs	r3, #95	; 0x5f
 80094d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80094d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094dc:	f043 0303 	orr.w	r3, r3, #3
 80094e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094e4:	e01b      	b.n	800951e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80094e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094e8:	2b40      	cmp	r3, #64	; 0x40
 80094ea:	d909      	bls.n	8009500 <create_name+0x294>
 80094ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094ee:	2b5a      	cmp	r3, #90	; 0x5a
 80094f0:	d806      	bhi.n	8009500 <create_name+0x294>
					b |= 2;
 80094f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80094f6:	f043 0302 	orr.w	r3, r3, #2
 80094fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80094fe:	e00e      	b.n	800951e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009500:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009502:	2b60      	cmp	r3, #96	; 0x60
 8009504:	d90b      	bls.n	800951e <create_name+0x2b2>
 8009506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009508:	2b7a      	cmp	r3, #122	; 0x7a
 800950a:	d808      	bhi.n	800951e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800950c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009510:	f043 0301 	orr.w	r3, r3, #1
 8009514:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009518:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800951a:	3b20      	subs	r3, #32
 800951c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	623a      	str	r2, [r7, #32]
 8009524:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009526:	b2d1      	uxtb	r1, r2
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	4413      	add	r3, r2
 800952c:	460a      	mov	r2, r1
 800952e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009532:	e763      	b.n	80093fc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009534:	bf00      	nop
 8009536:	e006      	b.n	8009546 <create_name+0x2da>
 8009538:	0800d9f0 	.word	0x0800d9f0
 800953c:	0800df80 	.word	0x0800df80
 8009540:	0800d9fc 	.word	0x0800d9fc
			if (si > di) break;			/* No extension */
 8009544:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800954c:	2be5      	cmp	r3, #229	; 0xe5
 800954e:	d103      	bne.n	8009558 <create_name+0x2ec>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2205      	movs	r2, #5
 8009554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	2b08      	cmp	r3, #8
 800955c:	d104      	bne.n	8009568 <create_name+0x2fc>
 800955e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009568:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800956c:	f003 030c 	and.w	r3, r3, #12
 8009570:	2b0c      	cmp	r3, #12
 8009572:	d005      	beq.n	8009580 <create_name+0x314>
 8009574:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009578:	f003 0303 	and.w	r3, r3, #3
 800957c:	2b03      	cmp	r3, #3
 800957e:	d105      	bne.n	800958c <create_name+0x320>
 8009580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009584:	f043 0302 	orr.w	r3, r3, #2
 8009588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800958c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009590:	f003 0302 	and.w	r3, r3, #2
 8009594:	2b00      	cmp	r3, #0
 8009596:	d117      	bne.n	80095c8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009598:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800959c:	f003 0303 	and.w	r3, r3, #3
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d105      	bne.n	80095b0 <create_name+0x344>
 80095a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095a8:	f043 0310 	orr.w	r3, r3, #16
 80095ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80095b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80095b4:	f003 030c 	and.w	r3, r3, #12
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	d105      	bne.n	80095c8 <create_name+0x35c>
 80095bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095c0:	f043 0308 	orr.w	r3, r3, #8
 80095c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80095ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80095d2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3728      	adds	r7, #40	; 0x28
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80095f0:	e002      	b.n	80095f8 <follow_path+0x1c>
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	3301      	adds	r3, #1
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2b2f      	cmp	r3, #47	; 0x2f
 80095fe:	d0f8      	beq.n	80095f2 <follow_path+0x16>
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b5c      	cmp	r3, #92	; 0x5c
 8009606:	d0f4      	beq.n	80095f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	2200      	movs	r2, #0
 800960c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	2b1f      	cmp	r3, #31
 8009614:	d80a      	bhi.n	800962c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2280      	movs	r2, #128	; 0x80
 800961a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800961e:	2100      	movs	r1, #0
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff f8fd 	bl	8008820 <dir_sdi>
 8009626:	4603      	mov	r3, r0
 8009628:	75fb      	strb	r3, [r7, #23]
 800962a:	e048      	b.n	80096be <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800962c:	463b      	mov	r3, r7
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7ff fe1b 	bl	800926c <create_name>
 8009636:	4603      	mov	r3, r0
 8009638:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800963a:	7dfb      	ldrb	r3, [r7, #23]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d139      	bne.n	80096b4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7ff fc5a 	bl	8008efa <dir_find>
 8009646:	4603      	mov	r3, r0
 8009648:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009650:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009652:	7dfb      	ldrb	r3, [r7, #23]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00a      	beq.n	800966e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	2b04      	cmp	r3, #4
 800965c:	d12c      	bne.n	80096b8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800965e:	7afb      	ldrb	r3, [r7, #11]
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	2b00      	cmp	r3, #0
 8009666:	d127      	bne.n	80096b8 <follow_path+0xdc>
 8009668:	2305      	movs	r3, #5
 800966a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800966c:	e024      	b.n	80096b8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800966e:	7afb      	ldrb	r3, [r7, #11]
 8009670:	f003 0304 	and.w	r3, r3, #4
 8009674:	2b00      	cmp	r3, #0
 8009676:	d121      	bne.n	80096bc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	799b      	ldrb	r3, [r3, #6]
 800967c:	f003 0310 	and.w	r3, r3, #16
 8009680:	2b00      	cmp	r3, #0
 8009682:	d102      	bne.n	800968a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009684:	2305      	movs	r3, #5
 8009686:	75fb      	strb	r3, [r7, #23]
 8009688:	e019      	b.n	80096be <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	8992      	ldrh	r2, [r2, #12]
 8009698:	fbb3 f0f2 	udiv	r0, r3, r2
 800969c:	fb00 f202 	mul.w	r2, r0, r2
 80096a0:	1a9b      	subs	r3, r3, r2
 80096a2:	440b      	add	r3, r1
 80096a4:	4619      	mov	r1, r3
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f7ff fa60 	bl	8008b6c <ld_clust>
 80096ac:	4602      	mov	r2, r0
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80096b2:	e7bb      	b.n	800962c <follow_path+0x50>
			if (res != FR_OK) break;
 80096b4:	bf00      	nop
 80096b6:	e002      	b.n	80096be <follow_path+0xe2>
				break;
 80096b8:	bf00      	nop
 80096ba:	e000      	b.n	80096be <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80096bc:	bf00      	nop
			}
		}
	}

	return res;
 80096be:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b087      	sub	sp, #28
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80096d0:	f04f 33ff 	mov.w	r3, #4294967295
 80096d4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d031      	beq.n	8009742 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	617b      	str	r3, [r7, #20]
 80096e4:	e002      	b.n	80096ec <get_ldnumber+0x24>
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	3301      	adds	r3, #1
 80096ea:	617b      	str	r3, [r7, #20]
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b1f      	cmp	r3, #31
 80096f2:	d903      	bls.n	80096fc <get_ldnumber+0x34>
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b3a      	cmp	r3, #58	; 0x3a
 80096fa:	d1f4      	bne.n	80096e6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	2b3a      	cmp	r3, #58	; 0x3a
 8009702:	d11c      	bne.n	800973e <get_ldnumber+0x76>
			tp = *path;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	1c5a      	adds	r2, r3, #1
 800970e:	60fa      	str	r2, [r7, #12]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	3b30      	subs	r3, #48	; 0x30
 8009714:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	2b09      	cmp	r3, #9
 800971a:	d80e      	bhi.n	800973a <get_ldnumber+0x72>
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	429a      	cmp	r2, r3
 8009722:	d10a      	bne.n	800973a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d107      	bne.n	800973a <get_ldnumber+0x72>
					vol = (int)i;
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	3301      	adds	r3, #1
 8009732:	617b      	str	r3, [r7, #20]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	e002      	b.n	8009744 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800973e:	2300      	movs	r3, #0
 8009740:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009742:	693b      	ldr	r3, [r7, #16]
}
 8009744:	4618      	mov	r0, r3
 8009746:	371c      	adds	r7, #28
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	70da      	strb	r2, [r3, #3]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f04f 32ff 	mov.w	r2, #4294967295
 8009766:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7fe fc78 	bl	8008060 <move_window>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <check_fs+0x2a>
 8009776:	2304      	movs	r3, #4
 8009778:	e038      	b.n	80097ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3338      	adds	r3, #56	; 0x38
 800977e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009782:	4618      	mov	r0, r3
 8009784:	f7fe f9bc 	bl	8007b00 <ld_word>
 8009788:	4603      	mov	r3, r0
 800978a:	461a      	mov	r2, r3
 800978c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009790:	429a      	cmp	r2, r3
 8009792:	d001      	beq.n	8009798 <check_fs+0x48>
 8009794:	2303      	movs	r3, #3
 8009796:	e029      	b.n	80097ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800979e:	2be9      	cmp	r3, #233	; 0xe9
 80097a0:	d009      	beq.n	80097b6 <check_fs+0x66>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80097a8:	2beb      	cmp	r3, #235	; 0xeb
 80097aa:	d11e      	bne.n	80097ea <check_fs+0x9a>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80097b2:	2b90      	cmp	r3, #144	; 0x90
 80097b4:	d119      	bne.n	80097ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	3338      	adds	r3, #56	; 0x38
 80097ba:	3336      	adds	r3, #54	; 0x36
 80097bc:	4618      	mov	r0, r3
 80097be:	f7fe f9b7 	bl	8007b30 <ld_dword>
 80097c2:	4603      	mov	r3, r0
 80097c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80097c8:	4a0a      	ldr	r2, [pc, #40]	; (80097f4 <check_fs+0xa4>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d101      	bne.n	80097d2 <check_fs+0x82>
 80097ce:	2300      	movs	r3, #0
 80097d0:	e00c      	b.n	80097ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	3338      	adds	r3, #56	; 0x38
 80097d6:	3352      	adds	r3, #82	; 0x52
 80097d8:	4618      	mov	r0, r3
 80097da:	f7fe f9a9 	bl	8007b30 <ld_dword>
 80097de:	4603      	mov	r3, r0
 80097e0:	4a05      	ldr	r2, [pc, #20]	; (80097f8 <check_fs+0xa8>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d101      	bne.n	80097ea <check_fs+0x9a>
 80097e6:	2300      	movs	r3, #0
 80097e8:	e000      	b.n	80097ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80097ea:	2302      	movs	r3, #2
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	00544146 	.word	0x00544146
 80097f8:	33544146 	.word	0x33544146

080097fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b096      	sub	sp, #88	; 0x58
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	4613      	mov	r3, r2
 8009808:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2200      	movs	r2, #0
 800980e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f7ff ff59 	bl	80096c8 <get_ldnumber>
 8009816:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800981a:	2b00      	cmp	r3, #0
 800981c:	da01      	bge.n	8009822 <find_volume+0x26>
 800981e:	230b      	movs	r3, #11
 8009820:	e265      	b.n	8009cee <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009822:	4a9f      	ldr	r2, [pc, #636]	; (8009aa0 <find_volume+0x2a4>)
 8009824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800982a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982e:	2b00      	cmp	r3, #0
 8009830:	d101      	bne.n	8009836 <find_volume+0x3a>
 8009832:	230c      	movs	r3, #12
 8009834:	e25b      	b.n	8009cee <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800983a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800983c:	79fb      	ldrb	r3, [r7, #7]
 800983e:	f023 0301 	bic.w	r3, r3, #1
 8009842:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d01a      	beq.n	8009882 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800984c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984e:	785b      	ldrb	r3, [r3, #1]
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe f8b7 	bl	80079c4 <disk_status>
 8009856:	4603      	mov	r3, r0
 8009858:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800985c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10c      	bne.n	8009882 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009868:	79fb      	ldrb	r3, [r7, #7]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d007      	beq.n	800987e <find_volume+0x82>
 800986e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009872:	f003 0304 	and.w	r3, r3, #4
 8009876:	2b00      	cmp	r3, #0
 8009878:	d001      	beq.n	800987e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800987a:	230a      	movs	r3, #10
 800987c:	e237      	b.n	8009cee <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800987e:	2300      	movs	r3, #0
 8009880:	e235      	b.n	8009cee <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009884:	2200      	movs	r2, #0
 8009886:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800988a:	b2da      	uxtb	r2, r3
 800988c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009892:	785b      	ldrb	r3, [r3, #1]
 8009894:	4618      	mov	r0, r3
 8009896:	f7fe f8af 	bl	80079f8 <disk_initialize>
 800989a:	4603      	mov	r3, r0
 800989c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80098a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098a4:	f003 0301 	and.w	r3, r3, #1
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80098ac:	2303      	movs	r3, #3
 80098ae:	e21e      	b.n	8009cee <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80098b0:	79fb      	ldrb	r3, [r7, #7]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d007      	beq.n	80098c6 <find_volume+0xca>
 80098b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80098c2:	230a      	movs	r3, #10
 80098c4:	e213      	b.n	8009cee <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80098c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c8:	7858      	ldrb	r0, [r3, #1]
 80098ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098cc:	330c      	adds	r3, #12
 80098ce:	461a      	mov	r2, r3
 80098d0:	2102      	movs	r1, #2
 80098d2:	f7fe f8f7 	bl	8007ac4 <disk_ioctl>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <find_volume+0xe4>
 80098dc:	2301      	movs	r3, #1
 80098de:	e206      	b.n	8009cee <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80098e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e2:	899b      	ldrh	r3, [r3, #12]
 80098e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e8:	d80d      	bhi.n	8009906 <find_volume+0x10a>
 80098ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ec:	899b      	ldrh	r3, [r3, #12]
 80098ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098f2:	d308      	bcc.n	8009906 <find_volume+0x10a>
 80098f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f6:	899b      	ldrh	r3, [r3, #12]
 80098f8:	461a      	mov	r2, r3
 80098fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fc:	899b      	ldrh	r3, [r3, #12]
 80098fe:	3b01      	subs	r3, #1
 8009900:	4013      	ands	r3, r2
 8009902:	2b00      	cmp	r3, #0
 8009904:	d001      	beq.n	800990a <find_volume+0x10e>
 8009906:	2301      	movs	r3, #1
 8009908:	e1f1      	b.n	8009cee <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800990e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009910:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009912:	f7ff ff1d 	bl	8009750 <check_fs>
 8009916:	4603      	mov	r3, r0
 8009918:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800991c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009920:	2b02      	cmp	r3, #2
 8009922:	d149      	bne.n	80099b8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009924:	2300      	movs	r3, #0
 8009926:	643b      	str	r3, [r7, #64]	; 0x40
 8009928:	e01e      	b.n	8009968 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800992a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009932:	011b      	lsls	r3, r3, #4
 8009934:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009938:	4413      	add	r3, r2
 800993a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993e:	3304      	adds	r3, #4
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d006      	beq.n	8009954 <find_volume+0x158>
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	3308      	adds	r3, #8
 800994a:	4618      	mov	r0, r3
 800994c:	f7fe f8f0 	bl	8007b30 <ld_dword>
 8009950:	4602      	mov	r2, r0
 8009952:	e000      	b.n	8009956 <find_volume+0x15a>
 8009954:	2200      	movs	r2, #0
 8009956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	3358      	adds	r3, #88	; 0x58
 800995c:	443b      	add	r3, r7
 800995e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009964:	3301      	adds	r3, #1
 8009966:	643b      	str	r3, [r7, #64]	; 0x40
 8009968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800996a:	2b03      	cmp	r3, #3
 800996c:	d9dd      	bls.n	800992a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800996e:	2300      	movs	r3, #0
 8009970:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <find_volume+0x182>
 8009978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800997a:	3b01      	subs	r3, #1
 800997c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800997e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	3358      	adds	r3, #88	; 0x58
 8009984:	443b      	add	r3, r7
 8009986:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800998a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800998c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800998e:	2b00      	cmp	r3, #0
 8009990:	d005      	beq.n	800999e <find_volume+0x1a2>
 8009992:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009994:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009996:	f7ff fedb 	bl	8009750 <check_fs>
 800999a:	4603      	mov	r3, r0
 800999c:	e000      	b.n	80099a0 <find_volume+0x1a4>
 800999e:	2303      	movs	r3, #3
 80099a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80099a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d905      	bls.n	80099b8 <find_volume+0x1bc>
 80099ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099ae:	3301      	adds	r3, #1
 80099b0:	643b      	str	r3, [r7, #64]	; 0x40
 80099b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099b4:	2b03      	cmp	r3, #3
 80099b6:	d9e2      	bls.n	800997e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80099b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099bc:	2b04      	cmp	r3, #4
 80099be:	d101      	bne.n	80099c4 <find_volume+0x1c8>
 80099c0:	2301      	movs	r3, #1
 80099c2:	e194      	b.n	8009cee <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80099c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d901      	bls.n	80099d0 <find_volume+0x1d4>
 80099cc:	230d      	movs	r3, #13
 80099ce:	e18e      	b.n	8009cee <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80099d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d2:	3338      	adds	r3, #56	; 0x38
 80099d4:	330b      	adds	r3, #11
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe f892 	bl	8007b00 <ld_word>
 80099dc:	4603      	mov	r3, r0
 80099de:	461a      	mov	r2, r3
 80099e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e2:	899b      	ldrh	r3, [r3, #12]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d001      	beq.n	80099ec <find_volume+0x1f0>
 80099e8:	230d      	movs	r3, #13
 80099ea:	e180      	b.n	8009cee <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80099ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ee:	3338      	adds	r3, #56	; 0x38
 80099f0:	3316      	adds	r3, #22
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fe f884 	bl	8007b00 <ld_word>
 80099f8:	4603      	mov	r3, r0
 80099fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80099fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d106      	bne.n	8009a10 <find_volume+0x214>
 8009a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a04:	3338      	adds	r3, #56	; 0x38
 8009a06:	3324      	adds	r3, #36	; 0x24
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fe f891 	bl	8007b30 <ld_dword>
 8009a0e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a14:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a22:	789b      	ldrb	r3, [r3, #2]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d005      	beq.n	8009a34 <find_volume+0x238>
 8009a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2a:	789b      	ldrb	r3, [r3, #2]
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d001      	beq.n	8009a34 <find_volume+0x238>
 8009a30:	230d      	movs	r3, #13
 8009a32:	e15c      	b.n	8009cee <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a36:	789b      	ldrb	r3, [r3, #2]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a3c:	fb02 f303 	mul.w	r3, r2, r3
 8009a40:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a50:	895b      	ldrh	r3, [r3, #10]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d008      	beq.n	8009a68 <find_volume+0x26c>
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	895b      	ldrh	r3, [r3, #10]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5e:	895b      	ldrh	r3, [r3, #10]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	4013      	ands	r3, r2
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <find_volume+0x270>
 8009a68:	230d      	movs	r3, #13
 8009a6a:	e140      	b.n	8009cee <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6e:	3338      	adds	r3, #56	; 0x38
 8009a70:	3311      	adds	r3, #17
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fe f844 	bl	8007b00 <ld_word>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a82:	891b      	ldrh	r3, [r3, #8]
 8009a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a86:	8992      	ldrh	r2, [r2, #12]
 8009a88:	0952      	lsrs	r2, r2, #5
 8009a8a:	b292      	uxth	r2, r2
 8009a8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a90:	fb01 f202 	mul.w	r2, r1, r2
 8009a94:	1a9b      	subs	r3, r3, r2
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d003      	beq.n	8009aa4 <find_volume+0x2a8>
 8009a9c:	230d      	movs	r3, #13
 8009a9e:	e126      	b.n	8009cee <find_volume+0x4f2>
 8009aa0:	200034dc 	.word	0x200034dc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa6:	3338      	adds	r3, #56	; 0x38
 8009aa8:	3313      	adds	r3, #19
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe f828 	bl	8007b00 <ld_word>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d106      	bne.n	8009ac8 <find_volume+0x2cc>
 8009aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abc:	3338      	adds	r3, #56	; 0x38
 8009abe:	3320      	adds	r3, #32
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fe f835 	bl	8007b30 <ld_dword>
 8009ac6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aca:	3338      	adds	r3, #56	; 0x38
 8009acc:	330e      	adds	r3, #14
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fe f816 	bl	8007b00 <ld_word>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009ad8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d101      	bne.n	8009ae2 <find_volume+0x2e6>
 8009ade:	230d      	movs	r3, #13
 8009ae0:	e105      	b.n	8009cee <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009ae2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ae6:	4413      	add	r3, r2
 8009ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aea:	8911      	ldrh	r1, [r2, #8]
 8009aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aee:	8992      	ldrh	r2, [r2, #12]
 8009af0:	0952      	lsrs	r2, r2, #5
 8009af2:	b292      	uxth	r2, r2
 8009af4:	fbb1 f2f2 	udiv	r2, r1, r2
 8009af8:	b292      	uxth	r2, r2
 8009afa:	4413      	add	r3, r2
 8009afc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d201      	bcs.n	8009b0a <find_volume+0x30e>
 8009b06:	230d      	movs	r3, #13
 8009b08:	e0f1      	b.n	8009cee <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b12:	8952      	ldrh	r2, [r2, #10]
 8009b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b18:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <find_volume+0x328>
 8009b20:	230d      	movs	r3, #13
 8009b22:	e0e4      	b.n	8009cee <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009b24:	2303      	movs	r3, #3
 8009b26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d802      	bhi.n	8009b3a <find_volume+0x33e>
 8009b34:	2302      	movs	r3, #2
 8009b36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d802      	bhi.n	8009b4a <find_volume+0x34e>
 8009b44:	2301      	movs	r3, #1
 8009b46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	1c9a      	adds	r2, r3, #2
 8009b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b50:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b56:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009b58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b5c:	441a      	add	r2, r3
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b60:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009b62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b66:	441a      	add	r2, r3
 8009b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009b6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d11e      	bne.n	8009bb2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b76:	3338      	adds	r3, #56	; 0x38
 8009b78:	332a      	adds	r3, #42	; 0x2a
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fd ffc0 	bl	8007b00 <ld_word>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <find_volume+0x38e>
 8009b86:	230d      	movs	r3, #13
 8009b88:	e0b1      	b.n	8009cee <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	891b      	ldrh	r3, [r3, #8]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <find_volume+0x39a>
 8009b92:	230d      	movs	r3, #13
 8009b94:	e0ab      	b.n	8009cee <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b98:	3338      	adds	r3, #56	; 0x38
 8009b9a:	332c      	adds	r3, #44	; 0x2c
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fd ffc7 	bl	8007b30 <ld_dword>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009baa:	69db      	ldr	r3, [r3, #28]
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	647b      	str	r3, [r7, #68]	; 0x44
 8009bb0:	e01f      	b.n	8009bf2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb4:	891b      	ldrh	r3, [r3, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d101      	bne.n	8009bbe <find_volume+0x3c2>
 8009bba:	230d      	movs	r3, #13
 8009bbc:	e097      	b.n	8009cee <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc4:	441a      	add	r2, r3
 8009bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009bca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d103      	bne.n	8009bda <find_volume+0x3de>
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	005b      	lsls	r3, r3, #1
 8009bd8:	e00a      	b.n	8009bf0 <find_volume+0x3f4>
 8009bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bdc:	69da      	ldr	r2, [r3, #28]
 8009bde:	4613      	mov	r3, r2
 8009be0:	005b      	lsls	r3, r3, #1
 8009be2:	4413      	add	r3, r2
 8009be4:	085a      	lsrs	r2, r3, #1
 8009be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009bf0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf4:	6a1a      	ldr	r2, [r3, #32]
 8009bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf8:	899b      	ldrh	r3, [r3, #12]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bfe:	440b      	add	r3, r1
 8009c00:	3b01      	subs	r3, #1
 8009c02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c04:	8989      	ldrh	r1, [r1, #12]
 8009c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d201      	bcs.n	8009c12 <find_volume+0x416>
 8009c0e:	230d      	movs	r3, #13
 8009c10:	e06d      	b.n	8009cee <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c14:	f04f 32ff 	mov.w	r2, #4294967295
 8009c18:	619a      	str	r2, [r3, #24]
 8009c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1c:	699a      	ldr	r2, [r3, #24]
 8009c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c20:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c24:	2280      	movs	r2, #128	; 0x80
 8009c26:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009c28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c2c:	2b03      	cmp	r3, #3
 8009c2e:	d149      	bne.n	8009cc4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c32:	3338      	adds	r3, #56	; 0x38
 8009c34:	3330      	adds	r3, #48	; 0x30
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fd ff62 	bl	8007b00 <ld_word>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d140      	bne.n	8009cc4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c44:	3301      	adds	r3, #1
 8009c46:	4619      	mov	r1, r3
 8009c48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c4a:	f7fe fa09 	bl	8008060 <move_window>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d137      	bne.n	8009cc4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c56:	2200      	movs	r2, #0
 8009c58:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5c:	3338      	adds	r3, #56	; 0x38
 8009c5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fd ff4c 	bl	8007b00 <ld_word>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d127      	bne.n	8009cc4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c76:	3338      	adds	r3, #56	; 0x38
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fd ff59 	bl	8007b30 <ld_dword>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	4a1d      	ldr	r2, [pc, #116]	; (8009cf8 <find_volume+0x4fc>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d11e      	bne.n	8009cc4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c88:	3338      	adds	r3, #56	; 0x38
 8009c8a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fd ff4e 	bl	8007b30 <ld_dword>
 8009c94:	4603      	mov	r3, r0
 8009c96:	4a19      	ldr	r2, [pc, #100]	; (8009cfc <find_volume+0x500>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d113      	bne.n	8009cc4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9e:	3338      	adds	r3, #56	; 0x38
 8009ca0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7fd ff43 	bl	8007b30 <ld_dword>
 8009caa:	4602      	mov	r2, r0
 8009cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cae:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb2:	3338      	adds	r3, #56	; 0x38
 8009cb4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fd ff39 	bl	8007b30 <ld_dword>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009cca:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009ccc:	4b0c      	ldr	r3, [pc, #48]	; (8009d00 <find_volume+0x504>)
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	4b0a      	ldr	r3, [pc, #40]	; (8009d00 <find_volume+0x504>)
 8009cd6:	801a      	strh	r2, [r3, #0]
 8009cd8:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <find_volume+0x504>)
 8009cda:	881a      	ldrh	r2, [r3, #0]
 8009cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cde:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	4a08      	ldr	r2, [pc, #32]	; (8009d04 <find_volume+0x508>)
 8009ce4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009ce6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ce8:	f7fe f952 	bl	8007f90 <clear_lock>
#endif
	return FR_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3758      	adds	r7, #88	; 0x58
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	41615252 	.word	0x41615252
 8009cfc:	61417272 	.word	0x61417272
 8009d00:	200034e0 	.word	0x200034e0
 8009d04:	20003504 	.word	0x20003504

08009d08 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009d12:	2309      	movs	r3, #9
 8009d14:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d01c      	beq.n	8009d56 <validate+0x4e>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d018      	beq.n	8009d56 <validate+0x4e>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d013      	beq.n	8009d56 <validate+0x4e>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	889a      	ldrh	r2, [r3, #4]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	88db      	ldrh	r3, [r3, #6]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d10c      	bne.n	8009d56 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	785b      	ldrb	r3, [r3, #1]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fd fe3e 	bl	80079c4 <disk_status>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <validate+0x4e>
			res = FR_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d102      	bne.n	8009d62 <validate+0x5a>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	e000      	b.n	8009d64 <validate+0x5c>
 8009d62:	2300      	movs	r3, #0
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	6013      	str	r3, [r2, #0]
	return res;
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
	...

08009d74 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b088      	sub	sp, #32
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009d86:	f107 0310 	add.w	r3, r7, #16
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7ff fc9c 	bl	80096c8 <get_ldnumber>
 8009d90:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	da01      	bge.n	8009d9c <f_mount+0x28>
 8009d98:	230b      	movs	r3, #11
 8009d9a:	e02b      	b.n	8009df4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009d9c:	4a17      	ldr	r2, [pc, #92]	; (8009dfc <f_mount+0x88>)
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009da4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d005      	beq.n	8009db8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009dac:	69b8      	ldr	r0, [r7, #24]
 8009dae:	f7fe f8ef 	bl	8007f90 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	2200      	movs	r2, #0
 8009db6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d002      	beq.n	8009dc4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	490d      	ldr	r1, [pc, #52]	; (8009dfc <f_mount+0x88>)
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <f_mount+0x66>
 8009dd4:	79fb      	ldrb	r3, [r7, #7]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d001      	beq.n	8009dde <f_mount+0x6a>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	e00a      	b.n	8009df4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009dde:	f107 010c 	add.w	r1, r7, #12
 8009de2:	f107 0308 	add.w	r3, r7, #8
 8009de6:	2200      	movs	r2, #0
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7ff fd07 	bl	80097fc <find_volume>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3720      	adds	r7, #32
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	200034dc 	.word	0x200034dc

08009e00 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b09a      	sub	sp, #104	; 0x68
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <f_open+0x18>
 8009e14:	2309      	movs	r3, #9
 8009e16:	e1bb      	b.n	800a190 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e1e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009e20:	79fa      	ldrb	r2, [r7, #7]
 8009e22:	f107 0114 	add.w	r1, r7, #20
 8009e26:	f107 0308 	add.w	r3, r7, #8
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7ff fce6 	bl	80097fc <find_volume>
 8009e30:	4603      	mov	r3, r0
 8009e32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009e36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f040 819f 	bne.w	800a17e <f_open+0x37e>
		dj.obj.fs = fs;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	f107 0318 	add.w	r3, r7, #24
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7ff fbc5 	bl	80095dc <follow_path>
 8009e52:	4603      	mov	r3, r0
 8009e54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009e58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d11a      	bne.n	8009e96 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009e60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009e64:	b25b      	sxtb	r3, r3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	da03      	bge.n	8009e72 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009e6a:	2306      	movs	r3, #6
 8009e6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009e70:	e011      	b.n	8009e96 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009e72:	79fb      	ldrb	r3, [r7, #7]
 8009e74:	f023 0301 	bic.w	r3, r3, #1
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	bf14      	ite	ne
 8009e7c:	2301      	movne	r3, #1
 8009e7e:	2300      	moveq	r3, #0
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	461a      	mov	r2, r3
 8009e84:	f107 0318 	add.w	r3, r7, #24
 8009e88:	4611      	mov	r1, r2
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fd ff38 	bl	8007d00 <chk_lock>
 8009e90:	4603      	mov	r3, r0
 8009e92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	f003 031c 	and.w	r3, r3, #28
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d07f      	beq.n	8009fa0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009ea0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d017      	beq.n	8009ed8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009ea8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009eac:	2b04      	cmp	r3, #4
 8009eae:	d10e      	bne.n	8009ece <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009eb0:	f7fd ff82 	bl	8007db8 <enq_lock>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d006      	beq.n	8009ec8 <f_open+0xc8>
 8009eba:	f107 0318 	add.w	r3, r7, #24
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7ff f8dc 	bl	800907c <dir_register>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	e000      	b.n	8009eca <f_open+0xca>
 8009ec8:	2312      	movs	r3, #18
 8009eca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009ece:	79fb      	ldrb	r3, [r7, #7]
 8009ed0:	f043 0308 	orr.w	r3, r3, #8
 8009ed4:	71fb      	strb	r3, [r7, #7]
 8009ed6:	e010      	b.n	8009efa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009ed8:	7fbb      	ldrb	r3, [r7, #30]
 8009eda:	f003 0311 	and.w	r3, r3, #17
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d003      	beq.n	8009eea <f_open+0xea>
					res = FR_DENIED;
 8009ee2:	2307      	movs	r3, #7
 8009ee4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009ee8:	e007      	b.n	8009efa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009eea:	79fb      	ldrb	r3, [r7, #7]
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <f_open+0xfa>
 8009ef4:	2308      	movs	r3, #8
 8009ef6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d168      	bne.n	8009fd4 <f_open+0x1d4>
 8009f02:	79fb      	ldrb	r3, [r7, #7]
 8009f04:	f003 0308 	and.w	r3, r3, #8
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d063      	beq.n	8009fd4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009f0c:	f7fd fcfc 	bl	8007908 <get_fattime>
 8009f10:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f14:	330e      	adds	r3, #14
 8009f16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fd fe47 	bl	8007bac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f20:	3316      	adds	r3, #22
 8009f22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fd fe41 	bl	8007bac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2c:	330b      	adds	r3, #11
 8009f2e:	2220      	movs	r2, #32
 8009f30:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f36:	4611      	mov	r1, r2
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fe fe17 	bl	8008b6c <ld_clust>
 8009f3e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f44:	2200      	movs	r2, #0
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fe fe2f 	bl	8008baa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4e:	331c      	adds	r3, #28
 8009f50:	2100      	movs	r1, #0
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fd fe2a 	bl	8007bac <st_dword>
					fs->wflag = 1;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d037      	beq.n	8009fd4 <f_open+0x1d4>
						dw = fs->winsect;
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f68:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009f6a:	f107 0318 	add.w	r3, r7, #24
 8009f6e:	2200      	movs	r2, #0
 8009f70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe fb1f 	bl	80085b6 <remove_chain>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009f7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d126      	bne.n	8009fd4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe f868 	bl	8008060 <move_window>
 8009f90:	4603      	mov	r3, r0
 8009f92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f9a:	3a01      	subs	r2, #1
 8009f9c:	615a      	str	r2, [r3, #20]
 8009f9e:	e019      	b.n	8009fd4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009fa0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d115      	bne.n	8009fd4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009fa8:	7fbb      	ldrb	r3, [r7, #30]
 8009faa:	f003 0310 	and.w	r3, r3, #16
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d003      	beq.n	8009fba <f_open+0x1ba>
					res = FR_NO_FILE;
 8009fb2:	2304      	movs	r3, #4
 8009fb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009fb8:	e00c      	b.n	8009fd4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009fba:	79fb      	ldrb	r3, [r7, #7]
 8009fbc:	f003 0302 	and.w	r3, r3, #2
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d007      	beq.n	8009fd4 <f_open+0x1d4>
 8009fc4:	7fbb      	ldrb	r3, [r7, #30]
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d002      	beq.n	8009fd4 <f_open+0x1d4>
						res = FR_DENIED;
 8009fce:	2307      	movs	r3, #7
 8009fd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009fd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d128      	bne.n	800a02e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009fdc:	79fb      	ldrb	r3, [r7, #7]
 8009fde:	f003 0308 	and.w	r3, r3, #8
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d003      	beq.n	8009fee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009fe6:	79fb      	ldrb	r3, [r7, #7]
 8009fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ffc:	79fb      	ldrb	r3, [r7, #7]
 8009ffe:	f023 0301 	bic.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	bf14      	ite	ne
 800a006:	2301      	movne	r3, #1
 800a008:	2300      	moveq	r3, #0
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	461a      	mov	r2, r3
 800a00e:	f107 0318 	add.w	r3, r7, #24
 800a012:	4611      	mov	r1, r2
 800a014:	4618      	mov	r0, r3
 800a016:	f7fd fef1 	bl	8007dfc <inc_lock>
 800a01a:	4602      	mov	r2, r0
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d102      	bne.n	800a02e <f_open+0x22e>
 800a028:	2302      	movs	r3, #2
 800a02a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a02e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a032:	2b00      	cmp	r3, #0
 800a034:	f040 80a3 	bne.w	800a17e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a03c:	4611      	mov	r1, r2
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe fd94 	bl	8008b6c <ld_clust>
 800a044:	4602      	mov	r2, r0
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	331c      	adds	r3, #28
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fd fd6e 	bl	8007b30 <ld_dword>
 800a054:	4602      	mov	r2, r0
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a060:	697a      	ldr	r2, [r7, #20]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	88da      	ldrh	r2, [r3, #6]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	79fa      	ldrb	r2, [r7, #7]
 800a072:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3330      	adds	r3, #48	; 0x30
 800a08a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a08e:	2100      	movs	r1, #0
 800a090:	4618      	mov	r0, r3
 800a092:	f7fd fdd8 	bl	8007c46 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a096:	79fb      	ldrb	r3, [r7, #7]
 800a098:	f003 0320 	and.w	r3, r3, #32
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d06e      	beq.n	800a17e <f_open+0x37e>
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d06a      	beq.n	800a17e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	68da      	ldr	r2, [r3, #12]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	895b      	ldrh	r3, [r3, #10]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	899b      	ldrh	r3, [r3, #12]
 800a0ba:	fb02 f303 	mul.w	r3, r2, r3
 800a0be:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0cc:	e016      	b.n	800a0fc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fe f881 	bl	80081da <get_fat>
 800a0d8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a0da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d802      	bhi.n	800a0e6 <f_open+0x2e6>
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a0e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ec:	d102      	bne.n	800a0f4 <f_open+0x2f4>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a0f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a100:	2b00      	cmp	r3, #0
 800a102:	d103      	bne.n	800a10c <f_open+0x30c>
 800a104:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a108:	429a      	cmp	r2, r3
 800a10a:	d8e0      	bhi.n	800a0ce <f_open+0x2ce>
				}
				fp->clust = clst;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a110:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a112:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a116:	2b00      	cmp	r3, #0
 800a118:	d131      	bne.n	800a17e <f_open+0x37e>
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	899b      	ldrh	r3, [r3, #12]
 800a11e:	461a      	mov	r2, r3
 800a120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a122:	fbb3 f1f2 	udiv	r1, r3, r2
 800a126:	fb01 f202 	mul.w	r2, r1, r2
 800a12a:	1a9b      	subs	r3, r3, r2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d026      	beq.n	800a17e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a134:	4618      	mov	r0, r3
 800a136:	f7fe f831 	bl	800819c <clust2sect>
 800a13a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a13c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d103      	bne.n	800a14a <f_open+0x34a>
						res = FR_INT_ERR;
 800a142:	2302      	movs	r3, #2
 800a144:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a148:	e019      	b.n	800a17e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	899b      	ldrh	r3, [r3, #12]
 800a14e:	461a      	mov	r2, r3
 800a150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a152:	fbb3 f2f2 	udiv	r2, r3, r2
 800a156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a158:	441a      	add	r2, r3
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	7858      	ldrb	r0, [r3, #1]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6a1a      	ldr	r2, [r3, #32]
 800a16c:	2301      	movs	r3, #1
 800a16e:	f7fd fc69 	bl	8007a44 <disk_read>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <f_open+0x37e>
 800a178:	2301      	movs	r3, #1
 800a17a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a17e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <f_open+0x38c>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a18c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a190:	4618      	mov	r0, r3
 800a192:	3768      	adds	r7, #104	; 0x68
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b08c      	sub	sp, #48	; 0x30
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f107 0210 	add.w	r2, r7, #16
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7ff fda5 	bl	8009d08 <validate>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a1c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d107      	bne.n	800a1dc <f_write+0x44>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	7d5b      	ldrb	r3, [r3, #21]
 800a1d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a1d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d002      	beq.n	800a1e2 <f_write+0x4a>
 800a1dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1e0:	e16a      	b.n	800a4b8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	7d1b      	ldrb	r3, [r3, #20]
 800a1e6:	f003 0302 	and.w	r3, r3, #2
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <f_write+0x5a>
 800a1ee:	2307      	movs	r3, #7
 800a1f0:	e162      	b.n	800a4b8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	699a      	ldr	r2, [r3, #24]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	441a      	add	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	f080 814c 	bcs.w	800a49c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	43db      	mvns	r3, r3
 800a20a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a20c:	e146      	b.n	800a49c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	699b      	ldr	r3, [r3, #24]
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	8992      	ldrh	r2, [r2, #12]
 800a216:	fbb3 f1f2 	udiv	r1, r3, r2
 800a21a:	fb01 f202 	mul.w	r2, r1, r2
 800a21e:	1a9b      	subs	r3, r3, r2
 800a220:	2b00      	cmp	r3, #0
 800a222:	f040 80f1 	bne.w	800a408 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	8992      	ldrh	r2, [r2, #12]
 800a22e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	8952      	ldrh	r2, [r2, #10]
 800a236:	3a01      	subs	r2, #1
 800a238:	4013      	ands	r3, r2
 800a23a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d143      	bne.n	800a2ca <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10c      	bne.n	800a264 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a252:	2b00      	cmp	r3, #0
 800a254:	d11a      	bne.n	800a28c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2100      	movs	r1, #0
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe fa10 	bl	8008680 <create_chain>
 800a260:	62b8      	str	r0, [r7, #40]	; 0x28
 800a262:	e013      	b.n	800a28c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d007      	beq.n	800a27c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	4619      	mov	r1, r3
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f7fe fa9c 	bl	80087b0 <clmt_clust>
 800a278:	62b8      	str	r0, [r7, #40]	; 0x28
 800a27a:	e007      	b.n	800a28c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	4619      	mov	r1, r3
 800a284:	4610      	mov	r0, r2
 800a286:	f7fe f9fb 	bl	8008680 <create_chain>
 800a28a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f000 8109 	beq.w	800a4a6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	2b01      	cmp	r3, #1
 800a298:	d104      	bne.n	800a2a4 <f_write+0x10c>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2202      	movs	r2, #2
 800a29e:	755a      	strb	r2, [r3, #21]
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	e109      	b.n	800a4b8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2aa:	d104      	bne.n	800a2b6 <f_write+0x11e>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	755a      	strb	r2, [r3, #21]
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e100      	b.n	800a4b8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2ba:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d102      	bne.n	800a2ca <f_write+0x132>
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2c8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	7d1b      	ldrb	r3, [r3, #20]
 800a2ce:	b25b      	sxtb	r3, r3
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	da18      	bge.n	800a306 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	7858      	ldrb	r0, [r3, #1]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6a1a      	ldr	r2, [r3, #32]
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	f7fd fbce 	bl	8007a84 <disk_write>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d004      	beq.n	800a2f8 <f_write+0x160>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	755a      	strb	r2, [r3, #21]
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e0df      	b.n	800a4b8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	7d1b      	ldrb	r3, [r3, #20]
 800a2fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a300:	b2da      	uxtb	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	69db      	ldr	r3, [r3, #28]
 800a30c:	4619      	mov	r1, r3
 800a30e:	4610      	mov	r0, r2
 800a310:	f7fd ff44 	bl	800819c <clust2sect>
 800a314:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d104      	bne.n	800a326 <f_write+0x18e>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2202      	movs	r2, #2
 800a320:	755a      	strb	r2, [r3, #21]
 800a322:	2302      	movs	r3, #2
 800a324:	e0c8      	b.n	800a4b8 <f_write+0x320>
			sect += csect;
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	4413      	add	r3, r2
 800a32c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	899b      	ldrh	r3, [r3, #12]
 800a332:	461a      	mov	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	fbb3 f3f2 	udiv	r3, r3, r2
 800a33a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a33c:	6a3b      	ldr	r3, [r7, #32]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d043      	beq.n	800a3ca <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a342:	69ba      	ldr	r2, [r7, #24]
 800a344:	6a3b      	ldr	r3, [r7, #32]
 800a346:	4413      	add	r3, r2
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	8952      	ldrh	r2, [r2, #10]
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d905      	bls.n	800a35c <f_write+0x1c4>
					cc = fs->csize - csect;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	895b      	ldrh	r3, [r3, #10]
 800a354:	461a      	mov	r2, r3
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	7858      	ldrb	r0, [r3, #1]
 800a360:	6a3b      	ldr	r3, [r7, #32]
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	69f9      	ldr	r1, [r7, #28]
 800a366:	f7fd fb8d 	bl	8007a84 <disk_write>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d004      	beq.n	800a37a <f_write+0x1e2>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2201      	movs	r2, #1
 800a374:	755a      	strb	r2, [r3, #21]
 800a376:	2301      	movs	r3, #1
 800a378:	e09e      	b.n	800a4b8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6a1a      	ldr	r2, [r3, #32]
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	1ad3      	subs	r3, r2, r3
 800a382:	6a3a      	ldr	r2, [r7, #32]
 800a384:	429a      	cmp	r2, r3
 800a386:	d918      	bls.n	800a3ba <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6a1a      	ldr	r2, [r3, #32]
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	8992      	ldrh	r2, [r2, #12]
 800a39a:	fb02 f303 	mul.w	r3, r2, r3
 800a39e:	69fa      	ldr	r2, [r7, #28]
 800a3a0:	18d1      	adds	r1, r2, r3
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	899b      	ldrh	r3, [r3, #12]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	f7fd fc2c 	bl	8007c04 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	7d1b      	ldrb	r3, [r3, #20]
 800a3b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3b4:	b2da      	uxtb	r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	899b      	ldrh	r3, [r3, #12]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	6a3b      	ldr	r3, [r7, #32]
 800a3c2:	fb02 f303 	mul.w	r3, r2, r3
 800a3c6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a3c8:	e04b      	b.n	800a462 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d016      	beq.n	800a402 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	699a      	ldr	r2, [r3, #24]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d210      	bcs.n	800a402 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	7858      	ldrb	r0, [r3, #1]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	697a      	ldr	r2, [r7, #20]
 800a3ee:	f7fd fb29 	bl	8007a44 <disk_read>
 800a3f2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d004      	beq.n	800a402 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	755a      	strb	r2, [r3, #21]
 800a3fe:	2301      	movs	r3, #1
 800a400:	e05a      	b.n	800a4b8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	899b      	ldrh	r3, [r3, #12]
 800a40c:	4618      	mov	r0, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	699b      	ldr	r3, [r3, #24]
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	8992      	ldrh	r2, [r2, #12]
 800a416:	fbb3 f1f2 	udiv	r1, r3, r2
 800a41a:	fb01 f202 	mul.w	r2, r1, r2
 800a41e:	1a9b      	subs	r3, r3, r2
 800a420:	1ac3      	subs	r3, r0, r3
 800a422:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d901      	bls.n	800a430 <f_write+0x298>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	8992      	ldrh	r2, [r2, #12]
 800a43e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a442:	fb00 f202 	mul.w	r2, r0, r2
 800a446:	1a9b      	subs	r3, r3, r2
 800a448:	440b      	add	r3, r1
 800a44a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a44c:	69f9      	ldr	r1, [r7, #28]
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fd fbd8 	bl	8007c04 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	7d1b      	ldrb	r3, [r3, #20]
 800a458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a462:	69fa      	ldr	r2, [r7, #28]
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a466:	4413      	add	r3, r2
 800a468:	61fb      	str	r3, [r7, #28]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	699a      	ldr	r2, [r3, #24]
 800a46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a470:	441a      	add	r2, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	619a      	str	r2, [r3, #24]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	68da      	ldr	r2, [r3, #12]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	429a      	cmp	r2, r3
 800a480:	bf38      	it	cc
 800a482:	461a      	movcc	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	60da      	str	r2, [r3, #12]
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48e:	441a      	add	r2, r3
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f47f aeb5 	bne.w	800a20e <f_write+0x76>
 800a4a4:	e000      	b.n	800a4a8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a4a6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	7d1b      	ldrb	r3, [r3, #20]
 800a4ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b0:	b2da      	uxtb	r2, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3730      	adds	r7, #48	; 0x30
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f107 0208 	add.w	r2, r7, #8
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7ff fc19 	bl	8009d08 <validate>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a4da:	7dfb      	ldrb	r3, [r7, #23]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d168      	bne.n	800a5b2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	7d1b      	ldrb	r3, [r3, #20]
 800a4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d062      	beq.n	800a5b2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	7d1b      	ldrb	r3, [r3, #20]
 800a4f0:	b25b      	sxtb	r3, r3
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	da15      	bge.n	800a522 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	7858      	ldrb	r0, [r3, #1]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a1a      	ldr	r2, [r3, #32]
 800a504:	2301      	movs	r3, #1
 800a506:	f7fd fabd 	bl	8007a84 <disk_write>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <f_sync+0x54>
 800a510:	2301      	movs	r3, #1
 800a512:	e04f      	b.n	800a5b4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	7d1b      	ldrb	r3, [r3, #20]
 800a518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a51c:	b2da      	uxtb	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a522:	f7fd f9f1 	bl	8007908 <get_fattime>
 800a526:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52e:	4619      	mov	r1, r3
 800a530:	4610      	mov	r0, r2
 800a532:	f7fd fd95 	bl	8008060 <move_window>
 800a536:	4603      	mov	r3, r0
 800a538:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d138      	bne.n	800a5b2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a544:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	330b      	adds	r3, #11
 800a54a:	781a      	ldrb	r2, [r3, #0]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	330b      	adds	r3, #11
 800a550:	f042 0220 	orr.w	r2, r2, #32
 800a554:	b2d2      	uxtb	r2, r2
 800a556:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6818      	ldr	r0, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	461a      	mov	r2, r3
 800a562:	68f9      	ldr	r1, [r7, #12]
 800a564:	f7fe fb21 	bl	8008baa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f103 021c 	add.w	r2, r3, #28
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	4619      	mov	r1, r3
 800a574:	4610      	mov	r0, r2
 800a576:	f7fd fb19 	bl	8007bac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3316      	adds	r3, #22
 800a57e:	6939      	ldr	r1, [r7, #16]
 800a580:	4618      	mov	r0, r3
 800a582:	f7fd fb13 	bl	8007bac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	3312      	adds	r3, #18
 800a58a:	2100      	movs	r1, #0
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fd faf2 	bl	8007b76 <st_word>
					fs->wflag = 1;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2201      	movs	r2, #1
 800a596:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fd fd8e 	bl	80080bc <sync_fs>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	7d1b      	ldrb	r3, [r3, #20]
 800a5a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a5b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f7ff ff7b 	bl	800a4c0 <f_sync>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a5ce:	7bfb      	ldrb	r3, [r7, #15]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d118      	bne.n	800a606 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f107 0208 	add.w	r2, r7, #8
 800a5da:	4611      	mov	r1, r2
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7ff fb93 	bl	8009d08 <validate>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a5e6:	7bfb      	ldrb	r3, [r7, #15]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10c      	bne.n	800a606 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fd fc91 	bl	8007f18 <dec_lock>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d102      	bne.n	800a606 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a606:	7bfb      	ldrb	r3, [r7, #15]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	460b      	mov	r3, r1
 800a61a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a61c:	78fb      	ldrb	r3, [r7, #3]
 800a61e:	2b0a      	cmp	r3, #10
 800a620:	d103      	bne.n	800a62a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a622:	210d      	movs	r1, #13
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f7ff fff3 	bl	800a610 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	db25      	blt.n	800a682 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	1c5a      	adds	r2, r3, #1
 800a63a:	60fa      	str	r2, [r7, #12]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	4413      	add	r3, r2
 800a640:	78fa      	ldrb	r2, [r7, #3]
 800a642:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2b3c      	cmp	r3, #60	; 0x3c
 800a648:	dd12      	ble.n	800a670 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6818      	ldr	r0, [r3, #0]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f103 010c 	add.w	r1, r3, #12
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	f107 0308 	add.w	r3, r7, #8
 800a65a:	f7ff fd9d 	bl	800a198 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	429a      	cmp	r2, r3
 800a664:	d101      	bne.n	800a66a <putc_bfd+0x5a>
 800a666:	2300      	movs	r3, #0
 800a668:	e001      	b.n	800a66e <putc_bfd+0x5e>
 800a66a:	f04f 33ff 	mov.w	r3, #4294967295
 800a66e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	1c5a      	adds	r2, r3, #1
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	609a      	str	r2, [r3, #8]
 800a680:	e000      	b.n	800a684 <putc_bfd+0x74>
	if (i < 0) return;
 800a682:	bf00      	nop
}
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b084      	sub	sp, #16
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	db16      	blt.n	800a6c8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6818      	ldr	r0, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f103 010c 	add.w	r1, r3, #12
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	f107 030c 	add.w	r3, r7, #12
 800a6ae:	f7ff fd73 	bl	800a198 <f_write>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d107      	bne.n	800a6c8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d102      	bne.n	800a6c8 <putc_flush+0x3e>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	e001      	b.n	800a6cc <putc_flush+0x42>
	return EOF;
 800a6c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	605a      	str	r2, [r3, #4]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685a      	ldr	r2, [r3, #4]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	609a      	str	r2, [r3, #8]
}
 800a6f2:	bf00      	nop
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b096      	sub	sp, #88	; 0x58
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800a708:	f107 030c 	add.w	r3, r7, #12
 800a70c:	6839      	ldr	r1, [r7, #0]
 800a70e:	4618      	mov	r0, r3
 800a710:	f7ff ffe0 	bl	800a6d4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a714:	e009      	b.n	800a72a <f_puts+0x2c>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	1c5a      	adds	r2, r3, #1
 800a71a:	607a      	str	r2, [r7, #4]
 800a71c:	781a      	ldrb	r2, [r3, #0]
 800a71e:	f107 030c 	add.w	r3, r7, #12
 800a722:	4611      	mov	r1, r2
 800a724:	4618      	mov	r0, r3
 800a726:	f7ff ff73 	bl	800a610 <putc_bfd>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1f1      	bne.n	800a716 <f_puts+0x18>
	return putc_flush(&pb);
 800a732:	f107 030c 	add.w	r3, r7, #12
 800a736:	4618      	mov	r0, r3
 800a738:	f7ff ffa7 	bl	800a68a <putc_flush>
 800a73c:	4603      	mov	r3, r0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3758      	adds	r7, #88	; 0x58
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
	...

0800a748 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a748:	b480      	push	{r7}
 800a74a:	b087      	sub	sp, #28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	4613      	mov	r3, r2
 800a754:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a756:	2301      	movs	r3, #1
 800a758:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a75e:	4b1f      	ldr	r3, [pc, #124]	; (800a7dc <FATFS_LinkDriverEx+0x94>)
 800a760:	7a5b      	ldrb	r3, [r3, #9]
 800a762:	b2db      	uxtb	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	d131      	bne.n	800a7cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a768:	4b1c      	ldr	r3, [pc, #112]	; (800a7dc <FATFS_LinkDriverEx+0x94>)
 800a76a:	7a5b      	ldrb	r3, [r3, #9]
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	461a      	mov	r2, r3
 800a770:	4b1a      	ldr	r3, [pc, #104]	; (800a7dc <FATFS_LinkDriverEx+0x94>)
 800a772:	2100      	movs	r1, #0
 800a774:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a776:	4b19      	ldr	r3, [pc, #100]	; (800a7dc <FATFS_LinkDriverEx+0x94>)
 800a778:	7a5b      	ldrb	r3, [r3, #9]
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	4a17      	ldr	r2, [pc, #92]	; (800a7dc <FATFS_LinkDriverEx+0x94>)
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	4413      	add	r3, r2
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a786:	4b15      	ldr	r3, [pc, #84]	; (800a7dc <FATFS_LinkDriverEx+0x94>)
 800a788:	7a5b      	ldrb	r3, [r3, #9]
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	461a      	mov	r2, r3
 800a78e:	4b13      	ldr	r3, [pc, #76]	; (800a7dc <FATFS_LinkDriverEx+0x94>)
 800a790:	4413      	add	r3, r2
 800a792:	79fa      	ldrb	r2, [r7, #7]
 800a794:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a796:	4b11      	ldr	r3, [pc, #68]	; (800a7dc <FATFS_LinkDriverEx+0x94>)
 800a798:	7a5b      	ldrb	r3, [r3, #9]
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	1c5a      	adds	r2, r3, #1
 800a79e:	b2d1      	uxtb	r1, r2
 800a7a0:	4a0e      	ldr	r2, [pc, #56]	; (800a7dc <FATFS_LinkDriverEx+0x94>)
 800a7a2:	7251      	strb	r1, [r2, #9]
 800a7a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a7a6:	7dbb      	ldrb	r3, [r7, #22]
 800a7a8:	3330      	adds	r3, #48	; 0x30
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	223a      	movs	r2, #58	; 0x3a
 800a7b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	3302      	adds	r3, #2
 800a7bc:	222f      	movs	r2, #47	; 0x2f
 800a7be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	3303      	adds	r3, #3
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a7cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	371c      	adds	r7, #28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	20003704 	.word	0x20003704

0800a7e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	6839      	ldr	r1, [r7, #0]
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7ff ffaa 	bl	800a748 <FATFS_LinkDriverEx>
 800a7f4:	4603      	mov	r3, r0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
	...

0800a800 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	4603      	mov	r3, r0
 800a808:	6039      	str	r1, [r7, #0]
 800a80a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a80c:	88fb      	ldrh	r3, [r7, #6]
 800a80e:	2b7f      	cmp	r3, #127	; 0x7f
 800a810:	d802      	bhi.n	800a818 <ff_convert+0x18>
		c = chr;
 800a812:	88fb      	ldrh	r3, [r7, #6]
 800a814:	81fb      	strh	r3, [r7, #14]
 800a816:	e025      	b.n	800a864 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00b      	beq.n	800a836 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a81e:	88fb      	ldrh	r3, [r7, #6]
 800a820:	2bff      	cmp	r3, #255	; 0xff
 800a822:	d805      	bhi.n	800a830 <ff_convert+0x30>
 800a824:	88fb      	ldrh	r3, [r7, #6]
 800a826:	3b80      	subs	r3, #128	; 0x80
 800a828:	4a12      	ldr	r2, [pc, #72]	; (800a874 <ff_convert+0x74>)
 800a82a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a82e:	e000      	b.n	800a832 <ff_convert+0x32>
 800a830:	2300      	movs	r3, #0
 800a832:	81fb      	strh	r3, [r7, #14]
 800a834:	e016      	b.n	800a864 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a836:	2300      	movs	r3, #0
 800a838:	81fb      	strh	r3, [r7, #14]
 800a83a:	e009      	b.n	800a850 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a83c:	89fb      	ldrh	r3, [r7, #14]
 800a83e:	4a0d      	ldr	r2, [pc, #52]	; (800a874 <ff_convert+0x74>)
 800a840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a844:	88fa      	ldrh	r2, [r7, #6]
 800a846:	429a      	cmp	r2, r3
 800a848:	d006      	beq.n	800a858 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a84a:	89fb      	ldrh	r3, [r7, #14]
 800a84c:	3301      	adds	r3, #1
 800a84e:	81fb      	strh	r3, [r7, #14]
 800a850:	89fb      	ldrh	r3, [r7, #14]
 800a852:	2b7f      	cmp	r3, #127	; 0x7f
 800a854:	d9f2      	bls.n	800a83c <ff_convert+0x3c>
 800a856:	e000      	b.n	800a85a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a858:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a85a:	89fb      	ldrh	r3, [r7, #14]
 800a85c:	3380      	adds	r3, #128	; 0x80
 800a85e:	b29b      	uxth	r3, r3
 800a860:	b2db      	uxtb	r3, r3
 800a862:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a864:	89fb      	ldrh	r3, [r7, #14]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	0800e010 	.word	0x0800e010

0800a878 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a878:	b480      	push	{r7}
 800a87a:	b087      	sub	sp, #28
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a882:	88fb      	ldrh	r3, [r7, #6]
 800a884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a888:	d201      	bcs.n	800a88e <ff_wtoupper+0x16>
 800a88a:	4b3e      	ldr	r3, [pc, #248]	; (800a984 <ff_wtoupper+0x10c>)
 800a88c:	e000      	b.n	800a890 <ff_wtoupper+0x18>
 800a88e:	4b3e      	ldr	r3, [pc, #248]	; (800a988 <ff_wtoupper+0x110>)
 800a890:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	1c9a      	adds	r2, r3, #2
 800a896:	617a      	str	r2, [r7, #20]
 800a898:	881b      	ldrh	r3, [r3, #0]
 800a89a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a89c:	8a7b      	ldrh	r3, [r7, #18]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d068      	beq.n	800a974 <ff_wtoupper+0xfc>
 800a8a2:	88fa      	ldrh	r2, [r7, #6]
 800a8a4:	8a7b      	ldrh	r3, [r7, #18]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d364      	bcc.n	800a974 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	1c9a      	adds	r2, r3, #2
 800a8ae:	617a      	str	r2, [r7, #20]
 800a8b0:	881b      	ldrh	r3, [r3, #0]
 800a8b2:	823b      	strh	r3, [r7, #16]
 800a8b4:	8a3b      	ldrh	r3, [r7, #16]
 800a8b6:	0a1b      	lsrs	r3, r3, #8
 800a8b8:	81fb      	strh	r3, [r7, #14]
 800a8ba:	8a3b      	ldrh	r3, [r7, #16]
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a8c0:	88fa      	ldrh	r2, [r7, #6]
 800a8c2:	8a79      	ldrh	r1, [r7, #18]
 800a8c4:	8a3b      	ldrh	r3, [r7, #16]
 800a8c6:	440b      	add	r3, r1
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	da49      	bge.n	800a960 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a8cc:	89fb      	ldrh	r3, [r7, #14]
 800a8ce:	2b08      	cmp	r3, #8
 800a8d0:	d84f      	bhi.n	800a972 <ff_wtoupper+0xfa>
 800a8d2:	a201      	add	r2, pc, #4	; (adr r2, 800a8d8 <ff_wtoupper+0x60>)
 800a8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d8:	0800a8fd 	.word	0x0800a8fd
 800a8dc:	0800a90f 	.word	0x0800a90f
 800a8e0:	0800a925 	.word	0x0800a925
 800a8e4:	0800a92d 	.word	0x0800a92d
 800a8e8:	0800a935 	.word	0x0800a935
 800a8ec:	0800a93d 	.word	0x0800a93d
 800a8f0:	0800a945 	.word	0x0800a945
 800a8f4:	0800a94d 	.word	0x0800a94d
 800a8f8:	0800a955 	.word	0x0800a955
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a8fc:	88fa      	ldrh	r2, [r7, #6]
 800a8fe:	8a7b      	ldrh	r3, [r7, #18]
 800a900:	1ad3      	subs	r3, r2, r3
 800a902:	005b      	lsls	r3, r3, #1
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	4413      	add	r3, r2
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	80fb      	strh	r3, [r7, #6]
 800a90c:	e027      	b.n	800a95e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a90e:	88fa      	ldrh	r2, [r7, #6]
 800a910:	8a7b      	ldrh	r3, [r7, #18]
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	b29b      	uxth	r3, r3
 800a916:	f003 0301 	and.w	r3, r3, #1
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	88fa      	ldrh	r2, [r7, #6]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	80fb      	strh	r3, [r7, #6]
 800a922:	e01c      	b.n	800a95e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a924:	88fb      	ldrh	r3, [r7, #6]
 800a926:	3b10      	subs	r3, #16
 800a928:	80fb      	strh	r3, [r7, #6]
 800a92a:	e018      	b.n	800a95e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a92c:	88fb      	ldrh	r3, [r7, #6]
 800a92e:	3b20      	subs	r3, #32
 800a930:	80fb      	strh	r3, [r7, #6]
 800a932:	e014      	b.n	800a95e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a934:	88fb      	ldrh	r3, [r7, #6]
 800a936:	3b30      	subs	r3, #48	; 0x30
 800a938:	80fb      	strh	r3, [r7, #6]
 800a93a:	e010      	b.n	800a95e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a93c:	88fb      	ldrh	r3, [r7, #6]
 800a93e:	3b1a      	subs	r3, #26
 800a940:	80fb      	strh	r3, [r7, #6]
 800a942:	e00c      	b.n	800a95e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a944:	88fb      	ldrh	r3, [r7, #6]
 800a946:	3308      	adds	r3, #8
 800a948:	80fb      	strh	r3, [r7, #6]
 800a94a:	e008      	b.n	800a95e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a94c:	88fb      	ldrh	r3, [r7, #6]
 800a94e:	3b50      	subs	r3, #80	; 0x50
 800a950:	80fb      	strh	r3, [r7, #6]
 800a952:	e004      	b.n	800a95e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a954:	88fb      	ldrh	r3, [r7, #6]
 800a956:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800a95a:	80fb      	strh	r3, [r7, #6]
 800a95c:	bf00      	nop
			}
			break;
 800a95e:	e008      	b.n	800a972 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a960:	89fb      	ldrh	r3, [r7, #14]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d195      	bne.n	800a892 <ff_wtoupper+0x1a>
 800a966:	8a3b      	ldrh	r3, [r7, #16]
 800a968:	005b      	lsls	r3, r3, #1
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	4413      	add	r3, r2
 800a96e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a970:	e78f      	b.n	800a892 <ff_wtoupper+0x1a>
			break;
 800a972:	bf00      	nop
	}

	return chr;
 800a974:	88fb      	ldrh	r3, [r7, #6]
}
 800a976:	4618      	mov	r0, r3
 800a978:	371c      	adds	r7, #28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	0800e110 	.word	0x0800e110
 800a988:	0800e304 	.word	0x0800e304

0800a98c <__itoa>:
 800a98c:	1e93      	subs	r3, r2, #2
 800a98e:	2b22      	cmp	r3, #34	; 0x22
 800a990:	b510      	push	{r4, lr}
 800a992:	460c      	mov	r4, r1
 800a994:	d904      	bls.n	800a9a0 <__itoa+0x14>
 800a996:	2300      	movs	r3, #0
 800a998:	700b      	strb	r3, [r1, #0]
 800a99a:	461c      	mov	r4, r3
 800a99c:	4620      	mov	r0, r4
 800a99e:	bd10      	pop	{r4, pc}
 800a9a0:	2a0a      	cmp	r2, #10
 800a9a2:	d109      	bne.n	800a9b8 <__itoa+0x2c>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	da07      	bge.n	800a9b8 <__itoa+0x2c>
 800a9a8:	232d      	movs	r3, #45	; 0x2d
 800a9aa:	700b      	strb	r3, [r1, #0]
 800a9ac:	4240      	negs	r0, r0
 800a9ae:	2101      	movs	r1, #1
 800a9b0:	4421      	add	r1, r4
 800a9b2:	f000 f805 	bl	800a9c0 <__utoa>
 800a9b6:	e7f1      	b.n	800a99c <__itoa+0x10>
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	e7f9      	b.n	800a9b0 <__itoa+0x24>

0800a9bc <itoa>:
 800a9bc:	f7ff bfe6 	b.w	800a98c <__itoa>

0800a9c0 <__utoa>:
 800a9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9c2:	4c1f      	ldr	r4, [pc, #124]	; (800aa40 <__utoa+0x80>)
 800a9c4:	b08b      	sub	sp, #44	; 0x2c
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	466e      	mov	r6, sp
 800a9cc:	f104 0c20 	add.w	ip, r4, #32
 800a9d0:	6820      	ldr	r0, [r4, #0]
 800a9d2:	6861      	ldr	r1, [r4, #4]
 800a9d4:	4637      	mov	r7, r6
 800a9d6:	c703      	stmia	r7!, {r0, r1}
 800a9d8:	3408      	adds	r4, #8
 800a9da:	4564      	cmp	r4, ip
 800a9dc:	463e      	mov	r6, r7
 800a9de:	d1f7      	bne.n	800a9d0 <__utoa+0x10>
 800a9e0:	7921      	ldrb	r1, [r4, #4]
 800a9e2:	7139      	strb	r1, [r7, #4]
 800a9e4:	1e91      	subs	r1, r2, #2
 800a9e6:	6820      	ldr	r0, [r4, #0]
 800a9e8:	6038      	str	r0, [r7, #0]
 800a9ea:	2922      	cmp	r1, #34	; 0x22
 800a9ec:	f04f 0100 	mov.w	r1, #0
 800a9f0:	d904      	bls.n	800a9fc <__utoa+0x3c>
 800a9f2:	7019      	strb	r1, [r3, #0]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	b00b      	add	sp, #44	; 0x2c
 800a9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9fc:	1e58      	subs	r0, r3, #1
 800a9fe:	4684      	mov	ip, r0
 800aa00:	fbb5 f7f2 	udiv	r7, r5, r2
 800aa04:	fb02 5617 	mls	r6, r2, r7, r5
 800aa08:	3628      	adds	r6, #40	; 0x28
 800aa0a:	446e      	add	r6, sp
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800aa12:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800aa16:	462e      	mov	r6, r5
 800aa18:	42b2      	cmp	r2, r6
 800aa1a:	f101 0101 	add.w	r1, r1, #1
 800aa1e:	463d      	mov	r5, r7
 800aa20:	d9ee      	bls.n	800aa00 <__utoa+0x40>
 800aa22:	2200      	movs	r2, #0
 800aa24:	545a      	strb	r2, [r3, r1]
 800aa26:	1919      	adds	r1, r3, r4
 800aa28:	1aa5      	subs	r5, r4, r2
 800aa2a:	42aa      	cmp	r2, r5
 800aa2c:	dae3      	bge.n	800a9f6 <__utoa+0x36>
 800aa2e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800aa32:	780e      	ldrb	r6, [r1, #0]
 800aa34:	7006      	strb	r6, [r0, #0]
 800aa36:	3201      	adds	r2, #1
 800aa38:	f801 5901 	strb.w	r5, [r1], #-1
 800aa3c:	e7f4      	b.n	800aa28 <__utoa+0x68>
 800aa3e:	bf00      	nop
 800aa40:	0800e3c0 	.word	0x0800e3c0

0800aa44 <__cvt>:
 800aa44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa48:	ec55 4b10 	vmov	r4, r5, d0
 800aa4c:	2d00      	cmp	r5, #0
 800aa4e:	460e      	mov	r6, r1
 800aa50:	4619      	mov	r1, r3
 800aa52:	462b      	mov	r3, r5
 800aa54:	bfbb      	ittet	lt
 800aa56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aa5a:	461d      	movlt	r5, r3
 800aa5c:	2300      	movge	r3, #0
 800aa5e:	232d      	movlt	r3, #45	; 0x2d
 800aa60:	700b      	strb	r3, [r1, #0]
 800aa62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aa68:	4691      	mov	r9, r2
 800aa6a:	f023 0820 	bic.w	r8, r3, #32
 800aa6e:	bfbc      	itt	lt
 800aa70:	4622      	movlt	r2, r4
 800aa72:	4614      	movlt	r4, r2
 800aa74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aa78:	d005      	beq.n	800aa86 <__cvt+0x42>
 800aa7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aa7e:	d100      	bne.n	800aa82 <__cvt+0x3e>
 800aa80:	3601      	adds	r6, #1
 800aa82:	2102      	movs	r1, #2
 800aa84:	e000      	b.n	800aa88 <__cvt+0x44>
 800aa86:	2103      	movs	r1, #3
 800aa88:	ab03      	add	r3, sp, #12
 800aa8a:	9301      	str	r3, [sp, #4]
 800aa8c:	ab02      	add	r3, sp, #8
 800aa8e:	9300      	str	r3, [sp, #0]
 800aa90:	ec45 4b10 	vmov	d0, r4, r5
 800aa94:	4653      	mov	r3, sl
 800aa96:	4632      	mov	r2, r6
 800aa98:	f000 ff5a 	bl	800b950 <_dtoa_r>
 800aa9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aaa0:	4607      	mov	r7, r0
 800aaa2:	d102      	bne.n	800aaaa <__cvt+0x66>
 800aaa4:	f019 0f01 	tst.w	r9, #1
 800aaa8:	d022      	beq.n	800aaf0 <__cvt+0xac>
 800aaaa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aaae:	eb07 0906 	add.w	r9, r7, r6
 800aab2:	d110      	bne.n	800aad6 <__cvt+0x92>
 800aab4:	783b      	ldrb	r3, [r7, #0]
 800aab6:	2b30      	cmp	r3, #48	; 0x30
 800aab8:	d10a      	bne.n	800aad0 <__cvt+0x8c>
 800aaba:	2200      	movs	r2, #0
 800aabc:	2300      	movs	r3, #0
 800aabe:	4620      	mov	r0, r4
 800aac0:	4629      	mov	r1, r5
 800aac2:	f7f6 f801 	bl	8000ac8 <__aeabi_dcmpeq>
 800aac6:	b918      	cbnz	r0, 800aad0 <__cvt+0x8c>
 800aac8:	f1c6 0601 	rsb	r6, r6, #1
 800aacc:	f8ca 6000 	str.w	r6, [sl]
 800aad0:	f8da 3000 	ldr.w	r3, [sl]
 800aad4:	4499      	add	r9, r3
 800aad6:	2200      	movs	r2, #0
 800aad8:	2300      	movs	r3, #0
 800aada:	4620      	mov	r0, r4
 800aadc:	4629      	mov	r1, r5
 800aade:	f7f5 fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 800aae2:	b108      	cbz	r0, 800aae8 <__cvt+0xa4>
 800aae4:	f8cd 900c 	str.w	r9, [sp, #12]
 800aae8:	2230      	movs	r2, #48	; 0x30
 800aaea:	9b03      	ldr	r3, [sp, #12]
 800aaec:	454b      	cmp	r3, r9
 800aaee:	d307      	bcc.n	800ab00 <__cvt+0xbc>
 800aaf0:	9b03      	ldr	r3, [sp, #12]
 800aaf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aaf4:	1bdb      	subs	r3, r3, r7
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	6013      	str	r3, [r2, #0]
 800aafa:	b004      	add	sp, #16
 800aafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab00:	1c59      	adds	r1, r3, #1
 800ab02:	9103      	str	r1, [sp, #12]
 800ab04:	701a      	strb	r2, [r3, #0]
 800ab06:	e7f0      	b.n	800aaea <__cvt+0xa6>

0800ab08 <__exponent>:
 800ab08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2900      	cmp	r1, #0
 800ab0e:	bfb8      	it	lt
 800ab10:	4249      	neglt	r1, r1
 800ab12:	f803 2b02 	strb.w	r2, [r3], #2
 800ab16:	bfb4      	ite	lt
 800ab18:	222d      	movlt	r2, #45	; 0x2d
 800ab1a:	222b      	movge	r2, #43	; 0x2b
 800ab1c:	2909      	cmp	r1, #9
 800ab1e:	7042      	strb	r2, [r0, #1]
 800ab20:	dd2a      	ble.n	800ab78 <__exponent+0x70>
 800ab22:	f10d 0207 	add.w	r2, sp, #7
 800ab26:	4617      	mov	r7, r2
 800ab28:	260a      	movs	r6, #10
 800ab2a:	4694      	mov	ip, r2
 800ab2c:	fb91 f5f6 	sdiv	r5, r1, r6
 800ab30:	fb06 1415 	mls	r4, r6, r5, r1
 800ab34:	3430      	adds	r4, #48	; 0x30
 800ab36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	2c63      	cmp	r4, #99	; 0x63
 800ab3e:	f102 32ff 	add.w	r2, r2, #4294967295
 800ab42:	4629      	mov	r1, r5
 800ab44:	dcf1      	bgt.n	800ab2a <__exponent+0x22>
 800ab46:	3130      	adds	r1, #48	; 0x30
 800ab48:	f1ac 0402 	sub.w	r4, ip, #2
 800ab4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ab50:	1c41      	adds	r1, r0, #1
 800ab52:	4622      	mov	r2, r4
 800ab54:	42ba      	cmp	r2, r7
 800ab56:	d30a      	bcc.n	800ab6e <__exponent+0x66>
 800ab58:	f10d 0209 	add.w	r2, sp, #9
 800ab5c:	eba2 020c 	sub.w	r2, r2, ip
 800ab60:	42bc      	cmp	r4, r7
 800ab62:	bf88      	it	hi
 800ab64:	2200      	movhi	r2, #0
 800ab66:	4413      	add	r3, r2
 800ab68:	1a18      	subs	r0, r3, r0
 800ab6a:	b003      	add	sp, #12
 800ab6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ab72:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ab76:	e7ed      	b.n	800ab54 <__exponent+0x4c>
 800ab78:	2330      	movs	r3, #48	; 0x30
 800ab7a:	3130      	adds	r1, #48	; 0x30
 800ab7c:	7083      	strb	r3, [r0, #2]
 800ab7e:	70c1      	strb	r1, [r0, #3]
 800ab80:	1d03      	adds	r3, r0, #4
 800ab82:	e7f1      	b.n	800ab68 <__exponent+0x60>

0800ab84 <_printf_float>:
 800ab84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab88:	ed2d 8b02 	vpush	{d8}
 800ab8c:	b08d      	sub	sp, #52	; 0x34
 800ab8e:	460c      	mov	r4, r1
 800ab90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ab94:	4616      	mov	r6, r2
 800ab96:	461f      	mov	r7, r3
 800ab98:	4605      	mov	r5, r0
 800ab9a:	f000 fdd7 	bl	800b74c <_localeconv_r>
 800ab9e:	f8d0 a000 	ldr.w	sl, [r0]
 800aba2:	4650      	mov	r0, sl
 800aba4:	f7f5 fb64 	bl	8000270 <strlen>
 800aba8:	2300      	movs	r3, #0
 800abaa:	930a      	str	r3, [sp, #40]	; 0x28
 800abac:	6823      	ldr	r3, [r4, #0]
 800abae:	9305      	str	r3, [sp, #20]
 800abb0:	f8d8 3000 	ldr.w	r3, [r8]
 800abb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800abb8:	3307      	adds	r3, #7
 800abba:	f023 0307 	bic.w	r3, r3, #7
 800abbe:	f103 0208 	add.w	r2, r3, #8
 800abc2:	f8c8 2000 	str.w	r2, [r8]
 800abc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800abce:	9307      	str	r3, [sp, #28]
 800abd0:	f8cd 8018 	str.w	r8, [sp, #24]
 800abd4:	ee08 0a10 	vmov	s16, r0
 800abd8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800abdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abe0:	4b9e      	ldr	r3, [pc, #632]	; (800ae5c <_printf_float+0x2d8>)
 800abe2:	f04f 32ff 	mov.w	r2, #4294967295
 800abe6:	f7f5 ffa1 	bl	8000b2c <__aeabi_dcmpun>
 800abea:	bb88      	cbnz	r0, 800ac50 <_printf_float+0xcc>
 800abec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abf0:	4b9a      	ldr	r3, [pc, #616]	; (800ae5c <_printf_float+0x2d8>)
 800abf2:	f04f 32ff 	mov.w	r2, #4294967295
 800abf6:	f7f5 ff7b 	bl	8000af0 <__aeabi_dcmple>
 800abfa:	bb48      	cbnz	r0, 800ac50 <_printf_float+0xcc>
 800abfc:	2200      	movs	r2, #0
 800abfe:	2300      	movs	r3, #0
 800ac00:	4640      	mov	r0, r8
 800ac02:	4649      	mov	r1, r9
 800ac04:	f7f5 ff6a 	bl	8000adc <__aeabi_dcmplt>
 800ac08:	b110      	cbz	r0, 800ac10 <_printf_float+0x8c>
 800ac0a:	232d      	movs	r3, #45	; 0x2d
 800ac0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac10:	4a93      	ldr	r2, [pc, #588]	; (800ae60 <_printf_float+0x2dc>)
 800ac12:	4b94      	ldr	r3, [pc, #592]	; (800ae64 <_printf_float+0x2e0>)
 800ac14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ac18:	bf94      	ite	ls
 800ac1a:	4690      	movls	r8, r2
 800ac1c:	4698      	movhi	r8, r3
 800ac1e:	2303      	movs	r3, #3
 800ac20:	6123      	str	r3, [r4, #16]
 800ac22:	9b05      	ldr	r3, [sp, #20]
 800ac24:	f023 0304 	bic.w	r3, r3, #4
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	f04f 0900 	mov.w	r9, #0
 800ac2e:	9700      	str	r7, [sp, #0]
 800ac30:	4633      	mov	r3, r6
 800ac32:	aa0b      	add	r2, sp, #44	; 0x2c
 800ac34:	4621      	mov	r1, r4
 800ac36:	4628      	mov	r0, r5
 800ac38:	f000 f9da 	bl	800aff0 <_printf_common>
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	f040 8090 	bne.w	800ad62 <_printf_float+0x1de>
 800ac42:	f04f 30ff 	mov.w	r0, #4294967295
 800ac46:	b00d      	add	sp, #52	; 0x34
 800ac48:	ecbd 8b02 	vpop	{d8}
 800ac4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac50:	4642      	mov	r2, r8
 800ac52:	464b      	mov	r3, r9
 800ac54:	4640      	mov	r0, r8
 800ac56:	4649      	mov	r1, r9
 800ac58:	f7f5 ff68 	bl	8000b2c <__aeabi_dcmpun>
 800ac5c:	b140      	cbz	r0, 800ac70 <_printf_float+0xec>
 800ac5e:	464b      	mov	r3, r9
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	bfbc      	itt	lt
 800ac64:	232d      	movlt	r3, #45	; 0x2d
 800ac66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ac6a:	4a7f      	ldr	r2, [pc, #508]	; (800ae68 <_printf_float+0x2e4>)
 800ac6c:	4b7f      	ldr	r3, [pc, #508]	; (800ae6c <_printf_float+0x2e8>)
 800ac6e:	e7d1      	b.n	800ac14 <_printf_float+0x90>
 800ac70:	6863      	ldr	r3, [r4, #4]
 800ac72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ac76:	9206      	str	r2, [sp, #24]
 800ac78:	1c5a      	adds	r2, r3, #1
 800ac7a:	d13f      	bne.n	800acfc <_printf_float+0x178>
 800ac7c:	2306      	movs	r3, #6
 800ac7e:	6063      	str	r3, [r4, #4]
 800ac80:	9b05      	ldr	r3, [sp, #20]
 800ac82:	6861      	ldr	r1, [r4, #4]
 800ac84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ac88:	2300      	movs	r3, #0
 800ac8a:	9303      	str	r3, [sp, #12]
 800ac8c:	ab0a      	add	r3, sp, #40	; 0x28
 800ac8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ac92:	ab09      	add	r3, sp, #36	; 0x24
 800ac94:	ec49 8b10 	vmov	d0, r8, r9
 800ac98:	9300      	str	r3, [sp, #0]
 800ac9a:	6022      	str	r2, [r4, #0]
 800ac9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aca0:	4628      	mov	r0, r5
 800aca2:	f7ff fecf 	bl	800aa44 <__cvt>
 800aca6:	9b06      	ldr	r3, [sp, #24]
 800aca8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acaa:	2b47      	cmp	r3, #71	; 0x47
 800acac:	4680      	mov	r8, r0
 800acae:	d108      	bne.n	800acc2 <_printf_float+0x13e>
 800acb0:	1cc8      	adds	r0, r1, #3
 800acb2:	db02      	blt.n	800acba <_printf_float+0x136>
 800acb4:	6863      	ldr	r3, [r4, #4]
 800acb6:	4299      	cmp	r1, r3
 800acb8:	dd41      	ble.n	800ad3e <_printf_float+0x1ba>
 800acba:	f1ab 0302 	sub.w	r3, fp, #2
 800acbe:	fa5f fb83 	uxtb.w	fp, r3
 800acc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800acc6:	d820      	bhi.n	800ad0a <_printf_float+0x186>
 800acc8:	3901      	subs	r1, #1
 800acca:	465a      	mov	r2, fp
 800accc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800acd0:	9109      	str	r1, [sp, #36]	; 0x24
 800acd2:	f7ff ff19 	bl	800ab08 <__exponent>
 800acd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acd8:	1813      	adds	r3, r2, r0
 800acda:	2a01      	cmp	r2, #1
 800acdc:	4681      	mov	r9, r0
 800acde:	6123      	str	r3, [r4, #16]
 800ace0:	dc02      	bgt.n	800ace8 <_printf_float+0x164>
 800ace2:	6822      	ldr	r2, [r4, #0]
 800ace4:	07d2      	lsls	r2, r2, #31
 800ace6:	d501      	bpl.n	800acec <_printf_float+0x168>
 800ace8:	3301      	adds	r3, #1
 800acea:	6123      	str	r3, [r4, #16]
 800acec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d09c      	beq.n	800ac2e <_printf_float+0xaa>
 800acf4:	232d      	movs	r3, #45	; 0x2d
 800acf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acfa:	e798      	b.n	800ac2e <_printf_float+0xaa>
 800acfc:	9a06      	ldr	r2, [sp, #24]
 800acfe:	2a47      	cmp	r2, #71	; 0x47
 800ad00:	d1be      	bne.n	800ac80 <_printf_float+0xfc>
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1bc      	bne.n	800ac80 <_printf_float+0xfc>
 800ad06:	2301      	movs	r3, #1
 800ad08:	e7b9      	b.n	800ac7e <_printf_float+0xfa>
 800ad0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ad0e:	d118      	bne.n	800ad42 <_printf_float+0x1be>
 800ad10:	2900      	cmp	r1, #0
 800ad12:	6863      	ldr	r3, [r4, #4]
 800ad14:	dd0b      	ble.n	800ad2e <_printf_float+0x1aa>
 800ad16:	6121      	str	r1, [r4, #16]
 800ad18:	b913      	cbnz	r3, 800ad20 <_printf_float+0x19c>
 800ad1a:	6822      	ldr	r2, [r4, #0]
 800ad1c:	07d0      	lsls	r0, r2, #31
 800ad1e:	d502      	bpl.n	800ad26 <_printf_float+0x1a2>
 800ad20:	3301      	adds	r3, #1
 800ad22:	440b      	add	r3, r1
 800ad24:	6123      	str	r3, [r4, #16]
 800ad26:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad28:	f04f 0900 	mov.w	r9, #0
 800ad2c:	e7de      	b.n	800acec <_printf_float+0x168>
 800ad2e:	b913      	cbnz	r3, 800ad36 <_printf_float+0x1b2>
 800ad30:	6822      	ldr	r2, [r4, #0]
 800ad32:	07d2      	lsls	r2, r2, #31
 800ad34:	d501      	bpl.n	800ad3a <_printf_float+0x1b6>
 800ad36:	3302      	adds	r3, #2
 800ad38:	e7f4      	b.n	800ad24 <_printf_float+0x1a0>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e7f2      	b.n	800ad24 <_printf_float+0x1a0>
 800ad3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ad42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad44:	4299      	cmp	r1, r3
 800ad46:	db05      	blt.n	800ad54 <_printf_float+0x1d0>
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	6121      	str	r1, [r4, #16]
 800ad4c:	07d8      	lsls	r0, r3, #31
 800ad4e:	d5ea      	bpl.n	800ad26 <_printf_float+0x1a2>
 800ad50:	1c4b      	adds	r3, r1, #1
 800ad52:	e7e7      	b.n	800ad24 <_printf_float+0x1a0>
 800ad54:	2900      	cmp	r1, #0
 800ad56:	bfd4      	ite	le
 800ad58:	f1c1 0202 	rsble	r2, r1, #2
 800ad5c:	2201      	movgt	r2, #1
 800ad5e:	4413      	add	r3, r2
 800ad60:	e7e0      	b.n	800ad24 <_printf_float+0x1a0>
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	055a      	lsls	r2, r3, #21
 800ad66:	d407      	bmi.n	800ad78 <_printf_float+0x1f4>
 800ad68:	6923      	ldr	r3, [r4, #16]
 800ad6a:	4642      	mov	r2, r8
 800ad6c:	4631      	mov	r1, r6
 800ad6e:	4628      	mov	r0, r5
 800ad70:	47b8      	blx	r7
 800ad72:	3001      	adds	r0, #1
 800ad74:	d12c      	bne.n	800add0 <_printf_float+0x24c>
 800ad76:	e764      	b.n	800ac42 <_printf_float+0xbe>
 800ad78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad7c:	f240 80e0 	bls.w	800af40 <_printf_float+0x3bc>
 800ad80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad84:	2200      	movs	r2, #0
 800ad86:	2300      	movs	r3, #0
 800ad88:	f7f5 fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d034      	beq.n	800adfa <_printf_float+0x276>
 800ad90:	4a37      	ldr	r2, [pc, #220]	; (800ae70 <_printf_float+0x2ec>)
 800ad92:	2301      	movs	r3, #1
 800ad94:	4631      	mov	r1, r6
 800ad96:	4628      	mov	r0, r5
 800ad98:	47b8      	blx	r7
 800ad9a:	3001      	adds	r0, #1
 800ad9c:	f43f af51 	beq.w	800ac42 <_printf_float+0xbe>
 800ada0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ada4:	429a      	cmp	r2, r3
 800ada6:	db02      	blt.n	800adae <_printf_float+0x22a>
 800ada8:	6823      	ldr	r3, [r4, #0]
 800adaa:	07d8      	lsls	r0, r3, #31
 800adac:	d510      	bpl.n	800add0 <_printf_float+0x24c>
 800adae:	ee18 3a10 	vmov	r3, s16
 800adb2:	4652      	mov	r2, sl
 800adb4:	4631      	mov	r1, r6
 800adb6:	4628      	mov	r0, r5
 800adb8:	47b8      	blx	r7
 800adba:	3001      	adds	r0, #1
 800adbc:	f43f af41 	beq.w	800ac42 <_printf_float+0xbe>
 800adc0:	f04f 0800 	mov.w	r8, #0
 800adc4:	f104 091a 	add.w	r9, r4, #26
 800adc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adca:	3b01      	subs	r3, #1
 800adcc:	4543      	cmp	r3, r8
 800adce:	dc09      	bgt.n	800ade4 <_printf_float+0x260>
 800add0:	6823      	ldr	r3, [r4, #0]
 800add2:	079b      	lsls	r3, r3, #30
 800add4:	f100 8107 	bmi.w	800afe6 <_printf_float+0x462>
 800add8:	68e0      	ldr	r0, [r4, #12]
 800adda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800addc:	4298      	cmp	r0, r3
 800adde:	bfb8      	it	lt
 800ade0:	4618      	movlt	r0, r3
 800ade2:	e730      	b.n	800ac46 <_printf_float+0xc2>
 800ade4:	2301      	movs	r3, #1
 800ade6:	464a      	mov	r2, r9
 800ade8:	4631      	mov	r1, r6
 800adea:	4628      	mov	r0, r5
 800adec:	47b8      	blx	r7
 800adee:	3001      	adds	r0, #1
 800adf0:	f43f af27 	beq.w	800ac42 <_printf_float+0xbe>
 800adf4:	f108 0801 	add.w	r8, r8, #1
 800adf8:	e7e6      	b.n	800adc8 <_printf_float+0x244>
 800adfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	dc39      	bgt.n	800ae74 <_printf_float+0x2f0>
 800ae00:	4a1b      	ldr	r2, [pc, #108]	; (800ae70 <_printf_float+0x2ec>)
 800ae02:	2301      	movs	r3, #1
 800ae04:	4631      	mov	r1, r6
 800ae06:	4628      	mov	r0, r5
 800ae08:	47b8      	blx	r7
 800ae0a:	3001      	adds	r0, #1
 800ae0c:	f43f af19 	beq.w	800ac42 <_printf_float+0xbe>
 800ae10:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ae14:	4313      	orrs	r3, r2
 800ae16:	d102      	bne.n	800ae1e <_printf_float+0x29a>
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	07d9      	lsls	r1, r3, #31
 800ae1c:	d5d8      	bpl.n	800add0 <_printf_float+0x24c>
 800ae1e:	ee18 3a10 	vmov	r3, s16
 800ae22:	4652      	mov	r2, sl
 800ae24:	4631      	mov	r1, r6
 800ae26:	4628      	mov	r0, r5
 800ae28:	47b8      	blx	r7
 800ae2a:	3001      	adds	r0, #1
 800ae2c:	f43f af09 	beq.w	800ac42 <_printf_float+0xbe>
 800ae30:	f04f 0900 	mov.w	r9, #0
 800ae34:	f104 0a1a 	add.w	sl, r4, #26
 800ae38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae3a:	425b      	negs	r3, r3
 800ae3c:	454b      	cmp	r3, r9
 800ae3e:	dc01      	bgt.n	800ae44 <_printf_float+0x2c0>
 800ae40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae42:	e792      	b.n	800ad6a <_printf_float+0x1e6>
 800ae44:	2301      	movs	r3, #1
 800ae46:	4652      	mov	r2, sl
 800ae48:	4631      	mov	r1, r6
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	47b8      	blx	r7
 800ae4e:	3001      	adds	r0, #1
 800ae50:	f43f aef7 	beq.w	800ac42 <_printf_float+0xbe>
 800ae54:	f109 0901 	add.w	r9, r9, #1
 800ae58:	e7ee      	b.n	800ae38 <_printf_float+0x2b4>
 800ae5a:	bf00      	nop
 800ae5c:	7fefffff 	.word	0x7fefffff
 800ae60:	0800e3e5 	.word	0x0800e3e5
 800ae64:	0800e3e9 	.word	0x0800e3e9
 800ae68:	0800e3ed 	.word	0x0800e3ed
 800ae6c:	0800e3f1 	.word	0x0800e3f1
 800ae70:	0800e3f5 	.word	0x0800e3f5
 800ae74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	bfa8      	it	ge
 800ae7c:	461a      	movge	r2, r3
 800ae7e:	2a00      	cmp	r2, #0
 800ae80:	4691      	mov	r9, r2
 800ae82:	dc37      	bgt.n	800aef4 <_printf_float+0x370>
 800ae84:	f04f 0b00 	mov.w	fp, #0
 800ae88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae8c:	f104 021a 	add.w	r2, r4, #26
 800ae90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae92:	9305      	str	r3, [sp, #20]
 800ae94:	eba3 0309 	sub.w	r3, r3, r9
 800ae98:	455b      	cmp	r3, fp
 800ae9a:	dc33      	bgt.n	800af04 <_printf_float+0x380>
 800ae9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aea0:	429a      	cmp	r2, r3
 800aea2:	db3b      	blt.n	800af1c <_printf_float+0x398>
 800aea4:	6823      	ldr	r3, [r4, #0]
 800aea6:	07da      	lsls	r2, r3, #31
 800aea8:	d438      	bmi.n	800af1c <_printf_float+0x398>
 800aeaa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aeae:	eba2 0903 	sub.w	r9, r2, r3
 800aeb2:	9b05      	ldr	r3, [sp, #20]
 800aeb4:	1ad2      	subs	r2, r2, r3
 800aeb6:	4591      	cmp	r9, r2
 800aeb8:	bfa8      	it	ge
 800aeba:	4691      	movge	r9, r2
 800aebc:	f1b9 0f00 	cmp.w	r9, #0
 800aec0:	dc35      	bgt.n	800af2e <_printf_float+0x3aa>
 800aec2:	f04f 0800 	mov.w	r8, #0
 800aec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aeca:	f104 0a1a 	add.w	sl, r4, #26
 800aece:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aed2:	1a9b      	subs	r3, r3, r2
 800aed4:	eba3 0309 	sub.w	r3, r3, r9
 800aed8:	4543      	cmp	r3, r8
 800aeda:	f77f af79 	ble.w	800add0 <_printf_float+0x24c>
 800aede:	2301      	movs	r3, #1
 800aee0:	4652      	mov	r2, sl
 800aee2:	4631      	mov	r1, r6
 800aee4:	4628      	mov	r0, r5
 800aee6:	47b8      	blx	r7
 800aee8:	3001      	adds	r0, #1
 800aeea:	f43f aeaa 	beq.w	800ac42 <_printf_float+0xbe>
 800aeee:	f108 0801 	add.w	r8, r8, #1
 800aef2:	e7ec      	b.n	800aece <_printf_float+0x34a>
 800aef4:	4613      	mov	r3, r2
 800aef6:	4631      	mov	r1, r6
 800aef8:	4642      	mov	r2, r8
 800aefa:	4628      	mov	r0, r5
 800aefc:	47b8      	blx	r7
 800aefe:	3001      	adds	r0, #1
 800af00:	d1c0      	bne.n	800ae84 <_printf_float+0x300>
 800af02:	e69e      	b.n	800ac42 <_printf_float+0xbe>
 800af04:	2301      	movs	r3, #1
 800af06:	4631      	mov	r1, r6
 800af08:	4628      	mov	r0, r5
 800af0a:	9205      	str	r2, [sp, #20]
 800af0c:	47b8      	blx	r7
 800af0e:	3001      	adds	r0, #1
 800af10:	f43f ae97 	beq.w	800ac42 <_printf_float+0xbe>
 800af14:	9a05      	ldr	r2, [sp, #20]
 800af16:	f10b 0b01 	add.w	fp, fp, #1
 800af1a:	e7b9      	b.n	800ae90 <_printf_float+0x30c>
 800af1c:	ee18 3a10 	vmov	r3, s16
 800af20:	4652      	mov	r2, sl
 800af22:	4631      	mov	r1, r6
 800af24:	4628      	mov	r0, r5
 800af26:	47b8      	blx	r7
 800af28:	3001      	adds	r0, #1
 800af2a:	d1be      	bne.n	800aeaa <_printf_float+0x326>
 800af2c:	e689      	b.n	800ac42 <_printf_float+0xbe>
 800af2e:	9a05      	ldr	r2, [sp, #20]
 800af30:	464b      	mov	r3, r9
 800af32:	4442      	add	r2, r8
 800af34:	4631      	mov	r1, r6
 800af36:	4628      	mov	r0, r5
 800af38:	47b8      	blx	r7
 800af3a:	3001      	adds	r0, #1
 800af3c:	d1c1      	bne.n	800aec2 <_printf_float+0x33e>
 800af3e:	e680      	b.n	800ac42 <_printf_float+0xbe>
 800af40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af42:	2a01      	cmp	r2, #1
 800af44:	dc01      	bgt.n	800af4a <_printf_float+0x3c6>
 800af46:	07db      	lsls	r3, r3, #31
 800af48:	d53a      	bpl.n	800afc0 <_printf_float+0x43c>
 800af4a:	2301      	movs	r3, #1
 800af4c:	4642      	mov	r2, r8
 800af4e:	4631      	mov	r1, r6
 800af50:	4628      	mov	r0, r5
 800af52:	47b8      	blx	r7
 800af54:	3001      	adds	r0, #1
 800af56:	f43f ae74 	beq.w	800ac42 <_printf_float+0xbe>
 800af5a:	ee18 3a10 	vmov	r3, s16
 800af5e:	4652      	mov	r2, sl
 800af60:	4631      	mov	r1, r6
 800af62:	4628      	mov	r0, r5
 800af64:	47b8      	blx	r7
 800af66:	3001      	adds	r0, #1
 800af68:	f43f ae6b 	beq.w	800ac42 <_printf_float+0xbe>
 800af6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af70:	2200      	movs	r2, #0
 800af72:	2300      	movs	r3, #0
 800af74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800af78:	f7f5 fda6 	bl	8000ac8 <__aeabi_dcmpeq>
 800af7c:	b9d8      	cbnz	r0, 800afb6 <_printf_float+0x432>
 800af7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800af82:	f108 0201 	add.w	r2, r8, #1
 800af86:	4631      	mov	r1, r6
 800af88:	4628      	mov	r0, r5
 800af8a:	47b8      	blx	r7
 800af8c:	3001      	adds	r0, #1
 800af8e:	d10e      	bne.n	800afae <_printf_float+0x42a>
 800af90:	e657      	b.n	800ac42 <_printf_float+0xbe>
 800af92:	2301      	movs	r3, #1
 800af94:	4652      	mov	r2, sl
 800af96:	4631      	mov	r1, r6
 800af98:	4628      	mov	r0, r5
 800af9a:	47b8      	blx	r7
 800af9c:	3001      	adds	r0, #1
 800af9e:	f43f ae50 	beq.w	800ac42 <_printf_float+0xbe>
 800afa2:	f108 0801 	add.w	r8, r8, #1
 800afa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afa8:	3b01      	subs	r3, #1
 800afaa:	4543      	cmp	r3, r8
 800afac:	dcf1      	bgt.n	800af92 <_printf_float+0x40e>
 800afae:	464b      	mov	r3, r9
 800afb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800afb4:	e6da      	b.n	800ad6c <_printf_float+0x1e8>
 800afb6:	f04f 0800 	mov.w	r8, #0
 800afba:	f104 0a1a 	add.w	sl, r4, #26
 800afbe:	e7f2      	b.n	800afa6 <_printf_float+0x422>
 800afc0:	2301      	movs	r3, #1
 800afc2:	4642      	mov	r2, r8
 800afc4:	e7df      	b.n	800af86 <_printf_float+0x402>
 800afc6:	2301      	movs	r3, #1
 800afc8:	464a      	mov	r2, r9
 800afca:	4631      	mov	r1, r6
 800afcc:	4628      	mov	r0, r5
 800afce:	47b8      	blx	r7
 800afd0:	3001      	adds	r0, #1
 800afd2:	f43f ae36 	beq.w	800ac42 <_printf_float+0xbe>
 800afd6:	f108 0801 	add.w	r8, r8, #1
 800afda:	68e3      	ldr	r3, [r4, #12]
 800afdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afde:	1a5b      	subs	r3, r3, r1
 800afe0:	4543      	cmp	r3, r8
 800afe2:	dcf0      	bgt.n	800afc6 <_printf_float+0x442>
 800afe4:	e6f8      	b.n	800add8 <_printf_float+0x254>
 800afe6:	f04f 0800 	mov.w	r8, #0
 800afea:	f104 0919 	add.w	r9, r4, #25
 800afee:	e7f4      	b.n	800afda <_printf_float+0x456>

0800aff0 <_printf_common>:
 800aff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff4:	4616      	mov	r6, r2
 800aff6:	4699      	mov	r9, r3
 800aff8:	688a      	ldr	r2, [r1, #8]
 800affa:	690b      	ldr	r3, [r1, #16]
 800affc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b000:	4293      	cmp	r3, r2
 800b002:	bfb8      	it	lt
 800b004:	4613      	movlt	r3, r2
 800b006:	6033      	str	r3, [r6, #0]
 800b008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b00c:	4607      	mov	r7, r0
 800b00e:	460c      	mov	r4, r1
 800b010:	b10a      	cbz	r2, 800b016 <_printf_common+0x26>
 800b012:	3301      	adds	r3, #1
 800b014:	6033      	str	r3, [r6, #0]
 800b016:	6823      	ldr	r3, [r4, #0]
 800b018:	0699      	lsls	r1, r3, #26
 800b01a:	bf42      	ittt	mi
 800b01c:	6833      	ldrmi	r3, [r6, #0]
 800b01e:	3302      	addmi	r3, #2
 800b020:	6033      	strmi	r3, [r6, #0]
 800b022:	6825      	ldr	r5, [r4, #0]
 800b024:	f015 0506 	ands.w	r5, r5, #6
 800b028:	d106      	bne.n	800b038 <_printf_common+0x48>
 800b02a:	f104 0a19 	add.w	sl, r4, #25
 800b02e:	68e3      	ldr	r3, [r4, #12]
 800b030:	6832      	ldr	r2, [r6, #0]
 800b032:	1a9b      	subs	r3, r3, r2
 800b034:	42ab      	cmp	r3, r5
 800b036:	dc26      	bgt.n	800b086 <_printf_common+0x96>
 800b038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b03c:	1e13      	subs	r3, r2, #0
 800b03e:	6822      	ldr	r2, [r4, #0]
 800b040:	bf18      	it	ne
 800b042:	2301      	movne	r3, #1
 800b044:	0692      	lsls	r2, r2, #26
 800b046:	d42b      	bmi.n	800b0a0 <_printf_common+0xb0>
 800b048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b04c:	4649      	mov	r1, r9
 800b04e:	4638      	mov	r0, r7
 800b050:	47c0      	blx	r8
 800b052:	3001      	adds	r0, #1
 800b054:	d01e      	beq.n	800b094 <_printf_common+0xa4>
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	6922      	ldr	r2, [r4, #16]
 800b05a:	f003 0306 	and.w	r3, r3, #6
 800b05e:	2b04      	cmp	r3, #4
 800b060:	bf02      	ittt	eq
 800b062:	68e5      	ldreq	r5, [r4, #12]
 800b064:	6833      	ldreq	r3, [r6, #0]
 800b066:	1aed      	subeq	r5, r5, r3
 800b068:	68a3      	ldr	r3, [r4, #8]
 800b06a:	bf0c      	ite	eq
 800b06c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b070:	2500      	movne	r5, #0
 800b072:	4293      	cmp	r3, r2
 800b074:	bfc4      	itt	gt
 800b076:	1a9b      	subgt	r3, r3, r2
 800b078:	18ed      	addgt	r5, r5, r3
 800b07a:	2600      	movs	r6, #0
 800b07c:	341a      	adds	r4, #26
 800b07e:	42b5      	cmp	r5, r6
 800b080:	d11a      	bne.n	800b0b8 <_printf_common+0xc8>
 800b082:	2000      	movs	r0, #0
 800b084:	e008      	b.n	800b098 <_printf_common+0xa8>
 800b086:	2301      	movs	r3, #1
 800b088:	4652      	mov	r2, sl
 800b08a:	4649      	mov	r1, r9
 800b08c:	4638      	mov	r0, r7
 800b08e:	47c0      	blx	r8
 800b090:	3001      	adds	r0, #1
 800b092:	d103      	bne.n	800b09c <_printf_common+0xac>
 800b094:	f04f 30ff 	mov.w	r0, #4294967295
 800b098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b09c:	3501      	adds	r5, #1
 800b09e:	e7c6      	b.n	800b02e <_printf_common+0x3e>
 800b0a0:	18e1      	adds	r1, r4, r3
 800b0a2:	1c5a      	adds	r2, r3, #1
 800b0a4:	2030      	movs	r0, #48	; 0x30
 800b0a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0aa:	4422      	add	r2, r4
 800b0ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0b4:	3302      	adds	r3, #2
 800b0b6:	e7c7      	b.n	800b048 <_printf_common+0x58>
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	4622      	mov	r2, r4
 800b0bc:	4649      	mov	r1, r9
 800b0be:	4638      	mov	r0, r7
 800b0c0:	47c0      	blx	r8
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	d0e6      	beq.n	800b094 <_printf_common+0xa4>
 800b0c6:	3601      	adds	r6, #1
 800b0c8:	e7d9      	b.n	800b07e <_printf_common+0x8e>
	...

0800b0cc <_printf_i>:
 800b0cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0d0:	7e0f      	ldrb	r7, [r1, #24]
 800b0d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0d4:	2f78      	cmp	r7, #120	; 0x78
 800b0d6:	4691      	mov	r9, r2
 800b0d8:	4680      	mov	r8, r0
 800b0da:	460c      	mov	r4, r1
 800b0dc:	469a      	mov	sl, r3
 800b0de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b0e2:	d807      	bhi.n	800b0f4 <_printf_i+0x28>
 800b0e4:	2f62      	cmp	r7, #98	; 0x62
 800b0e6:	d80a      	bhi.n	800b0fe <_printf_i+0x32>
 800b0e8:	2f00      	cmp	r7, #0
 800b0ea:	f000 80d4 	beq.w	800b296 <_printf_i+0x1ca>
 800b0ee:	2f58      	cmp	r7, #88	; 0x58
 800b0f0:	f000 80c0 	beq.w	800b274 <_printf_i+0x1a8>
 800b0f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0fc:	e03a      	b.n	800b174 <_printf_i+0xa8>
 800b0fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b102:	2b15      	cmp	r3, #21
 800b104:	d8f6      	bhi.n	800b0f4 <_printf_i+0x28>
 800b106:	a101      	add	r1, pc, #4	; (adr r1, 800b10c <_printf_i+0x40>)
 800b108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b10c:	0800b165 	.word	0x0800b165
 800b110:	0800b179 	.word	0x0800b179
 800b114:	0800b0f5 	.word	0x0800b0f5
 800b118:	0800b0f5 	.word	0x0800b0f5
 800b11c:	0800b0f5 	.word	0x0800b0f5
 800b120:	0800b0f5 	.word	0x0800b0f5
 800b124:	0800b179 	.word	0x0800b179
 800b128:	0800b0f5 	.word	0x0800b0f5
 800b12c:	0800b0f5 	.word	0x0800b0f5
 800b130:	0800b0f5 	.word	0x0800b0f5
 800b134:	0800b0f5 	.word	0x0800b0f5
 800b138:	0800b27d 	.word	0x0800b27d
 800b13c:	0800b1a5 	.word	0x0800b1a5
 800b140:	0800b237 	.word	0x0800b237
 800b144:	0800b0f5 	.word	0x0800b0f5
 800b148:	0800b0f5 	.word	0x0800b0f5
 800b14c:	0800b29f 	.word	0x0800b29f
 800b150:	0800b0f5 	.word	0x0800b0f5
 800b154:	0800b1a5 	.word	0x0800b1a5
 800b158:	0800b0f5 	.word	0x0800b0f5
 800b15c:	0800b0f5 	.word	0x0800b0f5
 800b160:	0800b23f 	.word	0x0800b23f
 800b164:	682b      	ldr	r3, [r5, #0]
 800b166:	1d1a      	adds	r2, r3, #4
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	602a      	str	r2, [r5, #0]
 800b16c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b174:	2301      	movs	r3, #1
 800b176:	e09f      	b.n	800b2b8 <_printf_i+0x1ec>
 800b178:	6820      	ldr	r0, [r4, #0]
 800b17a:	682b      	ldr	r3, [r5, #0]
 800b17c:	0607      	lsls	r7, r0, #24
 800b17e:	f103 0104 	add.w	r1, r3, #4
 800b182:	6029      	str	r1, [r5, #0]
 800b184:	d501      	bpl.n	800b18a <_printf_i+0xbe>
 800b186:	681e      	ldr	r6, [r3, #0]
 800b188:	e003      	b.n	800b192 <_printf_i+0xc6>
 800b18a:	0646      	lsls	r6, r0, #25
 800b18c:	d5fb      	bpl.n	800b186 <_printf_i+0xba>
 800b18e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b192:	2e00      	cmp	r6, #0
 800b194:	da03      	bge.n	800b19e <_printf_i+0xd2>
 800b196:	232d      	movs	r3, #45	; 0x2d
 800b198:	4276      	negs	r6, r6
 800b19a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b19e:	485a      	ldr	r0, [pc, #360]	; (800b308 <_printf_i+0x23c>)
 800b1a0:	230a      	movs	r3, #10
 800b1a2:	e012      	b.n	800b1ca <_printf_i+0xfe>
 800b1a4:	682b      	ldr	r3, [r5, #0]
 800b1a6:	6820      	ldr	r0, [r4, #0]
 800b1a8:	1d19      	adds	r1, r3, #4
 800b1aa:	6029      	str	r1, [r5, #0]
 800b1ac:	0605      	lsls	r5, r0, #24
 800b1ae:	d501      	bpl.n	800b1b4 <_printf_i+0xe8>
 800b1b0:	681e      	ldr	r6, [r3, #0]
 800b1b2:	e002      	b.n	800b1ba <_printf_i+0xee>
 800b1b4:	0641      	lsls	r1, r0, #25
 800b1b6:	d5fb      	bpl.n	800b1b0 <_printf_i+0xe4>
 800b1b8:	881e      	ldrh	r6, [r3, #0]
 800b1ba:	4853      	ldr	r0, [pc, #332]	; (800b308 <_printf_i+0x23c>)
 800b1bc:	2f6f      	cmp	r7, #111	; 0x6f
 800b1be:	bf0c      	ite	eq
 800b1c0:	2308      	moveq	r3, #8
 800b1c2:	230a      	movne	r3, #10
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1ca:	6865      	ldr	r5, [r4, #4]
 800b1cc:	60a5      	str	r5, [r4, #8]
 800b1ce:	2d00      	cmp	r5, #0
 800b1d0:	bfa2      	ittt	ge
 800b1d2:	6821      	ldrge	r1, [r4, #0]
 800b1d4:	f021 0104 	bicge.w	r1, r1, #4
 800b1d8:	6021      	strge	r1, [r4, #0]
 800b1da:	b90e      	cbnz	r6, 800b1e0 <_printf_i+0x114>
 800b1dc:	2d00      	cmp	r5, #0
 800b1de:	d04b      	beq.n	800b278 <_printf_i+0x1ac>
 800b1e0:	4615      	mov	r5, r2
 800b1e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b1e6:	fb03 6711 	mls	r7, r3, r1, r6
 800b1ea:	5dc7      	ldrb	r7, [r0, r7]
 800b1ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b1f0:	4637      	mov	r7, r6
 800b1f2:	42bb      	cmp	r3, r7
 800b1f4:	460e      	mov	r6, r1
 800b1f6:	d9f4      	bls.n	800b1e2 <_printf_i+0x116>
 800b1f8:	2b08      	cmp	r3, #8
 800b1fa:	d10b      	bne.n	800b214 <_printf_i+0x148>
 800b1fc:	6823      	ldr	r3, [r4, #0]
 800b1fe:	07de      	lsls	r6, r3, #31
 800b200:	d508      	bpl.n	800b214 <_printf_i+0x148>
 800b202:	6923      	ldr	r3, [r4, #16]
 800b204:	6861      	ldr	r1, [r4, #4]
 800b206:	4299      	cmp	r1, r3
 800b208:	bfde      	ittt	le
 800b20a:	2330      	movle	r3, #48	; 0x30
 800b20c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b210:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b214:	1b52      	subs	r2, r2, r5
 800b216:	6122      	str	r2, [r4, #16]
 800b218:	f8cd a000 	str.w	sl, [sp]
 800b21c:	464b      	mov	r3, r9
 800b21e:	aa03      	add	r2, sp, #12
 800b220:	4621      	mov	r1, r4
 800b222:	4640      	mov	r0, r8
 800b224:	f7ff fee4 	bl	800aff0 <_printf_common>
 800b228:	3001      	adds	r0, #1
 800b22a:	d14a      	bne.n	800b2c2 <_printf_i+0x1f6>
 800b22c:	f04f 30ff 	mov.w	r0, #4294967295
 800b230:	b004      	add	sp, #16
 800b232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b236:	6823      	ldr	r3, [r4, #0]
 800b238:	f043 0320 	orr.w	r3, r3, #32
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	4833      	ldr	r0, [pc, #204]	; (800b30c <_printf_i+0x240>)
 800b240:	2778      	movs	r7, #120	; 0x78
 800b242:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	6829      	ldr	r1, [r5, #0]
 800b24a:	061f      	lsls	r7, r3, #24
 800b24c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b250:	d402      	bmi.n	800b258 <_printf_i+0x18c>
 800b252:	065f      	lsls	r7, r3, #25
 800b254:	bf48      	it	mi
 800b256:	b2b6      	uxthmi	r6, r6
 800b258:	07df      	lsls	r7, r3, #31
 800b25a:	bf48      	it	mi
 800b25c:	f043 0320 	orrmi.w	r3, r3, #32
 800b260:	6029      	str	r1, [r5, #0]
 800b262:	bf48      	it	mi
 800b264:	6023      	strmi	r3, [r4, #0]
 800b266:	b91e      	cbnz	r6, 800b270 <_printf_i+0x1a4>
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	f023 0320 	bic.w	r3, r3, #32
 800b26e:	6023      	str	r3, [r4, #0]
 800b270:	2310      	movs	r3, #16
 800b272:	e7a7      	b.n	800b1c4 <_printf_i+0xf8>
 800b274:	4824      	ldr	r0, [pc, #144]	; (800b308 <_printf_i+0x23c>)
 800b276:	e7e4      	b.n	800b242 <_printf_i+0x176>
 800b278:	4615      	mov	r5, r2
 800b27a:	e7bd      	b.n	800b1f8 <_printf_i+0x12c>
 800b27c:	682b      	ldr	r3, [r5, #0]
 800b27e:	6826      	ldr	r6, [r4, #0]
 800b280:	6961      	ldr	r1, [r4, #20]
 800b282:	1d18      	adds	r0, r3, #4
 800b284:	6028      	str	r0, [r5, #0]
 800b286:	0635      	lsls	r5, r6, #24
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	d501      	bpl.n	800b290 <_printf_i+0x1c4>
 800b28c:	6019      	str	r1, [r3, #0]
 800b28e:	e002      	b.n	800b296 <_printf_i+0x1ca>
 800b290:	0670      	lsls	r0, r6, #25
 800b292:	d5fb      	bpl.n	800b28c <_printf_i+0x1c0>
 800b294:	8019      	strh	r1, [r3, #0]
 800b296:	2300      	movs	r3, #0
 800b298:	6123      	str	r3, [r4, #16]
 800b29a:	4615      	mov	r5, r2
 800b29c:	e7bc      	b.n	800b218 <_printf_i+0x14c>
 800b29e:	682b      	ldr	r3, [r5, #0]
 800b2a0:	1d1a      	adds	r2, r3, #4
 800b2a2:	602a      	str	r2, [r5, #0]
 800b2a4:	681d      	ldr	r5, [r3, #0]
 800b2a6:	6862      	ldr	r2, [r4, #4]
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	f7f4 ff90 	bl	80001d0 <memchr>
 800b2b0:	b108      	cbz	r0, 800b2b6 <_printf_i+0x1ea>
 800b2b2:	1b40      	subs	r0, r0, r5
 800b2b4:	6060      	str	r0, [r4, #4]
 800b2b6:	6863      	ldr	r3, [r4, #4]
 800b2b8:	6123      	str	r3, [r4, #16]
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2c0:	e7aa      	b.n	800b218 <_printf_i+0x14c>
 800b2c2:	6923      	ldr	r3, [r4, #16]
 800b2c4:	462a      	mov	r2, r5
 800b2c6:	4649      	mov	r1, r9
 800b2c8:	4640      	mov	r0, r8
 800b2ca:	47d0      	blx	sl
 800b2cc:	3001      	adds	r0, #1
 800b2ce:	d0ad      	beq.n	800b22c <_printf_i+0x160>
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	079b      	lsls	r3, r3, #30
 800b2d4:	d413      	bmi.n	800b2fe <_printf_i+0x232>
 800b2d6:	68e0      	ldr	r0, [r4, #12]
 800b2d8:	9b03      	ldr	r3, [sp, #12]
 800b2da:	4298      	cmp	r0, r3
 800b2dc:	bfb8      	it	lt
 800b2de:	4618      	movlt	r0, r3
 800b2e0:	e7a6      	b.n	800b230 <_printf_i+0x164>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	4632      	mov	r2, r6
 800b2e6:	4649      	mov	r1, r9
 800b2e8:	4640      	mov	r0, r8
 800b2ea:	47d0      	blx	sl
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	d09d      	beq.n	800b22c <_printf_i+0x160>
 800b2f0:	3501      	adds	r5, #1
 800b2f2:	68e3      	ldr	r3, [r4, #12]
 800b2f4:	9903      	ldr	r1, [sp, #12]
 800b2f6:	1a5b      	subs	r3, r3, r1
 800b2f8:	42ab      	cmp	r3, r5
 800b2fa:	dcf2      	bgt.n	800b2e2 <_printf_i+0x216>
 800b2fc:	e7eb      	b.n	800b2d6 <_printf_i+0x20a>
 800b2fe:	2500      	movs	r5, #0
 800b300:	f104 0619 	add.w	r6, r4, #25
 800b304:	e7f5      	b.n	800b2f2 <_printf_i+0x226>
 800b306:	bf00      	nop
 800b308:	0800e3f7 	.word	0x0800e3f7
 800b30c:	0800e408 	.word	0x0800e408

0800b310 <std>:
 800b310:	2300      	movs	r3, #0
 800b312:	b510      	push	{r4, lr}
 800b314:	4604      	mov	r4, r0
 800b316:	e9c0 3300 	strd	r3, r3, [r0]
 800b31a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b31e:	6083      	str	r3, [r0, #8]
 800b320:	8181      	strh	r1, [r0, #12]
 800b322:	6643      	str	r3, [r0, #100]	; 0x64
 800b324:	81c2      	strh	r2, [r0, #14]
 800b326:	6183      	str	r3, [r0, #24]
 800b328:	4619      	mov	r1, r3
 800b32a:	2208      	movs	r2, #8
 800b32c:	305c      	adds	r0, #92	; 0x5c
 800b32e:	f000 fa05 	bl	800b73c <memset>
 800b332:	4b0d      	ldr	r3, [pc, #52]	; (800b368 <std+0x58>)
 800b334:	6263      	str	r3, [r4, #36]	; 0x24
 800b336:	4b0d      	ldr	r3, [pc, #52]	; (800b36c <std+0x5c>)
 800b338:	62a3      	str	r3, [r4, #40]	; 0x28
 800b33a:	4b0d      	ldr	r3, [pc, #52]	; (800b370 <std+0x60>)
 800b33c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b33e:	4b0d      	ldr	r3, [pc, #52]	; (800b374 <std+0x64>)
 800b340:	6323      	str	r3, [r4, #48]	; 0x30
 800b342:	4b0d      	ldr	r3, [pc, #52]	; (800b378 <std+0x68>)
 800b344:	6224      	str	r4, [r4, #32]
 800b346:	429c      	cmp	r4, r3
 800b348:	d006      	beq.n	800b358 <std+0x48>
 800b34a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b34e:	4294      	cmp	r4, r2
 800b350:	d002      	beq.n	800b358 <std+0x48>
 800b352:	33d0      	adds	r3, #208	; 0xd0
 800b354:	429c      	cmp	r4, r3
 800b356:	d105      	bne.n	800b364 <std+0x54>
 800b358:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b360:	f000 ba68 	b.w	800b834 <__retarget_lock_init_recursive>
 800b364:	bd10      	pop	{r4, pc}
 800b366:	bf00      	nop
 800b368:	0800b58d 	.word	0x0800b58d
 800b36c:	0800b5af 	.word	0x0800b5af
 800b370:	0800b5e7 	.word	0x0800b5e7
 800b374:	0800b60b 	.word	0x0800b60b
 800b378:	20003710 	.word	0x20003710

0800b37c <stdio_exit_handler>:
 800b37c:	4a02      	ldr	r2, [pc, #8]	; (800b388 <stdio_exit_handler+0xc>)
 800b37e:	4903      	ldr	r1, [pc, #12]	; (800b38c <stdio_exit_handler+0x10>)
 800b380:	4803      	ldr	r0, [pc, #12]	; (800b390 <stdio_exit_handler+0x14>)
 800b382:	f000 b869 	b.w	800b458 <_fwalk_sglue>
 800b386:	bf00      	nop
 800b388:	20000094 	.word	0x20000094
 800b38c:	0800d1e9 	.word	0x0800d1e9
 800b390:	200000a0 	.word	0x200000a0

0800b394 <cleanup_stdio>:
 800b394:	6841      	ldr	r1, [r0, #4]
 800b396:	4b0c      	ldr	r3, [pc, #48]	; (800b3c8 <cleanup_stdio+0x34>)
 800b398:	4299      	cmp	r1, r3
 800b39a:	b510      	push	{r4, lr}
 800b39c:	4604      	mov	r4, r0
 800b39e:	d001      	beq.n	800b3a4 <cleanup_stdio+0x10>
 800b3a0:	f001 ff22 	bl	800d1e8 <_fflush_r>
 800b3a4:	68a1      	ldr	r1, [r4, #8]
 800b3a6:	4b09      	ldr	r3, [pc, #36]	; (800b3cc <cleanup_stdio+0x38>)
 800b3a8:	4299      	cmp	r1, r3
 800b3aa:	d002      	beq.n	800b3b2 <cleanup_stdio+0x1e>
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f001 ff1b 	bl	800d1e8 <_fflush_r>
 800b3b2:	68e1      	ldr	r1, [r4, #12]
 800b3b4:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <cleanup_stdio+0x3c>)
 800b3b6:	4299      	cmp	r1, r3
 800b3b8:	d004      	beq.n	800b3c4 <cleanup_stdio+0x30>
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3c0:	f001 bf12 	b.w	800d1e8 <_fflush_r>
 800b3c4:	bd10      	pop	{r4, pc}
 800b3c6:	bf00      	nop
 800b3c8:	20003710 	.word	0x20003710
 800b3cc:	20003778 	.word	0x20003778
 800b3d0:	200037e0 	.word	0x200037e0

0800b3d4 <global_stdio_init.part.0>:
 800b3d4:	b510      	push	{r4, lr}
 800b3d6:	4b0b      	ldr	r3, [pc, #44]	; (800b404 <global_stdio_init.part.0+0x30>)
 800b3d8:	4c0b      	ldr	r4, [pc, #44]	; (800b408 <global_stdio_init.part.0+0x34>)
 800b3da:	4a0c      	ldr	r2, [pc, #48]	; (800b40c <global_stdio_init.part.0+0x38>)
 800b3dc:	601a      	str	r2, [r3, #0]
 800b3de:	4620      	mov	r0, r4
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2104      	movs	r1, #4
 800b3e4:	f7ff ff94 	bl	800b310 <std>
 800b3e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	2109      	movs	r1, #9
 800b3f0:	f7ff ff8e 	bl	800b310 <std>
 800b3f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b3f8:	2202      	movs	r2, #2
 800b3fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3fe:	2112      	movs	r1, #18
 800b400:	f7ff bf86 	b.w	800b310 <std>
 800b404:	20003848 	.word	0x20003848
 800b408:	20003710 	.word	0x20003710
 800b40c:	0800b37d 	.word	0x0800b37d

0800b410 <__sfp_lock_acquire>:
 800b410:	4801      	ldr	r0, [pc, #4]	; (800b418 <__sfp_lock_acquire+0x8>)
 800b412:	f000 ba10 	b.w	800b836 <__retarget_lock_acquire_recursive>
 800b416:	bf00      	nop
 800b418:	20003851 	.word	0x20003851

0800b41c <__sfp_lock_release>:
 800b41c:	4801      	ldr	r0, [pc, #4]	; (800b424 <__sfp_lock_release+0x8>)
 800b41e:	f000 ba0b 	b.w	800b838 <__retarget_lock_release_recursive>
 800b422:	bf00      	nop
 800b424:	20003851 	.word	0x20003851

0800b428 <__sinit>:
 800b428:	b510      	push	{r4, lr}
 800b42a:	4604      	mov	r4, r0
 800b42c:	f7ff fff0 	bl	800b410 <__sfp_lock_acquire>
 800b430:	6a23      	ldr	r3, [r4, #32]
 800b432:	b11b      	cbz	r3, 800b43c <__sinit+0x14>
 800b434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b438:	f7ff bff0 	b.w	800b41c <__sfp_lock_release>
 800b43c:	4b04      	ldr	r3, [pc, #16]	; (800b450 <__sinit+0x28>)
 800b43e:	6223      	str	r3, [r4, #32]
 800b440:	4b04      	ldr	r3, [pc, #16]	; (800b454 <__sinit+0x2c>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1f5      	bne.n	800b434 <__sinit+0xc>
 800b448:	f7ff ffc4 	bl	800b3d4 <global_stdio_init.part.0>
 800b44c:	e7f2      	b.n	800b434 <__sinit+0xc>
 800b44e:	bf00      	nop
 800b450:	0800b395 	.word	0x0800b395
 800b454:	20003848 	.word	0x20003848

0800b458 <_fwalk_sglue>:
 800b458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b45c:	4607      	mov	r7, r0
 800b45e:	4688      	mov	r8, r1
 800b460:	4614      	mov	r4, r2
 800b462:	2600      	movs	r6, #0
 800b464:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b468:	f1b9 0901 	subs.w	r9, r9, #1
 800b46c:	d505      	bpl.n	800b47a <_fwalk_sglue+0x22>
 800b46e:	6824      	ldr	r4, [r4, #0]
 800b470:	2c00      	cmp	r4, #0
 800b472:	d1f7      	bne.n	800b464 <_fwalk_sglue+0xc>
 800b474:	4630      	mov	r0, r6
 800b476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b47a:	89ab      	ldrh	r3, [r5, #12]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d907      	bls.n	800b490 <_fwalk_sglue+0x38>
 800b480:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b484:	3301      	adds	r3, #1
 800b486:	d003      	beq.n	800b490 <_fwalk_sglue+0x38>
 800b488:	4629      	mov	r1, r5
 800b48a:	4638      	mov	r0, r7
 800b48c:	47c0      	blx	r8
 800b48e:	4306      	orrs	r6, r0
 800b490:	3568      	adds	r5, #104	; 0x68
 800b492:	e7e9      	b.n	800b468 <_fwalk_sglue+0x10>

0800b494 <_puts_r>:
 800b494:	6a03      	ldr	r3, [r0, #32]
 800b496:	b570      	push	{r4, r5, r6, lr}
 800b498:	6884      	ldr	r4, [r0, #8]
 800b49a:	4605      	mov	r5, r0
 800b49c:	460e      	mov	r6, r1
 800b49e:	b90b      	cbnz	r3, 800b4a4 <_puts_r+0x10>
 800b4a0:	f7ff ffc2 	bl	800b428 <__sinit>
 800b4a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4a6:	07db      	lsls	r3, r3, #31
 800b4a8:	d405      	bmi.n	800b4b6 <_puts_r+0x22>
 800b4aa:	89a3      	ldrh	r3, [r4, #12]
 800b4ac:	0598      	lsls	r0, r3, #22
 800b4ae:	d402      	bmi.n	800b4b6 <_puts_r+0x22>
 800b4b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4b2:	f000 f9c0 	bl	800b836 <__retarget_lock_acquire_recursive>
 800b4b6:	89a3      	ldrh	r3, [r4, #12]
 800b4b8:	0719      	lsls	r1, r3, #28
 800b4ba:	d513      	bpl.n	800b4e4 <_puts_r+0x50>
 800b4bc:	6923      	ldr	r3, [r4, #16]
 800b4be:	b18b      	cbz	r3, 800b4e4 <_puts_r+0x50>
 800b4c0:	3e01      	subs	r6, #1
 800b4c2:	68a3      	ldr	r3, [r4, #8]
 800b4c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	60a3      	str	r3, [r4, #8]
 800b4cc:	b9e9      	cbnz	r1, 800b50a <_puts_r+0x76>
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	da2e      	bge.n	800b530 <_puts_r+0x9c>
 800b4d2:	4622      	mov	r2, r4
 800b4d4:	210a      	movs	r1, #10
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	f000 f89b 	bl	800b612 <__swbuf_r>
 800b4dc:	3001      	adds	r0, #1
 800b4de:	d007      	beq.n	800b4f0 <_puts_r+0x5c>
 800b4e0:	250a      	movs	r5, #10
 800b4e2:	e007      	b.n	800b4f4 <_puts_r+0x60>
 800b4e4:	4621      	mov	r1, r4
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f000 f8d0 	bl	800b68c <__swsetup_r>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	d0e7      	beq.n	800b4c0 <_puts_r+0x2c>
 800b4f0:	f04f 35ff 	mov.w	r5, #4294967295
 800b4f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4f6:	07da      	lsls	r2, r3, #31
 800b4f8:	d405      	bmi.n	800b506 <_puts_r+0x72>
 800b4fa:	89a3      	ldrh	r3, [r4, #12]
 800b4fc:	059b      	lsls	r3, r3, #22
 800b4fe:	d402      	bmi.n	800b506 <_puts_r+0x72>
 800b500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b502:	f000 f999 	bl	800b838 <__retarget_lock_release_recursive>
 800b506:	4628      	mov	r0, r5
 800b508:	bd70      	pop	{r4, r5, r6, pc}
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	da04      	bge.n	800b518 <_puts_r+0x84>
 800b50e:	69a2      	ldr	r2, [r4, #24]
 800b510:	429a      	cmp	r2, r3
 800b512:	dc06      	bgt.n	800b522 <_puts_r+0x8e>
 800b514:	290a      	cmp	r1, #10
 800b516:	d004      	beq.n	800b522 <_puts_r+0x8e>
 800b518:	6823      	ldr	r3, [r4, #0]
 800b51a:	1c5a      	adds	r2, r3, #1
 800b51c:	6022      	str	r2, [r4, #0]
 800b51e:	7019      	strb	r1, [r3, #0]
 800b520:	e7cf      	b.n	800b4c2 <_puts_r+0x2e>
 800b522:	4622      	mov	r2, r4
 800b524:	4628      	mov	r0, r5
 800b526:	f000 f874 	bl	800b612 <__swbuf_r>
 800b52a:	3001      	adds	r0, #1
 800b52c:	d1c9      	bne.n	800b4c2 <_puts_r+0x2e>
 800b52e:	e7df      	b.n	800b4f0 <_puts_r+0x5c>
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	250a      	movs	r5, #10
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	6022      	str	r2, [r4, #0]
 800b538:	701d      	strb	r5, [r3, #0]
 800b53a:	e7db      	b.n	800b4f4 <_puts_r+0x60>

0800b53c <puts>:
 800b53c:	4b02      	ldr	r3, [pc, #8]	; (800b548 <puts+0xc>)
 800b53e:	4601      	mov	r1, r0
 800b540:	6818      	ldr	r0, [r3, #0]
 800b542:	f7ff bfa7 	b.w	800b494 <_puts_r>
 800b546:	bf00      	nop
 800b548:	200000ec 	.word	0x200000ec

0800b54c <siprintf>:
 800b54c:	b40e      	push	{r1, r2, r3}
 800b54e:	b500      	push	{lr}
 800b550:	b09c      	sub	sp, #112	; 0x70
 800b552:	ab1d      	add	r3, sp, #116	; 0x74
 800b554:	9002      	str	r0, [sp, #8]
 800b556:	9006      	str	r0, [sp, #24]
 800b558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b55c:	4809      	ldr	r0, [pc, #36]	; (800b584 <siprintf+0x38>)
 800b55e:	9107      	str	r1, [sp, #28]
 800b560:	9104      	str	r1, [sp, #16]
 800b562:	4909      	ldr	r1, [pc, #36]	; (800b588 <siprintf+0x3c>)
 800b564:	f853 2b04 	ldr.w	r2, [r3], #4
 800b568:	9105      	str	r1, [sp, #20]
 800b56a:	6800      	ldr	r0, [r0, #0]
 800b56c:	9301      	str	r3, [sp, #4]
 800b56e:	a902      	add	r1, sp, #8
 800b570:	f001 fcb6 	bl	800cee0 <_svfiprintf_r>
 800b574:	9b02      	ldr	r3, [sp, #8]
 800b576:	2200      	movs	r2, #0
 800b578:	701a      	strb	r2, [r3, #0]
 800b57a:	b01c      	add	sp, #112	; 0x70
 800b57c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b580:	b003      	add	sp, #12
 800b582:	4770      	bx	lr
 800b584:	200000ec 	.word	0x200000ec
 800b588:	ffff0208 	.word	0xffff0208

0800b58c <__sread>:
 800b58c:	b510      	push	{r4, lr}
 800b58e:	460c      	mov	r4, r1
 800b590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b594:	f000 f900 	bl	800b798 <_read_r>
 800b598:	2800      	cmp	r0, #0
 800b59a:	bfab      	itete	ge
 800b59c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b59e:	89a3      	ldrhlt	r3, [r4, #12]
 800b5a0:	181b      	addge	r3, r3, r0
 800b5a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5a6:	bfac      	ite	ge
 800b5a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5aa:	81a3      	strhlt	r3, [r4, #12]
 800b5ac:	bd10      	pop	{r4, pc}

0800b5ae <__swrite>:
 800b5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b2:	461f      	mov	r7, r3
 800b5b4:	898b      	ldrh	r3, [r1, #12]
 800b5b6:	05db      	lsls	r3, r3, #23
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	4616      	mov	r6, r2
 800b5be:	d505      	bpl.n	800b5cc <__swrite+0x1e>
 800b5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c4:	2302      	movs	r3, #2
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f000 f8d4 	bl	800b774 <_lseek_r>
 800b5cc:	89a3      	ldrh	r3, [r4, #12]
 800b5ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5d6:	81a3      	strh	r3, [r4, #12]
 800b5d8:	4632      	mov	r2, r6
 800b5da:	463b      	mov	r3, r7
 800b5dc:	4628      	mov	r0, r5
 800b5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e2:	f000 b8eb 	b.w	800b7bc <_write_r>

0800b5e6 <__sseek>:
 800b5e6:	b510      	push	{r4, lr}
 800b5e8:	460c      	mov	r4, r1
 800b5ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ee:	f000 f8c1 	bl	800b774 <_lseek_r>
 800b5f2:	1c43      	adds	r3, r0, #1
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	bf15      	itete	ne
 800b5f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b602:	81a3      	strheq	r3, [r4, #12]
 800b604:	bf18      	it	ne
 800b606:	81a3      	strhne	r3, [r4, #12]
 800b608:	bd10      	pop	{r4, pc}

0800b60a <__sclose>:
 800b60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b60e:	f000 b8a1 	b.w	800b754 <_close_r>

0800b612 <__swbuf_r>:
 800b612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b614:	460e      	mov	r6, r1
 800b616:	4614      	mov	r4, r2
 800b618:	4605      	mov	r5, r0
 800b61a:	b118      	cbz	r0, 800b624 <__swbuf_r+0x12>
 800b61c:	6a03      	ldr	r3, [r0, #32]
 800b61e:	b90b      	cbnz	r3, 800b624 <__swbuf_r+0x12>
 800b620:	f7ff ff02 	bl	800b428 <__sinit>
 800b624:	69a3      	ldr	r3, [r4, #24]
 800b626:	60a3      	str	r3, [r4, #8]
 800b628:	89a3      	ldrh	r3, [r4, #12]
 800b62a:	071a      	lsls	r2, r3, #28
 800b62c:	d525      	bpl.n	800b67a <__swbuf_r+0x68>
 800b62e:	6923      	ldr	r3, [r4, #16]
 800b630:	b31b      	cbz	r3, 800b67a <__swbuf_r+0x68>
 800b632:	6823      	ldr	r3, [r4, #0]
 800b634:	6922      	ldr	r2, [r4, #16]
 800b636:	1a98      	subs	r0, r3, r2
 800b638:	6963      	ldr	r3, [r4, #20]
 800b63a:	b2f6      	uxtb	r6, r6
 800b63c:	4283      	cmp	r3, r0
 800b63e:	4637      	mov	r7, r6
 800b640:	dc04      	bgt.n	800b64c <__swbuf_r+0x3a>
 800b642:	4621      	mov	r1, r4
 800b644:	4628      	mov	r0, r5
 800b646:	f001 fdcf 	bl	800d1e8 <_fflush_r>
 800b64a:	b9e0      	cbnz	r0, 800b686 <__swbuf_r+0x74>
 800b64c:	68a3      	ldr	r3, [r4, #8]
 800b64e:	3b01      	subs	r3, #1
 800b650:	60a3      	str	r3, [r4, #8]
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	6022      	str	r2, [r4, #0]
 800b658:	701e      	strb	r6, [r3, #0]
 800b65a:	6962      	ldr	r2, [r4, #20]
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	429a      	cmp	r2, r3
 800b660:	d004      	beq.n	800b66c <__swbuf_r+0x5a>
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	07db      	lsls	r3, r3, #31
 800b666:	d506      	bpl.n	800b676 <__swbuf_r+0x64>
 800b668:	2e0a      	cmp	r6, #10
 800b66a:	d104      	bne.n	800b676 <__swbuf_r+0x64>
 800b66c:	4621      	mov	r1, r4
 800b66e:	4628      	mov	r0, r5
 800b670:	f001 fdba 	bl	800d1e8 <_fflush_r>
 800b674:	b938      	cbnz	r0, 800b686 <__swbuf_r+0x74>
 800b676:	4638      	mov	r0, r7
 800b678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b67a:	4621      	mov	r1, r4
 800b67c:	4628      	mov	r0, r5
 800b67e:	f000 f805 	bl	800b68c <__swsetup_r>
 800b682:	2800      	cmp	r0, #0
 800b684:	d0d5      	beq.n	800b632 <__swbuf_r+0x20>
 800b686:	f04f 37ff 	mov.w	r7, #4294967295
 800b68a:	e7f4      	b.n	800b676 <__swbuf_r+0x64>

0800b68c <__swsetup_r>:
 800b68c:	b538      	push	{r3, r4, r5, lr}
 800b68e:	4b2a      	ldr	r3, [pc, #168]	; (800b738 <__swsetup_r+0xac>)
 800b690:	4605      	mov	r5, r0
 800b692:	6818      	ldr	r0, [r3, #0]
 800b694:	460c      	mov	r4, r1
 800b696:	b118      	cbz	r0, 800b6a0 <__swsetup_r+0x14>
 800b698:	6a03      	ldr	r3, [r0, #32]
 800b69a:	b90b      	cbnz	r3, 800b6a0 <__swsetup_r+0x14>
 800b69c:	f7ff fec4 	bl	800b428 <__sinit>
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6a6:	0718      	lsls	r0, r3, #28
 800b6a8:	d422      	bmi.n	800b6f0 <__swsetup_r+0x64>
 800b6aa:	06d9      	lsls	r1, r3, #27
 800b6ac:	d407      	bmi.n	800b6be <__swsetup_r+0x32>
 800b6ae:	2309      	movs	r3, #9
 800b6b0:	602b      	str	r3, [r5, #0]
 800b6b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6b6:	81a3      	strh	r3, [r4, #12]
 800b6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6bc:	e034      	b.n	800b728 <__swsetup_r+0x9c>
 800b6be:	0758      	lsls	r0, r3, #29
 800b6c0:	d512      	bpl.n	800b6e8 <__swsetup_r+0x5c>
 800b6c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6c4:	b141      	cbz	r1, 800b6d8 <__swsetup_r+0x4c>
 800b6c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6ca:	4299      	cmp	r1, r3
 800b6cc:	d002      	beq.n	800b6d4 <__swsetup_r+0x48>
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f000 ff30 	bl	800c534 <_free_r>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	6363      	str	r3, [r4, #52]	; 0x34
 800b6d8:	89a3      	ldrh	r3, [r4, #12]
 800b6da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6de:	81a3      	strh	r3, [r4, #12]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	6063      	str	r3, [r4, #4]
 800b6e4:	6923      	ldr	r3, [r4, #16]
 800b6e6:	6023      	str	r3, [r4, #0]
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	f043 0308 	orr.w	r3, r3, #8
 800b6ee:	81a3      	strh	r3, [r4, #12]
 800b6f0:	6923      	ldr	r3, [r4, #16]
 800b6f2:	b94b      	cbnz	r3, 800b708 <__swsetup_r+0x7c>
 800b6f4:	89a3      	ldrh	r3, [r4, #12]
 800b6f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6fe:	d003      	beq.n	800b708 <__swsetup_r+0x7c>
 800b700:	4621      	mov	r1, r4
 800b702:	4628      	mov	r0, r5
 800b704:	f001 fdbe 	bl	800d284 <__smakebuf_r>
 800b708:	89a0      	ldrh	r0, [r4, #12]
 800b70a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b70e:	f010 0301 	ands.w	r3, r0, #1
 800b712:	d00a      	beq.n	800b72a <__swsetup_r+0x9e>
 800b714:	2300      	movs	r3, #0
 800b716:	60a3      	str	r3, [r4, #8]
 800b718:	6963      	ldr	r3, [r4, #20]
 800b71a:	425b      	negs	r3, r3
 800b71c:	61a3      	str	r3, [r4, #24]
 800b71e:	6923      	ldr	r3, [r4, #16]
 800b720:	b943      	cbnz	r3, 800b734 <__swsetup_r+0xa8>
 800b722:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b726:	d1c4      	bne.n	800b6b2 <__swsetup_r+0x26>
 800b728:	bd38      	pop	{r3, r4, r5, pc}
 800b72a:	0781      	lsls	r1, r0, #30
 800b72c:	bf58      	it	pl
 800b72e:	6963      	ldrpl	r3, [r4, #20]
 800b730:	60a3      	str	r3, [r4, #8]
 800b732:	e7f4      	b.n	800b71e <__swsetup_r+0x92>
 800b734:	2000      	movs	r0, #0
 800b736:	e7f7      	b.n	800b728 <__swsetup_r+0x9c>
 800b738:	200000ec 	.word	0x200000ec

0800b73c <memset>:
 800b73c:	4402      	add	r2, r0
 800b73e:	4603      	mov	r3, r0
 800b740:	4293      	cmp	r3, r2
 800b742:	d100      	bne.n	800b746 <memset+0xa>
 800b744:	4770      	bx	lr
 800b746:	f803 1b01 	strb.w	r1, [r3], #1
 800b74a:	e7f9      	b.n	800b740 <memset+0x4>

0800b74c <_localeconv_r>:
 800b74c:	4800      	ldr	r0, [pc, #0]	; (800b750 <_localeconv_r+0x4>)
 800b74e:	4770      	bx	lr
 800b750:	200001e0 	.word	0x200001e0

0800b754 <_close_r>:
 800b754:	b538      	push	{r3, r4, r5, lr}
 800b756:	4d06      	ldr	r5, [pc, #24]	; (800b770 <_close_r+0x1c>)
 800b758:	2300      	movs	r3, #0
 800b75a:	4604      	mov	r4, r0
 800b75c:	4608      	mov	r0, r1
 800b75e:	602b      	str	r3, [r5, #0]
 800b760:	f7f7 ff27 	bl	80035b2 <_close>
 800b764:	1c43      	adds	r3, r0, #1
 800b766:	d102      	bne.n	800b76e <_close_r+0x1a>
 800b768:	682b      	ldr	r3, [r5, #0]
 800b76a:	b103      	cbz	r3, 800b76e <_close_r+0x1a>
 800b76c:	6023      	str	r3, [r4, #0]
 800b76e:	bd38      	pop	{r3, r4, r5, pc}
 800b770:	2000384c 	.word	0x2000384c

0800b774 <_lseek_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4d07      	ldr	r5, [pc, #28]	; (800b794 <_lseek_r+0x20>)
 800b778:	4604      	mov	r4, r0
 800b77a:	4608      	mov	r0, r1
 800b77c:	4611      	mov	r1, r2
 800b77e:	2200      	movs	r2, #0
 800b780:	602a      	str	r2, [r5, #0]
 800b782:	461a      	mov	r2, r3
 800b784:	f7f7 ff3c 	bl	8003600 <_lseek>
 800b788:	1c43      	adds	r3, r0, #1
 800b78a:	d102      	bne.n	800b792 <_lseek_r+0x1e>
 800b78c:	682b      	ldr	r3, [r5, #0]
 800b78e:	b103      	cbz	r3, 800b792 <_lseek_r+0x1e>
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	bd38      	pop	{r3, r4, r5, pc}
 800b794:	2000384c 	.word	0x2000384c

0800b798 <_read_r>:
 800b798:	b538      	push	{r3, r4, r5, lr}
 800b79a:	4d07      	ldr	r5, [pc, #28]	; (800b7b8 <_read_r+0x20>)
 800b79c:	4604      	mov	r4, r0
 800b79e:	4608      	mov	r0, r1
 800b7a0:	4611      	mov	r1, r2
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	602a      	str	r2, [r5, #0]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	f7f7 feca 	bl	8003540 <_read>
 800b7ac:	1c43      	adds	r3, r0, #1
 800b7ae:	d102      	bne.n	800b7b6 <_read_r+0x1e>
 800b7b0:	682b      	ldr	r3, [r5, #0]
 800b7b2:	b103      	cbz	r3, 800b7b6 <_read_r+0x1e>
 800b7b4:	6023      	str	r3, [r4, #0]
 800b7b6:	bd38      	pop	{r3, r4, r5, pc}
 800b7b8:	2000384c 	.word	0x2000384c

0800b7bc <_write_r>:
 800b7bc:	b538      	push	{r3, r4, r5, lr}
 800b7be:	4d07      	ldr	r5, [pc, #28]	; (800b7dc <_write_r+0x20>)
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	4608      	mov	r0, r1
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	602a      	str	r2, [r5, #0]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	f7f7 fed5 	bl	800357a <_write>
 800b7d0:	1c43      	adds	r3, r0, #1
 800b7d2:	d102      	bne.n	800b7da <_write_r+0x1e>
 800b7d4:	682b      	ldr	r3, [r5, #0]
 800b7d6:	b103      	cbz	r3, 800b7da <_write_r+0x1e>
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	bd38      	pop	{r3, r4, r5, pc}
 800b7dc:	2000384c 	.word	0x2000384c

0800b7e0 <__errno>:
 800b7e0:	4b01      	ldr	r3, [pc, #4]	; (800b7e8 <__errno+0x8>)
 800b7e2:	6818      	ldr	r0, [r3, #0]
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	200000ec 	.word	0x200000ec

0800b7ec <__libc_init_array>:
 800b7ec:	b570      	push	{r4, r5, r6, lr}
 800b7ee:	4d0d      	ldr	r5, [pc, #52]	; (800b824 <__libc_init_array+0x38>)
 800b7f0:	4c0d      	ldr	r4, [pc, #52]	; (800b828 <__libc_init_array+0x3c>)
 800b7f2:	1b64      	subs	r4, r4, r5
 800b7f4:	10a4      	asrs	r4, r4, #2
 800b7f6:	2600      	movs	r6, #0
 800b7f8:	42a6      	cmp	r6, r4
 800b7fa:	d109      	bne.n	800b810 <__libc_init_array+0x24>
 800b7fc:	4d0b      	ldr	r5, [pc, #44]	; (800b82c <__libc_init_array+0x40>)
 800b7fe:	4c0c      	ldr	r4, [pc, #48]	; (800b830 <__libc_init_array+0x44>)
 800b800:	f002 f800 	bl	800d804 <_init>
 800b804:	1b64      	subs	r4, r4, r5
 800b806:	10a4      	asrs	r4, r4, #2
 800b808:	2600      	movs	r6, #0
 800b80a:	42a6      	cmp	r6, r4
 800b80c:	d105      	bne.n	800b81a <__libc_init_array+0x2e>
 800b80e:	bd70      	pop	{r4, r5, r6, pc}
 800b810:	f855 3b04 	ldr.w	r3, [r5], #4
 800b814:	4798      	blx	r3
 800b816:	3601      	adds	r6, #1
 800b818:	e7ee      	b.n	800b7f8 <__libc_init_array+0xc>
 800b81a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b81e:	4798      	blx	r3
 800b820:	3601      	adds	r6, #1
 800b822:	e7f2      	b.n	800b80a <__libc_init_array+0x1e>
 800b824:	0800e75c 	.word	0x0800e75c
 800b828:	0800e75c 	.word	0x0800e75c
 800b82c:	0800e75c 	.word	0x0800e75c
 800b830:	0800e760 	.word	0x0800e760

0800b834 <__retarget_lock_init_recursive>:
 800b834:	4770      	bx	lr

0800b836 <__retarget_lock_acquire_recursive>:
 800b836:	4770      	bx	lr

0800b838 <__retarget_lock_release_recursive>:
 800b838:	4770      	bx	lr

0800b83a <quorem>:
 800b83a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b83e:	6903      	ldr	r3, [r0, #16]
 800b840:	690c      	ldr	r4, [r1, #16]
 800b842:	42a3      	cmp	r3, r4
 800b844:	4607      	mov	r7, r0
 800b846:	db7e      	blt.n	800b946 <quorem+0x10c>
 800b848:	3c01      	subs	r4, #1
 800b84a:	f101 0814 	add.w	r8, r1, #20
 800b84e:	f100 0514 	add.w	r5, r0, #20
 800b852:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b856:	9301      	str	r3, [sp, #4]
 800b858:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b85c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b860:	3301      	adds	r3, #1
 800b862:	429a      	cmp	r2, r3
 800b864:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b868:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b86c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b870:	d331      	bcc.n	800b8d6 <quorem+0x9c>
 800b872:	f04f 0e00 	mov.w	lr, #0
 800b876:	4640      	mov	r0, r8
 800b878:	46ac      	mov	ip, r5
 800b87a:	46f2      	mov	sl, lr
 800b87c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b880:	b293      	uxth	r3, r2
 800b882:	fb06 e303 	mla	r3, r6, r3, lr
 800b886:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b88a:	0c1a      	lsrs	r2, r3, #16
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	ebaa 0303 	sub.w	r3, sl, r3
 800b892:	f8dc a000 	ldr.w	sl, [ip]
 800b896:	fa13 f38a 	uxtah	r3, r3, sl
 800b89a:	fb06 220e 	mla	r2, r6, lr, r2
 800b89e:	9300      	str	r3, [sp, #0]
 800b8a0:	9b00      	ldr	r3, [sp, #0]
 800b8a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b8a6:	b292      	uxth	r2, r2
 800b8a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b8ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8b0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b8b4:	4581      	cmp	r9, r0
 800b8b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8ba:	f84c 3b04 	str.w	r3, [ip], #4
 800b8be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b8c2:	d2db      	bcs.n	800b87c <quorem+0x42>
 800b8c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b8c8:	b92b      	cbnz	r3, 800b8d6 <quorem+0x9c>
 800b8ca:	9b01      	ldr	r3, [sp, #4]
 800b8cc:	3b04      	subs	r3, #4
 800b8ce:	429d      	cmp	r5, r3
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	d32c      	bcc.n	800b92e <quorem+0xf4>
 800b8d4:	613c      	str	r4, [r7, #16]
 800b8d6:	4638      	mov	r0, r7
 800b8d8:	f001 f9a8 	bl	800cc2c <__mcmp>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	db22      	blt.n	800b926 <quorem+0xec>
 800b8e0:	3601      	adds	r6, #1
 800b8e2:	4629      	mov	r1, r5
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8ea:	f8d1 c000 	ldr.w	ip, [r1]
 800b8ee:	b293      	uxth	r3, r2
 800b8f0:	1ac3      	subs	r3, r0, r3
 800b8f2:	0c12      	lsrs	r2, r2, #16
 800b8f4:	fa13 f38c 	uxtah	r3, r3, ip
 800b8f8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b8fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b900:	b29b      	uxth	r3, r3
 800b902:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b906:	45c1      	cmp	r9, r8
 800b908:	f841 3b04 	str.w	r3, [r1], #4
 800b90c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b910:	d2e9      	bcs.n	800b8e6 <quorem+0xac>
 800b912:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b91a:	b922      	cbnz	r2, 800b926 <quorem+0xec>
 800b91c:	3b04      	subs	r3, #4
 800b91e:	429d      	cmp	r5, r3
 800b920:	461a      	mov	r2, r3
 800b922:	d30a      	bcc.n	800b93a <quorem+0x100>
 800b924:	613c      	str	r4, [r7, #16]
 800b926:	4630      	mov	r0, r6
 800b928:	b003      	add	sp, #12
 800b92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92e:	6812      	ldr	r2, [r2, #0]
 800b930:	3b04      	subs	r3, #4
 800b932:	2a00      	cmp	r2, #0
 800b934:	d1ce      	bne.n	800b8d4 <quorem+0x9a>
 800b936:	3c01      	subs	r4, #1
 800b938:	e7c9      	b.n	800b8ce <quorem+0x94>
 800b93a:	6812      	ldr	r2, [r2, #0]
 800b93c:	3b04      	subs	r3, #4
 800b93e:	2a00      	cmp	r2, #0
 800b940:	d1f0      	bne.n	800b924 <quorem+0xea>
 800b942:	3c01      	subs	r4, #1
 800b944:	e7eb      	b.n	800b91e <quorem+0xe4>
 800b946:	2000      	movs	r0, #0
 800b948:	e7ee      	b.n	800b928 <quorem+0xee>
 800b94a:	0000      	movs	r0, r0
 800b94c:	0000      	movs	r0, r0
	...

0800b950 <_dtoa_r>:
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	ed2d 8b04 	vpush	{d8-d9}
 800b958:	69c5      	ldr	r5, [r0, #28]
 800b95a:	b093      	sub	sp, #76	; 0x4c
 800b95c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b960:	ec57 6b10 	vmov	r6, r7, d0
 800b964:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b968:	9107      	str	r1, [sp, #28]
 800b96a:	4604      	mov	r4, r0
 800b96c:	920a      	str	r2, [sp, #40]	; 0x28
 800b96e:	930d      	str	r3, [sp, #52]	; 0x34
 800b970:	b975      	cbnz	r5, 800b990 <_dtoa_r+0x40>
 800b972:	2010      	movs	r0, #16
 800b974:	f000 fe2a 	bl	800c5cc <malloc>
 800b978:	4602      	mov	r2, r0
 800b97a:	61e0      	str	r0, [r4, #28]
 800b97c:	b920      	cbnz	r0, 800b988 <_dtoa_r+0x38>
 800b97e:	4bae      	ldr	r3, [pc, #696]	; (800bc38 <_dtoa_r+0x2e8>)
 800b980:	21ef      	movs	r1, #239	; 0xef
 800b982:	48ae      	ldr	r0, [pc, #696]	; (800bc3c <_dtoa_r+0x2ec>)
 800b984:	f001 fd14 	bl	800d3b0 <__assert_func>
 800b988:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b98c:	6005      	str	r5, [r0, #0]
 800b98e:	60c5      	str	r5, [r0, #12]
 800b990:	69e3      	ldr	r3, [r4, #28]
 800b992:	6819      	ldr	r1, [r3, #0]
 800b994:	b151      	cbz	r1, 800b9ac <_dtoa_r+0x5c>
 800b996:	685a      	ldr	r2, [r3, #4]
 800b998:	604a      	str	r2, [r1, #4]
 800b99a:	2301      	movs	r3, #1
 800b99c:	4093      	lsls	r3, r2
 800b99e:	608b      	str	r3, [r1, #8]
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	f000 ff07 	bl	800c7b4 <_Bfree>
 800b9a6:	69e3      	ldr	r3, [r4, #28]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	601a      	str	r2, [r3, #0]
 800b9ac:	1e3b      	subs	r3, r7, #0
 800b9ae:	bfbb      	ittet	lt
 800b9b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b9b4:	9303      	strlt	r3, [sp, #12]
 800b9b6:	2300      	movge	r3, #0
 800b9b8:	2201      	movlt	r2, #1
 800b9ba:	bfac      	ite	ge
 800b9bc:	f8c8 3000 	strge.w	r3, [r8]
 800b9c0:	f8c8 2000 	strlt.w	r2, [r8]
 800b9c4:	4b9e      	ldr	r3, [pc, #632]	; (800bc40 <_dtoa_r+0x2f0>)
 800b9c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b9ca:	ea33 0308 	bics.w	r3, r3, r8
 800b9ce:	d11b      	bne.n	800ba08 <_dtoa_r+0xb8>
 800b9d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b9d6:	6013      	str	r3, [r2, #0]
 800b9d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b9dc:	4333      	orrs	r3, r6
 800b9de:	f000 8593 	beq.w	800c508 <_dtoa_r+0xbb8>
 800b9e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9e4:	b963      	cbnz	r3, 800ba00 <_dtoa_r+0xb0>
 800b9e6:	4b97      	ldr	r3, [pc, #604]	; (800bc44 <_dtoa_r+0x2f4>)
 800b9e8:	e027      	b.n	800ba3a <_dtoa_r+0xea>
 800b9ea:	4b97      	ldr	r3, [pc, #604]	; (800bc48 <_dtoa_r+0x2f8>)
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9f2:	6013      	str	r3, [r2, #0]
 800b9f4:	9800      	ldr	r0, [sp, #0]
 800b9f6:	b013      	add	sp, #76	; 0x4c
 800b9f8:	ecbd 8b04 	vpop	{d8-d9}
 800b9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba00:	4b90      	ldr	r3, [pc, #576]	; (800bc44 <_dtoa_r+0x2f4>)
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	3303      	adds	r3, #3
 800ba06:	e7f3      	b.n	800b9f0 <_dtoa_r+0xa0>
 800ba08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	ec51 0b17 	vmov	r0, r1, d7
 800ba12:	eeb0 8a47 	vmov.f32	s16, s14
 800ba16:	eef0 8a67 	vmov.f32	s17, s15
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	f7f5 f854 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba20:	4681      	mov	r9, r0
 800ba22:	b160      	cbz	r0, 800ba3e <_dtoa_r+0xee>
 800ba24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba26:	2301      	movs	r3, #1
 800ba28:	6013      	str	r3, [r2, #0]
 800ba2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f000 8568 	beq.w	800c502 <_dtoa_r+0xbb2>
 800ba32:	4b86      	ldr	r3, [pc, #536]	; (800bc4c <_dtoa_r+0x2fc>)
 800ba34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ba36:	6013      	str	r3, [r2, #0]
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	e7da      	b.n	800b9f4 <_dtoa_r+0xa4>
 800ba3e:	aa10      	add	r2, sp, #64	; 0x40
 800ba40:	a911      	add	r1, sp, #68	; 0x44
 800ba42:	4620      	mov	r0, r4
 800ba44:	eeb0 0a48 	vmov.f32	s0, s16
 800ba48:	eef0 0a68 	vmov.f32	s1, s17
 800ba4c:	f001 f994 	bl	800cd78 <__d2b>
 800ba50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ba54:	4682      	mov	sl, r0
 800ba56:	2d00      	cmp	r5, #0
 800ba58:	d07f      	beq.n	800bb5a <_dtoa_r+0x20a>
 800ba5a:	ee18 3a90 	vmov	r3, s17
 800ba5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ba66:	ec51 0b18 	vmov	r0, r1, d8
 800ba6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ba6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ba76:	4619      	mov	r1, r3
 800ba78:	2200      	movs	r2, #0
 800ba7a:	4b75      	ldr	r3, [pc, #468]	; (800bc50 <_dtoa_r+0x300>)
 800ba7c:	f7f4 fc04 	bl	8000288 <__aeabi_dsub>
 800ba80:	a367      	add	r3, pc, #412	; (adr r3, 800bc20 <_dtoa_r+0x2d0>)
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	f7f4 fdb7 	bl	80005f8 <__aeabi_dmul>
 800ba8a:	a367      	add	r3, pc, #412	; (adr r3, 800bc28 <_dtoa_r+0x2d8>)
 800ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba90:	f7f4 fbfc 	bl	800028c <__adddf3>
 800ba94:	4606      	mov	r6, r0
 800ba96:	4628      	mov	r0, r5
 800ba98:	460f      	mov	r7, r1
 800ba9a:	f7f4 fd43 	bl	8000524 <__aeabi_i2d>
 800ba9e:	a364      	add	r3, pc, #400	; (adr r3, 800bc30 <_dtoa_r+0x2e0>)
 800baa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa4:	f7f4 fda8 	bl	80005f8 <__aeabi_dmul>
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	4630      	mov	r0, r6
 800baae:	4639      	mov	r1, r7
 800bab0:	f7f4 fbec 	bl	800028c <__adddf3>
 800bab4:	4606      	mov	r6, r0
 800bab6:	460f      	mov	r7, r1
 800bab8:	f7f5 f84e 	bl	8000b58 <__aeabi_d2iz>
 800babc:	2200      	movs	r2, #0
 800babe:	4683      	mov	fp, r0
 800bac0:	2300      	movs	r3, #0
 800bac2:	4630      	mov	r0, r6
 800bac4:	4639      	mov	r1, r7
 800bac6:	f7f5 f809 	bl	8000adc <__aeabi_dcmplt>
 800baca:	b148      	cbz	r0, 800bae0 <_dtoa_r+0x190>
 800bacc:	4658      	mov	r0, fp
 800bace:	f7f4 fd29 	bl	8000524 <__aeabi_i2d>
 800bad2:	4632      	mov	r2, r6
 800bad4:	463b      	mov	r3, r7
 800bad6:	f7f4 fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bada:	b908      	cbnz	r0, 800bae0 <_dtoa_r+0x190>
 800badc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bae0:	f1bb 0f16 	cmp.w	fp, #22
 800bae4:	d857      	bhi.n	800bb96 <_dtoa_r+0x246>
 800bae6:	4b5b      	ldr	r3, [pc, #364]	; (800bc54 <_dtoa_r+0x304>)
 800bae8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800baec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf0:	ec51 0b18 	vmov	r0, r1, d8
 800baf4:	f7f4 fff2 	bl	8000adc <__aeabi_dcmplt>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	d04e      	beq.n	800bb9a <_dtoa_r+0x24a>
 800bafc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb00:	2300      	movs	r3, #0
 800bb02:	930c      	str	r3, [sp, #48]	; 0x30
 800bb04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb06:	1b5b      	subs	r3, r3, r5
 800bb08:	1e5a      	subs	r2, r3, #1
 800bb0a:	bf45      	ittet	mi
 800bb0c:	f1c3 0301 	rsbmi	r3, r3, #1
 800bb10:	9305      	strmi	r3, [sp, #20]
 800bb12:	2300      	movpl	r3, #0
 800bb14:	2300      	movmi	r3, #0
 800bb16:	9206      	str	r2, [sp, #24]
 800bb18:	bf54      	ite	pl
 800bb1a:	9305      	strpl	r3, [sp, #20]
 800bb1c:	9306      	strmi	r3, [sp, #24]
 800bb1e:	f1bb 0f00 	cmp.w	fp, #0
 800bb22:	db3c      	blt.n	800bb9e <_dtoa_r+0x24e>
 800bb24:	9b06      	ldr	r3, [sp, #24]
 800bb26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bb2a:	445b      	add	r3, fp
 800bb2c:	9306      	str	r3, [sp, #24]
 800bb2e:	2300      	movs	r3, #0
 800bb30:	9308      	str	r3, [sp, #32]
 800bb32:	9b07      	ldr	r3, [sp, #28]
 800bb34:	2b09      	cmp	r3, #9
 800bb36:	d868      	bhi.n	800bc0a <_dtoa_r+0x2ba>
 800bb38:	2b05      	cmp	r3, #5
 800bb3a:	bfc4      	itt	gt
 800bb3c:	3b04      	subgt	r3, #4
 800bb3e:	9307      	strgt	r3, [sp, #28]
 800bb40:	9b07      	ldr	r3, [sp, #28]
 800bb42:	f1a3 0302 	sub.w	r3, r3, #2
 800bb46:	bfcc      	ite	gt
 800bb48:	2500      	movgt	r5, #0
 800bb4a:	2501      	movle	r5, #1
 800bb4c:	2b03      	cmp	r3, #3
 800bb4e:	f200 8085 	bhi.w	800bc5c <_dtoa_r+0x30c>
 800bb52:	e8df f003 	tbb	[pc, r3]
 800bb56:	3b2e      	.short	0x3b2e
 800bb58:	5839      	.short	0x5839
 800bb5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bb5e:	441d      	add	r5, r3
 800bb60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb64:	2b20      	cmp	r3, #32
 800bb66:	bfc1      	itttt	gt
 800bb68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb6c:	fa08 f803 	lslgt.w	r8, r8, r3
 800bb70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bb74:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bb78:	bfd6      	itet	le
 800bb7a:	f1c3 0320 	rsble	r3, r3, #32
 800bb7e:	ea48 0003 	orrgt.w	r0, r8, r3
 800bb82:	fa06 f003 	lslle.w	r0, r6, r3
 800bb86:	f7f4 fcbd 	bl	8000504 <__aeabi_ui2d>
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bb90:	3d01      	subs	r5, #1
 800bb92:	920e      	str	r2, [sp, #56]	; 0x38
 800bb94:	e76f      	b.n	800ba76 <_dtoa_r+0x126>
 800bb96:	2301      	movs	r3, #1
 800bb98:	e7b3      	b.n	800bb02 <_dtoa_r+0x1b2>
 800bb9a:	900c      	str	r0, [sp, #48]	; 0x30
 800bb9c:	e7b2      	b.n	800bb04 <_dtoa_r+0x1b4>
 800bb9e:	9b05      	ldr	r3, [sp, #20]
 800bba0:	eba3 030b 	sub.w	r3, r3, fp
 800bba4:	9305      	str	r3, [sp, #20]
 800bba6:	f1cb 0300 	rsb	r3, fp, #0
 800bbaa:	9308      	str	r3, [sp, #32]
 800bbac:	2300      	movs	r3, #0
 800bbae:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbb0:	e7bf      	b.n	800bb32 <_dtoa_r+0x1e2>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	9309      	str	r3, [sp, #36]	; 0x24
 800bbb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	dc52      	bgt.n	800bc62 <_dtoa_r+0x312>
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	9301      	str	r3, [sp, #4]
 800bbc0:	9304      	str	r3, [sp, #16]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	920a      	str	r2, [sp, #40]	; 0x28
 800bbc6:	e00b      	b.n	800bbe0 <_dtoa_r+0x290>
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e7f3      	b.n	800bbb4 <_dtoa_r+0x264>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbd2:	445b      	add	r3, fp
 800bbd4:	9301      	str	r3, [sp, #4]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	9304      	str	r3, [sp, #16]
 800bbdc:	bfb8      	it	lt
 800bbde:	2301      	movlt	r3, #1
 800bbe0:	69e0      	ldr	r0, [r4, #28]
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	2204      	movs	r2, #4
 800bbe6:	f102 0614 	add.w	r6, r2, #20
 800bbea:	429e      	cmp	r6, r3
 800bbec:	d93d      	bls.n	800bc6a <_dtoa_r+0x31a>
 800bbee:	6041      	str	r1, [r0, #4]
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f000 fd9f 	bl	800c734 <_Balloc>
 800bbf6:	9000      	str	r0, [sp, #0]
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	d139      	bne.n	800bc70 <_dtoa_r+0x320>
 800bbfc:	4b16      	ldr	r3, [pc, #88]	; (800bc58 <_dtoa_r+0x308>)
 800bbfe:	4602      	mov	r2, r0
 800bc00:	f240 11af 	movw	r1, #431	; 0x1af
 800bc04:	e6bd      	b.n	800b982 <_dtoa_r+0x32>
 800bc06:	2301      	movs	r3, #1
 800bc08:	e7e1      	b.n	800bbce <_dtoa_r+0x27e>
 800bc0a:	2501      	movs	r5, #1
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	9307      	str	r3, [sp, #28]
 800bc10:	9509      	str	r5, [sp, #36]	; 0x24
 800bc12:	f04f 33ff 	mov.w	r3, #4294967295
 800bc16:	9301      	str	r3, [sp, #4]
 800bc18:	9304      	str	r3, [sp, #16]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	2312      	movs	r3, #18
 800bc1e:	e7d1      	b.n	800bbc4 <_dtoa_r+0x274>
 800bc20:	636f4361 	.word	0x636f4361
 800bc24:	3fd287a7 	.word	0x3fd287a7
 800bc28:	8b60c8b3 	.word	0x8b60c8b3
 800bc2c:	3fc68a28 	.word	0x3fc68a28
 800bc30:	509f79fb 	.word	0x509f79fb
 800bc34:	3fd34413 	.word	0x3fd34413
 800bc38:	0800e426 	.word	0x0800e426
 800bc3c:	0800e43d 	.word	0x0800e43d
 800bc40:	7ff00000 	.word	0x7ff00000
 800bc44:	0800e422 	.word	0x0800e422
 800bc48:	0800e419 	.word	0x0800e419
 800bc4c:	0800e3f6 	.word	0x0800e3f6
 800bc50:	3ff80000 	.word	0x3ff80000
 800bc54:	0800e528 	.word	0x0800e528
 800bc58:	0800e495 	.word	0x0800e495
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc60:	e7d7      	b.n	800bc12 <_dtoa_r+0x2c2>
 800bc62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc64:	9301      	str	r3, [sp, #4]
 800bc66:	9304      	str	r3, [sp, #16]
 800bc68:	e7ba      	b.n	800bbe0 <_dtoa_r+0x290>
 800bc6a:	3101      	adds	r1, #1
 800bc6c:	0052      	lsls	r2, r2, #1
 800bc6e:	e7ba      	b.n	800bbe6 <_dtoa_r+0x296>
 800bc70:	69e3      	ldr	r3, [r4, #28]
 800bc72:	9a00      	ldr	r2, [sp, #0]
 800bc74:	601a      	str	r2, [r3, #0]
 800bc76:	9b04      	ldr	r3, [sp, #16]
 800bc78:	2b0e      	cmp	r3, #14
 800bc7a:	f200 80a8 	bhi.w	800bdce <_dtoa_r+0x47e>
 800bc7e:	2d00      	cmp	r5, #0
 800bc80:	f000 80a5 	beq.w	800bdce <_dtoa_r+0x47e>
 800bc84:	f1bb 0f00 	cmp.w	fp, #0
 800bc88:	dd38      	ble.n	800bcfc <_dtoa_r+0x3ac>
 800bc8a:	4bc0      	ldr	r3, [pc, #768]	; (800bf8c <_dtoa_r+0x63c>)
 800bc8c:	f00b 020f 	and.w	r2, fp, #15
 800bc90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bc98:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bc9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bca0:	d019      	beq.n	800bcd6 <_dtoa_r+0x386>
 800bca2:	4bbb      	ldr	r3, [pc, #748]	; (800bf90 <_dtoa_r+0x640>)
 800bca4:	ec51 0b18 	vmov	r0, r1, d8
 800bca8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bcac:	f7f4 fdce 	bl	800084c <__aeabi_ddiv>
 800bcb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcb4:	f008 080f 	and.w	r8, r8, #15
 800bcb8:	2503      	movs	r5, #3
 800bcba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bf90 <_dtoa_r+0x640>
 800bcbe:	f1b8 0f00 	cmp.w	r8, #0
 800bcc2:	d10a      	bne.n	800bcda <_dtoa_r+0x38a>
 800bcc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcc8:	4632      	mov	r2, r6
 800bcca:	463b      	mov	r3, r7
 800bccc:	f7f4 fdbe 	bl	800084c <__aeabi_ddiv>
 800bcd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcd4:	e02b      	b.n	800bd2e <_dtoa_r+0x3de>
 800bcd6:	2502      	movs	r5, #2
 800bcd8:	e7ef      	b.n	800bcba <_dtoa_r+0x36a>
 800bcda:	f018 0f01 	tst.w	r8, #1
 800bcde:	d008      	beq.n	800bcf2 <_dtoa_r+0x3a2>
 800bce0:	4630      	mov	r0, r6
 800bce2:	4639      	mov	r1, r7
 800bce4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bce8:	f7f4 fc86 	bl	80005f8 <__aeabi_dmul>
 800bcec:	3501      	adds	r5, #1
 800bcee:	4606      	mov	r6, r0
 800bcf0:	460f      	mov	r7, r1
 800bcf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bcf6:	f109 0908 	add.w	r9, r9, #8
 800bcfa:	e7e0      	b.n	800bcbe <_dtoa_r+0x36e>
 800bcfc:	f000 809f 	beq.w	800be3e <_dtoa_r+0x4ee>
 800bd00:	f1cb 0600 	rsb	r6, fp, #0
 800bd04:	4ba1      	ldr	r3, [pc, #644]	; (800bf8c <_dtoa_r+0x63c>)
 800bd06:	4fa2      	ldr	r7, [pc, #648]	; (800bf90 <_dtoa_r+0x640>)
 800bd08:	f006 020f 	and.w	r2, r6, #15
 800bd0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd14:	ec51 0b18 	vmov	r0, r1, d8
 800bd18:	f7f4 fc6e 	bl	80005f8 <__aeabi_dmul>
 800bd1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd20:	1136      	asrs	r6, r6, #4
 800bd22:	2300      	movs	r3, #0
 800bd24:	2502      	movs	r5, #2
 800bd26:	2e00      	cmp	r6, #0
 800bd28:	d17e      	bne.n	800be28 <_dtoa_r+0x4d8>
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1d0      	bne.n	800bcd0 <_dtoa_r+0x380>
 800bd2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f000 8084 	beq.w	800be42 <_dtoa_r+0x4f2>
 800bd3a:	4b96      	ldr	r3, [pc, #600]	; (800bf94 <_dtoa_r+0x644>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	4640      	mov	r0, r8
 800bd40:	4649      	mov	r1, r9
 800bd42:	f7f4 fecb 	bl	8000adc <__aeabi_dcmplt>
 800bd46:	2800      	cmp	r0, #0
 800bd48:	d07b      	beq.n	800be42 <_dtoa_r+0x4f2>
 800bd4a:	9b04      	ldr	r3, [sp, #16]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d078      	beq.n	800be42 <_dtoa_r+0x4f2>
 800bd50:	9b01      	ldr	r3, [sp, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	dd39      	ble.n	800bdca <_dtoa_r+0x47a>
 800bd56:	4b90      	ldr	r3, [pc, #576]	; (800bf98 <_dtoa_r+0x648>)
 800bd58:	2200      	movs	r2, #0
 800bd5a:	4640      	mov	r0, r8
 800bd5c:	4649      	mov	r1, r9
 800bd5e:	f7f4 fc4b 	bl	80005f8 <__aeabi_dmul>
 800bd62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd66:	9e01      	ldr	r6, [sp, #4]
 800bd68:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bd6c:	3501      	adds	r5, #1
 800bd6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd72:	4628      	mov	r0, r5
 800bd74:	f7f4 fbd6 	bl	8000524 <__aeabi_i2d>
 800bd78:	4642      	mov	r2, r8
 800bd7a:	464b      	mov	r3, r9
 800bd7c:	f7f4 fc3c 	bl	80005f8 <__aeabi_dmul>
 800bd80:	4b86      	ldr	r3, [pc, #536]	; (800bf9c <_dtoa_r+0x64c>)
 800bd82:	2200      	movs	r2, #0
 800bd84:	f7f4 fa82 	bl	800028c <__adddf3>
 800bd88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bd8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd90:	9303      	str	r3, [sp, #12]
 800bd92:	2e00      	cmp	r6, #0
 800bd94:	d158      	bne.n	800be48 <_dtoa_r+0x4f8>
 800bd96:	4b82      	ldr	r3, [pc, #520]	; (800bfa0 <_dtoa_r+0x650>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	4640      	mov	r0, r8
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	f7f4 fa73 	bl	8000288 <__aeabi_dsub>
 800bda2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bda6:	4680      	mov	r8, r0
 800bda8:	4689      	mov	r9, r1
 800bdaa:	f7f4 feb5 	bl	8000b18 <__aeabi_dcmpgt>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	f040 8296 	bne.w	800c2e0 <_dtoa_r+0x990>
 800bdb4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bdb8:	4640      	mov	r0, r8
 800bdba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdbe:	4649      	mov	r1, r9
 800bdc0:	f7f4 fe8c 	bl	8000adc <__aeabi_dcmplt>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	f040 8289 	bne.w	800c2dc <_dtoa_r+0x98c>
 800bdca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bdce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f2c0 814e 	blt.w	800c072 <_dtoa_r+0x722>
 800bdd6:	f1bb 0f0e 	cmp.w	fp, #14
 800bdda:	f300 814a 	bgt.w	800c072 <_dtoa_r+0x722>
 800bdde:	4b6b      	ldr	r3, [pc, #428]	; (800bf8c <_dtoa_r+0x63c>)
 800bde0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bde4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bde8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	f280 80dc 	bge.w	800bfa8 <_dtoa_r+0x658>
 800bdf0:	9b04      	ldr	r3, [sp, #16]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f300 80d8 	bgt.w	800bfa8 <_dtoa_r+0x658>
 800bdf8:	f040 826f 	bne.w	800c2da <_dtoa_r+0x98a>
 800bdfc:	4b68      	ldr	r3, [pc, #416]	; (800bfa0 <_dtoa_r+0x650>)
 800bdfe:	2200      	movs	r2, #0
 800be00:	4640      	mov	r0, r8
 800be02:	4649      	mov	r1, r9
 800be04:	f7f4 fbf8 	bl	80005f8 <__aeabi_dmul>
 800be08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be0c:	f7f4 fe7a 	bl	8000b04 <__aeabi_dcmpge>
 800be10:	9e04      	ldr	r6, [sp, #16]
 800be12:	4637      	mov	r7, r6
 800be14:	2800      	cmp	r0, #0
 800be16:	f040 8245 	bne.w	800c2a4 <_dtoa_r+0x954>
 800be1a:	9d00      	ldr	r5, [sp, #0]
 800be1c:	2331      	movs	r3, #49	; 0x31
 800be1e:	f805 3b01 	strb.w	r3, [r5], #1
 800be22:	f10b 0b01 	add.w	fp, fp, #1
 800be26:	e241      	b.n	800c2ac <_dtoa_r+0x95c>
 800be28:	07f2      	lsls	r2, r6, #31
 800be2a:	d505      	bpl.n	800be38 <_dtoa_r+0x4e8>
 800be2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be30:	f7f4 fbe2 	bl	80005f8 <__aeabi_dmul>
 800be34:	3501      	adds	r5, #1
 800be36:	2301      	movs	r3, #1
 800be38:	1076      	asrs	r6, r6, #1
 800be3a:	3708      	adds	r7, #8
 800be3c:	e773      	b.n	800bd26 <_dtoa_r+0x3d6>
 800be3e:	2502      	movs	r5, #2
 800be40:	e775      	b.n	800bd2e <_dtoa_r+0x3de>
 800be42:	9e04      	ldr	r6, [sp, #16]
 800be44:	465f      	mov	r7, fp
 800be46:	e792      	b.n	800bd6e <_dtoa_r+0x41e>
 800be48:	9900      	ldr	r1, [sp, #0]
 800be4a:	4b50      	ldr	r3, [pc, #320]	; (800bf8c <_dtoa_r+0x63c>)
 800be4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be50:	4431      	add	r1, r6
 800be52:	9102      	str	r1, [sp, #8]
 800be54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be56:	eeb0 9a47 	vmov.f32	s18, s14
 800be5a:	eef0 9a67 	vmov.f32	s19, s15
 800be5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be66:	2900      	cmp	r1, #0
 800be68:	d044      	beq.n	800bef4 <_dtoa_r+0x5a4>
 800be6a:	494e      	ldr	r1, [pc, #312]	; (800bfa4 <_dtoa_r+0x654>)
 800be6c:	2000      	movs	r0, #0
 800be6e:	f7f4 fced 	bl	800084c <__aeabi_ddiv>
 800be72:	ec53 2b19 	vmov	r2, r3, d9
 800be76:	f7f4 fa07 	bl	8000288 <__aeabi_dsub>
 800be7a:	9d00      	ldr	r5, [sp, #0]
 800be7c:	ec41 0b19 	vmov	d9, r0, r1
 800be80:	4649      	mov	r1, r9
 800be82:	4640      	mov	r0, r8
 800be84:	f7f4 fe68 	bl	8000b58 <__aeabi_d2iz>
 800be88:	4606      	mov	r6, r0
 800be8a:	f7f4 fb4b 	bl	8000524 <__aeabi_i2d>
 800be8e:	4602      	mov	r2, r0
 800be90:	460b      	mov	r3, r1
 800be92:	4640      	mov	r0, r8
 800be94:	4649      	mov	r1, r9
 800be96:	f7f4 f9f7 	bl	8000288 <__aeabi_dsub>
 800be9a:	3630      	adds	r6, #48	; 0x30
 800be9c:	f805 6b01 	strb.w	r6, [r5], #1
 800bea0:	ec53 2b19 	vmov	r2, r3, d9
 800bea4:	4680      	mov	r8, r0
 800bea6:	4689      	mov	r9, r1
 800bea8:	f7f4 fe18 	bl	8000adc <__aeabi_dcmplt>
 800beac:	2800      	cmp	r0, #0
 800beae:	d164      	bne.n	800bf7a <_dtoa_r+0x62a>
 800beb0:	4642      	mov	r2, r8
 800beb2:	464b      	mov	r3, r9
 800beb4:	4937      	ldr	r1, [pc, #220]	; (800bf94 <_dtoa_r+0x644>)
 800beb6:	2000      	movs	r0, #0
 800beb8:	f7f4 f9e6 	bl	8000288 <__aeabi_dsub>
 800bebc:	ec53 2b19 	vmov	r2, r3, d9
 800bec0:	f7f4 fe0c 	bl	8000adc <__aeabi_dcmplt>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	f040 80b6 	bne.w	800c036 <_dtoa_r+0x6e6>
 800beca:	9b02      	ldr	r3, [sp, #8]
 800becc:	429d      	cmp	r5, r3
 800bece:	f43f af7c 	beq.w	800bdca <_dtoa_r+0x47a>
 800bed2:	4b31      	ldr	r3, [pc, #196]	; (800bf98 <_dtoa_r+0x648>)
 800bed4:	ec51 0b19 	vmov	r0, r1, d9
 800bed8:	2200      	movs	r2, #0
 800beda:	f7f4 fb8d 	bl	80005f8 <__aeabi_dmul>
 800bede:	4b2e      	ldr	r3, [pc, #184]	; (800bf98 <_dtoa_r+0x648>)
 800bee0:	ec41 0b19 	vmov	d9, r0, r1
 800bee4:	2200      	movs	r2, #0
 800bee6:	4640      	mov	r0, r8
 800bee8:	4649      	mov	r1, r9
 800beea:	f7f4 fb85 	bl	80005f8 <__aeabi_dmul>
 800beee:	4680      	mov	r8, r0
 800bef0:	4689      	mov	r9, r1
 800bef2:	e7c5      	b.n	800be80 <_dtoa_r+0x530>
 800bef4:	ec51 0b17 	vmov	r0, r1, d7
 800bef8:	f7f4 fb7e 	bl	80005f8 <__aeabi_dmul>
 800befc:	9b02      	ldr	r3, [sp, #8]
 800befe:	9d00      	ldr	r5, [sp, #0]
 800bf00:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf02:	ec41 0b19 	vmov	d9, r0, r1
 800bf06:	4649      	mov	r1, r9
 800bf08:	4640      	mov	r0, r8
 800bf0a:	f7f4 fe25 	bl	8000b58 <__aeabi_d2iz>
 800bf0e:	4606      	mov	r6, r0
 800bf10:	f7f4 fb08 	bl	8000524 <__aeabi_i2d>
 800bf14:	3630      	adds	r6, #48	; 0x30
 800bf16:	4602      	mov	r2, r0
 800bf18:	460b      	mov	r3, r1
 800bf1a:	4640      	mov	r0, r8
 800bf1c:	4649      	mov	r1, r9
 800bf1e:	f7f4 f9b3 	bl	8000288 <__aeabi_dsub>
 800bf22:	f805 6b01 	strb.w	r6, [r5], #1
 800bf26:	9b02      	ldr	r3, [sp, #8]
 800bf28:	429d      	cmp	r5, r3
 800bf2a:	4680      	mov	r8, r0
 800bf2c:	4689      	mov	r9, r1
 800bf2e:	f04f 0200 	mov.w	r2, #0
 800bf32:	d124      	bne.n	800bf7e <_dtoa_r+0x62e>
 800bf34:	4b1b      	ldr	r3, [pc, #108]	; (800bfa4 <_dtoa_r+0x654>)
 800bf36:	ec51 0b19 	vmov	r0, r1, d9
 800bf3a:	f7f4 f9a7 	bl	800028c <__adddf3>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	460b      	mov	r3, r1
 800bf42:	4640      	mov	r0, r8
 800bf44:	4649      	mov	r1, r9
 800bf46:	f7f4 fde7 	bl	8000b18 <__aeabi_dcmpgt>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d173      	bne.n	800c036 <_dtoa_r+0x6e6>
 800bf4e:	ec53 2b19 	vmov	r2, r3, d9
 800bf52:	4914      	ldr	r1, [pc, #80]	; (800bfa4 <_dtoa_r+0x654>)
 800bf54:	2000      	movs	r0, #0
 800bf56:	f7f4 f997 	bl	8000288 <__aeabi_dsub>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	4640      	mov	r0, r8
 800bf60:	4649      	mov	r1, r9
 800bf62:	f7f4 fdbb 	bl	8000adc <__aeabi_dcmplt>
 800bf66:	2800      	cmp	r0, #0
 800bf68:	f43f af2f 	beq.w	800bdca <_dtoa_r+0x47a>
 800bf6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf6e:	1e6b      	subs	r3, r5, #1
 800bf70:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf76:	2b30      	cmp	r3, #48	; 0x30
 800bf78:	d0f8      	beq.n	800bf6c <_dtoa_r+0x61c>
 800bf7a:	46bb      	mov	fp, r7
 800bf7c:	e04a      	b.n	800c014 <_dtoa_r+0x6c4>
 800bf7e:	4b06      	ldr	r3, [pc, #24]	; (800bf98 <_dtoa_r+0x648>)
 800bf80:	f7f4 fb3a 	bl	80005f8 <__aeabi_dmul>
 800bf84:	4680      	mov	r8, r0
 800bf86:	4689      	mov	r9, r1
 800bf88:	e7bd      	b.n	800bf06 <_dtoa_r+0x5b6>
 800bf8a:	bf00      	nop
 800bf8c:	0800e528 	.word	0x0800e528
 800bf90:	0800e500 	.word	0x0800e500
 800bf94:	3ff00000 	.word	0x3ff00000
 800bf98:	40240000 	.word	0x40240000
 800bf9c:	401c0000 	.word	0x401c0000
 800bfa0:	40140000 	.word	0x40140000
 800bfa4:	3fe00000 	.word	0x3fe00000
 800bfa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bfac:	9d00      	ldr	r5, [sp, #0]
 800bfae:	4642      	mov	r2, r8
 800bfb0:	464b      	mov	r3, r9
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	4639      	mov	r1, r7
 800bfb6:	f7f4 fc49 	bl	800084c <__aeabi_ddiv>
 800bfba:	f7f4 fdcd 	bl	8000b58 <__aeabi_d2iz>
 800bfbe:	9001      	str	r0, [sp, #4]
 800bfc0:	f7f4 fab0 	bl	8000524 <__aeabi_i2d>
 800bfc4:	4642      	mov	r2, r8
 800bfc6:	464b      	mov	r3, r9
 800bfc8:	f7f4 fb16 	bl	80005f8 <__aeabi_dmul>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	460b      	mov	r3, r1
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	4639      	mov	r1, r7
 800bfd4:	f7f4 f958 	bl	8000288 <__aeabi_dsub>
 800bfd8:	9e01      	ldr	r6, [sp, #4]
 800bfda:	9f04      	ldr	r7, [sp, #16]
 800bfdc:	3630      	adds	r6, #48	; 0x30
 800bfde:	f805 6b01 	strb.w	r6, [r5], #1
 800bfe2:	9e00      	ldr	r6, [sp, #0]
 800bfe4:	1bae      	subs	r6, r5, r6
 800bfe6:	42b7      	cmp	r7, r6
 800bfe8:	4602      	mov	r2, r0
 800bfea:	460b      	mov	r3, r1
 800bfec:	d134      	bne.n	800c058 <_dtoa_r+0x708>
 800bfee:	f7f4 f94d 	bl	800028c <__adddf3>
 800bff2:	4642      	mov	r2, r8
 800bff4:	464b      	mov	r3, r9
 800bff6:	4606      	mov	r6, r0
 800bff8:	460f      	mov	r7, r1
 800bffa:	f7f4 fd8d 	bl	8000b18 <__aeabi_dcmpgt>
 800bffe:	b9c8      	cbnz	r0, 800c034 <_dtoa_r+0x6e4>
 800c000:	4642      	mov	r2, r8
 800c002:	464b      	mov	r3, r9
 800c004:	4630      	mov	r0, r6
 800c006:	4639      	mov	r1, r7
 800c008:	f7f4 fd5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c00c:	b110      	cbz	r0, 800c014 <_dtoa_r+0x6c4>
 800c00e:	9b01      	ldr	r3, [sp, #4]
 800c010:	07db      	lsls	r3, r3, #31
 800c012:	d40f      	bmi.n	800c034 <_dtoa_r+0x6e4>
 800c014:	4651      	mov	r1, sl
 800c016:	4620      	mov	r0, r4
 800c018:	f000 fbcc 	bl	800c7b4 <_Bfree>
 800c01c:	2300      	movs	r3, #0
 800c01e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c020:	702b      	strb	r3, [r5, #0]
 800c022:	f10b 0301 	add.w	r3, fp, #1
 800c026:	6013      	str	r3, [r2, #0]
 800c028:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f43f ace2 	beq.w	800b9f4 <_dtoa_r+0xa4>
 800c030:	601d      	str	r5, [r3, #0]
 800c032:	e4df      	b.n	800b9f4 <_dtoa_r+0xa4>
 800c034:	465f      	mov	r7, fp
 800c036:	462b      	mov	r3, r5
 800c038:	461d      	mov	r5, r3
 800c03a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c03e:	2a39      	cmp	r2, #57	; 0x39
 800c040:	d106      	bne.n	800c050 <_dtoa_r+0x700>
 800c042:	9a00      	ldr	r2, [sp, #0]
 800c044:	429a      	cmp	r2, r3
 800c046:	d1f7      	bne.n	800c038 <_dtoa_r+0x6e8>
 800c048:	9900      	ldr	r1, [sp, #0]
 800c04a:	2230      	movs	r2, #48	; 0x30
 800c04c:	3701      	adds	r7, #1
 800c04e:	700a      	strb	r2, [r1, #0]
 800c050:	781a      	ldrb	r2, [r3, #0]
 800c052:	3201      	adds	r2, #1
 800c054:	701a      	strb	r2, [r3, #0]
 800c056:	e790      	b.n	800bf7a <_dtoa_r+0x62a>
 800c058:	4ba3      	ldr	r3, [pc, #652]	; (800c2e8 <_dtoa_r+0x998>)
 800c05a:	2200      	movs	r2, #0
 800c05c:	f7f4 facc 	bl	80005f8 <__aeabi_dmul>
 800c060:	2200      	movs	r2, #0
 800c062:	2300      	movs	r3, #0
 800c064:	4606      	mov	r6, r0
 800c066:	460f      	mov	r7, r1
 800c068:	f7f4 fd2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	d09e      	beq.n	800bfae <_dtoa_r+0x65e>
 800c070:	e7d0      	b.n	800c014 <_dtoa_r+0x6c4>
 800c072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c074:	2a00      	cmp	r2, #0
 800c076:	f000 80ca 	beq.w	800c20e <_dtoa_r+0x8be>
 800c07a:	9a07      	ldr	r2, [sp, #28]
 800c07c:	2a01      	cmp	r2, #1
 800c07e:	f300 80ad 	bgt.w	800c1dc <_dtoa_r+0x88c>
 800c082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c084:	2a00      	cmp	r2, #0
 800c086:	f000 80a5 	beq.w	800c1d4 <_dtoa_r+0x884>
 800c08a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c08e:	9e08      	ldr	r6, [sp, #32]
 800c090:	9d05      	ldr	r5, [sp, #20]
 800c092:	9a05      	ldr	r2, [sp, #20]
 800c094:	441a      	add	r2, r3
 800c096:	9205      	str	r2, [sp, #20]
 800c098:	9a06      	ldr	r2, [sp, #24]
 800c09a:	2101      	movs	r1, #1
 800c09c:	441a      	add	r2, r3
 800c09e:	4620      	mov	r0, r4
 800c0a0:	9206      	str	r2, [sp, #24]
 800c0a2:	f000 fc3d 	bl	800c920 <__i2b>
 800c0a6:	4607      	mov	r7, r0
 800c0a8:	b165      	cbz	r5, 800c0c4 <_dtoa_r+0x774>
 800c0aa:	9b06      	ldr	r3, [sp, #24]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	dd09      	ble.n	800c0c4 <_dtoa_r+0x774>
 800c0b0:	42ab      	cmp	r3, r5
 800c0b2:	9a05      	ldr	r2, [sp, #20]
 800c0b4:	bfa8      	it	ge
 800c0b6:	462b      	movge	r3, r5
 800c0b8:	1ad2      	subs	r2, r2, r3
 800c0ba:	9205      	str	r2, [sp, #20]
 800c0bc:	9a06      	ldr	r2, [sp, #24]
 800c0be:	1aed      	subs	r5, r5, r3
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	9306      	str	r3, [sp, #24]
 800c0c4:	9b08      	ldr	r3, [sp, #32]
 800c0c6:	b1f3      	cbz	r3, 800c106 <_dtoa_r+0x7b6>
 800c0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f000 80a3 	beq.w	800c216 <_dtoa_r+0x8c6>
 800c0d0:	2e00      	cmp	r6, #0
 800c0d2:	dd10      	ble.n	800c0f6 <_dtoa_r+0x7a6>
 800c0d4:	4639      	mov	r1, r7
 800c0d6:	4632      	mov	r2, r6
 800c0d8:	4620      	mov	r0, r4
 800c0da:	f000 fce1 	bl	800caa0 <__pow5mult>
 800c0de:	4652      	mov	r2, sl
 800c0e0:	4601      	mov	r1, r0
 800c0e2:	4607      	mov	r7, r0
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f000 fc31 	bl	800c94c <__multiply>
 800c0ea:	4651      	mov	r1, sl
 800c0ec:	4680      	mov	r8, r0
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f000 fb60 	bl	800c7b4 <_Bfree>
 800c0f4:	46c2      	mov	sl, r8
 800c0f6:	9b08      	ldr	r3, [sp, #32]
 800c0f8:	1b9a      	subs	r2, r3, r6
 800c0fa:	d004      	beq.n	800c106 <_dtoa_r+0x7b6>
 800c0fc:	4651      	mov	r1, sl
 800c0fe:	4620      	mov	r0, r4
 800c100:	f000 fcce 	bl	800caa0 <__pow5mult>
 800c104:	4682      	mov	sl, r0
 800c106:	2101      	movs	r1, #1
 800c108:	4620      	mov	r0, r4
 800c10a:	f000 fc09 	bl	800c920 <__i2b>
 800c10e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c110:	2b00      	cmp	r3, #0
 800c112:	4606      	mov	r6, r0
 800c114:	f340 8081 	ble.w	800c21a <_dtoa_r+0x8ca>
 800c118:	461a      	mov	r2, r3
 800c11a:	4601      	mov	r1, r0
 800c11c:	4620      	mov	r0, r4
 800c11e:	f000 fcbf 	bl	800caa0 <__pow5mult>
 800c122:	9b07      	ldr	r3, [sp, #28]
 800c124:	2b01      	cmp	r3, #1
 800c126:	4606      	mov	r6, r0
 800c128:	dd7a      	ble.n	800c220 <_dtoa_r+0x8d0>
 800c12a:	f04f 0800 	mov.w	r8, #0
 800c12e:	6933      	ldr	r3, [r6, #16]
 800c130:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c134:	6918      	ldr	r0, [r3, #16]
 800c136:	f000 fba5 	bl	800c884 <__hi0bits>
 800c13a:	f1c0 0020 	rsb	r0, r0, #32
 800c13e:	9b06      	ldr	r3, [sp, #24]
 800c140:	4418      	add	r0, r3
 800c142:	f010 001f 	ands.w	r0, r0, #31
 800c146:	f000 8094 	beq.w	800c272 <_dtoa_r+0x922>
 800c14a:	f1c0 0320 	rsb	r3, r0, #32
 800c14e:	2b04      	cmp	r3, #4
 800c150:	f340 8085 	ble.w	800c25e <_dtoa_r+0x90e>
 800c154:	9b05      	ldr	r3, [sp, #20]
 800c156:	f1c0 001c 	rsb	r0, r0, #28
 800c15a:	4403      	add	r3, r0
 800c15c:	9305      	str	r3, [sp, #20]
 800c15e:	9b06      	ldr	r3, [sp, #24]
 800c160:	4403      	add	r3, r0
 800c162:	4405      	add	r5, r0
 800c164:	9306      	str	r3, [sp, #24]
 800c166:	9b05      	ldr	r3, [sp, #20]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	dd05      	ble.n	800c178 <_dtoa_r+0x828>
 800c16c:	4651      	mov	r1, sl
 800c16e:	461a      	mov	r2, r3
 800c170:	4620      	mov	r0, r4
 800c172:	f000 fcef 	bl	800cb54 <__lshift>
 800c176:	4682      	mov	sl, r0
 800c178:	9b06      	ldr	r3, [sp, #24]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	dd05      	ble.n	800c18a <_dtoa_r+0x83a>
 800c17e:	4631      	mov	r1, r6
 800c180:	461a      	mov	r2, r3
 800c182:	4620      	mov	r0, r4
 800c184:	f000 fce6 	bl	800cb54 <__lshift>
 800c188:	4606      	mov	r6, r0
 800c18a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d072      	beq.n	800c276 <_dtoa_r+0x926>
 800c190:	4631      	mov	r1, r6
 800c192:	4650      	mov	r0, sl
 800c194:	f000 fd4a 	bl	800cc2c <__mcmp>
 800c198:	2800      	cmp	r0, #0
 800c19a:	da6c      	bge.n	800c276 <_dtoa_r+0x926>
 800c19c:	2300      	movs	r3, #0
 800c19e:	4651      	mov	r1, sl
 800c1a0:	220a      	movs	r2, #10
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f000 fb28 	bl	800c7f8 <__multadd>
 800c1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c1ae:	4682      	mov	sl, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f000 81b0 	beq.w	800c516 <_dtoa_r+0xbc6>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	4639      	mov	r1, r7
 800c1ba:	220a      	movs	r2, #10
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f000 fb1b 	bl	800c7f8 <__multadd>
 800c1c2:	9b01      	ldr	r3, [sp, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	4607      	mov	r7, r0
 800c1c8:	f300 8096 	bgt.w	800c2f8 <_dtoa_r+0x9a8>
 800c1cc:	9b07      	ldr	r3, [sp, #28]
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	dc59      	bgt.n	800c286 <_dtoa_r+0x936>
 800c1d2:	e091      	b.n	800c2f8 <_dtoa_r+0x9a8>
 800c1d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c1da:	e758      	b.n	800c08e <_dtoa_r+0x73e>
 800c1dc:	9b04      	ldr	r3, [sp, #16]
 800c1de:	1e5e      	subs	r6, r3, #1
 800c1e0:	9b08      	ldr	r3, [sp, #32]
 800c1e2:	42b3      	cmp	r3, r6
 800c1e4:	bfbf      	itttt	lt
 800c1e6:	9b08      	ldrlt	r3, [sp, #32]
 800c1e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c1ea:	9608      	strlt	r6, [sp, #32]
 800c1ec:	1af3      	sublt	r3, r6, r3
 800c1ee:	bfb4      	ite	lt
 800c1f0:	18d2      	addlt	r2, r2, r3
 800c1f2:	1b9e      	subge	r6, r3, r6
 800c1f4:	9b04      	ldr	r3, [sp, #16]
 800c1f6:	bfbc      	itt	lt
 800c1f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c1fa:	2600      	movlt	r6, #0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	bfb7      	itett	lt
 800c200:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c204:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c208:	1a9d      	sublt	r5, r3, r2
 800c20a:	2300      	movlt	r3, #0
 800c20c:	e741      	b.n	800c092 <_dtoa_r+0x742>
 800c20e:	9e08      	ldr	r6, [sp, #32]
 800c210:	9d05      	ldr	r5, [sp, #20]
 800c212:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c214:	e748      	b.n	800c0a8 <_dtoa_r+0x758>
 800c216:	9a08      	ldr	r2, [sp, #32]
 800c218:	e770      	b.n	800c0fc <_dtoa_r+0x7ac>
 800c21a:	9b07      	ldr	r3, [sp, #28]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	dc19      	bgt.n	800c254 <_dtoa_r+0x904>
 800c220:	9b02      	ldr	r3, [sp, #8]
 800c222:	b9bb      	cbnz	r3, 800c254 <_dtoa_r+0x904>
 800c224:	9b03      	ldr	r3, [sp, #12]
 800c226:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c22a:	b99b      	cbnz	r3, 800c254 <_dtoa_r+0x904>
 800c22c:	9b03      	ldr	r3, [sp, #12]
 800c22e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c232:	0d1b      	lsrs	r3, r3, #20
 800c234:	051b      	lsls	r3, r3, #20
 800c236:	b183      	cbz	r3, 800c25a <_dtoa_r+0x90a>
 800c238:	9b05      	ldr	r3, [sp, #20]
 800c23a:	3301      	adds	r3, #1
 800c23c:	9305      	str	r3, [sp, #20]
 800c23e:	9b06      	ldr	r3, [sp, #24]
 800c240:	3301      	adds	r3, #1
 800c242:	9306      	str	r3, [sp, #24]
 800c244:	f04f 0801 	mov.w	r8, #1
 800c248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f47f af6f 	bne.w	800c12e <_dtoa_r+0x7de>
 800c250:	2001      	movs	r0, #1
 800c252:	e774      	b.n	800c13e <_dtoa_r+0x7ee>
 800c254:	f04f 0800 	mov.w	r8, #0
 800c258:	e7f6      	b.n	800c248 <_dtoa_r+0x8f8>
 800c25a:	4698      	mov	r8, r3
 800c25c:	e7f4      	b.n	800c248 <_dtoa_r+0x8f8>
 800c25e:	d082      	beq.n	800c166 <_dtoa_r+0x816>
 800c260:	9a05      	ldr	r2, [sp, #20]
 800c262:	331c      	adds	r3, #28
 800c264:	441a      	add	r2, r3
 800c266:	9205      	str	r2, [sp, #20]
 800c268:	9a06      	ldr	r2, [sp, #24]
 800c26a:	441a      	add	r2, r3
 800c26c:	441d      	add	r5, r3
 800c26e:	9206      	str	r2, [sp, #24]
 800c270:	e779      	b.n	800c166 <_dtoa_r+0x816>
 800c272:	4603      	mov	r3, r0
 800c274:	e7f4      	b.n	800c260 <_dtoa_r+0x910>
 800c276:	9b04      	ldr	r3, [sp, #16]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	dc37      	bgt.n	800c2ec <_dtoa_r+0x99c>
 800c27c:	9b07      	ldr	r3, [sp, #28]
 800c27e:	2b02      	cmp	r3, #2
 800c280:	dd34      	ble.n	800c2ec <_dtoa_r+0x99c>
 800c282:	9b04      	ldr	r3, [sp, #16]
 800c284:	9301      	str	r3, [sp, #4]
 800c286:	9b01      	ldr	r3, [sp, #4]
 800c288:	b963      	cbnz	r3, 800c2a4 <_dtoa_r+0x954>
 800c28a:	4631      	mov	r1, r6
 800c28c:	2205      	movs	r2, #5
 800c28e:	4620      	mov	r0, r4
 800c290:	f000 fab2 	bl	800c7f8 <__multadd>
 800c294:	4601      	mov	r1, r0
 800c296:	4606      	mov	r6, r0
 800c298:	4650      	mov	r0, sl
 800c29a:	f000 fcc7 	bl	800cc2c <__mcmp>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	f73f adbb 	bgt.w	800be1a <_dtoa_r+0x4ca>
 800c2a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2a6:	9d00      	ldr	r5, [sp, #0]
 800c2a8:	ea6f 0b03 	mvn.w	fp, r3
 800c2ac:	f04f 0800 	mov.w	r8, #0
 800c2b0:	4631      	mov	r1, r6
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f000 fa7e 	bl	800c7b4 <_Bfree>
 800c2b8:	2f00      	cmp	r7, #0
 800c2ba:	f43f aeab 	beq.w	800c014 <_dtoa_r+0x6c4>
 800c2be:	f1b8 0f00 	cmp.w	r8, #0
 800c2c2:	d005      	beq.n	800c2d0 <_dtoa_r+0x980>
 800c2c4:	45b8      	cmp	r8, r7
 800c2c6:	d003      	beq.n	800c2d0 <_dtoa_r+0x980>
 800c2c8:	4641      	mov	r1, r8
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f000 fa72 	bl	800c7b4 <_Bfree>
 800c2d0:	4639      	mov	r1, r7
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 fa6e 	bl	800c7b4 <_Bfree>
 800c2d8:	e69c      	b.n	800c014 <_dtoa_r+0x6c4>
 800c2da:	2600      	movs	r6, #0
 800c2dc:	4637      	mov	r7, r6
 800c2de:	e7e1      	b.n	800c2a4 <_dtoa_r+0x954>
 800c2e0:	46bb      	mov	fp, r7
 800c2e2:	4637      	mov	r7, r6
 800c2e4:	e599      	b.n	800be1a <_dtoa_r+0x4ca>
 800c2e6:	bf00      	nop
 800c2e8:	40240000 	.word	0x40240000
 800c2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f000 80c8 	beq.w	800c484 <_dtoa_r+0xb34>
 800c2f4:	9b04      	ldr	r3, [sp, #16]
 800c2f6:	9301      	str	r3, [sp, #4]
 800c2f8:	2d00      	cmp	r5, #0
 800c2fa:	dd05      	ble.n	800c308 <_dtoa_r+0x9b8>
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	462a      	mov	r2, r5
 800c300:	4620      	mov	r0, r4
 800c302:	f000 fc27 	bl	800cb54 <__lshift>
 800c306:	4607      	mov	r7, r0
 800c308:	f1b8 0f00 	cmp.w	r8, #0
 800c30c:	d05b      	beq.n	800c3c6 <_dtoa_r+0xa76>
 800c30e:	6879      	ldr	r1, [r7, #4]
 800c310:	4620      	mov	r0, r4
 800c312:	f000 fa0f 	bl	800c734 <_Balloc>
 800c316:	4605      	mov	r5, r0
 800c318:	b928      	cbnz	r0, 800c326 <_dtoa_r+0x9d6>
 800c31a:	4b83      	ldr	r3, [pc, #524]	; (800c528 <_dtoa_r+0xbd8>)
 800c31c:	4602      	mov	r2, r0
 800c31e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c322:	f7ff bb2e 	b.w	800b982 <_dtoa_r+0x32>
 800c326:	693a      	ldr	r2, [r7, #16]
 800c328:	3202      	adds	r2, #2
 800c32a:	0092      	lsls	r2, r2, #2
 800c32c:	f107 010c 	add.w	r1, r7, #12
 800c330:	300c      	adds	r0, #12
 800c332:	f001 f82f 	bl	800d394 <memcpy>
 800c336:	2201      	movs	r2, #1
 800c338:	4629      	mov	r1, r5
 800c33a:	4620      	mov	r0, r4
 800c33c:	f000 fc0a 	bl	800cb54 <__lshift>
 800c340:	9b00      	ldr	r3, [sp, #0]
 800c342:	3301      	adds	r3, #1
 800c344:	9304      	str	r3, [sp, #16]
 800c346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c34a:	4413      	add	r3, r2
 800c34c:	9308      	str	r3, [sp, #32]
 800c34e:	9b02      	ldr	r3, [sp, #8]
 800c350:	f003 0301 	and.w	r3, r3, #1
 800c354:	46b8      	mov	r8, r7
 800c356:	9306      	str	r3, [sp, #24]
 800c358:	4607      	mov	r7, r0
 800c35a:	9b04      	ldr	r3, [sp, #16]
 800c35c:	4631      	mov	r1, r6
 800c35e:	3b01      	subs	r3, #1
 800c360:	4650      	mov	r0, sl
 800c362:	9301      	str	r3, [sp, #4]
 800c364:	f7ff fa69 	bl	800b83a <quorem>
 800c368:	4641      	mov	r1, r8
 800c36a:	9002      	str	r0, [sp, #8]
 800c36c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c370:	4650      	mov	r0, sl
 800c372:	f000 fc5b 	bl	800cc2c <__mcmp>
 800c376:	463a      	mov	r2, r7
 800c378:	9005      	str	r0, [sp, #20]
 800c37a:	4631      	mov	r1, r6
 800c37c:	4620      	mov	r0, r4
 800c37e:	f000 fc71 	bl	800cc64 <__mdiff>
 800c382:	68c2      	ldr	r2, [r0, #12]
 800c384:	4605      	mov	r5, r0
 800c386:	bb02      	cbnz	r2, 800c3ca <_dtoa_r+0xa7a>
 800c388:	4601      	mov	r1, r0
 800c38a:	4650      	mov	r0, sl
 800c38c:	f000 fc4e 	bl	800cc2c <__mcmp>
 800c390:	4602      	mov	r2, r0
 800c392:	4629      	mov	r1, r5
 800c394:	4620      	mov	r0, r4
 800c396:	9209      	str	r2, [sp, #36]	; 0x24
 800c398:	f000 fa0c 	bl	800c7b4 <_Bfree>
 800c39c:	9b07      	ldr	r3, [sp, #28]
 800c39e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3a0:	9d04      	ldr	r5, [sp, #16]
 800c3a2:	ea43 0102 	orr.w	r1, r3, r2
 800c3a6:	9b06      	ldr	r3, [sp, #24]
 800c3a8:	4319      	orrs	r1, r3
 800c3aa:	d110      	bne.n	800c3ce <_dtoa_r+0xa7e>
 800c3ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c3b0:	d029      	beq.n	800c406 <_dtoa_r+0xab6>
 800c3b2:	9b05      	ldr	r3, [sp, #20]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	dd02      	ble.n	800c3be <_dtoa_r+0xa6e>
 800c3b8:	9b02      	ldr	r3, [sp, #8]
 800c3ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c3be:	9b01      	ldr	r3, [sp, #4]
 800c3c0:	f883 9000 	strb.w	r9, [r3]
 800c3c4:	e774      	b.n	800c2b0 <_dtoa_r+0x960>
 800c3c6:	4638      	mov	r0, r7
 800c3c8:	e7ba      	b.n	800c340 <_dtoa_r+0x9f0>
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	e7e1      	b.n	800c392 <_dtoa_r+0xa42>
 800c3ce:	9b05      	ldr	r3, [sp, #20]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	db04      	blt.n	800c3de <_dtoa_r+0xa8e>
 800c3d4:	9907      	ldr	r1, [sp, #28]
 800c3d6:	430b      	orrs	r3, r1
 800c3d8:	9906      	ldr	r1, [sp, #24]
 800c3da:	430b      	orrs	r3, r1
 800c3dc:	d120      	bne.n	800c420 <_dtoa_r+0xad0>
 800c3de:	2a00      	cmp	r2, #0
 800c3e0:	dded      	ble.n	800c3be <_dtoa_r+0xa6e>
 800c3e2:	4651      	mov	r1, sl
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f000 fbb4 	bl	800cb54 <__lshift>
 800c3ec:	4631      	mov	r1, r6
 800c3ee:	4682      	mov	sl, r0
 800c3f0:	f000 fc1c 	bl	800cc2c <__mcmp>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	dc03      	bgt.n	800c400 <_dtoa_r+0xab0>
 800c3f8:	d1e1      	bne.n	800c3be <_dtoa_r+0xa6e>
 800c3fa:	f019 0f01 	tst.w	r9, #1
 800c3fe:	d0de      	beq.n	800c3be <_dtoa_r+0xa6e>
 800c400:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c404:	d1d8      	bne.n	800c3b8 <_dtoa_r+0xa68>
 800c406:	9a01      	ldr	r2, [sp, #4]
 800c408:	2339      	movs	r3, #57	; 0x39
 800c40a:	7013      	strb	r3, [r2, #0]
 800c40c:	462b      	mov	r3, r5
 800c40e:	461d      	mov	r5, r3
 800c410:	3b01      	subs	r3, #1
 800c412:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c416:	2a39      	cmp	r2, #57	; 0x39
 800c418:	d06c      	beq.n	800c4f4 <_dtoa_r+0xba4>
 800c41a:	3201      	adds	r2, #1
 800c41c:	701a      	strb	r2, [r3, #0]
 800c41e:	e747      	b.n	800c2b0 <_dtoa_r+0x960>
 800c420:	2a00      	cmp	r2, #0
 800c422:	dd07      	ble.n	800c434 <_dtoa_r+0xae4>
 800c424:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c428:	d0ed      	beq.n	800c406 <_dtoa_r+0xab6>
 800c42a:	9a01      	ldr	r2, [sp, #4]
 800c42c:	f109 0301 	add.w	r3, r9, #1
 800c430:	7013      	strb	r3, [r2, #0]
 800c432:	e73d      	b.n	800c2b0 <_dtoa_r+0x960>
 800c434:	9b04      	ldr	r3, [sp, #16]
 800c436:	9a08      	ldr	r2, [sp, #32]
 800c438:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d043      	beq.n	800c4c8 <_dtoa_r+0xb78>
 800c440:	4651      	mov	r1, sl
 800c442:	2300      	movs	r3, #0
 800c444:	220a      	movs	r2, #10
 800c446:	4620      	mov	r0, r4
 800c448:	f000 f9d6 	bl	800c7f8 <__multadd>
 800c44c:	45b8      	cmp	r8, r7
 800c44e:	4682      	mov	sl, r0
 800c450:	f04f 0300 	mov.w	r3, #0
 800c454:	f04f 020a 	mov.w	r2, #10
 800c458:	4641      	mov	r1, r8
 800c45a:	4620      	mov	r0, r4
 800c45c:	d107      	bne.n	800c46e <_dtoa_r+0xb1e>
 800c45e:	f000 f9cb 	bl	800c7f8 <__multadd>
 800c462:	4680      	mov	r8, r0
 800c464:	4607      	mov	r7, r0
 800c466:	9b04      	ldr	r3, [sp, #16]
 800c468:	3301      	adds	r3, #1
 800c46a:	9304      	str	r3, [sp, #16]
 800c46c:	e775      	b.n	800c35a <_dtoa_r+0xa0a>
 800c46e:	f000 f9c3 	bl	800c7f8 <__multadd>
 800c472:	4639      	mov	r1, r7
 800c474:	4680      	mov	r8, r0
 800c476:	2300      	movs	r3, #0
 800c478:	220a      	movs	r2, #10
 800c47a:	4620      	mov	r0, r4
 800c47c:	f000 f9bc 	bl	800c7f8 <__multadd>
 800c480:	4607      	mov	r7, r0
 800c482:	e7f0      	b.n	800c466 <_dtoa_r+0xb16>
 800c484:	9b04      	ldr	r3, [sp, #16]
 800c486:	9301      	str	r3, [sp, #4]
 800c488:	9d00      	ldr	r5, [sp, #0]
 800c48a:	4631      	mov	r1, r6
 800c48c:	4650      	mov	r0, sl
 800c48e:	f7ff f9d4 	bl	800b83a <quorem>
 800c492:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c496:	9b00      	ldr	r3, [sp, #0]
 800c498:	f805 9b01 	strb.w	r9, [r5], #1
 800c49c:	1aea      	subs	r2, r5, r3
 800c49e:	9b01      	ldr	r3, [sp, #4]
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	dd07      	ble.n	800c4b4 <_dtoa_r+0xb64>
 800c4a4:	4651      	mov	r1, sl
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	220a      	movs	r2, #10
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f000 f9a4 	bl	800c7f8 <__multadd>
 800c4b0:	4682      	mov	sl, r0
 800c4b2:	e7ea      	b.n	800c48a <_dtoa_r+0xb3a>
 800c4b4:	9b01      	ldr	r3, [sp, #4]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	bfc8      	it	gt
 800c4ba:	461d      	movgt	r5, r3
 800c4bc:	9b00      	ldr	r3, [sp, #0]
 800c4be:	bfd8      	it	le
 800c4c0:	2501      	movle	r5, #1
 800c4c2:	441d      	add	r5, r3
 800c4c4:	f04f 0800 	mov.w	r8, #0
 800c4c8:	4651      	mov	r1, sl
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f000 fb41 	bl	800cb54 <__lshift>
 800c4d2:	4631      	mov	r1, r6
 800c4d4:	4682      	mov	sl, r0
 800c4d6:	f000 fba9 	bl	800cc2c <__mcmp>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	dc96      	bgt.n	800c40c <_dtoa_r+0xabc>
 800c4de:	d102      	bne.n	800c4e6 <_dtoa_r+0xb96>
 800c4e0:	f019 0f01 	tst.w	r9, #1
 800c4e4:	d192      	bne.n	800c40c <_dtoa_r+0xabc>
 800c4e6:	462b      	mov	r3, r5
 800c4e8:	461d      	mov	r5, r3
 800c4ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4ee:	2a30      	cmp	r2, #48	; 0x30
 800c4f0:	d0fa      	beq.n	800c4e8 <_dtoa_r+0xb98>
 800c4f2:	e6dd      	b.n	800c2b0 <_dtoa_r+0x960>
 800c4f4:	9a00      	ldr	r2, [sp, #0]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d189      	bne.n	800c40e <_dtoa_r+0xabe>
 800c4fa:	f10b 0b01 	add.w	fp, fp, #1
 800c4fe:	2331      	movs	r3, #49	; 0x31
 800c500:	e796      	b.n	800c430 <_dtoa_r+0xae0>
 800c502:	4b0a      	ldr	r3, [pc, #40]	; (800c52c <_dtoa_r+0xbdc>)
 800c504:	f7ff ba99 	b.w	800ba3a <_dtoa_r+0xea>
 800c508:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f47f aa6d 	bne.w	800b9ea <_dtoa_r+0x9a>
 800c510:	4b07      	ldr	r3, [pc, #28]	; (800c530 <_dtoa_r+0xbe0>)
 800c512:	f7ff ba92 	b.w	800ba3a <_dtoa_r+0xea>
 800c516:	9b01      	ldr	r3, [sp, #4]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	dcb5      	bgt.n	800c488 <_dtoa_r+0xb38>
 800c51c:	9b07      	ldr	r3, [sp, #28]
 800c51e:	2b02      	cmp	r3, #2
 800c520:	f73f aeb1 	bgt.w	800c286 <_dtoa_r+0x936>
 800c524:	e7b0      	b.n	800c488 <_dtoa_r+0xb38>
 800c526:	bf00      	nop
 800c528:	0800e495 	.word	0x0800e495
 800c52c:	0800e3f5 	.word	0x0800e3f5
 800c530:	0800e419 	.word	0x0800e419

0800c534 <_free_r>:
 800c534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c536:	2900      	cmp	r1, #0
 800c538:	d044      	beq.n	800c5c4 <_free_r+0x90>
 800c53a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c53e:	9001      	str	r0, [sp, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	f1a1 0404 	sub.w	r4, r1, #4
 800c546:	bfb8      	it	lt
 800c548:	18e4      	addlt	r4, r4, r3
 800c54a:	f000 f8e7 	bl	800c71c <__malloc_lock>
 800c54e:	4a1e      	ldr	r2, [pc, #120]	; (800c5c8 <_free_r+0x94>)
 800c550:	9801      	ldr	r0, [sp, #4]
 800c552:	6813      	ldr	r3, [r2, #0]
 800c554:	b933      	cbnz	r3, 800c564 <_free_r+0x30>
 800c556:	6063      	str	r3, [r4, #4]
 800c558:	6014      	str	r4, [r2, #0]
 800c55a:	b003      	add	sp, #12
 800c55c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c560:	f000 b8e2 	b.w	800c728 <__malloc_unlock>
 800c564:	42a3      	cmp	r3, r4
 800c566:	d908      	bls.n	800c57a <_free_r+0x46>
 800c568:	6825      	ldr	r5, [r4, #0]
 800c56a:	1961      	adds	r1, r4, r5
 800c56c:	428b      	cmp	r3, r1
 800c56e:	bf01      	itttt	eq
 800c570:	6819      	ldreq	r1, [r3, #0]
 800c572:	685b      	ldreq	r3, [r3, #4]
 800c574:	1949      	addeq	r1, r1, r5
 800c576:	6021      	streq	r1, [r4, #0]
 800c578:	e7ed      	b.n	800c556 <_free_r+0x22>
 800c57a:	461a      	mov	r2, r3
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	b10b      	cbz	r3, 800c584 <_free_r+0x50>
 800c580:	42a3      	cmp	r3, r4
 800c582:	d9fa      	bls.n	800c57a <_free_r+0x46>
 800c584:	6811      	ldr	r1, [r2, #0]
 800c586:	1855      	adds	r5, r2, r1
 800c588:	42a5      	cmp	r5, r4
 800c58a:	d10b      	bne.n	800c5a4 <_free_r+0x70>
 800c58c:	6824      	ldr	r4, [r4, #0]
 800c58e:	4421      	add	r1, r4
 800c590:	1854      	adds	r4, r2, r1
 800c592:	42a3      	cmp	r3, r4
 800c594:	6011      	str	r1, [r2, #0]
 800c596:	d1e0      	bne.n	800c55a <_free_r+0x26>
 800c598:	681c      	ldr	r4, [r3, #0]
 800c59a:	685b      	ldr	r3, [r3, #4]
 800c59c:	6053      	str	r3, [r2, #4]
 800c59e:	440c      	add	r4, r1
 800c5a0:	6014      	str	r4, [r2, #0]
 800c5a2:	e7da      	b.n	800c55a <_free_r+0x26>
 800c5a4:	d902      	bls.n	800c5ac <_free_r+0x78>
 800c5a6:	230c      	movs	r3, #12
 800c5a8:	6003      	str	r3, [r0, #0]
 800c5aa:	e7d6      	b.n	800c55a <_free_r+0x26>
 800c5ac:	6825      	ldr	r5, [r4, #0]
 800c5ae:	1961      	adds	r1, r4, r5
 800c5b0:	428b      	cmp	r3, r1
 800c5b2:	bf04      	itt	eq
 800c5b4:	6819      	ldreq	r1, [r3, #0]
 800c5b6:	685b      	ldreq	r3, [r3, #4]
 800c5b8:	6063      	str	r3, [r4, #4]
 800c5ba:	bf04      	itt	eq
 800c5bc:	1949      	addeq	r1, r1, r5
 800c5be:	6021      	streq	r1, [r4, #0]
 800c5c0:	6054      	str	r4, [r2, #4]
 800c5c2:	e7ca      	b.n	800c55a <_free_r+0x26>
 800c5c4:	b003      	add	sp, #12
 800c5c6:	bd30      	pop	{r4, r5, pc}
 800c5c8:	20003854 	.word	0x20003854

0800c5cc <malloc>:
 800c5cc:	4b02      	ldr	r3, [pc, #8]	; (800c5d8 <malloc+0xc>)
 800c5ce:	4601      	mov	r1, r0
 800c5d0:	6818      	ldr	r0, [r3, #0]
 800c5d2:	f000 b823 	b.w	800c61c <_malloc_r>
 800c5d6:	bf00      	nop
 800c5d8:	200000ec 	.word	0x200000ec

0800c5dc <sbrk_aligned>:
 800c5dc:	b570      	push	{r4, r5, r6, lr}
 800c5de:	4e0e      	ldr	r6, [pc, #56]	; (800c618 <sbrk_aligned+0x3c>)
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	6831      	ldr	r1, [r6, #0]
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	b911      	cbnz	r1, 800c5ee <sbrk_aligned+0x12>
 800c5e8:	f000 fec4 	bl	800d374 <_sbrk_r>
 800c5ec:	6030      	str	r0, [r6, #0]
 800c5ee:	4621      	mov	r1, r4
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	f000 febf 	bl	800d374 <_sbrk_r>
 800c5f6:	1c43      	adds	r3, r0, #1
 800c5f8:	d00a      	beq.n	800c610 <sbrk_aligned+0x34>
 800c5fa:	1cc4      	adds	r4, r0, #3
 800c5fc:	f024 0403 	bic.w	r4, r4, #3
 800c600:	42a0      	cmp	r0, r4
 800c602:	d007      	beq.n	800c614 <sbrk_aligned+0x38>
 800c604:	1a21      	subs	r1, r4, r0
 800c606:	4628      	mov	r0, r5
 800c608:	f000 feb4 	bl	800d374 <_sbrk_r>
 800c60c:	3001      	adds	r0, #1
 800c60e:	d101      	bne.n	800c614 <sbrk_aligned+0x38>
 800c610:	f04f 34ff 	mov.w	r4, #4294967295
 800c614:	4620      	mov	r0, r4
 800c616:	bd70      	pop	{r4, r5, r6, pc}
 800c618:	20003858 	.word	0x20003858

0800c61c <_malloc_r>:
 800c61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c620:	1ccd      	adds	r5, r1, #3
 800c622:	f025 0503 	bic.w	r5, r5, #3
 800c626:	3508      	adds	r5, #8
 800c628:	2d0c      	cmp	r5, #12
 800c62a:	bf38      	it	cc
 800c62c:	250c      	movcc	r5, #12
 800c62e:	2d00      	cmp	r5, #0
 800c630:	4607      	mov	r7, r0
 800c632:	db01      	blt.n	800c638 <_malloc_r+0x1c>
 800c634:	42a9      	cmp	r1, r5
 800c636:	d905      	bls.n	800c644 <_malloc_r+0x28>
 800c638:	230c      	movs	r3, #12
 800c63a:	603b      	str	r3, [r7, #0]
 800c63c:	2600      	movs	r6, #0
 800c63e:	4630      	mov	r0, r6
 800c640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c644:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c718 <_malloc_r+0xfc>
 800c648:	f000 f868 	bl	800c71c <__malloc_lock>
 800c64c:	f8d8 3000 	ldr.w	r3, [r8]
 800c650:	461c      	mov	r4, r3
 800c652:	bb5c      	cbnz	r4, 800c6ac <_malloc_r+0x90>
 800c654:	4629      	mov	r1, r5
 800c656:	4638      	mov	r0, r7
 800c658:	f7ff ffc0 	bl	800c5dc <sbrk_aligned>
 800c65c:	1c43      	adds	r3, r0, #1
 800c65e:	4604      	mov	r4, r0
 800c660:	d155      	bne.n	800c70e <_malloc_r+0xf2>
 800c662:	f8d8 4000 	ldr.w	r4, [r8]
 800c666:	4626      	mov	r6, r4
 800c668:	2e00      	cmp	r6, #0
 800c66a:	d145      	bne.n	800c6f8 <_malloc_r+0xdc>
 800c66c:	2c00      	cmp	r4, #0
 800c66e:	d048      	beq.n	800c702 <_malloc_r+0xe6>
 800c670:	6823      	ldr	r3, [r4, #0]
 800c672:	4631      	mov	r1, r6
 800c674:	4638      	mov	r0, r7
 800c676:	eb04 0903 	add.w	r9, r4, r3
 800c67a:	f000 fe7b 	bl	800d374 <_sbrk_r>
 800c67e:	4581      	cmp	r9, r0
 800c680:	d13f      	bne.n	800c702 <_malloc_r+0xe6>
 800c682:	6821      	ldr	r1, [r4, #0]
 800c684:	1a6d      	subs	r5, r5, r1
 800c686:	4629      	mov	r1, r5
 800c688:	4638      	mov	r0, r7
 800c68a:	f7ff ffa7 	bl	800c5dc <sbrk_aligned>
 800c68e:	3001      	adds	r0, #1
 800c690:	d037      	beq.n	800c702 <_malloc_r+0xe6>
 800c692:	6823      	ldr	r3, [r4, #0]
 800c694:	442b      	add	r3, r5
 800c696:	6023      	str	r3, [r4, #0]
 800c698:	f8d8 3000 	ldr.w	r3, [r8]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d038      	beq.n	800c712 <_malloc_r+0xf6>
 800c6a0:	685a      	ldr	r2, [r3, #4]
 800c6a2:	42a2      	cmp	r2, r4
 800c6a4:	d12b      	bne.n	800c6fe <_malloc_r+0xe2>
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	605a      	str	r2, [r3, #4]
 800c6aa:	e00f      	b.n	800c6cc <_malloc_r+0xb0>
 800c6ac:	6822      	ldr	r2, [r4, #0]
 800c6ae:	1b52      	subs	r2, r2, r5
 800c6b0:	d41f      	bmi.n	800c6f2 <_malloc_r+0xd6>
 800c6b2:	2a0b      	cmp	r2, #11
 800c6b4:	d917      	bls.n	800c6e6 <_malloc_r+0xca>
 800c6b6:	1961      	adds	r1, r4, r5
 800c6b8:	42a3      	cmp	r3, r4
 800c6ba:	6025      	str	r5, [r4, #0]
 800c6bc:	bf18      	it	ne
 800c6be:	6059      	strne	r1, [r3, #4]
 800c6c0:	6863      	ldr	r3, [r4, #4]
 800c6c2:	bf08      	it	eq
 800c6c4:	f8c8 1000 	streq.w	r1, [r8]
 800c6c8:	5162      	str	r2, [r4, r5]
 800c6ca:	604b      	str	r3, [r1, #4]
 800c6cc:	4638      	mov	r0, r7
 800c6ce:	f104 060b 	add.w	r6, r4, #11
 800c6d2:	f000 f829 	bl	800c728 <__malloc_unlock>
 800c6d6:	f026 0607 	bic.w	r6, r6, #7
 800c6da:	1d23      	adds	r3, r4, #4
 800c6dc:	1af2      	subs	r2, r6, r3
 800c6de:	d0ae      	beq.n	800c63e <_malloc_r+0x22>
 800c6e0:	1b9b      	subs	r3, r3, r6
 800c6e2:	50a3      	str	r3, [r4, r2]
 800c6e4:	e7ab      	b.n	800c63e <_malloc_r+0x22>
 800c6e6:	42a3      	cmp	r3, r4
 800c6e8:	6862      	ldr	r2, [r4, #4]
 800c6ea:	d1dd      	bne.n	800c6a8 <_malloc_r+0x8c>
 800c6ec:	f8c8 2000 	str.w	r2, [r8]
 800c6f0:	e7ec      	b.n	800c6cc <_malloc_r+0xb0>
 800c6f2:	4623      	mov	r3, r4
 800c6f4:	6864      	ldr	r4, [r4, #4]
 800c6f6:	e7ac      	b.n	800c652 <_malloc_r+0x36>
 800c6f8:	4634      	mov	r4, r6
 800c6fa:	6876      	ldr	r6, [r6, #4]
 800c6fc:	e7b4      	b.n	800c668 <_malloc_r+0x4c>
 800c6fe:	4613      	mov	r3, r2
 800c700:	e7cc      	b.n	800c69c <_malloc_r+0x80>
 800c702:	230c      	movs	r3, #12
 800c704:	603b      	str	r3, [r7, #0]
 800c706:	4638      	mov	r0, r7
 800c708:	f000 f80e 	bl	800c728 <__malloc_unlock>
 800c70c:	e797      	b.n	800c63e <_malloc_r+0x22>
 800c70e:	6025      	str	r5, [r4, #0]
 800c710:	e7dc      	b.n	800c6cc <_malloc_r+0xb0>
 800c712:	605b      	str	r3, [r3, #4]
 800c714:	deff      	udf	#255	; 0xff
 800c716:	bf00      	nop
 800c718:	20003854 	.word	0x20003854

0800c71c <__malloc_lock>:
 800c71c:	4801      	ldr	r0, [pc, #4]	; (800c724 <__malloc_lock+0x8>)
 800c71e:	f7ff b88a 	b.w	800b836 <__retarget_lock_acquire_recursive>
 800c722:	bf00      	nop
 800c724:	20003850 	.word	0x20003850

0800c728 <__malloc_unlock>:
 800c728:	4801      	ldr	r0, [pc, #4]	; (800c730 <__malloc_unlock+0x8>)
 800c72a:	f7ff b885 	b.w	800b838 <__retarget_lock_release_recursive>
 800c72e:	bf00      	nop
 800c730:	20003850 	.word	0x20003850

0800c734 <_Balloc>:
 800c734:	b570      	push	{r4, r5, r6, lr}
 800c736:	69c6      	ldr	r6, [r0, #28]
 800c738:	4604      	mov	r4, r0
 800c73a:	460d      	mov	r5, r1
 800c73c:	b976      	cbnz	r6, 800c75c <_Balloc+0x28>
 800c73e:	2010      	movs	r0, #16
 800c740:	f7ff ff44 	bl	800c5cc <malloc>
 800c744:	4602      	mov	r2, r0
 800c746:	61e0      	str	r0, [r4, #28]
 800c748:	b920      	cbnz	r0, 800c754 <_Balloc+0x20>
 800c74a:	4b18      	ldr	r3, [pc, #96]	; (800c7ac <_Balloc+0x78>)
 800c74c:	4818      	ldr	r0, [pc, #96]	; (800c7b0 <_Balloc+0x7c>)
 800c74e:	216b      	movs	r1, #107	; 0x6b
 800c750:	f000 fe2e 	bl	800d3b0 <__assert_func>
 800c754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c758:	6006      	str	r6, [r0, #0]
 800c75a:	60c6      	str	r6, [r0, #12]
 800c75c:	69e6      	ldr	r6, [r4, #28]
 800c75e:	68f3      	ldr	r3, [r6, #12]
 800c760:	b183      	cbz	r3, 800c784 <_Balloc+0x50>
 800c762:	69e3      	ldr	r3, [r4, #28]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c76a:	b9b8      	cbnz	r0, 800c79c <_Balloc+0x68>
 800c76c:	2101      	movs	r1, #1
 800c76e:	fa01 f605 	lsl.w	r6, r1, r5
 800c772:	1d72      	adds	r2, r6, #5
 800c774:	0092      	lsls	r2, r2, #2
 800c776:	4620      	mov	r0, r4
 800c778:	f000 fe38 	bl	800d3ec <_calloc_r>
 800c77c:	b160      	cbz	r0, 800c798 <_Balloc+0x64>
 800c77e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c782:	e00e      	b.n	800c7a2 <_Balloc+0x6e>
 800c784:	2221      	movs	r2, #33	; 0x21
 800c786:	2104      	movs	r1, #4
 800c788:	4620      	mov	r0, r4
 800c78a:	f000 fe2f 	bl	800d3ec <_calloc_r>
 800c78e:	69e3      	ldr	r3, [r4, #28]
 800c790:	60f0      	str	r0, [r6, #12]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d1e4      	bne.n	800c762 <_Balloc+0x2e>
 800c798:	2000      	movs	r0, #0
 800c79a:	bd70      	pop	{r4, r5, r6, pc}
 800c79c:	6802      	ldr	r2, [r0, #0]
 800c79e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c7a8:	e7f7      	b.n	800c79a <_Balloc+0x66>
 800c7aa:	bf00      	nop
 800c7ac:	0800e426 	.word	0x0800e426
 800c7b0:	0800e4a6 	.word	0x0800e4a6

0800c7b4 <_Bfree>:
 800c7b4:	b570      	push	{r4, r5, r6, lr}
 800c7b6:	69c6      	ldr	r6, [r0, #28]
 800c7b8:	4605      	mov	r5, r0
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	b976      	cbnz	r6, 800c7dc <_Bfree+0x28>
 800c7be:	2010      	movs	r0, #16
 800c7c0:	f7ff ff04 	bl	800c5cc <malloc>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	61e8      	str	r0, [r5, #28]
 800c7c8:	b920      	cbnz	r0, 800c7d4 <_Bfree+0x20>
 800c7ca:	4b09      	ldr	r3, [pc, #36]	; (800c7f0 <_Bfree+0x3c>)
 800c7cc:	4809      	ldr	r0, [pc, #36]	; (800c7f4 <_Bfree+0x40>)
 800c7ce:	218f      	movs	r1, #143	; 0x8f
 800c7d0:	f000 fdee 	bl	800d3b0 <__assert_func>
 800c7d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7d8:	6006      	str	r6, [r0, #0]
 800c7da:	60c6      	str	r6, [r0, #12]
 800c7dc:	b13c      	cbz	r4, 800c7ee <_Bfree+0x3a>
 800c7de:	69eb      	ldr	r3, [r5, #28]
 800c7e0:	6862      	ldr	r2, [r4, #4]
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c7e8:	6021      	str	r1, [r4, #0]
 800c7ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c7ee:	bd70      	pop	{r4, r5, r6, pc}
 800c7f0:	0800e426 	.word	0x0800e426
 800c7f4:	0800e4a6 	.word	0x0800e4a6

0800c7f8 <__multadd>:
 800c7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7fc:	690d      	ldr	r5, [r1, #16]
 800c7fe:	4607      	mov	r7, r0
 800c800:	460c      	mov	r4, r1
 800c802:	461e      	mov	r6, r3
 800c804:	f101 0c14 	add.w	ip, r1, #20
 800c808:	2000      	movs	r0, #0
 800c80a:	f8dc 3000 	ldr.w	r3, [ip]
 800c80e:	b299      	uxth	r1, r3
 800c810:	fb02 6101 	mla	r1, r2, r1, r6
 800c814:	0c1e      	lsrs	r6, r3, #16
 800c816:	0c0b      	lsrs	r3, r1, #16
 800c818:	fb02 3306 	mla	r3, r2, r6, r3
 800c81c:	b289      	uxth	r1, r1
 800c81e:	3001      	adds	r0, #1
 800c820:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c824:	4285      	cmp	r5, r0
 800c826:	f84c 1b04 	str.w	r1, [ip], #4
 800c82a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c82e:	dcec      	bgt.n	800c80a <__multadd+0x12>
 800c830:	b30e      	cbz	r6, 800c876 <__multadd+0x7e>
 800c832:	68a3      	ldr	r3, [r4, #8]
 800c834:	42ab      	cmp	r3, r5
 800c836:	dc19      	bgt.n	800c86c <__multadd+0x74>
 800c838:	6861      	ldr	r1, [r4, #4]
 800c83a:	4638      	mov	r0, r7
 800c83c:	3101      	adds	r1, #1
 800c83e:	f7ff ff79 	bl	800c734 <_Balloc>
 800c842:	4680      	mov	r8, r0
 800c844:	b928      	cbnz	r0, 800c852 <__multadd+0x5a>
 800c846:	4602      	mov	r2, r0
 800c848:	4b0c      	ldr	r3, [pc, #48]	; (800c87c <__multadd+0x84>)
 800c84a:	480d      	ldr	r0, [pc, #52]	; (800c880 <__multadd+0x88>)
 800c84c:	21ba      	movs	r1, #186	; 0xba
 800c84e:	f000 fdaf 	bl	800d3b0 <__assert_func>
 800c852:	6922      	ldr	r2, [r4, #16]
 800c854:	3202      	adds	r2, #2
 800c856:	f104 010c 	add.w	r1, r4, #12
 800c85a:	0092      	lsls	r2, r2, #2
 800c85c:	300c      	adds	r0, #12
 800c85e:	f000 fd99 	bl	800d394 <memcpy>
 800c862:	4621      	mov	r1, r4
 800c864:	4638      	mov	r0, r7
 800c866:	f7ff ffa5 	bl	800c7b4 <_Bfree>
 800c86a:	4644      	mov	r4, r8
 800c86c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c870:	3501      	adds	r5, #1
 800c872:	615e      	str	r6, [r3, #20]
 800c874:	6125      	str	r5, [r4, #16]
 800c876:	4620      	mov	r0, r4
 800c878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c87c:	0800e495 	.word	0x0800e495
 800c880:	0800e4a6 	.word	0x0800e4a6

0800c884 <__hi0bits>:
 800c884:	0c03      	lsrs	r3, r0, #16
 800c886:	041b      	lsls	r3, r3, #16
 800c888:	b9d3      	cbnz	r3, 800c8c0 <__hi0bits+0x3c>
 800c88a:	0400      	lsls	r0, r0, #16
 800c88c:	2310      	movs	r3, #16
 800c88e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c892:	bf04      	itt	eq
 800c894:	0200      	lsleq	r0, r0, #8
 800c896:	3308      	addeq	r3, #8
 800c898:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c89c:	bf04      	itt	eq
 800c89e:	0100      	lsleq	r0, r0, #4
 800c8a0:	3304      	addeq	r3, #4
 800c8a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c8a6:	bf04      	itt	eq
 800c8a8:	0080      	lsleq	r0, r0, #2
 800c8aa:	3302      	addeq	r3, #2
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	db05      	blt.n	800c8bc <__hi0bits+0x38>
 800c8b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c8b4:	f103 0301 	add.w	r3, r3, #1
 800c8b8:	bf08      	it	eq
 800c8ba:	2320      	moveq	r3, #32
 800c8bc:	4618      	mov	r0, r3
 800c8be:	4770      	bx	lr
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	e7e4      	b.n	800c88e <__hi0bits+0xa>

0800c8c4 <__lo0bits>:
 800c8c4:	6803      	ldr	r3, [r0, #0]
 800c8c6:	f013 0207 	ands.w	r2, r3, #7
 800c8ca:	d00c      	beq.n	800c8e6 <__lo0bits+0x22>
 800c8cc:	07d9      	lsls	r1, r3, #31
 800c8ce:	d422      	bmi.n	800c916 <__lo0bits+0x52>
 800c8d0:	079a      	lsls	r2, r3, #30
 800c8d2:	bf49      	itett	mi
 800c8d4:	085b      	lsrmi	r3, r3, #1
 800c8d6:	089b      	lsrpl	r3, r3, #2
 800c8d8:	6003      	strmi	r3, [r0, #0]
 800c8da:	2201      	movmi	r2, #1
 800c8dc:	bf5c      	itt	pl
 800c8de:	6003      	strpl	r3, [r0, #0]
 800c8e0:	2202      	movpl	r2, #2
 800c8e2:	4610      	mov	r0, r2
 800c8e4:	4770      	bx	lr
 800c8e6:	b299      	uxth	r1, r3
 800c8e8:	b909      	cbnz	r1, 800c8ee <__lo0bits+0x2a>
 800c8ea:	0c1b      	lsrs	r3, r3, #16
 800c8ec:	2210      	movs	r2, #16
 800c8ee:	b2d9      	uxtb	r1, r3
 800c8f0:	b909      	cbnz	r1, 800c8f6 <__lo0bits+0x32>
 800c8f2:	3208      	adds	r2, #8
 800c8f4:	0a1b      	lsrs	r3, r3, #8
 800c8f6:	0719      	lsls	r1, r3, #28
 800c8f8:	bf04      	itt	eq
 800c8fa:	091b      	lsreq	r3, r3, #4
 800c8fc:	3204      	addeq	r2, #4
 800c8fe:	0799      	lsls	r1, r3, #30
 800c900:	bf04      	itt	eq
 800c902:	089b      	lsreq	r3, r3, #2
 800c904:	3202      	addeq	r2, #2
 800c906:	07d9      	lsls	r1, r3, #31
 800c908:	d403      	bmi.n	800c912 <__lo0bits+0x4e>
 800c90a:	085b      	lsrs	r3, r3, #1
 800c90c:	f102 0201 	add.w	r2, r2, #1
 800c910:	d003      	beq.n	800c91a <__lo0bits+0x56>
 800c912:	6003      	str	r3, [r0, #0]
 800c914:	e7e5      	b.n	800c8e2 <__lo0bits+0x1e>
 800c916:	2200      	movs	r2, #0
 800c918:	e7e3      	b.n	800c8e2 <__lo0bits+0x1e>
 800c91a:	2220      	movs	r2, #32
 800c91c:	e7e1      	b.n	800c8e2 <__lo0bits+0x1e>
	...

0800c920 <__i2b>:
 800c920:	b510      	push	{r4, lr}
 800c922:	460c      	mov	r4, r1
 800c924:	2101      	movs	r1, #1
 800c926:	f7ff ff05 	bl	800c734 <_Balloc>
 800c92a:	4602      	mov	r2, r0
 800c92c:	b928      	cbnz	r0, 800c93a <__i2b+0x1a>
 800c92e:	4b05      	ldr	r3, [pc, #20]	; (800c944 <__i2b+0x24>)
 800c930:	4805      	ldr	r0, [pc, #20]	; (800c948 <__i2b+0x28>)
 800c932:	f240 1145 	movw	r1, #325	; 0x145
 800c936:	f000 fd3b 	bl	800d3b0 <__assert_func>
 800c93a:	2301      	movs	r3, #1
 800c93c:	6144      	str	r4, [r0, #20]
 800c93e:	6103      	str	r3, [r0, #16]
 800c940:	bd10      	pop	{r4, pc}
 800c942:	bf00      	nop
 800c944:	0800e495 	.word	0x0800e495
 800c948:	0800e4a6 	.word	0x0800e4a6

0800c94c <__multiply>:
 800c94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c950:	4691      	mov	r9, r2
 800c952:	690a      	ldr	r2, [r1, #16]
 800c954:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c958:	429a      	cmp	r2, r3
 800c95a:	bfb8      	it	lt
 800c95c:	460b      	movlt	r3, r1
 800c95e:	460c      	mov	r4, r1
 800c960:	bfbc      	itt	lt
 800c962:	464c      	movlt	r4, r9
 800c964:	4699      	movlt	r9, r3
 800c966:	6927      	ldr	r7, [r4, #16]
 800c968:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c96c:	68a3      	ldr	r3, [r4, #8]
 800c96e:	6861      	ldr	r1, [r4, #4]
 800c970:	eb07 060a 	add.w	r6, r7, sl
 800c974:	42b3      	cmp	r3, r6
 800c976:	b085      	sub	sp, #20
 800c978:	bfb8      	it	lt
 800c97a:	3101      	addlt	r1, #1
 800c97c:	f7ff feda 	bl	800c734 <_Balloc>
 800c980:	b930      	cbnz	r0, 800c990 <__multiply+0x44>
 800c982:	4602      	mov	r2, r0
 800c984:	4b44      	ldr	r3, [pc, #272]	; (800ca98 <__multiply+0x14c>)
 800c986:	4845      	ldr	r0, [pc, #276]	; (800ca9c <__multiply+0x150>)
 800c988:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c98c:	f000 fd10 	bl	800d3b0 <__assert_func>
 800c990:	f100 0514 	add.w	r5, r0, #20
 800c994:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c998:	462b      	mov	r3, r5
 800c99a:	2200      	movs	r2, #0
 800c99c:	4543      	cmp	r3, r8
 800c99e:	d321      	bcc.n	800c9e4 <__multiply+0x98>
 800c9a0:	f104 0314 	add.w	r3, r4, #20
 800c9a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c9a8:	f109 0314 	add.w	r3, r9, #20
 800c9ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c9b0:	9202      	str	r2, [sp, #8]
 800c9b2:	1b3a      	subs	r2, r7, r4
 800c9b4:	3a15      	subs	r2, #21
 800c9b6:	f022 0203 	bic.w	r2, r2, #3
 800c9ba:	3204      	adds	r2, #4
 800c9bc:	f104 0115 	add.w	r1, r4, #21
 800c9c0:	428f      	cmp	r7, r1
 800c9c2:	bf38      	it	cc
 800c9c4:	2204      	movcc	r2, #4
 800c9c6:	9201      	str	r2, [sp, #4]
 800c9c8:	9a02      	ldr	r2, [sp, #8]
 800c9ca:	9303      	str	r3, [sp, #12]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d80c      	bhi.n	800c9ea <__multiply+0x9e>
 800c9d0:	2e00      	cmp	r6, #0
 800c9d2:	dd03      	ble.n	800c9dc <__multiply+0x90>
 800c9d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d05b      	beq.n	800ca94 <__multiply+0x148>
 800c9dc:	6106      	str	r6, [r0, #16]
 800c9de:	b005      	add	sp, #20
 800c9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9e4:	f843 2b04 	str.w	r2, [r3], #4
 800c9e8:	e7d8      	b.n	800c99c <__multiply+0x50>
 800c9ea:	f8b3 a000 	ldrh.w	sl, [r3]
 800c9ee:	f1ba 0f00 	cmp.w	sl, #0
 800c9f2:	d024      	beq.n	800ca3e <__multiply+0xf2>
 800c9f4:	f104 0e14 	add.w	lr, r4, #20
 800c9f8:	46a9      	mov	r9, r5
 800c9fa:	f04f 0c00 	mov.w	ip, #0
 800c9fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ca02:	f8d9 1000 	ldr.w	r1, [r9]
 800ca06:	fa1f fb82 	uxth.w	fp, r2
 800ca0a:	b289      	uxth	r1, r1
 800ca0c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ca10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ca14:	f8d9 2000 	ldr.w	r2, [r9]
 800ca18:	4461      	add	r1, ip
 800ca1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca1e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ca22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ca26:	b289      	uxth	r1, r1
 800ca28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca2c:	4577      	cmp	r7, lr
 800ca2e:	f849 1b04 	str.w	r1, [r9], #4
 800ca32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca36:	d8e2      	bhi.n	800c9fe <__multiply+0xb2>
 800ca38:	9a01      	ldr	r2, [sp, #4]
 800ca3a:	f845 c002 	str.w	ip, [r5, r2]
 800ca3e:	9a03      	ldr	r2, [sp, #12]
 800ca40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ca44:	3304      	adds	r3, #4
 800ca46:	f1b9 0f00 	cmp.w	r9, #0
 800ca4a:	d021      	beq.n	800ca90 <__multiply+0x144>
 800ca4c:	6829      	ldr	r1, [r5, #0]
 800ca4e:	f104 0c14 	add.w	ip, r4, #20
 800ca52:	46ae      	mov	lr, r5
 800ca54:	f04f 0a00 	mov.w	sl, #0
 800ca58:	f8bc b000 	ldrh.w	fp, [ip]
 800ca5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ca60:	fb09 220b 	mla	r2, r9, fp, r2
 800ca64:	4452      	add	r2, sl
 800ca66:	b289      	uxth	r1, r1
 800ca68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca6c:	f84e 1b04 	str.w	r1, [lr], #4
 800ca70:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ca74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ca78:	f8be 1000 	ldrh.w	r1, [lr]
 800ca7c:	fb09 110a 	mla	r1, r9, sl, r1
 800ca80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ca84:	4567      	cmp	r7, ip
 800ca86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ca8a:	d8e5      	bhi.n	800ca58 <__multiply+0x10c>
 800ca8c:	9a01      	ldr	r2, [sp, #4]
 800ca8e:	50a9      	str	r1, [r5, r2]
 800ca90:	3504      	adds	r5, #4
 800ca92:	e799      	b.n	800c9c8 <__multiply+0x7c>
 800ca94:	3e01      	subs	r6, #1
 800ca96:	e79b      	b.n	800c9d0 <__multiply+0x84>
 800ca98:	0800e495 	.word	0x0800e495
 800ca9c:	0800e4a6 	.word	0x0800e4a6

0800caa0 <__pow5mult>:
 800caa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caa4:	4615      	mov	r5, r2
 800caa6:	f012 0203 	ands.w	r2, r2, #3
 800caaa:	4606      	mov	r6, r0
 800caac:	460f      	mov	r7, r1
 800caae:	d007      	beq.n	800cac0 <__pow5mult+0x20>
 800cab0:	4c25      	ldr	r4, [pc, #148]	; (800cb48 <__pow5mult+0xa8>)
 800cab2:	3a01      	subs	r2, #1
 800cab4:	2300      	movs	r3, #0
 800cab6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800caba:	f7ff fe9d 	bl	800c7f8 <__multadd>
 800cabe:	4607      	mov	r7, r0
 800cac0:	10ad      	asrs	r5, r5, #2
 800cac2:	d03d      	beq.n	800cb40 <__pow5mult+0xa0>
 800cac4:	69f4      	ldr	r4, [r6, #28]
 800cac6:	b97c      	cbnz	r4, 800cae8 <__pow5mult+0x48>
 800cac8:	2010      	movs	r0, #16
 800caca:	f7ff fd7f 	bl	800c5cc <malloc>
 800cace:	4602      	mov	r2, r0
 800cad0:	61f0      	str	r0, [r6, #28]
 800cad2:	b928      	cbnz	r0, 800cae0 <__pow5mult+0x40>
 800cad4:	4b1d      	ldr	r3, [pc, #116]	; (800cb4c <__pow5mult+0xac>)
 800cad6:	481e      	ldr	r0, [pc, #120]	; (800cb50 <__pow5mult+0xb0>)
 800cad8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cadc:	f000 fc68 	bl	800d3b0 <__assert_func>
 800cae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cae4:	6004      	str	r4, [r0, #0]
 800cae6:	60c4      	str	r4, [r0, #12]
 800cae8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800caec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800caf0:	b94c      	cbnz	r4, 800cb06 <__pow5mult+0x66>
 800caf2:	f240 2171 	movw	r1, #625	; 0x271
 800caf6:	4630      	mov	r0, r6
 800caf8:	f7ff ff12 	bl	800c920 <__i2b>
 800cafc:	2300      	movs	r3, #0
 800cafe:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb02:	4604      	mov	r4, r0
 800cb04:	6003      	str	r3, [r0, #0]
 800cb06:	f04f 0900 	mov.w	r9, #0
 800cb0a:	07eb      	lsls	r3, r5, #31
 800cb0c:	d50a      	bpl.n	800cb24 <__pow5mult+0x84>
 800cb0e:	4639      	mov	r1, r7
 800cb10:	4622      	mov	r2, r4
 800cb12:	4630      	mov	r0, r6
 800cb14:	f7ff ff1a 	bl	800c94c <__multiply>
 800cb18:	4639      	mov	r1, r7
 800cb1a:	4680      	mov	r8, r0
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	f7ff fe49 	bl	800c7b4 <_Bfree>
 800cb22:	4647      	mov	r7, r8
 800cb24:	106d      	asrs	r5, r5, #1
 800cb26:	d00b      	beq.n	800cb40 <__pow5mult+0xa0>
 800cb28:	6820      	ldr	r0, [r4, #0]
 800cb2a:	b938      	cbnz	r0, 800cb3c <__pow5mult+0x9c>
 800cb2c:	4622      	mov	r2, r4
 800cb2e:	4621      	mov	r1, r4
 800cb30:	4630      	mov	r0, r6
 800cb32:	f7ff ff0b 	bl	800c94c <__multiply>
 800cb36:	6020      	str	r0, [r4, #0]
 800cb38:	f8c0 9000 	str.w	r9, [r0]
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	e7e4      	b.n	800cb0a <__pow5mult+0x6a>
 800cb40:	4638      	mov	r0, r7
 800cb42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb46:	bf00      	nop
 800cb48:	0800e5f0 	.word	0x0800e5f0
 800cb4c:	0800e426 	.word	0x0800e426
 800cb50:	0800e4a6 	.word	0x0800e4a6

0800cb54 <__lshift>:
 800cb54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb58:	460c      	mov	r4, r1
 800cb5a:	6849      	ldr	r1, [r1, #4]
 800cb5c:	6923      	ldr	r3, [r4, #16]
 800cb5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb62:	68a3      	ldr	r3, [r4, #8]
 800cb64:	4607      	mov	r7, r0
 800cb66:	4691      	mov	r9, r2
 800cb68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb6c:	f108 0601 	add.w	r6, r8, #1
 800cb70:	42b3      	cmp	r3, r6
 800cb72:	db0b      	blt.n	800cb8c <__lshift+0x38>
 800cb74:	4638      	mov	r0, r7
 800cb76:	f7ff fddd 	bl	800c734 <_Balloc>
 800cb7a:	4605      	mov	r5, r0
 800cb7c:	b948      	cbnz	r0, 800cb92 <__lshift+0x3e>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	4b28      	ldr	r3, [pc, #160]	; (800cc24 <__lshift+0xd0>)
 800cb82:	4829      	ldr	r0, [pc, #164]	; (800cc28 <__lshift+0xd4>)
 800cb84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cb88:	f000 fc12 	bl	800d3b0 <__assert_func>
 800cb8c:	3101      	adds	r1, #1
 800cb8e:	005b      	lsls	r3, r3, #1
 800cb90:	e7ee      	b.n	800cb70 <__lshift+0x1c>
 800cb92:	2300      	movs	r3, #0
 800cb94:	f100 0114 	add.w	r1, r0, #20
 800cb98:	f100 0210 	add.w	r2, r0, #16
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	4553      	cmp	r3, sl
 800cba0:	db33      	blt.n	800cc0a <__lshift+0xb6>
 800cba2:	6920      	ldr	r0, [r4, #16]
 800cba4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cba8:	f104 0314 	add.w	r3, r4, #20
 800cbac:	f019 091f 	ands.w	r9, r9, #31
 800cbb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cbb8:	d02b      	beq.n	800cc12 <__lshift+0xbe>
 800cbba:	f1c9 0e20 	rsb	lr, r9, #32
 800cbbe:	468a      	mov	sl, r1
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	6818      	ldr	r0, [r3, #0]
 800cbc4:	fa00 f009 	lsl.w	r0, r0, r9
 800cbc8:	4310      	orrs	r0, r2
 800cbca:	f84a 0b04 	str.w	r0, [sl], #4
 800cbce:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbd2:	459c      	cmp	ip, r3
 800cbd4:	fa22 f20e 	lsr.w	r2, r2, lr
 800cbd8:	d8f3      	bhi.n	800cbc2 <__lshift+0x6e>
 800cbda:	ebac 0304 	sub.w	r3, ip, r4
 800cbde:	3b15      	subs	r3, #21
 800cbe0:	f023 0303 	bic.w	r3, r3, #3
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	f104 0015 	add.w	r0, r4, #21
 800cbea:	4584      	cmp	ip, r0
 800cbec:	bf38      	it	cc
 800cbee:	2304      	movcc	r3, #4
 800cbf0:	50ca      	str	r2, [r1, r3]
 800cbf2:	b10a      	cbz	r2, 800cbf8 <__lshift+0xa4>
 800cbf4:	f108 0602 	add.w	r6, r8, #2
 800cbf8:	3e01      	subs	r6, #1
 800cbfa:	4638      	mov	r0, r7
 800cbfc:	612e      	str	r6, [r5, #16]
 800cbfe:	4621      	mov	r1, r4
 800cc00:	f7ff fdd8 	bl	800c7b4 <_Bfree>
 800cc04:	4628      	mov	r0, r5
 800cc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc0e:	3301      	adds	r3, #1
 800cc10:	e7c5      	b.n	800cb9e <__lshift+0x4a>
 800cc12:	3904      	subs	r1, #4
 800cc14:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc18:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc1c:	459c      	cmp	ip, r3
 800cc1e:	d8f9      	bhi.n	800cc14 <__lshift+0xc0>
 800cc20:	e7ea      	b.n	800cbf8 <__lshift+0xa4>
 800cc22:	bf00      	nop
 800cc24:	0800e495 	.word	0x0800e495
 800cc28:	0800e4a6 	.word	0x0800e4a6

0800cc2c <__mcmp>:
 800cc2c:	b530      	push	{r4, r5, lr}
 800cc2e:	6902      	ldr	r2, [r0, #16]
 800cc30:	690c      	ldr	r4, [r1, #16]
 800cc32:	1b12      	subs	r2, r2, r4
 800cc34:	d10e      	bne.n	800cc54 <__mcmp+0x28>
 800cc36:	f100 0314 	add.w	r3, r0, #20
 800cc3a:	3114      	adds	r1, #20
 800cc3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cc40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cc44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cc48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cc4c:	42a5      	cmp	r5, r4
 800cc4e:	d003      	beq.n	800cc58 <__mcmp+0x2c>
 800cc50:	d305      	bcc.n	800cc5e <__mcmp+0x32>
 800cc52:	2201      	movs	r2, #1
 800cc54:	4610      	mov	r0, r2
 800cc56:	bd30      	pop	{r4, r5, pc}
 800cc58:	4283      	cmp	r3, r0
 800cc5a:	d3f3      	bcc.n	800cc44 <__mcmp+0x18>
 800cc5c:	e7fa      	b.n	800cc54 <__mcmp+0x28>
 800cc5e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc62:	e7f7      	b.n	800cc54 <__mcmp+0x28>

0800cc64 <__mdiff>:
 800cc64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc68:	460c      	mov	r4, r1
 800cc6a:	4606      	mov	r6, r0
 800cc6c:	4611      	mov	r1, r2
 800cc6e:	4620      	mov	r0, r4
 800cc70:	4690      	mov	r8, r2
 800cc72:	f7ff ffdb 	bl	800cc2c <__mcmp>
 800cc76:	1e05      	subs	r5, r0, #0
 800cc78:	d110      	bne.n	800cc9c <__mdiff+0x38>
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	f7ff fd59 	bl	800c734 <_Balloc>
 800cc82:	b930      	cbnz	r0, 800cc92 <__mdiff+0x2e>
 800cc84:	4b3a      	ldr	r3, [pc, #232]	; (800cd70 <__mdiff+0x10c>)
 800cc86:	4602      	mov	r2, r0
 800cc88:	f240 2137 	movw	r1, #567	; 0x237
 800cc8c:	4839      	ldr	r0, [pc, #228]	; (800cd74 <__mdiff+0x110>)
 800cc8e:	f000 fb8f 	bl	800d3b0 <__assert_func>
 800cc92:	2301      	movs	r3, #1
 800cc94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc9c:	bfa4      	itt	ge
 800cc9e:	4643      	movge	r3, r8
 800cca0:	46a0      	movge	r8, r4
 800cca2:	4630      	mov	r0, r6
 800cca4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cca8:	bfa6      	itte	ge
 800ccaa:	461c      	movge	r4, r3
 800ccac:	2500      	movge	r5, #0
 800ccae:	2501      	movlt	r5, #1
 800ccb0:	f7ff fd40 	bl	800c734 <_Balloc>
 800ccb4:	b920      	cbnz	r0, 800ccc0 <__mdiff+0x5c>
 800ccb6:	4b2e      	ldr	r3, [pc, #184]	; (800cd70 <__mdiff+0x10c>)
 800ccb8:	4602      	mov	r2, r0
 800ccba:	f240 2145 	movw	r1, #581	; 0x245
 800ccbe:	e7e5      	b.n	800cc8c <__mdiff+0x28>
 800ccc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ccc4:	6926      	ldr	r6, [r4, #16]
 800ccc6:	60c5      	str	r5, [r0, #12]
 800ccc8:	f104 0914 	add.w	r9, r4, #20
 800cccc:	f108 0514 	add.w	r5, r8, #20
 800ccd0:	f100 0e14 	add.w	lr, r0, #20
 800ccd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ccd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ccdc:	f108 0210 	add.w	r2, r8, #16
 800cce0:	46f2      	mov	sl, lr
 800cce2:	2100      	movs	r1, #0
 800cce4:	f859 3b04 	ldr.w	r3, [r9], #4
 800cce8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ccec:	fa11 f88b 	uxtah	r8, r1, fp
 800ccf0:	b299      	uxth	r1, r3
 800ccf2:	0c1b      	lsrs	r3, r3, #16
 800ccf4:	eba8 0801 	sub.w	r8, r8, r1
 800ccf8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ccfc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cd00:	fa1f f888 	uxth.w	r8, r8
 800cd04:	1419      	asrs	r1, r3, #16
 800cd06:	454e      	cmp	r6, r9
 800cd08:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cd0c:	f84a 3b04 	str.w	r3, [sl], #4
 800cd10:	d8e8      	bhi.n	800cce4 <__mdiff+0x80>
 800cd12:	1b33      	subs	r3, r6, r4
 800cd14:	3b15      	subs	r3, #21
 800cd16:	f023 0303 	bic.w	r3, r3, #3
 800cd1a:	3304      	adds	r3, #4
 800cd1c:	3415      	adds	r4, #21
 800cd1e:	42a6      	cmp	r6, r4
 800cd20:	bf38      	it	cc
 800cd22:	2304      	movcc	r3, #4
 800cd24:	441d      	add	r5, r3
 800cd26:	4473      	add	r3, lr
 800cd28:	469e      	mov	lr, r3
 800cd2a:	462e      	mov	r6, r5
 800cd2c:	4566      	cmp	r6, ip
 800cd2e:	d30e      	bcc.n	800cd4e <__mdiff+0xea>
 800cd30:	f10c 0203 	add.w	r2, ip, #3
 800cd34:	1b52      	subs	r2, r2, r5
 800cd36:	f022 0203 	bic.w	r2, r2, #3
 800cd3a:	3d03      	subs	r5, #3
 800cd3c:	45ac      	cmp	ip, r5
 800cd3e:	bf38      	it	cc
 800cd40:	2200      	movcc	r2, #0
 800cd42:	4413      	add	r3, r2
 800cd44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cd48:	b17a      	cbz	r2, 800cd6a <__mdiff+0x106>
 800cd4a:	6107      	str	r7, [r0, #16]
 800cd4c:	e7a4      	b.n	800cc98 <__mdiff+0x34>
 800cd4e:	f856 8b04 	ldr.w	r8, [r6], #4
 800cd52:	fa11 f288 	uxtah	r2, r1, r8
 800cd56:	1414      	asrs	r4, r2, #16
 800cd58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cd5c:	b292      	uxth	r2, r2
 800cd5e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cd62:	f84e 2b04 	str.w	r2, [lr], #4
 800cd66:	1421      	asrs	r1, r4, #16
 800cd68:	e7e0      	b.n	800cd2c <__mdiff+0xc8>
 800cd6a:	3f01      	subs	r7, #1
 800cd6c:	e7ea      	b.n	800cd44 <__mdiff+0xe0>
 800cd6e:	bf00      	nop
 800cd70:	0800e495 	.word	0x0800e495
 800cd74:	0800e4a6 	.word	0x0800e4a6

0800cd78 <__d2b>:
 800cd78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd7c:	460f      	mov	r7, r1
 800cd7e:	2101      	movs	r1, #1
 800cd80:	ec59 8b10 	vmov	r8, r9, d0
 800cd84:	4616      	mov	r6, r2
 800cd86:	f7ff fcd5 	bl	800c734 <_Balloc>
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	b930      	cbnz	r0, 800cd9c <__d2b+0x24>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	4b24      	ldr	r3, [pc, #144]	; (800ce24 <__d2b+0xac>)
 800cd92:	4825      	ldr	r0, [pc, #148]	; (800ce28 <__d2b+0xb0>)
 800cd94:	f240 310f 	movw	r1, #783	; 0x30f
 800cd98:	f000 fb0a 	bl	800d3b0 <__assert_func>
 800cd9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cda0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cda4:	bb2d      	cbnz	r5, 800cdf2 <__d2b+0x7a>
 800cda6:	9301      	str	r3, [sp, #4]
 800cda8:	f1b8 0300 	subs.w	r3, r8, #0
 800cdac:	d026      	beq.n	800cdfc <__d2b+0x84>
 800cdae:	4668      	mov	r0, sp
 800cdb0:	9300      	str	r3, [sp, #0]
 800cdb2:	f7ff fd87 	bl	800c8c4 <__lo0bits>
 800cdb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cdba:	b1e8      	cbz	r0, 800cdf8 <__d2b+0x80>
 800cdbc:	f1c0 0320 	rsb	r3, r0, #32
 800cdc0:	fa02 f303 	lsl.w	r3, r2, r3
 800cdc4:	430b      	orrs	r3, r1
 800cdc6:	40c2      	lsrs	r2, r0
 800cdc8:	6163      	str	r3, [r4, #20]
 800cdca:	9201      	str	r2, [sp, #4]
 800cdcc:	9b01      	ldr	r3, [sp, #4]
 800cdce:	61a3      	str	r3, [r4, #24]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	bf14      	ite	ne
 800cdd4:	2202      	movne	r2, #2
 800cdd6:	2201      	moveq	r2, #1
 800cdd8:	6122      	str	r2, [r4, #16]
 800cdda:	b1bd      	cbz	r5, 800ce0c <__d2b+0x94>
 800cddc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cde0:	4405      	add	r5, r0
 800cde2:	603d      	str	r5, [r7, #0]
 800cde4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cde8:	6030      	str	r0, [r6, #0]
 800cdea:	4620      	mov	r0, r4
 800cdec:	b003      	add	sp, #12
 800cdee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdf6:	e7d6      	b.n	800cda6 <__d2b+0x2e>
 800cdf8:	6161      	str	r1, [r4, #20]
 800cdfa:	e7e7      	b.n	800cdcc <__d2b+0x54>
 800cdfc:	a801      	add	r0, sp, #4
 800cdfe:	f7ff fd61 	bl	800c8c4 <__lo0bits>
 800ce02:	9b01      	ldr	r3, [sp, #4]
 800ce04:	6163      	str	r3, [r4, #20]
 800ce06:	3020      	adds	r0, #32
 800ce08:	2201      	movs	r2, #1
 800ce0a:	e7e5      	b.n	800cdd8 <__d2b+0x60>
 800ce0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce14:	6038      	str	r0, [r7, #0]
 800ce16:	6918      	ldr	r0, [r3, #16]
 800ce18:	f7ff fd34 	bl	800c884 <__hi0bits>
 800ce1c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce20:	e7e2      	b.n	800cde8 <__d2b+0x70>
 800ce22:	bf00      	nop
 800ce24:	0800e495 	.word	0x0800e495
 800ce28:	0800e4a6 	.word	0x0800e4a6

0800ce2c <__ssputs_r>:
 800ce2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce30:	688e      	ldr	r6, [r1, #8]
 800ce32:	461f      	mov	r7, r3
 800ce34:	42be      	cmp	r6, r7
 800ce36:	680b      	ldr	r3, [r1, #0]
 800ce38:	4682      	mov	sl, r0
 800ce3a:	460c      	mov	r4, r1
 800ce3c:	4690      	mov	r8, r2
 800ce3e:	d82c      	bhi.n	800ce9a <__ssputs_r+0x6e>
 800ce40:	898a      	ldrh	r2, [r1, #12]
 800ce42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce46:	d026      	beq.n	800ce96 <__ssputs_r+0x6a>
 800ce48:	6965      	ldr	r5, [r4, #20]
 800ce4a:	6909      	ldr	r1, [r1, #16]
 800ce4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce50:	eba3 0901 	sub.w	r9, r3, r1
 800ce54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce58:	1c7b      	adds	r3, r7, #1
 800ce5a:	444b      	add	r3, r9
 800ce5c:	106d      	asrs	r5, r5, #1
 800ce5e:	429d      	cmp	r5, r3
 800ce60:	bf38      	it	cc
 800ce62:	461d      	movcc	r5, r3
 800ce64:	0553      	lsls	r3, r2, #21
 800ce66:	d527      	bpl.n	800ceb8 <__ssputs_r+0x8c>
 800ce68:	4629      	mov	r1, r5
 800ce6a:	f7ff fbd7 	bl	800c61c <_malloc_r>
 800ce6e:	4606      	mov	r6, r0
 800ce70:	b360      	cbz	r0, 800cecc <__ssputs_r+0xa0>
 800ce72:	6921      	ldr	r1, [r4, #16]
 800ce74:	464a      	mov	r2, r9
 800ce76:	f000 fa8d 	bl	800d394 <memcpy>
 800ce7a:	89a3      	ldrh	r3, [r4, #12]
 800ce7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce84:	81a3      	strh	r3, [r4, #12]
 800ce86:	6126      	str	r6, [r4, #16]
 800ce88:	6165      	str	r5, [r4, #20]
 800ce8a:	444e      	add	r6, r9
 800ce8c:	eba5 0509 	sub.w	r5, r5, r9
 800ce90:	6026      	str	r6, [r4, #0]
 800ce92:	60a5      	str	r5, [r4, #8]
 800ce94:	463e      	mov	r6, r7
 800ce96:	42be      	cmp	r6, r7
 800ce98:	d900      	bls.n	800ce9c <__ssputs_r+0x70>
 800ce9a:	463e      	mov	r6, r7
 800ce9c:	6820      	ldr	r0, [r4, #0]
 800ce9e:	4632      	mov	r2, r6
 800cea0:	4641      	mov	r1, r8
 800cea2:	f000 fa2b 	bl	800d2fc <memmove>
 800cea6:	68a3      	ldr	r3, [r4, #8]
 800cea8:	1b9b      	subs	r3, r3, r6
 800ceaa:	60a3      	str	r3, [r4, #8]
 800ceac:	6823      	ldr	r3, [r4, #0]
 800ceae:	4433      	add	r3, r6
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceb8:	462a      	mov	r2, r5
 800ceba:	f000 fabf 	bl	800d43c <_realloc_r>
 800cebe:	4606      	mov	r6, r0
 800cec0:	2800      	cmp	r0, #0
 800cec2:	d1e0      	bne.n	800ce86 <__ssputs_r+0x5a>
 800cec4:	6921      	ldr	r1, [r4, #16]
 800cec6:	4650      	mov	r0, sl
 800cec8:	f7ff fb34 	bl	800c534 <_free_r>
 800cecc:	230c      	movs	r3, #12
 800cece:	f8ca 3000 	str.w	r3, [sl]
 800ced2:	89a3      	ldrh	r3, [r4, #12]
 800ced4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ced8:	81a3      	strh	r3, [r4, #12]
 800ceda:	f04f 30ff 	mov.w	r0, #4294967295
 800cede:	e7e9      	b.n	800ceb4 <__ssputs_r+0x88>

0800cee0 <_svfiprintf_r>:
 800cee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee4:	4698      	mov	r8, r3
 800cee6:	898b      	ldrh	r3, [r1, #12]
 800cee8:	061b      	lsls	r3, r3, #24
 800ceea:	b09d      	sub	sp, #116	; 0x74
 800ceec:	4607      	mov	r7, r0
 800ceee:	460d      	mov	r5, r1
 800cef0:	4614      	mov	r4, r2
 800cef2:	d50e      	bpl.n	800cf12 <_svfiprintf_r+0x32>
 800cef4:	690b      	ldr	r3, [r1, #16]
 800cef6:	b963      	cbnz	r3, 800cf12 <_svfiprintf_r+0x32>
 800cef8:	2140      	movs	r1, #64	; 0x40
 800cefa:	f7ff fb8f 	bl	800c61c <_malloc_r>
 800cefe:	6028      	str	r0, [r5, #0]
 800cf00:	6128      	str	r0, [r5, #16]
 800cf02:	b920      	cbnz	r0, 800cf0e <_svfiprintf_r+0x2e>
 800cf04:	230c      	movs	r3, #12
 800cf06:	603b      	str	r3, [r7, #0]
 800cf08:	f04f 30ff 	mov.w	r0, #4294967295
 800cf0c:	e0d0      	b.n	800d0b0 <_svfiprintf_r+0x1d0>
 800cf0e:	2340      	movs	r3, #64	; 0x40
 800cf10:	616b      	str	r3, [r5, #20]
 800cf12:	2300      	movs	r3, #0
 800cf14:	9309      	str	r3, [sp, #36]	; 0x24
 800cf16:	2320      	movs	r3, #32
 800cf18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf20:	2330      	movs	r3, #48	; 0x30
 800cf22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d0c8 <_svfiprintf_r+0x1e8>
 800cf26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf2a:	f04f 0901 	mov.w	r9, #1
 800cf2e:	4623      	mov	r3, r4
 800cf30:	469a      	mov	sl, r3
 800cf32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf36:	b10a      	cbz	r2, 800cf3c <_svfiprintf_r+0x5c>
 800cf38:	2a25      	cmp	r2, #37	; 0x25
 800cf3a:	d1f9      	bne.n	800cf30 <_svfiprintf_r+0x50>
 800cf3c:	ebba 0b04 	subs.w	fp, sl, r4
 800cf40:	d00b      	beq.n	800cf5a <_svfiprintf_r+0x7a>
 800cf42:	465b      	mov	r3, fp
 800cf44:	4622      	mov	r2, r4
 800cf46:	4629      	mov	r1, r5
 800cf48:	4638      	mov	r0, r7
 800cf4a:	f7ff ff6f 	bl	800ce2c <__ssputs_r>
 800cf4e:	3001      	adds	r0, #1
 800cf50:	f000 80a9 	beq.w	800d0a6 <_svfiprintf_r+0x1c6>
 800cf54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf56:	445a      	add	r2, fp
 800cf58:	9209      	str	r2, [sp, #36]	; 0x24
 800cf5a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	f000 80a1 	beq.w	800d0a6 <_svfiprintf_r+0x1c6>
 800cf64:	2300      	movs	r3, #0
 800cf66:	f04f 32ff 	mov.w	r2, #4294967295
 800cf6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf6e:	f10a 0a01 	add.w	sl, sl, #1
 800cf72:	9304      	str	r3, [sp, #16]
 800cf74:	9307      	str	r3, [sp, #28]
 800cf76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf7a:	931a      	str	r3, [sp, #104]	; 0x68
 800cf7c:	4654      	mov	r4, sl
 800cf7e:	2205      	movs	r2, #5
 800cf80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf84:	4850      	ldr	r0, [pc, #320]	; (800d0c8 <_svfiprintf_r+0x1e8>)
 800cf86:	f7f3 f923 	bl	80001d0 <memchr>
 800cf8a:	9a04      	ldr	r2, [sp, #16]
 800cf8c:	b9d8      	cbnz	r0, 800cfc6 <_svfiprintf_r+0xe6>
 800cf8e:	06d0      	lsls	r0, r2, #27
 800cf90:	bf44      	itt	mi
 800cf92:	2320      	movmi	r3, #32
 800cf94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf98:	0711      	lsls	r1, r2, #28
 800cf9a:	bf44      	itt	mi
 800cf9c:	232b      	movmi	r3, #43	; 0x2b
 800cf9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfa2:	f89a 3000 	ldrb.w	r3, [sl]
 800cfa6:	2b2a      	cmp	r3, #42	; 0x2a
 800cfa8:	d015      	beq.n	800cfd6 <_svfiprintf_r+0xf6>
 800cfaa:	9a07      	ldr	r2, [sp, #28]
 800cfac:	4654      	mov	r4, sl
 800cfae:	2000      	movs	r0, #0
 800cfb0:	f04f 0c0a 	mov.w	ip, #10
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfba:	3b30      	subs	r3, #48	; 0x30
 800cfbc:	2b09      	cmp	r3, #9
 800cfbe:	d94d      	bls.n	800d05c <_svfiprintf_r+0x17c>
 800cfc0:	b1b0      	cbz	r0, 800cff0 <_svfiprintf_r+0x110>
 800cfc2:	9207      	str	r2, [sp, #28]
 800cfc4:	e014      	b.n	800cff0 <_svfiprintf_r+0x110>
 800cfc6:	eba0 0308 	sub.w	r3, r0, r8
 800cfca:	fa09 f303 	lsl.w	r3, r9, r3
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	9304      	str	r3, [sp, #16]
 800cfd2:	46a2      	mov	sl, r4
 800cfd4:	e7d2      	b.n	800cf7c <_svfiprintf_r+0x9c>
 800cfd6:	9b03      	ldr	r3, [sp, #12]
 800cfd8:	1d19      	adds	r1, r3, #4
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	9103      	str	r1, [sp, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	bfbb      	ittet	lt
 800cfe2:	425b      	neglt	r3, r3
 800cfe4:	f042 0202 	orrlt.w	r2, r2, #2
 800cfe8:	9307      	strge	r3, [sp, #28]
 800cfea:	9307      	strlt	r3, [sp, #28]
 800cfec:	bfb8      	it	lt
 800cfee:	9204      	strlt	r2, [sp, #16]
 800cff0:	7823      	ldrb	r3, [r4, #0]
 800cff2:	2b2e      	cmp	r3, #46	; 0x2e
 800cff4:	d10c      	bne.n	800d010 <_svfiprintf_r+0x130>
 800cff6:	7863      	ldrb	r3, [r4, #1]
 800cff8:	2b2a      	cmp	r3, #42	; 0x2a
 800cffa:	d134      	bne.n	800d066 <_svfiprintf_r+0x186>
 800cffc:	9b03      	ldr	r3, [sp, #12]
 800cffe:	1d1a      	adds	r2, r3, #4
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	9203      	str	r2, [sp, #12]
 800d004:	2b00      	cmp	r3, #0
 800d006:	bfb8      	it	lt
 800d008:	f04f 33ff 	movlt.w	r3, #4294967295
 800d00c:	3402      	adds	r4, #2
 800d00e:	9305      	str	r3, [sp, #20]
 800d010:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d0d8 <_svfiprintf_r+0x1f8>
 800d014:	7821      	ldrb	r1, [r4, #0]
 800d016:	2203      	movs	r2, #3
 800d018:	4650      	mov	r0, sl
 800d01a:	f7f3 f8d9 	bl	80001d0 <memchr>
 800d01e:	b138      	cbz	r0, 800d030 <_svfiprintf_r+0x150>
 800d020:	9b04      	ldr	r3, [sp, #16]
 800d022:	eba0 000a 	sub.w	r0, r0, sl
 800d026:	2240      	movs	r2, #64	; 0x40
 800d028:	4082      	lsls	r2, r0
 800d02a:	4313      	orrs	r3, r2
 800d02c:	3401      	adds	r4, #1
 800d02e:	9304      	str	r3, [sp, #16]
 800d030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d034:	4825      	ldr	r0, [pc, #148]	; (800d0cc <_svfiprintf_r+0x1ec>)
 800d036:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d03a:	2206      	movs	r2, #6
 800d03c:	f7f3 f8c8 	bl	80001d0 <memchr>
 800d040:	2800      	cmp	r0, #0
 800d042:	d038      	beq.n	800d0b6 <_svfiprintf_r+0x1d6>
 800d044:	4b22      	ldr	r3, [pc, #136]	; (800d0d0 <_svfiprintf_r+0x1f0>)
 800d046:	bb1b      	cbnz	r3, 800d090 <_svfiprintf_r+0x1b0>
 800d048:	9b03      	ldr	r3, [sp, #12]
 800d04a:	3307      	adds	r3, #7
 800d04c:	f023 0307 	bic.w	r3, r3, #7
 800d050:	3308      	adds	r3, #8
 800d052:	9303      	str	r3, [sp, #12]
 800d054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d056:	4433      	add	r3, r6
 800d058:	9309      	str	r3, [sp, #36]	; 0x24
 800d05a:	e768      	b.n	800cf2e <_svfiprintf_r+0x4e>
 800d05c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d060:	460c      	mov	r4, r1
 800d062:	2001      	movs	r0, #1
 800d064:	e7a6      	b.n	800cfb4 <_svfiprintf_r+0xd4>
 800d066:	2300      	movs	r3, #0
 800d068:	3401      	adds	r4, #1
 800d06a:	9305      	str	r3, [sp, #20]
 800d06c:	4619      	mov	r1, r3
 800d06e:	f04f 0c0a 	mov.w	ip, #10
 800d072:	4620      	mov	r0, r4
 800d074:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d078:	3a30      	subs	r2, #48	; 0x30
 800d07a:	2a09      	cmp	r2, #9
 800d07c:	d903      	bls.n	800d086 <_svfiprintf_r+0x1a6>
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d0c6      	beq.n	800d010 <_svfiprintf_r+0x130>
 800d082:	9105      	str	r1, [sp, #20]
 800d084:	e7c4      	b.n	800d010 <_svfiprintf_r+0x130>
 800d086:	fb0c 2101 	mla	r1, ip, r1, r2
 800d08a:	4604      	mov	r4, r0
 800d08c:	2301      	movs	r3, #1
 800d08e:	e7f0      	b.n	800d072 <_svfiprintf_r+0x192>
 800d090:	ab03      	add	r3, sp, #12
 800d092:	9300      	str	r3, [sp, #0]
 800d094:	462a      	mov	r2, r5
 800d096:	4b0f      	ldr	r3, [pc, #60]	; (800d0d4 <_svfiprintf_r+0x1f4>)
 800d098:	a904      	add	r1, sp, #16
 800d09a:	4638      	mov	r0, r7
 800d09c:	f7fd fd72 	bl	800ab84 <_printf_float>
 800d0a0:	1c42      	adds	r2, r0, #1
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	d1d6      	bne.n	800d054 <_svfiprintf_r+0x174>
 800d0a6:	89ab      	ldrh	r3, [r5, #12]
 800d0a8:	065b      	lsls	r3, r3, #25
 800d0aa:	f53f af2d 	bmi.w	800cf08 <_svfiprintf_r+0x28>
 800d0ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0b0:	b01d      	add	sp, #116	; 0x74
 800d0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b6:	ab03      	add	r3, sp, #12
 800d0b8:	9300      	str	r3, [sp, #0]
 800d0ba:	462a      	mov	r2, r5
 800d0bc:	4b05      	ldr	r3, [pc, #20]	; (800d0d4 <_svfiprintf_r+0x1f4>)
 800d0be:	a904      	add	r1, sp, #16
 800d0c0:	4638      	mov	r0, r7
 800d0c2:	f7fe f803 	bl	800b0cc <_printf_i>
 800d0c6:	e7eb      	b.n	800d0a0 <_svfiprintf_r+0x1c0>
 800d0c8:	0800e5fc 	.word	0x0800e5fc
 800d0cc:	0800e606 	.word	0x0800e606
 800d0d0:	0800ab85 	.word	0x0800ab85
 800d0d4:	0800ce2d 	.word	0x0800ce2d
 800d0d8:	0800e602 	.word	0x0800e602

0800d0dc <__sflush_r>:
 800d0dc:	898a      	ldrh	r2, [r1, #12]
 800d0de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e2:	4605      	mov	r5, r0
 800d0e4:	0710      	lsls	r0, r2, #28
 800d0e6:	460c      	mov	r4, r1
 800d0e8:	d458      	bmi.n	800d19c <__sflush_r+0xc0>
 800d0ea:	684b      	ldr	r3, [r1, #4]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	dc05      	bgt.n	800d0fc <__sflush_r+0x20>
 800d0f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	dc02      	bgt.n	800d0fc <__sflush_r+0x20>
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0fe:	2e00      	cmp	r6, #0
 800d100:	d0f9      	beq.n	800d0f6 <__sflush_r+0x1a>
 800d102:	2300      	movs	r3, #0
 800d104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d108:	682f      	ldr	r7, [r5, #0]
 800d10a:	6a21      	ldr	r1, [r4, #32]
 800d10c:	602b      	str	r3, [r5, #0]
 800d10e:	d032      	beq.n	800d176 <__sflush_r+0x9a>
 800d110:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d112:	89a3      	ldrh	r3, [r4, #12]
 800d114:	075a      	lsls	r2, r3, #29
 800d116:	d505      	bpl.n	800d124 <__sflush_r+0x48>
 800d118:	6863      	ldr	r3, [r4, #4]
 800d11a:	1ac0      	subs	r0, r0, r3
 800d11c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d11e:	b10b      	cbz	r3, 800d124 <__sflush_r+0x48>
 800d120:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d122:	1ac0      	subs	r0, r0, r3
 800d124:	2300      	movs	r3, #0
 800d126:	4602      	mov	r2, r0
 800d128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d12a:	6a21      	ldr	r1, [r4, #32]
 800d12c:	4628      	mov	r0, r5
 800d12e:	47b0      	blx	r6
 800d130:	1c43      	adds	r3, r0, #1
 800d132:	89a3      	ldrh	r3, [r4, #12]
 800d134:	d106      	bne.n	800d144 <__sflush_r+0x68>
 800d136:	6829      	ldr	r1, [r5, #0]
 800d138:	291d      	cmp	r1, #29
 800d13a:	d82b      	bhi.n	800d194 <__sflush_r+0xb8>
 800d13c:	4a29      	ldr	r2, [pc, #164]	; (800d1e4 <__sflush_r+0x108>)
 800d13e:	410a      	asrs	r2, r1
 800d140:	07d6      	lsls	r6, r2, #31
 800d142:	d427      	bmi.n	800d194 <__sflush_r+0xb8>
 800d144:	2200      	movs	r2, #0
 800d146:	6062      	str	r2, [r4, #4]
 800d148:	04d9      	lsls	r1, r3, #19
 800d14a:	6922      	ldr	r2, [r4, #16]
 800d14c:	6022      	str	r2, [r4, #0]
 800d14e:	d504      	bpl.n	800d15a <__sflush_r+0x7e>
 800d150:	1c42      	adds	r2, r0, #1
 800d152:	d101      	bne.n	800d158 <__sflush_r+0x7c>
 800d154:	682b      	ldr	r3, [r5, #0]
 800d156:	b903      	cbnz	r3, 800d15a <__sflush_r+0x7e>
 800d158:	6560      	str	r0, [r4, #84]	; 0x54
 800d15a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d15c:	602f      	str	r7, [r5, #0]
 800d15e:	2900      	cmp	r1, #0
 800d160:	d0c9      	beq.n	800d0f6 <__sflush_r+0x1a>
 800d162:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d166:	4299      	cmp	r1, r3
 800d168:	d002      	beq.n	800d170 <__sflush_r+0x94>
 800d16a:	4628      	mov	r0, r5
 800d16c:	f7ff f9e2 	bl	800c534 <_free_r>
 800d170:	2000      	movs	r0, #0
 800d172:	6360      	str	r0, [r4, #52]	; 0x34
 800d174:	e7c0      	b.n	800d0f8 <__sflush_r+0x1c>
 800d176:	2301      	movs	r3, #1
 800d178:	4628      	mov	r0, r5
 800d17a:	47b0      	blx	r6
 800d17c:	1c41      	adds	r1, r0, #1
 800d17e:	d1c8      	bne.n	800d112 <__sflush_r+0x36>
 800d180:	682b      	ldr	r3, [r5, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d0c5      	beq.n	800d112 <__sflush_r+0x36>
 800d186:	2b1d      	cmp	r3, #29
 800d188:	d001      	beq.n	800d18e <__sflush_r+0xb2>
 800d18a:	2b16      	cmp	r3, #22
 800d18c:	d101      	bne.n	800d192 <__sflush_r+0xb6>
 800d18e:	602f      	str	r7, [r5, #0]
 800d190:	e7b1      	b.n	800d0f6 <__sflush_r+0x1a>
 800d192:	89a3      	ldrh	r3, [r4, #12]
 800d194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d198:	81a3      	strh	r3, [r4, #12]
 800d19a:	e7ad      	b.n	800d0f8 <__sflush_r+0x1c>
 800d19c:	690f      	ldr	r7, [r1, #16]
 800d19e:	2f00      	cmp	r7, #0
 800d1a0:	d0a9      	beq.n	800d0f6 <__sflush_r+0x1a>
 800d1a2:	0793      	lsls	r3, r2, #30
 800d1a4:	680e      	ldr	r6, [r1, #0]
 800d1a6:	bf08      	it	eq
 800d1a8:	694b      	ldreq	r3, [r1, #20]
 800d1aa:	600f      	str	r7, [r1, #0]
 800d1ac:	bf18      	it	ne
 800d1ae:	2300      	movne	r3, #0
 800d1b0:	eba6 0807 	sub.w	r8, r6, r7
 800d1b4:	608b      	str	r3, [r1, #8]
 800d1b6:	f1b8 0f00 	cmp.w	r8, #0
 800d1ba:	dd9c      	ble.n	800d0f6 <__sflush_r+0x1a>
 800d1bc:	6a21      	ldr	r1, [r4, #32]
 800d1be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d1c0:	4643      	mov	r3, r8
 800d1c2:	463a      	mov	r2, r7
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	47b0      	blx	r6
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	dc06      	bgt.n	800d1da <__sflush_r+0xfe>
 800d1cc:	89a3      	ldrh	r3, [r4, #12]
 800d1ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1d2:	81a3      	strh	r3, [r4, #12]
 800d1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d8:	e78e      	b.n	800d0f8 <__sflush_r+0x1c>
 800d1da:	4407      	add	r7, r0
 800d1dc:	eba8 0800 	sub.w	r8, r8, r0
 800d1e0:	e7e9      	b.n	800d1b6 <__sflush_r+0xda>
 800d1e2:	bf00      	nop
 800d1e4:	dfbffffe 	.word	0xdfbffffe

0800d1e8 <_fflush_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	690b      	ldr	r3, [r1, #16]
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	460c      	mov	r4, r1
 800d1f0:	b913      	cbnz	r3, 800d1f8 <_fflush_r+0x10>
 800d1f2:	2500      	movs	r5, #0
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	bd38      	pop	{r3, r4, r5, pc}
 800d1f8:	b118      	cbz	r0, 800d202 <_fflush_r+0x1a>
 800d1fa:	6a03      	ldr	r3, [r0, #32]
 800d1fc:	b90b      	cbnz	r3, 800d202 <_fflush_r+0x1a>
 800d1fe:	f7fe f913 	bl	800b428 <__sinit>
 800d202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d0f3      	beq.n	800d1f2 <_fflush_r+0xa>
 800d20a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d20c:	07d0      	lsls	r0, r2, #31
 800d20e:	d404      	bmi.n	800d21a <_fflush_r+0x32>
 800d210:	0599      	lsls	r1, r3, #22
 800d212:	d402      	bmi.n	800d21a <_fflush_r+0x32>
 800d214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d216:	f7fe fb0e 	bl	800b836 <__retarget_lock_acquire_recursive>
 800d21a:	4628      	mov	r0, r5
 800d21c:	4621      	mov	r1, r4
 800d21e:	f7ff ff5d 	bl	800d0dc <__sflush_r>
 800d222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d224:	07da      	lsls	r2, r3, #31
 800d226:	4605      	mov	r5, r0
 800d228:	d4e4      	bmi.n	800d1f4 <_fflush_r+0xc>
 800d22a:	89a3      	ldrh	r3, [r4, #12]
 800d22c:	059b      	lsls	r3, r3, #22
 800d22e:	d4e1      	bmi.n	800d1f4 <_fflush_r+0xc>
 800d230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d232:	f7fe fb01 	bl	800b838 <__retarget_lock_release_recursive>
 800d236:	e7dd      	b.n	800d1f4 <_fflush_r+0xc>

0800d238 <__swhatbuf_r>:
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	460c      	mov	r4, r1
 800d23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d240:	2900      	cmp	r1, #0
 800d242:	b096      	sub	sp, #88	; 0x58
 800d244:	4615      	mov	r5, r2
 800d246:	461e      	mov	r6, r3
 800d248:	da0d      	bge.n	800d266 <__swhatbuf_r+0x2e>
 800d24a:	89a3      	ldrh	r3, [r4, #12]
 800d24c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d250:	f04f 0100 	mov.w	r1, #0
 800d254:	bf0c      	ite	eq
 800d256:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d25a:	2340      	movne	r3, #64	; 0x40
 800d25c:	2000      	movs	r0, #0
 800d25e:	6031      	str	r1, [r6, #0]
 800d260:	602b      	str	r3, [r5, #0]
 800d262:	b016      	add	sp, #88	; 0x58
 800d264:	bd70      	pop	{r4, r5, r6, pc}
 800d266:	466a      	mov	r2, sp
 800d268:	f000 f862 	bl	800d330 <_fstat_r>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	dbec      	blt.n	800d24a <__swhatbuf_r+0x12>
 800d270:	9901      	ldr	r1, [sp, #4]
 800d272:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d276:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d27a:	4259      	negs	r1, r3
 800d27c:	4159      	adcs	r1, r3
 800d27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d282:	e7eb      	b.n	800d25c <__swhatbuf_r+0x24>

0800d284 <__smakebuf_r>:
 800d284:	898b      	ldrh	r3, [r1, #12]
 800d286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d288:	079d      	lsls	r5, r3, #30
 800d28a:	4606      	mov	r6, r0
 800d28c:	460c      	mov	r4, r1
 800d28e:	d507      	bpl.n	800d2a0 <__smakebuf_r+0x1c>
 800d290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	6123      	str	r3, [r4, #16]
 800d298:	2301      	movs	r3, #1
 800d29a:	6163      	str	r3, [r4, #20]
 800d29c:	b002      	add	sp, #8
 800d29e:	bd70      	pop	{r4, r5, r6, pc}
 800d2a0:	ab01      	add	r3, sp, #4
 800d2a2:	466a      	mov	r2, sp
 800d2a4:	f7ff ffc8 	bl	800d238 <__swhatbuf_r>
 800d2a8:	9900      	ldr	r1, [sp, #0]
 800d2aa:	4605      	mov	r5, r0
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f7ff f9b5 	bl	800c61c <_malloc_r>
 800d2b2:	b948      	cbnz	r0, 800d2c8 <__smakebuf_r+0x44>
 800d2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b8:	059a      	lsls	r2, r3, #22
 800d2ba:	d4ef      	bmi.n	800d29c <__smakebuf_r+0x18>
 800d2bc:	f023 0303 	bic.w	r3, r3, #3
 800d2c0:	f043 0302 	orr.w	r3, r3, #2
 800d2c4:	81a3      	strh	r3, [r4, #12]
 800d2c6:	e7e3      	b.n	800d290 <__smakebuf_r+0xc>
 800d2c8:	89a3      	ldrh	r3, [r4, #12]
 800d2ca:	6020      	str	r0, [r4, #0]
 800d2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2d0:	81a3      	strh	r3, [r4, #12]
 800d2d2:	9b00      	ldr	r3, [sp, #0]
 800d2d4:	6163      	str	r3, [r4, #20]
 800d2d6:	9b01      	ldr	r3, [sp, #4]
 800d2d8:	6120      	str	r0, [r4, #16]
 800d2da:	b15b      	cbz	r3, 800d2f4 <__smakebuf_r+0x70>
 800d2dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	f000 f837 	bl	800d354 <_isatty_r>
 800d2e6:	b128      	cbz	r0, 800d2f4 <__smakebuf_r+0x70>
 800d2e8:	89a3      	ldrh	r3, [r4, #12]
 800d2ea:	f023 0303 	bic.w	r3, r3, #3
 800d2ee:	f043 0301 	orr.w	r3, r3, #1
 800d2f2:	81a3      	strh	r3, [r4, #12]
 800d2f4:	89a3      	ldrh	r3, [r4, #12]
 800d2f6:	431d      	orrs	r5, r3
 800d2f8:	81a5      	strh	r5, [r4, #12]
 800d2fa:	e7cf      	b.n	800d29c <__smakebuf_r+0x18>

0800d2fc <memmove>:
 800d2fc:	4288      	cmp	r0, r1
 800d2fe:	b510      	push	{r4, lr}
 800d300:	eb01 0402 	add.w	r4, r1, r2
 800d304:	d902      	bls.n	800d30c <memmove+0x10>
 800d306:	4284      	cmp	r4, r0
 800d308:	4623      	mov	r3, r4
 800d30a:	d807      	bhi.n	800d31c <memmove+0x20>
 800d30c:	1e43      	subs	r3, r0, #1
 800d30e:	42a1      	cmp	r1, r4
 800d310:	d008      	beq.n	800d324 <memmove+0x28>
 800d312:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d316:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d31a:	e7f8      	b.n	800d30e <memmove+0x12>
 800d31c:	4402      	add	r2, r0
 800d31e:	4601      	mov	r1, r0
 800d320:	428a      	cmp	r2, r1
 800d322:	d100      	bne.n	800d326 <memmove+0x2a>
 800d324:	bd10      	pop	{r4, pc}
 800d326:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d32a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d32e:	e7f7      	b.n	800d320 <memmove+0x24>

0800d330 <_fstat_r>:
 800d330:	b538      	push	{r3, r4, r5, lr}
 800d332:	4d07      	ldr	r5, [pc, #28]	; (800d350 <_fstat_r+0x20>)
 800d334:	2300      	movs	r3, #0
 800d336:	4604      	mov	r4, r0
 800d338:	4608      	mov	r0, r1
 800d33a:	4611      	mov	r1, r2
 800d33c:	602b      	str	r3, [r5, #0]
 800d33e:	f7f6 f944 	bl	80035ca <_fstat>
 800d342:	1c43      	adds	r3, r0, #1
 800d344:	d102      	bne.n	800d34c <_fstat_r+0x1c>
 800d346:	682b      	ldr	r3, [r5, #0]
 800d348:	b103      	cbz	r3, 800d34c <_fstat_r+0x1c>
 800d34a:	6023      	str	r3, [r4, #0]
 800d34c:	bd38      	pop	{r3, r4, r5, pc}
 800d34e:	bf00      	nop
 800d350:	2000384c 	.word	0x2000384c

0800d354 <_isatty_r>:
 800d354:	b538      	push	{r3, r4, r5, lr}
 800d356:	4d06      	ldr	r5, [pc, #24]	; (800d370 <_isatty_r+0x1c>)
 800d358:	2300      	movs	r3, #0
 800d35a:	4604      	mov	r4, r0
 800d35c:	4608      	mov	r0, r1
 800d35e:	602b      	str	r3, [r5, #0]
 800d360:	f7f6 f943 	bl	80035ea <_isatty>
 800d364:	1c43      	adds	r3, r0, #1
 800d366:	d102      	bne.n	800d36e <_isatty_r+0x1a>
 800d368:	682b      	ldr	r3, [r5, #0]
 800d36a:	b103      	cbz	r3, 800d36e <_isatty_r+0x1a>
 800d36c:	6023      	str	r3, [r4, #0]
 800d36e:	bd38      	pop	{r3, r4, r5, pc}
 800d370:	2000384c 	.word	0x2000384c

0800d374 <_sbrk_r>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4d06      	ldr	r5, [pc, #24]	; (800d390 <_sbrk_r+0x1c>)
 800d378:	2300      	movs	r3, #0
 800d37a:	4604      	mov	r4, r0
 800d37c:	4608      	mov	r0, r1
 800d37e:	602b      	str	r3, [r5, #0]
 800d380:	f7f6 f94c 	bl	800361c <_sbrk>
 800d384:	1c43      	adds	r3, r0, #1
 800d386:	d102      	bne.n	800d38e <_sbrk_r+0x1a>
 800d388:	682b      	ldr	r3, [r5, #0]
 800d38a:	b103      	cbz	r3, 800d38e <_sbrk_r+0x1a>
 800d38c:	6023      	str	r3, [r4, #0]
 800d38e:	bd38      	pop	{r3, r4, r5, pc}
 800d390:	2000384c 	.word	0x2000384c

0800d394 <memcpy>:
 800d394:	440a      	add	r2, r1
 800d396:	4291      	cmp	r1, r2
 800d398:	f100 33ff 	add.w	r3, r0, #4294967295
 800d39c:	d100      	bne.n	800d3a0 <memcpy+0xc>
 800d39e:	4770      	bx	lr
 800d3a0:	b510      	push	{r4, lr}
 800d3a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3aa:	4291      	cmp	r1, r2
 800d3ac:	d1f9      	bne.n	800d3a2 <memcpy+0xe>
 800d3ae:	bd10      	pop	{r4, pc}

0800d3b0 <__assert_func>:
 800d3b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3b2:	4614      	mov	r4, r2
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	4b09      	ldr	r3, [pc, #36]	; (800d3dc <__assert_func+0x2c>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4605      	mov	r5, r0
 800d3bc:	68d8      	ldr	r0, [r3, #12]
 800d3be:	b14c      	cbz	r4, 800d3d4 <__assert_func+0x24>
 800d3c0:	4b07      	ldr	r3, [pc, #28]	; (800d3e0 <__assert_func+0x30>)
 800d3c2:	9100      	str	r1, [sp, #0]
 800d3c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3c8:	4906      	ldr	r1, [pc, #24]	; (800d3e4 <__assert_func+0x34>)
 800d3ca:	462b      	mov	r3, r5
 800d3cc:	f000 f872 	bl	800d4b4 <fiprintf>
 800d3d0:	f000 f882 	bl	800d4d8 <abort>
 800d3d4:	4b04      	ldr	r3, [pc, #16]	; (800d3e8 <__assert_func+0x38>)
 800d3d6:	461c      	mov	r4, r3
 800d3d8:	e7f3      	b.n	800d3c2 <__assert_func+0x12>
 800d3da:	bf00      	nop
 800d3dc:	200000ec 	.word	0x200000ec
 800d3e0:	0800e617 	.word	0x0800e617
 800d3e4:	0800e624 	.word	0x0800e624
 800d3e8:	0800e652 	.word	0x0800e652

0800d3ec <_calloc_r>:
 800d3ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3ee:	fba1 2402 	umull	r2, r4, r1, r2
 800d3f2:	b94c      	cbnz	r4, 800d408 <_calloc_r+0x1c>
 800d3f4:	4611      	mov	r1, r2
 800d3f6:	9201      	str	r2, [sp, #4]
 800d3f8:	f7ff f910 	bl	800c61c <_malloc_r>
 800d3fc:	9a01      	ldr	r2, [sp, #4]
 800d3fe:	4605      	mov	r5, r0
 800d400:	b930      	cbnz	r0, 800d410 <_calloc_r+0x24>
 800d402:	4628      	mov	r0, r5
 800d404:	b003      	add	sp, #12
 800d406:	bd30      	pop	{r4, r5, pc}
 800d408:	220c      	movs	r2, #12
 800d40a:	6002      	str	r2, [r0, #0]
 800d40c:	2500      	movs	r5, #0
 800d40e:	e7f8      	b.n	800d402 <_calloc_r+0x16>
 800d410:	4621      	mov	r1, r4
 800d412:	f7fe f993 	bl	800b73c <memset>
 800d416:	e7f4      	b.n	800d402 <_calloc_r+0x16>

0800d418 <__ascii_mbtowc>:
 800d418:	b082      	sub	sp, #8
 800d41a:	b901      	cbnz	r1, 800d41e <__ascii_mbtowc+0x6>
 800d41c:	a901      	add	r1, sp, #4
 800d41e:	b142      	cbz	r2, 800d432 <__ascii_mbtowc+0x1a>
 800d420:	b14b      	cbz	r3, 800d436 <__ascii_mbtowc+0x1e>
 800d422:	7813      	ldrb	r3, [r2, #0]
 800d424:	600b      	str	r3, [r1, #0]
 800d426:	7812      	ldrb	r2, [r2, #0]
 800d428:	1e10      	subs	r0, r2, #0
 800d42a:	bf18      	it	ne
 800d42c:	2001      	movne	r0, #1
 800d42e:	b002      	add	sp, #8
 800d430:	4770      	bx	lr
 800d432:	4610      	mov	r0, r2
 800d434:	e7fb      	b.n	800d42e <__ascii_mbtowc+0x16>
 800d436:	f06f 0001 	mvn.w	r0, #1
 800d43a:	e7f8      	b.n	800d42e <__ascii_mbtowc+0x16>

0800d43c <_realloc_r>:
 800d43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d440:	4680      	mov	r8, r0
 800d442:	4614      	mov	r4, r2
 800d444:	460e      	mov	r6, r1
 800d446:	b921      	cbnz	r1, 800d452 <_realloc_r+0x16>
 800d448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d44c:	4611      	mov	r1, r2
 800d44e:	f7ff b8e5 	b.w	800c61c <_malloc_r>
 800d452:	b92a      	cbnz	r2, 800d460 <_realloc_r+0x24>
 800d454:	f7ff f86e 	bl	800c534 <_free_r>
 800d458:	4625      	mov	r5, r4
 800d45a:	4628      	mov	r0, r5
 800d45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d460:	f000 f841 	bl	800d4e6 <_malloc_usable_size_r>
 800d464:	4284      	cmp	r4, r0
 800d466:	4607      	mov	r7, r0
 800d468:	d802      	bhi.n	800d470 <_realloc_r+0x34>
 800d46a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d46e:	d812      	bhi.n	800d496 <_realloc_r+0x5a>
 800d470:	4621      	mov	r1, r4
 800d472:	4640      	mov	r0, r8
 800d474:	f7ff f8d2 	bl	800c61c <_malloc_r>
 800d478:	4605      	mov	r5, r0
 800d47a:	2800      	cmp	r0, #0
 800d47c:	d0ed      	beq.n	800d45a <_realloc_r+0x1e>
 800d47e:	42bc      	cmp	r4, r7
 800d480:	4622      	mov	r2, r4
 800d482:	4631      	mov	r1, r6
 800d484:	bf28      	it	cs
 800d486:	463a      	movcs	r2, r7
 800d488:	f7ff ff84 	bl	800d394 <memcpy>
 800d48c:	4631      	mov	r1, r6
 800d48e:	4640      	mov	r0, r8
 800d490:	f7ff f850 	bl	800c534 <_free_r>
 800d494:	e7e1      	b.n	800d45a <_realloc_r+0x1e>
 800d496:	4635      	mov	r5, r6
 800d498:	e7df      	b.n	800d45a <_realloc_r+0x1e>

0800d49a <__ascii_wctomb>:
 800d49a:	b149      	cbz	r1, 800d4b0 <__ascii_wctomb+0x16>
 800d49c:	2aff      	cmp	r2, #255	; 0xff
 800d49e:	bf85      	ittet	hi
 800d4a0:	238a      	movhi	r3, #138	; 0x8a
 800d4a2:	6003      	strhi	r3, [r0, #0]
 800d4a4:	700a      	strbls	r2, [r1, #0]
 800d4a6:	f04f 30ff 	movhi.w	r0, #4294967295
 800d4aa:	bf98      	it	ls
 800d4ac:	2001      	movls	r0, #1
 800d4ae:	4770      	bx	lr
 800d4b0:	4608      	mov	r0, r1
 800d4b2:	4770      	bx	lr

0800d4b4 <fiprintf>:
 800d4b4:	b40e      	push	{r1, r2, r3}
 800d4b6:	b503      	push	{r0, r1, lr}
 800d4b8:	4601      	mov	r1, r0
 800d4ba:	ab03      	add	r3, sp, #12
 800d4bc:	4805      	ldr	r0, [pc, #20]	; (800d4d4 <fiprintf+0x20>)
 800d4be:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4c2:	6800      	ldr	r0, [r0, #0]
 800d4c4:	9301      	str	r3, [sp, #4]
 800d4c6:	f000 f83f 	bl	800d548 <_vfiprintf_r>
 800d4ca:	b002      	add	sp, #8
 800d4cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4d0:	b003      	add	sp, #12
 800d4d2:	4770      	bx	lr
 800d4d4:	200000ec 	.word	0x200000ec

0800d4d8 <abort>:
 800d4d8:	b508      	push	{r3, lr}
 800d4da:	2006      	movs	r0, #6
 800d4dc:	f000 f976 	bl	800d7cc <raise>
 800d4e0:	2001      	movs	r0, #1
 800d4e2:	f7f6 f823 	bl	800352c <_exit>

0800d4e6 <_malloc_usable_size_r>:
 800d4e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4ea:	1f18      	subs	r0, r3, #4
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	bfbc      	itt	lt
 800d4f0:	580b      	ldrlt	r3, [r1, r0]
 800d4f2:	18c0      	addlt	r0, r0, r3
 800d4f4:	4770      	bx	lr

0800d4f6 <__sfputc_r>:
 800d4f6:	6893      	ldr	r3, [r2, #8]
 800d4f8:	3b01      	subs	r3, #1
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	b410      	push	{r4}
 800d4fe:	6093      	str	r3, [r2, #8]
 800d500:	da08      	bge.n	800d514 <__sfputc_r+0x1e>
 800d502:	6994      	ldr	r4, [r2, #24]
 800d504:	42a3      	cmp	r3, r4
 800d506:	db01      	blt.n	800d50c <__sfputc_r+0x16>
 800d508:	290a      	cmp	r1, #10
 800d50a:	d103      	bne.n	800d514 <__sfputc_r+0x1e>
 800d50c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d510:	f7fe b87f 	b.w	800b612 <__swbuf_r>
 800d514:	6813      	ldr	r3, [r2, #0]
 800d516:	1c58      	adds	r0, r3, #1
 800d518:	6010      	str	r0, [r2, #0]
 800d51a:	7019      	strb	r1, [r3, #0]
 800d51c:	4608      	mov	r0, r1
 800d51e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <__sfputs_r>:
 800d524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d526:	4606      	mov	r6, r0
 800d528:	460f      	mov	r7, r1
 800d52a:	4614      	mov	r4, r2
 800d52c:	18d5      	adds	r5, r2, r3
 800d52e:	42ac      	cmp	r4, r5
 800d530:	d101      	bne.n	800d536 <__sfputs_r+0x12>
 800d532:	2000      	movs	r0, #0
 800d534:	e007      	b.n	800d546 <__sfputs_r+0x22>
 800d536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d53a:	463a      	mov	r2, r7
 800d53c:	4630      	mov	r0, r6
 800d53e:	f7ff ffda 	bl	800d4f6 <__sfputc_r>
 800d542:	1c43      	adds	r3, r0, #1
 800d544:	d1f3      	bne.n	800d52e <__sfputs_r+0xa>
 800d546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d548 <_vfiprintf_r>:
 800d548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54c:	460d      	mov	r5, r1
 800d54e:	b09d      	sub	sp, #116	; 0x74
 800d550:	4614      	mov	r4, r2
 800d552:	4698      	mov	r8, r3
 800d554:	4606      	mov	r6, r0
 800d556:	b118      	cbz	r0, 800d560 <_vfiprintf_r+0x18>
 800d558:	6a03      	ldr	r3, [r0, #32]
 800d55a:	b90b      	cbnz	r3, 800d560 <_vfiprintf_r+0x18>
 800d55c:	f7fd ff64 	bl	800b428 <__sinit>
 800d560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d562:	07d9      	lsls	r1, r3, #31
 800d564:	d405      	bmi.n	800d572 <_vfiprintf_r+0x2a>
 800d566:	89ab      	ldrh	r3, [r5, #12]
 800d568:	059a      	lsls	r2, r3, #22
 800d56a:	d402      	bmi.n	800d572 <_vfiprintf_r+0x2a>
 800d56c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d56e:	f7fe f962 	bl	800b836 <__retarget_lock_acquire_recursive>
 800d572:	89ab      	ldrh	r3, [r5, #12]
 800d574:	071b      	lsls	r3, r3, #28
 800d576:	d501      	bpl.n	800d57c <_vfiprintf_r+0x34>
 800d578:	692b      	ldr	r3, [r5, #16]
 800d57a:	b99b      	cbnz	r3, 800d5a4 <_vfiprintf_r+0x5c>
 800d57c:	4629      	mov	r1, r5
 800d57e:	4630      	mov	r0, r6
 800d580:	f7fe f884 	bl	800b68c <__swsetup_r>
 800d584:	b170      	cbz	r0, 800d5a4 <_vfiprintf_r+0x5c>
 800d586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d588:	07dc      	lsls	r4, r3, #31
 800d58a:	d504      	bpl.n	800d596 <_vfiprintf_r+0x4e>
 800d58c:	f04f 30ff 	mov.w	r0, #4294967295
 800d590:	b01d      	add	sp, #116	; 0x74
 800d592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d596:	89ab      	ldrh	r3, [r5, #12]
 800d598:	0598      	lsls	r0, r3, #22
 800d59a:	d4f7      	bmi.n	800d58c <_vfiprintf_r+0x44>
 800d59c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d59e:	f7fe f94b 	bl	800b838 <__retarget_lock_release_recursive>
 800d5a2:	e7f3      	b.n	800d58c <_vfiprintf_r+0x44>
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d5a8:	2320      	movs	r3, #32
 800d5aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5b2:	2330      	movs	r3, #48	; 0x30
 800d5b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d768 <_vfiprintf_r+0x220>
 800d5b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5bc:	f04f 0901 	mov.w	r9, #1
 800d5c0:	4623      	mov	r3, r4
 800d5c2:	469a      	mov	sl, r3
 800d5c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5c8:	b10a      	cbz	r2, 800d5ce <_vfiprintf_r+0x86>
 800d5ca:	2a25      	cmp	r2, #37	; 0x25
 800d5cc:	d1f9      	bne.n	800d5c2 <_vfiprintf_r+0x7a>
 800d5ce:	ebba 0b04 	subs.w	fp, sl, r4
 800d5d2:	d00b      	beq.n	800d5ec <_vfiprintf_r+0xa4>
 800d5d4:	465b      	mov	r3, fp
 800d5d6:	4622      	mov	r2, r4
 800d5d8:	4629      	mov	r1, r5
 800d5da:	4630      	mov	r0, r6
 800d5dc:	f7ff ffa2 	bl	800d524 <__sfputs_r>
 800d5e0:	3001      	adds	r0, #1
 800d5e2:	f000 80a9 	beq.w	800d738 <_vfiprintf_r+0x1f0>
 800d5e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5e8:	445a      	add	r2, fp
 800d5ea:	9209      	str	r2, [sp, #36]	; 0x24
 800d5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f000 80a1 	beq.w	800d738 <_vfiprintf_r+0x1f0>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d600:	f10a 0a01 	add.w	sl, sl, #1
 800d604:	9304      	str	r3, [sp, #16]
 800d606:	9307      	str	r3, [sp, #28]
 800d608:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d60c:	931a      	str	r3, [sp, #104]	; 0x68
 800d60e:	4654      	mov	r4, sl
 800d610:	2205      	movs	r2, #5
 800d612:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d616:	4854      	ldr	r0, [pc, #336]	; (800d768 <_vfiprintf_r+0x220>)
 800d618:	f7f2 fdda 	bl	80001d0 <memchr>
 800d61c:	9a04      	ldr	r2, [sp, #16]
 800d61e:	b9d8      	cbnz	r0, 800d658 <_vfiprintf_r+0x110>
 800d620:	06d1      	lsls	r1, r2, #27
 800d622:	bf44      	itt	mi
 800d624:	2320      	movmi	r3, #32
 800d626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d62a:	0713      	lsls	r3, r2, #28
 800d62c:	bf44      	itt	mi
 800d62e:	232b      	movmi	r3, #43	; 0x2b
 800d630:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d634:	f89a 3000 	ldrb.w	r3, [sl]
 800d638:	2b2a      	cmp	r3, #42	; 0x2a
 800d63a:	d015      	beq.n	800d668 <_vfiprintf_r+0x120>
 800d63c:	9a07      	ldr	r2, [sp, #28]
 800d63e:	4654      	mov	r4, sl
 800d640:	2000      	movs	r0, #0
 800d642:	f04f 0c0a 	mov.w	ip, #10
 800d646:	4621      	mov	r1, r4
 800d648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d64c:	3b30      	subs	r3, #48	; 0x30
 800d64e:	2b09      	cmp	r3, #9
 800d650:	d94d      	bls.n	800d6ee <_vfiprintf_r+0x1a6>
 800d652:	b1b0      	cbz	r0, 800d682 <_vfiprintf_r+0x13a>
 800d654:	9207      	str	r2, [sp, #28]
 800d656:	e014      	b.n	800d682 <_vfiprintf_r+0x13a>
 800d658:	eba0 0308 	sub.w	r3, r0, r8
 800d65c:	fa09 f303 	lsl.w	r3, r9, r3
 800d660:	4313      	orrs	r3, r2
 800d662:	9304      	str	r3, [sp, #16]
 800d664:	46a2      	mov	sl, r4
 800d666:	e7d2      	b.n	800d60e <_vfiprintf_r+0xc6>
 800d668:	9b03      	ldr	r3, [sp, #12]
 800d66a:	1d19      	adds	r1, r3, #4
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	9103      	str	r1, [sp, #12]
 800d670:	2b00      	cmp	r3, #0
 800d672:	bfbb      	ittet	lt
 800d674:	425b      	neglt	r3, r3
 800d676:	f042 0202 	orrlt.w	r2, r2, #2
 800d67a:	9307      	strge	r3, [sp, #28]
 800d67c:	9307      	strlt	r3, [sp, #28]
 800d67e:	bfb8      	it	lt
 800d680:	9204      	strlt	r2, [sp, #16]
 800d682:	7823      	ldrb	r3, [r4, #0]
 800d684:	2b2e      	cmp	r3, #46	; 0x2e
 800d686:	d10c      	bne.n	800d6a2 <_vfiprintf_r+0x15a>
 800d688:	7863      	ldrb	r3, [r4, #1]
 800d68a:	2b2a      	cmp	r3, #42	; 0x2a
 800d68c:	d134      	bne.n	800d6f8 <_vfiprintf_r+0x1b0>
 800d68e:	9b03      	ldr	r3, [sp, #12]
 800d690:	1d1a      	adds	r2, r3, #4
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	9203      	str	r2, [sp, #12]
 800d696:	2b00      	cmp	r3, #0
 800d698:	bfb8      	it	lt
 800d69a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d69e:	3402      	adds	r4, #2
 800d6a0:	9305      	str	r3, [sp, #20]
 800d6a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d778 <_vfiprintf_r+0x230>
 800d6a6:	7821      	ldrb	r1, [r4, #0]
 800d6a8:	2203      	movs	r2, #3
 800d6aa:	4650      	mov	r0, sl
 800d6ac:	f7f2 fd90 	bl	80001d0 <memchr>
 800d6b0:	b138      	cbz	r0, 800d6c2 <_vfiprintf_r+0x17a>
 800d6b2:	9b04      	ldr	r3, [sp, #16]
 800d6b4:	eba0 000a 	sub.w	r0, r0, sl
 800d6b8:	2240      	movs	r2, #64	; 0x40
 800d6ba:	4082      	lsls	r2, r0
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	3401      	adds	r4, #1
 800d6c0:	9304      	str	r3, [sp, #16]
 800d6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6c6:	4829      	ldr	r0, [pc, #164]	; (800d76c <_vfiprintf_r+0x224>)
 800d6c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6cc:	2206      	movs	r2, #6
 800d6ce:	f7f2 fd7f 	bl	80001d0 <memchr>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	d03f      	beq.n	800d756 <_vfiprintf_r+0x20e>
 800d6d6:	4b26      	ldr	r3, [pc, #152]	; (800d770 <_vfiprintf_r+0x228>)
 800d6d8:	bb1b      	cbnz	r3, 800d722 <_vfiprintf_r+0x1da>
 800d6da:	9b03      	ldr	r3, [sp, #12]
 800d6dc:	3307      	adds	r3, #7
 800d6de:	f023 0307 	bic.w	r3, r3, #7
 800d6e2:	3308      	adds	r3, #8
 800d6e4:	9303      	str	r3, [sp, #12]
 800d6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6e8:	443b      	add	r3, r7
 800d6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800d6ec:	e768      	b.n	800d5c0 <_vfiprintf_r+0x78>
 800d6ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6f2:	460c      	mov	r4, r1
 800d6f4:	2001      	movs	r0, #1
 800d6f6:	e7a6      	b.n	800d646 <_vfiprintf_r+0xfe>
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	3401      	adds	r4, #1
 800d6fc:	9305      	str	r3, [sp, #20]
 800d6fe:	4619      	mov	r1, r3
 800d700:	f04f 0c0a 	mov.w	ip, #10
 800d704:	4620      	mov	r0, r4
 800d706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d70a:	3a30      	subs	r2, #48	; 0x30
 800d70c:	2a09      	cmp	r2, #9
 800d70e:	d903      	bls.n	800d718 <_vfiprintf_r+0x1d0>
 800d710:	2b00      	cmp	r3, #0
 800d712:	d0c6      	beq.n	800d6a2 <_vfiprintf_r+0x15a>
 800d714:	9105      	str	r1, [sp, #20]
 800d716:	e7c4      	b.n	800d6a2 <_vfiprintf_r+0x15a>
 800d718:	fb0c 2101 	mla	r1, ip, r1, r2
 800d71c:	4604      	mov	r4, r0
 800d71e:	2301      	movs	r3, #1
 800d720:	e7f0      	b.n	800d704 <_vfiprintf_r+0x1bc>
 800d722:	ab03      	add	r3, sp, #12
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	462a      	mov	r2, r5
 800d728:	4b12      	ldr	r3, [pc, #72]	; (800d774 <_vfiprintf_r+0x22c>)
 800d72a:	a904      	add	r1, sp, #16
 800d72c:	4630      	mov	r0, r6
 800d72e:	f7fd fa29 	bl	800ab84 <_printf_float>
 800d732:	4607      	mov	r7, r0
 800d734:	1c78      	adds	r0, r7, #1
 800d736:	d1d6      	bne.n	800d6e6 <_vfiprintf_r+0x19e>
 800d738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d73a:	07d9      	lsls	r1, r3, #31
 800d73c:	d405      	bmi.n	800d74a <_vfiprintf_r+0x202>
 800d73e:	89ab      	ldrh	r3, [r5, #12]
 800d740:	059a      	lsls	r2, r3, #22
 800d742:	d402      	bmi.n	800d74a <_vfiprintf_r+0x202>
 800d744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d746:	f7fe f877 	bl	800b838 <__retarget_lock_release_recursive>
 800d74a:	89ab      	ldrh	r3, [r5, #12]
 800d74c:	065b      	lsls	r3, r3, #25
 800d74e:	f53f af1d 	bmi.w	800d58c <_vfiprintf_r+0x44>
 800d752:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d754:	e71c      	b.n	800d590 <_vfiprintf_r+0x48>
 800d756:	ab03      	add	r3, sp, #12
 800d758:	9300      	str	r3, [sp, #0]
 800d75a:	462a      	mov	r2, r5
 800d75c:	4b05      	ldr	r3, [pc, #20]	; (800d774 <_vfiprintf_r+0x22c>)
 800d75e:	a904      	add	r1, sp, #16
 800d760:	4630      	mov	r0, r6
 800d762:	f7fd fcb3 	bl	800b0cc <_printf_i>
 800d766:	e7e4      	b.n	800d732 <_vfiprintf_r+0x1ea>
 800d768:	0800e5fc 	.word	0x0800e5fc
 800d76c:	0800e606 	.word	0x0800e606
 800d770:	0800ab85 	.word	0x0800ab85
 800d774:	0800d525 	.word	0x0800d525
 800d778:	0800e602 	.word	0x0800e602

0800d77c <_raise_r>:
 800d77c:	291f      	cmp	r1, #31
 800d77e:	b538      	push	{r3, r4, r5, lr}
 800d780:	4604      	mov	r4, r0
 800d782:	460d      	mov	r5, r1
 800d784:	d904      	bls.n	800d790 <_raise_r+0x14>
 800d786:	2316      	movs	r3, #22
 800d788:	6003      	str	r3, [r0, #0]
 800d78a:	f04f 30ff 	mov.w	r0, #4294967295
 800d78e:	bd38      	pop	{r3, r4, r5, pc}
 800d790:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d792:	b112      	cbz	r2, 800d79a <_raise_r+0x1e>
 800d794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d798:	b94b      	cbnz	r3, 800d7ae <_raise_r+0x32>
 800d79a:	4620      	mov	r0, r4
 800d79c:	f000 f830 	bl	800d800 <_getpid_r>
 800d7a0:	462a      	mov	r2, r5
 800d7a2:	4601      	mov	r1, r0
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7aa:	f000 b817 	b.w	800d7dc <_kill_r>
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d00a      	beq.n	800d7c8 <_raise_r+0x4c>
 800d7b2:	1c59      	adds	r1, r3, #1
 800d7b4:	d103      	bne.n	800d7be <_raise_r+0x42>
 800d7b6:	2316      	movs	r3, #22
 800d7b8:	6003      	str	r3, [r0, #0]
 800d7ba:	2001      	movs	r0, #1
 800d7bc:	e7e7      	b.n	800d78e <_raise_r+0x12>
 800d7be:	2400      	movs	r4, #0
 800d7c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	4798      	blx	r3
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	e7e0      	b.n	800d78e <_raise_r+0x12>

0800d7cc <raise>:
 800d7cc:	4b02      	ldr	r3, [pc, #8]	; (800d7d8 <raise+0xc>)
 800d7ce:	4601      	mov	r1, r0
 800d7d0:	6818      	ldr	r0, [r3, #0]
 800d7d2:	f7ff bfd3 	b.w	800d77c <_raise_r>
 800d7d6:	bf00      	nop
 800d7d8:	200000ec 	.word	0x200000ec

0800d7dc <_kill_r>:
 800d7dc:	b538      	push	{r3, r4, r5, lr}
 800d7de:	4d07      	ldr	r5, [pc, #28]	; (800d7fc <_kill_r+0x20>)
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	4608      	mov	r0, r1
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	602b      	str	r3, [r5, #0]
 800d7ea:	f7f5 fe8f 	bl	800350c <_kill>
 800d7ee:	1c43      	adds	r3, r0, #1
 800d7f0:	d102      	bne.n	800d7f8 <_kill_r+0x1c>
 800d7f2:	682b      	ldr	r3, [r5, #0]
 800d7f4:	b103      	cbz	r3, 800d7f8 <_kill_r+0x1c>
 800d7f6:	6023      	str	r3, [r4, #0]
 800d7f8:	bd38      	pop	{r3, r4, r5, pc}
 800d7fa:	bf00      	nop
 800d7fc:	2000384c 	.word	0x2000384c

0800d800 <_getpid_r>:
 800d800:	f7f5 be7c 	b.w	80034fc <_getpid>

0800d804 <_init>:
 800d804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d806:	bf00      	nop
 800d808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d80a:	bc08      	pop	{r3}
 800d80c:	469e      	mov	lr, r3
 800d80e:	4770      	bx	lr

0800d810 <_fini>:
 800d810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d812:	bf00      	nop
 800d814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d816:	bc08      	pop	{r3}
 800d818:	469e      	mov	lr, r3
 800d81a:	4770      	bx	lr
